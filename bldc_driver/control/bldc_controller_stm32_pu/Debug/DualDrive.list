
DualDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfc0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000388  0800c198  0800c198  0000d198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c520  0800c520  0000e518  2**0
                  CONTENTS
  4 .ARM          00000000  0800c520  0800c520  0000e518  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c520  0800c520  0000e518  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c520  0800c520  0000d520  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c524  0800c524  0000d524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000518  20000000  0800c528  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000958  20000518  0800ca40  0000e518  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e70  0800ca40  0000ee70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e518  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a9d7  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000325d  00000000  00000000  00028f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  0002c180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001454  00000000  00000000  0002dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002299c  00000000  00000000  0002f014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c06f  00000000  00000000  000519b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9ead  00000000  00000000  0006da1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001578cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007bc0  00000000  00000000  00157910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000084  00000000  00000000  0015f4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000518 	.word	0x20000518
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c180 	.word	0x0800c180

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000051c 	.word	0x2000051c
 8000214:	0800c180 	.word	0x0800c180

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2f>:
 8000b40:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b44:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b48:	bf24      	itt	cs
 8000b4a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b4e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b52:	d90d      	bls.n	8000b70 <__aeabi_d2f+0x30>
 8000b54:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b58:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b5c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b60:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b64:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b68:	bf08      	it	eq
 8000b6a:	f020 0001 	biceq.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b74:	d121      	bne.n	8000bba <__aeabi_d2f+0x7a>
 8000b76:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b7a:	bfbc      	itt	lt
 8000b7c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b80:	4770      	bxlt	lr
 8000b82:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b86:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b8a:	f1c2 0218 	rsb	r2, r2, #24
 8000b8e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b92:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b96:	fa20 f002 	lsr.w	r0, r0, r2
 8000b9a:	bf18      	it	ne
 8000b9c:	f040 0001 	orrne.w	r0, r0, #1
 8000ba0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ba8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bac:	ea40 000c 	orr.w	r0, r0, ip
 8000bb0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bb8:	e7cc      	b.n	8000b54 <__aeabi_d2f+0x14>
 8000bba:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bbe:	d107      	bne.n	8000bd0 <__aeabi_d2f+0x90>
 8000bc0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bc4:	bf1e      	ittt	ne
 8000bc6:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bca:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000bce:	4770      	bxne	lr
 8000bd0:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000bd4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bd8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_frsub>:
 8000be0:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000be4:	e002      	b.n	8000bec <__addsf3>
 8000be6:	bf00      	nop

08000be8 <__aeabi_fsub>:
 8000be8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bec <__addsf3>:
 8000bec:	0042      	lsls	r2, r0, #1
 8000bee:	bf1f      	itttt	ne
 8000bf0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bf4:	ea92 0f03 	teqne	r2, r3
 8000bf8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bfc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c00:	d06a      	beq.n	8000cd8 <__addsf3+0xec>
 8000c02:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c06:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c0a:	bfc1      	itttt	gt
 8000c0c:	18d2      	addgt	r2, r2, r3
 8000c0e:	4041      	eorgt	r1, r0
 8000c10:	4048      	eorgt	r0, r1
 8000c12:	4041      	eorgt	r1, r0
 8000c14:	bfb8      	it	lt
 8000c16:	425b      	neglt	r3, r3
 8000c18:	2b19      	cmp	r3, #25
 8000c1a:	bf88      	it	hi
 8000c1c:	4770      	bxhi	lr
 8000c1e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c26:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c2a:	bf18      	it	ne
 8000c2c:	4240      	negne	r0, r0
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c32:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c36:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4249      	negne	r1, r1
 8000c3e:	ea92 0f03 	teq	r2, r3
 8000c42:	d03f      	beq.n	8000cc4 <__addsf3+0xd8>
 8000c44:	f1a2 0201 	sub.w	r2, r2, #1
 8000c48:	fa41 fc03 	asr.w	ip, r1, r3
 8000c4c:	eb10 000c 	adds.w	r0, r0, ip
 8000c50:	f1c3 0320 	rsb	r3, r3, #32
 8000c54:	fa01 f103 	lsl.w	r1, r1, r3
 8000c58:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c5c:	d502      	bpl.n	8000c64 <__addsf3+0x78>
 8000c5e:	4249      	negs	r1, r1
 8000c60:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c64:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c68:	d313      	bcc.n	8000c92 <__addsf3+0xa6>
 8000c6a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c6e:	d306      	bcc.n	8000c7e <__addsf3+0x92>
 8000c70:	0840      	lsrs	r0, r0, #1
 8000c72:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c76:	f102 0201 	add.w	r2, r2, #1
 8000c7a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c7c:	d251      	bcs.n	8000d22 <__addsf3+0x136>
 8000c7e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c82:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c86:	bf08      	it	eq
 8000c88:	f020 0001 	biceq.w	r0, r0, #1
 8000c8c:	ea40 0003 	orr.w	r0, r0, r3
 8000c90:	4770      	bx	lr
 8000c92:	0049      	lsls	r1, r1, #1
 8000c94:	eb40 0000 	adc.w	r0, r0, r0
 8000c98:	3a01      	subs	r2, #1
 8000c9a:	bf28      	it	cs
 8000c9c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000ca0:	d2ed      	bcs.n	8000c7e <__addsf3+0x92>
 8000ca2:	fab0 fc80 	clz	ip, r0
 8000ca6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000caa:	ebb2 020c 	subs.w	r2, r2, ip
 8000cae:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cb2:	bfaa      	itet	ge
 8000cb4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cb8:	4252      	neglt	r2, r2
 8000cba:	4318      	orrge	r0, r3
 8000cbc:	bfbc      	itt	lt
 8000cbe:	40d0      	lsrlt	r0, r2
 8000cc0:	4318      	orrlt	r0, r3
 8000cc2:	4770      	bx	lr
 8000cc4:	f092 0f00 	teq	r2, #0
 8000cc8:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ccc:	bf06      	itte	eq
 8000cce:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000cd2:	3201      	addeq	r2, #1
 8000cd4:	3b01      	subne	r3, #1
 8000cd6:	e7b5      	b.n	8000c44 <__addsf3+0x58>
 8000cd8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cdc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ce0:	bf18      	it	ne
 8000ce2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ce6:	d021      	beq.n	8000d2c <__addsf3+0x140>
 8000ce8:	ea92 0f03 	teq	r2, r3
 8000cec:	d004      	beq.n	8000cf8 <__addsf3+0x10c>
 8000cee:	f092 0f00 	teq	r2, #0
 8000cf2:	bf08      	it	eq
 8000cf4:	4608      	moveq	r0, r1
 8000cf6:	4770      	bx	lr
 8000cf8:	ea90 0f01 	teq	r0, r1
 8000cfc:	bf1c      	itt	ne
 8000cfe:	2000      	movne	r0, #0
 8000d00:	4770      	bxne	lr
 8000d02:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d06:	d104      	bne.n	8000d12 <__addsf3+0x126>
 8000d08:	0040      	lsls	r0, r0, #1
 8000d0a:	bf28      	it	cs
 8000d0c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d10:	4770      	bx	lr
 8000d12:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d16:	bf3c      	itt	cc
 8000d18:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d1c:	4770      	bxcc	lr
 8000d1e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d22:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d2a:	4770      	bx	lr
 8000d2c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d30:	bf16      	itet	ne
 8000d32:	4608      	movne	r0, r1
 8000d34:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d38:	4601      	movne	r1, r0
 8000d3a:	0242      	lsls	r2, r0, #9
 8000d3c:	bf06      	itte	eq
 8000d3e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d42:	ea90 0f01 	teqeq	r0, r1
 8000d46:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d4a:	4770      	bx	lr

08000d4c <__aeabi_ui2f>:
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	e004      	b.n	8000d5c <__aeabi_i2f+0x8>
 8000d52:	bf00      	nop

08000d54 <__aeabi_i2f>:
 8000d54:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d58:	bf48      	it	mi
 8000d5a:	4240      	negmi	r0, r0
 8000d5c:	ea5f 0c00 	movs.w	ip, r0
 8000d60:	bf08      	it	eq
 8000d62:	4770      	bxeq	lr
 8000d64:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d68:	4601      	mov	r1, r0
 8000d6a:	f04f 0000 	mov.w	r0, #0
 8000d6e:	e01c      	b.n	8000daa <__aeabi_l2f+0x2a>

08000d70 <__aeabi_ul2f>:
 8000d70:	ea50 0201 	orrs.w	r2, r0, r1
 8000d74:	bf08      	it	eq
 8000d76:	4770      	bxeq	lr
 8000d78:	f04f 0300 	mov.w	r3, #0
 8000d7c:	e00a      	b.n	8000d94 <__aeabi_l2f+0x14>
 8000d7e:	bf00      	nop

08000d80 <__aeabi_l2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d8c:	d502      	bpl.n	8000d94 <__aeabi_l2f+0x14>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	ea5f 0c01 	movs.w	ip, r1
 8000d98:	bf02      	ittt	eq
 8000d9a:	4684      	moveq	ip, r0
 8000d9c:	4601      	moveq	r1, r0
 8000d9e:	2000      	moveq	r0, #0
 8000da0:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000da4:	bf08      	it	eq
 8000da6:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000daa:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000dae:	fabc f28c 	clz	r2, ip
 8000db2:	3a08      	subs	r2, #8
 8000db4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000db8:	db10      	blt.n	8000ddc <__aeabi_l2f+0x5c>
 8000dba:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbe:	4463      	add	r3, ip
 8000dc0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dc4:	f1c2 0220 	rsb	r2, r2, #32
 8000dc8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000dcc:	fa20 f202 	lsr.w	r2, r0, r2
 8000dd0:	eb43 0002 	adc.w	r0, r3, r2
 8000dd4:	bf08      	it	eq
 8000dd6:	f020 0001 	biceq.w	r0, r0, #1
 8000dda:	4770      	bx	lr
 8000ddc:	f102 0220 	add.w	r2, r2, #32
 8000de0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000de4:	f1c2 0220 	rsb	r2, r2, #32
 8000de8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dec:	fa21 f202 	lsr.w	r2, r1, r2
 8000df0:	eb43 0002 	adc.w	r0, r3, r2
 8000df4:	bf08      	it	eq
 8000df6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dfa:	4770      	bx	lr
 8000dfc:	0000      	movs	r0, r0
	...

08000e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e06:	f004 f9a8 	bl	800515a <HAL_Init>

  /* USER CODE BEGIN Init */
	motor_nbr = 1;
 8000e0a:	4bb9      	ldr	r3, [pc, #740]	@ (80010f0 <main+0x2f0>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e10:	f000 f9e8 	bl	80011e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e14:	f000 fd1a 	bl	800184c <MX_GPIO_Init>
  MX_DMA_Init();
 8000e18:	f000 fce6 	bl	80017e8 <MX_DMA_Init>
  MX_FDCAN1_Init();
 8000e1c:	f000 fb42 	bl	80014a4 <MX_FDCAN1_Init>
  MX_SPI1_Init();
 8000e20:	f000 fbdc 	bl	80015dc <MX_SPI1_Init>
  MX_ADC1_Init();
 8000e24:	f000 fa2a 	bl	800127c <MX_ADC1_Init>

  MX_TIM1_Init();
 8000e28:	f000 fc16 	bl	8001658 <MX_TIM1_Init>
  MX_ADC2_Init();
 8000e2c:	f000 fa9e 	bl	800136c <MX_ADC2_Init>
  MX_CORDIC_Init();
 8000e30:	f000 fb02 	bl	8001438 <MX_CORDIC_Init>
  MX_CRC_Init();
 8000e34:	f000 fb14 	bl	8001460 <MX_CRC_Init>
  MX_FMAC_Init();
 8000e38:	f000 fbbc 	bl	80015b4 <MX_FMAC_Init>
  /* USER CODE BEGIN 2 */
	//Delay SETUP
	DWT_Init();
 8000e3c:	f000 fd78 	bl	8001930 <DWT_Init>
	//SPI SETUP
	MagneticSensorSPI_init(AS5048A_SPI);
 8000e40:	4bac      	ldr	r3, [pc, #688]	@ (80010f4 <main+0x2f4>)
 8000e42:	691a      	ldr	r2, [r3, #16]
 8000e44:	9200      	str	r2, [sp, #0]
 8000e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e48:	f001 f982 	bl	8002150 <MagneticSensorSPI_init>
	//POSITION SENSOR SETUP
	Sensor_init();
 8000e4c:	f001 faa2 	bl	8002394 <Sensor_init>
	//
	//Driver Setup
	state_enable = 1;
 8000e50:	4ba9      	ldr	r3, [pc, #676]	@ (80010f8 <main+0x2f8>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]

	voltage_sensor_align = 2; // aligning voltage [V]
 8000e56:	4ba9      	ldr	r3, [pc, #676]	@ (80010fc <main+0x2fc>)
 8000e58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e5c:	601a      	str	r2, [r3, #0]
	velocity_index_search = 2; // index search velocity [rad/s]
 8000e5e:	4ba8      	ldr	r3, [pc, #672]	@ (8001100 <main+0x300>)
 8000e60:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e64:	601a      	str	r2, [r3, #0]

	voltage_power_supply = 24.0;
 8000e66:	4ba7      	ldr	r3, [pc, #668]	@ (8001104 <main+0x304>)
 8000e68:	4aa7      	ldr	r2, [pc, #668]	@ (8001108 <main+0x308>)
 8000e6a:	601a      	str	r2, [r3, #0]

	voltage_limit = 24.0;
 8000e6c:	4ba7      	ldr	r3, [pc, #668]	@ (800110c <main+0x30c>)
 8000e6e:	4aa6      	ldr	r2, [pc, #664]	@ (8001108 <main+0x308>)
 8000e70:	601a      	str	r2, [r3, #0]
	current_limit = 24.0;
 8000e72:	4ba7      	ldr	r3, [pc, #668]	@ (8001110 <main+0x310>)
 8000e74:	4aa4      	ldr	r2, [pc, #656]	@ (8001108 <main+0x308>)
 8000e76:	601a      	str	r2, [r3, #0]
	velocity_limit = 30.0;
 8000e78:	4ba6      	ldr	r3, [pc, #664]	@ (8001114 <main+0x314>)
 8000e7a:	4aa7      	ldr	r2, [pc, #668]	@ (8001118 <main+0x318>)
 8000e7c:	601a      	str	r2, [r3, #0]

	Command_setpoint = 0.0;
 8000e7e:	4ba7      	ldr	r3, [pc, #668]	@ (800111c <main+0x31c>)
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
	offset_Command_setpoint = -2.0;
 8000e86:	4ba6      	ldr	r3, [pc, #664]	@ (8001120 <main+0x320>)
 8000e88:	f04f 4240 	mov.w	r2, #3221225472	@ 0xc0000000
 8000e8c:	601a      	str	r2, [r3, #0]
	LPF_Command_setpoint.Tf = 0.03;
 8000e8e:	4ba5      	ldr	r3, [pc, #660]	@ (8001124 <main+0x324>)
 8000e90:	4aa5      	ldr	r2, [pc, #660]	@ (8001128 <main+0x328>)
 8000e92:	60da      	str	r2, [r3, #12]
	initGain();
 8000e94:	f002 f96e 	bl	8003174 <initGain>
	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8000e98:	2201      	movs	r2, #1
 8000e9a:	2101      	movs	r1, #1
 8000e9c:	48a3      	ldr	r0, [pc, #652]	@ (800112c <main+0x32c>)
 8000e9e:	f006 ff9d 	bl	8007ddc <HAL_GPIO_WritePin>

	//CURRENT SENSE SETUP
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	49a2      	ldr	r1, [pc, #648]	@ (8001130 <main+0x330>)
 8000ea6:	48a3      	ldr	r0, [pc, #652]	@ (8001134 <main+0x334>)
 8000ea8:	f004 fdc0 	bl	8005a2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_b, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	49a2      	ldr	r1, [pc, #648]	@ (8001138 <main+0x338>)
 8000eb0:	48a2      	ldr	r0, [pc, #648]	@ (800113c <main+0x33c>)
 8000eb2:	f004 fdbb 	bl	8005a2c <HAL_ADC_Start_DMA>
	initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8000eb6:	4ba2      	ldr	r3, [pc, #648]	@ (8001140 <main+0x340>)
 8000eb8:	edd3 7a00 	vldr	s15, [r3]
 8000ebc:	4ba1      	ldr	r3, [pc, #644]	@ (8001144 <main+0x344>)
 8000ebe:	ed93 7a00 	vldr	s14, [r3]
 8000ec2:	eef0 0a47 	vmov.f32	s1, s14
 8000ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eca:	f000 fd61 	bl	8001990 <initCurrentsense>
	calibrateOffsets();
 8000ece:	f000 fd81 	bl	80019d4 <calibrateOffsets>
	//
	//PWM SETUP
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);  //pinMode
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	489c      	ldr	r0, [pc, #624]	@ (8001148 <main+0x348>)
 8000ed6:	f008 fc5f 	bl	8009798 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8000eda:	2104      	movs	r1, #4
 8000edc:	489a      	ldr	r0, [pc, #616]	@ (8001148 <main+0x348>)
 8000ede:	f008 fc5b 	bl	8009798 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8000ee2:	2108      	movs	r1, #8
 8000ee4:	4898      	ldr	r0, [pc, #608]	@ (8001148 <main+0x348>)
 8000ee6:	f008 fc57 	bl	8009798 <HAL_TIM_PWM_Start>
//
//	//Control system configuration

//	//====Motor====

	zero_electric_angle_avg = motor_param[0][motor_nbr];
 8000eea:	4b81      	ldr	r3, [pc, #516]	@ (80010f0 <main+0x2f0>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a97      	ldr	r2, [pc, #604]	@ (800114c <main+0x34c>)
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a96      	ldr	r2, [pc, #600]	@ (8001150 <main+0x350>)
 8000ef8:	6013      	str	r3, [r2, #0]
	initFOC(motor_param[0][motor_nbr], sensor_dir[motor_nbr]);
 8000efa:	4b7d      	ldr	r3, [pc, #500]	@ (80010f0 <main+0x2f0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a93      	ldr	r2, [pc, #588]	@ (800114c <main+0x34c>)
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	4413      	add	r3, r2
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	4b79      	ldr	r3, [pc, #484]	@ (80010f0 <main+0x2f0>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a91      	ldr	r2, [pc, #580]	@ (8001154 <main+0x354>)
 8000f0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f12:	b25b      	sxtb	r3, r3
 8000f14:	4618      	mov	r0, r3
 8000f16:	eeb0 0a67 	vmov.f32	s0, s15
 8000f1a:	f002 fb5f 	bl	80035dc <initFOC>
//	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
//	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
//	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
//	TxHeader.MessageMarker = 0;

	t1 = 0;
 8000f1e:	4b8e      	ldr	r3, [pc, #568]	@ (8001158 <main+0x358>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
	t2 = micros();
 8000f24:	f000 fd1c 	bl	8001960 <micros>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a8c      	ldr	r2, [pc, #560]	@ (800115c <main+0x35c>)
 8000f2c:	6013      	str	r3, [r2, #0]
	_1a = 0;
 8000f2e:	4b8c      	ldr	r3, [pc, #560]	@ (8001160 <main+0x360>)
 8000f30:	f04f 0200 	mov.w	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
	_2a = 0;
 8000f36:	4b8b      	ldr	r3, [pc, #556]	@ (8001164 <main+0x364>)
 8000f38:	f04f 0200 	mov.w	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
	_3a = 0;
 8000f3e:	4b8a      	ldr	r3, [pc, #552]	@ (8001168 <main+0x368>)
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
		//												       //
		//                   Don't comment                     //
		//													   //
		//													   //
		//=====================================================//
		updateSensor();
 8000f46:	f001 fa53 	bl	80023f0 <updateSensor>
		adaptiveZero();
 8000f4a:	f001 fcbf 	bl	80028cc <adaptiveZero>

		debug_current_abc = getPhaseCurrents();
 8000f4e:	f000 fdb7 	bl	8001ac0 <getPhaseCurrents>
 8000f52:	eeb0 6a40 	vmov.f32	s12, s0
 8000f56:	eef0 6a60 	vmov.f32	s13, s1
 8000f5a:	eeb0 7a41 	vmov.f32	s14, s2
 8000f5e:	eef0 7a61 	vmov.f32	s15, s3
 8000f62:	4b82      	ldr	r3, [pc, #520]	@ (800116c <main+0x36c>)
 8000f64:	ed83 6a00 	vstr	s12, [r3]
 8000f68:	edc3 6a01 	vstr	s13, [r3, #4]
 8000f6c:	ed83 7a02 	vstr	s14, [r3, #8]
 8000f70:	edc3 7a03 	vstr	s15, [r3, #12]
		debug_current_dq = current;
 8000f74:	4b7e      	ldr	r3, [pc, #504]	@ (8001170 <main+0x370>)
 8000f76:	4a7f      	ldr	r2, [pc, #508]	@ (8001174 <main+0x374>)
 8000f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f7c:	e883 0003 	stmia.w	r3, {r0, r1}
		_velocity = shaftVelocity();
 8000f80:	f001 fc14 	bl	80027ac <shaftVelocity>
 8000f84:	eef0 7a40 	vmov.f32	s15, s0
 8000f88:	4b7b      	ldr	r3, [pc, #492]	@ (8001178 <main+0x378>)
 8000f8a:	edc3 7a00 	vstr	s15, [r3]
		_angle = shaftAngle() - offset_Command_setpoint;
 8000f8e:	f001 fbd3 	bl	8002738 <shaftAngle>
 8000f92:	eeb0 7a40 	vmov.f32	s14, s0
 8000f96:	4b62      	ldr	r3, [pc, #392]	@ (8001120 <main+0x320>)
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa0:	4b76      	ldr	r3, [pc, #472]	@ (800117c <main+0x37c>)
 8000fa2:	edc3 7a00 	vstr	s15, [r3]
		_acceleration = shaftAcceleration() ;
 8000fa6:	f001 fc33 	bl	8002810 <shaftAcceleration>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	4b74      	ldr	r3, [pc, #464]	@ (8001180 <main+0x380>)
 8000fb0:	edc3 7a00 	vstr	s15, [r3]
		_setpoint = Command_setpoint ;
 8000fb4:	4b59      	ldr	r3, [pc, #356]	@ (800111c <main+0x31c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a72      	ldr	r2, [pc, #456]	@ (8001184 <main+0x384>)
 8000fba:	6013      	str	r3, [r2, #0]

		period = micros() - t1;
 8000fbc:	f000 fcd0 	bl	8001960 <micros>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	4b65      	ldr	r3, [pc, #404]	@ (8001158 <main+0x358>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	4a6f      	ldr	r2, [pc, #444]	@ (8001188 <main+0x388>)
 8000fca:	6013      	str	r3, [r2, #0]
		t1 = micros();
 8000fcc:	f000 fcc8 	bl	8001960 <micros>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	4a61      	ldr	r2, [pc, #388]	@ (8001158 <main+0x358>)
 8000fd4:	6013      	str	r3, [r2, #0]

//		state_limit = HAL_GPIO_ReadPin(LIMIT_GPIO_Port, LIMIT_Pin); // limit = 1
//		if (Command_setpoint != prev_Command_setpoint)
//			state_enable = 1;
		if ((current_D.output_prev >= 23.9) || (current_D.output_prev < -23.9))
 8000fd6:	4b6d      	ldr	r3, [pc, #436]	@ (800118c <main+0x38c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fa80 	bl	80004e0 <__aeabi_f2d>
 8000fe0:	a33b      	add	r3, pc, #236	@ (adr r3, 80010d0 <main+0x2d0>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	f7ff fd59 	bl	8000a9c <__aeabi_dcmpge>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d10c      	bne.n	800100a <main+0x20a>
 8000ff0:	4b66      	ldr	r3, [pc, #408]	@ (800118c <main+0x38c>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fa73 	bl	80004e0 <__aeabi_f2d>
 8000ffa:	a337      	add	r3, pc, #220	@ (adr r3, 80010d8 <main+0x2d8>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff fd38 	bl	8000a74 <__aeabi_dcmplt>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d002      	beq.n	8001010 <main+0x210>
			state_enable = 0;
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <main+0x2f8>)
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
//		if (state_enable == 0)
//			Command_setpoint = shaftAngle();
		if (Command_setpoint != prev_Command_setpoint)
 8001010:	4b42      	ldr	r3, [pc, #264]	@ (800111c <main+0x31c>)
 8001012:	ed93 7a00 	vldr	s14, [r3]
 8001016:	4b5e      	ldr	r3, [pc, #376]	@ (8001190 <main+0x390>)
 8001018:	edd3 7a00 	vldr	s15, [r3]
 800101c:	eeb4 7a67 	vcmp.f32	s14, s15
 8001020:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001024:	d01d      	beq.n	8001062 <main+0x262>
			if((Command_setpoint <= 0.1)&&(Command_setpoint >= -0.1))
 8001026:	4b3d      	ldr	r3, [pc, #244]	@ (800111c <main+0x31c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff fa58 	bl	80004e0 <__aeabi_f2d>
 8001030:	a32b      	add	r3, pc, #172	@ (adr r3, 80010e0 <main+0x2e0>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	f7ff fd27 	bl	8000a88 <__aeabi_dcmple>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d010      	beq.n	8001062 <main+0x262>
 8001040:	4b36      	ldr	r3, [pc, #216]	@ (800111c <main+0x31c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa4b 	bl	80004e0 <__aeabi_f2d>
 800104a:	a327      	add	r3, pc, #156	@ (adr r3, 80010e8 <main+0x2e8>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fd24 	bl	8000a9c <__aeabi_dcmpge>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <main+0x262>
				current_D.integral_prev = 0.0f ;
 800105a:	4b4c      	ldr	r3, [pc, #304]	@ (800118c <main+0x38c>)
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	605a      	str	r2, [r3, #4]
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, state_enable);
 8001062:	4b25      	ldr	r3, [pc, #148]	@ (80010f8 <main+0x2f8>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	2101      	movs	r1, #1
 800106a:	4830      	ldr	r0, [pc, #192]	@ (800112c <main+0x32c>)
 800106c:	f006 feb6 	bl	8007ddc <HAL_GPIO_WritePin>
		prev_Command_setpoint = Command_setpoint;
 8001070:	4b2a      	ldr	r3, [pc, #168]	@ (800111c <main+0x31c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a46      	ldr	r2, [pc, #280]	@ (8001190 <main+0x390>)
 8001076:	6013      	str	r3, [r2, #0]
		//                        SMC                          //
		//													   //
		//													   //
		//=====================================================//

		LPF_Command_setpoint.x = Command_setpoint + offset_Command_setpoint;
 8001078:	4b28      	ldr	r3, [pc, #160]	@ (800111c <main+0x31c>)
 800107a:	ed93 7a00 	vldr	s14, [r3]
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <main+0x320>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001088:	4b26      	ldr	r3, [pc, #152]	@ (8001124 <main+0x324>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
		LPF_Command_setpoint = LowPassFilter(LPF_Command_setpoint);
 800108e:	4e25      	ldr	r6, [pc, #148]	@ (8001124 <main+0x324>)
 8001090:	463c      	mov	r4, r7
 8001092:	4b24      	ldr	r3, [pc, #144]	@ (8001124 <main+0x324>)
 8001094:	466d      	mov	r5, sp
 8001096:	f103 020c 	add.w	r2, r3, #12
 800109a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800109e:	e885 0003 	stmia.w	r5, {r0, r1}
 80010a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010a4:	4620      	mov	r0, r4
 80010a6:	f002 fbc1 	bl	800382c <LowPassFilter>
 80010aa:	4635      	mov	r5, r6
 80010ac:	463c      	mov	r4, r7
 80010ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b2:	6823      	ldr	r3, [r4, #0]
 80010b4:	602b      	str	r3, [r5, #0]
		LP_Command_setpoint = LPF_Command_setpoint.y_prev;  // filter values
 80010b6:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <main+0x324>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a36      	ldr	r2, [pc, #216]	@ (8001194 <main+0x394>)
 80010bc:	6013      	str	r3, [r2, #0]
		if (state_control == 1)
 80010be:	4b36      	ldr	r3, [pc, #216]	@ (8001198 <main+0x398>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d16f      	bne.n	80011a6 <main+0x3a6>
			move_angle(LP_Command_setpoint);
 80010c6:	4b33      	ldr	r3, [pc, #204]	@ (8001194 <main+0x394>)
 80010c8:	edd3 7a00 	vldr	s15, [r3]
 80010cc:	e066      	b.n	800119c <main+0x39c>
 80010ce:	bf00      	nop
 80010d0:	66666666 	.word	0x66666666
 80010d4:	4037e666 	.word	0x4037e666
 80010d8:	66666666 	.word	0x66666666
 80010dc:	c037e666 	.word	0xc037e666
 80010e0:	9999999a 	.word	0x9999999a
 80010e4:	3fb99999 	.word	0x3fb99999
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	bfb99999 	.word	0xbfb99999
 80010f0:	20000d24 	.word	0x20000d24
 80010f4:	20000000 	.word	0x20000000
 80010f8:	20000d28 	.word	0x20000d28
 80010fc:	20000c3c 	.word	0x20000c3c
 8001100:	20000c40 	.word	0x20000c40
 8001104:	20000c44 	.word	0x20000c44
 8001108:	41c00000 	.word	0x41c00000
 800110c:	20000c60 	.word	0x20000c60
 8001110:	20000c64 	.word	0x20000c64
 8001114:	20000c68 	.word	0x20000c68
 8001118:	41f00000 	.word	0x41f00000
 800111c:	20000cf8 	.word	0x20000cf8
 8001120:	20000d04 	.word	0x20000d04
 8001124:	20000994 	.word	0x20000994
 8001128:	3cf5c28f 	.word	0x3cf5c28f
 800112c:	48000400 	.word	0x48000400
 8001130:	200008f0 	.word	0x200008f0
 8001134:	20000534 	.word	0x20000534
 8001138:	200008f4 	.word	0x200008f4
 800113c:	200005a0 	.word	0x200005a0
 8001140:	200008e8 	.word	0x200008e8
 8001144:	200008ec 	.word	0x200008ec
 8001148:	20000818 	.word	0x20000818
 800114c:	20000020 	.word	0x20000020
 8001150:	20000018 	.word	0x20000018
 8001154:	20000494 	.word	0x20000494
 8001158:	20000cec 	.word	0x20000cec
 800115c:	20000cf0 	.word	0x20000cf0
 8001160:	20000d18 	.word	0x20000d18
 8001164:	20000d1c 	.word	0x20000d1c
 8001168:	20000d20 	.word	0x20000d20
 800116c:	200008b0 	.word	0x200008b0
 8001170:	200008a8 	.word	0x200008a8
 8001174:	20000928 	.word	0x20000928
 8001178:	20000d0c 	.word	0x20000d0c
 800117c:	20000d10 	.word	0x20000d10
 8001180:	20000d08 	.word	0x20000d08
 8001184:	20000d14 	.word	0x20000d14
 8001188:	20000cf4 	.word	0x20000cf4
 800118c:	200009e8 	.word	0x200009e8
 8001190:	20000d00 	.word	0x20000d00
 8001194:	20000cfc 	.word	0x20000cfc
 8001198:	20000d2c 	.word	0x20000d2c
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	f003 fb58 	bl	8004854 <move_angle>
 80011a4:	e016      	b.n	80011d4 <main+0x3d4>
		else if (state_control == 0)
 80011a6:	4b0d      	ldr	r3, [pc, #52]	@ (80011dc <main+0x3dc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d107      	bne.n	80011be <main+0x3be>
			SMC_angle(LP_Command_setpoint);
 80011ae:	4b0c      	ldr	r3, [pc, #48]	@ (80011e0 <main+0x3e0>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	eeb0 0a67 	vmov.f32	s0, s15
 80011b8:	f002 feb2 	bl	8003f20 <SMC_angle>
 80011bc:	e00a      	b.n	80011d4 <main+0x3d4>
//			SMC_velocity(LP_Command_setpoint);
		else if (state_control == 2)
 80011be:	4b07      	ldr	r3, [pc, #28]	@ (80011dc <main+0x3dc>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d106      	bne.n	80011d4 <main+0x3d4>
			fusion_angle(LP_Command_setpoint);
 80011c6:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <main+0x3e0>)
 80011c8:	edd3 7a00 	vldr	s15, [r3]
 80011cc:	eeb0 0a67 	vmov.f32	s0, s15
 80011d0:	f003 fa6a 	bl	80046a8 <fusion_angle>
		loopFOC();
 80011d4:	f002 fa3a 	bl	800364c <loopFOC>
		updateSensor();
 80011d8:	e6b5      	b.n	8000f46 <main+0x146>
 80011da:	bf00      	nop
 80011dc:	20000d2c 	.word	0x20000d2c
 80011e0:	20000cfc 	.word	0x20000cfc

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	@ 0x50
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0318 	add.w	r3, r7, #24
 80011ee:	2238      	movs	r2, #56	@ 0x38
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f009 fdb6 	bl	800ad64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001206:	2000      	movs	r0, #0
 8001208:	f006 fe00 	bl	8007e0c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001210:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001216:	2340      	movs	r3, #64	@ 0x40
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800121a:	2302      	movs	r3, #2
 800121c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800121e:	2302      	movs	r3, #2
 8001220:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001222:	2304      	movs	r3, #4
 8001224:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001226:	2355      	movs	r3, #85	@ 0x55
 8001228:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800122a:	2302      	movs	r3, #2
 800122c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800122e:	2302      	movs	r3, #2
 8001230:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001232:	2302      	movs	r3, #2
 8001234:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001236:	f107 0318 	add.w	r3, r7, #24
 800123a:	4618      	mov	r0, r3
 800123c:	f006 fe9a 	bl	8007f74 <HAL_RCC_OscConfig>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001246:	f003 fc67 	bl	8004b18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800124a:	230f      	movs	r3, #15
 800124c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800124e:	2303      	movs	r3, #3
 8001250:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	2104      	movs	r1, #4
 8001262:	4618      	mov	r0, r3
 8001264:	f007 f99e 	bl	80085a4 <HAL_RCC_ClockConfig>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800126e:	f003 fc53 	bl	8004b18 <Error_Handler>
  }
}
 8001272:	bf00      	nop
 8001274:	3750      	adds	r7, #80	@ 0x50
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	2220      	movs	r2, #32
 8001292:	2100      	movs	r1, #0
 8001294:	4618      	mov	r0, r3
 8001296:	f009 fd65 	bl	800ad64 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 800129a:	4b32      	ldr	r3, [pc, #200]	@ (8001364 <MX_ADC1_Init+0xe8>)
 800129c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80012a0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012a2:	4b30      	ldr	r3, [pc, #192]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012a4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012aa:	4b2e      	ldr	r3, [pc, #184]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80012b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012bc:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012c2:	4b28      	ldr	r3, [pc, #160]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012c4:	2204      	movs	r2, #4
 80012c6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012c8:	4b26      	ldr	r3, [pc, #152]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012ce:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012d0:	2201      	movs	r2, #1
 80012d2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80012d4:	4b23      	ldr	r3, [pc, #140]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80012f6:	4b1b      	ldr	r3, [pc, #108]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80012fc:	4b19      	ldr	r3, [pc, #100]	@ (8001364 <MX_ADC1_Init+0xe8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001304:	4817      	ldr	r0, [pc, #92]	@ (8001364 <MX_ADC1_Init+0xe8>)
 8001306:	f004 f9dd 	bl	80056c4 <HAL_ADC_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001310:	f003 fc02 	bl	8004b18 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001314:	2300      	movs	r3, #0
 8001316:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001318:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	@ (8001364 <MX_ADC1_Init+0xe8>)
 8001320:	f005 f9b4 	bl	800668c <HAL_ADCEx_MultiModeConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800132a:	f003 fbf5 	bl	8004b18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800132e:	4b0e      	ldr	r3, [pc, #56]	@ (8001368 <MX_ADC1_Init+0xec>)
 8001330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001332:	2306      	movs	r3, #6
 8001334:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001336:	2307      	movs	r3, #7
 8001338:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800133a:	237f      	movs	r3, #127	@ 0x7f
 800133c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800133e:	2304      	movs	r3, #4
 8001340:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4806      	ldr	r0, [pc, #24]	@ (8001364 <MX_ADC1_Init+0xe8>)
 800134c:	f004 fc56 	bl	8005bfc <HAL_ADC_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8001356:	f003 fbdf 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	@ 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000534 	.word	0x20000534
 8001368:	04300002 	.word	0x04300002

0800136c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2220      	movs	r2, #32
 8001376:	2100      	movs	r1, #0
 8001378:	4618      	mov	r0, r3
 800137a:	f009 fcf3 	bl	800ad64 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800137e:	4b2b      	ldr	r3, [pc, #172]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001380:	4a2b      	ldr	r2, [pc, #172]	@ (8001430 <MX_ADC2_Init+0xc4>)
 8001382:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001384:	4b29      	ldr	r3, [pc, #164]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001386:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800138a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800138c:	4b27      	ldr	r3, [pc, #156]	@ (800142c <MX_ADC2_Init+0xc0>)
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001392:	4b26      	ldr	r3, [pc, #152]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001394:	2200      	movs	r2, #0
 8001396:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001398:	4b24      	ldr	r3, [pc, #144]	@ (800142c <MX_ADC2_Init+0xc0>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800139e:	4b23      	ldr	r3, [pc, #140]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b21      	ldr	r3, [pc, #132]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80013aa:	4b20      	ldr	r3, [pc, #128]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80013b0:	4b1e      	ldr	r3, [pc, #120]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80013b6:	4b1d      	ldr	r3, [pc, #116]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80013bc:	4b1b      	ldr	r3, [pc, #108]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c4:	4b19      	ldr	r3, [pc, #100]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b18      	ldr	r3, [pc, #96]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80013d8:	4b14      	ldr	r3, [pc, #80]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013da:	2200      	movs	r2, #0
 80013dc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80013de:	4b13      	ldr	r3, [pc, #76]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80013e6:	4811      	ldr	r0, [pc, #68]	@ (800142c <MX_ADC2_Init+0xc0>)
 80013e8:	f004 f96c 	bl	80056c4 <HAL_ADC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80013f2:	f003 fb91 	bl	8004b18 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80013f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001434 <MX_ADC2_Init+0xc8>)
 80013f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fa:	2306      	movs	r3, #6
 80013fc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80013fe:	2307      	movs	r3, #7
 8001400:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001402:	237f      	movs	r3, #127	@ 0x7f
 8001404:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001406:	2304      	movs	r3, #4
 8001408:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800140e:	463b      	mov	r3, r7
 8001410:	4619      	mov	r1, r3
 8001412:	4806      	ldr	r0, [pc, #24]	@ (800142c <MX_ADC2_Init+0xc0>)
 8001414:	f004 fbf2 	bl	8005bfc <HAL_ADC_ConfigChannel>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800141e:	f003 fb7b 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3720      	adds	r7, #32
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200005a0 	.word	0x200005a0
 8001430:	50000100 	.word	0x50000100
 8001434:	08600004 	.word	0x08600004

08001438 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <MX_CORDIC_Init+0x20>)
 800143e:	4a07      	ldr	r2, [pc, #28]	@ (800145c <MX_CORDIC_Init+0x24>)
 8001440:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001442:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_CORDIC_Init+0x20>)
 8001444:	f005 fa0a 	bl	800685c <HAL_CORDIC_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 800144e:	f003 fb63 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	200006cc 	.word	0x200006cc
 800145c:	40020c00 	.word	0x40020c00

08001460 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001464:	4b0d      	ldr	r3, [pc, #52]	@ (800149c <MX_CRC_Init+0x3c>)
 8001466:	4a0e      	ldr	r2, [pc, #56]	@ (80014a0 <MX_CRC_Init+0x40>)
 8001468:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800146a:	4b0c      	ldr	r3, [pc, #48]	@ (800149c <MX_CRC_Init+0x3c>)
 800146c:	2200      	movs	r2, #0
 800146e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001470:	4b0a      	ldr	r3, [pc, #40]	@ (800149c <MX_CRC_Init+0x3c>)
 8001472:	2200      	movs	r2, #0
 8001474:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001476:	4b09      	ldr	r3, [pc, #36]	@ (800149c <MX_CRC_Init+0x3c>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800147c:	4b07      	ldr	r3, [pc, #28]	@ (800149c <MX_CRC_Init+0x3c>)
 800147e:	2200      	movs	r2, #0
 8001480:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <MX_CRC_Init+0x3c>)
 8001484:	2201      	movs	r2, #1
 8001486:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001488:	4804      	ldr	r0, [pc, #16]	@ (800149c <MX_CRC_Init+0x3c>)
 800148a:	f005 fb29 	bl	8006ae0 <HAL_CRC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8001494:	f003 fb40 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	200006f4 	.word	0x200006f4
 80014a0:	40023000 	.word	0x40023000

080014a4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b088      	sub	sp, #32
 80014a8:	af02      	add	r7, sp, #8
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80014aa:	4b3f      	ldr	r3, [pc, #252]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014ac:	4a3f      	ldr	r2, [pc, #252]	@ (80015ac <MX_FDCAN1_Init+0x108>)
 80014ae:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80014b0:	4b3d      	ldr	r3, [pc, #244]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80014b6:	4b3c      	ldr	r3, [pc, #240]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80014bc:	4b3a      	ldr	r3, [pc, #232]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014be:	2200      	movs	r2, #0
 80014c0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80014c2:	4b39      	ldr	r3, [pc, #228]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80014c8:	4b37      	ldr	r3, [pc, #220]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80014ce:	4b36      	ldr	r3, [pc, #216]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80014d4:	4b34      	ldr	r3, [pc, #208]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014d6:	2202      	movs	r2, #2
 80014d8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80014da:	4b33      	ldr	r3, [pc, #204]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014dc:	220b      	movs	r2, #11
 80014de:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80014e0:	4b31      	ldr	r3, [pc, #196]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014e2:	2249      	movs	r2, #73	@ 0x49
 80014e4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80014e6:	4b30      	ldr	r3, [pc, #192]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014e8:	220b      	movs	r2, #11
 80014ea:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 80014ec:	4b2e      	ldr	r3, [pc, #184]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014ee:	2205      	movs	r2, #5
 80014f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80014f2:	4b2d      	ldr	r3, [pc, #180]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014f4:	220f      	movs	r2, #15
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 80014f8:	4b2b      	ldr	r3, [pc, #172]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 80014fa:	2212      	movs	r2, #18
 80014fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80014fe:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 8001500:	220f      	movs	r2, #15
 8001502:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 8001506:	220a      	movs	r2, #10
 8001508:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 800150a:	4b27      	ldr	r3, [pc, #156]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 800150c:	2200      	movs	r2, #0
 800150e:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001510:	4b25      	ldr	r3, [pc, #148]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001516:	4824      	ldr	r0, [pc, #144]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 8001518:	f005 fe3e 	bl	8007198 <HAL_FDCAN_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001522:	f003 faf9 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
	FDCAN_FilterTypeDef CAN1Filter;

	CAN1Filter.IdType = FDCAN_STANDARD_ID;
 8001526:	2300      	movs	r3, #0
 8001528:	603b      	str	r3, [r7, #0]
	CAN1Filter.FilterIndex = 0;
 800152a:	2300      	movs	r3, #0
 800152c:	607b      	str	r3, [r7, #4]
	CAN1Filter.FilterType = FDCAN_FILTER_MASK;
 800152e:	2302      	movs	r3, #2
 8001530:	60bb      	str	r3, [r7, #8]
	CAN1Filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001532:	2301      	movs	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
//	can_id[4] = { 16, 128, 32, 64 };
//	CAN1Filter.FilterID1 = can_id[motor_nbr];
//	CAN1Filter.FilterID2 = can_id[motor_nbr];

	if (motor_nbr == 0) {
 8001536:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <MX_FDCAN1_Init+0x10c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d103      	bne.n	8001546 <MX_FDCAN1_Init+0xa2>
		CAN1Filter.FilterID1 = 0x80;
 800153e:	2380      	movs	r3, #128	@ 0x80
 8001540:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x80;
 8001542:	2380      	movs	r3, #128	@ 0x80
 8001544:	617b      	str	r3, [r7, #20]
//		datacheck = 1 ;
	}
	if (motor_nbr == 1) {
 8001546:	4b1a      	ldr	r3, [pc, #104]	@ (80015b0 <MX_FDCAN1_Init+0x10c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b01      	cmp	r3, #1
 800154c:	d103      	bne.n	8001556 <MX_FDCAN1_Init+0xb2>
		CAN1Filter.FilterID1 = 0x16;
 800154e:	2316      	movs	r3, #22
 8001550:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x16;
 8001552:	2316      	movs	r3, #22
 8001554:	617b      	str	r3, [r7, #20]
//		datacheck = 2 ;
	}
	if (motor_nbr == 2) {
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <MX_FDCAN1_Init+0x10c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d103      	bne.n	8001566 <MX_FDCAN1_Init+0xc2>
		CAN1Filter.FilterID1 = 0x24;
 800155e:	2324      	movs	r3, #36	@ 0x24
 8001560:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x24;
 8001562:	2324      	movs	r3, #36	@ 0x24
 8001564:	617b      	str	r3, [r7, #20]
//		datacheck = 3 ;
	}
	if (motor_nbr == 3) {
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <MX_FDCAN1_Init+0x10c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2b03      	cmp	r3, #3
 800156c:	d103      	bne.n	8001576 <MX_FDCAN1_Init+0xd2>
		CAN1Filter.FilterID1 = 0x32;
 800156e:	2332      	movs	r3, #50	@ 0x32
 8001570:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x32;
 8001572:	2332      	movs	r3, #50	@ 0x32
 8001574:	617b      	str	r3, [r7, #20]
//		datacheck = 4 ;
	}
	if (motor_nbr == 4) {
 8001576:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <MX_FDCAN1_Init+0x10c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b04      	cmp	r3, #4
 800157c:	d103      	bne.n	8001586 <MX_FDCAN1_Init+0xe2>
		CAN1Filter.FilterID1 = 0x69;
 800157e:	2369      	movs	r3, #105	@ 0x69
 8001580:	613b      	str	r3, [r7, #16]
		CAN1Filter.FilterID2 = 0x69;
 8001582:	2369      	movs	r3, #105	@ 0x69
 8001584:	617b      	str	r3, [r7, #20]
//		datacheck = 4 ;
	}
	HAL_FDCAN_ConfigFilter(&hfdcan1, &CAN1Filter);
 8001586:	463b      	mov	r3, r7
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 800158c:	f005 ff5e 	bl	800744c <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT,
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	2202      	movs	r2, #2
 8001598:	2102      	movs	r1, #2
 800159a:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_FDCAN1_Init+0x104>)
 800159c:	f005 ffb0 	bl	8007500 <HAL_FDCAN_ConfigGlobalFilter>
	FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE);

  /* USER CODE END FDCAN1_Init 2 */

}
 80015a0:	bf00      	nop
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000718 	.word	0x20000718
 80015ac:	40006400 	.word	0x40006400
 80015b0:	20000d24 	.word	0x20000d24

080015b4 <MX_FMAC_Init>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <MX_FMAC_Init+0x20>)
 80015ba:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <MX_FMAC_Init+0x24>)
 80015bc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_FMAC_Init+0x20>)
 80015c0:	f006 f9de 	bl	8007980 <HAL_FMAC_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_FMAC_Init+0x1a>
  {
    Error_Handler();
 80015ca:	f003 faa5 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000077c 	.word	0x2000077c
 80015d8:	40021400 	.word	0x40021400

080015dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001650 <MX_SPI1_Init+0x74>)
 80015e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001654 <MX_SPI1_Init+0x78>)
 80015e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015e6:	4b1a      	ldr	r3, [pc, #104]	@ (8001650 <MX_SPI1_Init+0x74>)
 80015e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015ee:	4b18      	ldr	r3, [pc, #96]	@ (8001650 <MX_SPI1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80015f4:	4b16      	ldr	r3, [pc, #88]	@ (8001650 <MX_SPI1_Init+0x74>)
 80015f6:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80015fa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015fc:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <MX_SPI1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001602:	4b13      	ldr	r3, [pc, #76]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001604:	2201      	movs	r2, #1
 8001606:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001608:	4b11      	ldr	r3, [pc, #68]	@ (8001650 <MX_SPI1_Init+0x74>)
 800160a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800160e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001610:	4b0f      	ldr	r3, [pc, #60]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001612:	2228      	movs	r2, #40	@ 0x28
 8001614:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001616:	4b0e      	ldr	r3, [pc, #56]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <MX_SPI1_Init+0x74>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001622:	4b0b      	ldr	r3, [pc, #44]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001628:	4b09      	ldr	r3, [pc, #36]	@ (8001650 <MX_SPI1_Init+0x74>)
 800162a:	2207      	movs	r2, #7
 800162c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162e:	4b08      	ldr	r3, [pc, #32]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <MX_SPI1_Init+0x74>)
 8001636:	2200      	movs	r2, #0
 8001638:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163a:	4805      	ldr	r0, [pc, #20]	@ (8001650 <MX_SPI1_Init+0x74>)
 800163c:	f007 fbd2 	bl	8008de4 <HAL_SPI_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001646:	f003 fa67 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200007b4 	.word	0x200007b4
 8001654:	40013000 	.word	0x40013000

08001658 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b09c      	sub	sp, #112	@ 0x70
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800166c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001678:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]
 8001680:	605a      	str	r2, [r3, #4]
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	60da      	str	r2, [r3, #12]
 8001686:	611a      	str	r2, [r3, #16]
 8001688:	615a      	str	r2, [r3, #20]
 800168a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800168c:	1d3b      	adds	r3, r7, #4
 800168e:	2234      	movs	r2, #52	@ 0x34
 8001690:	2100      	movs	r1, #0
 8001692:	4618      	mov	r0, r3
 8001694:	f009 fb66 	bl	800ad64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001698:	4b51      	ldr	r3, [pc, #324]	@ (80017e0 <MX_TIM1_Init+0x188>)
 800169a:	4a52      	ldr	r2, [pc, #328]	@ (80017e4 <MX_TIM1_Init+0x18c>)
 800169c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800169e:	4b50      	ldr	r3, [pc, #320]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80016a4:	4b4e      	ldr	r3, [pc, #312]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016a6:	2220      	movs	r2, #32
 80016a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 80016aa:	4b4d      	ldr	r3, [pc, #308]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016ac:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 80016b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b2:	4b4b      	ldr	r3, [pc, #300]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 80016b8:	4b49      	ldr	r3, [pc, #292]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016be:	4b48      	ldr	r3, [pc, #288]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016c0:	2280      	movs	r2, #128	@ 0x80
 80016c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016c4:	4846      	ldr	r0, [pc, #280]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016c6:	f007 ffaf 	bl	8009628 <HAL_TIM_Base_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016d0:	f003 fa22 	bl	8004b18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016d8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016de:	4619      	mov	r1, r3
 80016e0:	483f      	ldr	r0, [pc, #252]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016e2:	f008 fbf9 	bl	8009ed8 <HAL_TIM_ConfigClockSource>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80016ec:	f003 fa14 	bl	8004b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80016f0:	483b      	ldr	r0, [pc, #236]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80016f2:	f007 fff0 	bl	80096d6 <HAL_TIM_PWM_Init>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80016fc:	f003 fa0c 	bl	8004b18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	2300      	movs	r3, #0
 8001702:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001704:	2300      	movs	r3, #0
 8001706:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800170c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001710:	4619      	mov	r1, r3
 8001712:	4833      	ldr	r0, [pc, #204]	@ (80017e0 <MX_TIM1_Init+0x188>)
 8001714:	f009 f9a0 	bl	800aa58 <HAL_TIMEx_MasterConfigSynchronization>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800171e:	f003 f9fb 	bl	8004b18 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001722:	2360      	movs	r3, #96	@ 0x60
 8001724:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800172a:	2302      	movs	r3, #2
 800172c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800172e:	2300      	movs	r3, #0
 8001730:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001732:	2304      	movs	r3, #4
 8001734:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001736:	2300      	movs	r3, #0
 8001738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800173e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001742:	2200      	movs	r2, #0
 8001744:	4619      	mov	r1, r3
 8001746:	4826      	ldr	r0, [pc, #152]	@ (80017e0 <MX_TIM1_Init+0x188>)
 8001748:	f008 fab2 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001752:	f003 f9e1 	bl	8004b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001756:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800175a:	2204      	movs	r2, #4
 800175c:	4619      	mov	r1, r3
 800175e:	4820      	ldr	r0, [pc, #128]	@ (80017e0 <MX_TIM1_Init+0x188>)
 8001760:	f008 faa6 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800176a:	f003 f9d5 	bl	8004b18 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800176e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001772:	2208      	movs	r2, #8
 8001774:	4619      	mov	r1, r3
 8001776:	481a      	ldr	r0, [pc, #104]	@ (80017e0 <MX_TIM1_Init+0x188>)
 8001778:	f008 fa9a 	bl	8009cb0 <HAL_TIM_PWM_ConfigChannel>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8001782:	f003 f9c9 	bl	8004b18 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800179a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800179e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80017a4:	2300      	movs	r3, #0
 80017a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80017a8:	2300      	movs	r3, #0
 80017aa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80017ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80017b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80017b6:	2300      	movs	r3, #0
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	4619      	mov	r1, r3
 80017c2:	4807      	ldr	r0, [pc, #28]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80017c4:	f009 f9d6 	bl	800ab74 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80017ce:	f003 f9a3 	bl	8004b18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017d2:	4803      	ldr	r0, [pc, #12]	@ (80017e0 <MX_TIM1_Init+0x188>)
 80017d4:	f003 fbf6 	bl	8004fc4 <HAL_TIM_MspPostInit>

}
 80017d8:	bf00      	nop
 80017da:	3770      	adds	r7, #112	@ 0x70
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000818 	.word	0x20000818
 80017e4:	40012c00 	.word	0x40012c00

080017e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80017ee:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <MX_DMA_Init+0x60>)
 80017f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f2:	4a15      	ldr	r2, [pc, #84]	@ (8001848 <MX_DMA_Init+0x60>)
 80017f4:	f043 0304 	orr.w	r3, r3, #4
 80017f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80017fa:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <MX_DMA_Init+0x60>)
 80017fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001806:	4b10      	ldr	r3, [pc, #64]	@ (8001848 <MX_DMA_Init+0x60>)
 8001808:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800180a:	4a0f      	ldr	r2, [pc, #60]	@ (8001848 <MX_DMA_Init+0x60>)
 800180c:	f043 0301 	orr.w	r3, r3, #1
 8001810:	6493      	str	r3, [r2, #72]	@ 0x48
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <MX_DMA_Init+0x60>)
 8001814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	200b      	movs	r0, #11
 8001824:	f005 f927 	bl	8006a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001828:	200b      	movs	r0, #11
 800182a:	f005 f93e 	bl	8006aaa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2100      	movs	r1, #0
 8001832:	200c      	movs	r0, #12
 8001834:	f005 f91f 	bl	8006a76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001838:	200c      	movs	r0, #12
 800183a:	f005 f936 	bl	8006aaa <HAL_NVIC_EnableIRQ>

}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40021000 	.word	0x40021000

0800184c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001862:	4b31      	ldr	r3, [pc, #196]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001866:	4a30      	ldr	r2, [pc, #192]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001868:	f043 0320 	orr.w	r3, r3, #32
 800186c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800186e:	4b2e      	ldr	r3, [pc, #184]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	f003 0320 	and.w	r3, r3, #32
 8001876:	60bb      	str	r3, [r7, #8]
 8001878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b2b      	ldr	r3, [pc, #172]	@ (8001928 <MX_GPIO_Init+0xdc>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	4a2a      	ldr	r2, [pc, #168]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001886:	4b28      	ldr	r3, [pc, #160]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	607b      	str	r3, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b25      	ldr	r3, [pc, #148]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	4a24      	ldr	r2, [pc, #144]	@ (8001928 <MX_GPIO_Init+0xdc>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189e:	4b22      	ldr	r3, [pc, #136]	@ (8001928 <MX_GPIO_Init+0xdc>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_CON_Pin|ENABLEA15_Pin, GPIO_PIN_RESET);
 80018aa:	2200      	movs	r2, #0
 80018ac:	f248 0110 	movw	r1, #32784	@ 0x8010
 80018b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018b4:	f006 fa92 	bl	8007ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2101      	movs	r1, #1
 80018bc:	481b      	ldr	r0, [pc, #108]	@ (800192c <MX_GPIO_Init+0xe0>)
 80018be:	f006 fa8d 	bl	8007ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_CON_Pin ENABLEA15_Pin */
  GPIO_InitStruct.Pin = CS_CON_Pin|ENABLEA15_Pin;
 80018c2:	f248 0310 	movw	r3, #32784	@ 0x8010
 80018c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c8:	2301      	movs	r3, #1
 80018ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d4:	f107 030c 	add.w	r3, r7, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018de:	f006 f8fb 	bl	8007ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80018e2:	2301      	movs	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018e6:	2301      	movs	r3, #1
 80018e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 030c 	add.w	r3, r7, #12
 80018f6:	4619      	mov	r1, r3
 80018f8:	480c      	ldr	r0, [pc, #48]	@ (800192c <MX_GPIO_Init+0xe0>)
 80018fa:	f006 f8ed 	bl	8007ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018fe:	23c0      	movs	r3, #192	@ 0xc0
 8001900:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800190e:	2302      	movs	r3, #2
 8001910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4804      	ldr	r0, [pc, #16]	@ (800192c <MX_GPIO_Init+0xe0>)
 800191a:	f006 f8dd 	bl	8007ad8 <HAL_GPIO_Init>

}
 800191e:	bf00      	nop
 8001920:	3720      	adds	r7, #32
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40021000 	.word	0x40021000
 800192c:	48000400 	.word	0x48000400

08001930 <DWT_Init>:

/* USER CODE BEGIN 4 */
__STATIC_INLINE void DWT_Init(void) {
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <DWT_Init+0x28>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4a07      	ldr	r2, [pc, #28]	@ (8001958 <DWT_Init+0x28>)
 800193a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800193e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <DWT_Init+0x2c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a05      	ldr	r2, [pc, #20]	@ (800195c <DWT_Init+0x2c>)
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000edf0 	.word	0xe000edf0
 800195c:	e0001000 	.word	0xe0001000

08001960 <micros>:
	DWT->CYCCNT = 0U;
	while (DWT->CYCCNT < us_count_tic)
		;
}

__STATIC_INLINE uint32_t micros(void) {
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <micros+0x24>)
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <micros+0x28>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4907      	ldr	r1, [pc, #28]	@ (800198c <micros+0x2c>)
 800196e:	fba1 1303 	umull	r1, r3, r1, r3
 8001972:	0c9b      	lsrs	r3, r3, #18
 8001974:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e0001000 	.word	0xe0001000
 8001988:	200004a8 	.word	0x200004a8
 800198c:	431bde83 	.word	0x431bde83

08001990 <initCurrentsense>:
//	HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);

}

//Initialize Current Sensor
void initCurrentsense(float _shunt_resistor, float _gain) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	ed87 0a01 	vstr	s0, [r7, #4]
 800199a:	edc7 0a00 	vstr	s1, [r7]
	R_sense = _shunt_resistor;
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <initCurrentsense+0x34>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
	gain_a = _gain;
 80019a4:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <initCurrentsense+0x38>)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	6013      	str	r3, [r2, #0]
	gain_b = _gain;
 80019aa:	4a08      	ldr	r2, [pc, #32]	@ (80019cc <initCurrentsense+0x3c>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	6013      	str	r3, [r2, #0]
	gain_c = _gain;
 80019b0:	4a07      	ldr	r2, [pc, #28]	@ (80019d0 <initCurrentsense+0x40>)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6013      	str	r3, [r2, #0]
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	200008e4 	.word	0x200008e4
 80019c8:	200008d8 	.word	0x200008d8
 80019cc:	200008dc 	.word	0x200008dc
 80019d0:	200008e0 	.word	0x200008e0

080019d4 <calibrateOffsets>:

//Calibrate Offset current sensor
void calibrateOffsets() {
 80019d4:	b5b0      	push	{r4, r5, r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
	const int calibration_rounds = 1000;
 80019da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019de:	603b      	str	r3, [r7, #0]
// find adc offset = zero current voltage
	offset_ia = 0;
 80019e0:	4932      	ldr	r1, [pc, #200]	@ (8001aac <calibrateOffsets+0xd8>)
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ib = 0;
 80019ee:	4930      	ldr	r1, [pc, #192]	@ (8001ab0 <calibrateOffsets+0xdc>)
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ic = 0;
 80019fc:	492d      	ldr	r1, [pc, #180]	@ (8001ab4 <calibrateOffsets+0xe0>)
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	f04f 0300 	mov.w	r3, #0
 8001a06:	e9c1 2300 	strd	r2, r3, [r1]
// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) {
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	e023      	b.n	8001a58 <calibrateOffsets+0x84>
		offset_ia += adcResultDMA_a[0];
 8001a10:	4b29      	ldr	r3, [pc, #164]	@ (8001ab8 <calibrateOffsets+0xe4>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7fe fd41 	bl	800049c <__aeabi_ui2d>
 8001a1a:	4b24      	ldr	r3, [pc, #144]	@ (8001aac <calibrateOffsets+0xd8>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe fc00 	bl	8000224 <__adddf3>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4920      	ldr	r1, [pc, #128]	@ (8001aac <calibrateOffsets+0xd8>)
 8001a2a:	e9c1 2300 	strd	r2, r3, [r1]
		offset_ib += adcResultDMA_b[0];
 8001a2e:	4b23      	ldr	r3, [pc, #140]	@ (8001abc <calibrateOffsets+0xe8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7fe fd32 	bl	800049c <__aeabi_ui2d>
 8001a38:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab0 <calibrateOffsets+0xdc>)
 8001a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3e:	f7fe fbf1 	bl	8000224 <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	491a      	ldr	r1, [pc, #104]	@ (8001ab0 <calibrateOffsets+0xdc>)
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]
//		offset_ic += adcResultDMA_c[0];
		HAL_Delay(1);
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	f003 fbf5 	bl	800523c <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dbd7      	blt.n	8001a10 <calibrateOffsets+0x3c>
	}
// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 8001a60:	4b12      	ldr	r3, [pc, #72]	@ (8001aac <calibrateOffsets+0xd8>)
 8001a62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a66:	6838      	ldr	r0, [r7, #0]
 8001a68:	f7fe fd28 	bl	80004bc <__aeabi_i2d>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe feb6 	bl	80007e4 <__aeabi_ddiv>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	490b      	ldr	r1, [pc, #44]	@ (8001aac <calibrateOffsets+0xd8>)
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]
	offset_ib = offset_ib / calibration_rounds;
 8001a82:	4b0b      	ldr	r3, [pc, #44]	@ (8001ab0 <calibrateOffsets+0xdc>)
 8001a84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001a88:	6838      	ldr	r0, [r7, #0]
 8001a8a:	f7fe fd17 	bl	80004bc <__aeabi_i2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4620      	mov	r0, r4
 8001a94:	4629      	mov	r1, r5
 8001a96:	f7fe fea5 	bl	80007e4 <__aeabi_ddiv>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4904      	ldr	r1, [pc, #16]	@ (8001ab0 <calibrateOffsets+0xdc>)
 8001aa0:	e9c1 2300 	strd	r2, r3, [r1]
//	offset_ic = offset_ic / calibration_rounds;
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bdb0      	pop	{r4, r5, r7, pc}
 8001aac:	200008c0 	.word	0x200008c0
 8001ab0:	200008c8 	.word	0x200008c8
 8001ab4:	200008d0 	.word	0x200008d0
 8001ab8:	200008f0 	.word	0x200008f0
 8001abc:	200008f4 	.word	0x200008f4

08001ac0 <getPhaseCurrents>:

//// read all three phase currents (if possible 2 or 3)
struct PhaseCurrent_s getPhaseCurrents() {
 8001ac0:	b5b0      	push	{r4, r5, r7, lr}
 8001ac2:	b08c      	sub	sp, #48	@ 0x30
 8001ac4:	af00      	add	r7, sp, #0
	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0))
 8001ac6:	4b46      	ldr	r3, [pc, #280]	@ (8001be0 <getPhaseCurrents+0x120>)
 8001ac8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001acc:	4b45      	ldr	r3, [pc, #276]	@ (8001be4 <getPhaseCurrents+0x124>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fce3 	bl	800049c <__aeabi_ui2d>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4620      	mov	r0, r4
 8001adc:	4629      	mov	r1, r5
 8001ade:	f7fe fb9f 	bl	8000220 <__aeabi_dsub>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	4610      	mov	r0, r2
 8001ae8:	4619      	mov	r1, r3
 8001aea:	a33b      	add	r3, pc, #236	@ (adr r3, 8001bd8 <getPhaseCurrents+0x118>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fd4e 	bl	8000590 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4614      	mov	r4, r2
 8001afa:	461d      	mov	r5, r3
			/ (R_sense * gain_a);
 8001afc:	4b3a      	ldr	r3, [pc, #232]	@ (8001be8 <getPhaseCurrents+0x128>)
 8001afe:	ed93 7a00 	vldr	s14, [r3]
 8001b02:	4b3a      	ldr	r3, [pc, #232]	@ (8001bec <getPhaseCurrents+0x12c>)
 8001b04:	edd3 7a00 	vldr	s15, [r3]
 8001b08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b0c:	ee17 0a90 	vmov	r0, s15
 8001b10:	f7fe fce6 	bl	80004e0 <__aeabi_f2d>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4620      	mov	r0, r4
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	f7fe fe62 	bl	80007e4 <__aeabi_ddiv>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f80a 	bl	8000b40 <__aeabi_d2f>
 8001b2c:	4603      	mov	r3, r0
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0))
 8001b2e:	613b      	str	r3, [r7, #16]
	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0))
 8001b30:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf0 <getPhaseCurrents+0x130>)
 8001b32:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b36:	4b2f      	ldr	r3, [pc, #188]	@ (8001bf4 <getPhaseCurrents+0x134>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fcae 	bl	800049c <__aeabi_ui2d>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4620      	mov	r0, r4
 8001b46:	4629      	mov	r1, r5
 8001b48:	f7fe fb6a 	bl	8000220 <__aeabi_dsub>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	a320      	add	r3, pc, #128	@ (adr r3, 8001bd8 <getPhaseCurrents+0x118>)
 8001b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5a:	f7fe fd19 	bl	8000590 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4614      	mov	r4, r2
 8001b64:	461d      	mov	r5, r3
			/ (R_sense * gain_b);
 8001b66:	4b20      	ldr	r3, [pc, #128]	@ (8001be8 <getPhaseCurrents+0x128>)
 8001b68:	ed93 7a00 	vldr	s14, [r3]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <getPhaseCurrents+0x138>)
 8001b6e:	edd3 7a00 	vldr	s15, [r3]
 8001b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b76:	ee17 0a90 	vmov	r0, s15
 8001b7a:	f7fe fcb1 	bl	80004e0 <__aeabi_f2d>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4620      	mov	r0, r4
 8001b84:	4629      	mov	r1, r5
 8001b86:	f7fe fe2d 	bl	80007e4 <__aeabi_ddiv>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	4610      	mov	r0, r2
 8001b90:	4619      	mov	r1, r3
 8001b92:	f7fe ffd5 	bl	8000b40 <__aeabi_d2f>
 8001b96:	4603      	mov	r3, r0
	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0))
 8001b98:	617b      	str	r3, [r7, #20]
//			/ (R_sense * gain_c);
//    current.c = -current.a-current.b;
//    current.rms = _sqrtApprox(
//			powf(debug_current_abc.a, 2) + powf(debug_current_abc.b, 2)
//					+ powf(debug_current_abc.c, 2));
	return current;
 8001b9a:	f107 0420 	add.w	r4, r7, #32
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ba4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001ba8:	6a38      	ldr	r0, [r7, #32]
 8001baa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb0:	ee06 0a10 	vmov	s12, r0
 8001bb4:	ee06 1a90 	vmov	s13, r1
 8001bb8:	ee07 2a10 	vmov	s14, r2
 8001bbc:	ee07 3a90 	vmov	s15, r3
}
 8001bc0:	eeb0 0a46 	vmov.f32	s0, s12
 8001bc4:	eef0 0a66 	vmov.f32	s1, s13
 8001bc8:	eeb0 1a47 	vmov.f32	s2, s14
 8001bcc:	eef0 1a67 	vmov.f32	s3, s15
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	66666666 	.word	0x66666666
 8001bdc:	3f4a6666 	.word	0x3f4a6666
 8001be0:	200008c0 	.word	0x200008c0
 8001be4:	200008f0 	.word	0x200008f0
 8001be8:	200008e4 	.word	0x200008e4
 8001bec:	200008d8 	.word	0x200008d8
 8001bf0:	200008c8 	.word	0x200008c8
 8001bf4:	200008f4 	.word	0x200008f4
 8001bf8:	200008dc 	.word	0x200008dc
 8001bfc:	00000000 	.word	0x00000000

08001c00 <getFOCCurrents>:

// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
struct DQCurrent_s getFOCCurrents(float angle_el) {
 8001c00:	b5b0      	push	{r4, r5, r7, lr}
 8001c02:	b090      	sub	sp, #64	@ 0x40
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	ed87 0a03 	vstr	s0, [r7, #12]
// read current phase currents
	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001c0a:	f7ff ff59 	bl	8001ac0 <getPhaseCurrents>
 8001c0e:	eeb0 6a40 	vmov.f32	s12, s0
 8001c12:	eef0 6a60 	vmov.f32	s13, s1
 8001c16:	eeb0 7a41 	vmov.f32	s14, s2
 8001c1a:	eef0 7a61 	vmov.f32	s15, s3
 8001c1e:	ed87 6a06 	vstr	s12, [r7, #24]
 8001c22:	edc7 6a07 	vstr	s13, [r7, #28]
 8001c26:	ed87 7a08 	vstr	s14, [r7, #32]
 8001c2a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
// if only two measured currents
// phase a - c
//	i_alpha = current.a;
//	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
// phase a - b
	i_alpha = current.a;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
	i_beta = (_1_SQRT3) * current.a + (_2_SQRT3) * current.b;
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc53 	bl	80004e0 <__aeabi_f2d>
 8001c3a:	a331      	add	r3, pc, #196	@ (adr r3, 8001d00 <getFOCCurrents+0x100>)
 8001c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c40:	f7fe fca6 	bl	8000590 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc46 	bl	80004e0 <__aeabi_f2d>
 8001c54:	a32c      	add	r3, pc, #176	@ (adr r3, 8001d08 <getFOCCurrents+0x108>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fc99 	bl	8000590 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f7fe fadd 	bl	8000224 <__adddf3>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4610      	mov	r0, r2
 8001c70:	4619      	mov	r1, r3
 8001c72:	f7fe ff65 	bl	8000b40 <__aeabi_d2f>
 8001c76:	4603      	mov	r3, r0
 8001c78:	63bb      	str	r3, [r7, #56]	@ 0x38
//        i_alpha = a;
//        i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
//    }

// calculate park transform
	float _ct = _cos(angle_el);
 8001c7a:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c7e:	f000 f9a7 	bl	8001fd0 <_cos>
 8001c82:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	float _st = _sin(angle_el);
 8001c86:	ed97 0a03 	vldr	s0, [r7, #12]
 8001c8a:	f000 f841 	bl	8001d10 <_sin>
 8001c8e:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30

	struct DQCurrent_s return_current;
	return_current.d = i_alpha * _ct + i_beta * _st;
 8001c92:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001c96:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c9e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8001ca2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001ca6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cae:	edc7 7a04 	vstr	s15, [r7, #16]
	return_current.q = i_beta * _ct - i_alpha * _st;
 8001cb2:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cb6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cbe:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cc2:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001cc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cce:	edc7 7a05 	vstr	s15, [r7, #20]
	return return_current;
 8001cd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cd6:	f107 0210 	add.w	r2, r7, #16
 8001cda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001cde:	e883 0003 	stmia.w	r3, {r0, r1}
 8001ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce6:	ee07 2a10 	vmov	s14, r2
 8001cea:	ee07 3a90 	vmov	s15, r3
}
 8001cee:	eeb0 0a47 	vmov.f32	s0, s14
 8001cf2:	eef0 0a67 	vmov.f32	s1, s15
 8001cf6:	3740      	adds	r7, #64	@ 0x40
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bdb0      	pop	{r4, r5, r7, pc}
 8001cfc:	f3af 8000 	nop.w
 8001d00:	45904047 	.word	0x45904047
 8001d04:	3fe279a7 	.word	0x3fe279a7
 8001d08:	45904047 	.word	0x45904047
 8001d0c:	3ff279a7 	.word	0x3ff279a7

08001d10 <_sin>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	ed87 0a01 	vstr	s0, [r7, #4]
	if (a < _PI_2) {
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7fe fbe0 	bl	80004e0 <__aeabi_f2d>
 8001d20:	a3a8      	add	r3, pc, #672	@ (adr r3, 8001fc4 <_sin+0x2b4>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	f7fe fea5 	bl	8000a74 <__aeabi_dcmplt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d043      	beq.n	8001db8 <_sin+0xa8>
		//return sine_array[(int)(199.0*( a / (_PI/2.0)))];
		//return sine_array[(int)(126.6873* a)];           // float array optimized
		return 0.0001f * sine_array[_round(126.6873f * a)]; // int array optimized
 8001d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d34:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8001fb0 <_sin+0x2a0>
 8001d38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d44:	db16      	blt.n	8001d74 <_sin+0x64>
 8001d46:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d4a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8001fb0 <_sin+0x2a0>
 8001d4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d52:	ee17 0a90 	vmov	r0, s15
 8001d56:	f7fe fbc3 	bl	80004e0 <__aeabi_f2d>
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b95      	ldr	r3, [pc, #596]	@ (8001fb4 <_sin+0x2a4>)
 8001d60:	f7fe fa60 	bl	8000224 <__adddf3>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fec0 	bl	8000af0 <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	e015      	b.n	8001da0 <_sin+0x90>
 8001d74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d78:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8001fb0 <_sin+0x2a0>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	ee17 0a90 	vmov	r0, s15
 8001d84:	f7fe fbac 	bl	80004e0 <__aeabi_f2d>
 8001d88:	f04f 0200 	mov.w	r2, #0
 8001d8c:	4b89      	ldr	r3, [pc, #548]	@ (8001fb4 <_sin+0x2a4>)
 8001d8e:	f7fe fa47 	bl	8000220 <__aeabi_dsub>
 8001d92:	4602      	mov	r2, r0
 8001d94:	460b      	mov	r3, r1
 8001d96:	4610      	mov	r0, r2
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7fe fea9 	bl	8000af0 <__aeabi_d2iz>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	4a85      	ldr	r2, [pc, #532]	@ (8001fb8 <_sin+0x2a8>)
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	ee07 3a90 	vmov	s15, r3
 8001daa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dae:	ed9f 7a83 	vldr	s14, [pc, #524]	@ 8001fbc <_sin+0x2ac>
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	e0ec      	b.n	8001f92 <_sin+0x282>
	} else if (a < _PI) {
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7fe fb91 	bl	80004e0 <__aeabi_f2d>
 8001dbe:	a378      	add	r3, pc, #480	@ (adr r3, 8001fa0 <_sin+0x290>)
 8001dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc4:	f7fe fe56 	bl	8000a74 <__aeabi_dcmplt>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d047      	beq.n	8001e5e <_sin+0x14e>
		// return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
		//return sine_array[398 - (int)(126.6873*a)];          // float array optimized
		return 0.0001f * sine_array[398 - _round(126.6873f * a)]; // int array optimized
 8001dce:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dd2:	ed9f 7a77 	vldr	s14, [pc, #476]	@ 8001fb0 <_sin+0x2a0>
 8001dd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de2:	db18      	blt.n	8001e16 <_sin+0x106>
 8001de4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001de8:	ed9f 7a71 	vldr	s14, [pc, #452]	@ 8001fb0 <_sin+0x2a0>
 8001dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001df0:	ee17 0a90 	vmov	r0, s15
 8001df4:	f7fe fb74 	bl	80004e0 <__aeabi_f2d>
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	4b6d      	ldr	r3, [pc, #436]	@ (8001fb4 <_sin+0x2a4>)
 8001dfe:	f7fe fa11 	bl	8000224 <__adddf3>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	4610      	mov	r0, r2
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f7fe fe71 	bl	8000af0 <__aeabi_d2iz>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001e14:	e017      	b.n	8001e46 <_sin+0x136>
 8001e16:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e1a:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 8001fb0 <_sin+0x2a0>
 8001e1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e22:	ee17 0a90 	vmov	r0, s15
 8001e26:	f7fe fb5b 	bl	80004e0 <__aeabi_f2d>
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	4b61      	ldr	r3, [pc, #388]	@ (8001fb4 <_sin+0x2a4>)
 8001e30:	f7fe f9f6 	bl	8000220 <__aeabi_dsub>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe58 	bl	8000af0 <__aeabi_d2iz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001e46:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb8 <_sin+0x2a8>)
 8001e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8001fbc <_sin+0x2ac>
 8001e58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e5c:	e099      	b.n	8001f92 <_sin+0x282>
	} else if (a < _3PI_2) {
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7fe fb3e 	bl	80004e0 <__aeabi_f2d>
 8001e64:	a350      	add	r3, pc, #320	@ (adr r3, 8001fa8 <_sin+0x298>)
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	f7fe fe03 	bl	8000a74 <__aeabi_dcmplt>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d047      	beq.n	8001f04 <_sin+0x1f4>
		// return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
		//return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[-398 + _round(126.6873f * a)]; // int array optimized
 8001e74:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e78:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8001fb0 <_sin+0x2a0>
 8001e7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e88:	db18      	blt.n	8001ebc <_sin+0x1ac>
 8001e8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8e:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001fb0 <_sin+0x2a0>
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	ee17 0a90 	vmov	r0, s15
 8001e9a:	f7fe fb21 	bl	80004e0 <__aeabi_f2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b44      	ldr	r3, [pc, #272]	@ (8001fb4 <_sin+0x2a4>)
 8001ea4:	f7fe f9be 	bl	8000224 <__adddf3>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fe1e 	bl	8000af0 <__aeabi_d2iz>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 8001eba:	e017      	b.n	8001eec <_sin+0x1dc>
 8001ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8001ec0:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001fb0 <_sin+0x2a0>
 8001ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec8:	ee17 0a90 	vmov	r0, s15
 8001ecc:	f7fe fb08 	bl	80004e0 <__aeabi_f2d>
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	4b37      	ldr	r3, [pc, #220]	@ (8001fb4 <_sin+0x2a4>)
 8001ed6:	f7fe f9a3 	bl	8000220 <__aeabi_dsub>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f7fe fe05 	bl	8000af0 <__aeabi_d2iz>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 8001eec:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <_sin+0x2a8>)
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	ee07 3a90 	vmov	s15, r3
 8001ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001efa:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8001fc0 <_sin+0x2b0>
 8001efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f02:	e046      	b.n	8001f92 <_sin+0x282>
	} else {
		// return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
		//return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[796 - _round(126.6873f * a)]; // int array optimized
 8001f04:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f08:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001fb0 <_sin+0x2a0>
 8001f0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f18:	db18      	blt.n	8001f4c <_sin+0x23c>
 8001f1a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f1e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001fb0 <_sin+0x2a0>
 8001f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f26:	ee17 0a90 	vmov	r0, s15
 8001f2a:	f7fe fad9 	bl	80004e0 <__aeabi_f2d>
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <_sin+0x2a4>)
 8001f34:	f7fe f976 	bl	8000224 <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fdd6 	bl	8000af0 <__aeabi_d2iz>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 8001f4a:	e017      	b.n	8001f7c <_sin+0x26c>
 8001f4c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f50:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8001fb0 <_sin+0x2a0>
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	ee17 0a90 	vmov	r0, s15
 8001f5c:	f7fe fac0 	bl	80004e0 <__aeabi_f2d>
 8001f60:	f04f 0200 	mov.w	r2, #0
 8001f64:	4b13      	ldr	r3, [pc, #76]	@ (8001fb4 <_sin+0x2a4>)
 8001f66:	f7fe f95b 	bl	8000220 <__aeabi_dsub>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	f7fe fdbd 	bl	8000af0 <__aeabi_d2iz>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <_sin+0x2a8>)
 8001f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f82:	ee07 3a90 	vmov	s15, r3
 8001f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f8a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8001fc0 <_sin+0x2b0>
 8001f8e:	ee67 7a87 	vmul.f32	s15, s15, s14
	}
}
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	f3af 8000 	nop.w
 8001fa0:	54442eea 	.word	0x54442eea
 8001fa4:	400921fb 	.word	0x400921fb
 8001fa8:	7f330d32 	.word	0x7f330d32
 8001fac:	4012d97c 	.word	0x4012d97c
 8001fb0:	42fd5fe6 	.word	0x42fd5fe6
 8001fb4:	3fe00000 	.word	0x3fe00000
 8001fb8:	0800c198 	.word	0x0800c198
 8001fbc:	38d1b717 	.word	0x38d1b717
 8001fc0:	b8d1b717 	.word	0xb8d1b717
 8001fc4:	5443d6f4 	.word	0x5443d6f4
 8001fc8:	3ff921fb 	.word	0x3ff921fb
 8001fcc:	00000000 	.word	0x00000000

08001fd0 <_cos>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	ed87 0a01 	vstr	s0, [r7, #4]
	float a_sin = a + _PI_2;
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fa80 	bl	80004e0 <__aeabi_f2d>
 8001fe0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002050 <_cos+0x80>)
 8001fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe6:	f7fe f91d 	bl	8000224 <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fda5 	bl	8000b40 <__aeabi_d2f>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	60fb      	str	r3, [r7, #12]
	a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8001ffa:	68f8      	ldr	r0, [r7, #12]
 8001ffc:	f7fe fa70 	bl	80004e0 <__aeabi_f2d>
 8002000:	a315      	add	r3, pc, #84	@ (adr r3, 8002058 <_cos+0x88>)
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f7fe fd53 	bl	8000ab0 <__aeabi_dcmpgt>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00f      	beq.n	8002030 <_cos+0x60>
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fa65 	bl	80004e0 <__aeabi_f2d>
 8002016:	a310      	add	r3, pc, #64	@ (adr r3, 8002058 <_cos+0x88>)
 8002018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800201c:	f7fe f900 	bl	8000220 <__aeabi_dsub>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4610      	mov	r0, r2
 8002026:	4619      	mov	r1, r3
 8002028:	f7fe fd8a 	bl	8000b40 <__aeabi_d2f>
 800202c:	4603      	mov	r3, r0
 800202e:	e000      	b.n	8002032 <_cos+0x62>
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	60fb      	str	r3, [r7, #12]
	return _sin(a_sin);
 8002034:	ed97 0a03 	vldr	s0, [r7, #12]
 8002038:	f7ff fe6a 	bl	8001d10 <_sin>
 800203c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002040:	eeb0 0a67 	vmov.f32	s0, s15
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	f3af 8000 	nop.w
 8002050:	5443d6f4 	.word	0x5443d6f4
 8002054:	3ff921fb 	.word	0x3ff921fb
 8002058:	54442eea 	.word	0x54442eea
 800205c:	401921fb 	.word	0x401921fb

08002060 <_normalizeAngle>:

//normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle) {
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	ed87 0a01 	vstr	s0, [r7, #4]
	float a = fmod(angle, _2PI);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe fa38 	bl	80004e0 <__aeabi_f2d>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 80020d0 <_normalizeAngle+0x70>
 8002078:	ec43 2b10 	vmov	d0, r2, r3
 800207c:	f008 feb2 	bl	800ade4 <fmod>
 8002080:	ec53 2b10 	vmov	r2, r3, d0
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fd5a 	bl	8000b40 <__aeabi_d2f>
 800208c:	4603      	mov	r3, r0
 800208e:	60fb      	str	r3, [r7, #12]
	return a >= 0 ? a : (a + _2PI);      //always project from 0 degree
 8002090:	edd7 7a03 	vldr	s15, [r7, #12]
 8002094:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800209c:	db01      	blt.n	80020a2 <_normalizeAngle+0x42>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	e00e      	b.n	80020c0 <_normalizeAngle+0x60>
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f7fe fa1c 	bl	80004e0 <__aeabi_f2d>
 80020a8:	a309      	add	r3, pc, #36	@ (adr r3, 80020d0 <_normalizeAngle+0x70>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	f7fe f8b9 	bl	8000224 <__adddf3>
 80020b2:	4602      	mov	r2, r0
 80020b4:	460b      	mov	r3, r1
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	f7fe fd41 	bl	8000b40 <__aeabi_d2f>
 80020be:	4603      	mov	r3, r0
 80020c0:	ee07 3a90 	vmov	s15, r3
}
 80020c4:	eeb0 0a67 	vmov.f32	s0, s15
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	54442eea 	.word	0x54442eea
 80020d4:	401921fb 	.word	0x401921fb

080020d8 <_electricalAngle>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	ed87 0a01 	vstr	s0, [r7, #4]
 80020e2:	6038      	str	r0, [r7, #0]
	return (shaft_angle * pole_pairs);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80020f2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80020f6:	eeb0 0a67 	vmov.f32	s0, s15
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_sqrtApprox>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number) {
 8002104:	b480      	push	{r7}
 8002106:	b085      	sub	sp, #20
 8002108:	af00      	add	r7, sp, #0
 800210a:	ed87 0a01 	vstr	s0, [r7, #4]
	float y;
// float x;
// const float f = 1.5F; // better precision

// x = number * 0.5F;
	y = number;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	60bb      	str	r3, [r7, #8]
	i = *(long*) &y;
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
	i = 0x5f375a86 - (i >> 1);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	105a      	asrs	r2, r3, #1
 800211e:	4b0a      	ldr	r3, [pc, #40]	@ (8002148 <_sqrtApprox+0x44>)
 8002120:	1a9b      	subs	r3, r3, r2
 8002122:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	60bb      	str	r3, [r7, #8]
// y = y * ( f - ( x * y * y ) ); // better precision
	return number * y;
 800212c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002130:	edd7 7a01 	vldr	s15, [r7, #4]
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002138:	eeb0 0a67 	vmov.f32	s0, s15
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	5f375a86 	.word	0x5f375a86
 800214c:	00000000 	.word	0x00000000

08002150 <MagneticSensorSPI_init>:

// initialize SPI for Magnetic Sensor
void MagneticSensorSPI_init(struct MagneticSensorSPIConfig_s config) {
 8002150:	b084      	sub	sp, #16
 8002152:	b580      	push	{r7, lr}
 8002154:	af00      	add	r7, sp, #0
 8002156:	f107 0c08 	add.w	ip, r7, #8
 800215a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MagneticSensorSPI_init+0x18>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	e001      	b.n	800216c <MagneticSensorSPI_init+0x1c>
 8002168:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800216c:	4a1a      	ldr	r2, [pc, #104]	@ (80021d8 <MagneticSensorSPI_init+0x88>)
 800216e:	6013      	str	r3, [r2, #0]
// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe f9a2 	bl	80004bc <__aeabi_i2d>
 8002178:	4602      	mov	r2, r0
 800217a:	460b      	mov	r3, r1
 800217c:	ec43 2b11 	vmov	d1, r2, r3
 8002180:	ed9f 0b13 	vldr	d0, [pc, #76]	@ 80021d0 <MagneticSensorSPI_init+0x80>
 8002184:	f008 fe5c 	bl	800ae40 <pow>
 8002188:	ec53 2b10 	vmov	r2, r3, d0
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f7fe fcd6 	bl	8000b40 <__aeabi_d2f>
 8002194:	4603      	mov	r3, r0
 8002196:	4a11      	ldr	r2, [pc, #68]	@ (80021dc <MagneticSensorSPI_init+0x8c>)
 8002198:	6013      	str	r3, [r2, #0]
	bit_resolution = config.bit_resolution;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a10      	ldr	r2, [pc, #64]	@ (80021e0 <MagneticSensorSPI_init+0x90>)
 800219e:	6013      	str	r3, [r2, #0]

	command_parity_bit = config.command_parity_bit; // for backwards compatibility
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	4a10      	ldr	r2, [pc, #64]	@ (80021e4 <MagneticSensorSPI_init+0x94>)
 80021a4:	6013      	str	r3, [r2, #0]
	command_rw_bit = config.command_rw_bit; // for backwards compatibility
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	4a0f      	ldr	r2, [pc, #60]	@ (80021e8 <MagneticSensorSPI_init+0x98>)
 80021aa:	6013      	str	r3, [r2, #0]
	data_start_bit = config.data_start_bit; // for backwards compatibility
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4a0f      	ldr	r2, [pc, #60]	@ (80021ec <MagneticSensorSPI_init+0x9c>)
 80021b0:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	2110      	movs	r1, #16
 80021b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021ba:	f005 fe0f 	bl	8007ddc <HAL_GPIO_WritePin>
}
 80021be:	bf00      	nop
 80021c0:	46bd      	mov	sp, r7
 80021c2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80021c6:	b004      	add	sp, #16
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	f3af 8000 	nop.w
 80021d0:	00000000 	.word	0x00000000
 80021d4:	40000000 	.word	0x40000000
 80021d8:	20000878 	.word	0x20000878
 80021dc:	20000864 	.word	0x20000864
 80021e0:	20000868 	.word	0x20000868
 80021e4:	2000086c 	.word	0x2000086c
 80021e8:	20000870 	.word	0x20000870
 80021ec:	20000874 	.word	0x20000874

080021f0 <spiCalcEvenParity>:

/**
 * Utility function used to calculate even parity of word
 */
uint8_t spiCalcEvenParity(uint16_t value) {
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	73bb      	strb	r3, [r7, #14]
 8002202:	e00d      	b.n	8002220 <spiCalcEvenParity+0x30>
		if (value & 0x1)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <spiCalcEvenParity+0x24>
			cnt++;
 800220e:	7bfb      	ldrb	r3, [r7, #15]
 8002210:	3301      	adds	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8002214:	88fb      	ldrh	r3, [r7, #6]
 8002216:	085b      	lsrs	r3, r3, #1
 8002218:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++) {
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	3301      	adds	r3, #1
 800221e:	73bb      	strb	r3, [r7, #14]
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	2b0f      	cmp	r3, #15
 8002224:	d9ee      	bls.n	8002204 <spiCalcEvenParity+0x14>
	}
	return cnt & 0x1;
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
}
 800222e:	4618      	mov	r0, r3
 8002230:	3714      	adds	r7, #20
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
	...

0800223c <read>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t read(uint16_t angle_register) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b086      	sub	sp, #24
 8002240:	af02      	add	r7, sp, #8
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
	uint16_t register_value;
	uint16_t command = angle_register;
 8002246:	88fb      	ldrh	r3, [r7, #6]
 8002248:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0) {
 800224a:	4b30      	ldr	r3, [pc, #192]	@ (800230c <read+0xd0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	dd0b      	ble.n	800226a <read+0x2e>
		command = angle_register | (1 << command_rw_bit);
 8002252:	4b2e      	ldr	r3, [pc, #184]	@ (800230c <read+0xd0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2201      	movs	r2, #1
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	b21a      	sxth	r2, r3
 800225e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002262:	4313      	orrs	r3, r2
 8002264:	b21b      	sxth	r3, r3
 8002266:	b29b      	uxth	r3, r3
 8002268:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0) {
 800226a:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <read+0xd4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dd10      	ble.n	8002294 <read+0x58>
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8002272:	897b      	ldrh	r3, [r7, #10]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ffbb 	bl	80021f0 <spiCalcEvenParity>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <read+0xd4>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	b21a      	sxth	r2, r3
 8002288:	897b      	ldrh	r3, [r7, #10]
 800228a:	b21b      	sxth	r3, r3
 800228c:	4313      	orrs	r3, r2
 800228e:	b21b      	sxth	r3, r3
 8002290:	b29b      	uxth	r3, r3
 8002292:	817b      	strh	r3, [r7, #10]
	}

	command = 0xFFFF;
 8002294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002298:	817b      	strh	r3, [r7, #10]
//Now read the response (NO_OPERATION_COMMAND = 0x0000)
//  uint16_t register_value = spi->transfer16(0x00);
	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2110      	movs	r1, #16
 800229e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022a2:	f005 fd9b 	bl	8007ddc <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 80022a6:	f107 020c 	add.w	r2, r7, #12
 80022aa:	f107 010a 	add.w	r1, r7, #10
 80022ae:	2364      	movs	r3, #100	@ 0x64
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	2301      	movs	r3, #1
 80022b4:	4817      	ldr	r0, [pc, #92]	@ (8002314 <read+0xd8>)
 80022b6:	f006 fe40 	bl	8008f3a <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(CS_CON_GPIO_Port, CS_CON_Pin, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	2110      	movs	r1, #16
 80022be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022c2:	f005 fd8b 	bl	8007ddc <HAL_GPIO_WritePin>

//SPI - end transaction

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 80022c6:	89bb      	ldrh	r3, [r7, #12]
 80022c8:	4619      	mov	r1, r3
 80022ca:	4b13      	ldr	r3, [pc, #76]	@ (8002318 <read+0xdc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	4b12      	ldr	r3, [pc, #72]	@ (800231c <read+0xe0>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	fa41 f303 	asr.w	r3, r1, r3
 80022da:	b29b      	uxth	r3, r3
 80022dc:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 80022de:	4b0f      	ldr	r3, [pc, #60]	@ (800231c <read+0xe0>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f1c3 0310 	rsb	r3, r3, #16
 80022e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80022ea:	fa42 f303 	asr.w	r3, r2, r3
 80022ee:	81fb      	strh	r3, [r7, #14]
	temp = register_value & data_mask;
 80022f0:	89ba      	ldrh	r2, [r7, #12]
 80022f2:	89fb      	ldrh	r3, [r7, #14]
 80022f4:	4013      	ands	r3, r2
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <read+0xe4>)
 80022fa:	801a      	strh	r2, [r3, #0]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 80022fc:	89ba      	ldrh	r2, [r7, #12]
 80022fe:	89fb      	ldrh	r3, [r7, #14]
 8002300:	4013      	ands	r3, r2
 8002302:	b29b      	uxth	r3, r3
}
 8002304:	4618      	mov	r0, r3
 8002306:	3710      	adds	r7, #16
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000870 	.word	0x20000870
 8002310:	2000086c 	.word	0x2000086c
 8002314:	200007b4 	.word	0x200007b4
 8002318:	20000874 	.word	0x20000874
 800231c:	20000868 	.word	0x20000868
 8002320:	20000ce8 	.word	0x20000ce8

08002324 <getRawCount>:

// function reading the raw counter of the magnetic sensor
int getRawCount() {
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
	return (int) read(angle_register);
 8002328:	4b04      	ldr	r3, [pc, #16]	@ (800233c <getRawCount+0x18>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff84 	bl	800223c <read>
 8002334:	4603      	mov	r3, r0
}
 8002336:	4618      	mov	r0, r3
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000878 	.word	0x20000878

08002340 <getSensorAngle>:

//  Shaft angle calculation
//  angle is in radians [rad]
float getSensorAngle() {
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
	return (getRawCount() / (float) cpr) * _2PI;
 8002344:	f7ff ffee 	bl	8002324 <getRawCount>
 8002348:	ee07 0a90 	vmov	s15, r0
 800234c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002350:	4b0f      	ldr	r3, [pc, #60]	@ (8002390 <getSensorAngle+0x50>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800235a:	ee16 0a90 	vmov	r0, s13
 800235e:	f7fe f8bf 	bl	80004e0 <__aeabi_f2d>
 8002362:	a309      	add	r3, pc, #36	@ (adr r3, 8002388 <getSensorAngle+0x48>)
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	f7fe f912 	bl	8000590 <__aeabi_dmul>
 800236c:	4602      	mov	r2, r0
 800236e:	460b      	mov	r3, r1
 8002370:	4610      	mov	r0, r2
 8002372:	4619      	mov	r1, r3
 8002374:	f7fe fbe4 	bl	8000b40 <__aeabi_d2f>
 8002378:	4603      	mov	r3, r0
 800237a:	ee07 3a90 	vmov	s15, r3
}
 800237e:	eeb0 0a67 	vmov.f32	s0, s15
 8002382:	bd80      	pop	{r7, pc}
 8002384:	f3af 8000 	nop.w
 8002388:	54442eea 	.word	0x54442eea
 800238c:	401921fb 	.word	0x401921fb
 8002390:	20000864 	.word	0x20000864

08002394 <Sensor_init>:

void Sensor_init() {
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); // call once
 8002398:	f7ff ffd2 	bl	8002340 <getSensorAngle>

	vel_angle_prev = getSensorAngle(); // call again
 800239c:	f7ff ffd0 	bl	8002340 <getSensorAngle>
 80023a0:	eef0 7a40 	vmov.f32	s15, s0
 80023a4:	4b0e      	ldr	r3, [pc, #56]	@ (80023e0 <Sensor_init+0x4c>)
 80023a6:	edc3 7a00 	vstr	s15, [r3]
	vel_angle_prev_ts = micros();
 80023aa:	f7ff fad9 	bl	8001960 <micros>
 80023ae:	4603      	mov	r3, r0
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <Sensor_init+0x50>)
 80023b4:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80023b6:	2001      	movs	r0, #1
 80023b8:	f002 ff40 	bl	800523c <HAL_Delay>
	getSensorAngle(); // call once
 80023bc:	f7ff ffc0 	bl	8002340 <getSensorAngle>

	angle_prev = getSensorAngle(); // call again
 80023c0:	f7ff ffbe 	bl	8002340 <getSensorAngle>
 80023c4:	eef0 7a40 	vmov.f32	s15, s0
 80023c8:	4b07      	ldr	r3, [pc, #28]	@ (80023e8 <Sensor_init+0x54>)
 80023ca:	edc3 7a00 	vstr	s15, [r3]
	angle_prev_ts = micros();
 80023ce:	f7ff fac7 	bl	8001960 <micros>
 80023d2:	4603      	mov	r3, r0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4b05      	ldr	r3, [pc, #20]	@ (80023ec <Sensor_init+0x58>)
 80023d8:	601a      	str	r2, [r3, #0]
}
 80023da:	bf00      	nop
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000880 	.word	0x20000880
 80023e4:	20000894 	.word	0x20000894
 80023e8:	2000087c 	.word	0x2000087c
 80023ec:	20000898 	.word	0x20000898

080023f0 <updateSensor>:

void updateSensor() {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
	float val = getSensorAngle();
 80023f6:	f7ff ffa3 	bl	8002340 <getSensorAngle>
 80023fa:	ed87 0a01 	vstr	s0, [r7, #4]
	angle_prev_ts = micros();
 80023fe:	f7ff faaf 	bl	8001960 <micros>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b16      	ldr	r3, [pc, #88]	@ (8002460 <updateSensor+0x70>)
 8002408:	601a      	str	r2, [r3, #0]
	float d_angle = val - angle_prev;
 800240a:	4b16      	ldr	r3, [pc, #88]	@ (8002464 <updateSensor+0x74>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ed97 7a01 	vldr	s14, [r7, #4]
 8002414:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002418:	edc7 7a00 	vstr	s15, [r7]
// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 800241c:	edd7 7a00 	vldr	s15, [r7]
 8002420:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002424:	ee17 3a90 	vmov	r3, s15
 8002428:	2b00      	cmp	r3, #0
 800242a:	bfb8      	it	lt
 800242c:	425b      	neglt	r3, r3
 800242e:	2b05      	cmp	r3, #5
 8002430:	dd0f      	ble.n	8002452 <updateSensor+0x62>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8002432:	edd7 7a00 	vldr	s15, [r7]
 8002436:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800243a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800243e:	dd02      	ble.n	8002446 <updateSensor+0x56>
 8002440:	f04f 32ff 	mov.w	r2, #4294967295
 8002444:	e000      	b.n	8002448 <updateSensor+0x58>
 8002446:	2201      	movs	r2, #1
 8002448:	4b07      	ldr	r3, [pc, #28]	@ (8002468 <updateSensor+0x78>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4413      	add	r3, r2
 800244e:	4a06      	ldr	r2, [pc, #24]	@ (8002468 <updateSensor+0x78>)
 8002450:	6013      	str	r3, [r2, #0]
	angle_prev = val;
 8002452:	4a04      	ldr	r2, [pc, #16]	@ (8002464 <updateSensor+0x74>)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6013      	str	r3, [r2, #0]
}
 8002458:	bf00      	nop
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	20000898 	.word	0x20000898
 8002464:	2000087c 	.word	0x2000087c
 8002468:	2000088c 	.word	0x2000088c

0800246c <getMechanicalAngle>:

float getMechanicalAngle() {
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
	return angle_prev;
 8002470:	4b04      	ldr	r3, [pc, #16]	@ (8002484 <getMechanicalAngle+0x18>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	ee07 3a90 	vmov	s15, r3
}
 8002478:	eeb0 0a67 	vmov.f32	s0, s15
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	2000087c 	.word	0x2000087c

08002488 <getAngle>:

float getAngle() {
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	af00      	add	r7, sp, #0
	return (float) full_rotations * _2PI + angle_prev;
 800248c:	4b16      	ldr	r3, [pc, #88]	@ (80024e8 <getAngle+0x60>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	ee07 3a90 	vmov	s15, r3
 8002494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002498:	ee17 0a90 	vmov	r0, s15
 800249c:	f7fe f820 	bl	80004e0 <__aeabi_f2d>
 80024a0:	a30f      	add	r3, pc, #60	@ (adr r3, 80024e0 <getAngle+0x58>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe f873 	bl	8000590 <__aeabi_dmul>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4614      	mov	r4, r2
 80024b0:	461d      	mov	r5, r3
 80024b2:	4b0e      	ldr	r3, [pc, #56]	@ (80024ec <getAngle+0x64>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe f812 	bl	80004e0 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4620      	mov	r0, r4
 80024c2:	4629      	mov	r1, r5
 80024c4:	f7fd feae 	bl	8000224 <__adddf3>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe fb36 	bl	8000b40 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	ee07 3a90 	vmov	s15, r3
}
 80024da:	eeb0 0a67 	vmov.f32	s0, s15
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	54442eea 	.word	0x54442eea
 80024e4:	401921fb 	.word	0x401921fb
 80024e8:	2000088c 	.word	0x2000088c
 80024ec:	2000087c 	.word	0x2000087c

080024f0 <getvelocity>:

int32_t getFullRotations() {
	return full_rotations;
}

float getvelocity() {
 80024f0:	b5b0      	push	{r4, r5, r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
// calculate sample time
	vel_angle_ts = micros();
 80024f6:	f7ff fa33 	bl	8001960 <micros>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	4b42      	ldr	r3, [pc, #264]	@ (8002608 <getvelocity+0x118>)
 8002500:	601a      	str	r2, [r3, #0]
	float Ts = (vel_angle_ts - vel_angle_prev_ts) * 1e-6;
 8002502:	4b41      	ldr	r3, [pc, #260]	@ (8002608 <getvelocity+0x118>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b41      	ldr	r3, [pc, #260]	@ (800260c <getvelocity+0x11c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd ffd5 	bl	80004bc <__aeabi_i2d>
 8002512:	a339      	add	r3, pc, #228	@ (adr r3, 80025f8 <getvelocity+0x108>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	f7fe f83a 	bl	8000590 <__aeabi_dmul>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4610      	mov	r0, r2
 8002522:	4619      	mov	r1, r3
 8002524:	f7fe fb0c 	bl	8000b40 <__aeabi_d2f>
 8002528:	4603      	mov	r3, r0
 800252a:	607b      	str	r3, [r7, #4]
// quick fix for strange cases (micros overflow)
	if (Ts <= 0 || Ts > 0.0008f)
 800252c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002530:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002538:	d908      	bls.n	800254c <getvelocity+0x5c>
 800253a:	edd7 7a01 	vldr	s15, [r7, #4]
 800253e:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8002610 <getvelocity+0x120>
 8002542:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254a:	dd01      	ble.n	8002550 <getvelocity+0x60>
		Ts = 0.0008f;
 800254c:	4b31      	ldr	r3, [pc, #196]	@ (8002614 <getvelocity+0x124>)
 800254e:	607b      	str	r3, [r7, #4]
// velocity calculation
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 8002550:	4b31      	ldr	r3, [pc, #196]	@ (8002618 <getvelocity+0x128>)
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	4b31      	ldr	r3, [pc, #196]	@ (800261c <getvelocity+0x12c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	ee07 3a90 	vmov	s15, r3
 800255e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002562:	ee17 0a90 	vmov	r0, s15
 8002566:	f7fd ffbb 	bl	80004e0 <__aeabi_f2d>
 800256a:	a325      	add	r3, pc, #148	@ (adr r3, 8002600 <getvelocity+0x110>)
 800256c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002570:	f7fe f80e 	bl	8000590 <__aeabi_dmul>
 8002574:	4602      	mov	r2, r0
 8002576:	460b      	mov	r3, r1
 8002578:	4614      	mov	r4, r2
 800257a:	461d      	mov	r5, r3
			+ (angle_prev - vel_angle_prev)) / Ts;
 800257c:	4b28      	ldr	r3, [pc, #160]	@ (8002620 <getvelocity+0x130>)
 800257e:	ed93 7a00 	vldr	s14, [r3]
 8002582:	4b28      	ldr	r3, [pc, #160]	@ (8002624 <getvelocity+0x134>)
 8002584:	edd3 7a00 	vldr	s15, [r3]
 8002588:	ee77 7a67 	vsub.f32	s15, s14, s15
 800258c:	ee17 0a90 	vmov	r0, s15
 8002590:	f7fd ffa6 	bl	80004e0 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4620      	mov	r0, r4
 800259a:	4629      	mov	r1, r5
 800259c:	f7fd fe42 	bl	8000224 <__adddf3>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4614      	mov	r4, r2
 80025a6:	461d      	mov	r5, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f7fd ff99 	bl	80004e0 <__aeabi_f2d>
 80025ae:	4602      	mov	r2, r0
 80025b0:	460b      	mov	r3, r1
 80025b2:	4620      	mov	r0, r4
 80025b4:	4629      	mov	r1, r5
 80025b6:	f7fe f915 	bl	80007e4 <__aeabi_ddiv>
 80025ba:	4602      	mov	r2, r0
 80025bc:	460b      	mov	r3, r1
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f7fe fabd 	bl	8000b40 <__aeabi_d2f>
 80025c6:	4603      	mov	r3, r0
 80025c8:	603b      	str	r3, [r7, #0]
// save variables for future pass
	vel_angle_prev = angle_prev;
 80025ca:	4b15      	ldr	r3, [pc, #84]	@ (8002620 <getvelocity+0x130>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a15      	ldr	r2, [pc, #84]	@ (8002624 <getvelocity+0x134>)
 80025d0:	6013      	str	r3, [r2, #0]
	vel_full_rotations = full_rotations;
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <getvelocity+0x128>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a11      	ldr	r2, [pc, #68]	@ (800261c <getvelocity+0x12c>)
 80025d8:	6013      	str	r3, [r2, #0]
	vel_angle_prev_ts = vel_angle_ts;
 80025da:	4b0b      	ldr	r3, [pc, #44]	@ (8002608 <getvelocity+0x118>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a0b      	ldr	r2, [pc, #44]	@ (800260c <getvelocity+0x11c>)
 80025e0:	6013      	str	r3, [r2, #0]
	return vel;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	ee07 3a90 	vmov	s15, r3
}
 80025e8:	eeb0 0a67 	vmov.f32	s0, s15
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bdb0      	pop	{r4, r5, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80025fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8002600:	54442eea 	.word	0x54442eea
 8002604:	401921fb 	.word	0x401921fb
 8002608:	2000089c 	.word	0x2000089c
 800260c:	20000894 	.word	0x20000894
 8002610:	3a51b717 	.word	0x3a51b717
 8002614:	3a51b717 	.word	0x3a51b717
 8002618:	2000088c 	.word	0x2000088c
 800261c:	20000890 	.word	0x20000890
 8002620:	2000087c 	.word	0x2000087c
 8002624:	20000880 	.word	0x20000880

08002628 <getacceleration>:

float getacceleration() {
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
// calculate sample time
	acc_ts = micros() ;
 800262e:	f7ff f997 	bl	8001960 <micros>
 8002632:	4603      	mov	r3, r0
 8002634:	461a      	mov	r2, r3
 8002636:	4b38      	ldr	r3, [pc, #224]	@ (8002718 <getacceleration+0xf0>)
 8002638:	601a      	str	r2, [r3, #0]
	float Ts = (acc_ts - acc_prev_ts) * 1e-6;
 800263a:	4b37      	ldr	r3, [pc, #220]	@ (8002718 <getacceleration+0xf0>)
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	4b37      	ldr	r3, [pc, #220]	@ (800271c <getacceleration+0xf4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	4618      	mov	r0, r3
 8002646:	f7fd ff39 	bl	80004bc <__aeabi_i2d>
 800264a:	a331      	add	r3, pc, #196	@ (adr r3, 8002710 <getacceleration+0xe8>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd ff9e 	bl	8000590 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe fa70 	bl	8000b40 <__aeabi_d2f>
 8002660:	4603      	mov	r3, r0
 8002662:	60fb      	str	r3, [r7, #12]
// quick fix for strange cases (micros overflow)
	if (Ts <= 0 || Ts > 0.0008f)
 8002664:	edd7 7a03 	vldr	s15, [r7, #12]
 8002668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800266c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002670:	d908      	bls.n	8002684 <getacceleration+0x5c>
 8002672:	edd7 7a03 	vldr	s15, [r7, #12]
 8002676:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002720 <getacceleration+0xf8>
 800267a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	dd01      	ble.n	8002688 <getacceleration+0x60>
		Ts = 0.0008f;
 8002684:	4b27      	ldr	r3, [pc, #156]	@ (8002724 <getacceleration+0xfc>)
 8002686:	60fb      	str	r3, [r7, #12]
	float temp = (int)(shaftVelocity() * 100 +0.5);
 8002688:	f000 f890 	bl	80027ac <shaftVelocity>
 800268c:	eef0 7a40 	vmov.f32	s15, s0
 8002690:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002728 <getacceleration+0x100>
 8002694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002698:	ee17 0a90 	vmov	r0, s15
 800269c:	f7fd ff20 	bl	80004e0 <__aeabi_f2d>
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	4b21      	ldr	r3, [pc, #132]	@ (800272c <getacceleration+0x104>)
 80026a6:	f7fd fdbd 	bl	8000224 <__adddf3>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	4610      	mov	r0, r2
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7fe fa1d 	bl	8000af0 <__aeabi_d2iz>
 80026b6:	ee07 0a90 	vmov	s15, r0
 80026ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026be:	edc7 7a02 	vstr	s15, [r7, #8]
	acc_vel = (float)temp/100 ;
 80026c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80026c6:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8002728 <getacceleration+0x100>
 80026ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026ce:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <getacceleration+0x108>)
 80026d0:	edc3 7a00 	vstr	s15, [r3]
	float acc = (acc_vel_prev - acc_vel) / Ts ;
 80026d4:	4b17      	ldr	r3, [pc, #92]	@ (8002734 <getacceleration+0x10c>)
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <getacceleration+0x108>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee77 6a67 	vsub.f32	s13, s14, s15
 80026e4:	ed97 7a03 	vldr	s14, [r7, #12]
 80026e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ec:	edc7 7a01 	vstr	s15, [r7, #4]

	acc_vel_prev = acc_vel ;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <getacceleration+0x108>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002734 <getacceleration+0x10c>)
 80026f6:	6013      	str	r3, [r2, #0]
	acc_prev_ts = acc_ts ;
 80026f8:	4b07      	ldr	r3, [pc, #28]	@ (8002718 <getacceleration+0xf0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a07      	ldr	r2, [pc, #28]	@ (800271c <getacceleration+0xf4>)
 80026fe:	6013      	str	r3, [r2, #0]
	return acc ;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	ee07 3a90 	vmov	s15, r3
//
//		zeta_3 = zeta_2;
//		zeta_2 = zeta_1 ;
//		acc_prev_ts = acc_ts ;
//		return acc ;
}
 8002706:	eeb0 0a67 	vmov.f32	s0, s15
 800270a:	3710      	adds	r7, #16
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	a0b5ed8d 	.word	0xa0b5ed8d
 8002714:	3eb0c6f7 	.word	0x3eb0c6f7
 8002718:	200008a0 	.word	0x200008a0
 800271c:	200008a4 	.word	0x200008a4
 8002720:	3a51b717 	.word	0x3a51b717
 8002724:	3a51b717 	.word	0x3a51b717
 8002728:	42c80000 	.word	0x42c80000
 800272c:	3fe00000 	.word	0x3fe00000
 8002730:	20000888 	.word	0x20000888
 8002734:	20000884 	.word	0x20000884

08002738 <shaftAngle>:
// shaft angle calculation
float shaftAngle() {
 8002738:	b5f0      	push	{r4, r5, r6, r7, lr}
 800273a:	b089      	sub	sp, #36	@ 0x24
 800273c:	af02      	add	r7, sp, #8
	LPF_angle.x = getAngle();
 800273e:	f7ff fea3 	bl	8002488 <getAngle>
 8002742:	eef0 7a40 	vmov.f32	s15, s0
 8002746:	4b16      	ldr	r3, [pc, #88]	@ (80027a0 <shaftAngle+0x68>)
 8002748:	edc3 7a00 	vstr	s15, [r3]
	LPF_angle = LowPassFilter(LPF_angle);
 800274c:	4e14      	ldr	r6, [pc, #80]	@ (80027a0 <shaftAngle+0x68>)
 800274e:	463c      	mov	r4, r7
 8002750:	4b13      	ldr	r3, [pc, #76]	@ (80027a0 <shaftAngle+0x68>)
 8002752:	466d      	mov	r5, sp
 8002754:	f103 020c 	add.w	r2, r3, #12
 8002758:	e892 0003 	ldmia.w	r2, {r0, r1}
 800275c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002760:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002762:	4620      	mov	r0, r4
 8002764:	f001 f862 	bl	800382c <LowPassFilter>
 8002768:	4635      	mov	r5, r6
 800276a:	463c      	mov	r4, r7
 800276c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800276e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002770:	6823      	ldr	r3, [r4, #0]
 8002772:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_angle.y_prev - sensor_offset;
 8002774:	4b0b      	ldr	r3, [pc, #44]	@ (80027a4 <shaftAngle+0x6c>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	ee07 3a90 	vmov	s15, r3
 800277c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002780:	4b07      	ldr	r3, [pc, #28]	@ (80027a0 <shaftAngle+0x68>)
 8002782:	edd3 7a02 	vldr	s15, [r3, #8]
 8002786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278a:	4b07      	ldr	r3, [pc, #28]	@ (80027a8 <shaftAngle+0x70>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8002794:	eeb0 0a67 	vmov.f32	s0, s15
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800279e:	bf00      	nop
 80027a0:	20000930 	.word	0x20000930
 80027a4:	2000001c 	.word	0x2000001c
 80027a8:	20000c6c 	.word	0x20000c6c

080027ac <shaftVelocity>:
// shaft velocity calculation
float shaftVelocity() {
 80027ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ae:	b089      	sub	sp, #36	@ 0x24
 80027b0:	af02      	add	r7, sp, #8
	LPF_velocity.x = getvelocity();
 80027b2:	f7ff fe9d 	bl	80024f0 <getvelocity>
 80027b6:	eef0 7a40 	vmov.f32	s15, s0
 80027ba:	4b13      	ldr	r3, [pc, #76]	@ (8002808 <shaftVelocity+0x5c>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
	LPF_velocity = LowPassFilter(LPF_velocity);
 80027c0:	4e11      	ldr	r6, [pc, #68]	@ (8002808 <shaftVelocity+0x5c>)
 80027c2:	463c      	mov	r4, r7
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <shaftVelocity+0x5c>)
 80027c6:	466d      	mov	r5, sp
 80027c8:	f103 020c 	add.w	r2, r3, #12
 80027cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80027d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027d6:	4620      	mov	r0, r4
 80027d8:	f001 f828 	bl	800382c <LowPassFilter>
 80027dc:	4635      	mov	r5, r6
 80027de:	463c      	mov	r4, r7
 80027e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_velocity.y_prev;
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <shaftVelocity+0x60>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	ee07 3a90 	vmov	s15, r3
 80027f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027f4:	4b04      	ldr	r3, [pc, #16]	@ (8002808 <shaftVelocity+0x5c>)
 80027f6:	edd3 7a02 	vldr	s15, [r3, #8]
 80027fa:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002808:	20000944 	.word	0x20000944
 800280c:	2000001c 	.word	0x2000001c

08002810 <shaftAcceleration>:

float shaftAcceleration() {
 8002810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002812:	b089      	sub	sp, #36	@ 0x24
 8002814:	af02      	add	r7, sp, #8
	LPF_acceleration.x = getacceleration();
 8002816:	f7ff ff07 	bl	8002628 <getacceleration>
 800281a:	eef0 7a40 	vmov.f32	s15, s0
 800281e:	4b13      	ldr	r3, [pc, #76]	@ (800286c <shaftAcceleration+0x5c>)
 8002820:	edc3 7a00 	vstr	s15, [r3]
	LPF_acceleration = LowPassFilter(LPF_acceleration);
 8002824:	4e11      	ldr	r6, [pc, #68]	@ (800286c <shaftAcceleration+0x5c>)
 8002826:	463c      	mov	r4, r7
 8002828:	4b10      	ldr	r3, [pc, #64]	@ (800286c <shaftAcceleration+0x5c>)
 800282a:	466d      	mov	r5, sp
 800282c:	f103 020c 	add.w	r2, r3, #12
 8002830:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002834:	e885 0003 	stmia.w	r5, {r0, r1}
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	4620      	mov	r0, r4
 800283c:	f000 fff6 	bl	800382c <LowPassFilter>
 8002840:	4635      	mov	r5, r6
 8002842:	463c      	mov	r4, r7
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	6823      	ldr	r3, [r4, #0]
 800284a:	602b      	str	r3, [r5, #0]
	return sensor_direction * LPF_acceleration.y_prev;
 800284c:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <shaftAcceleration+0x60>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	ee07 3a90 	vmov	s15, r3
 8002854:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002858:	4b04      	ldr	r3, [pc, #16]	@ (800286c <shaftAcceleration+0x5c>)
 800285a:	edd3 7a02 	vldr	s15, [r3, #8]
 800285e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002862:	eeb0 0a67 	vmov.f32	s0, s15
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800286c:	20000958 	.word	0x20000958
 8002870:	2000001c 	.word	0x2000001c

08002874 <electricalAngle>:
//Conversion shaft angle to elec angle
float electricalAngle() {
 8002874:	b580      	push	{r7, lr}
 8002876:	ed2d 8b02 	vpush	{d8}
 800287a:	af00      	add	r7, sp, #0
	return _normalizeAngle(
			(float) (sensor_direction * pole_pairs) * getMechanicalAngle()
 800287c:	4b10      	ldr	r3, [pc, #64]	@ (80028c0 <electricalAngle+0x4c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a10      	ldr	r2, [pc, #64]	@ (80028c4 <electricalAngle+0x50>)
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	fb02 f303 	mul.w	r3, r2, r3
 8002888:	ee07 3a90 	vmov	s15, r3
 800288c:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002890:	f7ff fdec 	bl	800246c <getMechanicalAngle>
 8002894:	eef0 7a40 	vmov.f32	s15, s0
 8002898:	ee28 7a27 	vmul.f32	s14, s16, s15
	return _normalizeAngle(
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <electricalAngle+0x54>)
 800289e:	edd3 7a00 	vldr	s15, [r3]
 80028a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028a6:	eeb0 0a67 	vmov.f32	s0, s15
 80028aa:	f7ff fbd9 	bl	8002060 <_normalizeAngle>
 80028ae:	eef0 7a40 	vmov.f32	s15, s0
					- zero_electric_angle);
}
 80028b2:	eeb0 0a67 	vmov.f32	s0, s15
 80028b6:	46bd      	mov	sp, r7
 80028b8:	ecbd 8b02 	vpop	{d8}
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000001c 	.word	0x2000001c
 80028c4:	20000c5c 	.word	0x20000c5c
 80028c8:	20000014 	.word	0x20000014

080028cc <adaptiveZero>:
void adaptiveZero() {
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
	float min_value = 99.0;
 80028d2:	4b22      	ldr	r3, [pc, #136]	@ (800295c <adaptiveZero+0x90>)
 80028d4:	60fb      	str	r3, [r7, #12]
	int min_index = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
	float value;
	for (int i = 0; i < pole_pairs; i++) {
 80028da:	2300      	movs	r3, #0
 80028dc:	607b      	str	r3, [r7, #4]
 80028de:	e024      	b.n	800292a <adaptiveZero+0x5e>
		value = fabs(angle_prev - shaft_angle_pp[i][motor_nbr]);
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <adaptiveZero+0x94>)
 80028e2:	ed93 7a00 	vldr	s14, [r3]
 80028e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <adaptiveZero+0x98>)
 80028e8:	6819      	ldr	r1, [r3, #0]
 80028ea:	481f      	ldr	r0, [pc, #124]	@ (8002968 <adaptiveZero+0x9c>)
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	440b      	add	r3, r1
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4403      	add	r3, r0
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002902:	eef0 7ae7 	vabs.f32	s15, s15
 8002906:	edc7 7a00 	vstr	s15, [r7]
		if (value < min_value) {
 800290a:	ed97 7a00 	vldr	s14, [r7]
 800290e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	d503      	bpl.n	8002924 <adaptiveZero+0x58>
			min_value = value;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	60fb      	str	r3, [r7, #12]
			min_index = i;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < pole_pairs; i++) {
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3301      	adds	r3, #1
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b10      	ldr	r3, [pc, #64]	@ (800296c <adaptiveZero+0xa0>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	429a      	cmp	r2, r3
 8002932:	dbd5      	blt.n	80028e0 <adaptiveZero+0x14>
		}
	}
	zero_electric_angle = zero_angle_pp[min_index][motor_nbr];
 8002934:	4b0b      	ldr	r3, [pc, #44]	@ (8002964 <adaptiveZero+0x98>)
 8002936:	6819      	ldr	r1, [r3, #0]
 8002938:	480d      	ldr	r0, [pc, #52]	@ (8002970 <adaptiveZero+0xa4>)
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	4613      	mov	r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4413      	add	r3, r2
 8002942:	440b      	add	r3, r1
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4403      	add	r3, r0
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <adaptiveZero+0xa8>)
 800294c:	6013      	str	r3, [r2, #0]
//	return _normalizeAngle(zero_electric_angle);
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	42c60000 	.word	0x42c60000
 8002960:	2000087c 	.word	0x2000087c
 8002964:	20000d24 	.word	0x20000d24
 8002968:	20000264 	.word	0x20000264
 800296c:	20000c5c 	.word	0x20000c5c
 8002970:	2000037c 	.word	0x2000037c
 8002974:	20000014 	.word	0x20000014

08002978 <writeDutyCycle3PWM>:
/// Returns minimum of x, y, z ///
	return (x < y ? (x < z ? x : z) : (y < z ? y : z));
}

//Write PWM fsw = 25kHzfloat Ts
void writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) {
 8002978:	b480      	push	{r7}
 800297a:	b085      	sub	sp, #20
 800297c:	af00      	add	r7, sp, #0
 800297e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002982:	edc7 0a02 	vstr	s1, [r7, #8]
 8002986:	ed87 1a01 	vstr	s2, [r7, #4]
//	dc_a = 1.0f - dc_a ;
//	dc_b = 1.0f - dc_b ;
//	dc_c = 1.0f - dc_c ;
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_b);
 800298a:	edd7 7a02 	vldr	s15, [r7, #8]
 800298e:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80029e4 <writeDutyCycle3PWM+0x6c>
 8002992:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002996:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <writeDutyCycle3PWM+0x70>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800299e:	ee17 2a90 	vmov	r2, s15
 80029a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_c);
 80029a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80029e4 <writeDutyCycle3PWM+0x6c>
 80029ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029b0:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <writeDutyCycle3PWM+0x70>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029b8:	ee17 2a90 	vmov	r2, s15
 80029bc:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_a);
 80029be:	edd7 7a03 	vldr	s15, [r7, #12]
 80029c2:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80029e4 <writeDutyCycle3PWM+0x6c>
 80029c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ca:	4b07      	ldr	r3, [pc, #28]	@ (80029e8 <writeDutyCycle3PWM+0x70>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029d2:	ee17 2a90 	vmov	r2, s15
 80029d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80029d8:	bf00      	nop
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	45610000 	.word	0x45610000
 80029e8:	20000818 	.word	0x20000818
 80029ec:	00000000 	.word	0x00000000

080029f0 <setPhaseVoltage>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void setPhaseVoltage(float Uq, float Ud, float angle_el) {
 80029f0:	b5b0      	push	{r4, r5, r7, lr}
 80029f2:	b08c      	sub	sp, #48	@ 0x30
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	ed87 0a03 	vstr	s0, [r7, #12]
 80029fa:	edc7 0a02 	vstr	s1, [r7, #8]
 80029fe:	ed87 1a01 	vstr	s2, [r7, #4]
// Sinusoidal PWM modulation ---------------------------------------------------------
// Inverse Park + Clarke transformation

// angle normalization in between 0 and 2pi
// only necessary if using _sin and _cos - approximation functions
	angle_el = _normalizeAngle(angle_el);
 8002a02:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a06:	f7ff fb2b 	bl	8002060 <_normalizeAngle>
 8002a0a:	ed87 0a01 	vstr	s0, [r7, #4]
// Inverse park transform
	float _ca = _cos(angle_el);
 8002a0e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a12:	f7ff fadd 	bl	8001fd0 <_cos>
 8002a16:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
	float _sa = _sin(angle_el);
 8002a1a:	ed97 0a01 	vldr	s0, [r7, #4]
 8002a1e:	f7ff f977 	bl	8001d10 <_sin>
 8002a22:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
	float iv_alpha, iv_beta;

	iv_alpha = _ca * Ud - _sa * Uq;  // -sin(angle) * Uq;
 8002a26:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8002a2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a32:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8002a36:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	iv_beta = _sa * Ud + _ca * Uq;    //  cos(angle) * Uq;
 8002a46:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002a4a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002a4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a52:	edd7 6a0b 	vldr	s13, [r7, #44]	@ 0x2c
 8002a56:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a62:	edc7 7a08 	vstr	s15, [r7, #32]

// center = modulation_centered ? (driver->voltage_limit)/2 : Uq;
	float center = voltage_limit / 2;
 8002a66:	4bae      	ldr	r3, [pc, #696]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002a68:	ed93 7a00 	vldr	s14, [r3]
 8002a6c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002a70:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a74:	edc7 7a07 	vstr	s15, [r7, #28]
// Inverse Clarke transform
	Ua = iv_alpha + center;
 8002a78:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a84:	4ba7      	ldr	r3, [pc, #668]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002a86:	edc3 7a00 	vstr	s15, [r3]
	Ub = -0.5f * iv_alpha + _SQRT3_2 * iv_beta + center;
 8002a8a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002a8e:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8002a92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a96:	ee17 0a90 	vmov	r0, s15
 8002a9a:	f7fd fd21 	bl	80004e0 <__aeabi_f2d>
 8002a9e:	4604      	mov	r4, r0
 8002aa0:	460d      	mov	r5, r1
 8002aa2:	6a38      	ldr	r0, [r7, #32]
 8002aa4:	f7fd fd1c 	bl	80004e0 <__aeabi_f2d>
 8002aa8:	a39b      	add	r3, pc, #620	@ (adr r3, 8002d18 <setPhaseVoltage+0x328>)
 8002aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aae:	f7fd fd6f 	bl	8000590 <__aeabi_dmul>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4620      	mov	r0, r4
 8002ab8:	4629      	mov	r1, r5
 8002aba:	f7fd fbb3 	bl	8000224 <__adddf3>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4614      	mov	r4, r2
 8002ac4:	461d      	mov	r5, r3
 8002ac6:	69f8      	ldr	r0, [r7, #28]
 8002ac8:	f7fd fd0a 	bl	80004e0 <__aeabi_f2d>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fba6 	bl	8000224 <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f82e 	bl	8000b40 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a90      	ldr	r2, [pc, #576]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002ae8:	6013      	str	r3, [r2, #0]
	Uc = -0.5f * iv_alpha - _SQRT3_2 * iv_beta + center;
 8002aea:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002aee:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8002af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002af6:	ee17 0a90 	vmov	r0, s15
 8002afa:	f7fd fcf1 	bl	80004e0 <__aeabi_f2d>
 8002afe:	4604      	mov	r4, r0
 8002b00:	460d      	mov	r5, r1
 8002b02:	6a38      	ldr	r0, [r7, #32]
 8002b04:	f7fd fcec 	bl	80004e0 <__aeabi_f2d>
 8002b08:	a383      	add	r3, pc, #524	@ (adr r3, 8002d18 <setPhaseVoltage+0x328>)
 8002b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0e:	f7fd fd3f 	bl	8000590 <__aeabi_dmul>
 8002b12:	4602      	mov	r2, r0
 8002b14:	460b      	mov	r3, r1
 8002b16:	4620      	mov	r0, r4
 8002b18:	4629      	mov	r1, r5
 8002b1a:	f7fd fb81 	bl	8000220 <__aeabi_dsub>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4614      	mov	r4, r2
 8002b24:	461d      	mov	r5, r3
 8002b26:	69f8      	ldr	r0, [r7, #28]
 8002b28:	f7fd fcda 	bl	80004e0 <__aeabi_f2d>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	460b      	mov	r3, r1
 8002b30:	4620      	mov	r0, r4
 8002b32:	4629      	mov	r1, r5
 8002b34:	f7fd fb76 	bl	8000224 <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4610      	mov	r0, r2
 8002b3e:	4619      	mov	r1, r3
 8002b40:	f7fd fffe 	bl	8000b40 <__aeabi_d2f>
 8002b44:	4603      	mov	r3, r0
 8002b46:	4a79      	ldr	r2, [pc, #484]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002b48:	6013      	str	r3, [r2, #0]
//  Uc = Tc * voltage_limit;
//--------------------------------------------------------------

// set the voltages in hardware
// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002b4a:	4b76      	ldr	r3, [pc, #472]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002b4c:	edd3 7a00 	vldr	s15, [r3]
 8002b50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b58:	d502      	bpl.n	8002b60 <setPhaseVoltage+0x170>
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e00f      	b.n	8002b80 <setPhaseVoltage+0x190>
 8002b60:	4b70      	ldr	r3, [pc, #448]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002b62:	ed93 7a00 	vldr	s14, [r3]
 8002b66:	4b6e      	ldr	r3, [pc, #440]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b74:	dd02      	ble.n	8002b7c <setPhaseVoltage+0x18c>
 8002b76:	4b6a      	ldr	r3, [pc, #424]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	e001      	b.n	8002b80 <setPhaseVoltage+0x190>
 8002b7c:	4b69      	ldr	r3, [pc, #420]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a68      	ldr	r2, [pc, #416]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002b82:	6013      	str	r3, [r2, #0]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002b84:	4b68      	ldr	r3, [pc, #416]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002b86:	edd3 7a00 	vldr	s15, [r3]
 8002b8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b92:	d502      	bpl.n	8002b9a <setPhaseVoltage+0x1aa>
 8002b94:	f04f 0300 	mov.w	r3, #0
 8002b98:	e00f      	b.n	8002bba <setPhaseVoltage+0x1ca>
 8002b9a:	4b63      	ldr	r3, [pc, #396]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002b9c:	ed93 7a00 	vldr	s14, [r3]
 8002ba0:	4b5f      	ldr	r3, [pc, #380]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002ba2:	edd3 7a00 	vldr	s15, [r3]
 8002ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bae:	dd02      	ble.n	8002bb6 <setPhaseVoltage+0x1c6>
 8002bb0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	e001      	b.n	8002bba <setPhaseVoltage+0x1ca>
 8002bb6:	4b5c      	ldr	r3, [pc, #368]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002bbc:	6013      	str	r3, [r2, #0]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002bc0:	edd3 7a00 	vldr	s15, [r3]
 8002bc4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bcc:	d502      	bpl.n	8002bd4 <setPhaseVoltage+0x1e4>
 8002bce:	f04f 0300 	mov.w	r3, #0
 8002bd2:	e00f      	b.n	8002bf4 <setPhaseVoltage+0x204>
 8002bd4:	4b55      	ldr	r3, [pc, #340]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b51      	ldr	r3, [pc, #324]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	dd02      	ble.n	8002bf0 <setPhaseVoltage+0x200>
 8002bea:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <setPhaseVoltage+0x330>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	e001      	b.n	8002bf4 <setPhaseVoltage+0x204>
 8002bf0:	4b4e      	ldr	r3, [pc, #312]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002bf6:	6013      	str	r3, [r2, #0]
// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 0.94]
	float dc_b;  //duty cycle phase B [0, 0.94]
	float dc_c;  //duty cycle phase C [0, 0.94]
// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 8002bf8:	4b4a      	ldr	r3, [pc, #296]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002bfa:	edd3 6a00 	vldr	s13, [r3]
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c00:	ed93 7a00 	vldr	s14, [r3]
 8002c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c08:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c10:	d502      	bpl.n	8002c18 <setPhaseVoltage+0x228>
 8002c12:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8002d34 <setPhaseVoltage+0x344>
 8002c16:	e019      	b.n	8002c4c <setPhaseVoltage+0x25c>
 8002c18:	4b42      	ldr	r3, [pc, #264]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002c1a:	edd3 6a00 	vldr	s13, [r3]
 8002c1e:	4b44      	ldr	r3, [pc, #272]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c20:	ed93 7a00 	vldr	s14, [r3]
 8002c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c28:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8002d38 <setPhaseVoltage+0x348>
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	dd02      	ble.n	8002c3c <setPhaseVoltage+0x24c>
 8002c36:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8002d38 <setPhaseVoltage+0x348>
 8002c3a:	e007      	b.n	8002c4c <setPhaseVoltage+0x25c>
 8002c3c:	4b39      	ldr	r3, [pc, #228]	@ (8002d24 <setPhaseVoltage+0x334>)
 8002c3e:	edd3 6a00 	vldr	s13, [r3]
 8002c42:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c44:	ed93 7a00 	vldr	s14, [r3]
 8002c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c4c:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 8002c50:	4b35      	ldr	r3, [pc, #212]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002c52:	edd3 6a00 	vldr	s13, [r3]
 8002c56:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c58:	ed93 7a00 	vldr	s14, [r3]
 8002c5c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c68:	d502      	bpl.n	8002c70 <setPhaseVoltage+0x280>
 8002c6a:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8002d34 <setPhaseVoltage+0x344>
 8002c6e:	e019      	b.n	8002ca4 <setPhaseVoltage+0x2b4>
 8002c70:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002c72:	edd3 6a00 	vldr	s13, [r3]
 8002c76:	4b2e      	ldr	r3, [pc, #184]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c78:	ed93 7a00 	vldr	s14, [r3]
 8002c7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c80:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8002d38 <setPhaseVoltage+0x348>
 8002c84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8c:	dd02      	ble.n	8002c94 <setPhaseVoltage+0x2a4>
 8002c8e:	eddf 7a2a 	vldr	s15, [pc, #168]	@ 8002d38 <setPhaseVoltage+0x348>
 8002c92:	e007      	b.n	8002ca4 <setPhaseVoltage+0x2b4>
 8002c94:	4b24      	ldr	r3, [pc, #144]	@ (8002d28 <setPhaseVoltage+0x338>)
 8002c96:	edd3 6a00 	vldr	s13, [r3]
 8002c9a:	4b25      	ldr	r3, [pc, #148]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002c9c:	ed93 7a00 	vldr	s14, [r3]
 8002ca0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ca4:	edc7 7a05 	vstr	s15, [r7, #20]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 8002ca8:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002caa:	edd3 6a00 	vldr	s13, [r3]
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002cb0:	ed93 7a00 	vldr	s14, [r3]
 8002cb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d502      	bpl.n	8002cc8 <setPhaseVoltage+0x2d8>
 8002cc2:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8002d34 <setPhaseVoltage+0x344>
 8002cc6:	e019      	b.n	8002cfc <setPhaseVoltage+0x30c>
 8002cc8:	4b18      	ldr	r3, [pc, #96]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002cca:	edd3 6a00 	vldr	s13, [r3]
 8002cce:	4b18      	ldr	r3, [pc, #96]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002cd0:	ed93 7a00 	vldr	s14, [r3]
 8002cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cd8:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002d38 <setPhaseVoltage+0x348>
 8002cdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce4:	dd02      	ble.n	8002cec <setPhaseVoltage+0x2fc>
 8002ce6:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8002d38 <setPhaseVoltage+0x348>
 8002cea:	e007      	b.n	8002cfc <setPhaseVoltage+0x30c>
 8002cec:	4b0f      	ldr	r3, [pc, #60]	@ (8002d2c <setPhaseVoltage+0x33c>)
 8002cee:	edd3 6a00 	vldr	s13, [r3]
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8002d30 <setPhaseVoltage+0x340>)
 8002cf4:	ed93 7a00 	vldr	s14, [r3]
 8002cf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cfc:	edc7 7a04 	vstr	s15, [r7, #16]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8002d00:	ed97 1a04 	vldr	s2, [r7, #16]
 8002d04:	edd7 0a05 	vldr	s1, [r7, #20]
 8002d08:	ed97 0a06 	vldr	s0, [r7, #24]
 8002d0c:	f7ff fe34 	bl	8002978 <writeDutyCycle3PWM>
}
 8002d10:	bf00      	nop
 8002d12:	3730      	adds	r7, #48	@ 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bdb0      	pop	{r4, r5, r7, pc}
 8002d18:	e857b07f 	.word	0xe857b07f
 8002d1c:	3febb67a 	.word	0x3febb67a
 8002d20:	20000c60 	.word	0x20000c60
 8002d24:	200008f8 	.word	0x200008f8
 8002d28:	200008fc 	.word	0x200008fc
 8002d2c:	20000900 	.word	0x20000900
 8002d30:	20000c44 	.word	0x20000c44
 8002d34:	00000000 	.word	0x00000000
 8002d38:	3f70a3d7 	.word	0x3f70a3d7

08002d3c <needsSearch>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int needsSearch() {
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	return 0;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr
 8002d4c:	0000      	movs	r0, r0
	...

08002d50 <absoluteZeroSearch>:
// Encoder alignment the absolute zero angle
// - to the index
int absoluteZeroSearch() {
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <absoluteZeroSearch+0x98>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	607b      	str	r3, [r7, #4]
	float limit_volt = voltage_limit;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <absoluteZeroSearch+0x9c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	603b      	str	r3, [r7, #0]
	velocity_limit = velocity_index_search;
 8002d62:	4b23      	ldr	r3, [pc, #140]	@ (8002df0 <absoluteZeroSearch+0xa0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a20      	ldr	r2, [pc, #128]	@ (8002de8 <absoluteZeroSearch+0x98>)
 8002d68:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 8002d6a:	4b22      	ldr	r3, [pc, #136]	@ (8002df4 <absoluteZeroSearch+0xa4>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002dec <absoluteZeroSearch+0x9c>)
 8002d70:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8002d72:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <absoluteZeroSearch+0xa8>)
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
	while (needsSearch() && shaft_angle < _2PI) {
 8002d7a:	e005      	b.n	8002d88 <absoluteZeroSearch+0x38>
		angleOpenloop(1.5 * _2PI);
 8002d7c:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8002dfc <absoluteZeroSearch+0xac>
 8002d80:	f001 fdfe 	bl	8004980 <angleOpenloop>
		// call important for some sensors not to loose count
		// not needed for the search
		getAngle();
 8002d84:	f7ff fb80 	bl	8002488 <getAngle>
	while (needsSearch() && shaft_angle < _2PI) {
 8002d88:	f7ff ffd8 	bl	8002d3c <needsSearch>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00c      	beq.n	8002dac <absoluteZeroSearch+0x5c>
 8002d92:	4b19      	ldr	r3, [pc, #100]	@ (8002df8 <absoluteZeroSearch+0xa8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fd fba2 	bl	80004e0 <__aeabi_f2d>
 8002d9c:	a310      	add	r3, pc, #64	@ (adr r3, 8002de0 <absoluteZeroSearch+0x90>)
 8002d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002da2:	f7fd fe67 	bl	8000a74 <__aeabi_dcmplt>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e7      	bne.n	8002d7c <absoluteZeroSearch+0x2c>
	}
	setPhaseVoltage(0, 0, 0);
 8002dac:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8002e00 <absoluteZeroSearch+0xb0>
 8002db0:	eddf 0a13 	vldr	s1, [pc, #76]	@ 8002e00 <absoluteZeroSearch+0xb0>
 8002db4:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002e00 <absoluteZeroSearch+0xb0>
 8002db8:	f7ff fe1a 	bl	80029f0 <setPhaseVoltage>

// re-init the limits
	velocity_limit = limit_vel;
 8002dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002de8 <absoluteZeroSearch+0x98>)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <absoluteZeroSearch+0x9c>)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8002dc8:	f7ff ffb8 	bl	8002d3c <needsSearch>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	bf0c      	ite	eq
 8002dd2:	2301      	moveq	r3, #1
 8002dd4:	2300      	movne	r3, #0
 8002dd6:	b2db      	uxtb	r3, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	54442eea 	.word	0x54442eea
 8002de4:	401921fb 	.word	0x401921fb
 8002de8:	20000c68 	.word	0x20000c68
 8002dec:	20000c60 	.word	0x20000c60
 8002df0:	20000c40 	.word	0x20000c40
 8002df4:	20000c3c 	.word	0x20000c3c
 8002df8:	20000908 	.word	0x20000908
 8002dfc:	4116cbe4 	.word	0x4116cbe4
	...

08002e08 <alignSensor>:
// Encoder alignment to electrical 0 angle
int alignSensor() {
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08c      	sub	sp, #48	@ 0x30
 8002e0c:	af00      	add	r7, sp, #0
	int exit_flag = 1; //success
 8002e0e:	2301      	movs	r3, #1
 8002e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
// if unknown natural direction
	if (!_isset(sensor_direction)) {
 8002e12:	4bb5      	ldr	r3, [pc, #724]	@ (80030e8 <alignSensor+0x2e0>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4ab5      	ldr	r2, [pc, #724]	@ (80030ec <alignSensor+0x2e4>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	f040 80b8 	bne.w	8002f8e <alignSensor+0x186>
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8002e1e:	f7ff ff8d 	bl	8002d3c <needsSearch>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <alignSensor+0x26>
			exit_flag = absoluteZeroSearch(); // o
 8002e28:	f7ff ff92 	bl	8002d50 <absoluteZeroSearch>
 8002e2c:	62f8      	str	r0, [r7, #44]	@ 0x2c
		if (!exit_flag)
 8002e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <alignSensor+0x30>
			return exit_flag;
 8002e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e36:	e193      	b.n	8003160 <alignSensor+0x358>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) {
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e3c:	e034      	b.n	8002ea8 <alignSensor+0xa0>
			float angle = _3PI_2 + _2PI * i / 500.0f;
 8002e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e40:	f7fd fb3c 	bl	80004bc <__aeabi_i2d>
 8002e44:	a3a4      	add	r3, pc, #656	@ (adr r3, 80030d8 <alignSensor+0x2d0>)
 8002e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4a:	f7fd fba1 	bl	8000590 <__aeabi_dmul>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	460b      	mov	r3, r1
 8002e52:	4610      	mov	r0, r2
 8002e54:	4619      	mov	r1, r3
 8002e56:	f04f 0200 	mov.w	r2, #0
 8002e5a:	4ba5      	ldr	r3, [pc, #660]	@ (80030f0 <alignSensor+0x2e8>)
 8002e5c:	f7fd fcc2 	bl	80007e4 <__aeabi_ddiv>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4610      	mov	r0, r2
 8002e66:	4619      	mov	r1, r3
 8002e68:	a39d      	add	r3, pc, #628	@ (adr r3, 80030e0 <alignSensor+0x2d8>)
 8002e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6e:	f7fd f9d9 	bl	8000224 <__adddf3>
 8002e72:	4602      	mov	r2, r0
 8002e74:	460b      	mov	r3, r1
 8002e76:	4610      	mov	r0, r2
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f7fd fe61 	bl	8000b40 <__aeabi_d2f>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	607b      	str	r3, [r7, #4]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002e82:	4b9c      	ldr	r3, [pc, #624]	@ (80030f4 <alignSensor+0x2ec>)
 8002e84:	edd3 7a00 	vldr	s15, [r3]
 8002e88:	ed97 1a01 	vldr	s2, [r7, #4]
 8002e8c:	eddf 0a9a 	vldr	s1, [pc, #616]	@ 80030f8 <alignSensor+0x2f0>
 8002e90:	eeb0 0a67 	vmov.f32	s0, s15
 8002e94:	f7ff fdac 	bl	80029f0 <setPhaseVoltage>
			updateSensor();
 8002e98:	f7ff faaa 	bl	80023f0 <updateSensor>
			HAL_Delay(1);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f002 f9cd 	bl	800523c <HAL_Delay>
		for (int i = 0; i <= 500; i++) {
 8002ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eaa:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002eae:	ddc6      	ble.n	8002e3e <alignSensor+0x36>
		}
		updateSensor();
 8002eb0:	f7ff fa9e 	bl	80023f0 <updateSensor>
		// take and angle in the middle
		float mid_angle = getAngle();
 8002eb4:	f7ff fae8 	bl	8002488 <getAngle>
 8002eb8:	ed87 0a04 	vstr	s0, [r7, #16]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) {
 8002ebc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ec2:	e034      	b.n	8002f2e <alignSensor+0x126>
			float angle = _3PI_2 + _2PI * i / 500.0f;
 8002ec4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002ec6:	f7fd faf9 	bl	80004bc <__aeabi_i2d>
 8002eca:	a383      	add	r3, pc, #524	@ (adr r3, 80030d8 <alignSensor+0x2d0>)
 8002ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed0:	f7fd fb5e 	bl	8000590 <__aeabi_dmul>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	460b      	mov	r3, r1
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4619      	mov	r1, r3
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	4b83      	ldr	r3, [pc, #524]	@ (80030f0 <alignSensor+0x2e8>)
 8002ee2:	f7fd fc7f 	bl	80007e4 <__aeabi_ddiv>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4610      	mov	r0, r2
 8002eec:	4619      	mov	r1, r3
 8002eee:	a37c      	add	r3, pc, #496	@ (adr r3, 80030e0 <alignSensor+0x2d8>)
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f7fd f996 	bl	8000224 <__adddf3>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	f7fd fe1e 	bl	8000b40 <__aeabi_d2f>
 8002f04:	4603      	mov	r3, r0
 8002f06:	60bb      	str	r3, [r7, #8]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002f08:	4b7a      	ldr	r3, [pc, #488]	@ (80030f4 <alignSensor+0x2ec>)
 8002f0a:	edd3 7a00 	vldr	s15, [r3]
 8002f0e:	ed97 1a02 	vldr	s2, [r7, #8]
 8002f12:	eddf 0a79 	vldr	s1, [pc, #484]	@ 80030f8 <alignSensor+0x2f0>
 8002f16:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1a:	f7ff fd69 	bl	80029f0 <setPhaseVoltage>
			updateSensor();
 8002f1e:	f7ff fa67 	bl	80023f0 <updateSensor>
			HAL_Delay(1);
 8002f22:	2001      	movs	r0, #1
 8002f24:	f002 f98a 	bl	800523c <HAL_Delay>
		for (int i = 500; i >= 0; i--) {
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	dac7      	bge.n	8002ec4 <alignSensor+0xbc>
		}
		updateSensor();
 8002f34:	f7ff fa5c 	bl	80023f0 <updateSensor>
		float end_angle = getAngle();
 8002f38:	f7ff faa6 	bl	8002488 <getAngle>
 8002f3c:	ed87 0a03 	vstr	s0, [r7, #12]
		setPhaseVoltage(0, 0, 0);
 8002f40:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 80030f8 <alignSensor+0x2f0>
 8002f44:	eddf 0a6c 	vldr	s1, [pc, #432]	@ 80030f8 <alignSensor+0x2f0>
 8002f48:	ed9f 0a6b 	vldr	s0, [pc, #428]	@ 80030f8 <alignSensor+0x2f0>
 8002f4c:	f7ff fd50 	bl	80029f0 <setPhaseVoltage>
		HAL_Delay(100);
 8002f50:	2064      	movs	r0, #100	@ 0x64
 8002f52:	f002 f973 	bl	800523c <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) {
 8002f56:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f5a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8002f62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f66:	d101      	bne.n	8002f6c <alignSensor+0x164>
			return 0; // failed calibration
 8002f68:	2300      	movs	r3, #0
 8002f6a:	e0f9      	b.n	8003160 <alignSensor+0x358>
		} else if (mid_angle < end_angle) {
 8002f6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f70:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f7c:	d504      	bpl.n	8002f88 <alignSensor+0x180>
			sensor_direction = CCW;
 8002f7e:	4b5a      	ldr	r3, [pc, #360]	@ (80030e8 <alignSensor+0x2e0>)
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e002      	b.n	8002f8e <alignSensor+0x186>
		} else {
			sensor_direction = CW;
 8002f88:	4b57      	ldr	r3, [pc, #348]	@ (80030e8 <alignSensor+0x2e0>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
		}
	}

// zero electric angle not known
	if (!_isset(zero_electric_angle)) {
 8002f8e:	4b5b      	ldr	r3, [pc, #364]	@ (80030fc <alignSensor+0x2f4>)
 8002f90:	edd3 7a00 	vldr	s15, [r3]
 8002f94:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003100 <alignSensor+0x2f8>
 8002f98:	eef4 7a47 	vcmp.f32	s15, s14
 8002f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa0:	f040 80dd 	bne.w	800315e <alignSensor+0x356>
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		for (int round = 0; round < pole_pairs; round++) {
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	623b      	str	r3, [r7, #32]
 8002fa8:	e07f      	b.n	80030aa <alignSensor+0x2a2>
			zero_electric_angle = 0.0;
 8002faa:	4b54      	ldr	r3, [pc, #336]	@ (80030fc <alignSensor+0x2f4>)
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
			for (int k = 100; k >= 0; k--) {
 8002fb2:	2364      	movs	r3, #100	@ 0x64
 8002fb4:	61fb      	str	r3, [r7, #28]
 8002fb6:	e012      	b.n	8002fde <alignSensor+0x1d6>
				setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8002fb8:	4b4e      	ldr	r3, [pc, #312]	@ (80030f4 <alignSensor+0x2ec>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ed9f 1a51 	vldr	s2, [pc, #324]	@ 8003104 <alignSensor+0x2fc>
 8002fc2:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 80030f8 <alignSensor+0x2f0>
 8002fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8002fca:	f7ff fd11 	bl	80029f0 <setPhaseVoltage>
				updateSensor();
 8002fce:	f7ff fa0f 	bl	80023f0 <updateSensor>
				HAL_Delay(1);
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f002 f932 	bl	800523c <HAL_Delay>
			for (int k = 100; k >= 0; k--) {
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	dae9      	bge.n	8002fb8 <alignSensor+0x1b0>
			}
//			setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
//			HAL_Delay(500);
			updateSensor();
 8002fe4:	f7ff fa04 	bl	80023f0 <updateSensor>
			align.zero_angle_pp[round] = electricalAngle();	//radian
 8002fe8:	f7ff fc44 	bl	8002874 <electricalAngle>
 8002fec:	eef0 7a40 	vmov.f32	s15, s0
 8002ff0:	4a45      	ldr	r2, [pc, #276]	@ (8003108 <alignSensor+0x300>)
 8002ff2:	6a3b      	ldr	r3, [r7, #32]
 8002ff4:	330e      	adds	r3, #14
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	edc3 7a00 	vstr	s15, [r3]
//			if ((align.zero_angle_pp[round] < 1.0)
//					&& (align.zero_angle_pp[round] > 0.0)) {
//			align.zero_angle_pp[round] = align.zero_angle_pp[round] + _2PI;
//		}
//			align.shaft_angle_pp[round] = getAngle() * (360.0 / _2PI);	//degree
			align.shaft_angle_pp[round] = getMechanicalAngle();	//rad
 8002ffe:	f7ff fa35 	bl	800246c <getMechanicalAngle>
 8003002:	eef0 7a40 	vmov.f32	s15, s0
 8003006:	4a40      	ldr	r2, [pc, #256]	@ (8003108 <alignSensor+0x300>)
 8003008:	6a3b      	ldr	r3, [r7, #32]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4413      	add	r3, r2
 800300e:	edc3 7a00 	vstr	s15, [r3]
//    zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction*getAngle(), pole_pairs));
			HAL_Delay(20);
 8003012:	2014      	movs	r0, #20
 8003014:	f002 f912 	bl	800523c <HAL_Delay>
			// stop everything
			setPhaseVoltage(0, 0, 0);
 8003018:	ed9f 1a37 	vldr	s2, [pc, #220]	@ 80030f8 <alignSensor+0x2f0>
 800301c:	eddf 0a36 	vldr	s1, [pc, #216]	@ 80030f8 <alignSensor+0x2f0>
 8003020:	ed9f 0a35 	vldr	s0, [pc, #212]	@ 80030f8 <alignSensor+0x2f0>
 8003024:	f7ff fce4 	bl	80029f0 <setPhaseVoltage>
			HAL_Delay(100);
 8003028:	2064      	movs	r0, #100	@ 0x64
 800302a:	f002 f907 	bl	800523c <HAL_Delay>
			for (int j = 0; j <= 100; j++) {
 800302e:	2300      	movs	r3, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e034      	b.n	800309e <alignSensor+0x296>
				float angle = _3PI_2 + _2PI * j / 100.0f;
 8003034:	69b8      	ldr	r0, [r7, #24]
 8003036:	f7fd fa41 	bl	80004bc <__aeabi_i2d>
 800303a:	a327      	add	r3, pc, #156	@ (adr r3, 80030d8 <alignSensor+0x2d0>)
 800303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003040:	f7fd faa6 	bl	8000590 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	4b2e      	ldr	r3, [pc, #184]	@ (800310c <alignSensor+0x304>)
 8003052:	f7fd fbc7 	bl	80007e4 <__aeabi_ddiv>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	a320      	add	r3, pc, #128	@ (adr r3, 80030e0 <alignSensor+0x2d8>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	f7fd f8de 	bl	8000224 <__adddf3>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4610      	mov	r0, r2
 800306e:	4619      	mov	r1, r3
 8003070:	f7fd fd66 	bl	8000b40 <__aeabi_d2f>
 8003074:	4603      	mov	r3, r0
 8003076:	603b      	str	r3, [r7, #0]
				setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003078:	4b1e      	ldr	r3, [pc, #120]	@ (80030f4 <alignSensor+0x2ec>)
 800307a:	edd3 7a00 	vldr	s15, [r3]
 800307e:	ed97 1a00 	vldr	s2, [r7]
 8003082:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 80030f8 <alignSensor+0x2f0>
 8003086:	eeb0 0a67 	vmov.f32	s0, s15
 800308a:	f7ff fcb1 	bl	80029f0 <setPhaseVoltage>
				updateSensor();
 800308e:	f7ff f9af 	bl	80023f0 <updateSensor>
				HAL_Delay(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f002 f8d2 	bl	800523c <HAL_Delay>
			for (int j = 0; j <= 100; j++) {
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	3301      	adds	r3, #1
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2b64      	cmp	r3, #100	@ 0x64
 80030a2:	ddc7      	ble.n	8003034 <alignSensor+0x22c>
		for (int round = 0; round < pole_pairs; round++) {
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	3301      	adds	r3, #1
 80030a8:	623b      	str	r3, [r7, #32]
 80030aa:	4b19      	ldr	r3, [pc, #100]	@ (8003110 <alignSensor+0x308>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6a3a      	ldr	r2, [r7, #32]
 80030b0:	429a      	cmp	r2, r3
 80030b2:	f6ff af7a 	blt.w	8002faa <alignSensor+0x1a2>
			}
		}
		setPhaseVoltage(0, 0, 0);
 80030b6:	ed9f 1a10 	vldr	s2, [pc, #64]	@ 80030f8 <alignSensor+0x2f0>
 80030ba:	eddf 0a0f 	vldr	s1, [pc, #60]	@ 80030f8 <alignSensor+0x2f0>
 80030be:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80030f8 <alignSensor+0x2f0>
 80030c2:	f7ff fc95 	bl	80029f0 <setPhaseVoltage>
		HAL_Delay(100);
 80030c6:	2064      	movs	r0, #100	@ 0x64
 80030c8:	f002 f8b8 	bl	800523c <HAL_Delay>
		for (int round = 0; round < pole_pairs; round++) {
 80030cc:	2300      	movs	r3, #0
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	e032      	b.n	8003138 <alignSensor+0x330>
 80030d2:	bf00      	nop
 80030d4:	f3af 8000 	nop.w
 80030d8:	54442eea 	.word	0x54442eea
 80030dc:	401921fb 	.word	0x401921fb
 80030e0:	7f330d32 	.word	0x7f330d32
 80030e4:	4012d97c 	.word	0x4012d97c
 80030e8:	2000001c 	.word	0x2000001c
 80030ec:	ffffcfc7 	.word	0xffffcfc7
 80030f0:	407f4000 	.word	0x407f4000
 80030f4:	20000c3c 	.word	0x20000c3c
 80030f8:	00000000 	.word	0x00000000
 80030fc:	20000014 	.word	0x20000014
 8003100:	c640e400 	.word	0xc640e400
 8003104:	4096cbe4 	.word	0x4096cbe4
 8003108:	20000c70 	.word	0x20000c70
 800310c:	40590000 	.word	0x40590000
 8003110:	20000c5c 	.word	0x20000c5c
			zero_electric_angle = zero_electric_angle
					+ align.zero_angle_pp[round];
 8003114:	4a14      	ldr	r2, [pc, #80]	@ (8003168 <alignSensor+0x360>)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	330e      	adds	r3, #14
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	ed93 7a00 	vldr	s14, [r3]
 8003122:	4b12      	ldr	r3, [pc, #72]	@ (800316c <alignSensor+0x364>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
			zero_electric_angle = zero_electric_angle
 800312c:	4b0f      	ldr	r3, [pc, #60]	@ (800316c <alignSensor+0x364>)
 800312e:	edc3 7a00 	vstr	s15, [r3]
		for (int round = 0; round < pole_pairs; round++) {
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	3301      	adds	r3, #1
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	4b0d      	ldr	r3, [pc, #52]	@ (8003170 <alignSensor+0x368>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	697a      	ldr	r2, [r7, #20]
 800313e:	429a      	cmp	r2, r3
 8003140:	dbe8      	blt.n	8003114 <alignSensor+0x30c>
		}
		zero_electric_angle = zero_electric_angle / pole_pairs;
 8003142:	4b0a      	ldr	r3, [pc, #40]	@ (800316c <alignSensor+0x364>)
 8003144:	edd3 6a00 	vldr	s13, [r3]
 8003148:	4b09      	ldr	r3, [pc, #36]	@ (8003170 <alignSensor+0x368>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	ee07 3a90 	vmov	s15, r3
 8003150:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003154:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003158:	4b04      	ldr	r3, [pc, #16]	@ (800316c <alignSensor+0x364>)
 800315a:	edc3 7a00 	vstr	s15, [r3]
	}
	return exit_flag;
 800315e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003160:	4618      	mov	r0, r3
 8003162:	3730      	adds	r7, #48	@ 0x30
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	20000c70 	.word	0x20000c70
 800316c:	20000014 	.word	0x20000014
 8003170:	20000c5c 	.word	0x20000c5c

08003174 <initGain>:
void initGain() {
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0

	CurrentSense_resistance = 0.22;
 8003178:	4b95      	ldr	r3, [pc, #596]	@ (80033d0 <initGain+0x25c>)
 800317a:	4a96      	ldr	r2, [pc, #600]	@ (80033d4 <initGain+0x260>)
 800317c:	601a      	str	r2, [r3, #0]
	CurrentSense_gain = 5.0;
 800317e:	4b96      	ldr	r3, [pc, #600]	@ (80033d8 <initGain+0x264>)
 8003180:	4a96      	ldr	r2, [pc, #600]	@ (80033dc <initGain+0x268>)
 8003182:	601a      	str	r2, [r3, #0]
	phase_resistance = 9.526; 	// ht4315 = 9.526     , mg4005 = 1.4
 8003184:	4b96      	ldr	r3, [pc, #600]	@ (80033e0 <initGain+0x26c>)
 8003186:	4a97      	ldr	r2, [pc, #604]	@ (80033e4 <initGain+0x270>)
 8003188:	601a      	str	r2, [r3, #0]
	phase_inductance = 0.00245; // ht4315 = 0.00245   , mg4005 = 0.0005
 800318a:	4b97      	ldr	r3, [pc, #604]	@ (80033e8 <initGain+0x274>)
 800318c:	4a97      	ldr	r2, [pc, #604]	@ (80033ec <initGain+0x278>)
 800318e:	601a      	str	r2, [r3, #0]
	voltage_power_supply = 24.0;
 8003190:	4b97      	ldr	r3, [pc, #604]	@ (80033f0 <initGain+0x27c>)
 8003192:	4a98      	ldr	r2, [pc, #608]	@ (80033f4 <initGain+0x280>)
 8003194:	601a      	str	r2, [r3, #0]
	pole_pairs = 14;			// ht4315 = 14        , mg4005 =
 8003196:	4b98      	ldr	r3, [pc, #608]	@ (80033f8 <initGain+0x284>)
 8003198:	220e      	movs	r2, #14
 800319a:	601a      	str	r2, [r3, #0]
	// flux_linkage = 60/(sqrt(3)*poles*pi*kv)   ref : https://vesc-project.com/node/52
	flux_linkage = 0.01968;     // ht4315 = 0.01968   , mg4005 = 0.0075
 800319c:	4b97      	ldr	r3, [pc, #604]	@ (80033fc <initGain+0x288>)
 800319e:	4a98      	ldr	r2, [pc, #608]	@ (8003400 <initGain+0x28c>)
 80031a0:	601a      	str	r2, [r3, #0]
	//gear_ratio                // ht4315 = 1:1       , mg4005 = 10:1
	//inertia_load = (gear_ratio^2) * inertia_motor
	inertia = 0.0000268;        // ht4315 = 0.0000268 , mg4005 = 0.0014
 80031a2:	4b98      	ldr	r3, [pc, #608]	@ (8003404 <initGain+0x290>)
 80031a4:	4a98      	ldr	r2, [pc, #608]	@ (8003408 <initGain+0x294>)
 80031a6:	601a      	str	r2, [r3, #0]
	damping = 0.0;              // ht4315 = 0.0       , mg4005 =
 80031a8:	4b98      	ldr	r3, [pc, #608]	@ (800340c <initGain+0x298>)
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]


	//The detection box can still calculate the kp and ki parameters.   ref : https://vesc-project.com/node/52
	//The observer gain can be calculates roughly as 1000 / (lambda^2) where lambda is in mWb.

	LPF_SMC_out.y_prev = 0.0;
 80031b0:	4b97      	ldr	r3, [pc, #604]	@ (8003410 <initGain+0x29c>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	609a      	str	r2, [r3, #8]
	LPF_SMC_out.Tf = 0.0001;
 80031b8:	4b95      	ldr	r3, [pc, #596]	@ (8003410 <initGain+0x29c>)
 80031ba:	4a96      	ldr	r2, [pc, #600]	@ (8003414 <initGain+0x2a0>)
 80031bc:	60da      	str	r2, [r3, #12]
	SMC_ang.limit = motor_param_SMC[11][motor_nbr] ;
 80031be:	4b96      	ldr	r3, [pc, #600]	@ (8003418 <initGain+0x2a4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a96      	ldr	r2, [pc, #600]	@ (800341c <initGain+0x2a8>)
 80031c4:	3337      	adds	r3, #55	@ 0x37
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4413      	add	r3, r2
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a94      	ldr	r2, [pc, #592]	@ (8003420 <initGain+0x2ac>)
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
	SMC_ang.k = motor_param_SMC[8][motor_nbr] ;
 80031d0:	4b91      	ldr	r3, [pc, #580]	@ (8003418 <initGain+0x2a4>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a91      	ldr	r2, [pc, #580]	@ (800341c <initGain+0x2a8>)
 80031d6:	3328      	adds	r3, #40	@ 0x28
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a90      	ldr	r2, [pc, #576]	@ (8003420 <initGain+0x2ac>)
 80031e0:	6493      	str	r3, [r2, #72]	@ 0x48
	SMC_ang.ep = motor_param_SMC[9][motor_nbr] ;
 80031e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003418 <initGain+0x2a4>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a8d      	ldr	r2, [pc, #564]	@ (800341c <initGain+0x2a8>)
 80031e8:	332d      	adds	r3, #45	@ 0x2d
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a8b      	ldr	r2, [pc, #556]	@ (8003420 <initGain+0x2ac>)
 80031f2:	6513      	str	r3, [r2, #80]	@ 0x50
	SMC_ang.delta = motor_param_SMC[10][motor_nbr] ;
 80031f4:	4b88      	ldr	r3, [pc, #544]	@ (8003418 <initGain+0x2a4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a88      	ldr	r2, [pc, #544]	@ (800341c <initGain+0x2a8>)
 80031fa:	3332      	adds	r3, #50	@ 0x32
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a87      	ldr	r2, [pc, #540]	@ (8003420 <initGain+0x2ac>)
 8003204:	6553      	str	r3, [r2, #84]	@ 0x54
	SMC_ang.g = motor_param_SMC[11][motor_nbr] ; // convergence rate of disturbance estimation error
 8003206:	4b84      	ldr	r3, [pc, #528]	@ (8003418 <initGain+0x2a4>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a84      	ldr	r2, [pc, #528]	@ (800341c <initGain+0x2a8>)
 800320c:	3337      	adds	r3, #55	@ 0x37
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a82      	ldr	r2, [pc, #520]	@ (8003420 <initGain+0x2ac>)
 8003216:	6593      	str	r3, [r2, #88]	@ 0x58
	SMC_ang.neta = motor_param_SMC[12][motor_nbr] ;
 8003218:	4b7f      	ldr	r3, [pc, #508]	@ (8003418 <initGain+0x2a4>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7f      	ldr	r2, [pc, #508]	@ (800341c <initGain+0x2a8>)
 800321e:	333c      	adds	r3, #60	@ 0x3c
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7e      	ldr	r2, [pc, #504]	@ (8003420 <initGain+0x2ac>)
 8003228:	65d3      	str	r3, [r2, #92]	@ 0x5c

	SMC_vel.limit = motor_param_SMC[5][motor_nbr];
 800322a:	4b7b      	ldr	r3, [pc, #492]	@ (8003418 <initGain+0x2a4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7b      	ldr	r2, [pc, #492]	@ (800341c <initGain+0x2a8>)
 8003230:	3319      	adds	r3, #25
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a7a      	ldr	r2, [pc, #488]	@ (8003424 <initGain+0x2b0>)
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
	SMC_vel.k = motor_param_SMC[0][motor_nbr] ;
 800323c:	4b76      	ldr	r3, [pc, #472]	@ (8003418 <initGain+0x2a4>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a76      	ldr	r2, [pc, #472]	@ (800341c <initGain+0x2a8>)
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a76      	ldr	r2, [pc, #472]	@ (8003424 <initGain+0x2b0>)
 800324a:	6493      	str	r3, [r2, #72]	@ 0x48
	SMC_vel.ep = motor_param_SMC[1][motor_nbr] ;
 800324c:	4b72      	ldr	r3, [pc, #456]	@ (8003418 <initGain+0x2a4>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a72      	ldr	r2, [pc, #456]	@ (800341c <initGain+0x2a8>)
 8003252:	3305      	adds	r3, #5
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a72      	ldr	r2, [pc, #456]	@ (8003424 <initGain+0x2b0>)
 800325c:	6513      	str	r3, [r2, #80]	@ 0x50
	SMC_vel.delta = motor_param_SMC[2][motor_nbr] ;
 800325e:	4b6e      	ldr	r3, [pc, #440]	@ (8003418 <initGain+0x2a4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6e      	ldr	r2, [pc, #440]	@ (800341c <initGain+0x2a8>)
 8003264:	330a      	adds	r3, #10
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6d      	ldr	r2, [pc, #436]	@ (8003424 <initGain+0x2b0>)
 800326e:	6553      	str	r3, [r2, #84]	@ 0x54
	SMC_vel.g = motor_param_SMC[3][motor_nbr] ; // convergence rate of disturbance estimation error
 8003270:	4b69      	ldr	r3, [pc, #420]	@ (8003418 <initGain+0x2a4>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a69      	ldr	r2, [pc, #420]	@ (800341c <initGain+0x2a8>)
 8003276:	330f      	adds	r3, #15
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a69      	ldr	r2, [pc, #420]	@ (8003424 <initGain+0x2b0>)
 8003280:	6593      	str	r3, [r2, #88]	@ 0x58
	SMC_vel.neta = motor_param_SMC[4][motor_nbr] ;
 8003282:	4b65      	ldr	r3, [pc, #404]	@ (8003418 <initGain+0x2a4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a65      	ldr	r2, [pc, #404]	@ (800341c <initGain+0x2a8>)
 8003288:	3314      	adds	r3, #20
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	4413      	add	r3, r2
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a64      	ldr	r2, [pc, #400]	@ (8003424 <initGain+0x2b0>)
 8003292:	65d3      	str	r3, [r2, #92]	@ 0x5c
	SMC_vel.kp = motor_param_SMC[6][motor_nbr] ;
 8003294:	4b60      	ldr	r3, [pc, #384]	@ (8003418 <initGain+0x2a4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a60      	ldr	r2, [pc, #384]	@ (800341c <initGain+0x2a8>)
 800329a:	331e      	adds	r3, #30
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a60      	ldr	r2, [pc, #384]	@ (8003424 <initGain+0x2b0>)
 80032a4:	6613      	str	r3, [r2, #96]	@ 0x60
	SMC_vel.ki = motor_param_SMC[7][motor_nbr] ;
 80032a6:	4b5c      	ldr	r3, [pc, #368]	@ (8003418 <initGain+0x2a4>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a5c      	ldr	r2, [pc, #368]	@ (800341c <initGain+0x2a8>)
 80032ac:	3323      	adds	r3, #35	@ 0x23
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003424 <initGain+0x2b0>)
 80032b6:	6653      	str	r3, [r2, #100]	@ 0x64

	fusion_vel.limit = motor_param_SMC[5][motor_nbr];
 80032b8:	4b57      	ldr	r3, [pc, #348]	@ (8003418 <initGain+0x2a4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a57      	ldr	r2, [pc, #348]	@ (800341c <initGain+0x2a8>)
 80032be:	3319      	adds	r3, #25
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a58      	ldr	r2, [pc, #352]	@ (8003428 <initGain+0x2b4>)
 80032c8:	6653      	str	r3, [r2, #100]	@ 0x64
	fusion_vel.k = motor_param_SMC[0][motor_nbr] ;
 80032ca:	4b53      	ldr	r3, [pc, #332]	@ (8003418 <initGain+0x2a4>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a53      	ldr	r2, [pc, #332]	@ (800341c <initGain+0x2a8>)
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	4413      	add	r3, r2
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a54      	ldr	r2, [pc, #336]	@ (8003428 <initGain+0x2b4>)
 80032d8:	6393      	str	r3, [r2, #56]	@ 0x38
	fusion_vel.ep = motor_param_SMC[1][motor_nbr] ;
 80032da:	4b4f      	ldr	r3, [pc, #316]	@ (8003418 <initGain+0x2a4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a4f      	ldr	r2, [pc, #316]	@ (800341c <initGain+0x2a8>)
 80032e0:	3305      	adds	r3, #5
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a4f      	ldr	r2, [pc, #316]	@ (8003428 <initGain+0x2b4>)
 80032ea:	63d3      	str	r3, [r2, #60]	@ 0x3c
	fusion_vel.delta = motor_param_SMC[2][motor_nbr] ;
 80032ec:	4b4a      	ldr	r3, [pc, #296]	@ (8003418 <initGain+0x2a4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4a      	ldr	r2, [pc, #296]	@ (800341c <initGain+0x2a8>)
 80032f2:	330a      	adds	r3, #10
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003428 <initGain+0x2b4>)
 80032fc:	6413      	str	r3, [r2, #64]	@ 0x40
	fusion_vel.g = motor_param_SMC[3][motor_nbr] ; // convergence rate of disturbance estimation error
 80032fe:	4b46      	ldr	r3, [pc, #280]	@ (8003418 <initGain+0x2a4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a46      	ldr	r2, [pc, #280]	@ (800341c <initGain+0x2a8>)
 8003304:	330f      	adds	r3, #15
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a46      	ldr	r2, [pc, #280]	@ (8003428 <initGain+0x2b4>)
 800330e:	6453      	str	r3, [r2, #68]	@ 0x44
	fusion_vel.neta = motor_param_SMC[4][motor_nbr] ;
 8003310:	4b41      	ldr	r3, [pc, #260]	@ (8003418 <initGain+0x2a4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a41      	ldr	r2, [pc, #260]	@ (800341c <initGain+0x2a8>)
 8003316:	3314      	adds	r3, #20
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a42      	ldr	r2, [pc, #264]	@ (8003428 <initGain+0x2b4>)
 8003320:	6493      	str	r3, [r2, #72]	@ 0x48
	fusion_vel.P = motor_param[7][motor_nbr];
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <initGain+0x2a4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a41      	ldr	r2, [pc, #260]	@ (800342c <initGain+0x2b8>)
 8003328:	3323      	adds	r3, #35	@ 0x23
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a3d      	ldr	r2, [pc, #244]	@ (8003428 <initGain+0x2b4>)
 8003332:	64d3      	str	r3, [r2, #76]	@ 0x4c
	fusion_vel.I = motor_param[8][motor_nbr];
 8003334:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <initGain+0x2a4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a3c      	ldr	r2, [pc, #240]	@ (800342c <initGain+0x2b8>)
 800333a:	3328      	adds	r3, #40	@ 0x28
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a39      	ldr	r2, [pc, #228]	@ (8003428 <initGain+0x2b4>)
 8003344:	6513      	str	r3, [r2, #80]	@ 0x50
	fusion_vel.D = motor_param[9][motor_nbr];
 8003346:	4b34      	ldr	r3, [pc, #208]	@ (8003418 <initGain+0x2a4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a38      	ldr	r2, [pc, #224]	@ (800342c <initGain+0x2b8>)
 800334c:	332d      	adds	r3, #45	@ 0x2d
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a34      	ldr	r2, [pc, #208]	@ (8003428 <initGain+0x2b4>)
 8003356:	6553      	str	r3, [r2, #84]	@ 0x54
	fusion_vel.anti_windup = motor_param_SMC[5][motor_nbr];
 8003358:	4b2f      	ldr	r3, [pc, #188]	@ (8003418 <initGain+0x2a4>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2f      	ldr	r2, [pc, #188]	@ (800341c <initGain+0x2a8>)
 800335e:	3319      	adds	r3, #25
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4413      	add	r3, r2
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a30      	ldr	r2, [pc, #192]	@ (8003428 <initGain+0x2b4>)
 8003368:	6613      	str	r3, [r2, #96]	@ 0x60

//	LPF_a_est.y_prev = 0.0;
//	LPF_a_est.Tf = 0.001;
	LPF_w_est.y_prev = 0.0;
 800336a:	4b31      	ldr	r3, [pc, #196]	@ (8003430 <initGain+0x2bc>)
 800336c:	f04f 0200 	mov.w	r2, #0
 8003370:	609a      	str	r2, [r3, #8]
	LPF_w_est.Tf = 0.02;
 8003372:	4b2f      	ldr	r3, [pc, #188]	@ (8003430 <initGain+0x2bc>)
 8003374:	4a2f      	ldr	r2, [pc, #188]	@ (8003434 <initGain+0x2c0>)
 8003376:	60da      	str	r2, [r3, #12]
	LPF_r_est.y_prev = 0.0;
 8003378:	4b2f      	ldr	r3, [pc, #188]	@ (8003438 <initGain+0x2c4>)
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	609a      	str	r2, [r3, #8]
	LPF_r_est.Tf = 0.02;
 8003380:	4b2d      	ldr	r3, [pc, #180]	@ (8003438 <initGain+0x2c4>)
 8003382:	4a2c      	ldr	r2, [pc, #176]	@ (8003434 <initGain+0x2c0>)
 8003384:	60da      	str	r2, [r3, #12]

//	LPF_current_a.y_prev = 0.0;
//	LPF_current_a.Tf = 0.01;
//	LPF_current_c.y_prev = 0.0;
//	LPF_current_c.Tf = 0.01;
	LPF_current_D.y_prev = 0.0;
 8003386:	4b2d      	ldr	r3, [pc, #180]	@ (800343c <initGain+0x2c8>)
 8003388:	f04f 0200 	mov.w	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
	LPF_current_D.Tf = 0.001;
 800338e:	4b2b      	ldr	r3, [pc, #172]	@ (800343c <initGain+0x2c8>)
 8003390:	4a2b      	ldr	r2, [pc, #172]	@ (8003440 <initGain+0x2cc>)
 8003392:	60da      	str	r2, [r3, #12]
	current_D.P = motor_param[1][motor_nbr];
 8003394:	4b20      	ldr	r3, [pc, #128]	@ (8003418 <initGain+0x2a4>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a24      	ldr	r2, [pc, #144]	@ (800342c <initGain+0x2b8>)
 800339a:	3305      	adds	r3, #5
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a28      	ldr	r2, [pc, #160]	@ (8003444 <initGain+0x2d0>)
 80033a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
	current_D.I = motor_param[2][motor_nbr];
 80033a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003418 <initGain+0x2a4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a20      	ldr	r2, [pc, #128]	@ (800342c <initGain+0x2b8>)
 80033ac:	330a      	adds	r3, #10
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a23      	ldr	r2, [pc, #140]	@ (8003444 <initGain+0x2d0>)
 80033b6:	6313      	str	r3, [r2, #48]	@ 0x30
	current_D.D = motor_param[3][motor_nbr];
 80033b8:	4b17      	ldr	r3, [pc, #92]	@ (8003418 <initGain+0x2a4>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a1b      	ldr	r2, [pc, #108]	@ (800342c <initGain+0x2b8>)
 80033be:	330f      	adds	r3, #15
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003444 <initGain+0x2d0>)
 80033c8:	6353      	str	r3, [r2, #52]	@ 0x34
	current_D.output_ramp = 100000.0;
 80033ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003444 <initGain+0x2d0>)
 80033cc:	e03c      	b.n	8003448 <initGain+0x2d4>
 80033ce:	bf00      	nop
 80033d0:	200008e8 	.word	0x200008e8
 80033d4:	3e6147ae 	.word	0x3e6147ae
 80033d8:	200008ec 	.word	0x200008ec
 80033dc:	40a00000 	.word	0x40a00000
 80033e0:	20000c48 	.word	0x20000c48
 80033e4:	41186a7f 	.word	0x41186a7f
 80033e8:	20000c4c 	.word	0x20000c4c
 80033ec:	3b20902e 	.word	0x3b20902e
 80033f0:	20000c44 	.word	0x20000c44
 80033f4:	41c00000 	.word	0x41c00000
 80033f8:	20000c5c 	.word	0x20000c5c
 80033fc:	20000c54 	.word	0x20000c54
 8003400:	3ca137f4 	.word	0x3ca137f4
 8003404:	20000c50 	.word	0x20000c50
 8003408:	37e0d090 	.word	0x37e0d090
 800340c:	20000c58 	.word	0x20000c58
 8003410:	200009d0 	.word	0x200009d0
 8003414:	38d1b717 	.word	0x38d1b717
 8003418:	20000d24 	.word	0x20000d24
 800341c:	2000014c 	.word	0x2000014c
 8003420:	20000b48 	.word	0x20000b48
 8003424:	20000ac8 	.word	0x20000ac8
 8003428:	20000bc8 	.word	0x20000bc8
 800342c:	20000020 	.word	0x20000020
 8003430:	200009a8 	.word	0x200009a8
 8003434:	3ca3d70a 	.word	0x3ca3d70a
 8003438:	200009bc 	.word	0x200009bc
 800343c:	20000980 	.word	0x20000980
 8003440:	3a83126f 	.word	0x3a83126f
 8003444:	200009e8 	.word	0x200009e8
 8003448:	4a52      	ldr	r2, [pc, #328]	@ (8003594 <initGain+0x420>)
 800344a:	61da      	str	r2, [r3, #28]
	current_D.anti_windup = 3.0;
 800344c:	4b52      	ldr	r3, [pc, #328]	@ (8003598 <initGain+0x424>)
 800344e:	4a53      	ldr	r2, [pc, #332]	@ (800359c <initGain+0x428>)
 8003450:	625a      	str	r2, [r3, #36]	@ 0x24
	current_D.limit = voltage_limit;
 8003452:	4b53      	ldr	r3, [pc, #332]	@ (80035a0 <initGain+0x42c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a50      	ldr	r2, [pc, #320]	@ (8003598 <initGain+0x424>)
 8003458:	6213      	str	r3, [r2, #32]
////
	LPF_current_Q.y_prev = 0.0;
 800345a:	4b52      	ldr	r3, [pc, #328]	@ (80035a4 <initGain+0x430>)
 800345c:	f04f 0200 	mov.w	r2, #0
 8003460:	609a      	str	r2, [r3, #8]
	LPF_current_Q.Tf = 0.001;
 8003462:	4b50      	ldr	r3, [pc, #320]	@ (80035a4 <initGain+0x430>)
 8003464:	4a50      	ldr	r2, [pc, #320]	@ (80035a8 <initGain+0x434>)
 8003466:	60da      	str	r2, [r3, #12]
	current_Q.P = motor_param[4][motor_nbr];
 8003468:	4b50      	ldr	r3, [pc, #320]	@ (80035ac <initGain+0x438>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a50      	ldr	r2, [pc, #320]	@ (80035b0 <initGain+0x43c>)
 800346e:	3314      	adds	r3, #20
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4f      	ldr	r2, [pc, #316]	@ (80035b4 <initGain+0x440>)
 8003478:	62d3      	str	r3, [r2, #44]	@ 0x2c
	current_Q.I = motor_param[5][motor_nbr];
 800347a:	4b4c      	ldr	r3, [pc, #304]	@ (80035ac <initGain+0x438>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <initGain+0x43c>)
 8003480:	3319      	adds	r3, #25
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a4a      	ldr	r2, [pc, #296]	@ (80035b4 <initGain+0x440>)
 800348a:	6313      	str	r3, [r2, #48]	@ 0x30
	current_Q.D = motor_param[6][motor_nbr];
 800348c:	4b47      	ldr	r3, [pc, #284]	@ (80035ac <initGain+0x438>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a47      	ldr	r2, [pc, #284]	@ (80035b0 <initGain+0x43c>)
 8003492:	331e      	adds	r3, #30
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a46      	ldr	r2, [pc, #280]	@ (80035b4 <initGain+0x440>)
 800349c:	6353      	str	r3, [r2, #52]	@ 0x34
	current_Q.output_ramp = 100000.0;
 800349e:	4b45      	ldr	r3, [pc, #276]	@ (80035b4 <initGain+0x440>)
 80034a0:	4a3c      	ldr	r2, [pc, #240]	@ (8003594 <initGain+0x420>)
 80034a2:	61da      	str	r2, [r3, #28]
	current_Q.anti_windup = voltage_limit;
 80034a4:	4b3e      	ldr	r3, [pc, #248]	@ (80035a0 <initGain+0x42c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a42      	ldr	r2, [pc, #264]	@ (80035b4 <initGain+0x440>)
 80034aa:	6253      	str	r3, [r2, #36]	@ 0x24
	current_Q.limit = voltage_limit;
 80034ac:	4b3c      	ldr	r3, [pc, #240]	@ (80035a0 <initGain+0x42c>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a40      	ldr	r2, [pc, #256]	@ (80035b4 <initGain+0x440>)
 80034b2:	6213      	str	r3, [r2, #32]
////
	LPF_velocity.y_prev = 0.0;
 80034b4:	4b40      	ldr	r3, [pc, #256]	@ (80035b8 <initGain+0x444>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	609a      	str	r2, [r3, #8]
	LPF_velocity.Tf = 0.02;
 80034bc:	4b3e      	ldr	r3, [pc, #248]	@ (80035b8 <initGain+0x444>)
 80034be:	4a3f      	ldr	r2, [pc, #252]	@ (80035bc <initGain+0x448>)
 80034c0:	60da      	str	r2, [r3, #12]
	velocity.P = motor_param[7][motor_nbr];
 80034c2:	4b3a      	ldr	r3, [pc, #232]	@ (80035ac <initGain+0x438>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a3a      	ldr	r2, [pc, #232]	@ (80035b0 <initGain+0x43c>)
 80034c8:	3323      	adds	r3, #35	@ 0x23
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a3b      	ldr	r2, [pc, #236]	@ (80035c0 <initGain+0x44c>)
 80034d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
	velocity.I = motor_param[8][motor_nbr];
 80034d4:	4b35      	ldr	r3, [pc, #212]	@ (80035ac <initGain+0x438>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a35      	ldr	r2, [pc, #212]	@ (80035b0 <initGain+0x43c>)
 80034da:	3328      	adds	r3, #40	@ 0x28
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a37      	ldr	r2, [pc, #220]	@ (80035c0 <initGain+0x44c>)
 80034e4:	6313      	str	r3, [r2, #48]	@ 0x30
	velocity.D = motor_param[9][motor_nbr];
 80034e6:	4b31      	ldr	r3, [pc, #196]	@ (80035ac <initGain+0x438>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a31      	ldr	r2, [pc, #196]	@ (80035b0 <initGain+0x43c>)
 80034ec:	332d      	adds	r3, #45	@ 0x2d
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	4413      	add	r3, r2
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a32      	ldr	r2, [pc, #200]	@ (80035c0 <initGain+0x44c>)
 80034f6:	6353      	str	r3, [r2, #52]	@ 0x34
	velocity.output_ramp = 10000;
 80034f8:	4b31      	ldr	r3, [pc, #196]	@ (80035c0 <initGain+0x44c>)
 80034fa:	4a32      	ldr	r2, [pc, #200]	@ (80035c4 <initGain+0x450>)
 80034fc:	61da      	str	r2, [r3, #28]
	velocity.anti_windup = current_limit;
 80034fe:	4b32      	ldr	r3, [pc, #200]	@ (80035c8 <initGain+0x454>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2f      	ldr	r2, [pc, #188]	@ (80035c0 <initGain+0x44c>)
 8003504:	6253      	str	r3, [r2, #36]	@ 0x24
	velocity.limit = current_limit;
 8003506:	4b30      	ldr	r3, [pc, #192]	@ (80035c8 <initGain+0x454>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a2d      	ldr	r2, [pc, #180]	@ (80035c0 <initGain+0x44c>)
 800350c:	6213      	str	r3, [r2, #32]
////
	LPF_angle.y_prev = 0.0;
 800350e:	4b2f      	ldr	r3, [pc, #188]	@ (80035cc <initGain+0x458>)
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	609a      	str	r2, [r3, #8]
	LPF_angle.Tf = 0.001;
 8003516:	4b2d      	ldr	r3, [pc, #180]	@ (80035cc <initGain+0x458>)
 8003518:	4a23      	ldr	r2, [pc, #140]	@ (80035a8 <initGain+0x434>)
 800351a:	60da      	str	r2, [r3, #12]
	angle.P = motor_param[10][motor_nbr];
 800351c:	4b23      	ldr	r3, [pc, #140]	@ (80035ac <initGain+0x438>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a23      	ldr	r2, [pc, #140]	@ (80035b0 <initGain+0x43c>)
 8003522:	3332      	adds	r3, #50	@ 0x32
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a29      	ldr	r2, [pc, #164]	@ (80035d0 <initGain+0x45c>)
 800352c:	62d3      	str	r3, [r2, #44]	@ 0x2c
	angle.I = motor_param[11][motor_nbr];
 800352e:	4b1f      	ldr	r3, [pc, #124]	@ (80035ac <initGain+0x438>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a1f      	ldr	r2, [pc, #124]	@ (80035b0 <initGain+0x43c>)
 8003534:	3337      	adds	r3, #55	@ 0x37
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a24      	ldr	r2, [pc, #144]	@ (80035d0 <initGain+0x45c>)
 800353e:	6313      	str	r3, [r2, #48]	@ 0x30
	angle.D = motor_param[12][motor_nbr];
 8003540:	4b1a      	ldr	r3, [pc, #104]	@ (80035ac <initGain+0x438>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <initGain+0x43c>)
 8003546:	333c      	adds	r3, #60	@ 0x3c
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	4413      	add	r3, r2
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a20      	ldr	r2, [pc, #128]	@ (80035d0 <initGain+0x45c>)
 8003550:	6353      	str	r3, [r2, #52]	@ 0x34
	angle.output_ramp = 10000;
 8003552:	4b1f      	ldr	r3, [pc, #124]	@ (80035d0 <initGain+0x45c>)
 8003554:	4a1b      	ldr	r2, [pc, #108]	@ (80035c4 <initGain+0x450>)
 8003556:	61da      	str	r2, [r3, #28]
	angle.anti_windup = motor_param[13][motor_nbr];
 8003558:	4b14      	ldr	r3, [pc, #80]	@ (80035ac <initGain+0x438>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <initGain+0x43c>)
 800355e:	3341      	adds	r3, #65	@ 0x41
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1a      	ldr	r2, [pc, #104]	@ (80035d0 <initGain+0x45c>)
 8003568:	6253      	str	r3, [r2, #36]	@ 0x24
	angle.limit = motor_param[13][motor_nbr];
 800356a:	4b10      	ldr	r3, [pc, #64]	@ (80035ac <initGain+0x438>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <initGain+0x43c>)
 8003570:	3341      	adds	r3, #65	@ 0x41
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a15      	ldr	r2, [pc, #84]	@ (80035d0 <initGain+0x45c>)
 800357a:	6213      	str	r3, [r2, #32]

	LPF_acceleration.y_prev = 0.0 ;
 800357c:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <initGain+0x460>)
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	609a      	str	r2, [r3, #8]
	LPF_acceleration.Tf = 0.005 ;
 8003584:	4b13      	ldr	r3, [pc, #76]	@ (80035d4 <initGain+0x460>)
 8003586:	4a14      	ldr	r2, [pc, #80]	@ (80035d8 <initGain+0x464>)
 8003588:	60da      	str	r2, [r3, #12]
////	haptic.D = 0.0;
////	haptic.output_ramp = 0;
////	haptic.limit = velocity_limit_output;
////	passivity_gain = 0.0f;
////
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	47c35000 	.word	0x47c35000
 8003598:	200009e8 	.word	0x200009e8
 800359c:	40400000 	.word	0x40400000
 80035a0:	20000c60 	.word	0x20000c60
 80035a4:	2000096c 	.word	0x2000096c
 80035a8:	3a83126f 	.word	0x3a83126f
 80035ac:	20000d24 	.word	0x20000d24
 80035b0:	20000020 	.word	0x20000020
 80035b4:	20000a20 	.word	0x20000a20
 80035b8:	20000944 	.word	0x20000944
 80035bc:	3ca3d70a 	.word	0x3ca3d70a
 80035c0:	20000a58 	.word	0x20000a58
 80035c4:	461c4000 	.word	0x461c4000
 80035c8:	20000c64 	.word	0x20000c64
 80035cc:	20000930 	.word	0x20000930
 80035d0:	20000a90 	.word	0x20000a90
 80035d4:	20000958 	.word	0x20000958
 80035d8:	3ba3d70a 	.word	0x3ba3d70a

080035dc <initFOC>:
// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int initFOC(float zero_electric_offset, enum Direction _sensor_direction) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	ed87 0a01 	vstr	s0, [r7, #4]
 80035e6:	4603      	mov	r3, r0
 80035e8:	70fb      	strb	r3, [r7, #3]
	int exit_flag = 1;
 80035ea:	2301      	movs	r3, #1
 80035ec:	60fb      	str	r3, [r7, #12]
// align motor if necessary
// alignment necessary for encoders.
	if (_isset(zero_electric_offset))
 80035ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f2:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800363c <initFOC+0x60>
 80035f6:	eef4 7a47 	vcmp.f32	s15, s14
 80035fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fe:	d006      	beq.n	800360e <initFOC+0x32>

	{
		// absolute zero offset provided - no need to align
		zero_electric_angle = zero_electric_offset;
 8003600:	4a0f      	ldr	r2, [pc, #60]	@ (8003640 <initFOC+0x64>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6013      	str	r3, [r2, #0]
		// set the sensor direction - default CW
		sensor_direction = _sensor_direction;
 8003606:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360a:	4a0e      	ldr	r2, [pc, #56]	@ (8003644 <initFOC+0x68>)
 800360c:	6013      	str	r3, [r2, #0]
	}
// sensor and motor alignment - can be skipped
// by setting motor.sensor_direction and motor.zero_electric_angle
	exit_flag *= alignSensor();
 800360e:	f7ff fbfb 	bl	8002e08 <alignSensor>
 8003612:	4602      	mov	r2, r0
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	60fb      	str	r3, [r7, #12]
// added the shaft_angle update
	shaft_angle = getAngle();
 800361c:	f7fe ff34 	bl	8002488 <getAngle>
 8003620:	eef0 7a40 	vmov.f32	s15, s0
 8003624:	4b08      	ldr	r3, [pc, #32]	@ (8003648 <initFOC+0x6c>)
 8003626:	edc3 7a00 	vstr	s15, [r3]
	HAL_Delay(500);
 800362a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800362e:	f001 fe05 	bl	800523c <HAL_Delay>

	return exit_flag;
 8003632:	68fb      	ldr	r3, [r7, #12]
}
 8003634:	4618      	mov	r0, r3
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	c640e400 	.word	0xc640e400
 8003640:	20000014 	.word	0x20000014
 8003644:	2000001c 	.word	0x2000001c
 8003648:	20000908 	.word	0x20000908

0800364c <loopFOC>:
	if((setpoint > -0.1)&&(setpoint <= 0.1))
		return 0.3 * fabs(feedback) ;
	else
		return 0.7 * fabs(setpoint) ;
}
void loopFOC() {
 800364c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800364e:	b0a3      	sub	sp, #140	@ 0x8c
 8003650:	af0c      	add	r7, sp, #48	@ 0x30
	updateSensor();
 8003652:	f7fe fecd 	bl	80023f0 <updateSensor>
// shaft angle/velocity need the update() to be called first
// get shaft angle
	shaft_angle = shaftAngle();
 8003656:	f7ff f86f 	bl	8002738 <shaftAngle>
 800365a:	eef0 7a40 	vmov.f32	s15, s0
 800365e:	4b69      	ldr	r3, [pc, #420]	@ (8003804 <loopFOC+0x1b8>)
 8003660:	edc3 7a00 	vstr	s15, [r3]
// electrical angle - need shaftAngle to be called first
	electrical_angle = electricalAngle();
 8003664:	f7ff f906 	bl	8002874 <electricalAngle>
 8003668:	eef0 7a40 	vmov.f32	s15, s0
 800366c:	4b66      	ldr	r3, [pc, #408]	@ (8003808 <loopFOC+0x1bc>)
 800366e:	edc3 7a00 	vstr	s15, [r3]

// Chosen TorqueControlType::foc_current
// read dq currents
	current = getFOCCurrents(electrical_angle);
 8003672:	4b65      	ldr	r3, [pc, #404]	@ (8003808 <loopFOC+0x1bc>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	eeb0 0a67 	vmov.f32	s0, s15
 800367c:	f7fe fac0 	bl	8001c00 <getFOCCurrents>
 8003680:	eeb0 7a40 	vmov.f32	s14, s0
 8003684:	eef0 7a60 	vmov.f32	s15, s1
 8003688:	4b60      	ldr	r3, [pc, #384]	@ (800380c <loopFOC+0x1c0>)
 800368a:	ed83 7a00 	vstr	s14, [r3]
 800368e:	edc3 7a01 	vstr	s15, [r3, #4]
	LPF_current_Q.x = current.q;
 8003692:	4b5e      	ldr	r3, [pc, #376]	@ (800380c <loopFOC+0x1c0>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4a5e      	ldr	r2, [pc, #376]	@ (8003810 <loopFOC+0x1c4>)
 8003698:	6013      	str	r3, [r2, #0]
	LPF_current_Q = LowPassFilter(LPF_current_Q);
 800369a:	4e5d      	ldr	r6, [pc, #372]	@ (8003810 <loopFOC+0x1c4>)
 800369c:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80036a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003810 <loopFOC+0x1c4>)
 80036a2:	466d      	mov	r5, sp
 80036a4:	f103 020c 	add.w	r2, r3, #12
 80036a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	4620      	mov	r0, r4
 80036b4:	f000 f8ba 	bl	800382c <LowPassFilter>
 80036b8:	4635      	mov	r5, r6
 80036ba:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80036be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036c2:	6823      	ldr	r3, [r4, #0]
 80036c4:	602b      	str	r3, [r5, #0]
	current.q = LPF_current_Q.y_prev;   // filter values
 80036c6:	4b52      	ldr	r3, [pc, #328]	@ (8003810 <loopFOC+0x1c4>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	4a50      	ldr	r2, [pc, #320]	@ (800380c <loopFOC+0x1c0>)
 80036cc:	6053      	str	r3, [r2, #4]

	LPF_current_D.x = current.d;
 80036ce:	4b4f      	ldr	r3, [pc, #316]	@ (800380c <loopFOC+0x1c0>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a50      	ldr	r2, [pc, #320]	@ (8003814 <loopFOC+0x1c8>)
 80036d4:	6013      	str	r3, [r2, #0]
	LPF_current_D = LowPassFilter(LPF_current_D);
 80036d6:	4e4f      	ldr	r6, [pc, #316]	@ (8003814 <loopFOC+0x1c8>)
 80036d8:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80036dc:	4b4d      	ldr	r3, [pc, #308]	@ (8003814 <loopFOC+0x1c8>)
 80036de:	466d      	mov	r5, sp
 80036e0:	f103 020c 	add.w	r2, r3, #12
 80036e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80036e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80036ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036ee:	4620      	mov	r0, r4
 80036f0:	f000 f89c 	bl	800382c <LowPassFilter>
 80036f4:	4635      	mov	r5, r6
 80036f6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 80036fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	602b      	str	r3, [r5, #0]
	current.d = LPF_current_D.y_prev;   // filter values
 8003702:	4b44      	ldr	r3, [pc, #272]	@ (8003814 <loopFOC+0x1c8>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	4a41      	ldr	r2, [pc, #260]	@ (800380c <loopFOC+0x1c0>)
 8003708:	6013      	str	r3, [r2, #0]

// calculate the phase voltages
	current_Q.error = current_sp - current.q;
 800370a:	4b43      	ldr	r3, [pc, #268]	@ (8003818 <loopFOC+0x1cc>)
 800370c:	ed93 7a00 	vldr	s14, [r3]
 8003710:	4b3e      	ldr	r3, [pc, #248]	@ (800380c <loopFOC+0x1c0>)
 8003712:	edd3 7a01 	vldr	s15, [r3, #4]
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	4b40      	ldr	r3, [pc, #256]	@ (800381c <loopFOC+0x1d0>)
 800371c:	edc3 7a00 	vstr	s15, [r3]
	current_Q = PID(current_Q);
 8003720:	4b3e      	ldr	r3, [pc, #248]	@ (800381c <loopFOC+0x1d0>)
 8003722:	607b      	str	r3, [r7, #4]
 8003724:	f107 0c08 	add.w	ip, r7, #8
 8003728:	4e3c      	ldr	r6, [pc, #240]	@ (800381c <loopFOC+0x1d0>)
 800372a:	466d      	mov	r5, sp
 800372c:	f106 0408 	add.w	r4, r6, #8
 8003730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003738:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800373c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003740:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003744:	4660      	mov	r0, ip
 8003746:	f000 f8e7 	bl	8003918 <PID>
 800374a:	687d      	ldr	r5, [r7, #4]
 800374c:	f107 0408 	add.w	r4, r7, #8
 8003750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800375a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800375c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003760:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.q = current_Q.output_prev;
 8003764:	4b2d      	ldr	r3, [pc, #180]	@ (800381c <loopFOC+0x1d0>)
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4a2d      	ldr	r2, [pc, #180]	@ (8003820 <loopFOC+0x1d4>)
 800376a:	6053      	str	r3, [r2, #4]

	current_D.error = 0.0 - current.d;
 800376c:	4b27      	ldr	r3, [pc, #156]	@ (800380c <loopFOC+0x1c0>)
 800376e:	edd3 7a00 	vldr	s15, [r3]
 8003772:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003824 <loopFOC+0x1d8>
 8003776:	ee77 7a67 	vsub.f32	s15, s14, s15
 800377a:	4b2b      	ldr	r3, [pc, #172]	@ (8003828 <loopFOC+0x1dc>)
 800377c:	edc3 7a00 	vstr	s15, [r3]
	current_D = PID(current_D);
 8003780:	4b29      	ldr	r3, [pc, #164]	@ (8003828 <loopFOC+0x1dc>)
 8003782:	607b      	str	r3, [r7, #4]
 8003784:	f107 0c08 	add.w	ip, r7, #8
 8003788:	4e27      	ldr	r6, [pc, #156]	@ (8003828 <loopFOC+0x1dc>)
 800378a:	466d      	mov	r5, sp
 800378c:	f106 0408 	add.w	r4, r6, #8
 8003790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003792:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003794:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003796:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003798:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800379c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80037a0:	e896 000c 	ldmia.w	r6, {r2, r3}
 80037a4:	4660      	mov	r0, ip
 80037a6:	f000 f8b7 	bl	8003918 <PID>
 80037aa:	687d      	ldr	r5, [r7, #4]
 80037ac:	f107 0408 	add.w	r4, r7, #8
 80037b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037c0:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.d = current_D.output_prev;
 80037c4:	4b18      	ldr	r3, [pc, #96]	@ (8003828 <loopFOC+0x1dc>)
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4a15      	ldr	r2, [pc, #84]	@ (8003820 <loopFOC+0x1d4>)
 80037ca:	6013      	str	r3, [r2, #0]
	electrical_angle = electricalAngle();
 80037cc:	f7ff f852 	bl	8002874 <electricalAngle>
 80037d0:	eef0 7a40 	vmov.f32	s15, s0
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <loopFOC+0x1bc>)
 80037d6:	edc3 7a00 	vstr	s15, [r3]
// set the phase voltage - FOC heart function :)
	setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 80037da:	4b11      	ldr	r3, [pc, #68]	@ (8003820 <loopFOC+0x1d4>)
 80037dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003820 <loopFOC+0x1d4>)
 80037e2:	ed93 7a00 	vldr	s14, [r3]
 80037e6:	4b08      	ldr	r3, [pc, #32]	@ (8003808 <loopFOC+0x1bc>)
 80037e8:	edd3 6a00 	vldr	s13, [r3]
 80037ec:	eeb0 1a66 	vmov.f32	s2, s13
 80037f0:	eef0 0a47 	vmov.f32	s1, s14
 80037f4:	eeb0 0a67 	vmov.f32	s0, s15
 80037f8:	f7ff f8fa 	bl	80029f0 <setPhaseVoltage>
//	setPhaseVoltage(current_sp, 0.0, electrical_angle);

}
 80037fc:	bf00      	nop
 80037fe:	375c      	adds	r7, #92	@ 0x5c
 8003800:	46bd      	mov	sp, r7
 8003802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003804:	20000908 	.word	0x20000908
 8003808:	2000090c 	.word	0x2000090c
 800380c:	20000928 	.word	0x20000928
 8003810:	2000096c 	.word	0x2000096c
 8003814:	20000980 	.word	0x20000980
 8003818:	20000914 	.word	0x20000914
 800381c:	20000a20 	.word	0x20000a20
 8003820:	20000920 	.word	0x20000920
 8003824:	00000000 	.word	0x00000000
 8003828:	200009e8 	.word	0x200009e8

0800382c <LowPassFilter>:

//Low-Pass Filter
struct LPF LowPassFilter(struct LPF LPF) {
 800382c:	b084      	sub	sp, #16
 800382e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003832:	b088      	sub	sp, #32
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 800383c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long long timestamp = micros();
 8003840:	f7fe f88e 	bl	8001960 <micros>
 8003844:	4603      	mov	r3, r0
 8003846:	2200      	movs	r2, #0
 8003848:	469a      	mov	sl, r3
 800384a:	4693      	mov	fp, r2
 800384c:	e9c7 ab04 	strd	sl, fp, [r7, #16]

	float dt = (timestamp - LPF.timestamp_prev) * 1e-6f;
 8003850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003852:	2200      	movs	r2, #0
 8003854:	461c      	mov	r4, r3
 8003856:	4615      	mov	r5, r2
 8003858:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800385c:	ebb2 0804 	subs.w	r8, r2, r4
 8003860:	eb63 0905 	sbc.w	r9, r3, r5
 8003864:	4640      	mov	r0, r8
 8003866:	4649      	mov	r1, r9
 8003868:	f7fd fa82 	bl	8000d70 <__aeabi_ul2f>
 800386c:	ee07 0a10 	vmov	s14, r0
 8003870:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800390c <LowPassFilter+0xe0>
 8003874:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003878:	edc7 7a07 	vstr	s15, [r7, #28]

	if (dt <= 0 || dt > 0.0008f)
 800387c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003880:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003888:	d908      	bls.n	800389c <LowPassFilter+0x70>
 800388a:	edd7 7a07 	vldr	s15, [r7, #28]
 800388e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003910 <LowPassFilter+0xe4>
 8003892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800389a:	dd01      	ble.n	80038a0 <LowPassFilter+0x74>
		dt = 0.0008f;
 800389c:	4b1d      	ldr	r3, [pc, #116]	@ (8003914 <LowPassFilter+0xe8>)
 800389e:	61fb      	str	r3, [r7, #28]
//    {
//    	LPF.y_prev = LPF.x;
//    	LPF.timestamp_prev = timestamp;
//        return LPF;
//    }
	float alpha = LPF.Tf / (LPF.Tf + dt);
 80038a0:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80038a4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80038a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80038ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038b4:	edc7 7a03 	vstr	s15, [r7, #12]
	float y = alpha * LPF.y_prev + (1.0f - alpha) * LPF.x;
 80038b8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80038bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038c8:	edd7 7a03 	vldr	s15, [r7, #12]
 80038cc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80038d0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80038d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80038d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038dc:	edc7 7a02 	vstr	s15, [r7, #8]

	LPF.y_prev = y;
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	LPF.timestamp_prev = timestamp;
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	64bb      	str	r3, [r7, #72]	@ 0x48
	LPF.debug_dt = alpha;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	657b      	str	r3, [r7, #84]	@ 0x54

	return LPF;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	461d      	mov	r5, r3
 80038f0:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 80038f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038f8:	6823      	ldr	r3, [r4, #0]
 80038fa:	602b      	str	r3, [r5, #0]
}
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003906:	b004      	add	sp, #16
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	358637bd 	.word	0x358637bd
 8003910:	3a51b717 	.word	0x3a51b717
 8003914:	3a51b717 	.word	0x3a51b717

08003918 <PID>:

//float PID(float error,float P, float I, float D, float output_ramp, float limit, unsigned long timestamp_prev, float integral_prev, float error_prev , float output_prev)
struct PID PID(struct PID PID) {
 8003918:	b082      	sub	sp, #8
 800391a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800391e:	b08a      	sub	sp, #40	@ 0x28
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8003928:	e881 000c 	stmia.w	r1, {r2, r3}

// calculate the time from the last call
	unsigned long long timestamp_now = micros();
 800392c:	f7fe f818 	bl	8001960 <micros>
 8003930:	4603      	mov	r3, r0
 8003932:	2200      	movs	r2, #0
 8003934:	4698      	mov	r8, r3
 8003936:	4691      	mov	r9, r2
 8003938:	e9c7 8906 	strd	r8, r9, [r7, #24]
	float Ts = (timestamp_now - PID.timestamp_prev) * 1e-6;
 800393c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003940:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003944:	1a84      	subs	r4, r0, r2
 8003946:	eb61 0503 	sbc.w	r5, r1, r3
 800394a:	4620      	mov	r0, r4
 800394c:	4629      	mov	r1, r5
 800394e:	f7fc fde9 	bl	8000524 <__aeabi_ul2d>
 8003952:	a375      	add	r3, pc, #468	@ (adr r3, 8003b28 <PID+0x210>)
 8003954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003958:	f7fc fe1a 	bl	8000590 <__aeabi_dmul>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	4610      	mov	r0, r2
 8003962:	4619      	mov	r1, r3
 8003964:	f7fd f8ec 	bl	8000b40 <__aeabi_d2f>
 8003968:	4603      	mov	r3, r0
 800396a:	627b      	str	r3, [r7, #36]	@ 0x24
//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 800396c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003970:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	d908      	bls.n	800398c <PID+0x74>
 800397a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800397e:	ed9f 7a64 	vldr	s14, [pc, #400]	@ 8003b10 <PID+0x1f8>
 8003982:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398a:	dd01      	ble.n	8003990 <PID+0x78>
		Ts = 0.0008f;
 800398c:	4b61      	ldr	r3, [pc, #388]	@ (8003b14 <PID+0x1fc>)
 800398e:	627b      	str	r3, [r7, #36]	@ 0x24
	dtx = Ts;
 8003990:	4a61      	ldr	r2, [pc, #388]	@ (8003b18 <PID+0x200>)
 8003992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003994:	6013      	str	r3, [r2, #0]
// u(s) = (P + I/s + Ds)e(s)
// Discrete implementations
// proportional part
// u_p  = P *e(k)
	float proportional = PID.P * PID.error;
 8003996:	ed97 7a1b 	vldr	s14, [r7, #108]	@ 0x6c
 800399a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800399e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039a2:	edc7 7a05 	vstr	s15, [r7, #20]
// Tustin transform of the integral part
// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	float integral = PID.integral_prev + PID.I * Ts * 0.5f * (PID.error + PID.error_prev);
 80039a6:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80039aa:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 80039ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039b6:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 80039ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80039be:	ed97 6a10 	vldr	s12, [r7, #64]	@ 0x40
 80039c2:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80039c6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80039ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80039ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039d2:	edc7 7a08 	vstr	s15, [r7, #32]
	if ((state_enable == 0) || (integral > 23.5) || (integral < -23.5)) {
 80039d6:	4b51      	ldr	r3, [pc, #324]	@ (8003b1c <PID+0x204>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	f083 0301 	eor.w	r3, r3, #1
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d111      	bne.n	8003a08 <PID+0xf0>
 80039e4:	edd7 7a08 	vldr	s15, [r7, #32]
 80039e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003b20 <PID+0x208>
 80039ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	dc08      	bgt.n	8003a08 <PID+0xf0>
 80039f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80039fa:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8003b24 <PID+0x20c>
 80039fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a06:	d502      	bpl.n	8003a0e <PID+0xf6>
		integral = 0.0f;
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	623b      	str	r3, [r7, #32]
	}
// antiwindup - limit the output
	integral = _constrain(integral, -PID.anti_windup, PID.anti_windup);
 8003a0e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003a12:	eef1 7a67 	vneg.f32	s15, s15
 8003a16:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a22:	d504      	bpl.n	8003a2e <PID+0x116>
 8003a24:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003a28:	eef1 7a67 	vneg.f32	s15, s15
 8003a2c:	e00d      	b.n	8003a4a <PID+0x132>
 8003a2e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003a32:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a3e:	dd02      	ble.n	8003a46 <PID+0x12e>
 8003a40:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8003a44:	e001      	b.n	8003a4a <PID+0x132>
 8003a46:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a4a:	edc7 7a08 	vstr	s15, [r7, #32]
// Discrete derivation
// u_dk = D(ek - ek_1)/Ts
	float derivative = PID.D * (PID.error - PID.error_prev) / Ts;
 8003a4e:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 8003a52:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8003a56:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003a5a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003a5e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003a62:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a6a:	edc7 7a04 	vstr	s15, [r7, #16]

// sum all the components
	float output = proportional + integral + derivative;
 8003a6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a72:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a7a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a82:	edc7 7a03 	vstr	s15, [r7, #12]
// antiwindup - limit the output variable
	output = _constrain(output, -PID.limit, PID.limit);
 8003a86:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003a8a:	eef1 7a67 	vneg.f32	s15, s15
 8003a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a9a:	d504      	bpl.n	8003aa6 <PID+0x18e>
 8003a9c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003aa0:	eef1 7a67 	vneg.f32	s15, s15
 8003aa4:	e00d      	b.n	8003ac2 <PID+0x1aa>
 8003aa6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003aaa:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab6:	dd02      	ble.n	8003abe <PID+0x1a6>
 8003ab8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8003abc:	e001      	b.n	8003ac2 <PID+0x1aa>
 8003abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8003ac2:	edc7 7a03 	vstr	s15, [r7, #12]

// saving for the next pass
	PID.integral_prev = integral;
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	647b      	str	r3, [r7, #68]	@ 0x44
	PID.output_prev = output;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	65bb      	str	r3, [r7, #88]	@ 0x58
	PID.error_prev = PID.error;
 8003ace:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
	PID.timestamp_prev = timestamp_now;
 8003ad2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad6:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	PID.dtx = dtx;
 8003ada:	4b0f      	ldr	r3, [pc, #60]	@ (8003b18 <PID+0x200>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	66bb      	str	r3, [r7, #104]	@ 0x68
	return PID;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	461d      	mov	r5, r3
 8003ae4:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8003ae8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003aec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003aee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003af2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003af4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003af8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	3728      	adds	r7, #40	@ 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8003b06:	b002      	add	sp, #8
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	f3af 8000 	nop.w
 8003b10:	3a51b717 	.word	0x3a51b717
 8003b14:	3a51b717 	.word	0x3a51b717
 8003b18:	20000ce4 	.word	0x20000ce4
 8003b1c:	20000d28 	.word	0x20000d28
 8003b20:	41bc0000 	.word	0x41bc0000
 8003b24:	c1bc0000 	.word	0xc1bc0000
 8003b28:	a0b5ed8d 	.word	0xa0b5ed8d
 8003b2c:	3eb0c6f7 	.word	0x3eb0c6f7

08003b30 <SMC_V>:
	PID_current_D.timestamp_prev = timestamp_now;
	PID_current_D.dtx = dtx;
	return PID_current_D;
}

struct SMC SMC_V(struct SMC SMC) {
 8003b30:	b084      	sub	sp, #16
 8003b32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b34:	ed2d 8b02 	vpush	{d8}
 8003b38:	b099      	sub	sp, #100	@ 0x64
 8003b3a:	af02      	add	r7, sp, #8
 8003b3c:	61f8      	str	r0, [r7, #28]
 8003b3e:	f107 007c 	add.w	r0, r7, #124	@ 0x7c
 8003b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long timestamp_now = micros();
 8003b46:	f7fd ff0b 	bl	8001960 <micros>
 8003b4a:	6538      	str	r0, [r7, #80]	@ 0x50
	float Ts = (timestamp_now - SMC.timestamp_prev) * 1e-6;
 8003b4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b50:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fc fca1 	bl	800049c <__aeabi_ui2d>
 8003b5a:	a3d0      	add	r3, pc, #832	@ (adr r3, 8003e9c <SMC_V+0x36c>)
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f7fc fd16 	bl	8000590 <__aeabi_dmul>
 8003b64:	4602      	mov	r2, r0
 8003b66:	460b      	mov	r3, r1
 8003b68:	4610      	mov	r0, r2
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	f7fc ffe8 	bl	8000b40 <__aeabi_d2f>
 8003b70:	4603      	mov	r3, r0
 8003b72:	657b      	str	r3, [r7, #84]	@ 0x54
	//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 8003b74:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003b78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b80:	d908      	bls.n	8003b94 <SMC_V+0x64>
 8003b82:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003b86:	ed9f 7ab8 	vldr	s14, [pc, #736]	@ 8003e68 <SMC_V+0x338>
 8003b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b92:	dd01      	ble.n	8003b98 <SMC_V+0x68>
		Ts = 0.0008f;
 8003b94:	4bb5      	ldr	r3, [pc, #724]	@ (8003e6c <SMC_V+0x33c>)
 8003b96:	657b      	str	r3, [r7, #84]	@ 0x54
	dtx = Ts;
 8003b98:	4ab5      	ldr	r2, [pc, #724]	@ (8003e70 <SMC_V+0x340>)
 8003b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b9c:	6013      	str	r3, [r2, #0]


	//Dynamic equations
	float an = (3 * (pole_pairs * pole_pairs) * flux_linkage) / (2 * inertia);
 8003b9e:	4bb5      	ldr	r3, [pc, #724]	@ (8003e74 <SMC_V+0x344>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4ab4      	ldr	r2, [pc, #720]	@ (8003e74 <SMC_V+0x344>)
 8003ba4:	6812      	ldr	r2, [r2, #0]
 8003ba6:	fb03 f202 	mul.w	r2, r3, r2
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003bb8:	4baf      	ldr	r3, [pc, #700]	@ (8003e78 <SMC_V+0x348>)
 8003bba:	edd3 7a00 	vldr	s15, [r3]
 8003bbe:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bc2:	4bae      	ldr	r3, [pc, #696]	@ (8003e7c <SMC_V+0x34c>)
 8003bc4:	edd3 7a00 	vldr	s15, [r3]
 8003bc8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
//	float bn = pole_pairs / inertia ;
	float cn = damping / inertia;
 8003bd4:	4baa      	ldr	r3, [pc, #680]	@ (8003e80 <SMC_V+0x350>)
 8003bd6:	edd3 6a00 	vldr	s13, [r3]
 8003bda:	4ba8      	ldr	r3, [pc, #672]	@ (8003e7c <SMC_V+0x34c>)
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003be4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
//	float integral_error = SMC.integral_error_prev + Ts * 0.5f * (SMC.error + SMC.error_prev);
//	float integral_error_est = SMC.integral_error_est_prev + Ts * 0.5f * (SMC.error_est + SMC.error_est_prev);
//	float sliding_surface = SMC.error + integral_error;
//	float sliding_surface_est = SMC.error_est + integral_error_est;
	// S = e
	float sliding_surface = SMC.error ;
 8003be8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003bea:	647b      	str	r3, [r7, #68]	@ 0x44
	float sliding_surface_est = SMC.error_est ;
 8003bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf0:	643b      	str	r3, [r7, #64]	@ 0x40

	//ESDMO
	//input_SM_observer = neta * sign(error_estimated)
	float u_smo = SMC.neta * _sign(sliding_surface_est);
 8003bf2:	ed97 7a36 	vldr	s14, [r7, #216]	@ 0xd8
 8003bf6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003bfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c02:	d502      	bpl.n	8003c0a <SMC_V+0xda>
 8003c04:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003c08:	e00b      	b.n	8003c22 <SMC_V+0xf2>
 8003c0a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8003c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c16:	dd02      	ble.n	8003c1e <SMC_V+0xee>
 8003c18:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003c1c:	e001      	b.n	8003c22 <SMC_V+0xf2>
 8003c1e:	eddf 7a99 	vldr	s15, [pc, #612]	@ 8003e84 <SMC_V+0x354>
 8003c22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c26:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	// Dif velocity estimated
	float dw_est = (an * current.q) - (cn * SMC.w_est_prev) + (SMC.r_est_prev) + u_smo;
 8003c2a:	4b97      	ldr	r3, [pc, #604]	@ (8003e88 <SMC_V+0x358>)
 8003c2c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003c30:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003c34:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c38:	edd7 6a29 	vldr	s13, [r7, #164]	@ 0xa4
 8003c3c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003c40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c48:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003c4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c50:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c58:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
	// Dif error estimated
	float dr_est = SMC.g * u_smo;
 8003c5c:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8003c60:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c68:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	// Tustin transform of the integral part
	// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	float w_est = SMC.w_est_prev + Ts * 0.5f * (dw_est + SMC.dw_est_prev);
 8003c6c:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003c70:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003c74:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003c78:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003c7c:	ed97 6a2c 	vldr	s12, [r7, #176]	@ 0xb0
 8003c80:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003c84:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003c88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c90:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float r_est = SMC.r_est_prev + Ts * 0.5f * (dr_est + SMC.dr_est_prev);
 8003c94:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 8003c98:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003c9c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003ca0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003ca4:	ed97 6a2b 	vldr	s12, [r7, #172]	@ 0xac
 8003ca8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003cac:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003cb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb8:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
	LPF_w_est.x = w_est;
 8003cbc:	4a73      	ldr	r2, [pc, #460]	@ (8003e8c <SMC_V+0x35c>)
 8003cbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc0:	6013      	str	r3, [r2, #0]
	LPF_w_est = LowPassFilter(LPF_w_est);
 8003cc2:	4e72      	ldr	r6, [pc, #456]	@ (8003e8c <SMC_V+0x35c>)
 8003cc4:	463c      	mov	r4, r7
 8003cc6:	4b71      	ldr	r3, [pc, #452]	@ (8003e8c <SMC_V+0x35c>)
 8003cc8:	466d      	mov	r5, sp
 8003cca:	f103 020c 	add.w	r2, r3, #12
 8003cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cd8:	4620      	mov	r0, r4
 8003cda:	f7ff fda7 	bl	800382c <LowPassFilter>
 8003cde:	4635      	mov	r5, r6
 8003ce0:	463c      	mov	r4, r7
 8003ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce6:	6823      	ldr	r3, [r4, #0]
 8003ce8:	602b      	str	r3, [r5, #0]
	w_est = LPF_w_est.y_prev;  // filter values
 8003cea:	4b68      	ldr	r3, [pc, #416]	@ (8003e8c <SMC_V+0x35c>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	633b      	str	r3, [r7, #48]	@ 0x30
	LPF_r_est.x = r_est;
 8003cf0:	4a67      	ldr	r2, [pc, #412]	@ (8003e90 <SMC_V+0x360>)
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	6013      	str	r3, [r2, #0]
	LPF_r_est = LowPassFilter(LPF_r_est);
 8003cf6:	4e66      	ldr	r6, [pc, #408]	@ (8003e90 <SMC_V+0x360>)
 8003cf8:	463c      	mov	r4, r7
 8003cfa:	4b65      	ldr	r3, [pc, #404]	@ (8003e90 <SMC_V+0x360>)
 8003cfc:	466d      	mov	r5, sp
 8003cfe:	f103 020c 	add.w	r2, r3, #12
 8003d02:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003d06:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	f7ff fd8d 	bl	800382c <LowPassFilter>
 8003d12:	4635      	mov	r5, r6
 8003d14:	463c      	mov	r4, r7
 8003d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d1a:	6823      	ldr	r3, [r4, #0]
 8003d1c:	602b      	str	r3, [r5, #0]
	r_est = LPF_r_est.y_prev;  // filter values
 8003d1e:	4b5c      	ldr	r3, [pc, #368]	@ (8003e90 <SMC_V+0x360>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
//		SMC.debug_eq = eq_nr ;
//		datacheck = 0 ;
//	}

////fusion method
	float sign_temp = _sign(sliding_surface) ;
 8003d24:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003d28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d30:	d501      	bpl.n	8003d36 <SMC_V+0x206>
 8003d32:	4b58      	ldr	r3, [pc, #352]	@ (8003e94 <SMC_V+0x364>)
 8003d34:	e00b      	b.n	8003d4e <SMC_V+0x21e>
 8003d36:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003d3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d42:	dd02      	ble.n	8003d4a <SMC_V+0x21a>
 8003d44:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003d48:	e001      	b.n	8003d4e <SMC_V+0x21e>
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
	float integral_sign = SMC.integral_sign_prev + Ts * 0.5f * (sign_temp + SMC.sign_temp_prev) ;
 8003d50:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8003d54:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8003d58:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003d5c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003d60:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8003d64:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003d68:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003d6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	SMC.debug_eq = (SMC.kp * _sqrtApprox(fabs(sliding_surface)) * _sign(sliding_surface)) + (SMC.ki * integral_sign* expf(-SMC.delta * fabs(sliding_surface)));
 8003d78:	ed97 8a37 	vldr	s16, [r7, #220]	@ 0xdc
 8003d7c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003d80:	eef0 7ae7 	vabs.f32	s15, s15
 8003d84:	eeb0 0a67 	vmov.f32	s0, s15
 8003d88:	f7fe f9bc 	bl	8002104 <_sqrtApprox>
 8003d8c:	eef0 7a40 	vmov.f32	s15, s0
 8003d90:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003d94:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003d98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da0:	d502      	bpl.n	8003da8 <SMC_V+0x278>
 8003da2:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 8003da6:	e00b      	b.n	8003dc0 <SMC_V+0x290>
 8003da8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003dac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db4:	dd02      	ble.n	8003dbc <SMC_V+0x28c>
 8003db6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8003dba:	e001      	b.n	8003dc0 <SMC_V+0x290>
 8003dbc:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8003e84 <SMC_V+0x354>
 8003dc0:	ee27 8a87 	vmul.f32	s16, s15, s14
 8003dc4:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8003dc8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003dcc:	ee67 8a27 	vmul.f32	s17, s14, s15
 8003dd0:	edd7 7a34 	vldr	s15, [r7, #208]	@ 0xd0
 8003dd4:	eeb1 7a67 	vneg.f32	s14, s15
 8003dd8:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8003ddc:	eef0 7ae7 	vabs.f32	s15, s15
 8003de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003de4:	eeb0 0a67 	vmov.f32	s0, s15
 8003de8:	f007 f89a 	bl	800af20 <expf>
 8003dec:	eef0 7a40 	vmov.f32	s15, s0
 8003df0:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8003df4:	ee78 7a27 	vadd.f32	s15, s16, s15
 8003df8:	edc7 7a3a 	vstr	s15, [r7, #232]	@ 0xe8
	float output = (1 / an) * ((cn * shaft_velocity) - r_est + SMC.debug_eq);
 8003dfc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e00:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003e04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e08:	4b23      	ldr	r3, [pc, #140]	@ (8003e98 <SMC_V+0x368>)
 8003e0a:	edd3 6a00 	vldr	s13, [r3]
 8003e0e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003e12:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8003e16:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e1e:	edd7 7a3a 	vldr	s15, [r7, #232]	@ 0xe8
 8003e22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a08 	vstr	s15, [r7, #32]
	output = _constrain(output, -SMC.limit, SMC.limit);
 8003e2e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8003e32:	eef1 7a67 	vneg.f32	s15, s15
 8003e36:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e42:	d504      	bpl.n	8003e4e <SMC_V+0x31e>
 8003e44:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8003e48:	eef1 7a67 	vneg.f32	s15, s15
 8003e4c:	e02c      	b.n	8003ea8 <SMC_V+0x378>
 8003e4e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8003e52:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5e:	dd21      	ble.n	8003ea4 <SMC_V+0x374>
 8003e60:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8003e64:	e020      	b.n	8003ea8 <SMC_V+0x378>
 8003e66:	bf00      	nop
 8003e68:	3a51b717 	.word	0x3a51b717
 8003e6c:	3a51b717 	.word	0x3a51b717
 8003e70:	20000ce4 	.word	0x20000ce4
 8003e74:	20000c5c 	.word	0x20000c5c
 8003e78:	20000c54 	.word	0x20000c54
 8003e7c:	20000c50 	.word	0x20000c50
 8003e80:	20000c58 	.word	0x20000c58
 8003e84:	00000000 	.word	0x00000000
 8003e88:	20000928 	.word	0x20000928
 8003e8c:	200009a8 	.word	0x200009a8
 8003e90:	200009bc 	.word	0x200009bc
 8003e94:	bf800000 	.word	0xbf800000
 8003e98:	20000910 	.word	0x20000910
 8003e9c:	a0b5ed8d 	.word	0xa0b5ed8d
 8003ea0:	3eb0c6f7 	.word	0x3eb0c6f7
 8003ea4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ea8:	edc7 7a08 	vstr	s15, [r7, #32]
	SMC.debug_output = output ;
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
	SMC.error_prev = SMC.error ;
 8003eb2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	SMC.error_est_prev = SMC.error_est ;
 8003eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
//	SMC.integral_error_prev = integral_error;
//	SMC.integral_error_est_prev = integral_error_est;
	SMC.sign_temp_prev = sign_temp ;
 8003ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ec2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	SMC.integral_sign_prev = integral_sign ;
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	SMC.output_prev = output ;
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
	SMC.r_est_prev = r_est ;
 8003ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ed4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
	SMC.dr_est_prev = dr_est ;
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	SMC.w_est_prev = w_est ;
 8003ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
	SMC.dw_est_prev = dw_est ;
 8003ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ee6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	SMC.timestamp_prev = timestamp_now;
 8003eea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
	SMC.dtx = dtx ;
 8003ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8003f1c <SMC_V+0x3ec>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
	return SMC;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8003f00:	2280      	movs	r2, #128	@ 0x80
 8003f02:	4619      	mov	r1, r3
 8003f04:	f006 ff60 	bl	800adc8 <memcpy>
}
 8003f08:	69f8      	ldr	r0, [r7, #28]
 8003f0a:	375c      	adds	r7, #92	@ 0x5c
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	ecbd 8b02 	vpop	{d8}
 8003f12:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8003f16:	b004      	add	sp, #16
 8003f18:	4770      	bx	lr
 8003f1a:	bf00      	nop
 8003f1c:	20000ce4 	.word	0x20000ce4

08003f20 <SMC_angle>:
	SMC.timestamp_prev = timestamp_now;
	SMC.dtx = Ts ;
	return SMC;
}

void SMC_angle(float new_target) {
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	b0d1      	sub	sp, #324	@ 0x144
 8003f24:	af1e      	add	r7, sp, #120	@ 0x78
 8003f26:	ed87 0a31 	vstr	s0, [r7, #196]	@ 0xc4

	shaft_angle = shaftAngle();
 8003f2a:	f7fe fc05 	bl	8002738 <shaftAngle>
 8003f2e:	eef0 7a40 	vmov.f32	s15, s0
 8003f32:	4b5c      	ldr	r3, [pc, #368]	@ (80040a4 <SMC_angle+0x184>)
 8003f34:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8003f38:	f7fe fc38 	bl	80027ac <shaftVelocity>
 8003f3c:	eef0 7a40 	vmov.f32	s15, s0
 8003f40:	4b59      	ldr	r3, [pc, #356]	@ (80040a8 <SMC_angle+0x188>)
 8003f42:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 8003f46:	f7fe fc95 	bl	8002874 <electricalAngle>
 8003f4a:	eef0 7a40 	vmov.f32	s15, s0
 8003f4e:	4b57      	ldr	r3, [pc, #348]	@ (80040ac <SMC_angle+0x18c>)
 8003f50:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 8003f54:	4b55      	ldr	r3, [pc, #340]	@ (80040ac <SMC_angle+0x18c>)
 8003f56:	edd3 7a00 	vldr	s15, [r3]
 8003f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f5e:	f7fd fe4f 	bl	8001c00 <getFOCCurrents>
 8003f62:	eeb0 7a40 	vmov.f32	s14, s0
 8003f66:	eef0 7a60 	vmov.f32	s15, s1
 8003f6a:	4b51      	ldr	r3, [pc, #324]	@ (80040b0 <SMC_angle+0x190>)
 8003f6c:	ed83 7a00 	vstr	s14, [r3]
 8003f70:	edc3 7a01 	vstr	s15, [r3, #4]

	//PID - SMC -----------------------------------------------------------------------
	if (_isset(new_target))
 8003f74:	edd7 7a31 	vldr	s15, [r7, #196]	@ 0xc4
 8003f78:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 80040b4 <SMC_angle+0x194>
 8003f7c:	eef4 7a47 	vcmp.f32	s15, s14
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	d003      	beq.n	8003f8e <SMC_angle+0x6e>
		target = new_target;
 8003f86:	4a4c      	ldr	r2, [pc, #304]	@ (80040b8 <SMC_angle+0x198>)
 8003f88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003f8c:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 8003f8e:	4b4a      	ldr	r3, [pc, #296]	@ (80040b8 <SMC_angle+0x198>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a4a      	ldr	r2, [pc, #296]	@ (80040bc <SMC_angle+0x19c>)
 8003f94:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 8003f96:	4b49      	ldr	r3, [pc, #292]	@ (80040bc <SMC_angle+0x19c>)
 8003f98:	ed93 7a00 	vldr	s14, [r3]
 8003f9c:	4b41      	ldr	r3, [pc, #260]	@ (80040a4 <SMC_angle+0x184>)
 8003f9e:	edd3 7a00 	vldr	s15, [r3]
 8003fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fa6:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <SMC_angle+0x1a0>)
 8003fa8:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 8003fac:	4b44      	ldr	r3, [pc, #272]	@ (80040c0 <SMC_angle+0x1a0>)
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	f107 0c88 	add.w	ip, r7, #136	@ 0x88
 8003fb4:	4e42      	ldr	r6, [pc, #264]	@ (80040c0 <SMC_angle+0x1a0>)
 8003fb6:	466d      	mov	r5, sp
 8003fb8:	f106 0408 	add.w	r4, r6, #8
 8003fbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fc2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fc4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003fc8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8003fcc:	e896 000c 	ldmia.w	r6, {r2, r3}
 8003fd0:	4660      	mov	r0, ip
 8003fd2:	f7ff fca1 	bl	8003918 <PID>
 8003fd6:	687d      	ldr	r5, [r7, #4]
 8003fd8:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8003fdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003fe6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003fe8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003fec:	e885 0003 	stmia.w	r5, {r0, r1}

	shaft_angle = shaftAngle();
 8003ff0:	f7fe fba2 	bl	8002738 <shaftAngle>
 8003ff4:	eef0 7a40 	vmov.f32	s15, s0
 8003ff8:	4b2a      	ldr	r3, [pc, #168]	@ (80040a4 <SMC_angle+0x184>)
 8003ffa:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8003ffe:	f7fe fbd5 	bl	80027ac <shaftVelocity>
 8004002:	eef0 7a40 	vmov.f32	s15, s0
 8004006:	4b28      	ldr	r3, [pc, #160]	@ (80040a8 <SMC_angle+0x188>)
 8004008:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 800400c:	f7fe fc32 	bl	8002874 <electricalAngle>
 8004010:	eef0 7a40 	vmov.f32	s15, s0
 8004014:	4b25      	ldr	r3, [pc, #148]	@ (80040ac <SMC_angle+0x18c>)
 8004016:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 800401a:	4b24      	ldr	r3, [pc, #144]	@ (80040ac <SMC_angle+0x18c>)
 800401c:	edd3 7a00 	vldr	s15, [r3]
 8004020:	eeb0 0a67 	vmov.f32	s0, s15
 8004024:	f7fd fdec 	bl	8001c00 <getFOCCurrents>
 8004028:	eeb0 7a40 	vmov.f32	s14, s0
 800402c:	eef0 7a60 	vmov.f32	s15, s1
 8004030:	4b1f      	ldr	r3, [pc, #124]	@ (80040b0 <SMC_angle+0x190>)
 8004032:	ed83 7a00 	vstr	s14, [r3]
 8004036:	edc3 7a01 	vstr	s15, [r3, #4]

	SMC_vel.error = angle.output_prev - shaft_velocity;
 800403a:	4b21      	ldr	r3, [pc, #132]	@ (80040c0 <SMC_angle+0x1a0>)
 800403c:	ed93 7a06 	vldr	s14, [r3, #24]
 8004040:	4b19      	ldr	r3, [pc, #100]	@ (80040a8 <SMC_angle+0x188>)
 8004042:	edd3 7a00 	vldr	s15, [r3]
 8004046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800404a:	4b1e      	ldr	r3, [pc, #120]	@ (80040c4 <SMC_angle+0x1a4>)
 800404c:	edc3 7a00 	vstr	s15, [r3]
	SMC_vel.error_est = SMC_vel.w_est_prev - shaft_velocity;
 8004050:	4b1c      	ldr	r3, [pc, #112]	@ (80040c4 <SMC_angle+0x1a4>)
 8004052:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004056:	4b14      	ldr	r3, [pc, #80]	@ (80040a8 <SMC_angle+0x188>)
 8004058:	edd3 7a00 	vldr	s15, [r3]
 800405c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004060:	4b18      	ldr	r3, [pc, #96]	@ (80040c4 <SMC_angle+0x1a4>)
 8004062:	edc3 7a02 	vstr	s15, [r3, #8]
	SMC_vel = SMC_V(SMC_vel);
 8004066:	4e17      	ldr	r6, [pc, #92]	@ (80040c4 <SMC_angle+0x1a4>)
 8004068:	f107 0508 	add.w	r5, r7, #8
 800406c:	4c15      	ldr	r4, [pc, #84]	@ (80040c4 <SMC_angle+0x1a4>)
 800406e:	4668      	mov	r0, sp
 8004070:	f104 030c 	add.w	r3, r4, #12
 8004074:	2274      	movs	r2, #116	@ 0x74
 8004076:	4619      	mov	r1, r3
 8004078:	f006 fea6 	bl	800adc8 <memcpy>
 800407c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004080:	4628      	mov	r0, r5
 8004082:	f7ff fd55 	bl	8003b30 <SMC_V>
 8004086:	4630      	mov	r0, r6
 8004088:	f107 0308 	add.w	r3, r7, #8
 800408c:	2280      	movs	r2, #128	@ 0x80
 800408e:	4619      	mov	r1, r3
 8004090:	f006 fe9a 	bl	800adc8 <memcpy>
	current_sp = SMC_vel.output_prev;
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <SMC_angle+0x1a4>)
 8004096:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004098:	4a0b      	ldr	r2, [pc, #44]	@ (80040c8 <SMC_angle+0x1a8>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	37cc      	adds	r7, #204	@ 0xcc
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040a4:	20000908 	.word	0x20000908
 80040a8:	20000910 	.word	0x20000910
 80040ac:	2000090c 	.word	0x2000090c
 80040b0:	20000928 	.word	0x20000928
 80040b4:	c640e400 	.word	0xc640e400
 80040b8:	20000904 	.word	0x20000904
 80040bc:	2000091c 	.word	0x2000091c
 80040c0:	20000a90 	.word	0x20000a90
 80040c4:	20000ac8 	.word	0x20000ac8
 80040c8:	20000914 	.word	0x20000914
 80040cc:	00000000 	.word	0x00000000

080040d0 <fusion_V>:

struct fusion fusion_V(struct fusion fusion)
{
 80040d0:	b084      	sub	sp, #16
 80040d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040d6:	b09d      	sub	sp, #116	@ 0x74
 80040d8:	af02      	add	r7, sp, #8
 80040da:	61f8      	str	r0, [r7, #28]
 80040dc:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 80040e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long timestamp_now = micros();
 80040e4:	f7fd fc3c 	bl	8001960 <micros>
 80040e8:	65f8      	str	r0, [r7, #92]	@ 0x5c
	float Ts = (timestamp_now - fusion.timestamp_prev) * 1e-6;
 80040ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040ee:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7fc f9d2 	bl	800049c <__aeabi_ui2d>
 80040f8:	a3da      	add	r3, pc, #872	@ (adr r3, 8004464 <fusion_V+0x394>)
 80040fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fe:	f7fc fa47 	bl	8000590 <__aeabi_dmul>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4610      	mov	r0, r2
 8004108:	4619      	mov	r1, r3
 800410a:	f7fc fd19 	bl	8000b40 <__aeabi_d2f>
 800410e:	4603      	mov	r3, r0
 8004110:	667b      	str	r3, [r7, #100]	@ 0x64
	//fix for micros overflow
	if (Ts <= 0 || Ts > 0.0008f)
 8004112:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004116:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d908      	bls.n	8004132 <fusion_V+0x62>
 8004120:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004124:	ed9f 7ac0 	vldr	s14, [pc, #768]	@ 8004428 <fusion_V+0x358>
 8004128:	eef4 7ac7 	vcmpe.f32	s15, s14
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	dd01      	ble.n	8004136 <fusion_V+0x66>
		Ts = 0.0008f;
 8004132:	4bbe      	ldr	r3, [pc, #760]	@ (800442c <fusion_V+0x35c>)
 8004134:	667b      	str	r3, [r7, #100]	@ 0x64
	dtx = Ts;
 8004136:	4abe      	ldr	r2, [pc, #760]	@ (8004430 <fusion_V+0x360>)
 8004138:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800413a:	6013      	str	r3, [r2, #0]
	//Calculate SMC-----------------------------------------------------------------------------------------------------------
	//Dynamic equations
	float an = (3 * (pole_pairs * pole_pairs) * flux_linkage) / (2 * inertia);
 800413c:	4bbd      	ldr	r3, [pc, #756]	@ (8004434 <fusion_V+0x364>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4abc      	ldr	r2, [pc, #752]	@ (8004434 <fusion_V+0x364>)
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	fb03 f202 	mul.w	r2, r3, r2
 8004148:	4613      	mov	r3, r2
 800414a:	005b      	lsls	r3, r3, #1
 800414c:	4413      	add	r3, r2
 800414e:	ee07 3a90 	vmov	s15, r3
 8004152:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004156:	4bb8      	ldr	r3, [pc, #736]	@ (8004438 <fusion_V+0x368>)
 8004158:	edd3 7a00 	vldr	s15, [r3]
 800415c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004160:	4bb6      	ldr	r3, [pc, #728]	@ (800443c <fusion_V+0x36c>)
 8004162:	edd3 7a00 	vldr	s15, [r3]
 8004166:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800416a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800416e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
//	float bn = pole_pairs / inertia ;
	float cn = damping / inertia;
 8004172:	4bb3      	ldr	r3, [pc, #716]	@ (8004440 <fusion_V+0x370>)
 8004174:	edd3 6a00 	vldr	s13, [r3]
 8004178:	4bb0      	ldr	r3, [pc, #704]	@ (800443c <fusion_V+0x36c>)
 800417a:	ed93 7a00 	vldr	s14, [r3]
 800417e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004182:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

	//Calculate PID-----------------------------------------------------------------------------------------------------------

	//output mode---------------------------------------------------------------------------------------------------------------

	if ((1.5 * (fabs(shaft_angle)) < (fabs(Command_setpoint)))) {
 8004186:	4baf      	ldr	r3, [pc, #700]	@ (8004444 <fusion_V+0x374>)
 8004188:	edd3 7a00 	vldr	s15, [r3]
 800418c:	eef0 7ae7 	vabs.f32	s15, s15
 8004190:	ee17 0a90 	vmov	r0, s15
 8004194:	f7fc f9a4 	bl	80004e0 <__aeabi_f2d>
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	4baa      	ldr	r3, [pc, #680]	@ (8004448 <fusion_V+0x378>)
 800419e:	f7fc f9f7 	bl	8000590 <__aeabi_dmul>
 80041a2:	4602      	mov	r2, r0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4614      	mov	r4, r2
 80041a8:	461d      	mov	r5, r3
 80041aa:	4ba8      	ldr	r3, [pc, #672]	@ (800444c <fusion_V+0x37c>)
 80041ac:	edd3 7a00 	vldr	s15, [r3]
 80041b0:	eef0 7ae7 	vabs.f32	s15, s15
 80041b4:	ee17 0a90 	vmov	r0, s15
 80041b8:	f7fc f992 	bl	80004e0 <__aeabi_f2d>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4620      	mov	r0, r4
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7fc fc56 	bl	8000a74 <__aeabi_dcmplt>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	f000 81a6 	beq.w	800451c <fusion_V+0x44c>
		float sliding_surface = fusion.error ;
 80041d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041d4:	647b      	str	r3, [r7, #68]	@ 0x44
		float sliding_surface_est = fusion.error_est ;
 80041d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041da:	643b      	str	r3, [r7, #64]	@ 0x40
		//ESDMO
		//input_SM_observer = neta * sign(error_estimated)
		float u_smo = fusion.neta * _sign(sliding_surface_est);
 80041dc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80041e0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ec:	d502      	bpl.n	80041f4 <fusion_V+0x124>
 80041ee:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 80041f2:	e00b      	b.n	800420c <fusion_V+0x13c>
 80041f4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004200:	dd02      	ble.n	8004208 <fusion_V+0x138>
 8004202:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004206:	e001      	b.n	800420c <fusion_V+0x13c>
 8004208:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800446c <fusion_V+0x39c>
 800420c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004210:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// Dif velocity estimated
		float dw_est = (an * current.q) - (cn * fusion.w_est_prev) + (fusion.r_est_prev) + u_smo;
 8004214:	4b8e      	ldr	r3, [pc, #568]	@ (8004450 <fusion_V+0x380>)
 8004216:	ed93 7a01 	vldr	s14, [r3, #4]
 800421a:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800421e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004222:	edd7 6a2b 	vldr	s13, [r7, #172]	@ 0xac
 8004226:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800422a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800422e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004232:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8004236:	ee77 7a27 	vadd.f32	s15, s14, s15
 800423a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800423e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004242:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		// Dif error estimated
		float dr_est = fusion.g * u_smo;
 8004246:	edd7 7a36 	vldr	s15, [r7, #216]	@ 0xd8
 800424a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800424e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004252:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		// Tustin transform of the integral part
		// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
		float w_est = fusion.w_est_prev + Ts * 0.5f * (dw_est + fusion.dw_est_prev);
 8004256:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 800425a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800425e:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004262:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004266:	ed97 6a2e 	vldr	s12, [r7, #184]	@ 0xb8
 800426a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800426e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004272:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800427a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		float r_est = fusion.r_est_prev + Ts * 0.5f * (dr_est + fusion.dr_est_prev);
 800427e:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8004282:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004286:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800428a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800428e:	ed97 6a2d 	vldr	s12, [r7, #180]	@ 0xb4
 8004292:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004296:	ee76 7a27 	vadd.f32	s15, s12, s15
 800429a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800429e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80042a2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

		LPF_w_est.x = w_est;
 80042a6:	4a6b      	ldr	r2, [pc, #428]	@ (8004454 <fusion_V+0x384>)
 80042a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042aa:	6013      	str	r3, [r2, #0]
		LPF_w_est = LowPassFilter(LPF_w_est);
 80042ac:	4e69      	ldr	r6, [pc, #420]	@ (8004454 <fusion_V+0x384>)
 80042ae:	463c      	mov	r4, r7
 80042b0:	4b68      	ldr	r3, [pc, #416]	@ (8004454 <fusion_V+0x384>)
 80042b2:	466d      	mov	r5, sp
 80042b4:	f103 020c 	add.w	r2, r3, #12
 80042b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80042c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042c2:	4620      	mov	r0, r4
 80042c4:	f7ff fab2 	bl	800382c <LowPassFilter>
 80042c8:	4635      	mov	r5, r6
 80042ca:	463c      	mov	r4, r7
 80042cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	602b      	str	r3, [r5, #0]
		w_est = LPF_w_est.y_prev;  // filter values
 80042d4:	4b5f      	ldr	r3, [pc, #380]	@ (8004454 <fusion_V+0x384>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	633b      	str	r3, [r7, #48]	@ 0x30
		LPF_r_est.x = r_est;
 80042da:	4a5f      	ldr	r2, [pc, #380]	@ (8004458 <fusion_V+0x388>)
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	6013      	str	r3, [r2, #0]
		LPF_r_est = LowPassFilter(LPF_r_est);
 80042e0:	4e5d      	ldr	r6, [pc, #372]	@ (8004458 <fusion_V+0x388>)
 80042e2:	463c      	mov	r4, r7
 80042e4:	4b5c      	ldr	r3, [pc, #368]	@ (8004458 <fusion_V+0x388>)
 80042e6:	466d      	mov	r5, sp
 80042e8:	f103 020c 	add.w	r2, r3, #12
 80042ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80042f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80042f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f6:	4620      	mov	r0, r4
 80042f8:	f7ff fa98 	bl	800382c <LowPassFilter>
 80042fc:	4635      	mov	r5, r6
 80042fe:	463c      	mov	r4, r7
 8004300:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004302:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	602b      	str	r3, [r5, #0]
		r_est = LPF_r_est.y_prev;  // filter values
 8004308:	4b53      	ldr	r3, [pc, #332]	@ (8004458 <fusion_V+0x388>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		float eq_s = fusion.k/ (fusion.ep + (1 + 1 / (fabs(fusion.error)) - fusion.ep)* expf(-fusion.delta * fabs(sliding_surface)));
 800430e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc f8e4 	bl	80004e0 <__aeabi_f2d>
 8004318:	4604      	mov	r4, r0
 800431a:	460d      	mov	r5, r1
 800431c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc f8dd 	bl	80004e0 <__aeabi_f2d>
 8004326:	4680      	mov	r8, r0
 8004328:	4689      	mov	r9, r1
 800432a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800432e:	eef0 7ae7 	vabs.f32	s15, s15
 8004332:	ee17 0a90 	vmov	r0, s15
 8004336:	f7fc f8d3 	bl	80004e0 <__aeabi_f2d>
 800433a:	4602      	mov	r2, r0
 800433c:	460b      	mov	r3, r1
 800433e:	f04f 0000 	mov.w	r0, #0
 8004342:	4946      	ldr	r1, [pc, #280]	@ (800445c <fusion_V+0x38c>)
 8004344:	f7fc fa4e 	bl	80007e4 <__aeabi_ddiv>
 8004348:	4602      	mov	r2, r0
 800434a:	460b      	mov	r3, r1
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	4b41      	ldr	r3, [pc, #260]	@ (800445c <fusion_V+0x38c>)
 8004356:	f7fb ff65 	bl	8000224 <__adddf3>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4692      	mov	sl, r2
 8004360:	469b      	mov	fp, r3
 8004362:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8004366:	4618      	mov	r0, r3
 8004368:	f7fc f8ba 	bl	80004e0 <__aeabi_f2d>
 800436c:	4602      	mov	r2, r0
 800436e:	460b      	mov	r3, r1
 8004370:	4650      	mov	r0, sl
 8004372:	4659      	mov	r1, fp
 8004374:	f7fb ff54 	bl	8000220 <__aeabi_dsub>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4692      	mov	sl, r2
 800437e:	469b      	mov	fp, r3
 8004380:	edd7 7a35 	vldr	s15, [r7, #212]	@ 0xd4
 8004384:	eeb1 7a67 	vneg.f32	s14, s15
 8004388:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800438c:	eef0 7ae7 	vabs.f32	s15, s15
 8004390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004394:	eeb0 0a67 	vmov.f32	s0, s15
 8004398:	f006 fdc2 	bl	800af20 <expf>
 800439c:	ee10 3a10 	vmov	r3, s0
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fc f89d 	bl	80004e0 <__aeabi_f2d>
 80043a6:	4602      	mov	r2, r0
 80043a8:	460b      	mov	r3, r1
 80043aa:	4650      	mov	r0, sl
 80043ac:	4659      	mov	r1, fp
 80043ae:	f7fc f8ef 	bl	8000590 <__aeabi_dmul>
 80043b2:	4602      	mov	r2, r0
 80043b4:	460b      	mov	r3, r1
 80043b6:	4640      	mov	r0, r8
 80043b8:	4649      	mov	r1, r9
 80043ba:	f7fb ff33 	bl	8000224 <__adddf3>
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4620      	mov	r0, r4
 80043c4:	4629      	mov	r1, r5
 80043c6:	f7fc fa0d 	bl	80007e4 <__aeabi_ddiv>
 80043ca:	4602      	mov	r2, r0
 80043cc:	460b      	mov	r3, r1
 80043ce:	4610      	mov	r0, r2
 80043d0:	4619      	mov	r1, r3
 80043d2:	f7fc fbb5 	bl	8000b40 <__aeabi_d2f>
 80043d6:	4603      	mov	r3, r0
 80043d8:	62bb      	str	r3, [r7, #40]	@ 0x28
		float output_SMC = (1 / an)* ((cn * shaft_velocity) - r_est+ (eq_s * _sign(sliding_surface)));
 80043da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80043de:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 80043e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <fusion_V+0x390>)
 80043e8:	edd3 6a00 	vldr	s13, [r3]
 80043ec:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80043f0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80043f4:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80043f8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80043fc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004400:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004408:	d502      	bpl.n	8004410 <fusion_V+0x340>
 800440a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 800440e:	e031      	b.n	8004474 <fusion_V+0x3a4>
 8004410:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004414:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800441c:	dd28      	ble.n	8004470 <fusion_V+0x3a0>
 800441e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004422:	e027      	b.n	8004474 <fusion_V+0x3a4>
 8004424:	f3af 8000 	nop.w
 8004428:	3a51b717 	.word	0x3a51b717
 800442c:	3a51b717 	.word	0x3a51b717
 8004430:	20000ce4 	.word	0x20000ce4
 8004434:	20000c5c 	.word	0x20000c5c
 8004438:	20000c54 	.word	0x20000c54
 800443c:	20000c50 	.word	0x20000c50
 8004440:	20000c58 	.word	0x20000c58
 8004444:	20000908 	.word	0x20000908
 8004448:	3ff80000 	.word	0x3ff80000
 800444c:	20000cf8 	.word	0x20000cf8
 8004450:	20000928 	.word	0x20000928
 8004454:	200009a8 	.word	0x200009a8
 8004458:	200009bc 	.word	0x200009bc
 800445c:	3ff00000 	.word	0x3ff00000
 8004460:	20000910 	.word	0x20000910
 8004464:	a0b5ed8d 	.word	0xa0b5ed8d
 8004468:	3eb0c6f7 	.word	0x3eb0c6f7
 800446c:	00000000 	.word	0x00000000
 8004470:	ed5f 7a02 	vldr	s15, [pc, #-8]	@ 800446c <fusion_V+0x39c>
 8004474:	ed97 6a0a 	vldr	s12, [r7, #40]	@ 0x28
 8004478:	ee67 7a86 	vmul.f32	s15, s15, s12
 800447c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004484:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		LPF_SMC_out.x = output_SMC;
 8004488:	4a82      	ldr	r2, [pc, #520]	@ (8004694 <fusion_V+0x5c4>)
 800448a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800448c:	6013      	str	r3, [r2, #0]
		LPF_SMC_out = LowPassFilter(LPF_SMC_out);
 800448e:	4e81      	ldr	r6, [pc, #516]	@ (8004694 <fusion_V+0x5c4>)
 8004490:	463c      	mov	r4, r7
 8004492:	4b80      	ldr	r3, [pc, #512]	@ (8004694 <fusion_V+0x5c4>)
 8004494:	466d      	mov	r5, sp
 8004496:	f103 020c 	add.w	r2, r3, #12
 800449a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800449e:	e885 0003 	stmia.w	r5, {r0, r1}
 80044a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80044a4:	4620      	mov	r0, r4
 80044a6:	f7ff f9c1 	bl	800382c <LowPassFilter>
 80044aa:	4635      	mov	r5, r6
 80044ac:	463c      	mov	r4, r7
 80044ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80044b2:	6823      	ldr	r3, [r4, #0]
 80044b4:	602b      	str	r3, [r5, #0]
		output_SMC = LPF_SMC_out.y_prev;
 80044b6:	4b77      	ldr	r3, [pc, #476]	@ (8004694 <fusion_V+0x5c4>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
		output_SMC = _constrain(output_SMC, -fusion.limit, fusion.limit);
 80044bc:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80044c0:	eef1 7a67 	vneg.f32	s15, s15
 80044c4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80044c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	d504      	bpl.n	80044dc <fusion_V+0x40c>
 80044d2:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80044d6:	eef1 7a67 	vneg.f32	s15, s15
 80044da:	e00d      	b.n	80044f8 <fusion_V+0x428>
 80044dc:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80044e0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80044e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ec:	dd02      	ble.n	80044f4 <fusion_V+0x424>
 80044ee:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 80044f2:	e001      	b.n	80044f8 <fusion_V+0x428>
 80044f4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80044f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
		fusion.output_prev = output_SMC;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		fusion.r_est_prev = r_est ;
 8004502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004504:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
		fusion.dr_est_prev = dr_est ;
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
		fusion.w_est_prev = w_est ;
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
		fusion.dw_est_prev = dw_est ;
 8004514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004516:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800451a:	e0a1      	b.n	8004660 <fusion_V+0x590>
	}
	else {
		float proportional = fusion.P * fusion.error;
 800451c:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 8004520:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 8004524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004528:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
	// Tustin transform of the integral part
	// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
		float integral = fusion.integral_prev
 800452c:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
				+ fusion.I * Ts * 0.5f * (fusion.error + fusion.error_prev);
 8004530:	edd7 6a39 	vldr	s13, [r7, #228]	@ 0xe4
 8004534:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8004538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800453c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8004540:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004544:	ed97 6a25 	vldr	s12, [r7, #148]	@ 0x94
 8004548:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800454c:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004550:	ee66 7aa7 	vmul.f32	s15, s13, s15
		float integral = fusion.integral_prev
 8004554:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004558:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
		if ((state_enable == 0) || (integral > 23.5) || (integral < -23.5)) {
 800455c:	4b4e      	ldr	r3, [pc, #312]	@ (8004698 <fusion_V+0x5c8>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	f083 0301 	eor.w	r3, r3, #1
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d111      	bne.n	800458e <fusion_V+0x4be>
 800456a:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 800456e:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 800469c <fusion_V+0x5cc>
 8004572:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800457a:	dc08      	bgt.n	800458e <fusion_V+0x4be>
 800457c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8004580:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80046a0 <fusion_V+0x5d0>
 8004584:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458c:	d502      	bpl.n	8004594 <fusion_V+0x4c4>
			integral = 0.0f;
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	663b      	str	r3, [r7, #96]	@ 0x60
		}
	// antiwindup - limit the output
		integral = _constrain(integral, -fusion.anti_windup, fusion.anti_windup);
 8004594:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 8004598:	eef1 7a67 	vneg.f32	s15, s15
 800459c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80045a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a8:	d504      	bpl.n	80045b4 <fusion_V+0x4e4>
 80045aa:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80045ae:	eef1 7a67 	vneg.f32	s15, s15
 80045b2:	e00d      	b.n	80045d0 <fusion_V+0x500>
 80045b4:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80045b8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80045bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c4:	dd02      	ble.n	80045cc <fusion_V+0x4fc>
 80045c6:	edd7 7a3d 	vldr	s15, [r7, #244]	@ 0xf4
 80045ca:	e001      	b.n	80045d0 <fusion_V+0x500>
 80045cc:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80045d0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
	// Discrete derivation
	// u_dk = D(ek - ek_1)/Ts
		float derivative = fusion.D * (fusion.error - fusion.error_prev) / Ts;
 80045d4:	ed97 7a3a 	vldr	s14, [r7, #232]	@ 0xe8
 80045d8:	edd7 6a25 	vldr	s13, [r7, #148]	@ 0x94
 80045dc:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80045e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80045e4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80045e8:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80045ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045f0:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
		float output_PID = proportional + integral + derivative;
 80045f4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80045f8:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80045fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004600:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8004604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004608:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
	// antiwindup - limit the output variable
		output_PID = _constrain(output_PID, -fusion.limit, fusion.limit);
 800460c:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004610:	eef1 7a67 	vneg.f32	s15, s15
 8004614:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004618:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800461c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004620:	d504      	bpl.n	800462c <fusion_V+0x55c>
 8004622:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004626:	eef1 7a67 	vneg.f32	s15, s15
 800462a:	e00d      	b.n	8004648 <fusion_V+0x578>
 800462c:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004630:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8004634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463c:	dd02      	ble.n	8004644 <fusion_V+0x574>
 800463e:	edd7 7a3e 	vldr	s15, [r7, #248]	@ 0xf8
 8004642:	e001      	b.n	8004648 <fusion_V+0x578>
 8004644:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8004648:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
		fusion.output_prev = output_PID;
 800464c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800464e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
		fusion.error_prev = fusion.error ;
 8004652:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004656:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
		fusion.integral_prev = integral;
 800465a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800465c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
	}

	fusion.error_est_prev = fusion.error_est ;
 8004660:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004664:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

	fusion.timestamp_prev = timestamp_now;
 8004668:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800466a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
	fusion.dtx = dtx ;
 800466e:	4b0d      	ldr	r3, [pc, #52]	@ (80046a4 <fusion_V+0x5d4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
	return fusion;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	4618      	mov	r0, r3
 800467a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800467e:	2274      	movs	r2, #116	@ 0x74
 8004680:	4619      	mov	r1, r3
 8004682:	f006 fba1 	bl	800adc8 <memcpy>
}
 8004686:	69f8      	ldr	r0, [r7, #28]
 8004688:	376c      	adds	r7, #108	@ 0x6c
 800468a:	46bd      	mov	sp, r7
 800468c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004690:	b004      	add	sp, #16
 8004692:	4770      	bx	lr
 8004694:	200009d0 	.word	0x200009d0
 8004698:	20000d28 	.word	0x20000d28
 800469c:	41bc0000 	.word	0x41bc0000
 80046a0:	c1bc0000 	.word	0xc1bc0000
 80046a4:	20000ce4 	.word	0x20000ce4

080046a8 <fusion_angle>:

void fusion_angle(float new_target) {
 80046a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80046aa:	b0cb      	sub	sp, #300	@ 0x12c
 80046ac:	af1a      	add	r7, sp, #104	@ 0x68
 80046ae:	ed87 0a2f 	vstr	s0, [r7, #188]	@ 0xbc

	shaft_angle = shaftAngle();
 80046b2:	f7fe f841 	bl	8002738 <shaftAngle>
 80046b6:	eef0 7a40 	vmov.f32	s15, s0
 80046ba:	4b5c      	ldr	r3, [pc, #368]	@ (800482c <fusion_angle+0x184>)
 80046bc:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 80046c0:	f7fe f874 	bl	80027ac <shaftVelocity>
 80046c4:	eef0 7a40 	vmov.f32	s15, s0
 80046c8:	4b59      	ldr	r3, [pc, #356]	@ (8004830 <fusion_angle+0x188>)
 80046ca:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 80046ce:	f7fe f8d1 	bl	8002874 <electricalAngle>
 80046d2:	eef0 7a40 	vmov.f32	s15, s0
 80046d6:	4b57      	ldr	r3, [pc, #348]	@ (8004834 <fusion_angle+0x18c>)
 80046d8:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 80046dc:	4b55      	ldr	r3, [pc, #340]	@ (8004834 <fusion_angle+0x18c>)
 80046de:	edd3 7a00 	vldr	s15, [r3]
 80046e2:	eeb0 0a67 	vmov.f32	s0, s15
 80046e6:	f7fd fa8b 	bl	8001c00 <getFOCCurrents>
 80046ea:	eeb0 7a40 	vmov.f32	s14, s0
 80046ee:	eef0 7a60 	vmov.f32	s15, s1
 80046f2:	4b51      	ldr	r3, [pc, #324]	@ (8004838 <fusion_angle+0x190>)
 80046f4:	ed83 7a00 	vstr	s14, [r3]
 80046f8:	edc3 7a01 	vstr	s15, [r3, #4]

	//PID - SMC -----------------------------------------------------------------------
	if (_isset(new_target))
 80046fc:	edd7 7a2f 	vldr	s15, [r7, #188]	@ 0xbc
 8004700:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 800483c <fusion_angle+0x194>
 8004704:	eef4 7a47 	vcmp.f32	s15, s14
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	d003      	beq.n	8004716 <fusion_angle+0x6e>
		target = new_target;
 800470e:	4a4c      	ldr	r2, [pc, #304]	@ (8004840 <fusion_angle+0x198>)
 8004710:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004714:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 8004716:	4b4a      	ldr	r3, [pc, #296]	@ (8004840 <fusion_angle+0x198>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a4a      	ldr	r2, [pc, #296]	@ (8004844 <fusion_angle+0x19c>)
 800471c:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 800471e:	4b49      	ldr	r3, [pc, #292]	@ (8004844 <fusion_angle+0x19c>)
 8004720:	ed93 7a00 	vldr	s14, [r3]
 8004724:	4b41      	ldr	r3, [pc, #260]	@ (800482c <fusion_angle+0x184>)
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800472e:	4b46      	ldr	r3, [pc, #280]	@ (8004848 <fusion_angle+0x1a0>)
 8004730:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 8004734:	4b44      	ldr	r3, [pc, #272]	@ (8004848 <fusion_angle+0x1a0>)
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	f107 0c80 	add.w	ip, r7, #128	@ 0x80
 800473c:	4e42      	ldr	r6, [pc, #264]	@ (8004848 <fusion_angle+0x1a0>)
 800473e:	466d      	mov	r5, sp
 8004740:	f106 0408 	add.w	r4, r6, #8
 8004744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004746:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004748:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800474a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800474c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004750:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004754:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004758:	4660      	mov	r0, ip
 800475a:	f7ff f8dd 	bl	8003918 <PID>
 800475e:	687d      	ldr	r5, [r7, #4]
 8004760:	f107 0480 	add.w	r4, r7, #128	@ 0x80
 8004764:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004766:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004768:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800476c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800476e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004770:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004774:	e885 0003 	stmia.w	r5, {r0, r1}

	shaft_angle = shaftAngle();
 8004778:	f7fd ffde 	bl	8002738 <shaftAngle>
 800477c:	eef0 7a40 	vmov.f32	s15, s0
 8004780:	4b2a      	ldr	r3, [pc, #168]	@ (800482c <fusion_angle+0x184>)
 8004782:	edc3 7a00 	vstr	s15, [r3]
	shaft_velocity = shaftVelocity();
 8004786:	f7fe f811 	bl	80027ac <shaftVelocity>
 800478a:	eef0 7a40 	vmov.f32	s15, s0
 800478e:	4b28      	ldr	r3, [pc, #160]	@ (8004830 <fusion_angle+0x188>)
 8004790:	edc3 7a00 	vstr	s15, [r3]
	electrical_angle = electricalAngle();
 8004794:	f7fe f86e 	bl	8002874 <electricalAngle>
 8004798:	eef0 7a40 	vmov.f32	s15, s0
 800479c:	4b25      	ldr	r3, [pc, #148]	@ (8004834 <fusion_angle+0x18c>)
 800479e:	edc3 7a00 	vstr	s15, [r3]
	current = getFOCCurrents(electrical_angle);
 80047a2:	4b24      	ldr	r3, [pc, #144]	@ (8004834 <fusion_angle+0x18c>)
 80047a4:	edd3 7a00 	vldr	s15, [r3]
 80047a8:	eeb0 0a67 	vmov.f32	s0, s15
 80047ac:	f7fd fa28 	bl	8001c00 <getFOCCurrents>
 80047b0:	eeb0 7a40 	vmov.f32	s14, s0
 80047b4:	eef0 7a60 	vmov.f32	s15, s1
 80047b8:	4b1f      	ldr	r3, [pc, #124]	@ (8004838 <fusion_angle+0x190>)
 80047ba:	ed83 7a00 	vstr	s14, [r3]
 80047be:	edc3 7a01 	vstr	s15, [r3, #4]

	fusion_vel.error = angle.output_prev - shaft_velocity;
 80047c2:	4b21      	ldr	r3, [pc, #132]	@ (8004848 <fusion_angle+0x1a0>)
 80047c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80047c8:	4b19      	ldr	r3, [pc, #100]	@ (8004830 <fusion_angle+0x188>)
 80047ca:	edd3 7a00 	vldr	s15, [r3]
 80047ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047d2:	4b1e      	ldr	r3, [pc, #120]	@ (800484c <fusion_angle+0x1a4>)
 80047d4:	edc3 7a00 	vstr	s15, [r3]
	fusion_vel.error_est = fusion_vel.w_est_prev - shaft_velocity;
 80047d8:	4b1c      	ldr	r3, [pc, #112]	@ (800484c <fusion_angle+0x1a4>)
 80047da:	ed93 7a06 	vldr	s14, [r3, #24]
 80047de:	4b14      	ldr	r3, [pc, #80]	@ (8004830 <fusion_angle+0x188>)
 80047e0:	edd3 7a00 	vldr	s15, [r3]
 80047e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e8:	4b18      	ldr	r3, [pc, #96]	@ (800484c <fusion_angle+0x1a4>)
 80047ea:	edc3 7a02 	vstr	s15, [r3, #8]
	fusion_vel = fusion_V(fusion_vel);
 80047ee:	4e17      	ldr	r6, [pc, #92]	@ (800484c <fusion_angle+0x1a4>)
 80047f0:	f107 0508 	add.w	r5, r7, #8
 80047f4:	4c15      	ldr	r4, [pc, #84]	@ (800484c <fusion_angle+0x1a4>)
 80047f6:	4668      	mov	r0, sp
 80047f8:	f104 030c 	add.w	r3, r4, #12
 80047fc:	2268      	movs	r2, #104	@ 0x68
 80047fe:	4619      	mov	r1, r3
 8004800:	f006 fae2 	bl	800adc8 <memcpy>
 8004804:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8004808:	4628      	mov	r0, r5
 800480a:	f7ff fc61 	bl	80040d0 <fusion_V>
 800480e:	4630      	mov	r0, r6
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	2274      	movs	r2, #116	@ 0x74
 8004816:	4619      	mov	r1, r3
 8004818:	f006 fad6 	bl	800adc8 <memcpy>
	current_sp = fusion_vel.output_prev;
 800481c:	4b0b      	ldr	r3, [pc, #44]	@ (800484c <fusion_angle+0x1a4>)
 800481e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004820:	4a0b      	ldr	r2, [pc, #44]	@ (8004850 <fusion_angle+0x1a8>)
 8004822:	6013      	str	r3, [r2, #0]
}
 8004824:	bf00      	nop
 8004826:	37c4      	adds	r7, #196	@ 0xc4
 8004828:	46bd      	mov	sp, r7
 800482a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800482c:	20000908 	.word	0x20000908
 8004830:	20000910 	.word	0x20000910
 8004834:	2000090c 	.word	0x2000090c
 8004838:	20000928 	.word	0x20000928
 800483c:	c640e400 	.word	0xc640e400
 8004840:	20000904 	.word	0x20000904
 8004844:	2000091c 	.word	0x2000091c
 8004848:	20000a90 	.word	0x20000a90
 800484c:	20000bc8 	.word	0x20000bc8
 8004850:	20000914 	.word	0x20000914

08004854 <move_angle>:
//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;

}

void move_angle(float new_target) {
 8004854:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004856:	b09f      	sub	sp, #124	@ 0x7c
 8004858:	af0c      	add	r7, sp, #48	@ 0x30
 800485a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
// get angular velocity
	shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 800485e:	f7fd ffa5 	bl	80027ac <shaftVelocity>
 8004862:	eef0 7a40 	vmov.f32	s15, s0
 8004866:	4b3c      	ldr	r3, [pc, #240]	@ (8004958 <move_angle+0x104>)
 8004868:	edc3 7a00 	vstr	s15, [r3]

// downsampling (optional)
// if(motion_cnt++ < motion_downsample) return;
// motion_cnt = 0;
// set internal target variable
	if (_isset(new_target))
 800486c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004870:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800495c <move_angle+0x108>
 8004874:	eef4 7a47 	vcmp.f32	s15, s14
 8004878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487c:	d002      	beq.n	8004884 <move_angle+0x30>
		target = new_target;
 800487e:	4a38      	ldr	r2, [pc, #224]	@ (8004960 <move_angle+0x10c>)
 8004880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004882:	6013      	str	r3, [r2, #0]

// angle set point
	shaft_angle_sp = target;
 8004884:	4b36      	ldr	r3, [pc, #216]	@ (8004960 <move_angle+0x10c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a36      	ldr	r2, [pc, #216]	@ (8004964 <move_angle+0x110>)
 800488a:	6013      	str	r3, [r2, #0]
// calculate velocity set point
	angle.error = shaft_angle_sp - shaft_angle;
 800488c:	4b35      	ldr	r3, [pc, #212]	@ (8004964 <move_angle+0x110>)
 800488e:	ed93 7a00 	vldr	s14, [r3]
 8004892:	4b35      	ldr	r3, [pc, #212]	@ (8004968 <move_angle+0x114>)
 8004894:	edd3 7a00 	vldr	s15, [r3]
 8004898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800489c:	4b33      	ldr	r3, [pc, #204]	@ (800496c <move_angle+0x118>)
 800489e:	edc3 7a00 	vstr	s15, [r3]
	angle = PID(angle);
 80048a2:	4b32      	ldr	r3, [pc, #200]	@ (800496c <move_angle+0x118>)
 80048a4:	607b      	str	r3, [r7, #4]
 80048a6:	f107 0c08 	add.w	ip, r7, #8
 80048aa:	4e30      	ldr	r6, [pc, #192]	@ (800496c <move_angle+0x118>)
 80048ac:	466d      	mov	r5, sp
 80048ae:	f106 0408 	add.w	r4, r6, #8
 80048b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80048be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80048c2:	e896 000c 	ldmia.w	r6, {r2, r3}
 80048c6:	4660      	mov	r0, ip
 80048c8:	f7ff f826 	bl	8003918 <PID>
 80048cc:	687d      	ldr	r5, [r7, #4]
 80048ce:	f107 0408 	add.w	r4, r7, #8
 80048d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80048dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80048de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048e2:	e885 0003 	stmia.w	r5, {r0, r1}
	shaft_velocity_sp = angle.output_prev;
 80048e6:	4b21      	ldr	r3, [pc, #132]	@ (800496c <move_angle+0x118>)
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	4a21      	ldr	r2, [pc, #132]	@ (8004970 <move_angle+0x11c>)
 80048ec:	6013      	str	r3, [r2, #0]
// calculate the torque command
	velocity.error = shaft_velocity_sp - shaft_velocity;
 80048ee:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <move_angle+0x11c>)
 80048f0:	ed93 7a00 	vldr	s14, [r3]
 80048f4:	4b18      	ldr	r3, [pc, #96]	@ (8004958 <move_angle+0x104>)
 80048f6:	edd3 7a00 	vldr	s15, [r3]
 80048fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004974 <move_angle+0x120>)
 8004900:	edc3 7a00 	vstr	s15, [r3]
	velocity = PID(velocity);
 8004904:	4b1b      	ldr	r3, [pc, #108]	@ (8004974 <move_angle+0x120>)
 8004906:	607b      	str	r3, [r7, #4]
 8004908:	f107 0c08 	add.w	ip, r7, #8
 800490c:	4e19      	ldr	r6, [pc, #100]	@ (8004974 <move_angle+0x120>)
 800490e:	466d      	mov	r5, sp
 8004910:	f106 0408 	add.w	r4, r6, #8
 8004914:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004916:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004918:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800491a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800491c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004920:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8004924:	e896 000c 	ldmia.w	r6, {r2, r3}
 8004928:	4660      	mov	r0, ip
 800492a:	f7fe fff5 	bl	8003918 <PID>
 800492e:	687d      	ldr	r5, [r7, #4]
 8004930:	f107 0408 	add.w	r4, r7, #8
 8004934:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004938:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800493c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800493e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004940:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004944:	e885 0003 	stmia.w	r5, {r0, r1}
	current_sp = velocity.output_prev;
 8004948:	4b0a      	ldr	r3, [pc, #40]	@ (8004974 <move_angle+0x120>)
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	4a0a      	ldr	r2, [pc, #40]	@ (8004978 <move_angle+0x124>)
 800494e:	6013      	str	r3, [r2, #0]

//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;
}
 8004950:	bf00      	nop
 8004952:	374c      	adds	r7, #76	@ 0x4c
 8004954:	46bd      	mov	sp, r7
 8004956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004958:	20000910 	.word	0x20000910
 800495c:	c640e400 	.word	0xc640e400
 8004960:	20000904 	.word	0x20000904
 8004964:	2000091c 	.word	0x2000091c
 8004968:	20000908 	.word	0x20000908
 800496c:	20000a90 	.word	0x20000a90
 8004970:	20000918 	.word	0x20000918
 8004974:	20000a58 	.word	0x20000a58
 8004978:	20000914 	.word	0x20000914
 800497c:	00000000 	.word	0x00000000

08004980 <angleOpenloop>:
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float angleOpenloop(float target_angle) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b086      	sub	sp, #24
 8004984:	af00      	add	r7, sp, #0
 8004986:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long now_us = micros();
 800498a:	f7fc ffe9 	bl	8001960 <micros>
 800498e:	6138      	str	r0, [r7, #16]
// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8004990:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <angleOpenloop+0x178>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1a9b      	subs	r3, r3, r2
 800499a:	4618      	mov	r0, r3
 800499c:	f7fb fd7e 	bl	800049c <__aeabi_ui2d>
 80049a0:	a353      	add	r3, pc, #332	@ (adr r3, 8004af0 <angleOpenloop+0x170>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	f7fb fdf3 	bl	8000590 <__aeabi_dmul>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4610      	mov	r0, r2
 80049b0:	4619      	mov	r1, r3
 80049b2:	f7fc f8c5 	bl	8000b40 <__aeabi_d2f>
 80049b6:	4603      	mov	r3, r0
 80049b8:	617b      	str	r3, [r7, #20]
// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 80049ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80049be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80049c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049c6:	d908      	bls.n	80049da <angleOpenloop+0x5a>
 80049c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80049cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80049d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d8:	dd01      	ble.n	80049de <angleOpenloop+0x5e>
		Ts = 1e-3;
 80049da:	4b48      	ldr	r3, [pc, #288]	@ (8004afc <angleOpenloop+0x17c>)
 80049dc:	617b      	str	r3, [r7, #20]

// calculate the necessary angle to move from current position towards target angle
// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts)) {
 80049de:	4b48      	ldr	r3, [pc, #288]	@ (8004b00 <angleOpenloop+0x180>)
 80049e0:	edd3 7a00 	vldr	s15, [r3]
 80049e4:	ed97 7a01 	vldr	s14, [r7, #4]
 80049e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049f0:	ee17 3a90 	vmov	r3, s15
 80049f4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80049f8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80049fc:	4b41      	ldr	r3, [pc, #260]	@ (8004b04 <angleOpenloop+0x184>)
 80049fe:	ed93 7a00 	vldr	s14, [r3]
 8004a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a0e:	ee17 3a90 	vmov	r3, s15
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	bfb8      	it	lt
 8004a16:	425b      	neglt	r3, r3
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	dd3f      	ble.n	8004a9c <angleOpenloop+0x11c>
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 8004a1c:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <angleOpenloop+0x180>)
 8004a1e:	edd3 7a00 	vldr	s15, [r3]
 8004a22:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d502      	bpl.n	8004a3a <angleOpenloop+0xba>
 8004a34:	f04f 32ff 	mov.w	r2, #4294967295
 8004a38:	e00f      	b.n	8004a5a <angleOpenloop+0xda>
 8004a3a:	4b31      	ldr	r3, [pc, #196]	@ (8004b00 <angleOpenloop+0x180>)
 8004a3c:	edd3 7a00 	vldr	s15, [r3]
 8004a40:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a50:	bfcc      	ite	gt
 8004a52:	2301      	movgt	r3, #1
 8004a54:	2300      	movle	r3, #0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <angleOpenloop+0x184>)
 8004a5c:	edd3 7a00 	vldr	s15, [r3]
 8004a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a64:	ee17 3a90 	vmov	r3, s15
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	bfb8      	it	lt
 8004a6c:	425b      	neglt	r3, r3
 8004a6e:	fb02 f303 	mul.w	r3, r2, r3
				* Ts;
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004a7a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a7e:	ee27 7a27 	vmul.f32	s14, s14, s15
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 8004a82:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <angleOpenloop+0x180>)
 8004a84:	edd3 7a00 	vldr	s15, [r3]
 8004a88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004b00 <angleOpenloop+0x180>)
 8004a8e:	edc3 7a00 	vstr	s15, [r3]
		shaft_velocity = velocity_limit;
 8004a92:	4b1c      	ldr	r3, [pc, #112]	@ (8004b04 <angleOpenloop+0x184>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1c      	ldr	r2, [pc, #112]	@ (8004b08 <angleOpenloop+0x188>)
 8004a98:	6013      	str	r3, [r2, #0]
 8004a9a:	e006      	b.n	8004aaa <angleOpenloop+0x12a>
	} else {
		shaft_angle = target_angle;
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <angleOpenloop+0x180>)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6013      	str	r3, [r2, #0]
		shaft_velocity = 0;
 8004aa2:	4b19      	ldr	r3, [pc, #100]	@ (8004b08 <angleOpenloop+0x188>)
 8004aa4:	f04f 0200 	mov.w	r2, #0
 8004aa8:	601a      	str	r2, [r3, #0]
	}

// use voltage limit or current limit
	float Uq = voltage_limit;
 8004aaa:	4b18      	ldr	r3, [pc, #96]	@ (8004b0c <angleOpenloop+0x18c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

// set the maximal allowed voltage (voltage_limit) with the necessary angle
	setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8004ab0:	4b13      	ldr	r3, [pc, #76]	@ (8004b00 <angleOpenloop+0x180>)
 8004ab2:	edd3 7a00 	vldr	s15, [r3]
 8004ab6:	4b16      	ldr	r3, [pc, #88]	@ (8004b10 <angleOpenloop+0x190>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac0:	f7fd fb0a 	bl	80020d8 <_electricalAngle>
 8004ac4:	eef0 7a40 	vmov.f32	s15, s0
 8004ac8:	eeb0 1a67 	vmov.f32	s2, s15
 8004acc:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8004b14 <angleOpenloop+0x194>
 8004ad0:	ed97 0a03 	vldr	s0, [r7, #12]
 8004ad4:	f7fd ff8c 	bl	80029f0 <setPhaseVoltage>

	open_loop_timestamp = now_us;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4a07      	ldr	r2, [pc, #28]	@ (8004af8 <angleOpenloop+0x178>)
 8004adc:	6013      	str	r3, [r2, #0]
	return Uq;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	ee07 3a90 	vmov	s15, r3
}
 8004ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ae8:	3718      	adds	r7, #24
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	a0b5ed8d 	.word	0xa0b5ed8d
 8004af4:	3eb0c6f7 	.word	0x3eb0c6f7
 8004af8:	20000ce0 	.word	0x20000ce0
 8004afc:	3a83126f 	.word	0x3a83126f
 8004b00:	20000908 	.word	0x20000908
 8004b04:	20000c68 	.word	0x20000c68
 8004b08:	20000910 	.word	0x20000910
 8004b0c:	20000c60 	.word	0x20000c60
 8004b10:	20000c5c 	.word	0x20000c5c
 8004b14:	00000000 	.word	0x00000000

08004b18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b1c:	b672      	cpsid	i
}
 8004b1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004b20:	bf00      	nop
 8004b22:	e7fd      	b.n	8004b20 <Error_Handler+0x8>

08004b24 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2e:	4a0e      	ldr	r2, [pc, #56]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b36:	4b0c      	ldr	r3, [pc, #48]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	607b      	str	r3, [r7, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b42:	4b09      	ldr	r3, [pc, #36]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4e:	4b06      	ldr	r3, [pc, #24]	@ (8004b68 <HAL_MspInit+0x44>)
 8004b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	603b      	str	r3, [r7, #0]
 8004b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004b5a:	f003 f9fb 	bl	8007f54 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	40021000 	.word	0x40021000

08004b6c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b0a0      	sub	sp, #128	@ 0x80
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b84:	f107 031c 	add.w	r3, r7, #28
 8004b88:	2250      	movs	r2, #80	@ 0x50
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f006 f8e9 	bl	800ad64 <memset>
  if(hadc->Instance==ADC1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b9a:	d169      	bne.n	8004c70 <HAL_ADC_MspInit+0x104>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004b9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ba0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ba2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004ba6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ba8:	f107 031c 	add.w	r3, r7, #28
 8004bac:	4618      	mov	r0, r3
 8004bae:	f003 fedd 	bl	800896c <HAL_RCCEx_PeriphCLKConfig>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d001      	beq.n	8004bbc <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004bb8:	f7ff ffae 	bl	8004b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004bbc:	4b65      	ldr	r3, [pc, #404]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	4a64      	ldr	r2, [pc, #400]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004bc4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004bc6:	4b63      	ldr	r3, [pc, #396]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d10b      	bne.n	8004be6 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004bce:	4b62      	ldr	r3, [pc, #392]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd2:	4a61      	ldr	r2, [pc, #388]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004bd4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bda:	4b5f      	ldr	r3, [pc, #380]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bea:	4a5b      	ldr	r2, [pc, #364]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bf2:	4b59      	ldr	r3, [pc, #356]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c02:	2303      	movs	r3, #3
 8004c04:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c06:	2300      	movs	r3, #0
 8004c08:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8004c0a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c0e:	4619      	mov	r1, r3
 8004c10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c14:	f002 ff60 	bl	8007ad8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004c18:	4b50      	ldr	r3, [pc, #320]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c1a:	4a51      	ldr	r2, [pc, #324]	@ (8004d60 <HAL_ADC_MspInit+0x1f4>)
 8004c1c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004c1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c20:	2205      	movs	r2, #5
 8004c22:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c24:	4b4d      	ldr	r3, [pc, #308]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c30:	4b4a      	ldr	r3, [pc, #296]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c32:	2280      	movs	r2, #128	@ 0x80
 8004c34:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c36:	4b49      	ldr	r3, [pc, #292]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c3c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c3e:	4b47      	ldr	r3, [pc, #284]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c44:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c46:	4b45      	ldr	r3, [pc, #276]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c48:	2220      	movs	r2, #32
 8004c4a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c4c:	4b43      	ldr	r3, [pc, #268]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c52:	4842      	ldr	r0, [pc, #264]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c54:	f002 f82e 	bl	8006cb4 <HAL_DMA_Init>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004c5e:	f7ff ff5b 	bl	8004b18 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a3d      	ldr	r2, [pc, #244]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c66:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c68:	4a3c      	ldr	r2, [pc, #240]	@ (8004d5c <HAL_ADC_MspInit+0x1f0>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004c6e:	e06d      	b.n	8004d4c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a3b      	ldr	r2, [pc, #236]	@ (8004d64 <HAL_ADC_MspInit+0x1f8>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d168      	bne.n	8004d4c <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c7e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c80:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004c84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c86:	f107 031c 	add.w	r3, r7, #28
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f003 fe6e 	bl	800896c <HAL_RCCEx_PeriphCLKConfig>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d001      	beq.n	8004c9a <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8004c96:	f7ff ff3f 	bl	8004b18 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004c9a:	4b2e      	ldr	r3, [pc, #184]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	4a2c      	ldr	r2, [pc, #176]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004ca2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d54 <HAL_ADC_MspInit+0x1e8>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b01      	cmp	r3, #1
 8004caa:	d10b      	bne.n	8004cc4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004cac:	4b2a      	ldr	r3, [pc, #168]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb0:	4a29      	ldr	r2, [pc, #164]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cb2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cb6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cb8:	4b27      	ldr	r3, [pc, #156]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc4:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	4a23      	ldr	r2, [pc, #140]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd0:	4b21      	ldr	r3, [pc, #132]	@ (8004d58 <HAL_ADC_MspInit+0x1ec>)
 8004cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cd4:	f003 0301 	and.w	r3, r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]
 8004cda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004cdc:	2302      	movs	r3, #2
 8004cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004ce8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004cec:	4619      	mov	r1, r3
 8004cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cf2:	f002 fef1 	bl	8007ad8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	@ (8004d6c <HAL_ADC_MspInit+0x200>)
 8004cfa:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004cfe:	2224      	movs	r2, #36	@ 0x24
 8004d00:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d02:	4b19      	ldr	r3, [pc, #100]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d08:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004d0e:	4b16      	ldr	r3, [pc, #88]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d10:	2280      	movs	r2, #128	@ 0x80
 8004d12:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d14:	4b14      	ldr	r3, [pc, #80]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d1c:	4b12      	ldr	r3, [pc, #72]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d22:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004d24:	4b10      	ldr	r3, [pc, #64]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d26:	2220      	movs	r2, #32
 8004d28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004d30:	480d      	ldr	r0, [pc, #52]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d32:	f001 ffbf 	bl	8006cb4 <HAL_DMA_Init>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8004d3c:	f7ff feec 	bl	8004b18 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a09      	ldr	r2, [pc, #36]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d44:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d46:	4a08      	ldr	r2, [pc, #32]	@ (8004d68 <HAL_ADC_MspInit+0x1fc>)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8004d4c:	bf00      	nop
 8004d4e:	3780      	adds	r7, #128	@ 0x80
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20000d30 	.word	0x20000d30
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	2000060c 	.word	0x2000060c
 8004d60:	40020008 	.word	0x40020008
 8004d64:	50000100 	.word	0x50000100
 8004d68:	2000066c 	.word	0x2000066c
 8004d6c:	4002001c 	.word	0x4002001c

08004d70 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8004da8 <HAL_CORDIC_MspInit+0x38>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d10b      	bne.n	8004d9a <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004d82:	4b0a      	ldr	r3, [pc, #40]	@ (8004dac <HAL_CORDIC_MspInit+0x3c>)
 8004d84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d86:	4a09      	ldr	r2, [pc, #36]	@ (8004dac <HAL_CORDIC_MspInit+0x3c>)
 8004d88:	f043 0308 	orr.w	r3, r3, #8
 8004d8c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d8e:	4b07      	ldr	r3, [pc, #28]	@ (8004dac <HAL_CORDIC_MspInit+0x3c>)
 8004d90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004d9a:	bf00      	nop
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	40020c00 	.word	0x40020c00
 8004dac:	40021000 	.word	0x40021000

08004db0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8004de8 <HAL_CRC_MspInit+0x38>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10b      	bne.n	8004dda <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dec <HAL_CRC_MspInit+0x3c>)
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dc6:	4a09      	ldr	r2, [pc, #36]	@ (8004dec <HAL_CRC_MspInit+0x3c>)
 8004dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004dcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8004dce:	4b07      	ldr	r3, [pc, #28]	@ (8004dec <HAL_CRC_MspInit+0x3c>)
 8004dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004dd6:	60fb      	str	r3, [r7, #12]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40023000 	.word	0x40023000
 8004dec:	40021000 	.word	0x40021000

08004df0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b09e      	sub	sp, #120	@ 0x78
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
 8004e02:	609a      	str	r2, [r3, #8]
 8004e04:	60da      	str	r2, [r3, #12]
 8004e06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	2250      	movs	r2, #80	@ 0x50
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4618      	mov	r0, r3
 8004e12:	f005 ffa7 	bl	800ad64 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a24      	ldr	r2, [pc, #144]	@ (8004eac <HAL_FDCAN_MspInit+0xbc>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d141      	bne.n	8004ea4 <HAL_FDCAN_MspInit+0xb4>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004e20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e24:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004e26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e2c:	f107 0314 	add.w	r3, r7, #20
 8004e30:	4618      	mov	r0, r3
 8004e32:	f003 fd9b 	bl	800896c <HAL_RCCEx_PeriphCLKConfig>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d001      	beq.n	8004e40 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004e3c:	f7ff fe6c 	bl	8004b18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004e40:	4b1b      	ldr	r3, [pc, #108]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e44:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004e4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e4c:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5c:	4a14      	ldr	r2, [pc, #80]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e64:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <HAL_FDCAN_MspInit+0xc0>)
 8004e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e68:	f003 0301 	and.w	r3, r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004e70:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004e74:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e76:	2302      	movs	r3, #2
 8004e78:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004e82:	2309      	movs	r3, #9
 8004e84:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e86:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004e8a:	4619      	mov	r1, r3
 8004e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e90:	f002 fe22 	bl	8007ad8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004e94:	2200      	movs	r2, #0
 8004e96:	2100      	movs	r1, #0
 8004e98:	2015      	movs	r0, #21
 8004e9a:	f001 fdec 	bl	8006a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004e9e:	2015      	movs	r0, #21
 8004ea0:	f001 fe03 	bl	8006aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004ea4:	bf00      	nop
 8004ea6:	3778      	adds	r7, #120	@ 0x78
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40006400 	.word	0x40006400
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <HAL_FMAC_MspInit+0x38>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d10b      	bne.n	8004ede <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_FMAC_MspInit+0x3c>)
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eca:	4a09      	ldr	r2, [pc, #36]	@ (8004ef0 <HAL_FMAC_MspInit+0x3c>)
 8004ecc:	f043 0310 	orr.w	r3, r3, #16
 8004ed0:	6493      	str	r3, [r2, #72]	@ 0x48
 8004ed2:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <HAL_FMAC_MspInit+0x3c>)
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40021400 	.word	0x40021400
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	@ 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efc:	f107 0314 	add.w	r3, r7, #20
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a17      	ldr	r2, [pc, #92]	@ (8004f70 <HAL_SPI_MspInit+0x7c>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d128      	bne.n	8004f68 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f16:	4b17      	ldr	r3, [pc, #92]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f1a:	4a16      	ldr	r2, [pc, #88]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f20:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f22:	4b14      	ldr	r3, [pc, #80]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f2a:	613b      	str	r3, [r7, #16]
 8004f2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f2e:	4b11      	ldr	r3, [pc, #68]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f32:	4a10      	ldr	r2, [pc, #64]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f34:	f043 0301 	orr.w	r3, r3, #1
 8004f38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8004f74 <HAL_SPI_MspInit+0x80>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = CLK_CON_Pin|MISO_CON_Pin|MOSI_CON_Pin;
 8004f46:	23e0      	movs	r3, #224	@ 0xe0
 8004f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f4a:	2302      	movs	r3, #2
 8004f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f52:	2300      	movs	r3, #0
 8004f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004f56:	2305      	movs	r3, #5
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5a:	f107 0314 	add.w	r3, r7, #20
 8004f5e:	4619      	mov	r1, r3
 8004f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f64:	f002 fdb8 	bl	8007ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004f68:	bf00      	nop
 8004f6a:	3728      	adds	r7, #40	@ 0x28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40013000 	.word	0x40013000
 8004f74:	40021000 	.word	0x40021000

08004f78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a0d      	ldr	r2, [pc, #52]	@ (8004fbc <HAL_TIM_Base_MspInit+0x44>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d113      	bne.n	8004fb2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004fc0 <HAL_TIM_Base_MspInit+0x48>)
 8004f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc0 <HAL_TIM_Base_MspInit+0x48>)
 8004f90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004f94:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f96:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc0 <HAL_TIM_Base_MspInit+0x48>)
 8004f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2100      	movs	r1, #0
 8004fa6:	2019      	movs	r0, #25
 8004fa8:	f001 fd65 	bl	8006a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004fac:	2019      	movs	r0, #25
 8004fae:	f001 fd7c 	bl	8006aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004fb2:	bf00      	nop
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40021000 	.word	0x40021000

08004fc4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fcc:	f107 030c 	add.w	r3, r7, #12
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	605a      	str	r2, [r3, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
 8004fd8:	60da      	str	r2, [r3, #12]
 8004fda:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a12      	ldr	r2, [pc, #72]	@ (800502c <HAL_TIM_MspPostInit+0x68>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d11d      	bne.n	8005022 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fe6:	4b12      	ldr	r3, [pc, #72]	@ (8005030 <HAL_TIM_MspPostInit+0x6c>)
 8004fe8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fea:	4a11      	ldr	r2, [pc, #68]	@ (8005030 <HAL_TIM_MspPostInit+0x6c>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004ff2:	4b0f      	ldr	r3, [pc, #60]	@ (8005030 <HAL_TIM_MspPostInit+0x6c>)
 8004ff4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8004ffe:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8005002:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005004:	2302      	movs	r3, #2
 8005006:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005008:	2300      	movs	r3, #0
 800500a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800500c:	2303      	movs	r3, #3
 800500e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005010:	2306      	movs	r3, #6
 8005012:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005014:	f107 030c 	add.w	r3, r7, #12
 8005018:	4619      	mov	r1, r3
 800501a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800501e:	f002 fd5b 	bl	8007ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005022:	bf00      	nop
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	40012c00 	.word	0x40012c00
 8005030:	40021000 	.word	0x40021000

08005034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005034:	b480      	push	{r7}
 8005036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <NMI_Handler+0x4>

0800503c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005040:	bf00      	nop
 8005042:	e7fd      	b.n	8005040 <HardFault_Handler+0x4>

08005044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005048:	bf00      	nop
 800504a:	e7fd      	b.n	8005048 <MemManage_Handler+0x4>

0800504c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800504c:	b480      	push	{r7}
 800504e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005050:	bf00      	nop
 8005052:	e7fd      	b.n	8005050 <BusFault_Handler+0x4>

08005054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <UsageFault_Handler+0x4>

0800505c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005060:	bf00      	nop
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800506a:	b480      	push	{r7}
 800506c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800506e:	bf00      	nop
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800507c:	bf00      	nop
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr

08005086 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800508a:	f000 f8b9 	bl	8005200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005098:	4802      	ldr	r0, [pc, #8]	@ (80050a4 <DMA1_Channel1_IRQHandler+0x10>)
 800509a:	f001 ff2e 	bl	8006efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	2000060c 	.word	0x2000060c

080050a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80050ac:	4802      	ldr	r0, [pc, #8]	@ (80050b8 <DMA1_Channel2_IRQHandler+0x10>)
 80050ae:	f001 ff24 	bl	8006efa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	2000066c 	.word	0x2000066c

080050bc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80050c0:	4802      	ldr	r0, [pc, #8]	@ (80050cc <FDCAN1_IT0_IRQHandler+0x10>)
 80050c2:	f002 fa4e 	bl	8007562 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	20000718 	.word	0x20000718

080050d0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050d4:	4802      	ldr	r0, [pc, #8]	@ (80050e0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80050d6:	f004 fc6b 	bl	80099b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80050da:	bf00      	nop
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000818 	.word	0x20000818

080050e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050e8:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <SystemInit+0x20>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	4a05      	ldr	r2, [pc, #20]	@ (8005104 <SystemInit+0x20>)
 80050f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050f8:	bf00      	nop
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	e000ed00 	.word	0xe000ed00

08005108 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005108:	480d      	ldr	r0, [pc, #52]	@ (8005140 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800510a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800510c:	480d      	ldr	r0, [pc, #52]	@ (8005144 <LoopForever+0x6>)
  ldr r1, =_edata
 800510e:	490e      	ldr	r1, [pc, #56]	@ (8005148 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005110:	4a0e      	ldr	r2, [pc, #56]	@ (800514c <LoopForever+0xe>)
  movs r3, #0
 8005112:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005114:	e002      	b.n	800511c <LoopCopyDataInit>

08005116 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005116:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005118:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800511a:	3304      	adds	r3, #4

0800511c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800511c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800511e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005120:	d3f9      	bcc.n	8005116 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005122:	4a0b      	ldr	r2, [pc, #44]	@ (8005150 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005124:	4c0b      	ldr	r4, [pc, #44]	@ (8005154 <LoopForever+0x16>)
  movs r3, #0
 8005126:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005128:	e001      	b.n	800512e <LoopFillZerobss>

0800512a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800512a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800512c:	3204      	adds	r2, #4

0800512e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800512e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005130:	d3fb      	bcc.n	800512a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005132:	f7ff ffd7 	bl	80050e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005136:	f005 fe23 	bl	800ad80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800513a:	f7fb fe61 	bl	8000e00 <main>

0800513e <LoopForever>:

LoopForever:
    b LoopForever
 800513e:	e7fe      	b.n	800513e <LoopForever>
  ldr   r0, =_estack
 8005140:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005144:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005148:	20000518 	.word	0x20000518
  ldr r2, =_sidata
 800514c:	0800c528 	.word	0x0800c528
  ldr r2, =_sbss
 8005150:	20000518 	.word	0x20000518
  ldr r4, =_ebss
 8005154:	20000e70 	.word	0x20000e70

08005158 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005158:	e7fe      	b.n	8005158 <ADC1_2_IRQHandler>

0800515a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b082      	sub	sp, #8
 800515e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005160:	2300      	movs	r3, #0
 8005162:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005164:	2003      	movs	r0, #3
 8005166:	f001 fc7b 	bl	8006a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800516a:	200f      	movs	r0, #15
 800516c:	f000 f80e 	bl	800518c <HAL_InitTick>
 8005170:	4603      	mov	r3, r0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d002      	beq.n	800517c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	e001      	b.n	8005180 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800517c:	f7ff fcd2 	bl	8004b24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005180:	79fb      	ldrb	r3, [r7, #7]

}
 8005182:	4618      	mov	r0, r3
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
	...

0800518c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005194:	2300      	movs	r3, #0
 8005196:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005198:	4b16      	ldr	r3, [pc, #88]	@ (80051f4 <HAL_InitTick+0x68>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d022      	beq.n	80051e6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80051a0:	4b15      	ldr	r3, [pc, #84]	@ (80051f8 <HAL_InitTick+0x6c>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4b13      	ldr	r3, [pc, #76]	@ (80051f4 <HAL_InitTick+0x68>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80051ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80051b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b4:	4618      	mov	r0, r3
 80051b6:	f001 fc86 	bl	8006ac6 <HAL_SYSTICK_Config>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10f      	bne.n	80051e0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	d809      	bhi.n	80051da <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80051c6:	2200      	movs	r2, #0
 80051c8:	6879      	ldr	r1, [r7, #4]
 80051ca:	f04f 30ff 	mov.w	r0, #4294967295
 80051ce:	f001 fc52 	bl	8006a76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80051d2:	4a0a      	ldr	r2, [pc, #40]	@ (80051fc <HAL_InitTick+0x70>)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6013      	str	r3, [r2, #0]
 80051d8:	e007      	b.n	80051ea <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	73fb      	strb	r3, [r7, #15]
 80051de:	e004      	b.n	80051ea <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
 80051e4:	e001      	b.n	80051ea <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	200004b0 	.word	0x200004b0
 80051f8:	200004a8 	.word	0x200004a8
 80051fc:	200004ac 	.word	0x200004ac

08005200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005204:	4b05      	ldr	r3, [pc, #20]	@ (800521c <HAL_IncTick+0x1c>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b05      	ldr	r3, [pc, #20]	@ (8005220 <HAL_IncTick+0x20>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4413      	add	r3, r2
 800520e:	4a03      	ldr	r2, [pc, #12]	@ (800521c <HAL_IncTick+0x1c>)
 8005210:	6013      	str	r3, [r2, #0]
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr
 800521c:	20000d34 	.word	0x20000d34
 8005220:	200004b0 	.word	0x200004b0

08005224 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
  return uwTick;
 8005228:	4b03      	ldr	r3, [pc, #12]	@ (8005238 <HAL_GetTick+0x14>)
 800522a:	681b      	ldr	r3, [r3, #0]
}
 800522c:	4618      	mov	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	20000d34 	.word	0x20000d34

0800523c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005244:	f7ff ffee 	bl	8005224 <HAL_GetTick>
 8005248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d004      	beq.n	8005260 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005256:	4b09      	ldr	r3, [pc, #36]	@ (800527c <HAL_Delay+0x40>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005260:	bf00      	nop
 8005262:	f7ff ffdf 	bl	8005224 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	429a      	cmp	r2, r3
 8005270:	d8f7      	bhi.n	8005262 <HAL_Delay+0x26>
  {
  }
}
 8005272:	bf00      	nop
 8005274:	bf00      	nop
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	200004b0 	.word	0x200004b0

08005280 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	431a      	orrs	r2, r3
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	609a      	str	r2, [r3, #8]
}
 800529a:	bf00      	nop
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
 80052ae:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	609a      	str	r2, [r3, #8]
}
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
 80052f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	3360      	adds	r3, #96	@ 0x60
 80052fa:	461a      	mov	r2, r3
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	4413      	add	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	4b08      	ldr	r3, [pc, #32]	@ (800532c <LL_ADC_SetOffset+0x44>)
 800530a:	4013      	ands	r3, r2
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005312:	683a      	ldr	r2, [r7, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	4313      	orrs	r3, r2
 8005318:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005320:	bf00      	nop
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	03fff000 	.word	0x03fff000

08005330 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	3360      	adds	r3, #96	@ 0x60
 800533e:	461a      	mov	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	009b      	lsls	r3, r3, #2
 8005344:	4413      	add	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800535c:	b480      	push	{r7}
 800535e:	b087      	sub	sp, #28
 8005360:	af00      	add	r7, sp, #0
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	60b9      	str	r1, [r7, #8]
 8005366:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3360      	adds	r3, #96	@ 0x60
 800536c:	461a      	mov	r2, r3
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	4413      	add	r3, r2
 8005374:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	431a      	orrs	r2, r3
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr

08005392 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005392:	b480      	push	{r7}
 8005394:	b087      	sub	sp, #28
 8005396:	af00      	add	r7, sp, #0
 8005398:	60f8      	str	r0, [r7, #12]
 800539a:	60b9      	str	r1, [r7, #8]
 800539c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	3360      	adds	r3, #96	@ 0x60
 80053a2:	461a      	mov	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	431a      	orrs	r2, r3
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80053bc:	bf00      	nop
 80053be:	371c      	adds	r7, #28
 80053c0:	46bd      	mov	sp, r7
 80053c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c6:	4770      	bx	lr

080053c8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b087      	sub	sp, #28
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	3360      	adds	r3, #96	@ 0x60
 80053d8:	461a      	mov	r2, r3
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	431a      	orrs	r2, r3
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80053f2:	bf00      	nop
 80053f4:	371c      	adds	r7, #28
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr

080053fe <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80053fe:	b480      	push	{r7}
 8005400:	b083      	sub	sp, #12
 8005402:	af00      	add	r7, sp, #0
 8005404:	6078      	str	r0, [r7, #4]
 8005406:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	615a      	str	r2, [r3, #20]
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005434:	2b00      	cmp	r3, #0
 8005436:	d101      	bne.n	800543c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005438:	2301      	movs	r3, #1
 800543a:	e000      	b.n	800543e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800544a:	b480      	push	{r7}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3330      	adds	r3, #48	@ 0x30
 800545a:	461a      	mov	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	0a1b      	lsrs	r3, r3, #8
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	f003 030c 	and.w	r3, r3, #12
 8005466:	4413      	add	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	211f      	movs	r1, #31
 8005476:	fa01 f303 	lsl.w	r3, r1, r3
 800547a:	43db      	mvns	r3, r3
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	0e9b      	lsrs	r3, r3, #26
 8005482:	f003 011f 	and.w	r1, r3, #31
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	431a      	orrs	r2, r3
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	3314      	adds	r3, #20
 80054b2:	461a      	mov	r2, r3
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	0e5b      	lsrs	r3, r3, #25
 80054b8:	009b      	lsls	r3, r3, #2
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	4413      	add	r3, r2
 80054c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	0d1b      	lsrs	r3, r3, #20
 80054ca:	f003 031f 	and.w	r3, r3, #31
 80054ce:	2107      	movs	r1, #7
 80054d0:	fa01 f303 	lsl.w	r3, r1, r3
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	0d1b      	lsrs	r3, r3, #20
 80054dc:	f003 031f 	and.w	r3, r3, #31
 80054e0:	6879      	ldr	r1, [r7, #4]
 80054e2:	fa01 f303 	lsl.w	r3, r1, r3
 80054e6:	431a      	orrs	r2, r3
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b085      	sub	sp, #20
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0f      	ldr	r2, [pc, #60]	@ (8005544 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d10a      	bne.n	8005522 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005518:	431a      	orrs	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8005520:	e00a      	b.n	8005538 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800552e:	43db      	mvns	r3, r3
 8005530:	401a      	ands	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	407f0000 	.word	0x407f0000

08005548 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 031f 	and.w	r3, r3, #31
}
 8005558:	4618      	mov	r0, r3
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005574:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	6093      	str	r3, [r2, #8]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005598:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559c:	d101      	bne.n	80055a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80055c0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80055c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ec:	d101      	bne.n	80055f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005610:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005614:	f043 0201 	orr.w	r2, r3, #1
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 0301 	and.w	r3, r3, #1
 8005638:	2b01      	cmp	r3, #1
 800563a:	d101      	bne.n	8005640 <LL_ADC_IsEnabled+0x18>
 800563c:	2301      	movs	r3, #1
 800563e:	e000      	b.n	8005642 <LL_ADC_IsEnabled+0x1a>
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	370c      	adds	r7, #12
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800564e:	b480      	push	{r7}
 8005650:	b083      	sub	sp, #12
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800565e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005662:	f043 0204 	orr.w	r2, r3, #4
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr

08005676 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0304 	and.w	r3, r3, #4
 8005686:	2b04      	cmp	r3, #4
 8005688:	d101      	bne.n	800568e <LL_ADC_REG_IsConversionOngoing+0x18>
 800568a:	2301      	movs	r3, #1
 800568c:	e000      	b.n	8005690 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d101      	bne.n	80056b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056b0:	2301      	movs	r3, #1
 80056b2:	e000      	b.n	80056b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	370c      	adds	r7, #12
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
	...

080056c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056c4:	b590      	push	{r4, r7, lr}
 80056c6:	b089      	sub	sp, #36	@ 0x24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056cc:	2300      	movs	r3, #0
 80056ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d101      	bne.n	80056de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	e1a1      	b.n	8005a22 <HAL_ADC_Init+0x35e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	695b      	ldr	r3, [r3, #20]
 80056e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d109      	bne.n	8005700 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f7ff fa3d 	bl	8004b6c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2200      	movs	r2, #0
 80056f6:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4618      	mov	r0, r3
 8005706:	f7ff ff3f 	bl	8005588 <LL_ADC_IsDeepPowerDownEnabled>
 800570a:	4603      	mov	r3, r0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff25 	bl	8005564 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff ff5a 	bl	80055d8 <LL_ADC_IsInternalRegulatorEnabled>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d115      	bne.n	8005756 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4618      	mov	r0, r3
 8005730:	f7ff ff3e 	bl	80055b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005734:	4b9a      	ldr	r3, [pc, #616]	@ (80059a0 <HAL_ADC_Init+0x2dc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	099b      	lsrs	r3, r3, #6
 800573a:	4a9a      	ldr	r2, [pc, #616]	@ (80059a4 <HAL_ADC_Init+0x2e0>)
 800573c:	fba2 2303 	umull	r2, r3, r2, r3
 8005740:	099b      	lsrs	r3, r3, #6
 8005742:	3301      	adds	r3, #1
 8005744:	005b      	lsls	r3, r3, #1
 8005746:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005748:	e002      	b.n	8005750 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3b01      	subs	r3, #1
 800574e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f9      	bne.n	800574a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff ff3c 	bl	80055d8 <LL_ADC_IsInternalRegulatorEnabled>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d10d      	bne.n	8005782 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800576a:	f043 0210 	orr.w	r2, r3, #16
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005776:	f043 0201 	orr.w	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff75 	bl	8005676 <LL_ADC_REG_IsConversionOngoing>
 800578c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005792:	f003 0310 	and.w	r3, r3, #16
 8005796:	2b00      	cmp	r3, #0
 8005798:	f040 813a 	bne.w	8005a10 <HAL_ADC_Init+0x34c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f040 8136 	bne.w	8005a10 <HAL_ADC_Init+0x34c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057a8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80057ac:	f043 0202 	orr.w	r2, r3, #2
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ff35 	bl	8005628 <LL_ADC_IsEnabled>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d137      	bne.n	8005834 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80057cc:	d004      	beq.n	80057d8 <HAL_ADC_Init+0x114>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a75      	ldr	r2, [pc, #468]	@ (80059a8 <HAL_ADC_Init+0x2e4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d10f      	bne.n	80057f8 <HAL_ADC_Init+0x134>
 80057d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80057dc:	f7ff ff24 	bl	8005628 <LL_ADC_IsEnabled>
 80057e0:	4604      	mov	r4, r0
 80057e2:	4871      	ldr	r0, [pc, #452]	@ (80059a8 <HAL_ADC_Init+0x2e4>)
 80057e4:	f7ff ff20 	bl	8005628 <LL_ADC_IsEnabled>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4323      	orrs	r3, r4
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	bf0c      	ite	eq
 80057f0:	2301      	moveq	r3, #1
 80057f2:	2300      	movne	r3, #0
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	e008      	b.n	800580a <HAL_ADC_Init+0x146>
 80057f8:	486c      	ldr	r0, [pc, #432]	@ (80059ac <HAL_ADC_Init+0x2e8>)
 80057fa:	f7ff ff15 	bl	8005628 <LL_ADC_IsEnabled>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	bf0c      	ite	eq
 8005804:	2301      	moveq	r3, #1
 8005806:	2300      	movne	r3, #0
 8005808:	b2db      	uxtb	r3, r3
 800580a:	2b00      	cmp	r3, #0
 800580c:	d012      	beq.n	8005834 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005816:	d004      	beq.n	8005822 <HAL_ADC_Init+0x15e>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a62      	ldr	r2, [pc, #392]	@ (80059a8 <HAL_ADC_Init+0x2e4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d101      	bne.n	8005826 <HAL_ADC_Init+0x162>
 8005822:	4a63      	ldr	r2, [pc, #396]	@ (80059b0 <HAL_ADC_Init+0x2ec>)
 8005824:	e000      	b.n	8005828 <HAL_ADC_Init+0x164>
 8005826:	4a63      	ldr	r2, [pc, #396]	@ (80059b4 <HAL_ADC_Init+0x2f0>)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	4619      	mov	r1, r3
 800582e:	4610      	mov	r0, r2
 8005830:	f7ff fd26 	bl	8005280 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	7f5b      	ldrb	r3, [r3, #29]
 8005838:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800583e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005844:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800584a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005852:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005854:	4313      	orrs	r3, r2
 8005856:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800585e:	2b01      	cmp	r3, #1
 8005860:	d106      	bne.n	8005870 <HAL_ADC_Init+0x1ac>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	3b01      	subs	r3, #1
 8005868:	045b      	lsls	r3, r3, #17
 800586a:	69ba      	ldr	r2, [r7, #24]
 800586c:	4313      	orrs	r3, r2
 800586e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005874:	2b00      	cmp	r3, #0
 8005876:	d009      	beq.n	800588c <HAL_ADC_Init+0x1c8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005884:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	4313      	orrs	r3, r2
 800588a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68da      	ldr	r2, [r3, #12]
 8005892:	4b49      	ldr	r3, [pc, #292]	@ (80059b8 <HAL_ADC_Init+0x2f4>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6812      	ldr	r2, [r2, #0]
 800589a:	69b9      	ldr	r1, [r7, #24]
 800589c:	430b      	orrs	r3, r1
 800589e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7ff fedb 	bl	8005676 <LL_ADC_REG_IsConversionOngoing>
 80058c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fee8 	bl	800569c <LL_ADC_INJ_IsConversionOngoing>
 80058cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d17b      	bne.n	80059cc <HAL_ADC_Init+0x308>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d178      	bne.n	80059cc <HAL_ADC_Init+0x308>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058de:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80058e6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80058f6:	f023 0302 	bic.w	r3, r3, #2
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	6812      	ldr	r2, [r2, #0]
 80058fe:	69b9      	ldr	r1, [r7, #24]
 8005900:	430b      	orrs	r3, r1
 8005902:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d017      	beq.n	800593c <HAL_ADC_Init+0x278>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	691a      	ldr	r2, [r3, #16]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800591a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005924:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005928:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	6911      	ldr	r1, [r2, #16]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	430b      	orrs	r3, r1
 8005936:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800593a:	e013      	b.n	8005964 <HAL_ADC_Init+0x2a0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800594a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	6812      	ldr	r2, [r2, #0]
 8005958:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800595c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005960:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800596a:	2b01      	cmp	r3, #1
 800596c:	d126      	bne.n	80059bc <HAL_ADC_Init+0x2f8>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005984:	4311      	orrs	r1, r2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800598a:	4311      	orrs	r1, r2
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005990:	430a      	orrs	r2, r1
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	611a      	str	r2, [r3, #16]
 800599e:	e015      	b.n	80059cc <HAL_ADC_Init+0x308>
 80059a0:	200004a8 	.word	0x200004a8
 80059a4:	053e2d63 	.word	0x053e2d63
 80059a8:	50000100 	.word	0x50000100
 80059ac:	50000400 	.word	0x50000400
 80059b0:	50000300 	.word	0x50000300
 80059b4:	50000700 	.word	0x50000700
 80059b8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	691a      	ldr	r2, [r3, #16]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d10c      	bne.n	80059ee <HAL_ADC_Init+0x32a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059da:	f023 010f 	bic.w	r1, r3, #15
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a1b      	ldr	r3, [r3, #32]
 80059e2:	1e5a      	subs	r2, r3, #1
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	430a      	orrs	r2, r1
 80059ea:	631a      	str	r2, [r3, #48]	@ 0x30
 80059ec:	e007      	b.n	80059fe <HAL_ADC_Init+0x33a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 020f 	bic.w	r2, r2, #15
 80059fc:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	f043 0201 	orr.w	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005a0e:	e007      	b.n	8005a20 <HAL_ADC_Init+0x35c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a14:	f043 0210 	orr.w	r2, r3, #16
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005a20:	7ffb      	ldrb	r3, [r7, #31]
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3724      	adds	r7, #36	@ 0x24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd90      	pop	{r4, r7, pc}
 8005a2a:	bf00      	nop

08005a2c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a40:	d004      	beq.n	8005a4c <HAL_ADC_Start_DMA+0x20>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a57      	ldr	r2, [pc, #348]	@ (8005ba4 <HAL_ADC_Start_DMA+0x178>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d101      	bne.n	8005a50 <HAL_ADC_Start_DMA+0x24>
 8005a4c:	4b56      	ldr	r3, [pc, #344]	@ (8005ba8 <HAL_ADC_Start_DMA+0x17c>)
 8005a4e:	e000      	b.n	8005a52 <HAL_ADC_Start_DMA+0x26>
 8005a50:	4b56      	ldr	r3, [pc, #344]	@ (8005bac <HAL_ADC_Start_DMA+0x180>)
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fd78 	bl	8005548 <LL_ADC_GetMultimode>
 8005a58:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff fe09 	bl	8005676 <LL_ADC_REG_IsConversionOngoing>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f040 8094 	bne.w	8005b94 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_ADC_Start_DMA+0x4e>
 8005a76:	2302      	movs	r3, #2
 8005a78:	e08f      	b.n	8005b9a <HAL_ADC_Start_DMA+0x16e>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a4a      	ldr	r2, [pc, #296]	@ (8005bb0 <HAL_ADC_Start_DMA+0x184>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d008      	beq.n	8005a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d005      	beq.n	8005a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	2b05      	cmp	r3, #5
 8005a96:	d002      	beq.n	8005a9e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b09      	cmp	r3, #9
 8005a9c:	d173      	bne.n	8005b86 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005a9e:	68f8      	ldr	r0, [r7, #12]
 8005aa0:	f000 fcd8 	bl	8006454 <ADC_Enable>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005aa8:	7dfb      	ldrb	r3, [r7, #23]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d166      	bne.n	8005b7c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005ab6:	f023 0301 	bic.w	r3, r3, #1
 8005aba:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a37      	ldr	r2, [pc, #220]	@ (8005ba4 <HAL_ADC_Start_DMA+0x178>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d002      	beq.n	8005ad2 <HAL_ADC_Start_DMA+0xa6>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	e001      	b.n	8005ad6 <HAL_ADC_Start_DMA+0xaa>
 8005ad2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d002      	beq.n	8005ae4 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d105      	bne.n	8005af0 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ae8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005af4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d006      	beq.n	8005b0a <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b00:	f023 0206 	bic.w	r2, r3, #6
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	661a      	str	r2, [r3, #96]	@ 0x60
 8005b08:	e002      	b.n	8005b10 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b14:	4a27      	ldr	r2, [pc, #156]	@ (8005bb4 <HAL_ADC_Start_DMA+0x188>)
 8005b16:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b1c:	4a26      	ldr	r2, [pc, #152]	@ (8005bb8 <HAL_ADC_Start_DMA+0x18c>)
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b24:	4a25      	ldr	r2, [pc, #148]	@ (8005bbc <HAL_ADC_Start_DMA+0x190>)
 8005b26:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	221c      	movs	r2, #28
 8005b2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0210 	orr.w	r2, r2, #16
 8005b46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3340      	adds	r3, #64	@ 0x40
 8005b62:	4619      	mov	r1, r3
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f001 f94c 	bl	8006e04 <HAL_DMA_Start_IT>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f7ff fd6a 	bl	800564e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005b7a:	e00d      	b.n	8005b98 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005b84:	e008      	b.n	8005b98 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005b92:	e001      	b.n	8005b98 <HAL_ADC_Start_DMA+0x16c>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005b94:	2302      	movs	r3, #2
 8005b96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005b98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	50000100 	.word	0x50000100
 8005ba8:	50000300 	.word	0x50000300
 8005bac:	50000700 	.word	0x50000700
 8005bb0:	50000400 	.word	0x50000400
 8005bb4:	08006519 	.word	0x08006519
 8005bb8:	080065f1 	.word	0x080065f1
 8005bbc:	0800660d 	.word	0x0800660d

08005bc0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b0b6      	sub	sp, #216	@ 0xd8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d102      	bne.n	8005c20 <HAL_ADC_ConfigChannel+0x24>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	f000 bc04 	b.w	8006428 <HAL_ADC_ConfigChannel+0x82c>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fd22 	bl	8005676 <LL_ADC_REG_IsConversionOngoing>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f040 83e8 	bne.w	800640a <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6859      	ldr	r1, [r3, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	461a      	mov	r2, r3
 8005c48:	f7ff fbff 	bl	800544a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff fd10 	bl	8005676 <LL_ADC_REG_IsConversionOngoing>
 8005c56:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f7ff fd1c 	bl	800569c <LL_ADC_INJ_IsConversionOngoing>
 8005c64:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005c68:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f040 81d9 	bne.w	8006024 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005c72:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	f040 81d4 	bne.w	8006024 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005c84:	d10f      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	4619      	mov	r1, r3
 8005c92:	f7ff fc06 	bl	80054a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fbad 	bl	80053fe <LL_ADC_SetSamplingTimeCommonConfig>
 8005ca4:	e00e      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6818      	ldr	r0, [r3, #0]
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	6819      	ldr	r1, [r3, #0]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	f7ff fbf5 	bl	80054a2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fb9d 	bl	80053fe <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695a      	ldr	r2, [r3, #20]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	08db      	lsrs	r3, r3, #3
 8005cd0:	f003 0303 	and.w	r3, r3, #3
 8005cd4:	005b      	lsls	r3, r3, #1
 8005cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	2b04      	cmp	r3, #4
 8005ce4:	d022      	beq.n	8005d2c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6818      	ldr	r0, [r3, #0]
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	6919      	ldr	r1, [r3, #16]
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cf6:	f7ff faf7 	bl	80052e8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6818      	ldr	r0, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	6919      	ldr	r1, [r3, #16]
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	461a      	mov	r2, r3
 8005d08:	f7ff fb43 	bl	8005392 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6818      	ldr	r0, [r3, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	6919      	ldr	r1, [r3, #16]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	7f1b      	ldrb	r3, [r3, #28]
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d102      	bne.n	8005d22 <HAL_ADC_ConfigChannel+0x126>
 8005d1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d20:	e000      	b.n	8005d24 <HAL_ADC_ConfigChannel+0x128>
 8005d22:	2300      	movs	r3, #0
 8005d24:	461a      	mov	r2, r3
 8005d26:	f7ff fb4f 	bl	80053c8 <LL_ADC_SetOffsetSaturation>
 8005d2a:	e17b      	b.n	8006024 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2100      	movs	r1, #0
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7ff fafc 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10a      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x15c>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2100      	movs	r1, #0
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7ff faf1 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	0e9b      	lsrs	r3, r3, #26
 8005d52:	f003 021f 	and.w	r2, r3, #31
 8005d56:	e01e      	b.n	8005d96 <HAL_ADC_ConfigChannel+0x19a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7ff fae6 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d6a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8005d6e:	fa93 f3a3 	rbit	r3, r3
 8005d72:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005d76:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005d7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005d7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8005d86:	2320      	movs	r3, #32
 8005d88:	e004      	b.n	8005d94 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8005d8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d8e:	fab3 f383 	clz	r3, r3
 8005d92:	b2db      	uxtb	r3, r3
 8005d94:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <HAL_ADC_ConfigChannel+0x1b2>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	0e9b      	lsrs	r3, r3, #26
 8005da8:	f003 031f 	and.w	r3, r3, #31
 8005dac:	e018      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x1e4>
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8005dba:	fa93 f3a3 	rbit	r3, r3
 8005dbe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8005dc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8005dca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8005dd2:	2320      	movs	r3, #32
 8005dd4:	e004      	b.n	8005de0 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8005dd6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8005dda:	fab3 f383 	clz	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d106      	bne.n	8005df2 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2200      	movs	r2, #0
 8005dea:	2100      	movs	r1, #0
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fab5 	bl	800535c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2101      	movs	r1, #1
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f7ff fa99 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10a      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x222>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7ff fa8e 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005e14:	4603      	mov	r3, r0
 8005e16:	0e9b      	lsrs	r3, r3, #26
 8005e18:	f003 021f 	and.w	r2, r3, #31
 8005e1c:	e01e      	b.n	8005e5c <HAL_ADC_ConfigChannel+0x260>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	2101      	movs	r1, #1
 8005e24:	4618      	mov	r0, r3
 8005e26:	f7ff fa83 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e30:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e34:	fa93 f3a3 	rbit	r3, r3
 8005e38:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8005e3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8005e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8005e4c:	2320      	movs	r3, #32
 8005e4e:	e004      	b.n	8005e5a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8005e50:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e54:	fab3 f383 	clz	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d105      	bne.n	8005e74 <HAL_ADC_ConfigChannel+0x278>
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	0e9b      	lsrs	r3, r3, #26
 8005e6e:	f003 031f 	and.w	r3, r3, #31
 8005e72:	e018      	b.n	8005ea6 <HAL_ADC_ConfigChannel+0x2aa>
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e80:	fa93 f3a3 	rbit	r3, r3
 8005e84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8005e88:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8005e8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8005e90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8005e98:	2320      	movs	r3, #32
 8005e9a:	e004      	b.n	8005ea6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8005e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ea0:	fab3 f383 	clz	r3, r3
 8005ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d106      	bne.n	8005eb8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2101      	movs	r1, #1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7ff fa52 	bl	800535c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2102      	movs	r1, #2
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7ff fa36 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10a      	bne.n	8005ee4 <HAL_ADC_ConfigChannel+0x2e8>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2102      	movs	r1, #2
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7ff fa2b 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005eda:	4603      	mov	r3, r0
 8005edc:	0e9b      	lsrs	r3, r3, #26
 8005ede:	f003 021f 	and.w	r2, r3, #31
 8005ee2:	e01e      	b.n	8005f22 <HAL_ADC_ConfigChannel+0x326>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2102      	movs	r1, #2
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7ff fa20 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005efa:	fa93 f3a3 	rbit	r3, r3
 8005efe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8005f02:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8005f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d101      	bne.n	8005f16 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8005f12:	2320      	movs	r3, #32
 8005f14:	e004      	b.n	8005f20 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8005f16:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f1a:	fab3 f383 	clz	r3, r3
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d105      	bne.n	8005f3a <HAL_ADC_ConfigChannel+0x33e>
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	0e9b      	lsrs	r3, r3, #26
 8005f34:	f003 031f 	and.w	r3, r3, #31
 8005f38:	e016      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x36c>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f42:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005f46:	fa93 f3a3 	rbit	r3, r3
 8005f4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8005f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8005f52:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8005f5a:	2320      	movs	r3, #32
 8005f5c:	e004      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8005f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f62:	fab3 f383 	clz	r3, r3
 8005f66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d106      	bne.n	8005f7a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2200      	movs	r2, #0
 8005f72:	2102      	movs	r1, #2
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff f9f1 	bl	800535c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2103      	movs	r1, #3
 8005f80:	4618      	mov	r0, r3
 8005f82:	f7ff f9d5 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005f86:	4603      	mov	r3, r0
 8005f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_ADC_ConfigChannel+0x3aa>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2103      	movs	r1, #3
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff f9ca 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	0e9b      	lsrs	r3, r3, #26
 8005fa0:	f003 021f 	and.w	r2, r3, #31
 8005fa4:	e017      	b.n	8005fd6 <HAL_ADC_ConfigChannel+0x3da>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2103      	movs	r1, #3
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff f9bf 	bl	8005330 <LL_ADC_GetOffsetChannel>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fb6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fb8:	fa93 f3a3 	rbit	r3, r3
 8005fbc:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8005fbe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fc0:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8005fc2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8005fc8:	2320      	movs	r3, #32
 8005fca:	e003      	b.n	8005fd4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8005fcc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fce:	fab3 f383 	clz	r3, r3
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <HAL_ADC_ConfigChannel+0x3f2>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	0e9b      	lsrs	r3, r3, #26
 8005fe8:	f003 031f 	and.w	r3, r3, #31
 8005fec:	e011      	b.n	8006012 <HAL_ADC_ConfigChannel+0x416>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ff6:	fa93 f3a3 	rbit	r3, r3
 8005ffa:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8005ffc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005ffe:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006002:	2b00      	cmp	r3, #0
 8006004:	d101      	bne.n	800600a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006006:	2320      	movs	r3, #32
 8006008:	e003      	b.n	8006012 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800600a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800600c:	fab3 f383 	clz	r3, r3
 8006010:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006012:	429a      	cmp	r2, r3
 8006014:	d106      	bne.n	8006024 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2200      	movs	r2, #0
 800601c:	2103      	movs	r1, #3
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff f99c 	bl	800535c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fafd 	bl	8005628 <LL_ADC_IsEnabled>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	f040 813d 	bne.w	80062b0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6818      	ldr	r0, [r3, #0]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	6819      	ldr	r1, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	461a      	mov	r2, r3
 8006044:	f7ff fa58 	bl	80054f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4aa2      	ldr	r2, [pc, #648]	@ (80062d8 <HAL_ADC_ConfigChannel+0x6dc>)
 800604e:	4293      	cmp	r3, r2
 8006050:	f040 812e 	bne.w	80062b0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10b      	bne.n	800607c <HAL_ADC_ConfigChannel+0x480>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	0e9b      	lsrs	r3, r3, #26
 800606a:	3301      	adds	r3, #1
 800606c:	f003 031f 	and.w	r3, r3, #31
 8006070:	2b09      	cmp	r3, #9
 8006072:	bf94      	ite	ls
 8006074:	2301      	movls	r3, #1
 8006076:	2300      	movhi	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e019      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x4b4>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006084:	fa93 f3a3 	rbit	r3, r3
 8006088:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800608a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800608c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800608e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006090:	2b00      	cmp	r3, #0
 8006092:	d101      	bne.n	8006098 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006094:	2320      	movs	r3, #32
 8006096:	e003      	b.n	80060a0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006098:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800609a:	fab3 f383 	clz	r3, r3
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	3301      	adds	r3, #1
 80060a2:	f003 031f 	and.w	r3, r3, #31
 80060a6:	2b09      	cmp	r3, #9
 80060a8:	bf94      	ite	ls
 80060aa:	2301      	movls	r3, #1
 80060ac:	2300      	movhi	r3, #0
 80060ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d079      	beq.n	80061a8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d107      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x4d4>
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	0e9b      	lsrs	r3, r3, #26
 80060c6:	3301      	adds	r3, #1
 80060c8:	069b      	lsls	r3, r3, #26
 80060ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060ce:	e015      	b.n	80060fc <HAL_ADC_ConfigChannel+0x500>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060d8:	fa93 f3a3 	rbit	r3, r3
 80060dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80060de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060e0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80060e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d101      	bne.n	80060ec <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80060e8:	2320      	movs	r3, #32
 80060ea:	e003      	b.n	80060f4 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80060ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ee:	fab3 f383 	clz	r3, r3
 80060f2:	b2db      	uxtb	r3, r3
 80060f4:	3301      	adds	r3, #1
 80060f6:	069b      	lsls	r3, r3, #26
 80060f8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006104:	2b00      	cmp	r3, #0
 8006106:	d109      	bne.n	800611c <HAL_ADC_ConfigChannel+0x520>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	0e9b      	lsrs	r3, r3, #26
 800610e:	3301      	adds	r3, #1
 8006110:	f003 031f 	and.w	r3, r3, #31
 8006114:	2101      	movs	r1, #1
 8006116:	fa01 f303 	lsl.w	r3, r1, r3
 800611a:	e017      	b.n	800614c <HAL_ADC_ConfigChannel+0x550>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006122:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006124:	fa93 f3a3 	rbit	r3, r3
 8006128:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 800612a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800612c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800612e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006134:	2320      	movs	r3, #32
 8006136:	e003      	b.n	8006140 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006138:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800613a:	fab3 f383 	clz	r3, r3
 800613e:	b2db      	uxtb	r3, r3
 8006140:	3301      	adds	r3, #1
 8006142:	f003 031f 	and.w	r3, r3, #31
 8006146:	2101      	movs	r1, #1
 8006148:	fa01 f303 	lsl.w	r3, r1, r3
 800614c:	ea42 0103 	orr.w	r1, r2, r3
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <HAL_ADC_ConfigChannel+0x576>
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	0e9b      	lsrs	r3, r3, #26
 8006162:	3301      	adds	r3, #1
 8006164:	f003 021f 	and.w	r2, r3, #31
 8006168:	4613      	mov	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	4413      	add	r3, r2
 800616e:	051b      	lsls	r3, r3, #20
 8006170:	e018      	b.n	80061a4 <HAL_ADC_ConfigChannel+0x5a8>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006178:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800617a:	fa93 f3a3 	rbit	r3, r3
 800617e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006182:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800618a:	2320      	movs	r3, #32
 800618c:	e003      	b.n	8006196 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800618e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006190:	fab3 f383 	clz	r3, r3
 8006194:	b2db      	uxtb	r3, r3
 8006196:	3301      	adds	r3, #1
 8006198:	f003 021f 	and.w	r2, r3, #31
 800619c:	4613      	mov	r3, r2
 800619e:	005b      	lsls	r3, r3, #1
 80061a0:	4413      	add	r3, r2
 80061a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061a4:	430b      	orrs	r3, r1
 80061a6:	e07e      	b.n	80062a6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <HAL_ADC_ConfigChannel+0x5c8>
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	0e9b      	lsrs	r3, r3, #26
 80061ba:	3301      	adds	r3, #1
 80061bc:	069b      	lsls	r3, r3, #26
 80061be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061c2:	e015      	b.n	80061f0 <HAL_ADC_ConfigChannel+0x5f4>
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	fa93 f3a3 	rbit	r3, r3
 80061d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80061d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d4:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d101      	bne.n	80061e0 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80061dc:	2320      	movs	r3, #32
 80061de:	e003      	b.n	80061e8 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80061e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e2:	fab3 f383 	clz	r3, r3
 80061e6:	b2db      	uxtb	r3, r3
 80061e8:	3301      	adds	r3, #1
 80061ea:	069b      	lsls	r3, r3, #26
 80061ec:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d109      	bne.n	8006210 <HAL_ADC_ConfigChannel+0x614>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	0e9b      	lsrs	r3, r3, #26
 8006202:	3301      	adds	r3, #1
 8006204:	f003 031f 	and.w	r3, r3, #31
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	e017      	b.n	8006240 <HAL_ADC_ConfigChannel+0x644>
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	fa93 f3a3 	rbit	r3, r3
 800621c:	61fb      	str	r3, [r7, #28]
  return result;
 800621e:	69fb      	ldr	r3, [r7, #28]
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006228:	2320      	movs	r3, #32
 800622a:	e003      	b.n	8006234 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	fab3 f383 	clz	r3, r3
 8006232:	b2db      	uxtb	r3, r3
 8006234:	3301      	adds	r3, #1
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	2101      	movs	r1, #1
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	ea42 0103 	orr.w	r1, r2, r3
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10d      	bne.n	800626c <HAL_ADC_ConfigChannel+0x670>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	0e9b      	lsrs	r3, r3, #26
 8006256:	3301      	adds	r3, #1
 8006258:	f003 021f 	and.w	r2, r3, #31
 800625c:	4613      	mov	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4413      	add	r3, r2
 8006262:	3b1e      	subs	r3, #30
 8006264:	051b      	lsls	r3, r3, #20
 8006266:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800626a:	e01b      	b.n	80062a4 <HAL_ADC_ConfigChannel+0x6a8>
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	fa93 f3a3 	rbit	r3, r3
 8006278:	613b      	str	r3, [r7, #16]
  return result;
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d101      	bne.n	8006288 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006284:	2320      	movs	r3, #32
 8006286:	e003      	b.n	8006290 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	fab3 f383 	clz	r3, r3
 800628e:	b2db      	uxtb	r3, r3
 8006290:	3301      	adds	r3, #1
 8006292:	f003 021f 	and.w	r2, r3, #31
 8006296:	4613      	mov	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4413      	add	r3, r2
 800629c:	3b1e      	subs	r3, #30
 800629e:	051b      	lsls	r3, r3, #20
 80062a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062a4:	430b      	orrs	r3, r1
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	6892      	ldr	r2, [r2, #8]
 80062aa:	4619      	mov	r1, r3
 80062ac:	f7ff f8f9 	bl	80054a2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	4b09      	ldr	r3, [pc, #36]	@ (80062dc <HAL_ADC_ConfigChannel+0x6e0>)
 80062b6:	4013      	ands	r3, r2
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	f000 80af 	beq.w	800641c <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062c6:	d004      	beq.n	80062d2 <HAL_ADC_ConfigChannel+0x6d6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a04      	ldr	r2, [pc, #16]	@ (80062e0 <HAL_ADC_ConfigChannel+0x6e4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10a      	bne.n	80062e8 <HAL_ADC_ConfigChannel+0x6ec>
 80062d2:	4b04      	ldr	r3, [pc, #16]	@ (80062e4 <HAL_ADC_ConfigChannel+0x6e8>)
 80062d4:	e009      	b.n	80062ea <HAL_ADC_ConfigChannel+0x6ee>
 80062d6:	bf00      	nop
 80062d8:	407f0000 	.word	0x407f0000
 80062dc:	80080000 	.word	0x80080000
 80062e0:	50000100 	.word	0x50000100
 80062e4:	50000300 	.word	0x50000300
 80062e8:	4b51      	ldr	r3, [pc, #324]	@ (8006430 <HAL_ADC_ConfigChannel+0x834>)
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe ffee 	bl	80052cc <LL_ADC_GetCommonPathInternalCh>
 80062f0:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a4e      	ldr	r2, [pc, #312]	@ (8006434 <HAL_ADC_ConfigChannel+0x838>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d004      	beq.n	8006308 <HAL_ADC_ConfigChannel+0x70c>
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a4d      	ldr	r2, [pc, #308]	@ (8006438 <HAL_ADC_ConfigChannel+0x83c>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d134      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006308:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800630c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d12e      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800631c:	d17e      	bne.n	800641c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006326:	d004      	beq.n	8006332 <HAL_ADC_ConfigChannel+0x736>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a43      	ldr	r2, [pc, #268]	@ (800643c <HAL_ADC_ConfigChannel+0x840>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d101      	bne.n	8006336 <HAL_ADC_ConfigChannel+0x73a>
 8006332:	4a43      	ldr	r2, [pc, #268]	@ (8006440 <HAL_ADC_ConfigChannel+0x844>)
 8006334:	e000      	b.n	8006338 <HAL_ADC_ConfigChannel+0x73c>
 8006336:	4a3e      	ldr	r2, [pc, #248]	@ (8006430 <HAL_ADC_ConfigChannel+0x834>)
 8006338:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800633c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006340:	4619      	mov	r1, r3
 8006342:	4610      	mov	r0, r2
 8006344:	f7fe ffaf 	bl	80052a6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006348:	4b3e      	ldr	r3, [pc, #248]	@ (8006444 <HAL_ADC_ConfigChannel+0x848>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	099b      	lsrs	r3, r3, #6
 800634e:	4a3e      	ldr	r2, [pc, #248]	@ (8006448 <HAL_ADC_ConfigChannel+0x84c>)
 8006350:	fba2 2303 	umull	r2, r3, r2, r3
 8006354:	099b      	lsrs	r3, r3, #6
 8006356:	1c5a      	adds	r2, r3, #1
 8006358:	4613      	mov	r3, r2
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	4413      	add	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006362:	e002      	b.n	800636a <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3b01      	subs	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1f9      	bne.n	8006364 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006370:	e054      	b.n	800641c <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a35      	ldr	r2, [pc, #212]	@ (800644c <HAL_ADC_ConfigChannel+0x850>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d120      	bne.n	80063be <HAL_ADC_ConfigChannel+0x7c2>
 800637c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006380:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006384:	2b00      	cmp	r3, #0
 8006386:	d11a      	bne.n	80063be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006390:	d144      	bne.n	800641c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800639a:	d004      	beq.n	80063a6 <HAL_ADC_ConfigChannel+0x7aa>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a26      	ldr	r2, [pc, #152]	@ (800643c <HAL_ADC_ConfigChannel+0x840>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d101      	bne.n	80063aa <HAL_ADC_ConfigChannel+0x7ae>
 80063a6:	4a26      	ldr	r2, [pc, #152]	@ (8006440 <HAL_ADC_ConfigChannel+0x844>)
 80063a8:	e000      	b.n	80063ac <HAL_ADC_ConfigChannel+0x7b0>
 80063aa:	4a21      	ldr	r2, [pc, #132]	@ (8006430 <HAL_ADC_ConfigChannel+0x834>)
 80063ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063b4:	4619      	mov	r1, r3
 80063b6:	4610      	mov	r0, r2
 80063b8:	f7fe ff75 	bl	80052a6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063bc:	e02e      	b.n	800641c <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a23      	ldr	r2, [pc, #140]	@ (8006450 <HAL_ADC_ConfigChannel+0x854>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d129      	bne.n	800641c <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80063c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d123      	bne.n	800641c <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a18      	ldr	r2, [pc, #96]	@ (800643c <HAL_ADC_ConfigChannel+0x840>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d01e      	beq.n	800641c <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80063e6:	d004      	beq.n	80063f2 <HAL_ADC_ConfigChannel+0x7f6>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a13      	ldr	r2, [pc, #76]	@ (800643c <HAL_ADC_ConfigChannel+0x840>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d101      	bne.n	80063f6 <HAL_ADC_ConfigChannel+0x7fa>
 80063f2:	4a13      	ldr	r2, [pc, #76]	@ (8006440 <HAL_ADC_ConfigChannel+0x844>)
 80063f4:	e000      	b.n	80063f8 <HAL_ADC_ConfigChannel+0x7fc>
 80063f6:	4a0e      	ldr	r2, [pc, #56]	@ (8006430 <HAL_ADC_ConfigChannel+0x834>)
 80063f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80063fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006400:	4619      	mov	r1, r3
 8006402:	4610      	mov	r0, r2
 8006404:	f7fe ff4f 	bl	80052a6 <LL_ADC_SetCommonPathInternalCh>
 8006408:	e008      	b.n	800641c <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800640e:	f043 0220 	orr.w	r2, r3, #32
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006424:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006428:	4618      	mov	r0, r3
 800642a:	37d8      	adds	r7, #216	@ 0xd8
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	50000700 	.word	0x50000700
 8006434:	c3210000 	.word	0xc3210000
 8006438:	90c00010 	.word	0x90c00010
 800643c:	50000100 	.word	0x50000100
 8006440:	50000300 	.word	0x50000300
 8006444:	200004a8 	.word	0x200004a8
 8006448:	053e2d63 	.word	0x053e2d63
 800644c:	c7520000 	.word	0xc7520000
 8006450:	cb840000 	.word	0xcb840000

08006454 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f7ff f8e1 	bl	8005628 <LL_ADC_IsEnabled>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d14d      	bne.n	8006508 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689a      	ldr	r2, [r3, #8]
 8006472:	4b28      	ldr	r3, [pc, #160]	@ (8006514 <ADC_Enable+0xc0>)
 8006474:	4013      	ands	r3, r2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00d      	beq.n	8006496 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800647e:	f043 0210 	orr.w	r2, r3, #16
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800648a:	f043 0201 	orr.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	e039      	b.n	800650a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff f8b0 	bl	8005600 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80064a0:	f7fe fec0 	bl	8005224 <HAL_GetTick>
 80064a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064a6:	e028      	b.n	80064fa <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4618      	mov	r0, r3
 80064ae:	f7ff f8bb 	bl	8005628 <LL_ADC_IsEnabled>
 80064b2:	4603      	mov	r3, r0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4618      	mov	r0, r3
 80064be:	f7ff f89f 	bl	8005600 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80064c2:	f7fe feaf 	bl	8005224 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d914      	bls.n	80064fa <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d00d      	beq.n	80064fa <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064e2:	f043 0210 	orr.w	r2, r3, #16
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e007      	b.n	800650a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b01      	cmp	r3, #1
 8006506:	d1cf      	bne.n	80064a8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	8000003f 	.word	0x8000003f

08006518 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006524:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800652a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800652e:	2b00      	cmp	r3, #0
 8006530:	d14b      	bne.n	80065ca <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006536:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0308 	and.w	r3, r3, #8
 8006548:	2b00      	cmp	r3, #0
 800654a:	d021      	beq.n	8006590 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe ff67 	bl	8005424 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d032      	beq.n	80065c2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68db      	ldr	r3, [r3, #12]
 8006562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d12b      	bne.n	80065c2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800656e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800657a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d11f      	bne.n	80065c2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006586:	f043 0201 	orr.w	r2, r3, #1
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800658e:	e018      	b.n	80065c2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	d111      	bne.n	80065c2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065a2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d105      	bne.n	80065c2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f7ff fafc 	bl	8005bc0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80065c8:	e00e      	b.n	80065e8 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	f7ff fb06 	bl	8005be8 <HAL_ADC_ErrorCallback>
}
 80065dc:	e004      	b.n	80065e8 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	4798      	blx	r3
}
 80065e8:	bf00      	nop
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065fc:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f7ff fae8 	bl	8005bd4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800661e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800662a:	f043 0204 	orr.w	r2, r3, #4
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fad8 	bl	8005be8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006638:	bf00      	nop
 800663a:	3710      	adds	r7, #16
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <LL_ADC_IsEnabled>:
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f003 0301 	and.w	r3, r3, #1
 8006650:	2b01      	cmp	r3, #1
 8006652:	d101      	bne.n	8006658 <LL_ADC_IsEnabled+0x18>
 8006654:	2301      	movs	r3, #1
 8006656:	e000      	b.n	800665a <LL_ADC_IsEnabled+0x1a>
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr

08006666 <LL_ADC_REG_IsConversionOngoing>:
{
 8006666:	b480      	push	{r7}
 8006668:	b083      	sub	sp, #12
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d101      	bne.n	800667e <LL_ADC_REG_IsConversionOngoing+0x18>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800667e:	2300      	movs	r3, #0
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b0a1      	sub	sp, #132	@ 0x84
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
 8006694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006696:	2300      	movs	r3, #0
 8006698:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d101      	bne.n	80066aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80066a6:	2302      	movs	r3, #2
 80066a8:	e0cb      	b.n	8006842 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80066b2:	2300      	movs	r3, #0
 80066b4:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80066b6:	2300      	movs	r3, #0
 80066b8:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80066c2:	d102      	bne.n	80066ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066c4:	4b61      	ldr	r3, [pc, #388]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80066c6:	60bb      	str	r3, [r7, #8]
 80066c8:	e001      	b.n	80066ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066d8:	f043 0220 	orr.w	r2, r3, #32
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0aa      	b.n	8006842 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f7ff ffb9 	bl	8006666 <LL_ADC_REG_IsConversionOngoing>
 80066f4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff ffb3 	bl	8006666 <LL_ADC_REG_IsConversionOngoing>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	f040 808c 	bne.w	8006820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006708:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 8088 	bne.w	8006820 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006718:	d004      	beq.n	8006724 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a4b      	ldr	r2, [pc, #300]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006724:	4b4a      	ldr	r3, [pc, #296]	@ (8006850 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8006726:	e000      	b.n	800672a <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006728:	4b4a      	ldr	r3, [pc, #296]	@ (8006854 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 800672a:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d041      	beq.n	80067b8 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006734:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	6859      	ldr	r1, [r3, #4]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006746:	035b      	lsls	r3, r3, #13
 8006748:	430b      	orrs	r3, r1
 800674a:	431a      	orrs	r2, r3
 800674c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800674e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006758:	d004      	beq.n	8006764 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a3b      	ldr	r2, [pc, #236]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d10f      	bne.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006764:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006768:	f7ff ff6a 	bl	8006640 <LL_ADC_IsEnabled>
 800676c:	4604      	mov	r4, r0
 800676e:	4837      	ldr	r0, [pc, #220]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006770:	f7ff ff66 	bl	8006640 <LL_ADC_IsEnabled>
 8006774:	4603      	mov	r3, r0
 8006776:	4323      	orrs	r3, r4
 8006778:	2b00      	cmp	r3, #0
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	e008      	b.n	8006796 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8006784:	4834      	ldr	r0, [pc, #208]	@ (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006786:	f7ff ff5b 	bl	8006640 <LL_ADC_IsEnabled>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	bf0c      	ite	eq
 8006790:	2301      	moveq	r3, #1
 8006792:	2300      	movne	r3, #0
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d04c      	beq.n	8006834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800679a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80067a2:	f023 030f 	bic.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	6811      	ldr	r1, [r2, #0]
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	6892      	ldr	r2, [r2, #8]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	431a      	orrs	r2, r3
 80067b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067b6:	e03d      	b.n	8006834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80067b8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067cc:	d004      	beq.n	80067d8 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1e      	ldr	r2, [pc, #120]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d10f      	bne.n	80067f8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80067d8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80067dc:	f7ff ff30 	bl	8006640 <LL_ADC_IsEnabled>
 80067e0:	4604      	mov	r4, r0
 80067e2:	481a      	ldr	r0, [pc, #104]	@ (800684c <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80067e4:	f7ff ff2c 	bl	8006640 <LL_ADC_IsEnabled>
 80067e8:	4603      	mov	r3, r0
 80067ea:	4323      	orrs	r3, r4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	bf0c      	ite	eq
 80067f0:	2301      	moveq	r3, #1
 80067f2:	2300      	movne	r3, #0
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e008      	b.n	800680a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80067f8:	4817      	ldr	r0, [pc, #92]	@ (8006858 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80067fa:	f7ff ff21 	bl	8006640 <LL_ADC_IsEnabled>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	bf0c      	ite	eq
 8006804:	2301      	moveq	r3, #1
 8006806:	2300      	movne	r3, #0
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	d012      	beq.n	8006834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800680e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006816:	f023 030f 	bic.w	r3, r3, #15
 800681a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800681c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800681e:	e009      	b.n	8006834 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006824:	f043 0220 	orr.w	r2, r3, #32
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006832:	e000      	b.n	8006836 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006834:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800683e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006842:	4618      	mov	r0, r3
 8006844:	3784      	adds	r7, #132	@ 0x84
 8006846:	46bd      	mov	sp, r7
 8006848:	bd90      	pop	{r4, r7, pc}
 800684a:	bf00      	nop
 800684c:	50000100 	.word	0x50000100
 8006850:	50000300 	.word	0x50000300
 8006854:	50000700 	.word	0x50000700
 8006858:	50000400 	.word	0x50000400

0800685c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b082      	sub	sp, #8
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d101      	bne.n	800686e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e023      	b.n	80068b6 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d106      	bne.n	8006888 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fa74 	bl	8004d70 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3708      	adds	r7, #8
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f003 0307 	and.w	r3, r3, #7
 80068ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006904 <__NVIC_SetPriorityGrouping+0x44>)
 80068d2:	68db      	ldr	r3, [r3, #12]
 80068d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068d6:	68ba      	ldr	r2, [r7, #8]
 80068d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80068dc:	4013      	ands	r3, r2
 80068de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80068ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068f2:	4a04      	ldr	r2, [pc, #16]	@ (8006904 <__NVIC_SetPriorityGrouping+0x44>)
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	60d3      	str	r3, [r2, #12]
}
 80068f8:	bf00      	nop
 80068fa:	3714      	adds	r7, #20
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	e000ed00 	.word	0xe000ed00

08006908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006908:	b480      	push	{r7}
 800690a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800690c:	4b04      	ldr	r3, [pc, #16]	@ (8006920 <__NVIC_GetPriorityGrouping+0x18>)
 800690e:	68db      	ldr	r3, [r3, #12]
 8006910:	0a1b      	lsrs	r3, r3, #8
 8006912:	f003 0307 	and.w	r3, r3, #7
}
 8006916:	4618      	mov	r0, r3
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	e000ed00 	.word	0xe000ed00

08006924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	4603      	mov	r3, r0
 800692c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800692e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006932:	2b00      	cmp	r3, #0
 8006934:	db0b      	blt.n	800694e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006936:	79fb      	ldrb	r3, [r7, #7]
 8006938:	f003 021f 	and.w	r2, r3, #31
 800693c:	4907      	ldr	r1, [pc, #28]	@ (800695c <__NVIC_EnableIRQ+0x38>)
 800693e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006942:	095b      	lsrs	r3, r3, #5
 8006944:	2001      	movs	r0, #1
 8006946:	fa00 f202 	lsl.w	r2, r0, r2
 800694a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800694e:	bf00      	nop
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr
 800695a:	bf00      	nop
 800695c:	e000e100 	.word	0xe000e100

08006960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006960:	b480      	push	{r7}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	4603      	mov	r3, r0
 8006968:	6039      	str	r1, [r7, #0]
 800696a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800696c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006970:	2b00      	cmp	r3, #0
 8006972:	db0a      	blt.n	800698a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	490c      	ldr	r1, [pc, #48]	@ (80069ac <__NVIC_SetPriority+0x4c>)
 800697a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800697e:	0112      	lsls	r2, r2, #4
 8006980:	b2d2      	uxtb	r2, r2
 8006982:	440b      	add	r3, r1
 8006984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006988:	e00a      	b.n	80069a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	4908      	ldr	r1, [pc, #32]	@ (80069b0 <__NVIC_SetPriority+0x50>)
 8006990:	79fb      	ldrb	r3, [r7, #7]
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	3b04      	subs	r3, #4
 8006998:	0112      	lsls	r2, r2, #4
 800699a:	b2d2      	uxtb	r2, r2
 800699c:	440b      	add	r3, r1
 800699e:	761a      	strb	r2, [r3, #24]
}
 80069a0:	bf00      	nop
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	e000e100 	.word	0xe000e100
 80069b0:	e000ed00 	.word	0xe000ed00

080069b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	@ 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	f1c3 0307 	rsb	r3, r3, #7
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	bf28      	it	cs
 80069d2:	2304      	movcs	r3, #4
 80069d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	3304      	adds	r3, #4
 80069da:	2b06      	cmp	r3, #6
 80069dc:	d902      	bls.n	80069e4 <NVIC_EncodePriority+0x30>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	3b03      	subs	r3, #3
 80069e2:	e000      	b.n	80069e6 <NVIC_EncodePriority+0x32>
 80069e4:	2300      	movs	r3, #0
 80069e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	fa02 f303 	lsl.w	r3, r2, r3
 80069f2:	43da      	mvns	r2, r3
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	401a      	ands	r2, r3
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069fc:	f04f 31ff 	mov.w	r1, #4294967295
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	fa01 f303 	lsl.w	r3, r1, r3
 8006a06:	43d9      	mvns	r1, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006a0c:	4313      	orrs	r3, r2
         );
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3724      	adds	r7, #36	@ 0x24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
	...

08006a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a2c:	d301      	bcc.n	8006a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e00f      	b.n	8006a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a32:	4a0a      	ldr	r2, [pc, #40]	@ (8006a5c <SysTick_Config+0x40>)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	3b01      	subs	r3, #1
 8006a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a3a:	210f      	movs	r1, #15
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a40:	f7ff ff8e 	bl	8006960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a44:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <SysTick_Config+0x40>)
 8006a46:	2200      	movs	r2, #0
 8006a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a4a:	4b04      	ldr	r3, [pc, #16]	@ (8006a5c <SysTick_Config+0x40>)
 8006a4c:	2207      	movs	r2, #7
 8006a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3708      	adds	r7, #8
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	e000e010 	.word	0xe000e010

08006a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b082      	sub	sp, #8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f7ff ff29 	bl	80068c0 <__NVIC_SetPriorityGrouping>
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b086      	sub	sp, #24
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	60b9      	str	r1, [r7, #8]
 8006a80:	607a      	str	r2, [r7, #4]
 8006a82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006a84:	f7ff ff40 	bl	8006908 <__NVIC_GetPriorityGrouping>
 8006a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	6978      	ldr	r0, [r7, #20]
 8006a90:	f7ff ff90 	bl	80069b4 <NVIC_EncodePriority>
 8006a94:	4602      	mov	r2, r0
 8006a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7ff ff5f 	bl	8006960 <__NVIC_SetPriority>
}
 8006aa2:	bf00      	nop
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b082      	sub	sp, #8
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff ff33 	bl	8006924 <__NVIC_EnableIRQ>
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006ac6:	b580      	push	{r7, lr}
 8006ac8:	b082      	sub	sp, #8
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f7ff ffa4 	bl	8006a1c <SysTick_Config>
 8006ad4:	4603      	mov	r3, r0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3708      	adds	r7, #8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
	...

08006ae0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b082      	sub	sp, #8
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e054      	b.n	8006b9c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	7f5b      	ldrb	r3, [r3, #29]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7fe f954 	bl	8004db0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	791b      	ldrb	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10c      	bne.n	8006b30 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a22      	ldr	r2, [pc, #136]	@ (8006ba4 <HAL_CRC_Init+0xc4>)
 8006b1c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0218 	bic.w	r2, r2, #24
 8006b2c:	609a      	str	r2, [r3, #8]
 8006b2e:	e00c      	b.n	8006b4a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6899      	ldr	r1, [r3, #8]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68db      	ldr	r3, [r3, #12]
 8006b38:	461a      	mov	r2, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f834 	bl	8006ba8 <HAL_CRCEx_Polynomial_Set>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d001      	beq.n	8006b4a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e028      	b.n	8006b9c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	795b      	ldrb	r3, [r3, #5]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d105      	bne.n	8006b5e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f04f 32ff 	mov.w	r2, #4294967295
 8006b5a:	611a      	str	r2, [r3, #16]
 8006b5c:	e004      	b.n	8006b68 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6912      	ldr	r2, [r2, #16]
 8006b66:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	695a      	ldr	r2, [r3, #20]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	430a      	orrs	r2, r1
 8006b7c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	430a      	orrs	r2, r1
 8006b92:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}
 8006ba4:	04c11db7 	.word	0x04c11db7

08006ba8 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	60b9      	str	r1, [r7, #8]
 8006bb2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006bb8:	231f      	movs	r3, #31
 8006bba:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006bbc:	bf00      	nop
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1e5a      	subs	r2, r3, #1
 8006bc2:	613a      	str	r2, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <HAL_CRCEx_Polynomial_Set+0x34>
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f003 031f 	and.w	r3, r3, #31
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d0f0      	beq.n	8006bbe <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b18      	cmp	r3, #24
 8006be0:	d846      	bhi.n	8006c70 <HAL_CRCEx_Polynomial_Set+0xc8>
 8006be2:	a201      	add	r2, pc, #4	@ (adr r2, 8006be8 <HAL_CRCEx_Polynomial_Set+0x40>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006c77 	.word	0x08006c77
 8006bec:	08006c71 	.word	0x08006c71
 8006bf0:	08006c71 	.word	0x08006c71
 8006bf4:	08006c71 	.word	0x08006c71
 8006bf8:	08006c71 	.word	0x08006c71
 8006bfc:	08006c71 	.word	0x08006c71
 8006c00:	08006c71 	.word	0x08006c71
 8006c04:	08006c71 	.word	0x08006c71
 8006c08:	08006c65 	.word	0x08006c65
 8006c0c:	08006c71 	.word	0x08006c71
 8006c10:	08006c71 	.word	0x08006c71
 8006c14:	08006c71 	.word	0x08006c71
 8006c18:	08006c71 	.word	0x08006c71
 8006c1c:	08006c71 	.word	0x08006c71
 8006c20:	08006c71 	.word	0x08006c71
 8006c24:	08006c71 	.word	0x08006c71
 8006c28:	08006c59 	.word	0x08006c59
 8006c2c:	08006c71 	.word	0x08006c71
 8006c30:	08006c71 	.word	0x08006c71
 8006c34:	08006c71 	.word	0x08006c71
 8006c38:	08006c71 	.word	0x08006c71
 8006c3c:	08006c71 	.word	0x08006c71
 8006c40:	08006c71 	.word	0x08006c71
 8006c44:	08006c71 	.word	0x08006c71
 8006c48:	08006c4d 	.word	0x08006c4d
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b06      	cmp	r3, #6
 8006c50:	d913      	bls.n	8006c7a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c56:	e010      	b.n	8006c7a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	2b07      	cmp	r3, #7
 8006c5c:	d90f      	bls.n	8006c7e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c62:	e00c      	b.n	8006c7e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	2b0f      	cmp	r3, #15
 8006c68:	d90b      	bls.n	8006c82 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006c6e:	e008      	b.n	8006c82 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	75fb      	strb	r3, [r7, #23]
      break;
 8006c74:	e006      	b.n	8006c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c76:	bf00      	nop
 8006c78:	e004      	b.n	8006c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c7a:	bf00      	nop
 8006c7c:	e002      	b.n	8006c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c7e:	bf00      	nop
 8006c80:	e000      	b.n	8006c84 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8006c82:	bf00      	nop
  }
  if (status == HAL_OK)
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10d      	bne.n	8006ca6 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	f023 0118 	bic.w	r1, r3, #24
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ca8:	4618      	mov	r0, r3
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d101      	bne.n	8006cc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e08d      	b.n	8006de2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	461a      	mov	r2, r3
 8006ccc:	4b47      	ldr	r3, [pc, #284]	@ (8006dec <HAL_DMA_Init+0x138>)
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d80f      	bhi.n	8006cf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	4b45      	ldr	r3, [pc, #276]	@ (8006df0 <HAL_DMA_Init+0x13c>)
 8006cda:	4413      	add	r3, r2
 8006cdc:	4a45      	ldr	r2, [pc, #276]	@ (8006df4 <HAL_DMA_Init+0x140>)
 8006cde:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce2:	091b      	lsrs	r3, r3, #4
 8006ce4:	009a      	lsls	r2, r3, #2
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4a42      	ldr	r2, [pc, #264]	@ (8006df8 <HAL_DMA_Init+0x144>)
 8006cee:	641a      	str	r2, [r3, #64]	@ 0x40
 8006cf0:	e00e      	b.n	8006d10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	4b40      	ldr	r3, [pc, #256]	@ (8006dfc <HAL_DMA_Init+0x148>)
 8006cfa:	4413      	add	r3, r2
 8006cfc:	4a3d      	ldr	r2, [pc, #244]	@ (8006df4 <HAL_DMA_Init+0x140>)
 8006cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8006d02:	091b      	lsrs	r3, r3, #4
 8006d04:	009a      	lsls	r2, r3, #2
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8006e00 <HAL_DMA_Init+0x14c>)
 8006d0e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2202      	movs	r2, #2
 8006d14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	699b      	ldr	r3, [r3, #24]
 8006d46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d54:	68fa      	ldr	r2, [r7, #12]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f9b6 	bl	80070d4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	689b      	ldr	r3, [r3, #8]
 8006d6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006d70:	d102      	bne.n	8006d78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006d8c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d010      	beq.n	8006db8 <HAL_DMA_Init+0x104>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b04      	cmp	r3, #4
 8006d9c:	d80c      	bhi.n	8006db8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 f9d6 	bl	8007150 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006da8:	2200      	movs	r2, #0
 8006daa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	e008      	b.n	8006dca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	40020407 	.word	0x40020407
 8006df0:	bffdfff8 	.word	0xbffdfff8
 8006df4:	cccccccd 	.word	0xcccccccd
 8006df8:	40020000 	.word	0x40020000
 8006dfc:	bffdfbf8 	.word	0xbffdfbf8
 8006e00:	40020400 	.word	0x40020400

08006e04 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e12:	2300      	movs	r3, #0
 8006e14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d101      	bne.n	8006e24 <HAL_DMA_Start_IT+0x20>
 8006e20:	2302      	movs	r3, #2
 8006e22:	e066      	b.n	8006ef2 <HAL_DMA_Start_IT+0xee>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d155      	bne.n	8006ee4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2202      	movs	r2, #2
 8006e3c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	68b9      	ldr	r1, [r7, #8]
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f8fb 	bl	8007058 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d008      	beq.n	8006e7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 020e 	orr.w	r2, r2, #14
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	e00f      	b.n	8006e9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f022 0204 	bic.w	r2, r2, #4
 8006e8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f042 020a 	orr.w	r2, r2, #10
 8006e9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006eb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006eb8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d007      	beq.n	8006ed2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ecc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ed0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f042 0201 	orr.w	r2, r2, #1
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	e005      	b.n	8006ef0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2200      	movs	r2, #0
 8006ee8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006eec:	2302      	movs	r3, #2
 8006eee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	b084      	sub	sp, #16
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	409a      	lsls	r2, r3
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4013      	ands	r3, r2
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d026      	beq.n	8006f74 <HAL_DMA_IRQHandler+0x7a>
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d021      	beq.n	8006f74 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0320 	and.w	r3, r3, #32
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d107      	bne.n	8006f4e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0204 	bic.w	r2, r2, #4
 8006f4c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f52:	f003 021f 	and.w	r2, r3, #31
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f5a:	2104      	movs	r1, #4
 8006f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8006f60:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d071      	beq.n	800704e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006f72:	e06c      	b.n	800704e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f78:	f003 031f 	and.w	r3, r3, #31
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4013      	ands	r3, r2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d02e      	beq.n	8006fe6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0302 	and.w	r3, r3, #2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d029      	beq.n	8006fe6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0320 	and.w	r3, r3, #32
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d10b      	bne.n	8006fb8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 020a 	bic.w	r2, r2, #10
 8006fae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fbc:	f003 021f 	and.w	r2, r3, #31
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	2102      	movs	r1, #2
 8006fc6:	fa01 f202 	lsl.w	r2, r1, r2
 8006fca:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d038      	beq.n	800704e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006fe4:	e033      	b.n	800704e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fea:	f003 031f 	and.w	r3, r3, #31
 8006fee:	2208      	movs	r2, #8
 8006ff0:	409a      	lsls	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d02a      	beq.n	8007050 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	f003 0308 	and.w	r3, r3, #8
 8007000:	2b00      	cmp	r3, #0
 8007002:	d025      	beq.n	8007050 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 020e 	bic.w	r2, r2, #14
 8007012:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007018:	f003 021f 	and.w	r2, r3, #31
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007020:	2101      	movs	r1, #1
 8007022:	fa01 f202 	lsl.w	r2, r1, r2
 8007026:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800704e:	bf00      	nop
 8007050:	bf00      	nop
}
 8007052:	3710      	adds	r7, #16
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007058:	b480      	push	{r7}
 800705a:	b085      	sub	sp, #20
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800706e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007074:	2b00      	cmp	r3, #0
 8007076:	d004      	beq.n	8007082 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007080:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007086:	f003 021f 	and.w	r2, r3, #31
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708e:	2101      	movs	r1, #1
 8007090:	fa01 f202 	lsl.w	r2, r1, r2
 8007094:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	683a      	ldr	r2, [r7, #0]
 800709c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d108      	bne.n	80070b8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80070b6:	e007      	b.n	80070c8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	687a      	ldr	r2, [r7, #4]
 80070c6:	60da      	str	r2, [r3, #12]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b087      	sub	sp, #28
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	461a      	mov	r2, r3
 80070e2:	4b16      	ldr	r3, [pc, #88]	@ (800713c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d802      	bhi.n	80070ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80070e8:	4b15      	ldr	r3, [pc, #84]	@ (8007140 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80070ea:	617b      	str	r3, [r7, #20]
 80070ec:	e001      	b.n	80070f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80070ee:	4b15      	ldr	r3, [pc, #84]	@ (8007144 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80070f0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	3b08      	subs	r3, #8
 80070fe:	4a12      	ldr	r2, [pc, #72]	@ (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007100:	fba2 2303 	umull	r2, r3, r2, r3
 8007104:	091b      	lsrs	r3, r3, #4
 8007106:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800710c:	089b      	lsrs	r3, r3, #2
 800710e:	009a      	lsls	r2, r3, #2
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	4413      	add	r3, r2
 8007114:	461a      	mov	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a0b      	ldr	r2, [pc, #44]	@ (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800711e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f003 031f 	and.w	r3, r3, #31
 8007126:	2201      	movs	r2, #1
 8007128:	409a      	lsls	r2, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop
 800713c:	40020407 	.word	0x40020407
 8007140:	40020800 	.word	0x40020800
 8007144:	40020820 	.word	0x40020820
 8007148:	cccccccd 	.word	0xcccccccd
 800714c:	40020880 	.word	0x40020880

08007150 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	b2db      	uxtb	r3, r3
 800715e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	4b0b      	ldr	r3, [pc, #44]	@ (8007190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	461a      	mov	r2, r3
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a08      	ldr	r2, [pc, #32]	@ (8007194 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007172:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	3b01      	subs	r3, #1
 8007178:	f003 031f 	and.w	r3, r3, #31
 800717c:	2201      	movs	r2, #1
 800717e:	409a      	lsls	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007184:	bf00      	nop
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	1000823f 	.word	0x1000823f
 8007194:	40020940 	.word	0x40020940

08007198 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d101      	bne.n	80071aa <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	e147      	b.n	800743a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80071b0:	b2db      	uxtb	r3, r3
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d106      	bne.n	80071c4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f7fd fe16 	bl	8004df0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	699a      	ldr	r2, [r3, #24]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 0210 	bic.w	r2, r2, #16
 80071d2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071d4:	f7fe f826 	bl	8005224 <HAL_GetTick>
 80071d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071da:	e012      	b.n	8007202 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071dc:	f7fe f822 	bl	8005224 <HAL_GetTick>
 80071e0:	4602      	mov	r2, r0
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	1ad3      	subs	r3, r2, r3
 80071e6:	2b0a      	cmp	r3, #10
 80071e8:	d90b      	bls.n	8007202 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ee:	f043 0201 	orr.w	r2, r3, #1
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2203      	movs	r2, #3
 80071fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e11b      	b.n	800743a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	f003 0308 	and.w	r3, r3, #8
 800720c:	2b08      	cmp	r3, #8
 800720e:	d0e5      	beq.n	80071dc <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	699a      	ldr	r2, [r3, #24]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007220:	f7fe f800 	bl	8005224 <HAL_GetTick>
 8007224:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007226:	e012      	b.n	800724e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007228:	f7fd fffc 	bl	8005224 <HAL_GetTick>
 800722c:	4602      	mov	r2, r0
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	2b0a      	cmp	r3, #10
 8007234:	d90b      	bls.n	800724e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800723a:	f043 0201 	orr.w	r2, r3, #1
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2203      	movs	r2, #3
 8007246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e0f5      	b.n	800743a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	699b      	ldr	r3, [r3, #24]
 8007254:	f003 0301 	and.w	r3, r3, #1
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0e5      	beq.n	8007228 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	699a      	ldr	r2, [r3, #24]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0202 	orr.w	r2, r2, #2
 800726a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a74      	ldr	r2, [pc, #464]	@ (8007444 <HAL_FDCAN_Init+0x2ac>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d103      	bne.n	800727e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007276:	4a74      	ldr	r2, [pc, #464]	@ (8007448 <HAL_FDCAN_Init+0x2b0>)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	7c1b      	ldrb	r3, [r3, #16]
 8007282:	2b01      	cmp	r3, #1
 8007284:	d108      	bne.n	8007298 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	699a      	ldr	r2, [r3, #24]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007294:	619a      	str	r2, [r3, #24]
 8007296:	e007      	b.n	80072a8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072a6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	7c5b      	ldrb	r3, [r3, #17]
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d108      	bne.n	80072c2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	699a      	ldr	r2, [r3, #24]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80072be:	619a      	str	r2, [r3, #24]
 80072c0:	e007      	b.n	80072d2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80072d0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	7c9b      	ldrb	r3, [r3, #18]
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d108      	bne.n	80072ec <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80072e8:	619a      	str	r2, [r3, #24]
 80072ea:	e007      	b.n	80072fc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80072fa:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	430a      	orrs	r2, r1
 8007310:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007320:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f022 0210 	bic.w	r2, r2, #16
 8007330:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	2b01      	cmp	r3, #1
 8007338:	d108      	bne.n	800734c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	699a      	ldr	r2, [r3, #24]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f042 0204 	orr.w	r2, r2, #4
 8007348:	619a      	str	r2, [r3, #24]
 800734a:	e02c      	b.n	80073a6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d028      	beq.n	80073a6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	2b02      	cmp	r3, #2
 800735a:	d01c      	beq.n	8007396 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	699a      	ldr	r2, [r3, #24]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800736a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	691a      	ldr	r2, [r3, #16]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f042 0210 	orr.w	r2, r2, #16
 800737a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	68db      	ldr	r3, [r3, #12]
 8007380:	2b03      	cmp	r3, #3
 8007382:	d110      	bne.n	80073a6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f042 0220 	orr.w	r2, r2, #32
 8007392:	619a      	str	r2, [r3, #24]
 8007394:	e007      	b.n	80073a6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	699a      	ldr	r2, [r3, #24]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f042 0220 	orr.w	r2, r2, #32
 80073a4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	3b01      	subs	r3, #1
 80073ac:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	3b01      	subs	r3, #1
 80073b4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073b6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6a1b      	ldr	r3, [r3, #32]
 80073bc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80073be:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80073ce:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80073d0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80073da:	d115      	bne.n	8007408 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e6:	3b01      	subs	r3, #1
 80073e8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80073ea:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073f0:	3b01      	subs	r3, #1
 80073f2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80073f4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	3b01      	subs	r3, #1
 80073fe:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007404:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007406:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fa4c 	bl	80078bc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2201      	movs	r2, #1
 8007434:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007438:	2300      	movs	r3, #0
}
 800743a:	4618      	mov	r0, r3
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	40006400 	.word	0x40006400
 8007448:	40006500 	.word	0x40006500

0800744c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800745c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800745e:	7dfb      	ldrb	r3, [r7, #23]
 8007460:	2b01      	cmp	r3, #1
 8007462:	d002      	beq.n	800746a <HAL_FDCAN_ConfigFilter+0x1e>
 8007464:	7dfb      	ldrb	r3, [r7, #23]
 8007466:	2b02      	cmp	r3, #2
 8007468:	d13d      	bne.n	80074e6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d119      	bne.n	80074a6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800747e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	691b      	ldr	r3, [r3, #16]
 8007484:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007486:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800748c:	4313      	orrs	r3, r2
 800748e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	e01d      	b.n	80074e2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	075a      	lsls	r2, r3, #29
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	079a      	lsls	r2, r3, #30
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	695b      	ldr	r3, [r3, #20]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4413      	add	r3, r2
 80074ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	3304      	adds	r3, #4
 80074da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e006      	b.n	80074f4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80074ea:	f043 0202 	orr.w	r2, r3, #2
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
  }
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007500:	b480      	push	{r7}
 8007502:	b085      	sub	sp, #20
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
 800750c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b01      	cmp	r3, #1
 8007518:	d116      	bne.n	8007548 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007522:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	011a      	lsls	r2, r3, #4
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	431a      	orrs	r2, r3
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	005b      	lsls	r3, r3, #1
 8007534:	431a      	orrs	r2, r3
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	431a      	orrs	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	e006      	b.n	8007556 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800754c:	f043 0204 	orr.w	r2, r3, #4
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
  }
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b08a      	sub	sp, #40	@ 0x28
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007570:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8007574:	627b      	str	r3, [r7, #36]	@ 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800757c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800757e:	4013      	ands	r3, r2
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	4013      	ands	r3, r2
 8007598:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80075a4:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	4013      	ands	r3, r2
 80075b0:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075b8:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80075bc:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4013      	ands	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075d0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80075d4:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075dc:	697a      	ldr	r2, [r7, #20]
 80075de:	4013      	ands	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00d      	beq.n	800760c <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d006      	beq.n	800760c <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2240      	movs	r2, #64	@ 0x40
 8007604:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f939 	bl	800787e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d01b      	beq.n	8007652 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d014      	beq.n	8007652 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007630:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	4013      	ands	r3, r2
 800763e:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007648:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800764a:	6939      	ldr	r1, [r7, #16]
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f000 f8f7 	bl	8007840 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800765e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007660:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8b6 	bl	80077d4 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d007      	beq.n	800767e <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	6a3a      	ldr	r2, [r7, #32]
 8007674:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007676:	6a39      	ldr	r1, [r7, #32]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8b6 	bl	80077ea <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d007      	beq.n	8007694 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800768c:	69f9      	ldr	r1, [r7, #28]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 f8b6 	bl	8007800 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800769a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00e      	beq.n	80076c0 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d007      	beq.n	80076c0 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076b8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 f8ab 	bl	8007816 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d01a      	beq.n	8007704 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d013      	beq.n	8007704 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80076e4:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4013      	ands	r3, r2
 80076f2:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2280      	movs	r2, #128	@ 0x80
 80076fa:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80076fc:	68f9      	ldr	r1, [r7, #12]
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f000 f893 	bl	800782a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00e      	beq.n	8007730 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007718:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d007      	beq.n	8007730 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007728:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f893 	bl	8007856 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00e      	beq.n	800775c <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007754:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f887 	bl	800786a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007762:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d011      	beq.n	800778e <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007780:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007786:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d007      	beq.n	80077a4 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800779c:	6979      	ldr	r1, [r7, #20]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f881 	bl	80078a6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d009      	beq.n	80077be <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69ba      	ldr	r2, [r7, #24]
 80077b0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	431a      	orrs	r2, r3
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f863 	bl	8007892 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077cc:	bf00      	nop
 80077ce:	3728      	adds	r7, #40	@ 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80077de:	bf00      	nop
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800780a:	bf00      	nop
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr

08007816 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007816:	b480      	push	{r7}
 8007818:	b083      	sub	sp, #12
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800781e:	bf00      	nop
 8007820:	370c      	adds	r7, #12
 8007822:	46bd      	mov	sp, r7
 8007824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007828:	4770      	bx	lr

0800782a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800782a:	b480      	push	{r7}
 800782c:	b083      	sub	sp, #12
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
 8007832:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800784a:	bf00      	nop
 800784c:	370c      	adds	r7, #12
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007856:	b480      	push	{r7}
 8007858:	b083      	sub	sp, #12
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800785e:	bf00      	nop
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800789a:	bf00      	nop
 800789c:	370c      	adds	r7, #12
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b083      	sub	sp, #12
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	6078      	str	r0, [r7, #4]
 80078ae:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80078c4:	4b2c      	ldr	r3, [pc, #176]	@ (8007978 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80078c6:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a2b      	ldr	r2, [pc, #172]	@ (800797c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d103      	bne.n	80078da <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80078d8:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e8:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f0:	041a      	lsls	r2, r3, #16
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	430a      	orrs	r2, r1
 80078f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800790e:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007916:	061a      	lsls	r2, r3, #24
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800792c:	68bb      	ldr	r3, [r7, #8]
 800792e:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	60fb      	str	r3, [r7, #12]
 800794e:	e005      	b.n	800795c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	3304      	adds	r3, #4
 800795a:	60fb      	str	r3, [r7, #12]
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	429a      	cmp	r2, r3
 8007966:	d3f3      	bcc.n	8007950 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	4000a400 	.word	0x4000a400
 800797c:	40006800 	.word	0x40006800

08007980 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e033      	b.n	80079fa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d106      	bne.n	80079ac <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2200      	movs	r2, #0
 80079a2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f7fd fa84 	bl	8004eb4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f854 	bl	8007a60 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f000 f822 	bl	8007a02 <FMAC_Reset>
 80079be:	4603      	mov	r3, r0
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d10c      	bne.n	80079de <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079c8:	f043 0210 	orr.w	r2, r3, #16
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	22a0      	movs	r2, #160	@ 0xa0
 80079d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
 80079dc:	e008      	b.n	80079f0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 80079ec:	2300      	movs	r3, #0
 80079ee:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80079f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b084      	sub	sp, #16
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a0a:	f7fd fc0b 	bl	8005224 <HAL_GetTick>
 8007a0e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	691a      	ldr	r2, [r3, #16]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007a1e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a20:	e00f      	b.n	8007a42 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007a22:	f7fd fbff 	bl	8005224 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007a30:	d907      	bls.n	8007a42 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a36:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e00a      	b.n	8007a58 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e8      	bne.n	8007a22 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8007a56:	2300      	movs	r3, #0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 f807 	bl	8007a7c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007a6e:	6878      	ldr	r0, [r7, #4]
 8007a70:	f000 f81b 	bl	8007aaa <FMAC_ResetOutputStateAndDataPointers>
}
 8007a74:	bf00      	nop
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2220      	movs	r2, #32
 8007a9a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr

08007aaa <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007aaa:	b480      	push	{r7}
 8007aac:	b083      	sub	sp, #12
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2220      	movs	r2, #32
 8007ac8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b087      	sub	sp, #28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
 8007ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007ae6:	e15a      	b.n	8007d9e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681a      	ldr	r2, [r3, #0]
 8007aec:	2101      	movs	r1, #1
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	fa01 f303 	lsl.w	r3, r1, r3
 8007af4:	4013      	ands	r3, r2
 8007af6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 814c 	beq.w	8007d98 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f003 0303 	and.w	r3, r3, #3
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d005      	beq.n	8007b18 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d130      	bne.n	8007b7a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	005b      	lsls	r3, r3, #1
 8007b22:	2203      	movs	r2, #3
 8007b24:	fa02 f303 	lsl.w	r3, r2, r3
 8007b28:	43db      	mvns	r3, r3
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	005b      	lsls	r3, r3, #1
 8007b38:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	685b      	ldr	r3, [r3, #4]
 8007b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b4e:	2201      	movs	r2, #1
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43db      	mvns	r3, r3
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	091b      	lsrs	r3, r3, #4
 8007b64:	f003 0201 	and.w	r2, r3, #1
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f003 0303 	and.w	r3, r3, #3
 8007b82:	2b03      	cmp	r3, #3
 8007b84:	d017      	beq.n	8007bb6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	68db      	ldr	r3, [r3, #12]
 8007b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	005b      	lsls	r3, r3, #1
 8007b90:	2203      	movs	r2, #3
 8007b92:	fa02 f303 	lsl.w	r3, r2, r3
 8007b96:	43db      	mvns	r3, r3
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	689a      	ldr	r2, [r3, #8]
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	693a      	ldr	r2, [r7, #16]
 8007bb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f003 0303 	and.w	r3, r3, #3
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d123      	bne.n	8007c0a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	08da      	lsrs	r2, r3, #3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	3208      	adds	r2, #8
 8007bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f003 0307 	and.w	r3, r3, #7
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	220f      	movs	r2, #15
 8007bda:	fa02 f303 	lsl.w	r3, r2, r3
 8007bde:	43db      	mvns	r3, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4013      	ands	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	691a      	ldr	r2, [r3, #16]
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f003 0307 	and.w	r3, r3, #7
 8007bf0:	009b      	lsls	r3, r3, #2
 8007bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf6:	693a      	ldr	r2, [r7, #16]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007bfc:	697b      	ldr	r3, [r7, #20]
 8007bfe:	08da      	lsrs	r2, r3, #3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	3208      	adds	r2, #8
 8007c04:	6939      	ldr	r1, [r7, #16]
 8007c06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	005b      	lsls	r3, r3, #1
 8007c14:	2203      	movs	r2, #3
 8007c16:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	693a      	ldr	r2, [r7, #16]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f003 0203 	and.w	r2, r3, #3
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c32:	693a      	ldr	r2, [r7, #16]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	693a      	ldr	r2, [r7, #16]
 8007c3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 80a6 	beq.w	8007d98 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8007dbc <HAL_GPIO_Init+0x2e4>)
 8007c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c50:	4a5a      	ldr	r2, [pc, #360]	@ (8007dbc <HAL_GPIO_Init+0x2e4>)
 8007c52:	f043 0301 	orr.w	r3, r3, #1
 8007c56:	6613      	str	r3, [r2, #96]	@ 0x60
 8007c58:	4b58      	ldr	r3, [pc, #352]	@ (8007dbc <HAL_GPIO_Init+0x2e4>)
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	60bb      	str	r3, [r7, #8]
 8007c62:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c64:	4a56      	ldr	r2, [pc, #344]	@ (8007dc0 <HAL_GPIO_Init+0x2e8>)
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	089b      	lsrs	r3, r3, #2
 8007c6a:	3302      	adds	r3, #2
 8007c6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f003 0303 	and.w	r3, r3, #3
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	220f      	movs	r2, #15
 8007c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c80:	43db      	mvns	r3, r3
 8007c82:	693a      	ldr	r2, [r7, #16]
 8007c84:	4013      	ands	r3, r2
 8007c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8007c8e:	d01f      	beq.n	8007cd0 <HAL_GPIO_Init+0x1f8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4a4c      	ldr	r2, [pc, #304]	@ (8007dc4 <HAL_GPIO_Init+0x2ec>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d019      	beq.n	8007ccc <HAL_GPIO_Init+0x1f4>
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	4a4b      	ldr	r2, [pc, #300]	@ (8007dc8 <HAL_GPIO_Init+0x2f0>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d013      	beq.n	8007cc8 <HAL_GPIO_Init+0x1f0>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4a4a      	ldr	r2, [pc, #296]	@ (8007dcc <HAL_GPIO_Init+0x2f4>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d00d      	beq.n	8007cc4 <HAL_GPIO_Init+0x1ec>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4a49      	ldr	r2, [pc, #292]	@ (8007dd0 <HAL_GPIO_Init+0x2f8>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d007      	beq.n	8007cc0 <HAL_GPIO_Init+0x1e8>
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	4a48      	ldr	r2, [pc, #288]	@ (8007dd4 <HAL_GPIO_Init+0x2fc>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d101      	bne.n	8007cbc <HAL_GPIO_Init+0x1e4>
 8007cb8:	2305      	movs	r3, #5
 8007cba:	e00a      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007cbc:	2306      	movs	r3, #6
 8007cbe:	e008      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007cc0:	2304      	movs	r3, #4
 8007cc2:	e006      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e004      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007cc8:	2302      	movs	r3, #2
 8007cca:	e002      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e000      	b.n	8007cd2 <HAL_GPIO_Init+0x1fa>
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	f002 0203 	and.w	r2, r2, #3
 8007cd8:	0092      	lsls	r2, r2, #2
 8007cda:	4093      	lsls	r3, r2
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ce2:	4937      	ldr	r1, [pc, #220]	@ (8007dc0 <HAL_GPIO_Init+0x2e8>)
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	089b      	lsrs	r3, r3, #2
 8007ce8:	3302      	adds	r3, #2
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cf0:	4b39      	ldr	r3, [pc, #228]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d14:	4a30      	ldr	r2, [pc, #192]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d1a:	4b2f      	ldr	r3, [pc, #188]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	43db      	mvns	r3, r3
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4013      	ands	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007d3e:	4a26      	ldr	r2, [pc, #152]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d44:	4b24      	ldr	r3, [pc, #144]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	43db      	mvns	r3, r3
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	4013      	ands	r3, r2
 8007d52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d68:	4a1b      	ldr	r2, [pc, #108]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	43db      	mvns	r3, r3
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d003      	beq.n	8007d92 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d92:	4a11      	ldr	r2, [pc, #68]	@ (8007dd8 <HAL_GPIO_Init+0x300>)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	fa22 f303 	lsr.w	r3, r2, r3
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f47f ae9d 	bne.w	8007ae8 <HAL_GPIO_Init+0x10>
  }
}
 8007dae:	bf00      	nop
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	40021000 	.word	0x40021000
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	48000400 	.word	0x48000400
 8007dc8:	48000800 	.word	0x48000800
 8007dcc:	48000c00 	.word	0x48000c00
 8007dd0:	48001000 	.word	0x48001000
 8007dd4:	48001400 	.word	0x48001400
 8007dd8:	40010400 	.word	0x40010400

08007ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	460b      	mov	r3, r1
 8007de6:	807b      	strh	r3, [r7, #2]
 8007de8:	4613      	mov	r3, r2
 8007dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dec:	787b      	ldrb	r3, [r7, #1]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d003      	beq.n	8007dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007df8:	e002      	b.n	8007e00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dfa:	887a      	ldrh	r2, [r7, #2]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b085      	sub	sp, #20
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d141      	bne.n	8007e9e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e1a:	4b4b      	ldr	r3, [pc, #300]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e26:	d131      	bne.n	8007e8c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e28:	4b47      	ldr	r3, [pc, #284]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e2e:	4a46      	ldr	r2, [pc, #280]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e38:	4b43      	ldr	r3, [pc, #268]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e40:	4a41      	ldr	r2, [pc, #260]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e46:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e48:	4b40      	ldr	r3, [pc, #256]	@ (8007f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2232      	movs	r2, #50	@ 0x32
 8007e4e:	fb02 f303 	mul.w	r3, r2, r3
 8007e52:	4a3f      	ldr	r2, [pc, #252]	@ (8007f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e54:	fba2 2303 	umull	r2, r3, r2, r3
 8007e58:	0c9b      	lsrs	r3, r3, #18
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e5e:	e002      	b.n	8007e66 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e66:	4b38      	ldr	r3, [pc, #224]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e68:	695b      	ldr	r3, [r3, #20]
 8007e6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e72:	d102      	bne.n	8007e7a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f2      	bne.n	8007e60 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e7a:	4b33      	ldr	r3, [pc, #204]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e7c:	695b      	ldr	r3, [r3, #20]
 8007e7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007e82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e86:	d158      	bne.n	8007f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e057      	b.n	8007f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e8c:	4b2e      	ldr	r3, [pc, #184]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e92:	4a2d      	ldr	r2, [pc, #180]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007e9c:	e04d      	b.n	8007f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ea4:	d141      	bne.n	8007f2a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ea6:	4b28      	ldr	r3, [pc, #160]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007eae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007eb2:	d131      	bne.n	8007f18 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007eb4:	4b24      	ldr	r3, [pc, #144]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eba:	4a23      	ldr	r2, [pc, #140]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ec0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ec4:	4b20      	ldr	r3, [pc, #128]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007ecc:	4a1e      	ldr	r2, [pc, #120]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ece:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007ed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8007f4c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2232      	movs	r2, #50	@ 0x32
 8007eda:	fb02 f303 	mul.w	r3, r2, r3
 8007ede:	4a1c      	ldr	r2, [pc, #112]	@ (8007f50 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee4:	0c9b      	lsrs	r3, r3, #18
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eea:	e002      	b.n	8007ef2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ef2:	4b15      	ldr	r3, [pc, #84]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef4:	695b      	ldr	r3, [r3, #20]
 8007ef6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007efe:	d102      	bne.n	8007f06 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1f2      	bne.n	8007eec <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f06:	4b10      	ldr	r3, [pc, #64]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f08:	695b      	ldr	r3, [r3, #20]
 8007f0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f12:	d112      	bne.n	8007f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f14:	2303      	movs	r3, #3
 8007f16:	e011      	b.n	8007f3c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f24:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007f28:	e007      	b.n	8007f3a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f2a:	4b07      	ldr	r3, [pc, #28]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f32:	4a05      	ldr	r2, [pc, #20]	@ (8007f48 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f34:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f38:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	40007000 	.word	0x40007000
 8007f4c:	200004a8 	.word	0x200004a8
 8007f50:	431bde83 	.word	0x431bde83

08007f54 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007f54:	b480      	push	{r7}
 8007f56:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007f58:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	4a04      	ldr	r2, [pc, #16]	@ (8007f70 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f62:	6093      	str	r3, [r2, #8]
}
 8007f64:	bf00      	nop
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40007000 	.word	0x40007000

08007f74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b088      	sub	sp, #32
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d101      	bne.n	8007f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e306      	b.n	8008594 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0301 	and.w	r3, r3, #1
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d075      	beq.n	800807e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f92:	4b97      	ldr	r3, [pc, #604]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	f003 030c 	and.w	r3, r3, #12
 8007f9a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f9c:	4b94      	ldr	r3, [pc, #592]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f003 0303 	and.w	r3, r3, #3
 8007fa4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	2b0c      	cmp	r3, #12
 8007faa:	d102      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x3e>
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	2b03      	cmp	r3, #3
 8007fb0:	d002      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x44>
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	2b08      	cmp	r3, #8
 8007fb6:	d10b      	bne.n	8007fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fb8:	4b8d      	ldr	r3, [pc, #564]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d05b      	beq.n	800807c <HAL_RCC_OscConfig+0x108>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d157      	bne.n	800807c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e2e1      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x74>
 8007fda:	4b85      	ldr	r3, [pc, #532]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a84      	ldr	r2, [pc, #528]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007fe0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e01d      	b.n	8008024 <HAL_RCC_OscConfig+0xb0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007ff0:	d10c      	bne.n	800800c <HAL_RCC_OscConfig+0x98>
 8007ff2:	4b7f      	ldr	r3, [pc, #508]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a7e      	ldr	r2, [pc, #504]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8007ff8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ffc:	6013      	str	r3, [r2, #0]
 8007ffe:	4b7c      	ldr	r3, [pc, #496]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a7b      	ldr	r2, [pc, #492]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008004:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e00b      	b.n	8008024 <HAL_RCC_OscConfig+0xb0>
 800800c:	4b78      	ldr	r3, [pc, #480]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a77      	ldr	r2, [pc, #476]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008012:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008016:	6013      	str	r3, [r2, #0]
 8008018:	4b75      	ldr	r3, [pc, #468]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a74      	ldr	r2, [pc, #464]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800801e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685b      	ldr	r3, [r3, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d013      	beq.n	8008054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802c:	f7fd f8fa 	bl	8005224 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008034:	f7fd f8f6 	bl	8005224 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b64      	cmp	r3, #100	@ 0x64
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e2a6      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008046:	4b6a      	ldr	r3, [pc, #424]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0xc0>
 8008052:	e014      	b.n	800807e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008054:	f7fd f8e6 	bl	8005224 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800805a:	e008      	b.n	800806e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800805c:	f7fd f8e2 	bl	8005224 <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	2b64      	cmp	r3, #100	@ 0x64
 8008068:	d901      	bls.n	800806e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800806a:	2303      	movs	r3, #3
 800806c:	e292      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800806e:	4b60      	ldr	r3, [pc, #384]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008076:	2b00      	cmp	r3, #0
 8008078:	d1f0      	bne.n	800805c <HAL_RCC_OscConfig+0xe8>
 800807a:	e000      	b.n	800807e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800807c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f003 0302 	and.w	r3, r3, #2
 8008086:	2b00      	cmp	r3, #0
 8008088:	d075      	beq.n	8008176 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800808a:	4b59      	ldr	r3, [pc, #356]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008094:	4b56      	ldr	r3, [pc, #344]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	f003 0303 	and.w	r3, r3, #3
 800809c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800809e:	69bb      	ldr	r3, [r7, #24]
 80080a0:	2b0c      	cmp	r3, #12
 80080a2:	d102      	bne.n	80080aa <HAL_RCC_OscConfig+0x136>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b02      	cmp	r3, #2
 80080a8:	d002      	beq.n	80080b0 <HAL_RCC_OscConfig+0x13c>
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b04      	cmp	r3, #4
 80080ae:	d11f      	bne.n	80080f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b0:	4b4f      	ldr	r3, [pc, #316]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <HAL_RCC_OscConfig+0x154>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	e265      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c8:	4b49      	ldr	r3, [pc, #292]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	061b      	lsls	r3, r3, #24
 80080d6:	4946      	ldr	r1, [pc, #280]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80080d8:	4313      	orrs	r3, r2
 80080da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080dc:	4b45      	ldr	r3, [pc, #276]	@ (80081f4 <HAL_RCC_OscConfig+0x280>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fd f853 	bl	800518c <HAL_InitTick>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d043      	beq.n	8008174 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	e251      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d023      	beq.n	8008140 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080f8:	4b3d      	ldr	r3, [pc, #244]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a3c      	ldr	r2, [pc, #240]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80080fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008102:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008104:	f7fd f88e 	bl	8005224 <HAL_GetTick>
 8008108:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800810a:	e008      	b.n	800811e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800810c:	f7fd f88a 	bl	8005224 <HAL_GetTick>
 8008110:	4602      	mov	r2, r0
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	1ad3      	subs	r3, r2, r3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d901      	bls.n	800811e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e23a      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800811e:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f0      	beq.n	800810c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812a:	4b31      	ldr	r3, [pc, #196]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	691b      	ldr	r3, [r3, #16]
 8008136:	061b      	lsls	r3, r3, #24
 8008138:	492d      	ldr	r1, [pc, #180]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	604b      	str	r3, [r1, #4]
 800813e:	e01a      	b.n	8008176 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008140:	4b2b      	ldr	r3, [pc, #172]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008146:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800814a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814c:	f7fd f86a 	bl	8005224 <HAL_GetTick>
 8008150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008152:	e008      	b.n	8008166 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008154:	f7fd f866 	bl	8005224 <HAL_GetTick>
 8008158:	4602      	mov	r2, r0
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	1ad3      	subs	r3, r2, r3
 800815e:	2b02      	cmp	r3, #2
 8008160:	d901      	bls.n	8008166 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e216      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008166:	4b22      	ldr	r3, [pc, #136]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800816e:	2b00      	cmp	r3, #0
 8008170:	d1f0      	bne.n	8008154 <HAL_RCC_OscConfig+0x1e0>
 8008172:	e000      	b.n	8008176 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008174:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d041      	beq.n	8008206 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d01c      	beq.n	80081c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800818a:	4b19      	ldr	r3, [pc, #100]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 800818c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008190:	4a17      	ldr	r2, [pc, #92]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 8008192:	f043 0301 	orr.w	r3, r3, #1
 8008196:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800819a:	f7fd f843 	bl	8005224 <HAL_GetTick>
 800819e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081a0:	e008      	b.n	80081b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081a2:	f7fd f83f 	bl	8005224 <HAL_GetTick>
 80081a6:	4602      	mov	r2, r0
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	1ad3      	subs	r3, r2, r3
 80081ac:	2b02      	cmp	r3, #2
 80081ae:	d901      	bls.n	80081b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081b0:	2303      	movs	r3, #3
 80081b2:	e1ef      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081b4:	4b0e      	ldr	r3, [pc, #56]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80081b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ba:	f003 0302 	and.w	r3, r3, #2
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d0ef      	beq.n	80081a2 <HAL_RCC_OscConfig+0x22e>
 80081c2:	e020      	b.n	8008206 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081c4:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80081c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081ca:	4a09      	ldr	r2, [pc, #36]	@ (80081f0 <HAL_RCC_OscConfig+0x27c>)
 80081cc:	f023 0301 	bic.w	r3, r3, #1
 80081d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d4:	f7fd f826 	bl	8005224 <HAL_GetTick>
 80081d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081da:	e00d      	b.n	80081f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081dc:	f7fd f822 	bl	8005224 <HAL_GetTick>
 80081e0:	4602      	mov	r2, r0
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	1ad3      	subs	r3, r2, r3
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d906      	bls.n	80081f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80081ea:	2303      	movs	r3, #3
 80081ec:	e1d2      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
 80081ee:	bf00      	nop
 80081f0:	40021000 	.word	0x40021000
 80081f4:	200004ac 	.word	0x200004ac
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081f8:	4b8c      	ldr	r3, [pc, #560]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80081fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1ea      	bne.n	80081dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f003 0304 	and.w	r3, r3, #4
 800820e:	2b00      	cmp	r3, #0
 8008210:	f000 80a6 	beq.w	8008360 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008214:	2300      	movs	r3, #0
 8008216:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008218:	4b84      	ldr	r3, [pc, #528]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 800821a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800821c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008220:	2b00      	cmp	r3, #0
 8008222:	d101      	bne.n	8008228 <HAL_RCC_OscConfig+0x2b4>
 8008224:	2301      	movs	r3, #1
 8008226:	e000      	b.n	800822a <HAL_RCC_OscConfig+0x2b6>
 8008228:	2300      	movs	r3, #0
 800822a:	2b00      	cmp	r3, #0
 800822c:	d00d      	beq.n	800824a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800822e:	4b7f      	ldr	r3, [pc, #508]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008232:	4a7e      	ldr	r2, [pc, #504]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008238:	6593      	str	r3, [r2, #88]	@ 0x58
 800823a:	4b7c      	ldr	r3, [pc, #496]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800823e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008242:	60fb      	str	r3, [r7, #12]
 8008244:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008246:	2301      	movs	r3, #1
 8008248:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800824a:	4b79      	ldr	r3, [pc, #484]	@ (8008430 <HAL_RCC_OscConfig+0x4bc>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d118      	bne.n	8008288 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008256:	4b76      	ldr	r3, [pc, #472]	@ (8008430 <HAL_RCC_OscConfig+0x4bc>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a75      	ldr	r2, [pc, #468]	@ (8008430 <HAL_RCC_OscConfig+0x4bc>)
 800825c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008262:	f7fc ffdf 	bl	8005224 <HAL_GetTick>
 8008266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008268:	e008      	b.n	800827c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800826a:	f7fc ffdb 	bl	8005224 <HAL_GetTick>
 800826e:	4602      	mov	r2, r0
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	1ad3      	subs	r3, r2, r3
 8008274:	2b02      	cmp	r3, #2
 8008276:	d901      	bls.n	800827c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	e18b      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800827c:	4b6c      	ldr	r3, [pc, #432]	@ (8008430 <HAL_RCC_OscConfig+0x4bc>)
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008284:	2b00      	cmp	r3, #0
 8008286:	d0f0      	beq.n	800826a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d108      	bne.n	80082a2 <HAL_RCC_OscConfig+0x32e>
 8008290:	4b66      	ldr	r3, [pc, #408]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008296:	4a65      	ldr	r2, [pc, #404]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082a0:	e024      	b.n	80082ec <HAL_RCC_OscConfig+0x378>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d110      	bne.n	80082cc <HAL_RCC_OscConfig+0x358>
 80082aa:	4b60      	ldr	r3, [pc, #384]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082b0:	4a5e      	ldr	r2, [pc, #376]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082b2:	f043 0304 	orr.w	r3, r3, #4
 80082b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082ba:	4b5c      	ldr	r3, [pc, #368]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082c0:	4a5a      	ldr	r2, [pc, #360]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082c2:	f043 0301 	orr.w	r3, r3, #1
 80082c6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082ca:	e00f      	b.n	80082ec <HAL_RCC_OscConfig+0x378>
 80082cc:	4b57      	ldr	r3, [pc, #348]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082d2:	4a56      	ldr	r2, [pc, #344]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082d4:	f023 0301 	bic.w	r3, r3, #1
 80082d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80082dc:	4b53      	ldr	r3, [pc, #332]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80082e2:	4a52      	ldr	r2, [pc, #328]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80082e4:	f023 0304 	bic.w	r3, r3, #4
 80082e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d016      	beq.n	8008322 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082f4:	f7fc ff96 	bl	8005224 <HAL_GetTick>
 80082f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80082fa:	e00a      	b.n	8008312 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80082fc:	f7fc ff92 	bl	8005224 <HAL_GetTick>
 8008300:	4602      	mov	r2, r0
 8008302:	693b      	ldr	r3, [r7, #16]
 8008304:	1ad3      	subs	r3, r2, r3
 8008306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800830a:	4293      	cmp	r3, r2
 800830c:	d901      	bls.n	8008312 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800830e:	2303      	movs	r3, #3
 8008310:	e140      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008312:	4b46      	ldr	r3, [pc, #280]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d0ed      	beq.n	80082fc <HAL_RCC_OscConfig+0x388>
 8008320:	e015      	b.n	800834e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008322:	f7fc ff7f 	bl	8005224 <HAL_GetTick>
 8008326:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008328:	e00a      	b.n	8008340 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800832a:	f7fc ff7b 	bl	8005224 <HAL_GetTick>
 800832e:	4602      	mov	r2, r0
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008338:	4293      	cmp	r3, r2
 800833a:	d901      	bls.n	8008340 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800833c:	2303      	movs	r3, #3
 800833e:	e129      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008340:	4b3a      	ldr	r3, [pc, #232]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008342:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008346:	f003 0302 	and.w	r3, r3, #2
 800834a:	2b00      	cmp	r3, #0
 800834c:	d1ed      	bne.n	800832a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800834e:	7ffb      	ldrb	r3, [r7, #31]
 8008350:	2b01      	cmp	r3, #1
 8008352:	d105      	bne.n	8008360 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008354:	4b35      	ldr	r3, [pc, #212]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008358:	4a34      	ldr	r2, [pc, #208]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 800835a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800835e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 0320 	and.w	r3, r3, #32
 8008368:	2b00      	cmp	r3, #0
 800836a:	d03c      	beq.n	80083e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d01c      	beq.n	80083ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008374:	4b2d      	ldr	r3, [pc, #180]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008376:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800837a:	4a2c      	ldr	r2, [pc, #176]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 800837c:	f043 0301 	orr.w	r3, r3, #1
 8008380:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008384:	f7fc ff4e 	bl	8005224 <HAL_GetTick>
 8008388:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800838a:	e008      	b.n	800839e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800838c:	f7fc ff4a 	bl	8005224 <HAL_GetTick>
 8008390:	4602      	mov	r2, r0
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	1ad3      	subs	r3, r2, r3
 8008396:	2b02      	cmp	r3, #2
 8008398:	d901      	bls.n	800839e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800839a:	2303      	movs	r3, #3
 800839c:	e0fa      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800839e:	4b23      	ldr	r3, [pc, #140]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80083a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083a4:	f003 0302 	and.w	r3, r3, #2
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0ef      	beq.n	800838c <HAL_RCC_OscConfig+0x418>
 80083ac:	e01b      	b.n	80083e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083ae:	4b1f      	ldr	r3, [pc, #124]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80083b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083b4:	4a1d      	ldr	r2, [pc, #116]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80083b6:	f023 0301 	bic.w	r3, r3, #1
 80083ba:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083be:	f7fc ff31 	bl	8005224 <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083c6:	f7fc ff2d 	bl	8005224 <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e0dd      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083d8:	4b14      	ldr	r3, [pc, #80]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80083da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1ef      	bne.n	80083c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 80d1 	beq.w	8008592 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80083f0:	4b0e      	ldr	r3, [pc, #56]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	f003 030c 	and.w	r3, r3, #12
 80083f8:	2b0c      	cmp	r3, #12
 80083fa:	f000 808b 	beq.w	8008514 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	69db      	ldr	r3, [r3, #28]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d15e      	bne.n	80084c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008406:	4b09      	ldr	r3, [pc, #36]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a08      	ldr	r2, [pc, #32]	@ (800842c <HAL_RCC_OscConfig+0x4b8>)
 800840c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008410:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008412:	f7fc ff07 	bl	8005224 <HAL_GetTick>
 8008416:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008418:	e00c      	b.n	8008434 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800841a:	f7fc ff03 	bl	8005224 <HAL_GetTick>
 800841e:	4602      	mov	r2, r0
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	1ad3      	subs	r3, r2, r3
 8008424:	2b02      	cmp	r3, #2
 8008426:	d905      	bls.n	8008434 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e0b3      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
 800842c:	40021000 	.word	0x40021000
 8008430:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008434:	4b59      	ldr	r3, [pc, #356]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1ec      	bne.n	800841a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008440:	4b56      	ldr	r3, [pc, #344]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008442:	68da      	ldr	r2, [r3, #12]
 8008444:	4b56      	ldr	r3, [pc, #344]	@ (80085a0 <HAL_RCC_OscConfig+0x62c>)
 8008446:	4013      	ands	r3, r2
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	6a11      	ldr	r1, [r2, #32]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008450:	3a01      	subs	r2, #1
 8008452:	0112      	lsls	r2, r2, #4
 8008454:	4311      	orrs	r1, r2
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800845a:	0212      	lsls	r2, r2, #8
 800845c:	4311      	orrs	r1, r2
 800845e:	687a      	ldr	r2, [r7, #4]
 8008460:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8008462:	0852      	lsrs	r2, r2, #1
 8008464:	3a01      	subs	r2, #1
 8008466:	0552      	lsls	r2, r2, #21
 8008468:	4311      	orrs	r1, r2
 800846a:	687a      	ldr	r2, [r7, #4]
 800846c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800846e:	0852      	lsrs	r2, r2, #1
 8008470:	3a01      	subs	r2, #1
 8008472:	0652      	lsls	r2, r2, #25
 8008474:	4311      	orrs	r1, r2
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800847a:	06d2      	lsls	r2, r2, #27
 800847c:	430a      	orrs	r2, r1
 800847e:	4947      	ldr	r1, [pc, #284]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008480:	4313      	orrs	r3, r2
 8008482:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008484:	4b45      	ldr	r3, [pc, #276]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a44      	ldr	r2, [pc, #272]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 800848a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800848e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008490:	4b42      	ldr	r3, [pc, #264]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	4a41      	ldr	r2, [pc, #260]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008496:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800849a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849c:	f7fc fec2 	bl	8005224 <HAL_GetTick>
 80084a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a2:	e008      	b.n	80084b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084a4:	f7fc febe 	bl	8005224 <HAL_GetTick>
 80084a8:	4602      	mov	r2, r0
 80084aa:	693b      	ldr	r3, [r7, #16]
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d901      	bls.n	80084b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e06e      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084b6:	4b39      	ldr	r3, [pc, #228]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f0      	beq.n	80084a4 <HAL_RCC_OscConfig+0x530>
 80084c2:	e066      	b.n	8008592 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084c4:	4b35      	ldr	r3, [pc, #212]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a34      	ldr	r2, [pc, #208]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80084d0:	4b32      	ldr	r3, [pc, #200]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	4a31      	ldr	r2, [pc, #196]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80084dc:	4b2f      	ldr	r3, [pc, #188]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084de:	68db      	ldr	r3, [r3, #12]
 80084e0:	4a2e      	ldr	r2, [pc, #184]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 80084e2:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 80084e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084ec:	f7fc fe9a 	bl	8005224 <HAL_GetTick>
 80084f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084f2:	e008      	b.n	8008506 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084f4:	f7fc fe96 	bl	8005224 <HAL_GetTick>
 80084f8:	4602      	mov	r2, r0
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	1ad3      	subs	r3, r2, r3
 80084fe:	2b02      	cmp	r3, #2
 8008500:	d901      	bls.n	8008506 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8008502:	2303      	movs	r3, #3
 8008504:	e046      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008506:	4b25      	ldr	r3, [pc, #148]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d1f0      	bne.n	80084f4 <HAL_RCC_OscConfig+0x580>
 8008512:	e03e      	b.n	8008592 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	69db      	ldr	r3, [r3, #28]
 8008518:	2b01      	cmp	r3, #1
 800851a:	d101      	bne.n	8008520 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e039      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008520:	4b1e      	ldr	r3, [pc, #120]	@ (800859c <HAL_RCC_OscConfig+0x628>)
 8008522:	68db      	ldr	r3, [r3, #12]
 8008524:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 0203 	and.w	r2, r3, #3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6a1b      	ldr	r3, [r3, #32]
 8008530:	429a      	cmp	r2, r3
 8008532:	d12c      	bne.n	800858e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853e:	3b01      	subs	r3, #1
 8008540:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008542:	429a      	cmp	r2, r3
 8008544:	d123      	bne.n	800858e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008552:	429a      	cmp	r2, r3
 8008554:	d11b      	bne.n	800858e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008562:	429a      	cmp	r2, r3
 8008564:	d113      	bne.n	800858e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008570:	085b      	lsrs	r3, r3, #1
 8008572:	3b01      	subs	r3, #1
 8008574:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d109      	bne.n	800858e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	3b01      	subs	r3, #1
 8008588:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d001      	beq.n	8008592 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e000      	b.n	8008594 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3720      	adds	r7, #32
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	40021000 	.word	0x40021000
 80085a0:	019f800c 	.word	0x019f800c

080085a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085ae:	2300      	movs	r3, #0
 80085b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085b8:	2301      	movs	r3, #1
 80085ba:	e11e      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085bc:	4b91      	ldr	r3, [pc, #580]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 030f 	and.w	r3, r3, #15
 80085c4:	683a      	ldr	r2, [r7, #0]
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d910      	bls.n	80085ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085ca:	4b8e      	ldr	r3, [pc, #568]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f023 020f 	bic.w	r2, r3, #15
 80085d2:	498c      	ldr	r1, [pc, #560]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	4313      	orrs	r3, r2
 80085d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085da:	4b8a      	ldr	r3, [pc, #552]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 030f 	and.w	r3, r3, #15
 80085e2:	683a      	ldr	r2, [r7, #0]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d001      	beq.n	80085ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80085e8:	2301      	movs	r3, #1
 80085ea:	e106      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d073      	beq.n	80086e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d129      	bne.n	8008654 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008600:	4b81      	ldr	r3, [pc, #516]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e0f4      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008610:	f000 f966 	bl	80088e0 <RCC_GetSysClockFreqFromPLLSource>
 8008614:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	4a7c      	ldr	r2, [pc, #496]	@ (800880c <HAL_RCC_ClockConfig+0x268>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d93f      	bls.n	800869e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800861e:	4b7a      	ldr	r3, [pc, #488]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008620:	689b      	ldr	r3, [r3, #8]
 8008622:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d009      	beq.n	800863e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008632:	2b00      	cmp	r3, #0
 8008634:	d033      	beq.n	800869e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800863a:	2b00      	cmp	r3, #0
 800863c:	d12f      	bne.n	800869e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800863e:	4b72      	ldr	r3, [pc, #456]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008646:	4a70      	ldr	r2, [pc, #448]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800864c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800864e:	2380      	movs	r3, #128	@ 0x80
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	e024      	b.n	800869e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2b02      	cmp	r3, #2
 800865a:	d107      	bne.n	800866c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800865c:	4b6a      	ldr	r3, [pc, #424]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008664:	2b00      	cmp	r3, #0
 8008666:	d109      	bne.n	800867c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008668:	2301      	movs	r3, #1
 800866a:	e0c6      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800866c:	4b66      	ldr	r3, [pc, #408]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008678:	2301      	movs	r3, #1
 800867a:	e0be      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800867c:	f000 f8ce 	bl	800881c <HAL_RCC_GetSysClockFreq>
 8008680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	4a61      	ldr	r2, [pc, #388]	@ (800880c <HAL_RCC_ClockConfig+0x268>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d909      	bls.n	800869e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800868a:	4b5f      	ldr	r3, [pc, #380]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008692:	4a5d      	ldr	r2, [pc, #372]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008698:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800869a:	2380      	movs	r3, #128	@ 0x80
 800869c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800869e:	4b5a      	ldr	r3, [pc, #360]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80086a0:	689b      	ldr	r3, [r3, #8]
 80086a2:	f023 0203 	bic.w	r2, r3, #3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	4957      	ldr	r1, [pc, #348]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80086ac:	4313      	orrs	r3, r2
 80086ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086b0:	f7fc fdb8 	bl	8005224 <HAL_GetTick>
 80086b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086b6:	e00a      	b.n	80086ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086b8:	f7fc fdb4 	bl	8005224 <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e095      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80086d0:	689b      	ldr	r3, [r3, #8]
 80086d2:	f003 020c 	and.w	r2, r3, #12
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	685b      	ldr	r3, [r3, #4]
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	429a      	cmp	r2, r3
 80086de:	d1eb      	bne.n	80086b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d023      	beq.n	8008734 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f003 0304 	and.w	r3, r3, #4
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d005      	beq.n	8008704 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80086f8:	4b43      	ldr	r3, [pc, #268]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	4a42      	ldr	r2, [pc, #264]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80086fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008702:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0308 	and.w	r3, r3, #8
 800870c:	2b00      	cmp	r3, #0
 800870e:	d007      	beq.n	8008720 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008710:	4b3d      	ldr	r3, [pc, #244]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008718:	4a3b      	ldr	r2, [pc, #236]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800871a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800871e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008720:	4b39      	ldr	r3, [pc, #228]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008722:	689b      	ldr	r3, [r3, #8]
 8008724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	4936      	ldr	r1, [pc, #216]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800872e:	4313      	orrs	r3, r2
 8008730:	608b      	str	r3, [r1, #8]
 8008732:	e008      	b.n	8008746 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	2b80      	cmp	r3, #128	@ 0x80
 8008738:	d105      	bne.n	8008746 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800873a:	4b33      	ldr	r3, [pc, #204]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	4a32      	ldr	r2, [pc, #200]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 8008740:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008744:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008746:	4b2f      	ldr	r3, [pc, #188]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	683a      	ldr	r2, [r7, #0]
 8008750:	429a      	cmp	r2, r3
 8008752:	d21d      	bcs.n	8008790 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008754:	4b2b      	ldr	r3, [pc, #172]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	f023 020f 	bic.w	r2, r3, #15
 800875c:	4929      	ldr	r1, [pc, #164]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	4313      	orrs	r3, r2
 8008762:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008764:	f7fc fd5e 	bl	8005224 <HAL_GetTick>
 8008768:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800876a:	e00a      	b.n	8008782 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800876c:	f7fc fd5a 	bl	8005224 <HAL_GetTick>
 8008770:	4602      	mov	r2, r0
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	1ad3      	subs	r3, r2, r3
 8008776:	f241 3288 	movw	r2, #5000	@ 0x1388
 800877a:	4293      	cmp	r3, r2
 800877c:	d901      	bls.n	8008782 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	e03b      	b.n	80087fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	4b20      	ldr	r3, [pc, #128]	@ (8008804 <HAL_RCC_ClockConfig+0x260>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 030f 	and.w	r3, r3, #15
 800878a:	683a      	ldr	r2, [r7, #0]
 800878c:	429a      	cmp	r2, r3
 800878e:	d1ed      	bne.n	800876c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f003 0304 	and.w	r3, r3, #4
 8008798:	2b00      	cmp	r3, #0
 800879a:	d008      	beq.n	80087ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800879c:	4b1a      	ldr	r3, [pc, #104]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	4917      	ldr	r1, [pc, #92]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 0308 	and.w	r3, r3, #8
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d009      	beq.n	80087ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087ba:	4b13      	ldr	r3, [pc, #76]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80087bc:	689b      	ldr	r3, [r3, #8]
 80087be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	490f      	ldr	r1, [pc, #60]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087ce:	f000 f825 	bl	800881c <HAL_RCC_GetSysClockFreq>
 80087d2:	4602      	mov	r2, r0
 80087d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008808 <HAL_RCC_ClockConfig+0x264>)
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	091b      	lsrs	r3, r3, #4
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	490c      	ldr	r1, [pc, #48]	@ (8008810 <HAL_RCC_ClockConfig+0x26c>)
 80087e0:	5ccb      	ldrb	r3, [r1, r3]
 80087e2:	f003 031f 	and.w	r3, r3, #31
 80087e6:	fa22 f303 	lsr.w	r3, r2, r3
 80087ea:	4a0a      	ldr	r2, [pc, #40]	@ (8008814 <HAL_RCC_ClockConfig+0x270>)
 80087ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80087ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <HAL_RCC_ClockConfig+0x274>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4618      	mov	r0, r3
 80087f4:	f7fc fcca 	bl	800518c <HAL_InitTick>
 80087f8:	4603      	mov	r3, r0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3718      	adds	r7, #24
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40022000 	.word	0x40022000
 8008808:	40021000 	.word	0x40021000
 800880c:	04c4b400 	.word	0x04c4b400
 8008810:	0800c4b8 	.word	0x0800c4b8
 8008814:	200004a8 	.word	0x200004a8
 8008818:	200004ac 	.word	0x200004ac

0800881c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800881c:	b480      	push	{r7}
 800881e:	b087      	sub	sp, #28
 8008820:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008822:	4b2c      	ldr	r3, [pc, #176]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 030c 	and.w	r3, r3, #12
 800882a:	2b04      	cmp	r3, #4
 800882c:	d102      	bne.n	8008834 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800882e:	4b2a      	ldr	r3, [pc, #168]	@ (80088d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008830:	613b      	str	r3, [r7, #16]
 8008832:	e047      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008834:	4b27      	ldr	r3, [pc, #156]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	f003 030c 	and.w	r3, r3, #12
 800883c:	2b08      	cmp	r3, #8
 800883e:	d102      	bne.n	8008846 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008840:	4b26      	ldr	r3, [pc, #152]	@ (80088dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008842:	613b      	str	r3, [r7, #16]
 8008844:	e03e      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008846:	4b23      	ldr	r3, [pc, #140]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 030c 	and.w	r3, r3, #12
 800884e:	2b0c      	cmp	r3, #12
 8008850:	d136      	bne.n	80088c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008852:	4b20      	ldr	r3, [pc, #128]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f003 0303 	and.w	r3, r3, #3
 800885a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800885c:	4b1d      	ldr	r3, [pc, #116]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	091b      	lsrs	r3, r3, #4
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	3301      	adds	r3, #1
 8008868:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d10c      	bne.n	800888a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008870:	4a1a      	ldr	r2, [pc, #104]	@ (80088dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	fbb2 f3f3 	udiv	r3, r2, r3
 8008878:	4a16      	ldr	r2, [pc, #88]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800887a:	68d2      	ldr	r2, [r2, #12]
 800887c:	0a12      	lsrs	r2, r2, #8
 800887e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008882:	fb02 f303 	mul.w	r3, r2, r3
 8008886:	617b      	str	r3, [r7, #20]
      break;
 8008888:	e00c      	b.n	80088a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800888a:	4a13      	ldr	r2, [pc, #76]	@ (80088d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008892:	4a10      	ldr	r2, [pc, #64]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008894:	68d2      	ldr	r2, [r2, #12]
 8008896:	0a12      	lsrs	r2, r2, #8
 8008898:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	617b      	str	r3, [r7, #20]
      break;
 80088a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088a4:	4b0b      	ldr	r3, [pc, #44]	@ (80088d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088a6:	68db      	ldr	r3, [r3, #12]
 80088a8:	0e5b      	lsrs	r3, r3, #25
 80088aa:	f003 0303 	and.w	r3, r3, #3
 80088ae:	3301      	adds	r3, #1
 80088b0:	005b      	lsls	r3, r3, #1
 80088b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80088bc:	613b      	str	r3, [r7, #16]
 80088be:	e001      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80088c0:	2300      	movs	r3, #0
 80088c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088c4:	693b      	ldr	r3, [r7, #16]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	371c      	adds	r7, #28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	40021000 	.word	0x40021000
 80088d8:	00f42400 	.word	0x00f42400
 80088dc:	007a1200 	.word	0x007a1200

080088e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b087      	sub	sp, #28
 80088e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088e6:	4b1e      	ldr	r3, [pc, #120]	@ (8008960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088e8:	68db      	ldr	r3, [r3, #12]
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80088f0:	4b1b      	ldr	r3, [pc, #108]	@ (8008960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	091b      	lsrs	r3, r3, #4
 80088f6:	f003 030f 	and.w	r3, r3, #15
 80088fa:	3301      	adds	r3, #1
 80088fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	2b03      	cmp	r3, #3
 8008902:	d10c      	bne.n	800891e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008904:	4a17      	ldr	r2, [pc, #92]	@ (8008964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	fbb2 f3f3 	udiv	r3, r2, r3
 800890c:	4a14      	ldr	r2, [pc, #80]	@ (8008960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800890e:	68d2      	ldr	r2, [r2, #12]
 8008910:	0a12      	lsrs	r2, r2, #8
 8008912:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008916:	fb02 f303 	mul.w	r3, r2, r3
 800891a:	617b      	str	r3, [r7, #20]
    break;
 800891c:	e00c      	b.n	8008938 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800891e:	4a12      	ldr	r2, [pc, #72]	@ (8008968 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	fbb2 f3f3 	udiv	r3, r2, r3
 8008926:	4a0e      	ldr	r2, [pc, #56]	@ (8008960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008928:	68d2      	ldr	r2, [r2, #12]
 800892a:	0a12      	lsrs	r2, r2, #8
 800892c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008930:	fb02 f303 	mul.w	r3, r2, r3
 8008934:	617b      	str	r3, [r7, #20]
    break;
 8008936:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008938:	4b09      	ldr	r3, [pc, #36]	@ (8008960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800893a:	68db      	ldr	r3, [r3, #12]
 800893c:	0e5b      	lsrs	r3, r3, #25
 800893e:	f003 0303 	and.w	r3, r3, #3
 8008942:	3301      	adds	r3, #1
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008948:	697a      	ldr	r2, [r7, #20]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008950:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008952:	687b      	ldr	r3, [r7, #4]
}
 8008954:	4618      	mov	r0, r3
 8008956:	371c      	adds	r7, #28
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	40021000 	.word	0x40021000
 8008964:	007a1200 	.word	0x007a1200
 8008968:	00f42400 	.word	0x00f42400

0800896c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b086      	sub	sp, #24
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008974:	2300      	movs	r3, #0
 8008976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008978:	2300      	movs	r3, #0
 800897a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008984:	2b00      	cmp	r3, #0
 8008986:	f000 8098 	beq.w	8008aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800898a:	2300      	movs	r3, #0
 800898c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800898e:	4b43      	ldr	r3, [pc, #268]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008996:	2b00      	cmp	r3, #0
 8008998:	d10d      	bne.n	80089b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800899a:	4b40      	ldr	r3, [pc, #256]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800899c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899e:	4a3f      	ldr	r2, [pc, #252]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80089a6:	4b3d      	ldr	r3, [pc, #244]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089ae:	60bb      	str	r3, [r7, #8]
 80089b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089b2:	2301      	movs	r3, #1
 80089b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089b6:	4b3a      	ldr	r3, [pc, #232]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	4a39      	ldr	r2, [pc, #228]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089c2:	f7fc fc2f 	bl	8005224 <HAL_GetTick>
 80089c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089c8:	e009      	b.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089ca:	f7fc fc2b 	bl	8005224 <HAL_GetTick>
 80089ce:	4602      	mov	r2, r0
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	1ad3      	subs	r3, r2, r3
 80089d4:	2b02      	cmp	r3, #2
 80089d6:	d902      	bls.n	80089de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80089d8:	2303      	movs	r3, #3
 80089da:	74fb      	strb	r3, [r7, #19]
        break;
 80089dc:	e005      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089de:	4b30      	ldr	r3, [pc, #192]	@ (8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0ef      	beq.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80089ea:	7cfb      	ldrb	r3, [r7, #19]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d159      	bne.n	8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80089f0:	4b2a      	ldr	r3, [pc, #168]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80089f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d01e      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a06:	697a      	ldr	r2, [r7, #20]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d019      	beq.n	8008a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a0c:	4b23      	ldr	r3, [pc, #140]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a18:	4b20      	ldr	r3, [pc, #128]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a28:	4b1c      	ldr	r3, [pc, #112]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a2e:	4a1b      	ldr	r2, [pc, #108]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a34:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a38:	4a18      	ldr	r2, [pc, #96]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d016      	beq.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a4a:	f7fc fbeb 	bl	8005224 <HAL_GetTick>
 8008a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a50:	e00b      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a52:	f7fc fbe7 	bl	8005224 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d902      	bls.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a64:	2303      	movs	r3, #3
 8008a66:	74fb      	strb	r3, [r7, #19]
            break;
 8008a68:	e006      	b.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a6a:	4b0c      	ldr	r3, [pc, #48]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d0ec      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008a78:	7cfb      	ldrb	r3, [r7, #19]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d10b      	bne.n	8008a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a7e:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a84:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a8c:	4903      	ldr	r1, [pc, #12]	@ (8008a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008a94:	e008      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008a96:	7cfb      	ldrb	r3, [r7, #19]
 8008a98:	74bb      	strb	r3, [r7, #18]
 8008a9a:	e005      	b.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008a9c:	40021000 	.word	0x40021000
 8008aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aa4:	7cfb      	ldrb	r3, [r7, #19]
 8008aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aa8:	7c7b      	ldrb	r3, [r7, #17]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d105      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aae:	4ba7      	ldr	r3, [pc, #668]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ab2:	4aa6      	ldr	r2, [pc, #664]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008ab8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ac6:	4ba1      	ldr	r3, [pc, #644]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008acc:	f023 0203 	bic.w	r2, r3, #3
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	499d      	ldr	r1, [pc, #628]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008ae8:	4b98      	ldr	r3, [pc, #608]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008aee:	f023 020c 	bic.w	r2, r3, #12
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	4995      	ldr	r1, [pc, #596]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0304 	and.w	r3, r3, #4
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b0a:	4b90      	ldr	r3, [pc, #576]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b10:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	498c      	ldr	r1, [pc, #560]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b2c:	4b87      	ldr	r3, [pc, #540]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	4984      	ldr	r1, [pc, #528]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 0310 	and.w	r3, r3, #16
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b54:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	695b      	ldr	r3, [r3, #20]
 8008b5c:	497b      	ldr	r1, [pc, #492]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 0320 	and.w	r3, r3, #32
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b70:	4b76      	ldr	r3, [pc, #472]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b76:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	4973      	ldr	r1, [pc, #460]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00a      	beq.n	8008ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b92:	4b6e      	ldr	r3, [pc, #440]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b98:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	69db      	ldr	r3, [r3, #28]
 8008ba0:	496a      	ldr	r1, [pc, #424]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba2:	4313      	orrs	r3, r2
 8008ba4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d00a      	beq.n	8008bca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008bb4:	4b65      	ldr	r3, [pc, #404]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	4962      	ldr	r1, [pc, #392]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d00a      	beq.n	8008bec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bd6:	4b5d      	ldr	r3, [pc, #372]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bdc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008be4:	4959      	ldr	r1, [pc, #356]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00a      	beq.n	8008c0e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bf8:	4b54      	ldr	r3, [pc, #336]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008bfe:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	4951      	ldr	r1, [pc, #324]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d015      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c20:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c28:	4948      	ldr	r1, [pc, #288]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c34:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008c38:	d105      	bne.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c3a:	4b44      	ldr	r3, [pc, #272]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	4a43      	ldr	r2, [pc, #268]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c44:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d015      	beq.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c52:	4b3e      	ldr	r3, [pc, #248]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c58:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c60:	493a      	ldr	r1, [pc, #232]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c62:	4313      	orrs	r3, r2
 8008c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c70:	d105      	bne.n	8008c7e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c72:	4b36      	ldr	r3, [pc, #216]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	4a35      	ldr	r2, [pc, #212]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c78:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008c7c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d015      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c8a:	4b30      	ldr	r3, [pc, #192]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c90:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c98:	492c      	ldr	r1, [pc, #176]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ca4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008ca8:	d105      	bne.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008caa:	4b28      	ldr	r3, [pc, #160]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	4a27      	ldr	r2, [pc, #156]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cb4:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d015      	beq.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cc2:	4b22      	ldr	r3, [pc, #136]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cc8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	491e      	ldr	r1, [pc, #120]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008ce0:	d105      	bne.n	8008cee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce4:	68db      	ldr	r3, [r3, #12]
 8008ce6:	4a19      	ldr	r2, [pc, #100]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ce8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008cec:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d015      	beq.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cfa:	4b14      	ldr	r3, [pc, #80]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d08:	4910      	ldr	r1, [pc, #64]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008d18:	d105      	bne.n	8008d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d24:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d018      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d32:	4b06      	ldr	r3, [pc, #24]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d38:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d40:	4902      	ldr	r1, [pc, #8]	@ (8008d4c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	e001      	b.n	8008d50 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008d4c:	40021000 	.word	0x40021000
 8008d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d52:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008d56:	d105      	bne.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d58:	4b21      	ldr	r3, [pc, #132]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	4a20      	ldr	r2, [pc, #128]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d62:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d015      	beq.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008d70:	4b1b      	ldr	r3, [pc, #108]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d76:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d7e:	4918      	ldr	r1, [pc, #96]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d8e:	d105      	bne.n	8008d9c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d90:	4b13      	ldr	r3, [pc, #76]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	4a12      	ldr	r2, [pc, #72]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d9a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d015      	beq.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008da8:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008dae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008db6:	490a      	ldr	r1, [pc, #40]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008db8:	4313      	orrs	r3, r2
 8008dba:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008dc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dc6:	d105      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008dc8:	4b05      	ldr	r3, [pc, #20]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	4a04      	ldr	r2, [pc, #16]	@ (8008de0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dd2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008dd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3718      	adds	r7, #24
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	40021000 	.word	0x40021000

08008de4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b084      	sub	sp, #16
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008df2:	2301      	movs	r3, #1
 8008df4:	e09d      	b.n	8008f32 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d108      	bne.n	8008e10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e06:	d009      	beq.n	8008e1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	61da      	str	r2, [r3, #28]
 8008e0e:	e005      	b.n	8008e1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d106      	bne.n	8008e3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7fc f85c 	bl	8004ef4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2202      	movs	r2, #2
 8008e40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008e52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e5c:	d902      	bls.n	8008e64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60fb      	str	r3, [r7, #12]
 8008e62:	e002      	b.n	8008e6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8008e72:	d007      	beq.n	8008e84 <HAL_SPI_Init+0xa0>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008e7c:	d002      	beq.n	8008e84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8008e94:	431a      	orrs	r2, r3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	691b      	ldr	r3, [r3, #16]
 8008e9a:	f003 0302 	and.w	r3, r3, #2
 8008e9e:	431a      	orrs	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	695b      	ldr	r3, [r3, #20]
 8008ea4:	f003 0301 	and.w	r3, r3, #1
 8008ea8:	431a      	orrs	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	699b      	ldr	r3, [r3, #24]
 8008eae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008eb2:	431a      	orrs	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	69db      	ldr	r3, [r3, #28]
 8008eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ec6:	ea42 0103 	orr.w	r1, r2, r3
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ece:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	430a      	orrs	r2, r1
 8008ed8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	699b      	ldr	r3, [r3, #24]
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	f003 0204 	and.w	r2, r3, #4
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ee8:	f003 0310 	and.w	r3, r3, #16
 8008eec:	431a      	orrs	r2, r3
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ef2:	f003 0308 	and.w	r3, r3, #8
 8008ef6:	431a      	orrs	r2, r3
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	68db      	ldr	r3, [r3, #12]
 8008efc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008f00:	ea42 0103 	orr.w	r1, r2, r3
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	430a      	orrs	r2, r1
 8008f10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	69da      	ldr	r2, [r3, #28]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008f20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3710      	adds	r7, #16
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}

08008f3a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b08a      	sub	sp, #40	@ 0x28
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	60f8      	str	r0, [r7, #12]
 8008f42:	60b9      	str	r1, [r7, #8]
 8008f44:	607a      	str	r2, [r7, #4]
 8008f46:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_SPI_TransmitReceive+0x26>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e1fb      	b.n	8009358 <HAL_SPI_TransmitReceive+0x41e>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f68:	f7fc f95c 	bl	8005224 <HAL_GetTick>
 8008f6c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008f74:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008f7c:	887b      	ldrh	r3, [r7, #2]
 8008f7e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008f80:	887b      	ldrh	r3, [r7, #2]
 8008f82:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008f84:	7efb      	ldrb	r3, [r7, #27]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d00e      	beq.n	8008fa8 <HAL_SPI_TransmitReceive+0x6e>
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008f90:	d106      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <HAL_SPI_TransmitReceive+0x66>
 8008f9a:	7efb      	ldrb	r3, [r7, #27]
 8008f9c:	2b04      	cmp	r3, #4
 8008f9e:	d003      	beq.n	8008fa8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008fa0:	2302      	movs	r3, #2
 8008fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008fa6:	e1cd      	b.n	8009344 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d005      	beq.n	8008fba <HAL_SPI_TransmitReceive+0x80>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <HAL_SPI_TransmitReceive+0x80>
 8008fb4:	887b      	ldrh	r3, [r7, #2]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8008fc0:	e1c0      	b.n	8009344 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b04      	cmp	r3, #4
 8008fcc:	d003      	beq.n	8008fd6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2205      	movs	r2, #5
 8008fd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	887a      	ldrh	r2, [r7, #2]
 8008fe6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	887a      	ldrh	r2, [r7, #2]
 8008fee:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	68ba      	ldr	r2, [r7, #8]
 8008ff6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	887a      	ldrh	r2, [r7, #2]
 8008ffc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	887a      	ldrh	r2, [r7, #2]
 8009002:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009018:	d802      	bhi.n	8009020 <HAL_SPI_TransmitReceive+0xe6>
 800901a:	8a3b      	ldrh	r3, [r7, #16]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d908      	bls.n	8009032 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685a      	ldr	r2, [r3, #4]
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800902e:	605a      	str	r2, [r3, #4]
 8009030:	e007      	b.n	8009042 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009040:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800904c:	2b40      	cmp	r3, #64	@ 0x40
 800904e:	d007      	beq.n	8009060 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800905e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009068:	d97c      	bls.n	8009164 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	685b      	ldr	r3, [r3, #4]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <HAL_SPI_TransmitReceive+0x13e>
 8009072:	8a7b      	ldrh	r3, [r7, #18]
 8009074:	2b01      	cmp	r3, #1
 8009076:	d169      	bne.n	800914c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907c:	881a      	ldrh	r2, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009088:	1c9a      	adds	r2, r3, #2
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009092:	b29b      	uxth	r3, r3
 8009094:	3b01      	subs	r3, #1
 8009096:	b29a      	uxth	r2, r3
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800909c:	e056      	b.n	800914c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	f003 0302 	and.w	r3, r3, #2
 80090a8:	2b02      	cmp	r3, #2
 80090aa:	d11b      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x1aa>
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090b0:	b29b      	uxth	r3, r3
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d016      	beq.n	80090e4 <HAL_SPI_TransmitReceive+0x1aa>
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d113      	bne.n	80090e4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090c0:	881a      	ldrh	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090cc:	1c9a      	adds	r2, r3, #2
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	3b01      	subs	r3, #1
 80090da:	b29a      	uxth	r2, r3
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80090e0:	2300      	movs	r3, #0
 80090e2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 0301 	and.w	r3, r3, #1
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d11c      	bne.n	800912c <HAL_SPI_TransmitReceive+0x1f2>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d016      	beq.n	800912c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68da      	ldr	r2, [r3, #12]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009108:	b292      	uxth	r2, r2
 800910a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009110:	1c9a      	adds	r2, r3, #2
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800911c:	b29b      	uxth	r3, r3
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009128:	2301      	movs	r3, #1
 800912a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800912c:	f7fc f87a 	bl	8005224 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	69fb      	ldr	r3, [r7, #28]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009138:	429a      	cmp	r2, r3
 800913a:	d807      	bhi.n	800914c <HAL_SPI_TransmitReceive+0x212>
 800913c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009142:	d003      	beq.n	800914c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8009144:	2303      	movs	r3, #3
 8009146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 800914a:	e0fb      	b.n	8009344 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009150:	b29b      	uxth	r3, r3
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1a3      	bne.n	800909e <HAL_SPI_TransmitReceive+0x164>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800915c:	b29b      	uxth	r3, r3
 800915e:	2b00      	cmp	r3, #0
 8009160:	d19d      	bne.n	800909e <HAL_SPI_TransmitReceive+0x164>
 8009162:	e0df      	b.n	8009324 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <HAL_SPI_TransmitReceive+0x23a>
 800916c:	8a7b      	ldrh	r3, [r7, #18]
 800916e:	2b01      	cmp	r3, #1
 8009170:	f040 80cb 	bne.w	800930a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009178:	b29b      	uxth	r3, r3
 800917a:	2b01      	cmp	r3, #1
 800917c:	d912      	bls.n	80091a4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009182:	881a      	ldrh	r2, [r3, #0]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	1c9a      	adds	r2, r3, #2
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009198:	b29b      	uxth	r3, r3
 800919a:	3b02      	subs	r3, #2
 800919c:	b29a      	uxth	r2, r3
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80091a2:	e0b2      	b.n	800930a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330c      	adds	r3, #12
 80091ae:	7812      	ldrb	r2, [r2, #0]
 80091b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	3b01      	subs	r3, #1
 80091c4:	b29a      	uxth	r2, r3
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80091ca:	e09e      	b.n	800930a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 0302 	and.w	r3, r3, #2
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d134      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x30a>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091de:	b29b      	uxth	r3, r3
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d02f      	beq.n	8009244 <HAL_SPI_TransmitReceive+0x30a>
 80091e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d12c      	bne.n	8009244 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d912      	bls.n	800921a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f8:	881a      	ldrh	r2, [r3, #0]
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009204:	1c9a      	adds	r2, r3, #2
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800920e:	b29b      	uxth	r3, r3
 8009210:	3b02      	subs	r3, #2
 8009212:	b29a      	uxth	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009218:	e012      	b.n	8009240 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	330c      	adds	r3, #12
 8009224:	7812      	ldrb	r2, [r2, #0]
 8009226:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009240:	2300      	movs	r3, #0
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f003 0301 	and.w	r3, r3, #1
 800924e:	2b01      	cmp	r3, #1
 8009250:	d148      	bne.n	80092e4 <HAL_SPI_TransmitReceive+0x3aa>
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009258:	b29b      	uxth	r3, r3
 800925a:	2b00      	cmp	r3, #0
 800925c:	d042      	beq.n	80092e4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009264:	b29b      	uxth	r3, r3
 8009266:	2b01      	cmp	r3, #1
 8009268:	d923      	bls.n	80092b2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68da      	ldr	r2, [r3, #12]
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009274:	b292      	uxth	r2, r2
 8009276:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800927c:	1c9a      	adds	r2, r3, #2
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009288:	b29b      	uxth	r3, r3
 800928a:	3b02      	subs	r3, #2
 800928c:	b29a      	uxth	r2, r3
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800929a:	b29b      	uxth	r3, r3
 800929c:	2b01      	cmp	r3, #1
 800929e:	d81f      	bhi.n	80092e0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	685a      	ldr	r2, [r3, #4]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80092ae:	605a      	str	r2, [r3, #4]
 80092b0:	e016      	b.n	80092e0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f103 020c 	add.w	r2, r3, #12
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092be:	7812      	ldrb	r2, [r2, #0]
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	3b01      	subs	r3, #1
 80092d8:	b29a      	uxth	r2, r3
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80092e0:	2301      	movs	r3, #1
 80092e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80092e4:	f7fb ff9e 	bl	8005224 <HAL_GetTick>
 80092e8:	4602      	mov	r2, r0
 80092ea:	69fb      	ldr	r3, [r7, #28]
 80092ec:	1ad3      	subs	r3, r2, r3
 80092ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d803      	bhi.n	80092fc <HAL_SPI_TransmitReceive+0x3c2>
 80092f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092fa:	d102      	bne.n	8009302 <HAL_SPI_TransmitReceive+0x3c8>
 80092fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d103      	bne.n	800930a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009302:	2303      	movs	r3, #3
 8009304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        goto error;
 8009308:	e01c      	b.n	8009344 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800930e:	b29b      	uxth	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	f47f af5b 	bne.w	80091cc <HAL_SPI_TransmitReceive+0x292>
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800931c:	b29b      	uxth	r3, r3
 800931e:	2b00      	cmp	r3, #0
 8009320:	f47f af54 	bne.w	80091cc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f937 	bl	800959c <SPI_EndRxTxTransaction>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d006      	beq.n	8009342 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009334:	2301      	movs	r3, #1
 8009336:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2220      	movs	r2, #32
 800933e:	661a      	str	r2, [r3, #96]	@ 0x60
 8009340:	e000      	b.n	8009344 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009342:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  __HAL_UNLOCK(hspi);
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	2200      	movs	r2, #0
 8009350:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009354:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009358:	4618      	mov	r0, r3
 800935a:	3728      	adds	r7, #40	@ 0x28
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	603b      	str	r3, [r7, #0]
 800936c:	4613      	mov	r3, r2
 800936e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009370:	f7fb ff58 	bl	8005224 <HAL_GetTick>
 8009374:	4602      	mov	r2, r0
 8009376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009378:	1a9b      	subs	r3, r3, r2
 800937a:	683a      	ldr	r2, [r7, #0]
 800937c:	4413      	add	r3, r2
 800937e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009380:	f7fb ff50 	bl	8005224 <HAL_GetTick>
 8009384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009386:	4b39      	ldr	r3, [pc, #228]	@ (800946c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	015b      	lsls	r3, r3, #5
 800938c:	0d1b      	lsrs	r3, r3, #20
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	fb02 f303 	mul.w	r3, r2, r3
 8009394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009396:	e054      	b.n	8009442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800939e:	d050      	beq.n	8009442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80093a0:	f7fb ff40 	bl	8005224 <HAL_GetTick>
 80093a4:	4602      	mov	r2, r0
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	1ad3      	subs	r3, r2, r3
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d902      	bls.n	80093b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d13d      	bne.n	8009432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80093c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80093ce:	d111      	bne.n	80093f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093d8:	d004      	beq.n	80093e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80093e2:	d107      	bne.n	80093f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093fc:	d10f      	bne.n	800941e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800941c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	2201      	movs	r2, #1
 8009422:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e017      	b.n	8009462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	3b01      	subs	r3, #1
 8009440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	689a      	ldr	r2, [r3, #8]
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	4013      	ands	r3, r2
 800944c:	68ba      	ldr	r2, [r7, #8]
 800944e:	429a      	cmp	r2, r3
 8009450:	bf0c      	ite	eq
 8009452:	2301      	moveq	r3, #1
 8009454:	2300      	movne	r3, #0
 8009456:	b2db      	uxtb	r3, r3
 8009458:	461a      	mov	r2, r3
 800945a:	79fb      	ldrb	r3, [r7, #7]
 800945c:	429a      	cmp	r2, r3
 800945e:	d19b      	bne.n	8009398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009460:	2300      	movs	r3, #0
}
 8009462:	4618      	mov	r0, r3
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	200004a8 	.word	0x200004a8

08009470 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b08a      	sub	sp, #40	@ 0x28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
 800947c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009482:	f7fb fecf 	bl	8005224 <HAL_GetTick>
 8009486:	4602      	mov	r2, r0
 8009488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800948a:	1a9b      	subs	r3, r3, r2
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	4413      	add	r3, r2
 8009490:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009492:	f7fb fec7 	bl	8005224 <HAL_GetTick>
 8009496:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80094a0:	4b3d      	ldr	r3, [pc, #244]	@ (8009598 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	00da      	lsls	r2, r3, #3
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	0d1b      	lsrs	r3, r3, #20
 80094b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094b2:	fb02 f303 	mul.w	r3, r2, r3
 80094b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80094b8:	e060      	b.n	800957c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80094c0:	d107      	bne.n	80094d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d104      	bne.n	80094d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80094d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094d8:	d050      	beq.n	800957c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80094da:	f7fb fea3 	bl	8005224 <HAL_GetTick>
 80094de:	4602      	mov	r2, r0
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	1ad3      	subs	r3, r2, r3
 80094e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d902      	bls.n	80094f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80094ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d13d      	bne.n	800956c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80094fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	685b      	ldr	r3, [r3, #4]
 8009504:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009508:	d111      	bne.n	800952e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009512:	d004      	beq.n	800951e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	689b      	ldr	r3, [r3, #8]
 8009518:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800951c:	d107      	bne.n	800952e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681a      	ldr	r2, [r3, #0]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800952c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009536:	d10f      	bne.n	8009558 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009546:	601a      	str	r2, [r3, #0]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009556:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009568:	2303      	movs	r3, #3
 800956a:	e010      	b.n	800958e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009572:	2300      	movs	r3, #0
 8009574:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009576:	69bb      	ldr	r3, [r7, #24]
 8009578:	3b01      	subs	r3, #1
 800957a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	689a      	ldr	r2, [r3, #8]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	4013      	ands	r3, r2
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	429a      	cmp	r2, r3
 800958a:	d196      	bne.n	80094ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800958c:	2300      	movs	r3, #0
}
 800958e:	4618      	mov	r0, r3
 8009590:	3728      	adds	r7, #40	@ 0x28
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	200004a8 	.word	0x200004a8

0800959c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af02      	add	r7, sp, #8
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f7ff ff5b 	bl	8009470 <SPI_WaitFifoStateUntilTimeout>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d007      	beq.n	80095d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095c4:	f043 0220 	orr.w	r2, r3, #32
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095cc:	2303      	movs	r3, #3
 80095ce:	e027      	b.n	8009620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	9300      	str	r3, [sp, #0]
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	2200      	movs	r2, #0
 80095d8:	2180      	movs	r1, #128	@ 0x80
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f7ff fec0 	bl	8009360 <SPI_WaitFlagStateUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d007      	beq.n	80095f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80095ea:	f043 0220 	orr.w	r2, r3, #32
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e014      	b.n	8009620 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	9300      	str	r3, [sp, #0]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	2200      	movs	r2, #0
 80095fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009602:	68f8      	ldr	r0, [r7, #12]
 8009604:	f7ff ff34 	bl	8009470 <SPI_WaitFifoStateUntilTimeout>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d007      	beq.n	800961e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009612:	f043 0220 	orr.w	r2, r3, #32
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800961a:	2303      	movs	r3, #3
 800961c:	e000      	b.n	8009620 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800961e:	2300      	movs	r3, #0
}
 8009620:	4618      	mov	r0, r3
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}

08009628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d101      	bne.n	800963a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	e049      	b.n	80096ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d106      	bne.n	8009654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f7fb fc92 	bl	8004f78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2202      	movs	r2, #2
 8009658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	3304      	adds	r3, #4
 8009664:	4619      	mov	r1, r3
 8009666:	4610      	mov	r0, r2
 8009668:	f000 fd6c 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2201      	movs	r2, #1
 8009670:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2201      	movs	r2, #1
 8009690:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2201      	movs	r2, #1
 8009698:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2201      	movs	r2, #1
 80096a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2201      	movs	r2, #1
 80096c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2201      	movs	r2, #1
 80096c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d101      	bne.n	80096e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80096e4:	2301      	movs	r3, #1
 80096e6:	e049      	b.n	800977c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d106      	bne.n	8009702 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2200      	movs	r2, #0
 80096f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f841 	bl	8009784 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2202      	movs	r2, #2
 8009706:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681a      	ldr	r2, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	3304      	adds	r3, #4
 8009712:	4619      	mov	r1, r3
 8009714:	4610      	mov	r0, r2
 8009716:	f000 fd15 	bl	800a144 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2201      	movs	r2, #1
 800973e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2201      	movs	r2, #1
 8009746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2201      	movs	r2, #1
 8009756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2201      	movs	r2, #1
 800976e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	2201      	movs	r2, #1
 8009776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800977a:	2300      	movs	r3, #0
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009784:	b480      	push	{r7}
 8009786:	b083      	sub	sp, #12
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800978c:	bf00      	nop
 800978e:	370c      	adds	r7, #12
 8009790:	46bd      	mov	sp, r7
 8009792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009796:	4770      	bx	lr

08009798 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <HAL_TIM_PWM_Start+0x24>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80097ae:	b2db      	uxtb	r3, r3
 80097b0:	2b01      	cmp	r3, #1
 80097b2:	bf14      	ite	ne
 80097b4:	2301      	movne	r3, #1
 80097b6:	2300      	moveq	r3, #0
 80097b8:	b2db      	uxtb	r3, r3
 80097ba:	e03c      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	2b04      	cmp	r3, #4
 80097c0:	d109      	bne.n	80097d6 <HAL_TIM_PWM_Start+0x3e>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80097c8:	b2db      	uxtb	r3, r3
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	bf14      	ite	ne
 80097ce:	2301      	movne	r3, #1
 80097d0:	2300      	moveq	r3, #0
 80097d2:	b2db      	uxtb	r3, r3
 80097d4:	e02f      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	2b08      	cmp	r3, #8
 80097da:	d109      	bne.n	80097f0 <HAL_TIM_PWM_Start+0x58>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	bf14      	ite	ne
 80097e8:	2301      	movne	r3, #1
 80097ea:	2300      	moveq	r3, #0
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	e022      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2b0c      	cmp	r3, #12
 80097f4:	d109      	bne.n	800980a <HAL_TIM_PWM_Start+0x72>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	2b01      	cmp	r3, #1
 8009800:	bf14      	ite	ne
 8009802:	2301      	movne	r3, #1
 8009804:	2300      	moveq	r3, #0
 8009806:	b2db      	uxtb	r3, r3
 8009808:	e015      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	2b10      	cmp	r3, #16
 800980e:	d109      	bne.n	8009824 <HAL_TIM_PWM_Start+0x8c>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009816:	b2db      	uxtb	r3, r3
 8009818:	2b01      	cmp	r3, #1
 800981a:	bf14      	ite	ne
 800981c:	2301      	movne	r3, #1
 800981e:	2300      	moveq	r3, #0
 8009820:	b2db      	uxtb	r3, r3
 8009822:	e008      	b.n	8009836 <HAL_TIM_PWM_Start+0x9e>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b01      	cmp	r3, #1
 800982e:	bf14      	ite	ne
 8009830:	2301      	movne	r3, #1
 8009832:	2300      	moveq	r3, #0
 8009834:	b2db      	uxtb	r3, r3
 8009836:	2b00      	cmp	r3, #0
 8009838:	d001      	beq.n	800983e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800983a:	2301      	movs	r3, #1
 800983c:	e0a1      	b.n	8009982 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d104      	bne.n	800984e <HAL_TIM_PWM_Start+0xb6>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2202      	movs	r2, #2
 8009848:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800984c:	e023      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	2b04      	cmp	r3, #4
 8009852:	d104      	bne.n	800985e <HAL_TIM_PWM_Start+0xc6>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2202      	movs	r2, #2
 8009858:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800985c:	e01b      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d104      	bne.n	800986e <HAL_TIM_PWM_Start+0xd6>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2202      	movs	r2, #2
 8009868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800986c:	e013      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	2b0c      	cmp	r3, #12
 8009872:	d104      	bne.n	800987e <HAL_TIM_PWM_Start+0xe6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2202      	movs	r2, #2
 8009878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800987c:	e00b      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b10      	cmp	r3, #16
 8009882:	d104      	bne.n	800988e <HAL_TIM_PWM_Start+0xf6>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2202      	movs	r2, #2
 8009888:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800988c:	e003      	b.n	8009896 <HAL_TIM_PWM_Start+0xfe>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	2201      	movs	r2, #1
 800989c:	6839      	ldr	r1, [r7, #0]
 800989e:	4618      	mov	r0, r3
 80098a0:	f001 f8b4 	bl	800aa0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a38      	ldr	r2, [pc, #224]	@ (800998c <HAL_TIM_PWM_Start+0x1f4>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d018      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a37      	ldr	r2, [pc, #220]	@ (8009990 <HAL_TIM_PWM_Start+0x1f8>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d013      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a35      	ldr	r2, [pc, #212]	@ (8009994 <HAL_TIM_PWM_Start+0x1fc>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00e      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a34      	ldr	r2, [pc, #208]	@ (8009998 <HAL_TIM_PWM_Start+0x200>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d009      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a32      	ldr	r2, [pc, #200]	@ (800999c <HAL_TIM_PWM_Start+0x204>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d004      	beq.n	80098e0 <HAL_TIM_PWM_Start+0x148>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a31      	ldr	r2, [pc, #196]	@ (80099a0 <HAL_TIM_PWM_Start+0x208>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d101      	bne.n	80098e4 <HAL_TIM_PWM_Start+0x14c>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e000      	b.n	80098e6 <HAL_TIM_PWM_Start+0x14e>
 80098e4:	2300      	movs	r3, #0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d007      	beq.n	80098fa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80098f8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	4a23      	ldr	r2, [pc, #140]	@ (800998c <HAL_TIM_PWM_Start+0x1f4>)
 8009900:	4293      	cmp	r3, r2
 8009902:	d01d      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800990c:	d018      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a24      	ldr	r2, [pc, #144]	@ (80099a4 <HAL_TIM_PWM_Start+0x20c>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a22      	ldr	r2, [pc, #136]	@ (80099a8 <HAL_TIM_PWM_Start+0x210>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d00e      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a1a      	ldr	r2, [pc, #104]	@ (8009990 <HAL_TIM_PWM_Start+0x1f8>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d009      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a18      	ldr	r2, [pc, #96]	@ (8009994 <HAL_TIM_PWM_Start+0x1fc>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d004      	beq.n	8009940 <HAL_TIM_PWM_Start+0x1a8>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a19      	ldr	r2, [pc, #100]	@ (80099a0 <HAL_TIM_PWM_Start+0x208>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d115      	bne.n	800996c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	689a      	ldr	r2, [r3, #8]
 8009946:	4b19      	ldr	r3, [pc, #100]	@ (80099ac <HAL_TIM_PWM_Start+0x214>)
 8009948:	4013      	ands	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b06      	cmp	r3, #6
 8009950:	d015      	beq.n	800997e <HAL_TIM_PWM_Start+0x1e6>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009958:	d011      	beq.n	800997e <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f042 0201 	orr.w	r2, r2, #1
 8009968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800996a:	e008      	b.n	800997e <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f042 0201 	orr.w	r2, r2, #1
 800997a:	601a      	str	r2, [r3, #0]
 800997c:	e000      	b.n	8009980 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800997e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009980:	2300      	movs	r3, #0
}
 8009982:	4618      	mov	r0, r3
 8009984:	3710      	adds	r7, #16
 8009986:	46bd      	mov	sp, r7
 8009988:	bd80      	pop	{r7, pc}
 800998a:	bf00      	nop
 800998c:	40012c00 	.word	0x40012c00
 8009990:	40013400 	.word	0x40013400
 8009994:	40014000 	.word	0x40014000
 8009998:	40014400 	.word	0x40014400
 800999c:	40014800 	.word	0x40014800
 80099a0:	40015000 	.word	0x40015000
 80099a4:	40000400 	.word	0x40000400
 80099a8:	40000800 	.word	0x40000800
 80099ac:	00010007 	.word	0x00010007

080099b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0302 	and.w	r3, r3, #2
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d122      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0302 	and.w	r3, r3, #2
 80099d0:	2b02      	cmp	r3, #2
 80099d2:	d11b      	bne.n	8009a0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0202 	mvn.w	r2, #2
 80099dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2201      	movs	r2, #1
 80099e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	f003 0303 	and.w	r3, r3, #3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d003      	beq.n	80099fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fb88 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 80099f8:	e005      	b.n	8009a06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 fb7a 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 fb8b 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b04      	cmp	r3, #4
 8009a18:	d122      	bne.n	8009a60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	f003 0304 	and.w	r3, r3, #4
 8009a24:	2b04      	cmp	r3, #4
 8009a26:	d11b      	bne.n	8009a60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f06f 0204 	mvn.w	r2, #4
 8009a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2202      	movs	r2, #2
 8009a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	699b      	ldr	r3, [r3, #24]
 8009a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d003      	beq.n	8009a4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fb5e 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009a4c:	e005      	b.n	8009a5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 fb50 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 fb61 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b08      	cmp	r3, #8
 8009a6c:	d122      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f003 0308 	and.w	r3, r3, #8
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d11b      	bne.n	8009ab4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f06f 0208 	mvn.w	r2, #8
 8009a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2204      	movs	r2, #4
 8009a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	f003 0303 	and.w	r3, r3, #3
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d003      	beq.n	8009aa2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fb34 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009aa0:	e005      	b.n	8009aae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 fb26 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 fb37 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0310 	and.w	r3, r3, #16
 8009abe:	2b10      	cmp	r3, #16
 8009ac0:	d122      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f003 0310 	and.w	r3, r3, #16
 8009acc:	2b10      	cmp	r3, #16
 8009ace:	d11b      	bne.n	8009b08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f06f 0210 	mvn.w	r2, #16
 8009ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2208      	movs	r2, #8
 8009ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	69db      	ldr	r3, [r3, #28]
 8009ae6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d003      	beq.n	8009af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fb0a 	bl	800a108 <HAL_TIM_IC_CaptureCallback>
 8009af4:	e005      	b.n	8009b02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f000 fafc 	bl	800a0f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fb0d 	bl	800a11c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	691b      	ldr	r3, [r3, #16]
 8009b0e:	f003 0301 	and.w	r3, r3, #1
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d10e      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	68db      	ldr	r3, [r3, #12]
 8009b1c:	f003 0301 	and.w	r3, r3, #1
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d107      	bne.n	8009b34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f06f 0201 	mvn.w	r2, #1
 8009b2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 fad6 	bl	800a0e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b3e:	2b80      	cmp	r3, #128	@ 0x80
 8009b40:	d10e      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b4c:	2b80      	cmp	r3, #128	@ 0x80
 8009b4e:	d107      	bne.n	8009b60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009b58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f001 f8c6 	bl	800acec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b6e:	d10e      	bne.n	8009b8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009b7a:	2b80      	cmp	r3, #128	@ 0x80
 8009b7c:	d107      	bne.n	8009b8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009b86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f001 f8b9 	bl	800ad00 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b98:	2b40      	cmp	r3, #64	@ 0x40
 8009b9a:	d10e      	bne.n	8009bba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ba6:	2b40      	cmp	r3, #64	@ 0x40
 8009ba8:	d107      	bne.n	8009bba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009bb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fabb 	bl	800a130 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	f003 0320 	and.w	r3, r3, #32
 8009bc4:	2b20      	cmp	r3, #32
 8009bc6:	d10e      	bne.n	8009be6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68db      	ldr	r3, [r3, #12]
 8009bce:	f003 0320 	and.w	r3, r3, #32
 8009bd2:	2b20      	cmp	r3, #32
 8009bd4:	d107      	bne.n	8009be6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f06f 0220 	mvn.w	r2, #32
 8009bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 f879 	bl	800acd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	691b      	ldr	r3, [r3, #16]
 8009bec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009bf0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009bf4:	d10f      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009c00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009c04:	d107      	bne.n	8009c16 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8009c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f87f 	bl	800ad14 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c20:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c24:	d10f      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	68db      	ldr	r3, [r3, #12]
 8009c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009c30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009c34:	d107      	bne.n	8009c46 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8009c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f001 f871 	bl	800ad28 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c54:	d10f      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009c64:	d107      	bne.n	8009c76 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8009c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 f863 	bl	800ad3c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c84:	d10f      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	68db      	ldr	r3, [r3, #12]
 8009c8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009c90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009c94:	d107      	bne.n	8009ca6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8009c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 f855 	bl	800ad50 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ca6:	bf00      	nop
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}
	...

08009cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	60f8      	str	r0, [r7, #12]
 8009cb8:	60b9      	str	r1, [r7, #8]
 8009cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d101      	bne.n	8009cce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009cca:	2302      	movs	r3, #2
 8009ccc:	e0ff      	b.n	8009ece <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2b14      	cmp	r3, #20
 8009cda:	f200 80f0 	bhi.w	8009ebe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009cde:	a201      	add	r2, pc, #4	@ (adr r2, 8009ce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce4:	08009d39 	.word	0x08009d39
 8009ce8:	08009ebf 	.word	0x08009ebf
 8009cec:	08009ebf 	.word	0x08009ebf
 8009cf0:	08009ebf 	.word	0x08009ebf
 8009cf4:	08009d79 	.word	0x08009d79
 8009cf8:	08009ebf 	.word	0x08009ebf
 8009cfc:	08009ebf 	.word	0x08009ebf
 8009d00:	08009ebf 	.word	0x08009ebf
 8009d04:	08009dbb 	.word	0x08009dbb
 8009d08:	08009ebf 	.word	0x08009ebf
 8009d0c:	08009ebf 	.word	0x08009ebf
 8009d10:	08009ebf 	.word	0x08009ebf
 8009d14:	08009dfb 	.word	0x08009dfb
 8009d18:	08009ebf 	.word	0x08009ebf
 8009d1c:	08009ebf 	.word	0x08009ebf
 8009d20:	08009ebf 	.word	0x08009ebf
 8009d24:	08009e3d 	.word	0x08009e3d
 8009d28:	08009ebf 	.word	0x08009ebf
 8009d2c:	08009ebf 	.word	0x08009ebf
 8009d30:	08009ebf 	.word	0x08009ebf
 8009d34:	08009e7d 	.word	0x08009e7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f000 fa9e 	bl	800a280 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	699a      	ldr	r2, [r3, #24]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0208 	orr.w	r2, r2, #8
 8009d52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	699a      	ldr	r2, [r3, #24]
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0204 	bic.w	r2, r2, #4
 8009d62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	6999      	ldr	r1, [r3, #24]
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	691a      	ldr	r2, [r3, #16]
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	430a      	orrs	r2, r1
 8009d74:	619a      	str	r2, [r3, #24]
      break;
 8009d76:	e0a5      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f000 fb18 	bl	800a3b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	699a      	ldr	r2, [r3, #24]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	699a      	ldr	r2, [r3, #24]
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	6999      	ldr	r1, [r3, #24]
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	021a      	lsls	r2, r3, #8
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	430a      	orrs	r2, r1
 8009db6:	619a      	str	r2, [r3, #24]
      break;
 8009db8:	e084      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68b9      	ldr	r1, [r7, #8]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 fb8b 	bl	800a4dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	69da      	ldr	r2, [r3, #28]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f042 0208 	orr.w	r2, r2, #8
 8009dd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	69da      	ldr	r2, [r3, #28]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	f022 0204 	bic.w	r2, r2, #4
 8009de4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	69d9      	ldr	r1, [r3, #28]
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	691a      	ldr	r2, [r3, #16]
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	61da      	str	r2, [r3, #28]
      break;
 8009df8:	e064      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68b9      	ldr	r1, [r7, #8]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f000 fbfd 	bl	800a600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	69da      	ldr	r2, [r3, #28]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	69da      	ldr	r2, [r3, #28]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	69d9      	ldr	r1, [r3, #28]
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	691b      	ldr	r3, [r3, #16]
 8009e30:	021a      	lsls	r2, r3, #8
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	430a      	orrs	r2, r1
 8009e38:	61da      	str	r2, [r3, #28]
      break;
 8009e3a:	e043      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	68b9      	ldr	r1, [r7, #8]
 8009e42:	4618      	mov	r0, r3
 8009e44:	f000 fc70 	bl	800a728 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	f042 0208 	orr.w	r2, r2, #8
 8009e56:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f022 0204 	bic.w	r2, r2, #4
 8009e66:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	691a      	ldr	r2, [r3, #16]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	430a      	orrs	r2, r1
 8009e78:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009e7a:	e023      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68b9      	ldr	r1, [r7, #8]
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 fcba 	bl	800a7fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ea6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	021a      	lsls	r2, r3, #8
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	430a      	orrs	r2, r1
 8009eba:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8009ebc:	e002      	b.n	8009ec4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8009ec2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop

08009ed8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009eec:	2b01      	cmp	r3, #1
 8009eee:	d101      	bne.n	8009ef4 <HAL_TIM_ConfigClockSource+0x1c>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	e0e6      	b.n	800a0c2 <HAL_TIM_ConfigClockSource+0x1ea>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2202      	movs	r2, #2
 8009f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8009f12:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f1e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a67      	ldr	r2, [pc, #412]	@ (800a0cc <HAL_TIM_ConfigClockSource+0x1f4>)
 8009f2e:	4293      	cmp	r3, r2
 8009f30:	f000 80b1 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f34:	4a65      	ldr	r2, [pc, #404]	@ (800a0cc <HAL_TIM_ConfigClockSource+0x1f4>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	f200 80b6 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f3c:	4a64      	ldr	r2, [pc, #400]	@ (800a0d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	f000 80a9 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f44:	4a62      	ldr	r2, [pc, #392]	@ (800a0d0 <HAL_TIM_ConfigClockSource+0x1f8>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	f200 80ae 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f4c:	4a61      	ldr	r2, [pc, #388]	@ (800a0d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	f000 80a1 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f54:	4a5f      	ldr	r2, [pc, #380]	@ (800a0d4 <HAL_TIM_ConfigClockSource+0x1fc>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	f200 80a6 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f5c:	4a5e      	ldr	r2, [pc, #376]	@ (800a0d8 <HAL_TIM_ConfigClockSource+0x200>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	f000 8099 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f64:	4a5c      	ldr	r2, [pc, #368]	@ (800a0d8 <HAL_TIM_ConfigClockSource+0x200>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	f200 809e 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f6c:	4a5b      	ldr	r2, [pc, #364]	@ (800a0dc <HAL_TIM_ConfigClockSource+0x204>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	f000 8091 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f74:	4a59      	ldr	r2, [pc, #356]	@ (800a0dc <HAL_TIM_ConfigClockSource+0x204>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	f200 8096 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f80:	f000 8089 	beq.w	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009f84:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009f88:	f200 808e 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f90:	d03e      	beq.n	800a010 <HAL_TIM_ConfigClockSource+0x138>
 8009f92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f96:	f200 8087 	bhi.w	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009f9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f9e:	f000 8086 	beq.w	800a0ae <HAL_TIM_ConfigClockSource+0x1d6>
 8009fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fa6:	d87f      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fa8:	2b70      	cmp	r3, #112	@ 0x70
 8009faa:	d01a      	beq.n	8009fe2 <HAL_TIM_ConfigClockSource+0x10a>
 8009fac:	2b70      	cmp	r3, #112	@ 0x70
 8009fae:	d87b      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fb0:	2b60      	cmp	r3, #96	@ 0x60
 8009fb2:	d050      	beq.n	800a056 <HAL_TIM_ConfigClockSource+0x17e>
 8009fb4:	2b60      	cmp	r3, #96	@ 0x60
 8009fb6:	d877      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fb8:	2b50      	cmp	r3, #80	@ 0x50
 8009fba:	d03c      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0x15e>
 8009fbc:	2b50      	cmp	r3, #80	@ 0x50
 8009fbe:	d873      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fc0:	2b40      	cmp	r3, #64	@ 0x40
 8009fc2:	d058      	beq.n	800a076 <HAL_TIM_ConfigClockSource+0x19e>
 8009fc4:	2b40      	cmp	r3, #64	@ 0x40
 8009fc6:	d86f      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fc8:	2b30      	cmp	r3, #48	@ 0x30
 8009fca:	d064      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009fcc:	2b30      	cmp	r3, #48	@ 0x30
 8009fce:	d86b      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fd0:	2b20      	cmp	r3, #32
 8009fd2:	d060      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009fd4:	2b20      	cmp	r3, #32
 8009fd6:	d867      	bhi.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d05c      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009fdc:	2b10      	cmp	r3, #16
 8009fde:	d05a      	beq.n	800a096 <HAL_TIM_ConfigClockSource+0x1be>
 8009fe0:	e062      	b.n	800a0a8 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	6899      	ldr	r1, [r3, #8]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f000 fceb 	bl	800a9cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a004:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	609a      	str	r2, [r3, #8]
      break;
 800a00e:	e04f      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	6899      	ldr	r1, [r3, #8]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	685a      	ldr	r2, [r3, #4]
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f000 fcd4 	bl	800a9cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a032:	609a      	str	r2, [r3, #8]
      break;
 800a034:	e03c      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6859      	ldr	r1, [r3, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	461a      	mov	r2, r3
 800a044:	f000 fc46 	bl	800a8d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2150      	movs	r1, #80	@ 0x50
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 fc9f 	bl	800a992 <TIM_ITRx_SetConfig>
      break;
 800a054:	e02c      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6818      	ldr	r0, [r3, #0]
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	6859      	ldr	r1, [r3, #4]
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	68db      	ldr	r3, [r3, #12]
 800a062:	461a      	mov	r2, r3
 800a064:	f000 fc65 	bl	800a932 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	2160      	movs	r1, #96	@ 0x60
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fc8f 	bl	800a992 <TIM_ITRx_SetConfig>
      break;
 800a074:	e01c      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	6859      	ldr	r1, [r3, #4]
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	461a      	mov	r2, r3
 800a084:	f000 fc26 	bl	800a8d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	2140      	movs	r1, #64	@ 0x40
 800a08e:	4618      	mov	r0, r3
 800a090:	f000 fc7f 	bl	800a992 <TIM_ITRx_SetConfig>
      break;
 800a094:	e00c      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4619      	mov	r1, r3
 800a0a0:	4610      	mov	r0, r2
 800a0a2:	f000 fc76 	bl	800a992 <TIM_ITRx_SetConfig>
      break;
 800a0a6:	e003      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	73fb      	strb	r3, [r7, #15]
      break;
 800a0ac:	e000      	b.n	800a0b0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a0ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	2201      	movs	r2, #1
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}
 800a0ca:	bf00      	nop
 800a0cc:	00100070 	.word	0x00100070
 800a0d0:	00100050 	.word	0x00100050
 800a0d4:	00100040 	.word	0x00100040
 800a0d8:	00100030 	.word	0x00100030
 800a0dc:	00100020 	.word	0x00100020

0800a0e0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a42      	ldr	r2, [pc, #264]	@ (800a260 <TIM_Base_SetConfig+0x11c>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d013      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a3f      	ldr	r2, [pc, #252]	@ (800a264 <TIM_Base_SetConfig+0x120>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a3e      	ldr	r2, [pc, #248]	@ (800a268 <TIM_Base_SetConfig+0x124>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a3d      	ldr	r2, [pc, #244]	@ (800a26c <TIM_Base_SetConfig+0x128>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x40>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a3c      	ldr	r2, [pc, #240]	@ (800a270 <TIM_Base_SetConfig+0x12c>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a31      	ldr	r2, [pc, #196]	@ (800a260 <TIM_Base_SetConfig+0x11c>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d01f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1a4:	d01b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a2e      	ldr	r2, [pc, #184]	@ (800a264 <TIM_Base_SetConfig+0x120>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d017      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a268 <TIM_Base_SetConfig+0x124>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d013      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a2c      	ldr	r2, [pc, #176]	@ (800a26c <TIM_Base_SetConfig+0x128>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00f      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a2c      	ldr	r2, [pc, #176]	@ (800a274 <TIM_Base_SetConfig+0x130>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d00b      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a2b      	ldr	r2, [pc, #172]	@ (800a278 <TIM_Base_SetConfig+0x134>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d007      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a2a      	ldr	r2, [pc, #168]	@ (800a27c <TIM_Base_SetConfig+0x138>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d003      	beq.n	800a1de <TIM_Base_SetConfig+0x9a>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a25      	ldr	r2, [pc, #148]	@ (800a270 <TIM_Base_SetConfig+0x12c>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d108      	bne.n	800a1f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	68fa      	ldr	r2, [r7, #12]
 800a1ec:	4313      	orrs	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68fa      	ldr	r2, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689a      	ldr	r2, [r3, #8]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	4a12      	ldr	r2, [pc, #72]	@ (800a260 <TIM_Base_SetConfig+0x11c>)
 800a218:	4293      	cmp	r3, r2
 800a21a:	d013      	beq.n	800a244 <TIM_Base_SetConfig+0x100>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	4a13      	ldr	r2, [pc, #76]	@ (800a26c <TIM_Base_SetConfig+0x128>)
 800a220:	4293      	cmp	r3, r2
 800a222:	d00f      	beq.n	800a244 <TIM_Base_SetConfig+0x100>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a13      	ldr	r2, [pc, #76]	@ (800a274 <TIM_Base_SetConfig+0x130>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d00b      	beq.n	800a244 <TIM_Base_SetConfig+0x100>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a12      	ldr	r2, [pc, #72]	@ (800a278 <TIM_Base_SetConfig+0x134>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d007      	beq.n	800a244 <TIM_Base_SetConfig+0x100>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a11      	ldr	r2, [pc, #68]	@ (800a27c <TIM_Base_SetConfig+0x138>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d003      	beq.n	800a244 <TIM_Base_SetConfig+0x100>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a0c      	ldr	r2, [pc, #48]	@ (800a270 <TIM_Base_SetConfig+0x12c>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d103      	bne.n	800a24c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a244:	683b      	ldr	r3, [r7, #0]
 800a246:	691a      	ldr	r2, [r3, #16]
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2201      	movs	r2, #1
 800a250:	615a      	str	r2, [r3, #20]
}
 800a252:	bf00      	nop
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40012c00 	.word	0x40012c00
 800a264:	40000400 	.word	0x40000400
 800a268:	40000800 	.word	0x40000800
 800a26c:	40013400 	.word	0x40013400
 800a270:	40015000 	.word	0x40015000
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800

0800a280 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a280:	b480      	push	{r7}
 800a282:	b087      	sub	sp, #28
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a1b      	ldr	r3, [r3, #32]
 800a28e:	f023 0201 	bic.w	r2, r3, #1
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6a1b      	ldr	r3, [r3, #32]
 800a29a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	699b      	ldr	r3, [r3, #24]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a2ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	f023 0303 	bic.w	r3, r3, #3
 800a2ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68fa      	ldr	r2, [r7, #12]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f023 0302 	bic.w	r3, r3, #2
 800a2cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	689b      	ldr	r3, [r3, #8]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	4313      	orrs	r3, r2
 800a2d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a30      	ldr	r2, [pc, #192]	@ (800a39c <TIM_OC1_SetConfig+0x11c>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d013      	beq.n	800a308 <TIM_OC1_SetConfig+0x88>
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	4a2f      	ldr	r2, [pc, #188]	@ (800a3a0 <TIM_OC1_SetConfig+0x120>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d00f      	beq.n	800a308 <TIM_OC1_SetConfig+0x88>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	4a2e      	ldr	r2, [pc, #184]	@ (800a3a4 <TIM_OC1_SetConfig+0x124>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d00b      	beq.n	800a308 <TIM_OC1_SetConfig+0x88>
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4a2d      	ldr	r2, [pc, #180]	@ (800a3a8 <TIM_OC1_SetConfig+0x128>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d007      	beq.n	800a308 <TIM_OC1_SetConfig+0x88>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	4a2c      	ldr	r2, [pc, #176]	@ (800a3ac <TIM_OC1_SetConfig+0x12c>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d003      	beq.n	800a308 <TIM_OC1_SetConfig+0x88>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	4a2b      	ldr	r2, [pc, #172]	@ (800a3b0 <TIM_OC1_SetConfig+0x130>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d10c      	bne.n	800a322 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a308:	697b      	ldr	r3, [r7, #20]
 800a30a:	f023 0308 	bic.w	r3, r3, #8
 800a30e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a310:	683b      	ldr	r3, [r7, #0]
 800a312:	68db      	ldr	r3, [r3, #12]
 800a314:	697a      	ldr	r2, [r7, #20]
 800a316:	4313      	orrs	r3, r2
 800a318:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f023 0304 	bic.w	r3, r3, #4
 800a320:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	4a1d      	ldr	r2, [pc, #116]	@ (800a39c <TIM_OC1_SetConfig+0x11c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d013      	beq.n	800a352 <TIM_OC1_SetConfig+0xd2>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3a0 <TIM_OC1_SetConfig+0x120>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d00f      	beq.n	800a352 <TIM_OC1_SetConfig+0xd2>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	4a1b      	ldr	r2, [pc, #108]	@ (800a3a4 <TIM_OC1_SetConfig+0x124>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d00b      	beq.n	800a352 <TIM_OC1_SetConfig+0xd2>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4a1a      	ldr	r2, [pc, #104]	@ (800a3a8 <TIM_OC1_SetConfig+0x128>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d007      	beq.n	800a352 <TIM_OC1_SetConfig+0xd2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	4a19      	ldr	r2, [pc, #100]	@ (800a3ac <TIM_OC1_SetConfig+0x12c>)
 800a346:	4293      	cmp	r3, r2
 800a348:	d003      	beq.n	800a352 <TIM_OC1_SetConfig+0xd2>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	4a18      	ldr	r2, [pc, #96]	@ (800a3b0 <TIM_OC1_SetConfig+0x130>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d111      	bne.n	800a376 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	695b      	ldr	r3, [r3, #20]
 800a366:	693a      	ldr	r2, [r7, #16]
 800a368:	4313      	orrs	r3, r2
 800a36a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	699b      	ldr	r3, [r3, #24]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4313      	orrs	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	693a      	ldr	r2, [r7, #16]
 800a37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	685a      	ldr	r2, [r3, #4]
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	621a      	str	r2, [r3, #32]
}
 800a390:	bf00      	nop
 800a392:	371c      	adds	r7, #28
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr
 800a39c:	40012c00 	.word	0x40012c00
 800a3a0:	40013400 	.word	0x40013400
 800a3a4:	40014000 	.word	0x40014000
 800a3a8:	40014400 	.word	0x40014400
 800a3ac:	40014800 	.word	0x40014800
 800a3b0:	40015000 	.word	0x40015000

0800a3b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b087      	sub	sp, #28
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a1b      	ldr	r3, [r3, #32]
 800a3c2:	f023 0210 	bic.w	r2, r3, #16
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	6a1b      	ldr	r3, [r3, #32]
 800a3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	699b      	ldr	r3, [r3, #24]
 800a3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a3e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a3ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	021b      	lsls	r3, r3, #8
 800a3f6:	68fa      	ldr	r2, [r7, #12]
 800a3f8:	4313      	orrs	r3, r2
 800a3fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	f023 0320 	bic.w	r3, r3, #32
 800a402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	011b      	lsls	r3, r3, #4
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a2c      	ldr	r2, [pc, #176]	@ (800a4c4 <TIM_OC2_SetConfig+0x110>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d007      	beq.n	800a428 <TIM_OC2_SetConfig+0x74>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	4a2b      	ldr	r2, [pc, #172]	@ (800a4c8 <TIM_OC2_SetConfig+0x114>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d003      	beq.n	800a428 <TIM_OC2_SetConfig+0x74>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	4a2a      	ldr	r2, [pc, #168]	@ (800a4cc <TIM_OC2_SetConfig+0x118>)
 800a424:	4293      	cmp	r3, r2
 800a426:	d10d      	bne.n	800a444 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a42e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	68db      	ldr	r3, [r3, #12]
 800a434:	011b      	lsls	r3, r3, #4
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	4313      	orrs	r3, r2
 800a43a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a442:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	4a1f      	ldr	r2, [pc, #124]	@ (800a4c4 <TIM_OC2_SetConfig+0x110>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d013      	beq.n	800a474 <TIM_OC2_SetConfig+0xc0>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c8 <TIM_OC2_SetConfig+0x114>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d00f      	beq.n	800a474 <TIM_OC2_SetConfig+0xc0>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	4a1e      	ldr	r2, [pc, #120]	@ (800a4d0 <TIM_OC2_SetConfig+0x11c>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d00b      	beq.n	800a474 <TIM_OC2_SetConfig+0xc0>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d4 <TIM_OC2_SetConfig+0x120>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d007      	beq.n	800a474 <TIM_OC2_SetConfig+0xc0>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	4a1c      	ldr	r2, [pc, #112]	@ (800a4d8 <TIM_OC2_SetConfig+0x124>)
 800a468:	4293      	cmp	r3, r2
 800a46a:	d003      	beq.n	800a474 <TIM_OC2_SetConfig+0xc0>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	4a17      	ldr	r2, [pc, #92]	@ (800a4cc <TIM_OC2_SetConfig+0x118>)
 800a470:	4293      	cmp	r3, r2
 800a472:	d113      	bne.n	800a49c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a47a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a482:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	695b      	ldr	r3, [r3, #20]
 800a488:	009b      	lsls	r3, r3, #2
 800a48a:	693a      	ldr	r2, [r7, #16]
 800a48c:	4313      	orrs	r3, r2
 800a48e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	699b      	ldr	r3, [r3, #24]
 800a494:	009b      	lsls	r3, r3, #2
 800a496:	693a      	ldr	r2, [r7, #16]
 800a498:	4313      	orrs	r3, r2
 800a49a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	693a      	ldr	r2, [r7, #16]
 800a4a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	685a      	ldr	r2, [r3, #4]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	697a      	ldr	r2, [r7, #20]
 800a4b4:	621a      	str	r2, [r3, #32]
}
 800a4b6:	bf00      	nop
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	40012c00 	.word	0x40012c00
 800a4c8:	40013400 	.word	0x40013400
 800a4cc:	40015000 	.word	0x40015000
 800a4d0:	40014000 	.word	0x40014000
 800a4d4:	40014400 	.word	0x40014400
 800a4d8:	40014800 	.word	0x40014800

0800a4dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6a1b      	ldr	r3, [r3, #32]
 800a4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a50a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a50e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f023 0303 	bic.w	r3, r3, #3
 800a516:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	68fa      	ldr	r2, [r7, #12]
 800a51e:	4313      	orrs	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a528:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	689b      	ldr	r3, [r3, #8]
 800a52e:	021b      	lsls	r3, r3, #8
 800a530:	697a      	ldr	r2, [r7, #20]
 800a532:	4313      	orrs	r3, r2
 800a534:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	4a2b      	ldr	r2, [pc, #172]	@ (800a5e8 <TIM_OC3_SetConfig+0x10c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d007      	beq.n	800a54e <TIM_OC3_SetConfig+0x72>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	4a2a      	ldr	r2, [pc, #168]	@ (800a5ec <TIM_OC3_SetConfig+0x110>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d003      	beq.n	800a54e <TIM_OC3_SetConfig+0x72>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4a29      	ldr	r2, [pc, #164]	@ (800a5f0 <TIM_OC3_SetConfig+0x114>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d10d      	bne.n	800a56a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a554:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	68db      	ldr	r3, [r3, #12]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	697a      	ldr	r2, [r7, #20]
 800a55e:	4313      	orrs	r3, r2
 800a560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	4a1e      	ldr	r2, [pc, #120]	@ (800a5e8 <TIM_OC3_SetConfig+0x10c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d013      	beq.n	800a59a <TIM_OC3_SetConfig+0xbe>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a1d      	ldr	r2, [pc, #116]	@ (800a5ec <TIM_OC3_SetConfig+0x110>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d00f      	beq.n	800a59a <TIM_OC3_SetConfig+0xbe>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a1d      	ldr	r2, [pc, #116]	@ (800a5f4 <TIM_OC3_SetConfig+0x118>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d00b      	beq.n	800a59a <TIM_OC3_SetConfig+0xbe>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a1c      	ldr	r2, [pc, #112]	@ (800a5f8 <TIM_OC3_SetConfig+0x11c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d007      	beq.n	800a59a <TIM_OC3_SetConfig+0xbe>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a1b      	ldr	r2, [pc, #108]	@ (800a5fc <TIM_OC3_SetConfig+0x120>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d003      	beq.n	800a59a <TIM_OC3_SetConfig+0xbe>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a16      	ldr	r2, [pc, #88]	@ (800a5f0 <TIM_OC3_SetConfig+0x114>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d113      	bne.n	800a5c2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a5a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a5a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	695b      	ldr	r3, [r3, #20]
 800a5ae:	011b      	lsls	r3, r3, #4
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	699b      	ldr	r3, [r3, #24]
 800a5ba:	011b      	lsls	r3, r3, #4
 800a5bc:	693a      	ldr	r2, [r7, #16]
 800a5be:	4313      	orrs	r3, r2
 800a5c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68fa      	ldr	r2, [r7, #12]
 800a5cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	621a      	str	r2, [r3, #32]
}
 800a5dc:	bf00      	nop
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr
 800a5e8:	40012c00 	.word	0x40012c00
 800a5ec:	40013400 	.word	0x40013400
 800a5f0:	40015000 	.word	0x40015000
 800a5f4:	40014000 	.word	0x40014000
 800a5f8:	40014400 	.word	0x40014400
 800a5fc:	40014800 	.word	0x40014800

0800a600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6a1b      	ldr	r3, [r3, #32]
 800a61a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	69db      	ldr	r3, [r3, #28]
 800a626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a62e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a63a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	021b      	lsls	r3, r3, #8
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	4313      	orrs	r3, r2
 800a646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a64e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a650:	683b      	ldr	r3, [r7, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	031b      	lsls	r3, r3, #12
 800a656:	697a      	ldr	r2, [r7, #20]
 800a658:	4313      	orrs	r3, r2
 800a65a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	4a2c      	ldr	r2, [pc, #176]	@ (800a710 <TIM_OC4_SetConfig+0x110>)
 800a660:	4293      	cmp	r3, r2
 800a662:	d007      	beq.n	800a674 <TIM_OC4_SetConfig+0x74>
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	4a2b      	ldr	r2, [pc, #172]	@ (800a714 <TIM_OC4_SetConfig+0x114>)
 800a668:	4293      	cmp	r3, r2
 800a66a:	d003      	beq.n	800a674 <TIM_OC4_SetConfig+0x74>
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	4a2a      	ldr	r2, [pc, #168]	@ (800a718 <TIM_OC4_SetConfig+0x118>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d10d      	bne.n	800a690 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800a674:	697b      	ldr	r3, [r7, #20]
 800a676:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a67a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	031b      	lsls	r3, r3, #12
 800a682:	697a      	ldr	r2, [r7, #20]
 800a684:	4313      	orrs	r3, r2
 800a686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a68e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	4a1f      	ldr	r2, [pc, #124]	@ (800a710 <TIM_OC4_SetConfig+0x110>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d013      	beq.n	800a6c0 <TIM_OC4_SetConfig+0xc0>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	4a1e      	ldr	r2, [pc, #120]	@ (800a714 <TIM_OC4_SetConfig+0x114>)
 800a69c:	4293      	cmp	r3, r2
 800a69e:	d00f      	beq.n	800a6c0 <TIM_OC4_SetConfig+0xc0>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a71c <TIM_OC4_SetConfig+0x11c>)
 800a6a4:	4293      	cmp	r3, r2
 800a6a6:	d00b      	beq.n	800a6c0 <TIM_OC4_SetConfig+0xc0>
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4a1d      	ldr	r2, [pc, #116]	@ (800a720 <TIM_OC4_SetConfig+0x120>)
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	d007      	beq.n	800a6c0 <TIM_OC4_SetConfig+0xc0>
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	4a1c      	ldr	r2, [pc, #112]	@ (800a724 <TIM_OC4_SetConfig+0x124>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d003      	beq.n	800a6c0 <TIM_OC4_SetConfig+0xc0>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	4a17      	ldr	r2, [pc, #92]	@ (800a718 <TIM_OC4_SetConfig+0x118>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d113      	bne.n	800a6e8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a6c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800a6c8:	693b      	ldr	r3, [r7, #16]
 800a6ca:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	019b      	lsls	r3, r3, #6
 800a6d6:	693a      	ldr	r2, [r7, #16]
 800a6d8:	4313      	orrs	r3, r2
 800a6da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	699b      	ldr	r3, [r3, #24]
 800a6e0:	019b      	lsls	r3, r3, #6
 800a6e2:	693a      	ldr	r2, [r7, #16]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	693a      	ldr	r2, [r7, #16]
 800a6ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	685a      	ldr	r2, [r3, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	621a      	str	r2, [r3, #32]
}
 800a702:	bf00      	nop
 800a704:	371c      	adds	r7, #28
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr
 800a70e:	bf00      	nop
 800a710:	40012c00 	.word	0x40012c00
 800a714:	40013400 	.word	0x40013400
 800a718:	40015000 	.word	0x40015000
 800a71c:	40014000 	.word	0x40014000
 800a720:	40014400 	.word	0x40014400
 800a724:	40014800 	.word	0x40014800

0800a728 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a728:	b480      	push	{r7}
 800a72a:	b087      	sub	sp, #28
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a1b      	ldr	r3, [r3, #32]
 800a736:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	6a1b      	ldr	r3, [r3, #32]
 800a742:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a756:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a75a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68fa      	ldr	r2, [r7, #12]
 800a762:	4313      	orrs	r3, r2
 800a764:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800a76c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	689b      	ldr	r3, [r3, #8]
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	693a      	ldr	r2, [r7, #16]
 800a776:	4313      	orrs	r3, r2
 800a778:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4a19      	ldr	r2, [pc, #100]	@ (800a7e4 <TIM_OC5_SetConfig+0xbc>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d013      	beq.n	800a7aa <TIM_OC5_SetConfig+0x82>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	4a18      	ldr	r2, [pc, #96]	@ (800a7e8 <TIM_OC5_SetConfig+0xc0>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d00f      	beq.n	800a7aa <TIM_OC5_SetConfig+0x82>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	4a17      	ldr	r2, [pc, #92]	@ (800a7ec <TIM_OC5_SetConfig+0xc4>)
 800a78e:	4293      	cmp	r3, r2
 800a790:	d00b      	beq.n	800a7aa <TIM_OC5_SetConfig+0x82>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	4a16      	ldr	r2, [pc, #88]	@ (800a7f0 <TIM_OC5_SetConfig+0xc8>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d007      	beq.n	800a7aa <TIM_OC5_SetConfig+0x82>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	4a15      	ldr	r2, [pc, #84]	@ (800a7f4 <TIM_OC5_SetConfig+0xcc>)
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d003      	beq.n	800a7aa <TIM_OC5_SetConfig+0x82>
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	4a14      	ldr	r2, [pc, #80]	@ (800a7f8 <TIM_OC5_SetConfig+0xd0>)
 800a7a6:	4293      	cmp	r3, r2
 800a7a8:	d109      	bne.n	800a7be <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7b0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	695b      	ldr	r3, [r3, #20]
 800a7b6:	021b      	lsls	r3, r3, #8
 800a7b8:	697a      	ldr	r2, [r7, #20]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	697a      	ldr	r2, [r7, #20]
 800a7c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	685a      	ldr	r2, [r3, #4]
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	621a      	str	r2, [r3, #32]
}
 800a7d8:	bf00      	nop
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr
 800a7e4:	40012c00 	.word	0x40012c00
 800a7e8:	40013400 	.word	0x40013400
 800a7ec:	40014000 	.word	0x40014000
 800a7f0:	40014400 	.word	0x40014400
 800a7f4:	40014800 	.word	0x40014800
 800a7f8:	40015000 	.word	0x40015000

0800a7fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b087      	sub	sp, #28
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
 800a804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a1b      	ldr	r3, [r3, #32]
 800a80a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6a1b      	ldr	r3, [r3, #32]
 800a816:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a82a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	021b      	lsls	r3, r3, #8
 800a836:	68fa      	ldr	r2, [r7, #12]
 800a838:	4313      	orrs	r3, r2
 800a83a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a842:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	689b      	ldr	r3, [r3, #8]
 800a848:	051b      	lsls	r3, r3, #20
 800a84a:	693a      	ldr	r2, [r7, #16]
 800a84c:	4313      	orrs	r3, r2
 800a84e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1a      	ldr	r2, [pc, #104]	@ (800a8bc <TIM_OC6_SetConfig+0xc0>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d013      	beq.n	800a880 <TIM_OC6_SetConfig+0x84>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a19      	ldr	r2, [pc, #100]	@ (800a8c0 <TIM_OC6_SetConfig+0xc4>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d00f      	beq.n	800a880 <TIM_OC6_SetConfig+0x84>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	4a18      	ldr	r2, [pc, #96]	@ (800a8c4 <TIM_OC6_SetConfig+0xc8>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d00b      	beq.n	800a880 <TIM_OC6_SetConfig+0x84>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a17      	ldr	r2, [pc, #92]	@ (800a8c8 <TIM_OC6_SetConfig+0xcc>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d007      	beq.n	800a880 <TIM_OC6_SetConfig+0x84>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a16      	ldr	r2, [pc, #88]	@ (800a8cc <TIM_OC6_SetConfig+0xd0>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d003      	beq.n	800a880 <TIM_OC6_SetConfig+0x84>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a15      	ldr	r2, [pc, #84]	@ (800a8d0 <TIM_OC6_SetConfig+0xd4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d109      	bne.n	800a894 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a886:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	695b      	ldr	r3, [r3, #20]
 800a88c:	029b      	lsls	r3, r3, #10
 800a88e:	697a      	ldr	r2, [r7, #20]
 800a890:	4313      	orrs	r3, r2
 800a892:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	697a      	ldr	r2, [r7, #20]
 800a898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	685a      	ldr	r2, [r3, #4]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	693a      	ldr	r2, [r7, #16]
 800a8ac:	621a      	str	r2, [r3, #32]
}
 800a8ae:	bf00      	nop
 800a8b0:	371c      	adds	r7, #28
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	40013400 	.word	0x40013400
 800a8c4:	40014000 	.word	0x40014000
 800a8c8:	40014400 	.word	0x40014400
 800a8cc:	40014800 	.word	0x40014800
 800a8d0:	40015000 	.word	0x40015000

0800a8d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b087      	sub	sp, #28
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6a1b      	ldr	r3, [r3, #32]
 800a8e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	6a1b      	ldr	r3, [r3, #32]
 800a8ea:	f023 0201 	bic.w	r2, r3, #1
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	699b      	ldr	r3, [r3, #24]
 800a8f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a8fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	693a      	ldr	r2, [r7, #16]
 800a906:	4313      	orrs	r3, r2
 800a908:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f023 030a 	bic.w	r3, r3, #10
 800a910:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	68bb      	ldr	r3, [r7, #8]
 800a916:	4313      	orrs	r3, r2
 800a918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	697a      	ldr	r2, [r7, #20]
 800a924:	621a      	str	r2, [r3, #32]
}
 800a926:	bf00      	nop
 800a928:	371c      	adds	r7, #28
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a932:	b480      	push	{r7}
 800a934:	b087      	sub	sp, #28
 800a936:	af00      	add	r7, sp, #0
 800a938:	60f8      	str	r0, [r7, #12]
 800a93a:	60b9      	str	r1, [r7, #8]
 800a93c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	f023 0210 	bic.w	r2, r3, #16
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	699b      	ldr	r3, [r3, #24]
 800a94e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	6a1b      	ldr	r3, [r3, #32]
 800a954:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a95c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	031b      	lsls	r3, r3, #12
 800a962:	697a      	ldr	r2, [r7, #20]
 800a964:	4313      	orrs	r3, r2
 800a966:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a968:	693b      	ldr	r3, [r7, #16]
 800a96a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a96e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a970:	68bb      	ldr	r3, [r7, #8]
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	693a      	ldr	r2, [r7, #16]
 800a976:	4313      	orrs	r3, r2
 800a978:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	697a      	ldr	r2, [r7, #20]
 800a97e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	693a      	ldr	r2, [r7, #16]
 800a984:	621a      	str	r2, [r3, #32]
}
 800a986:	bf00      	nop
 800a988:	371c      	adds	r7, #28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a992:	b480      	push	{r7}
 800a994:	b085      	sub	sp, #20
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
 800a99a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a9a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a9ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	f043 0307 	orr.w	r3, r3, #7
 800a9b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	609a      	str	r2, [r3, #8]
}
 800a9c0:	bf00      	nop
 800a9c2:	3714      	adds	r7, #20
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	607a      	str	r2, [r7, #4]
 800a9d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	689b      	ldr	r3, [r3, #8]
 800a9de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	021a      	lsls	r2, r3, #8
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	697a      	ldr	r2, [r7, #20]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	697a      	ldr	r2, [r7, #20]
 800a9fe:	609a      	str	r2, [r3, #8]
}
 800aa00:	bf00      	nop
 800aa02:	371c      	adds	r7, #28
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	b087      	sub	sp, #28
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	f003 031f 	and.w	r3, r3, #31
 800aa1e:	2201      	movs	r2, #1
 800aa20:	fa02 f303 	lsl.w	r3, r2, r3
 800aa24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6a1a      	ldr	r2, [r3, #32]
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	43db      	mvns	r3, r3
 800aa2e:	401a      	ands	r2, r3
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	6a1a      	ldr	r2, [r3, #32]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	f003 031f 	and.w	r3, r3, #31
 800aa3e:	6879      	ldr	r1, [r7, #4]
 800aa40:	fa01 f303 	lsl.w	r3, r1, r3
 800aa44:	431a      	orrs	r2, r3
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	621a      	str	r2, [r3, #32]
}
 800aa4a:	bf00      	nop
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr
	...

0800aa58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b085      	sub	sp, #20
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d101      	bne.n	800aa70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800aa6c:	2302      	movs	r3, #2
 800aa6e:	e06f      	b.n	800ab50 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2201      	movs	r2, #1
 800aa74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a31      	ldr	r2, [pc, #196]	@ (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d009      	beq.n	800aaae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	4a30      	ldr	r2, [pc, #192]	@ (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d004      	beq.n	800aaae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a2e      	ldr	r2, [pc, #184]	@ (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d108      	bne.n	800aac0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800aab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	4313      	orrs	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aac6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aaca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68fa      	ldr	r2, [r7, #12]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1e      	ldr	r2, [pc, #120]	@ (800ab5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d01d      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aaf0:	d018      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a1c      	ldr	r2, [pc, #112]	@ (800ab68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d013      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a1a      	ldr	r2, [pc, #104]	@ (800ab6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d00e      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a15      	ldr	r2, [pc, #84]	@ (800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d009      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a16      	ldr	r2, [pc, #88]	@ (800ab70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d004      	beq.n	800ab24 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a11      	ldr	r2, [pc, #68]	@ (800ab64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d10c      	bne.n	800ab3e <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ab2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	68ba      	ldr	r2, [r7, #8]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2201      	movs	r2, #1
 800ab42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	40012c00 	.word	0x40012c00
 800ab60:	40013400 	.word	0x40013400
 800ab64:	40015000 	.word	0x40015000
 800ab68:	40000400 	.word	0x40000400
 800ab6c:	40000800 	.word	0x40000800
 800ab70:	40014000 	.word	0x40014000

0800ab74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ab74:	b480      	push	{r7}
 800ab76:	b085      	sub	sp, #20
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
 800ab7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d101      	bne.n	800ab90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ab8c:	2302      	movs	r3, #2
 800ab8e:	e096      	b.n	800acbe <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2201      	movs	r2, #1
 800ab94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	4313      	orrs	r3, r2
 800abce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	691b      	ldr	r3, [r3, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	4313      	orrs	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800abf6:	4313      	orrs	r3, r2
 800abf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800ac00:	683b      	ldr	r3, [r7, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	041b      	lsls	r3, r3, #16
 800ac06:	4313      	orrs	r3, r2
 800ac08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	4a2f      	ldr	r2, [pc, #188]	@ (800accc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac10:	4293      	cmp	r3, r2
 800ac12:	d009      	beq.n	800ac28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	4a2d      	ldr	r2, [pc, #180]	@ (800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d004      	beq.n	800ac28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4a2c      	ldr	r2, [pc, #176]	@ (800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d106      	bne.n	800ac36 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	69db      	ldr	r3, [r3, #28]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	4a24      	ldr	r2, [pc, #144]	@ (800accc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac3c:	4293      	cmp	r3, r2
 800ac3e:	d009      	beq.n	800ac54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	4a22      	ldr	r2, [pc, #136]	@ (800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d004      	beq.n	800ac54 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a21      	ldr	r2, [pc, #132]	@ (800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d12b      	bne.n	800acac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac5e:	051b      	lsls	r3, r3, #20
 800ac60:	4313      	orrs	r3, r2
 800ac62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7c:	4313      	orrs	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a11      	ldr	r2, [pc, #68]	@ (800accc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d009      	beq.n	800ac9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a10      	ldr	r2, [pc, #64]	@ (800acd0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d004      	beq.n	800ac9e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a0e      	ldr	r2, [pc, #56]	@ (800acd4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d106      	bne.n	800acac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aca8:	4313      	orrs	r3, r2
 800acaa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2200      	movs	r2, #0
 800acb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800acbc:	2300      	movs	r3, #0
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3714      	adds	r7, #20
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr
 800acca:	bf00      	nop
 800accc:	40012c00 	.word	0x40012c00
 800acd0:	40013400 	.word	0x40013400
 800acd4:	40015000 	.word	0x40015000

0800acd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800acd8:	b480      	push	{r7}
 800acda:	b083      	sub	sp, #12
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ace0:	bf00      	nop
 800ace2:	370c      	adds	r7, #12
 800ace4:	46bd      	mov	sp, r7
 800ace6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acea:	4770      	bx	lr

0800acec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800acf4:	bf00      	nop
 800acf6:	370c      	adds	r7, #12
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b083      	sub	sp, #12
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ad08:	bf00      	nop
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr

0800ad14 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ad14:	b480      	push	{r7}
 800ad16:	b083      	sub	sp, #12
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ad30:	bf00      	nop
 800ad32:	370c      	adds	r7, #12
 800ad34:	46bd      	mov	sp, r7
 800ad36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad3a:	4770      	bx	lr

0800ad3c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ad44:	bf00      	nop
 800ad46:	370c      	adds	r7, #12
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4e:	4770      	bx	lr

0800ad50 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ad50:	b480      	push	{r7}
 800ad52:	b083      	sub	sp, #12
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ad58:	bf00      	nop
 800ad5a:	370c      	adds	r7, #12
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr

0800ad64 <memset>:
 800ad64:	4402      	add	r2, r0
 800ad66:	4603      	mov	r3, r0
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d100      	bne.n	800ad6e <memset+0xa>
 800ad6c:	4770      	bx	lr
 800ad6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad72:	e7f9      	b.n	800ad68 <memset+0x4>

0800ad74 <__errno>:
 800ad74:	4b01      	ldr	r3, [pc, #4]	@ (800ad7c <__errno+0x8>)
 800ad76:	6818      	ldr	r0, [r3, #0]
 800ad78:	4770      	bx	lr
 800ad7a:	bf00      	nop
 800ad7c:	200004b4 	.word	0x200004b4

0800ad80 <__libc_init_array>:
 800ad80:	b570      	push	{r4, r5, r6, lr}
 800ad82:	4d0d      	ldr	r5, [pc, #52]	@ (800adb8 <__libc_init_array+0x38>)
 800ad84:	4c0d      	ldr	r4, [pc, #52]	@ (800adbc <__libc_init_array+0x3c>)
 800ad86:	1b64      	subs	r4, r4, r5
 800ad88:	10a4      	asrs	r4, r4, #2
 800ad8a:	2600      	movs	r6, #0
 800ad8c:	42a6      	cmp	r6, r4
 800ad8e:	d109      	bne.n	800ada4 <__libc_init_array+0x24>
 800ad90:	4d0b      	ldr	r5, [pc, #44]	@ (800adc0 <__libc_init_array+0x40>)
 800ad92:	4c0c      	ldr	r4, [pc, #48]	@ (800adc4 <__libc_init_array+0x44>)
 800ad94:	f001 f9f4 	bl	800c180 <_init>
 800ad98:	1b64      	subs	r4, r4, r5
 800ad9a:	10a4      	asrs	r4, r4, #2
 800ad9c:	2600      	movs	r6, #0
 800ad9e:	42a6      	cmp	r6, r4
 800ada0:	d105      	bne.n	800adae <__libc_init_array+0x2e>
 800ada2:	bd70      	pop	{r4, r5, r6, pc}
 800ada4:	f855 3b04 	ldr.w	r3, [r5], #4
 800ada8:	4798      	blx	r3
 800adaa:	3601      	adds	r6, #1
 800adac:	e7ee      	b.n	800ad8c <__libc_init_array+0xc>
 800adae:	f855 3b04 	ldr.w	r3, [r5], #4
 800adb2:	4798      	blx	r3
 800adb4:	3601      	adds	r6, #1
 800adb6:	e7f2      	b.n	800ad9e <__libc_init_array+0x1e>
 800adb8:	0800c520 	.word	0x0800c520
 800adbc:	0800c520 	.word	0x0800c520
 800adc0:	0800c520 	.word	0x0800c520
 800adc4:	0800c524 	.word	0x0800c524

0800adc8 <memcpy>:
 800adc8:	440a      	add	r2, r1
 800adca:	4291      	cmp	r1, r2
 800adcc:	f100 33ff 	add.w	r3, r0, #4294967295
 800add0:	d100      	bne.n	800add4 <memcpy+0xc>
 800add2:	4770      	bx	lr
 800add4:	b510      	push	{r4, lr}
 800add6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adde:	4291      	cmp	r1, r2
 800ade0:	d1f9      	bne.n	800add6 <memcpy+0xe>
 800ade2:	bd10      	pop	{r4, pc}

0800ade4 <fmod>:
 800ade4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ade6:	ed2d 8b02 	vpush	{d8}
 800adea:	ec57 6b10 	vmov	r6, r7, d0
 800adee:	ec55 4b11 	vmov	r4, r5, d1
 800adf2:	f000 f8e1 	bl	800afb8 <__ieee754_fmod>
 800adf6:	4622      	mov	r2, r4
 800adf8:	462b      	mov	r3, r5
 800adfa:	4630      	mov	r0, r6
 800adfc:	4639      	mov	r1, r7
 800adfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ae02:	eef0 8a60 	vmov.f32	s17, s1
 800ae06:	f7f5 fe5d 	bl	8000ac4 <__aeabi_dcmpun>
 800ae0a:	b990      	cbnz	r0, 800ae32 <fmod+0x4e>
 800ae0c:	2200      	movs	r2, #0
 800ae0e:	2300      	movs	r3, #0
 800ae10:	4620      	mov	r0, r4
 800ae12:	4629      	mov	r1, r5
 800ae14:	f7f5 fe24 	bl	8000a60 <__aeabi_dcmpeq>
 800ae18:	b158      	cbz	r0, 800ae32 <fmod+0x4e>
 800ae1a:	f7ff ffab 	bl	800ad74 <__errno>
 800ae1e:	2321      	movs	r3, #33	@ 0x21
 800ae20:	6003      	str	r3, [r0, #0]
 800ae22:	2200      	movs	r2, #0
 800ae24:	2300      	movs	r3, #0
 800ae26:	4610      	mov	r0, r2
 800ae28:	4619      	mov	r1, r3
 800ae2a:	f7f5 fcdb 	bl	80007e4 <__aeabi_ddiv>
 800ae2e:	ec41 0b18 	vmov	d8, r0, r1
 800ae32:	eeb0 0a48 	vmov.f32	s0, s16
 800ae36:	eef0 0a68 	vmov.f32	s1, s17
 800ae3a:	ecbd 8b02 	vpop	{d8}
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ae40 <pow>:
 800ae40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae42:	ed2d 8b02 	vpush	{d8}
 800ae46:	eeb0 8a40 	vmov.f32	s16, s0
 800ae4a:	eef0 8a60 	vmov.f32	s17, s1
 800ae4e:	ec55 4b11 	vmov	r4, r5, d1
 800ae52:	f000 f9bd 	bl	800b1d0 <__ieee754_pow>
 800ae56:	4622      	mov	r2, r4
 800ae58:	462b      	mov	r3, r5
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	ec57 6b10 	vmov	r6, r7, d0
 800ae62:	f7f5 fe2f 	bl	8000ac4 <__aeabi_dcmpun>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	d13b      	bne.n	800aee2 <pow+0xa2>
 800ae6a:	ec51 0b18 	vmov	r0, r1, d8
 800ae6e:	2200      	movs	r2, #0
 800ae70:	2300      	movs	r3, #0
 800ae72:	f7f5 fdf5 	bl	8000a60 <__aeabi_dcmpeq>
 800ae76:	b1b8      	cbz	r0, 800aea8 <pow+0x68>
 800ae78:	2200      	movs	r2, #0
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	4629      	mov	r1, r5
 800ae80:	f7f5 fdee 	bl	8000a60 <__aeabi_dcmpeq>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d146      	bne.n	800af16 <pow+0xd6>
 800ae88:	ec45 4b10 	vmov	d0, r4, r5
 800ae8c:	f000 f87e 	bl	800af8c <finite>
 800ae90:	b338      	cbz	r0, 800aee2 <pow+0xa2>
 800ae92:	2200      	movs	r2, #0
 800ae94:	2300      	movs	r3, #0
 800ae96:	4620      	mov	r0, r4
 800ae98:	4629      	mov	r1, r5
 800ae9a:	f7f5 fdeb 	bl	8000a74 <__aeabi_dcmplt>
 800ae9e:	b300      	cbz	r0, 800aee2 <pow+0xa2>
 800aea0:	f7ff ff68 	bl	800ad74 <__errno>
 800aea4:	2322      	movs	r3, #34	@ 0x22
 800aea6:	e01b      	b.n	800aee0 <pow+0xa0>
 800aea8:	ec47 6b10 	vmov	d0, r6, r7
 800aeac:	f000 f86e 	bl	800af8c <finite>
 800aeb0:	b9e0      	cbnz	r0, 800aeec <pow+0xac>
 800aeb2:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb6:	eef0 0a68 	vmov.f32	s1, s17
 800aeba:	f000 f867 	bl	800af8c <finite>
 800aebe:	b1a8      	cbz	r0, 800aeec <pow+0xac>
 800aec0:	ec45 4b10 	vmov	d0, r4, r5
 800aec4:	f000 f862 	bl	800af8c <finite>
 800aec8:	b180      	cbz	r0, 800aeec <pow+0xac>
 800aeca:	4632      	mov	r2, r6
 800aecc:	463b      	mov	r3, r7
 800aece:	4630      	mov	r0, r6
 800aed0:	4639      	mov	r1, r7
 800aed2:	f7f5 fdf7 	bl	8000ac4 <__aeabi_dcmpun>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d0e2      	beq.n	800aea0 <pow+0x60>
 800aeda:	f7ff ff4b 	bl	800ad74 <__errno>
 800aede:	2321      	movs	r3, #33	@ 0x21
 800aee0:	6003      	str	r3, [r0, #0]
 800aee2:	ecbd 8b02 	vpop	{d8}
 800aee6:	ec47 6b10 	vmov	d0, r6, r7
 800aeea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeec:	2200      	movs	r2, #0
 800aeee:	2300      	movs	r3, #0
 800aef0:	4630      	mov	r0, r6
 800aef2:	4639      	mov	r1, r7
 800aef4:	f7f5 fdb4 	bl	8000a60 <__aeabi_dcmpeq>
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d0f2      	beq.n	800aee2 <pow+0xa2>
 800aefc:	eeb0 0a48 	vmov.f32	s0, s16
 800af00:	eef0 0a68 	vmov.f32	s1, s17
 800af04:	f000 f842 	bl	800af8c <finite>
 800af08:	2800      	cmp	r0, #0
 800af0a:	d0ea      	beq.n	800aee2 <pow+0xa2>
 800af0c:	ec45 4b10 	vmov	d0, r4, r5
 800af10:	f000 f83c 	bl	800af8c <finite>
 800af14:	e7c3      	b.n	800ae9e <pow+0x5e>
 800af16:	4f01      	ldr	r7, [pc, #4]	@ (800af1c <pow+0xdc>)
 800af18:	2600      	movs	r6, #0
 800af1a:	e7e2      	b.n	800aee2 <pow+0xa2>
 800af1c:	3ff00000 	.word	0x3ff00000

0800af20 <expf>:
 800af20:	b508      	push	{r3, lr}
 800af22:	ed2d 8b02 	vpush	{d8}
 800af26:	eef0 8a40 	vmov.f32	s17, s0
 800af2a:	f000 fe9d 	bl	800bc68 <__ieee754_expf>
 800af2e:	eeb0 8a40 	vmov.f32	s16, s0
 800af32:	eeb0 0a68 	vmov.f32	s0, s17
 800af36:	f000 f834 	bl	800afa2 <finitef>
 800af3a:	b160      	cbz	r0, 800af56 <expf+0x36>
 800af3c:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 800af7c <expf+0x5c>
 800af40:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af48:	dd0a      	ble.n	800af60 <expf+0x40>
 800af4a:	f7ff ff13 	bl	800ad74 <__errno>
 800af4e:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 800af80 <expf+0x60>
 800af52:	2322      	movs	r3, #34	@ 0x22
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	eeb0 0a48 	vmov.f32	s0, s16
 800af5a:	ecbd 8b02 	vpop	{d8}
 800af5e:	bd08      	pop	{r3, pc}
 800af60:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800af84 <expf+0x64>
 800af64:	eef4 8ae7 	vcmpe.f32	s17, s15
 800af68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af6c:	d5f3      	bpl.n	800af56 <expf+0x36>
 800af6e:	f7ff ff01 	bl	800ad74 <__errno>
 800af72:	2322      	movs	r3, #34	@ 0x22
 800af74:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 800af88 <expf+0x68>
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	e7ec      	b.n	800af56 <expf+0x36>
 800af7c:	42b17217 	.word	0x42b17217
 800af80:	7f800000 	.word	0x7f800000
 800af84:	c2cff1b5 	.word	0xc2cff1b5
 800af88:	00000000 	.word	0x00000000

0800af8c <finite>:
 800af8c:	b082      	sub	sp, #8
 800af8e:	ed8d 0b00 	vstr	d0, [sp]
 800af92:	9801      	ldr	r0, [sp, #4]
 800af94:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800af98:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800af9c:	0fc0      	lsrs	r0, r0, #31
 800af9e:	b002      	add	sp, #8
 800afa0:	4770      	bx	lr

0800afa2 <finitef>:
 800afa2:	ee10 3a10 	vmov	r3, s0
 800afa6:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800afaa:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800afae:	bfac      	ite	ge
 800afb0:	2000      	movge	r0, #0
 800afb2:	2001      	movlt	r0, #1
 800afb4:	4770      	bx	lr
	...

0800afb8 <__ieee754_fmod>:
 800afb8:	ec53 2b11 	vmov	r2, r3, d1
 800afbc:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 800afc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afc4:	ea52 040c 	orrs.w	r4, r2, ip
 800afc8:	ec51 0b10 	vmov	r0, r1, d0
 800afcc:	461e      	mov	r6, r3
 800afce:	4617      	mov	r7, r2
 800afd0:	4696      	mov	lr, r2
 800afd2:	d00c      	beq.n	800afee <__ieee754_fmod+0x36>
 800afd4:	4c77      	ldr	r4, [pc, #476]	@ (800b1b4 <__ieee754_fmod+0x1fc>)
 800afd6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800afda:	45a0      	cmp	r8, r4
 800afdc:	4689      	mov	r9, r1
 800afde:	d806      	bhi.n	800afee <__ieee754_fmod+0x36>
 800afe0:	4254      	negs	r4, r2
 800afe2:	4d75      	ldr	r5, [pc, #468]	@ (800b1b8 <__ieee754_fmod+0x200>)
 800afe4:	4314      	orrs	r4, r2
 800afe6:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800afea:	42ac      	cmp	r4, r5
 800afec:	d909      	bls.n	800b002 <__ieee754_fmod+0x4a>
 800afee:	f7f5 facf 	bl	8000590 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	f7f5 fbf5 	bl	80007e4 <__aeabi_ddiv>
 800affa:	ec41 0b10 	vmov	d0, r0, r1
 800affe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b002:	45e0      	cmp	r8, ip
 800b004:	4682      	mov	sl, r0
 800b006:	4604      	mov	r4, r0
 800b008:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800b00c:	dc09      	bgt.n	800b022 <__ieee754_fmod+0x6a>
 800b00e:	dbf4      	blt.n	800affa <__ieee754_fmod+0x42>
 800b010:	4282      	cmp	r2, r0
 800b012:	d8f2      	bhi.n	800affa <__ieee754_fmod+0x42>
 800b014:	d105      	bne.n	800b022 <__ieee754_fmod+0x6a>
 800b016:	4b69      	ldr	r3, [pc, #420]	@ (800b1bc <__ieee754_fmod+0x204>)
 800b018:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800b01c:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b020:	e7eb      	b.n	800affa <__ieee754_fmod+0x42>
 800b022:	4a65      	ldr	r2, [pc, #404]	@ (800b1b8 <__ieee754_fmod+0x200>)
 800b024:	ea19 0f02 	tst.w	r9, r2
 800b028:	d148      	bne.n	800b0bc <__ieee754_fmod+0x104>
 800b02a:	f1b8 0f00 	cmp.w	r8, #0
 800b02e:	d13d      	bne.n	800b0ac <__ieee754_fmod+0xf4>
 800b030:	4963      	ldr	r1, [pc, #396]	@ (800b1c0 <__ieee754_fmod+0x208>)
 800b032:	4653      	mov	r3, sl
 800b034:	2b00      	cmp	r3, #0
 800b036:	dc36      	bgt.n	800b0a6 <__ieee754_fmod+0xee>
 800b038:	4216      	tst	r6, r2
 800b03a:	d14f      	bne.n	800b0dc <__ieee754_fmod+0x124>
 800b03c:	f1bc 0f00 	cmp.w	ip, #0
 800b040:	d144      	bne.n	800b0cc <__ieee754_fmod+0x114>
 800b042:	4a5f      	ldr	r2, [pc, #380]	@ (800b1c0 <__ieee754_fmod+0x208>)
 800b044:	463b      	mov	r3, r7
 800b046:	2b00      	cmp	r3, #0
 800b048:	dc3d      	bgt.n	800b0c6 <__ieee754_fmod+0x10e>
 800b04a:	485e      	ldr	r0, [pc, #376]	@ (800b1c4 <__ieee754_fmod+0x20c>)
 800b04c:	4281      	cmp	r1, r0
 800b04e:	db4a      	blt.n	800b0e6 <__ieee754_fmod+0x12e>
 800b050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b054:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b058:	485a      	ldr	r0, [pc, #360]	@ (800b1c4 <__ieee754_fmod+0x20c>)
 800b05a:	4282      	cmp	r2, r0
 800b05c:	db57      	blt.n	800b10e <__ieee754_fmod+0x156>
 800b05e:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800b062:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 800b066:	1a89      	subs	r1, r1, r2
 800b068:	1b98      	subs	r0, r3, r6
 800b06a:	eba4 070e 	sub.w	r7, r4, lr
 800b06e:	2900      	cmp	r1, #0
 800b070:	d162      	bne.n	800b138 <__ieee754_fmod+0x180>
 800b072:	4574      	cmp	r4, lr
 800b074:	bf38      	it	cc
 800b076:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b07a:	2800      	cmp	r0, #0
 800b07c:	bfa4      	itt	ge
 800b07e:	463c      	movge	r4, r7
 800b080:	4603      	movge	r3, r0
 800b082:	ea53 0104 	orrs.w	r1, r3, r4
 800b086:	d0c6      	beq.n	800b016 <__ieee754_fmod+0x5e>
 800b088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b08c:	db69      	blt.n	800b162 <__ieee754_fmod+0x1aa>
 800b08e:	494d      	ldr	r1, [pc, #308]	@ (800b1c4 <__ieee754_fmod+0x20c>)
 800b090:	428a      	cmp	r2, r1
 800b092:	db6c      	blt.n	800b16e <__ieee754_fmod+0x1b6>
 800b094:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b098:	432b      	orrs	r3, r5
 800b09a:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 800b09e:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e7a9      	b.n	800affa <__ieee754_fmod+0x42>
 800b0a6:	3901      	subs	r1, #1
 800b0a8:	005b      	lsls	r3, r3, #1
 800b0aa:	e7c3      	b.n	800b034 <__ieee754_fmod+0x7c>
 800b0ac:	4945      	ldr	r1, [pc, #276]	@ (800b1c4 <__ieee754_fmod+0x20c>)
 800b0ae:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	ddc0      	ble.n	800b038 <__ieee754_fmod+0x80>
 800b0b6:	3901      	subs	r1, #1
 800b0b8:	005b      	lsls	r3, r3, #1
 800b0ba:	e7fa      	b.n	800b0b2 <__ieee754_fmod+0xfa>
 800b0bc:	ea4f 5128 	mov.w	r1, r8, asr #20
 800b0c0:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b0c4:	e7b8      	b.n	800b038 <__ieee754_fmod+0x80>
 800b0c6:	3a01      	subs	r2, #1
 800b0c8:	005b      	lsls	r3, r3, #1
 800b0ca:	e7bc      	b.n	800b046 <__ieee754_fmod+0x8e>
 800b0cc:	4a3d      	ldr	r2, [pc, #244]	@ (800b1c4 <__ieee754_fmod+0x20c>)
 800b0ce:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	ddb9      	ble.n	800b04a <__ieee754_fmod+0x92>
 800b0d6:	3a01      	subs	r2, #1
 800b0d8:	005b      	lsls	r3, r3, #1
 800b0da:	e7fa      	b.n	800b0d2 <__ieee754_fmod+0x11a>
 800b0dc:	ea4f 522c 	mov.w	r2, ip, asr #20
 800b0e0:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b0e4:	e7b1      	b.n	800b04a <__ieee754_fmod+0x92>
 800b0e6:	1a40      	subs	r0, r0, r1
 800b0e8:	281f      	cmp	r0, #31
 800b0ea:	dc0a      	bgt.n	800b102 <__ieee754_fmod+0x14a>
 800b0ec:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 800b0f0:	fa08 f800 	lsl.w	r8, r8, r0
 800b0f4:	fa2a f303 	lsr.w	r3, sl, r3
 800b0f8:	ea43 0308 	orr.w	r3, r3, r8
 800b0fc:	fa0a f400 	lsl.w	r4, sl, r0
 800b100:	e7aa      	b.n	800b058 <__ieee754_fmod+0xa0>
 800b102:	4b31      	ldr	r3, [pc, #196]	@ (800b1c8 <__ieee754_fmod+0x210>)
 800b104:	1a5b      	subs	r3, r3, r1
 800b106:	fa0a f303 	lsl.w	r3, sl, r3
 800b10a:	2400      	movs	r4, #0
 800b10c:	e7a4      	b.n	800b058 <__ieee754_fmod+0xa0>
 800b10e:	1a80      	subs	r0, r0, r2
 800b110:	281f      	cmp	r0, #31
 800b112:	dc0a      	bgt.n	800b12a <__ieee754_fmod+0x172>
 800b114:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 800b118:	fa0c fc00 	lsl.w	ip, ip, r0
 800b11c:	fa27 f606 	lsr.w	r6, r7, r6
 800b120:	ea46 060c 	orr.w	r6, r6, ip
 800b124:	fa07 fe00 	lsl.w	lr, r7, r0
 800b128:	e79d      	b.n	800b066 <__ieee754_fmod+0xae>
 800b12a:	4e27      	ldr	r6, [pc, #156]	@ (800b1c8 <__ieee754_fmod+0x210>)
 800b12c:	1ab6      	subs	r6, r6, r2
 800b12e:	fa07 f606 	lsl.w	r6, r7, r6
 800b132:	f04f 0e00 	mov.w	lr, #0
 800b136:	e796      	b.n	800b066 <__ieee754_fmod+0xae>
 800b138:	4574      	cmp	r4, lr
 800b13a:	bf38      	it	cc
 800b13c:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800b140:	2800      	cmp	r0, #0
 800b142:	da05      	bge.n	800b150 <__ieee754_fmod+0x198>
 800b144:	0fe0      	lsrs	r0, r4, #31
 800b146:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800b14a:	0064      	lsls	r4, r4, #1
 800b14c:	3901      	subs	r1, #1
 800b14e:	e78b      	b.n	800b068 <__ieee754_fmod+0xb0>
 800b150:	ea50 0307 	orrs.w	r3, r0, r7
 800b154:	f43f af5f 	beq.w	800b016 <__ieee754_fmod+0x5e>
 800b158:	0ffb      	lsrs	r3, r7, #31
 800b15a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800b15e:	007c      	lsls	r4, r7, #1
 800b160:	e7f4      	b.n	800b14c <__ieee754_fmod+0x194>
 800b162:	0fe1      	lsrs	r1, r4, #31
 800b164:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800b168:	0064      	lsls	r4, r4, #1
 800b16a:	3a01      	subs	r2, #1
 800b16c:	e78c      	b.n	800b088 <__ieee754_fmod+0xd0>
 800b16e:	1a89      	subs	r1, r1, r2
 800b170:	2914      	cmp	r1, #20
 800b172:	dc0a      	bgt.n	800b18a <__ieee754_fmod+0x1d2>
 800b174:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b178:	fa03 f202 	lsl.w	r2, r3, r2
 800b17c:	40cc      	lsrs	r4, r1
 800b17e:	4322      	orrs	r2, r4
 800b180:	410b      	asrs	r3, r1
 800b182:	ea43 0105 	orr.w	r1, r3, r5
 800b186:	4610      	mov	r0, r2
 800b188:	e737      	b.n	800affa <__ieee754_fmod+0x42>
 800b18a:	291f      	cmp	r1, #31
 800b18c:	dc07      	bgt.n	800b19e <__ieee754_fmod+0x1e6>
 800b18e:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 800b192:	40cc      	lsrs	r4, r1
 800b194:	fa03 f202 	lsl.w	r2, r3, r2
 800b198:	4322      	orrs	r2, r4
 800b19a:	462b      	mov	r3, r5
 800b19c:	e7f1      	b.n	800b182 <__ieee754_fmod+0x1ca>
 800b19e:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 800b1a2:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800b1a6:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 800b1aa:	32e2      	adds	r2, #226	@ 0xe2
 800b1ac:	fa43 f202 	asr.w	r2, r3, r2
 800b1b0:	e7f3      	b.n	800b19a <__ieee754_fmod+0x1e2>
 800b1b2:	bf00      	nop
 800b1b4:	7fefffff 	.word	0x7fefffff
 800b1b8:	7ff00000 	.word	0x7ff00000
 800b1bc:	0800c4c8 	.word	0x0800c4c8
 800b1c0:	fffffbed 	.word	0xfffffbed
 800b1c4:	fffffc02 	.word	0xfffffc02
 800b1c8:	fffffbe2 	.word	0xfffffbe2
 800b1cc:	00000000 	.word	0x00000000

0800b1d0 <__ieee754_pow>:
 800b1d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d4:	b091      	sub	sp, #68	@ 0x44
 800b1d6:	ed8d 1b00 	vstr	d1, [sp]
 800b1da:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b1de:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b1e2:	ea5a 0001 	orrs.w	r0, sl, r1
 800b1e6:	ec57 6b10 	vmov	r6, r7, d0
 800b1ea:	d113      	bne.n	800b214 <__ieee754_pow+0x44>
 800b1ec:	19b3      	adds	r3, r6, r6
 800b1ee:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b1f2:	4152      	adcs	r2, r2
 800b1f4:	4298      	cmp	r0, r3
 800b1f6:	4b98      	ldr	r3, [pc, #608]	@ (800b458 <__ieee754_pow+0x288>)
 800b1f8:	4193      	sbcs	r3, r2
 800b1fa:	f080 84ea 	bcs.w	800bbd2 <__ieee754_pow+0xa02>
 800b1fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	f7f5 f80d 	bl	8000224 <__adddf3>
 800b20a:	ec41 0b10 	vmov	d0, r0, r1
 800b20e:	b011      	add	sp, #68	@ 0x44
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	4a91      	ldr	r2, [pc, #580]	@ (800b45c <__ieee754_pow+0x28c>)
 800b216:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b21a:	4590      	cmp	r8, r2
 800b21c:	463d      	mov	r5, r7
 800b21e:	4633      	mov	r3, r6
 800b220:	d806      	bhi.n	800b230 <__ieee754_pow+0x60>
 800b222:	d101      	bne.n	800b228 <__ieee754_pow+0x58>
 800b224:	2e00      	cmp	r6, #0
 800b226:	d1ea      	bne.n	800b1fe <__ieee754_pow+0x2e>
 800b228:	4592      	cmp	sl, r2
 800b22a:	d801      	bhi.n	800b230 <__ieee754_pow+0x60>
 800b22c:	d10e      	bne.n	800b24c <__ieee754_pow+0x7c>
 800b22e:	b169      	cbz	r1, 800b24c <__ieee754_pow+0x7c>
 800b230:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b234:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b238:	431d      	orrs	r5, r3
 800b23a:	d1e0      	bne.n	800b1fe <__ieee754_pow+0x2e>
 800b23c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b240:	18db      	adds	r3, r3, r3
 800b242:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b246:	4152      	adcs	r2, r2
 800b248:	429d      	cmp	r5, r3
 800b24a:	e7d4      	b.n	800b1f6 <__ieee754_pow+0x26>
 800b24c:	2d00      	cmp	r5, #0
 800b24e:	46c3      	mov	fp, r8
 800b250:	da3a      	bge.n	800b2c8 <__ieee754_pow+0xf8>
 800b252:	4a83      	ldr	r2, [pc, #524]	@ (800b460 <__ieee754_pow+0x290>)
 800b254:	4592      	cmp	sl, r2
 800b256:	d84d      	bhi.n	800b2f4 <__ieee754_pow+0x124>
 800b258:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b25c:	4592      	cmp	sl, r2
 800b25e:	f240 84c7 	bls.w	800bbf0 <__ieee754_pow+0xa20>
 800b262:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b266:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b26a:	2a14      	cmp	r2, #20
 800b26c:	dd0f      	ble.n	800b28e <__ieee754_pow+0xbe>
 800b26e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b272:	fa21 f402 	lsr.w	r4, r1, r2
 800b276:	fa04 f202 	lsl.w	r2, r4, r2
 800b27a:	428a      	cmp	r2, r1
 800b27c:	f040 84b8 	bne.w	800bbf0 <__ieee754_pow+0xa20>
 800b280:	f004 0401 	and.w	r4, r4, #1
 800b284:	f1c4 0402 	rsb	r4, r4, #2
 800b288:	2900      	cmp	r1, #0
 800b28a:	d158      	bne.n	800b33e <__ieee754_pow+0x16e>
 800b28c:	e00e      	b.n	800b2ac <__ieee754_pow+0xdc>
 800b28e:	2900      	cmp	r1, #0
 800b290:	d154      	bne.n	800b33c <__ieee754_pow+0x16c>
 800b292:	f1c2 0214 	rsb	r2, r2, #20
 800b296:	fa4a f402 	asr.w	r4, sl, r2
 800b29a:	fa04 f202 	lsl.w	r2, r4, r2
 800b29e:	4552      	cmp	r2, sl
 800b2a0:	f040 84a3 	bne.w	800bbea <__ieee754_pow+0xa1a>
 800b2a4:	f004 0401 	and.w	r4, r4, #1
 800b2a8:	f1c4 0402 	rsb	r4, r4, #2
 800b2ac:	4a6d      	ldr	r2, [pc, #436]	@ (800b464 <__ieee754_pow+0x294>)
 800b2ae:	4592      	cmp	sl, r2
 800b2b0:	d12e      	bne.n	800b310 <__ieee754_pow+0x140>
 800b2b2:	f1b9 0f00 	cmp.w	r9, #0
 800b2b6:	f280 8494 	bge.w	800bbe2 <__ieee754_pow+0xa12>
 800b2ba:	496a      	ldr	r1, [pc, #424]	@ (800b464 <__ieee754_pow+0x294>)
 800b2bc:	4632      	mov	r2, r6
 800b2be:	463b      	mov	r3, r7
 800b2c0:	2000      	movs	r0, #0
 800b2c2:	f7f5 fa8f 	bl	80007e4 <__aeabi_ddiv>
 800b2c6:	e7a0      	b.n	800b20a <__ieee754_pow+0x3a>
 800b2c8:	2400      	movs	r4, #0
 800b2ca:	bbc1      	cbnz	r1, 800b33e <__ieee754_pow+0x16e>
 800b2cc:	4a63      	ldr	r2, [pc, #396]	@ (800b45c <__ieee754_pow+0x28c>)
 800b2ce:	4592      	cmp	sl, r2
 800b2d0:	d1ec      	bne.n	800b2ac <__ieee754_pow+0xdc>
 800b2d2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b2d6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b2da:	431a      	orrs	r2, r3
 800b2dc:	f000 8479 	beq.w	800bbd2 <__ieee754_pow+0xa02>
 800b2e0:	4b61      	ldr	r3, [pc, #388]	@ (800b468 <__ieee754_pow+0x298>)
 800b2e2:	4598      	cmp	r8, r3
 800b2e4:	d908      	bls.n	800b2f8 <__ieee754_pow+0x128>
 800b2e6:	f1b9 0f00 	cmp.w	r9, #0
 800b2ea:	f2c0 8476 	blt.w	800bbda <__ieee754_pow+0xa0a>
 800b2ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2f2:	e78a      	b.n	800b20a <__ieee754_pow+0x3a>
 800b2f4:	2402      	movs	r4, #2
 800b2f6:	e7e8      	b.n	800b2ca <__ieee754_pow+0xfa>
 800b2f8:	f1b9 0f00 	cmp.w	r9, #0
 800b2fc:	f04f 0000 	mov.w	r0, #0
 800b300:	f04f 0100 	mov.w	r1, #0
 800b304:	da81      	bge.n	800b20a <__ieee754_pow+0x3a>
 800b306:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b30a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b30e:	e77c      	b.n	800b20a <__ieee754_pow+0x3a>
 800b310:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b314:	d106      	bne.n	800b324 <__ieee754_pow+0x154>
 800b316:	4632      	mov	r2, r6
 800b318:	463b      	mov	r3, r7
 800b31a:	4630      	mov	r0, r6
 800b31c:	4639      	mov	r1, r7
 800b31e:	f7f5 f937 	bl	8000590 <__aeabi_dmul>
 800b322:	e772      	b.n	800b20a <__ieee754_pow+0x3a>
 800b324:	4a51      	ldr	r2, [pc, #324]	@ (800b46c <__ieee754_pow+0x29c>)
 800b326:	4591      	cmp	r9, r2
 800b328:	d109      	bne.n	800b33e <__ieee754_pow+0x16e>
 800b32a:	2d00      	cmp	r5, #0
 800b32c:	db07      	blt.n	800b33e <__ieee754_pow+0x16e>
 800b32e:	ec47 6b10 	vmov	d0, r6, r7
 800b332:	b011      	add	sp, #68	@ 0x44
 800b334:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b338:	f000 be48 	b.w	800bfcc <__ieee754_sqrt>
 800b33c:	2400      	movs	r4, #0
 800b33e:	ec47 6b10 	vmov	d0, r6, r7
 800b342:	9302      	str	r3, [sp, #8]
 800b344:	f000 fc88 	bl	800bc58 <fabs>
 800b348:	9b02      	ldr	r3, [sp, #8]
 800b34a:	ec51 0b10 	vmov	r0, r1, d0
 800b34e:	bb53      	cbnz	r3, 800b3a6 <__ieee754_pow+0x1d6>
 800b350:	4b44      	ldr	r3, [pc, #272]	@ (800b464 <__ieee754_pow+0x294>)
 800b352:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b356:	429a      	cmp	r2, r3
 800b358:	d002      	beq.n	800b360 <__ieee754_pow+0x190>
 800b35a:	f1b8 0f00 	cmp.w	r8, #0
 800b35e:	d122      	bne.n	800b3a6 <__ieee754_pow+0x1d6>
 800b360:	f1b9 0f00 	cmp.w	r9, #0
 800b364:	da05      	bge.n	800b372 <__ieee754_pow+0x1a2>
 800b366:	4602      	mov	r2, r0
 800b368:	460b      	mov	r3, r1
 800b36a:	2000      	movs	r0, #0
 800b36c:	493d      	ldr	r1, [pc, #244]	@ (800b464 <__ieee754_pow+0x294>)
 800b36e:	f7f5 fa39 	bl	80007e4 <__aeabi_ddiv>
 800b372:	2d00      	cmp	r5, #0
 800b374:	f6bf af49 	bge.w	800b20a <__ieee754_pow+0x3a>
 800b378:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b37c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b380:	ea58 0804 	orrs.w	r8, r8, r4
 800b384:	d108      	bne.n	800b398 <__ieee754_pow+0x1c8>
 800b386:	4602      	mov	r2, r0
 800b388:	460b      	mov	r3, r1
 800b38a:	4610      	mov	r0, r2
 800b38c:	4619      	mov	r1, r3
 800b38e:	f7f4 ff47 	bl	8000220 <__aeabi_dsub>
 800b392:	4602      	mov	r2, r0
 800b394:	460b      	mov	r3, r1
 800b396:	e794      	b.n	800b2c2 <__ieee754_pow+0xf2>
 800b398:	2c01      	cmp	r4, #1
 800b39a:	f47f af36 	bne.w	800b20a <__ieee754_pow+0x3a>
 800b39e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	e731      	b.n	800b20a <__ieee754_pow+0x3a>
 800b3a6:	0feb      	lsrs	r3, r5, #31
 800b3a8:	3b01      	subs	r3, #1
 800b3aa:	ea53 0204 	orrs.w	r2, r3, r4
 800b3ae:	d102      	bne.n	800b3b6 <__ieee754_pow+0x1e6>
 800b3b0:	4632      	mov	r2, r6
 800b3b2:	463b      	mov	r3, r7
 800b3b4:	e7e9      	b.n	800b38a <__ieee754_pow+0x1ba>
 800b3b6:	3c01      	subs	r4, #1
 800b3b8:	431c      	orrs	r4, r3
 800b3ba:	d016      	beq.n	800b3ea <__ieee754_pow+0x21a>
 800b3bc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b448 <__ieee754_pow+0x278>
 800b3c0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b3c4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b3c8:	f240 8112 	bls.w	800b5f0 <__ieee754_pow+0x420>
 800b3cc:	4b28      	ldr	r3, [pc, #160]	@ (800b470 <__ieee754_pow+0x2a0>)
 800b3ce:	459a      	cmp	sl, r3
 800b3d0:	4b25      	ldr	r3, [pc, #148]	@ (800b468 <__ieee754_pow+0x298>)
 800b3d2:	d916      	bls.n	800b402 <__ieee754_pow+0x232>
 800b3d4:	4598      	cmp	r8, r3
 800b3d6:	d80b      	bhi.n	800b3f0 <__ieee754_pow+0x220>
 800b3d8:	f1b9 0f00 	cmp.w	r9, #0
 800b3dc:	da0b      	bge.n	800b3f6 <__ieee754_pow+0x226>
 800b3de:	2000      	movs	r0, #0
 800b3e0:	b011      	add	sp, #68	@ 0x44
 800b3e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e6:	f000 bdc3 	b.w	800bf70 <__math_oflow>
 800b3ea:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b450 <__ieee754_pow+0x280>
 800b3ee:	e7e7      	b.n	800b3c0 <__ieee754_pow+0x1f0>
 800b3f0:	f1b9 0f00 	cmp.w	r9, #0
 800b3f4:	dcf3      	bgt.n	800b3de <__ieee754_pow+0x20e>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	b011      	add	sp, #68	@ 0x44
 800b3fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fe:	f000 bdaf 	b.w	800bf60 <__math_uflow>
 800b402:	4598      	cmp	r8, r3
 800b404:	d20c      	bcs.n	800b420 <__ieee754_pow+0x250>
 800b406:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b40a:	2200      	movs	r2, #0
 800b40c:	2300      	movs	r3, #0
 800b40e:	f7f5 fb31 	bl	8000a74 <__aeabi_dcmplt>
 800b412:	3800      	subs	r0, #0
 800b414:	bf18      	it	ne
 800b416:	2001      	movne	r0, #1
 800b418:	f1b9 0f00 	cmp.w	r9, #0
 800b41c:	daec      	bge.n	800b3f8 <__ieee754_pow+0x228>
 800b41e:	e7df      	b.n	800b3e0 <__ieee754_pow+0x210>
 800b420:	4b10      	ldr	r3, [pc, #64]	@ (800b464 <__ieee754_pow+0x294>)
 800b422:	4598      	cmp	r8, r3
 800b424:	f04f 0200 	mov.w	r2, #0
 800b428:	d924      	bls.n	800b474 <__ieee754_pow+0x2a4>
 800b42a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b42e:	2300      	movs	r3, #0
 800b430:	f7f5 fb20 	bl	8000a74 <__aeabi_dcmplt>
 800b434:	3800      	subs	r0, #0
 800b436:	bf18      	it	ne
 800b438:	2001      	movne	r0, #1
 800b43a:	f1b9 0f00 	cmp.w	r9, #0
 800b43e:	dccf      	bgt.n	800b3e0 <__ieee754_pow+0x210>
 800b440:	e7da      	b.n	800b3f8 <__ieee754_pow+0x228>
 800b442:	bf00      	nop
 800b444:	f3af 8000 	nop.w
 800b448:	00000000 	.word	0x00000000
 800b44c:	3ff00000 	.word	0x3ff00000
 800b450:	00000000 	.word	0x00000000
 800b454:	bff00000 	.word	0xbff00000
 800b458:	fff00000 	.word	0xfff00000
 800b45c:	7ff00000 	.word	0x7ff00000
 800b460:	433fffff 	.word	0x433fffff
 800b464:	3ff00000 	.word	0x3ff00000
 800b468:	3fefffff 	.word	0x3fefffff
 800b46c:	3fe00000 	.word	0x3fe00000
 800b470:	43f00000 	.word	0x43f00000
 800b474:	4b5a      	ldr	r3, [pc, #360]	@ (800b5e0 <__ieee754_pow+0x410>)
 800b476:	f7f4 fed3 	bl	8000220 <__aeabi_dsub>
 800b47a:	a351      	add	r3, pc, #324	@ (adr r3, 800b5c0 <__ieee754_pow+0x3f0>)
 800b47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b480:	4604      	mov	r4, r0
 800b482:	460d      	mov	r5, r1
 800b484:	f7f5 f884 	bl	8000590 <__aeabi_dmul>
 800b488:	a34f      	add	r3, pc, #316	@ (adr r3, 800b5c8 <__ieee754_pow+0x3f8>)
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	4606      	mov	r6, r0
 800b490:	460f      	mov	r7, r1
 800b492:	4620      	mov	r0, r4
 800b494:	4629      	mov	r1, r5
 800b496:	f7f5 f87b 	bl	8000590 <__aeabi_dmul>
 800b49a:	4b52      	ldr	r3, [pc, #328]	@ (800b5e4 <__ieee754_pow+0x414>)
 800b49c:	4682      	mov	sl, r0
 800b49e:	468b      	mov	fp, r1
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	4629      	mov	r1, r5
 800b4a6:	f7f5 f873 	bl	8000590 <__aeabi_dmul>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	460b      	mov	r3, r1
 800b4ae:	a148      	add	r1, pc, #288	@ (adr r1, 800b5d0 <__ieee754_pow+0x400>)
 800b4b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b4b4:	f7f4 feb4 	bl	8000220 <__aeabi_dsub>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f868 	bl	8000590 <__aeabi_dmul>
 800b4c0:	4602      	mov	r2, r0
 800b4c2:	460b      	mov	r3, r1
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	4948      	ldr	r1, [pc, #288]	@ (800b5e8 <__ieee754_pow+0x418>)
 800b4c8:	f7f4 feaa 	bl	8000220 <__aeabi_dsub>
 800b4cc:	4622      	mov	r2, r4
 800b4ce:	4680      	mov	r8, r0
 800b4d0:	4689      	mov	r9, r1
 800b4d2:	462b      	mov	r3, r5
 800b4d4:	4620      	mov	r0, r4
 800b4d6:	4629      	mov	r1, r5
 800b4d8:	f7f5 f85a 	bl	8000590 <__aeabi_dmul>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4640      	mov	r0, r8
 800b4e2:	4649      	mov	r1, r9
 800b4e4:	f7f5 f854 	bl	8000590 <__aeabi_dmul>
 800b4e8:	a33b      	add	r3, pc, #236	@ (adr r3, 800b5d8 <__ieee754_pow+0x408>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f5 f84f 	bl	8000590 <__aeabi_dmul>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	4650      	mov	r0, sl
 800b4f8:	4659      	mov	r1, fp
 800b4fa:	f7f4 fe91 	bl	8000220 <__aeabi_dsub>
 800b4fe:	4602      	mov	r2, r0
 800b500:	460b      	mov	r3, r1
 800b502:	4680      	mov	r8, r0
 800b504:	4689      	mov	r9, r1
 800b506:	4630      	mov	r0, r6
 800b508:	4639      	mov	r1, r7
 800b50a:	f7f4 fe8b 	bl	8000224 <__adddf3>
 800b50e:	2400      	movs	r4, #0
 800b510:	4632      	mov	r2, r6
 800b512:	463b      	mov	r3, r7
 800b514:	4620      	mov	r0, r4
 800b516:	460d      	mov	r5, r1
 800b518:	f7f4 fe82 	bl	8000220 <__aeabi_dsub>
 800b51c:	4602      	mov	r2, r0
 800b51e:	460b      	mov	r3, r1
 800b520:	4640      	mov	r0, r8
 800b522:	4649      	mov	r1, r9
 800b524:	f7f4 fe7c 	bl	8000220 <__aeabi_dsub>
 800b528:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b52c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b530:	2300      	movs	r3, #0
 800b532:	9304      	str	r3, [sp, #16]
 800b534:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b538:	4606      	mov	r6, r0
 800b53a:	460f      	mov	r7, r1
 800b53c:	4652      	mov	r2, sl
 800b53e:	465b      	mov	r3, fp
 800b540:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b544:	f7f4 fe6c 	bl	8000220 <__aeabi_dsub>
 800b548:	4622      	mov	r2, r4
 800b54a:	462b      	mov	r3, r5
 800b54c:	f7f5 f820 	bl	8000590 <__aeabi_dmul>
 800b550:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b554:	4680      	mov	r8, r0
 800b556:	4689      	mov	r9, r1
 800b558:	4630      	mov	r0, r6
 800b55a:	4639      	mov	r1, r7
 800b55c:	f7f5 f818 	bl	8000590 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4640      	mov	r0, r8
 800b566:	4649      	mov	r1, r9
 800b568:	f7f4 fe5c 	bl	8000224 <__adddf3>
 800b56c:	4652      	mov	r2, sl
 800b56e:	465b      	mov	r3, fp
 800b570:	4606      	mov	r6, r0
 800b572:	460f      	mov	r7, r1
 800b574:	4620      	mov	r0, r4
 800b576:	4629      	mov	r1, r5
 800b578:	f7f5 f80a 	bl	8000590 <__aeabi_dmul>
 800b57c:	460b      	mov	r3, r1
 800b57e:	4602      	mov	r2, r0
 800b580:	4680      	mov	r8, r0
 800b582:	4689      	mov	r9, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f7f4 fe4c 	bl	8000224 <__adddf3>
 800b58c:	4b17      	ldr	r3, [pc, #92]	@ (800b5ec <__ieee754_pow+0x41c>)
 800b58e:	4299      	cmp	r1, r3
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	468a      	mov	sl, r1
 800b596:	468b      	mov	fp, r1
 800b598:	f340 82ef 	ble.w	800bb7a <__ieee754_pow+0x9aa>
 800b59c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b5a0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b5a4:	4303      	orrs	r3, r0
 800b5a6:	f000 81e8 	beq.w	800b97a <__ieee754_pow+0x7aa>
 800b5aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f7f5 fa5f 	bl	8000a74 <__aeabi_dcmplt>
 800b5b6:	3800      	subs	r0, #0
 800b5b8:	bf18      	it	ne
 800b5ba:	2001      	movne	r0, #1
 800b5bc:	e710      	b.n	800b3e0 <__ieee754_pow+0x210>
 800b5be:	bf00      	nop
 800b5c0:	60000000 	.word	0x60000000
 800b5c4:	3ff71547 	.word	0x3ff71547
 800b5c8:	f85ddf44 	.word	0xf85ddf44
 800b5cc:	3e54ae0b 	.word	0x3e54ae0b
 800b5d0:	55555555 	.word	0x55555555
 800b5d4:	3fd55555 	.word	0x3fd55555
 800b5d8:	652b82fe 	.word	0x652b82fe
 800b5dc:	3ff71547 	.word	0x3ff71547
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	3fd00000 	.word	0x3fd00000
 800b5e8:	3fe00000 	.word	0x3fe00000
 800b5ec:	408fffff 	.word	0x408fffff
 800b5f0:	4bd5      	ldr	r3, [pc, #852]	@ (800b948 <__ieee754_pow+0x778>)
 800b5f2:	402b      	ands	r3, r5
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	b92b      	cbnz	r3, 800b604 <__ieee754_pow+0x434>
 800b5f8:	4bd4      	ldr	r3, [pc, #848]	@ (800b94c <__ieee754_pow+0x77c>)
 800b5fa:	f7f4 ffc9 	bl	8000590 <__aeabi_dmul>
 800b5fe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b602:	468b      	mov	fp, r1
 800b604:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b608:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b60c:	4413      	add	r3, r2
 800b60e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b610:	4bcf      	ldr	r3, [pc, #828]	@ (800b950 <__ieee754_pow+0x780>)
 800b612:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b616:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b61a:	459b      	cmp	fp, r3
 800b61c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b620:	dd08      	ble.n	800b634 <__ieee754_pow+0x464>
 800b622:	4bcc      	ldr	r3, [pc, #816]	@ (800b954 <__ieee754_pow+0x784>)
 800b624:	459b      	cmp	fp, r3
 800b626:	f340 81a5 	ble.w	800b974 <__ieee754_pow+0x7a4>
 800b62a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b62c:	3301      	adds	r3, #1
 800b62e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b630:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b634:	f04f 0a00 	mov.w	sl, #0
 800b638:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b63c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b63e:	4bc6      	ldr	r3, [pc, #792]	@ (800b958 <__ieee754_pow+0x788>)
 800b640:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b644:	ed93 7b00 	vldr	d7, [r3]
 800b648:	4629      	mov	r1, r5
 800b64a:	ec53 2b17 	vmov	r2, r3, d7
 800b64e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b652:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b656:	f7f4 fde3 	bl	8000220 <__aeabi_dsub>
 800b65a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b65e:	4606      	mov	r6, r0
 800b660:	460f      	mov	r7, r1
 800b662:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b666:	f7f4 fddd 	bl	8000224 <__adddf3>
 800b66a:	4602      	mov	r2, r0
 800b66c:	460b      	mov	r3, r1
 800b66e:	2000      	movs	r0, #0
 800b670:	49ba      	ldr	r1, [pc, #744]	@ (800b95c <__ieee754_pow+0x78c>)
 800b672:	f7f5 f8b7 	bl	80007e4 <__aeabi_ddiv>
 800b676:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b67a:	4602      	mov	r2, r0
 800b67c:	460b      	mov	r3, r1
 800b67e:	4630      	mov	r0, r6
 800b680:	4639      	mov	r1, r7
 800b682:	f7f4 ff85 	bl	8000590 <__aeabi_dmul>
 800b686:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b68a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b68e:	106d      	asrs	r5, r5, #1
 800b690:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b694:	f04f 0b00 	mov.w	fp, #0
 800b698:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b69c:	4661      	mov	r1, ip
 800b69e:	2200      	movs	r2, #0
 800b6a0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	46e1      	mov	r9, ip
 800b6a8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b6ac:	4614      	mov	r4, r2
 800b6ae:	461d      	mov	r5, r3
 800b6b0:	f7f4 ff6e 	bl	8000590 <__aeabi_dmul>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	f7f4 fdb0 	bl	8000220 <__aeabi_dsub>
 800b6c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b6c4:	4606      	mov	r6, r0
 800b6c6:	460f      	mov	r7, r1
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	f7f4 fda8 	bl	8000220 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6d8:	f7f4 fda2 	bl	8000220 <__aeabi_dsub>
 800b6dc:	465a      	mov	r2, fp
 800b6de:	464b      	mov	r3, r9
 800b6e0:	f7f4 ff56 	bl	8000590 <__aeabi_dmul>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	4630      	mov	r0, r6
 800b6ea:	4639      	mov	r1, r7
 800b6ec:	f7f4 fd98 	bl	8000220 <__aeabi_dsub>
 800b6f0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b6f4:	f7f4 ff4c 	bl	8000590 <__aeabi_dmul>
 800b6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b700:	4610      	mov	r0, r2
 800b702:	4619      	mov	r1, r3
 800b704:	f7f4 ff44 	bl	8000590 <__aeabi_dmul>
 800b708:	a37d      	add	r3, pc, #500	@ (adr r3, 800b900 <__ieee754_pow+0x730>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	4604      	mov	r4, r0
 800b710:	460d      	mov	r5, r1
 800b712:	f7f4 ff3d 	bl	8000590 <__aeabi_dmul>
 800b716:	a37c      	add	r3, pc, #496	@ (adr r3, 800b908 <__ieee754_pow+0x738>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	f7f4 fd82 	bl	8000224 <__adddf3>
 800b720:	4622      	mov	r2, r4
 800b722:	462b      	mov	r3, r5
 800b724:	f7f4 ff34 	bl	8000590 <__aeabi_dmul>
 800b728:	a379      	add	r3, pc, #484	@ (adr r3, 800b910 <__ieee754_pow+0x740>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fd79 	bl	8000224 <__adddf3>
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	f7f4 ff2b 	bl	8000590 <__aeabi_dmul>
 800b73a:	a377      	add	r3, pc, #476	@ (adr r3, 800b918 <__ieee754_pow+0x748>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fd70 	bl	8000224 <__adddf3>
 800b744:	4622      	mov	r2, r4
 800b746:	462b      	mov	r3, r5
 800b748:	f7f4 ff22 	bl	8000590 <__aeabi_dmul>
 800b74c:	a374      	add	r3, pc, #464	@ (adr r3, 800b920 <__ieee754_pow+0x750>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd67 	bl	8000224 <__adddf3>
 800b756:	4622      	mov	r2, r4
 800b758:	462b      	mov	r3, r5
 800b75a:	f7f4 ff19 	bl	8000590 <__aeabi_dmul>
 800b75e:	a372      	add	r3, pc, #456	@ (adr r3, 800b928 <__ieee754_pow+0x758>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd5e 	bl	8000224 <__adddf3>
 800b768:	4622      	mov	r2, r4
 800b76a:	4606      	mov	r6, r0
 800b76c:	460f      	mov	r7, r1
 800b76e:	462b      	mov	r3, r5
 800b770:	4620      	mov	r0, r4
 800b772:	4629      	mov	r1, r5
 800b774:	f7f4 ff0c 	bl	8000590 <__aeabi_dmul>
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4630      	mov	r0, r6
 800b77e:	4639      	mov	r1, r7
 800b780:	f7f4 ff06 	bl	8000590 <__aeabi_dmul>
 800b784:	465a      	mov	r2, fp
 800b786:	4604      	mov	r4, r0
 800b788:	460d      	mov	r5, r1
 800b78a:	464b      	mov	r3, r9
 800b78c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b790:	f7f4 fd48 	bl	8000224 <__adddf3>
 800b794:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b798:	f7f4 fefa 	bl	8000590 <__aeabi_dmul>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	f7f4 fd40 	bl	8000224 <__adddf3>
 800b7a4:	465a      	mov	r2, fp
 800b7a6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7aa:	464b      	mov	r3, r9
 800b7ac:	4658      	mov	r0, fp
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	f7f4 feee 	bl	8000590 <__aeabi_dmul>
 800b7b4:	4b6a      	ldr	r3, [pc, #424]	@ (800b960 <__ieee754_pow+0x790>)
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	460f      	mov	r7, r1
 800b7bc:	f7f4 fd32 	bl	8000224 <__adddf3>
 800b7c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7c4:	f7f4 fd2e 	bl	8000224 <__adddf3>
 800b7c8:	46d8      	mov	r8, fp
 800b7ca:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	465a      	mov	r2, fp
 800b7d2:	460b      	mov	r3, r1
 800b7d4:	4640      	mov	r0, r8
 800b7d6:	4649      	mov	r1, r9
 800b7d8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b7dc:	f7f4 fed8 	bl	8000590 <__aeabi_dmul>
 800b7e0:	465c      	mov	r4, fp
 800b7e2:	4680      	mov	r8, r0
 800b7e4:	4689      	mov	r9, r1
 800b7e6:	4b5e      	ldr	r3, [pc, #376]	@ (800b960 <__ieee754_pow+0x790>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	4629      	mov	r1, r5
 800b7ee:	f7f4 fd17 	bl	8000220 <__aeabi_dsub>
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	463b      	mov	r3, r7
 800b7f6:	f7f4 fd13 	bl	8000220 <__aeabi_dsub>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b802:	f7f4 fd0d 	bl	8000220 <__aeabi_dsub>
 800b806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b80a:	f7f4 fec1 	bl	8000590 <__aeabi_dmul>
 800b80e:	4622      	mov	r2, r4
 800b810:	4606      	mov	r6, r0
 800b812:	460f      	mov	r7, r1
 800b814:	462b      	mov	r3, r5
 800b816:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b81a:	f7f4 feb9 	bl	8000590 <__aeabi_dmul>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	4630      	mov	r0, r6
 800b824:	4639      	mov	r1, r7
 800b826:	f7f4 fcfd 	bl	8000224 <__adddf3>
 800b82a:	4606      	mov	r6, r0
 800b82c:	460f      	mov	r7, r1
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4640      	mov	r0, r8
 800b834:	4649      	mov	r1, r9
 800b836:	f7f4 fcf5 	bl	8000224 <__adddf3>
 800b83a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b83e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b930 <__ieee754_pow+0x760>)
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	4658      	mov	r0, fp
 800b846:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b84a:	460d      	mov	r5, r1
 800b84c:	f7f4 fea0 	bl	8000590 <__aeabi_dmul>
 800b850:	465c      	mov	r4, fp
 800b852:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b856:	4642      	mov	r2, r8
 800b858:	464b      	mov	r3, r9
 800b85a:	4620      	mov	r0, r4
 800b85c:	4629      	mov	r1, r5
 800b85e:	f7f4 fcdf 	bl	8000220 <__aeabi_dsub>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4630      	mov	r0, r6
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f4 fcd9 	bl	8000220 <__aeabi_dsub>
 800b86e:	a332      	add	r3, pc, #200	@ (adr r3, 800b938 <__ieee754_pow+0x768>)
 800b870:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b874:	f7f4 fe8c 	bl	8000590 <__aeabi_dmul>
 800b878:	a331      	add	r3, pc, #196	@ (adr r3, 800b940 <__ieee754_pow+0x770>)
 800b87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87e:	4606      	mov	r6, r0
 800b880:	460f      	mov	r7, r1
 800b882:	4620      	mov	r0, r4
 800b884:	4629      	mov	r1, r5
 800b886:	f7f4 fe83 	bl	8000590 <__aeabi_dmul>
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	4630      	mov	r0, r6
 800b890:	4639      	mov	r1, r7
 800b892:	f7f4 fcc7 	bl	8000224 <__adddf3>
 800b896:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b898:	4b32      	ldr	r3, [pc, #200]	@ (800b964 <__ieee754_pow+0x794>)
 800b89a:	4413      	add	r3, r2
 800b89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a0:	f7f4 fcc0 	bl	8000224 <__adddf3>
 800b8a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b8a8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b8aa:	f7f4 fe07 	bl	80004bc <__aeabi_i2d>
 800b8ae:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b8b0:	4b2d      	ldr	r3, [pc, #180]	@ (800b968 <__ieee754_pow+0x798>)
 800b8b2:	4413      	add	r3, r2
 800b8b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b8b8:	4606      	mov	r6, r0
 800b8ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8be:	460f      	mov	r7, r1
 800b8c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c4:	f7f4 fcae 	bl	8000224 <__adddf3>
 800b8c8:	4642      	mov	r2, r8
 800b8ca:	464b      	mov	r3, r9
 800b8cc:	f7f4 fcaa 	bl	8000224 <__adddf3>
 800b8d0:	4632      	mov	r2, r6
 800b8d2:	463b      	mov	r3, r7
 800b8d4:	f7f4 fca6 	bl	8000224 <__adddf3>
 800b8d8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	463b      	mov	r3, r7
 800b8e0:	4658      	mov	r0, fp
 800b8e2:	460d      	mov	r5, r1
 800b8e4:	f7f4 fc9c 	bl	8000220 <__aeabi_dsub>
 800b8e8:	4642      	mov	r2, r8
 800b8ea:	464b      	mov	r3, r9
 800b8ec:	f7f4 fc98 	bl	8000220 <__aeabi_dsub>
 800b8f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8f4:	f7f4 fc94 	bl	8000220 <__aeabi_dsub>
 800b8f8:	465c      	mov	r4, fp
 800b8fa:	4602      	mov	r2, r0
 800b8fc:	e036      	b.n	800b96c <__ieee754_pow+0x79c>
 800b8fe:	bf00      	nop
 800b900:	4a454eef 	.word	0x4a454eef
 800b904:	3fca7e28 	.word	0x3fca7e28
 800b908:	93c9db65 	.word	0x93c9db65
 800b90c:	3fcd864a 	.word	0x3fcd864a
 800b910:	a91d4101 	.word	0xa91d4101
 800b914:	3fd17460 	.word	0x3fd17460
 800b918:	518f264d 	.word	0x518f264d
 800b91c:	3fd55555 	.word	0x3fd55555
 800b920:	db6fabff 	.word	0xdb6fabff
 800b924:	3fdb6db6 	.word	0x3fdb6db6
 800b928:	33333303 	.word	0x33333303
 800b92c:	3fe33333 	.word	0x3fe33333
 800b930:	e0000000 	.word	0xe0000000
 800b934:	3feec709 	.word	0x3feec709
 800b938:	dc3a03fd 	.word	0xdc3a03fd
 800b93c:	3feec709 	.word	0x3feec709
 800b940:	145b01f5 	.word	0x145b01f5
 800b944:	be3e2fe0 	.word	0xbe3e2fe0
 800b948:	7ff00000 	.word	0x7ff00000
 800b94c:	43400000 	.word	0x43400000
 800b950:	0003988e 	.word	0x0003988e
 800b954:	000bb679 	.word	0x000bb679
 800b958:	0800c4f8 	.word	0x0800c4f8
 800b95c:	3ff00000 	.word	0x3ff00000
 800b960:	40080000 	.word	0x40080000
 800b964:	0800c4d8 	.word	0x0800c4d8
 800b968:	0800c4e8 	.word	0x0800c4e8
 800b96c:	460b      	mov	r3, r1
 800b96e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b972:	e5d7      	b.n	800b524 <__ieee754_pow+0x354>
 800b974:	f04f 0a01 	mov.w	sl, #1
 800b978:	e65e      	b.n	800b638 <__ieee754_pow+0x468>
 800b97a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800bc4c <__ieee754_pow+0xa7c>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f4 fc4e 	bl	8000224 <__adddf3>
 800b988:	4642      	mov	r2, r8
 800b98a:	e9cd 0100 	strd	r0, r1, [sp]
 800b98e:	464b      	mov	r3, r9
 800b990:	4620      	mov	r0, r4
 800b992:	4629      	mov	r1, r5
 800b994:	f7f4 fc44 	bl	8000220 <__aeabi_dsub>
 800b998:	4602      	mov	r2, r0
 800b99a:	460b      	mov	r3, r1
 800b99c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9a0:	f7f5 f886 	bl	8000ab0 <__aeabi_dcmpgt>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f47f ae00 	bne.w	800b5aa <__ieee754_pow+0x3da>
 800b9aa:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800b9ae:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800b9b2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800b9b6:	fa43 fa0a 	asr.w	sl, r3, sl
 800b9ba:	44da      	add	sl, fp
 800b9bc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b9c0:	489d      	ldr	r0, [pc, #628]	@ (800bc38 <__ieee754_pow+0xa68>)
 800b9c2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800b9c6:	4108      	asrs	r0, r1
 800b9c8:	ea00 030a 	and.w	r3, r0, sl
 800b9cc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b9d0:	f1c1 0114 	rsb	r1, r1, #20
 800b9d4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800b9d8:	fa4a fa01 	asr.w	sl, sl, r1
 800b9dc:	f1bb 0f00 	cmp.w	fp, #0
 800b9e0:	4640      	mov	r0, r8
 800b9e2:	4649      	mov	r1, r9
 800b9e4:	f04f 0200 	mov.w	r2, #0
 800b9e8:	bfb8      	it	lt
 800b9ea:	f1ca 0a00 	rsblt	sl, sl, #0
 800b9ee:	f7f4 fc17 	bl	8000220 <__aeabi_dsub>
 800b9f2:	4680      	mov	r8, r0
 800b9f4:	4689      	mov	r9, r1
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	463b      	mov	r3, r7
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fc11 	bl	8000224 <__adddf3>
 800ba02:	2400      	movs	r4, #0
 800ba04:	a37c      	add	r3, pc, #496	@ (adr r3, 800bbf8 <__ieee754_pow+0xa28>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	460d      	mov	r5, r1
 800ba0e:	f7f4 fdbf 	bl	8000590 <__aeabi_dmul>
 800ba12:	4642      	mov	r2, r8
 800ba14:	e9cd 0100 	strd	r0, r1, [sp]
 800ba18:	464b      	mov	r3, r9
 800ba1a:	4620      	mov	r0, r4
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	f7f4 fbff 	bl	8000220 <__aeabi_dsub>
 800ba22:	4602      	mov	r2, r0
 800ba24:	460b      	mov	r3, r1
 800ba26:	4630      	mov	r0, r6
 800ba28:	4639      	mov	r1, r7
 800ba2a:	f7f4 fbf9 	bl	8000220 <__aeabi_dsub>
 800ba2e:	a374      	add	r3, pc, #464	@ (adr r3, 800bc00 <__ieee754_pow+0xa30>)
 800ba30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba34:	f7f4 fdac 	bl	8000590 <__aeabi_dmul>
 800ba38:	a373      	add	r3, pc, #460	@ (adr r3, 800bc08 <__ieee754_pow+0xa38>)
 800ba3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3e:	4680      	mov	r8, r0
 800ba40:	4689      	mov	r9, r1
 800ba42:	4620      	mov	r0, r4
 800ba44:	4629      	mov	r1, r5
 800ba46:	f7f4 fda3 	bl	8000590 <__aeabi_dmul>
 800ba4a:	4602      	mov	r2, r0
 800ba4c:	460b      	mov	r3, r1
 800ba4e:	4640      	mov	r0, r8
 800ba50:	4649      	mov	r1, r9
 800ba52:	f7f4 fbe7 	bl	8000224 <__adddf3>
 800ba56:	4604      	mov	r4, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba62:	f7f4 fbdf 	bl	8000224 <__adddf3>
 800ba66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4689      	mov	r9, r1
 800ba6e:	f7f4 fbd7 	bl	8000220 <__aeabi_dsub>
 800ba72:	4602      	mov	r2, r0
 800ba74:	460b      	mov	r3, r1
 800ba76:	4620      	mov	r0, r4
 800ba78:	4629      	mov	r1, r5
 800ba7a:	f7f4 fbd1 	bl	8000220 <__aeabi_dsub>
 800ba7e:	4642      	mov	r2, r8
 800ba80:	4606      	mov	r6, r0
 800ba82:	460f      	mov	r7, r1
 800ba84:	464b      	mov	r3, r9
 800ba86:	4640      	mov	r0, r8
 800ba88:	4649      	mov	r1, r9
 800ba8a:	f7f4 fd81 	bl	8000590 <__aeabi_dmul>
 800ba8e:	a360      	add	r3, pc, #384	@ (adr r3, 800bc10 <__ieee754_pow+0xa40>)
 800ba90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	f7f4 fd7a 	bl	8000590 <__aeabi_dmul>
 800ba9c:	a35e      	add	r3, pc, #376	@ (adr r3, 800bc18 <__ieee754_pow+0xa48>)
 800ba9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa2:	f7f4 fbbd 	bl	8000220 <__aeabi_dsub>
 800baa6:	4622      	mov	r2, r4
 800baa8:	462b      	mov	r3, r5
 800baaa:	f7f4 fd71 	bl	8000590 <__aeabi_dmul>
 800baae:	a35c      	add	r3, pc, #368	@ (adr r3, 800bc20 <__ieee754_pow+0xa50>)
 800bab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab4:	f7f4 fbb6 	bl	8000224 <__adddf3>
 800bab8:	4622      	mov	r2, r4
 800baba:	462b      	mov	r3, r5
 800babc:	f7f4 fd68 	bl	8000590 <__aeabi_dmul>
 800bac0:	a359      	add	r3, pc, #356	@ (adr r3, 800bc28 <__ieee754_pow+0xa58>)
 800bac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac6:	f7f4 fbab 	bl	8000220 <__aeabi_dsub>
 800baca:	4622      	mov	r2, r4
 800bacc:	462b      	mov	r3, r5
 800bace:	f7f4 fd5f 	bl	8000590 <__aeabi_dmul>
 800bad2:	a357      	add	r3, pc, #348	@ (adr r3, 800bc30 <__ieee754_pow+0xa60>)
 800bad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad8:	f7f4 fba4 	bl	8000224 <__adddf3>
 800badc:	4622      	mov	r2, r4
 800bade:	462b      	mov	r3, r5
 800bae0:	f7f4 fd56 	bl	8000590 <__aeabi_dmul>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4640      	mov	r0, r8
 800baea:	4649      	mov	r1, r9
 800baec:	f7f4 fb98 	bl	8000220 <__aeabi_dsub>
 800baf0:	4604      	mov	r4, r0
 800baf2:	460d      	mov	r5, r1
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	4640      	mov	r0, r8
 800bafa:	4649      	mov	r1, r9
 800bafc:	f7f4 fd48 	bl	8000590 <__aeabi_dmul>
 800bb00:	2200      	movs	r2, #0
 800bb02:	e9cd 0100 	strd	r0, r1, [sp]
 800bb06:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	4629      	mov	r1, r5
 800bb0e:	f7f4 fb87 	bl	8000220 <__aeabi_dsub>
 800bb12:	4602      	mov	r2, r0
 800bb14:	460b      	mov	r3, r1
 800bb16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb1a:	f7f4 fe63 	bl	80007e4 <__aeabi_ddiv>
 800bb1e:	4632      	mov	r2, r6
 800bb20:	4604      	mov	r4, r0
 800bb22:	460d      	mov	r5, r1
 800bb24:	463b      	mov	r3, r7
 800bb26:	4640      	mov	r0, r8
 800bb28:	4649      	mov	r1, r9
 800bb2a:	f7f4 fd31 	bl	8000590 <__aeabi_dmul>
 800bb2e:	4632      	mov	r2, r6
 800bb30:	463b      	mov	r3, r7
 800bb32:	f7f4 fb77 	bl	8000224 <__adddf3>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	4629      	mov	r1, r5
 800bb3e:	f7f4 fb6f 	bl	8000220 <__aeabi_dsub>
 800bb42:	4642      	mov	r2, r8
 800bb44:	464b      	mov	r3, r9
 800bb46:	f7f4 fb6b 	bl	8000220 <__aeabi_dsub>
 800bb4a:	460b      	mov	r3, r1
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	493b      	ldr	r1, [pc, #236]	@ (800bc3c <__ieee754_pow+0xa6c>)
 800bb50:	2000      	movs	r0, #0
 800bb52:	f7f4 fb65 	bl	8000220 <__aeabi_dsub>
 800bb56:	ec41 0b10 	vmov	d0, r0, r1
 800bb5a:	ee10 3a90 	vmov	r3, s1
 800bb5e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bb62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bb66:	da30      	bge.n	800bbca <__ieee754_pow+0x9fa>
 800bb68:	4650      	mov	r0, sl
 800bb6a:	f000 f94d 	bl	800be08 <scalbn>
 800bb6e:	ec51 0b10 	vmov	r0, r1, d0
 800bb72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb76:	f7ff bbd2 	b.w	800b31e <__ieee754_pow+0x14e>
 800bb7a:	4c31      	ldr	r4, [pc, #196]	@ (800bc40 <__ieee754_pow+0xa70>)
 800bb7c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	d91a      	bls.n	800bbba <__ieee754_pow+0x9ea>
 800bb84:	4b2f      	ldr	r3, [pc, #188]	@ (800bc44 <__ieee754_pow+0xa74>)
 800bb86:	440b      	add	r3, r1
 800bb88:	4303      	orrs	r3, r0
 800bb8a:	d009      	beq.n	800bba0 <__ieee754_pow+0x9d0>
 800bb8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb90:	2200      	movs	r2, #0
 800bb92:	2300      	movs	r3, #0
 800bb94:	f7f4 ff6e 	bl	8000a74 <__aeabi_dcmplt>
 800bb98:	3800      	subs	r0, #0
 800bb9a:	bf18      	it	ne
 800bb9c:	2001      	movne	r0, #1
 800bb9e:	e42b      	b.n	800b3f8 <__ieee754_pow+0x228>
 800bba0:	4642      	mov	r2, r8
 800bba2:	464b      	mov	r3, r9
 800bba4:	f7f4 fb3c 	bl	8000220 <__aeabi_dsub>
 800bba8:	4632      	mov	r2, r6
 800bbaa:	463b      	mov	r3, r7
 800bbac:	f7f4 ff76 	bl	8000a9c <__aeabi_dcmpge>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d1eb      	bne.n	800bb8c <__ieee754_pow+0x9bc>
 800bbb4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800bc54 <__ieee754_pow+0xa84>
 800bbb8:	e6f7      	b.n	800b9aa <__ieee754_pow+0x7da>
 800bbba:	469a      	mov	sl, r3
 800bbbc:	4b22      	ldr	r3, [pc, #136]	@ (800bc48 <__ieee754_pow+0xa78>)
 800bbbe:	459a      	cmp	sl, r3
 800bbc0:	f63f aef3 	bhi.w	800b9aa <__ieee754_pow+0x7da>
 800bbc4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bbc8:	e715      	b.n	800b9f6 <__ieee754_pow+0x826>
 800bbca:	ec51 0b10 	vmov	r0, r1, d0
 800bbce:	4619      	mov	r1, r3
 800bbd0:	e7cf      	b.n	800bb72 <__ieee754_pow+0x9a2>
 800bbd2:	491a      	ldr	r1, [pc, #104]	@ (800bc3c <__ieee754_pow+0xa6c>)
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	f7ff bb18 	b.w	800b20a <__ieee754_pow+0x3a>
 800bbda:	2000      	movs	r0, #0
 800bbdc:	2100      	movs	r1, #0
 800bbde:	f7ff bb14 	b.w	800b20a <__ieee754_pow+0x3a>
 800bbe2:	4630      	mov	r0, r6
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	f7ff bb10 	b.w	800b20a <__ieee754_pow+0x3a>
 800bbea:	460c      	mov	r4, r1
 800bbec:	f7ff bb5e 	b.w	800b2ac <__ieee754_pow+0xdc>
 800bbf0:	2400      	movs	r4, #0
 800bbf2:	f7ff bb49 	b.w	800b288 <__ieee754_pow+0xb8>
 800bbf6:	bf00      	nop
 800bbf8:	00000000 	.word	0x00000000
 800bbfc:	3fe62e43 	.word	0x3fe62e43
 800bc00:	fefa39ef 	.word	0xfefa39ef
 800bc04:	3fe62e42 	.word	0x3fe62e42
 800bc08:	0ca86c39 	.word	0x0ca86c39
 800bc0c:	be205c61 	.word	0xbe205c61
 800bc10:	72bea4d0 	.word	0x72bea4d0
 800bc14:	3e663769 	.word	0x3e663769
 800bc18:	c5d26bf1 	.word	0xc5d26bf1
 800bc1c:	3ebbbd41 	.word	0x3ebbbd41
 800bc20:	af25de2c 	.word	0xaf25de2c
 800bc24:	3f11566a 	.word	0x3f11566a
 800bc28:	16bebd93 	.word	0x16bebd93
 800bc2c:	3f66c16c 	.word	0x3f66c16c
 800bc30:	5555553e 	.word	0x5555553e
 800bc34:	3fc55555 	.word	0x3fc55555
 800bc38:	fff00000 	.word	0xfff00000
 800bc3c:	3ff00000 	.word	0x3ff00000
 800bc40:	4090cbff 	.word	0x4090cbff
 800bc44:	3f6f3400 	.word	0x3f6f3400
 800bc48:	3fe00000 	.word	0x3fe00000
 800bc4c:	652b82fe 	.word	0x652b82fe
 800bc50:	3c971547 	.word	0x3c971547
 800bc54:	4090cc00 	.word	0x4090cc00

0800bc58 <fabs>:
 800bc58:	ec51 0b10 	vmov	r0, r1, d0
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bc62:	ec43 2b10 	vmov	d0, r2, r3
 800bc66:	4770      	bx	lr

0800bc68 <__ieee754_expf>:
 800bc68:	ee10 2a10 	vmov	r2, s0
 800bc6c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 800bc70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bc74:	d902      	bls.n	800bc7c <__ieee754_expf+0x14>
 800bc76:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc7a:	4770      	bx	lr
 800bc7c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800bc80:	d106      	bne.n	800bc90 <__ieee754_expf+0x28>
 800bc82:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 800bdbc <__ieee754_expf+0x154>
 800bc86:	2900      	cmp	r1, #0
 800bc88:	bf18      	it	ne
 800bc8a:	eeb0 0a67 	vmovne.f32	s0, s15
 800bc8e:	4770      	bx	lr
 800bc90:	484b      	ldr	r0, [pc, #300]	@ (800bdc0 <__ieee754_expf+0x158>)
 800bc92:	4282      	cmp	r2, r0
 800bc94:	dd02      	ble.n	800bc9c <__ieee754_expf+0x34>
 800bc96:	2000      	movs	r0, #0
 800bc98:	f000 b992 	b.w	800bfc0 <__math_oflowf>
 800bc9c:	2a00      	cmp	r2, #0
 800bc9e:	da05      	bge.n	800bcac <__ieee754_expf+0x44>
 800bca0:	4a48      	ldr	r2, [pc, #288]	@ (800bdc4 <__ieee754_expf+0x15c>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d902      	bls.n	800bcac <__ieee754_expf+0x44>
 800bca6:	2000      	movs	r0, #0
 800bca8:	f000 b984 	b.w	800bfb4 <__math_uflowf>
 800bcac:	4a46      	ldr	r2, [pc, #280]	@ (800bdc8 <__ieee754_expf+0x160>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800bcb4:	d952      	bls.n	800bd5c <__ieee754_expf+0xf4>
 800bcb6:	4a45      	ldr	r2, [pc, #276]	@ (800bdcc <__ieee754_expf+0x164>)
 800bcb8:	4293      	cmp	r3, r2
 800bcba:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800bcbe:	d834      	bhi.n	800bd2a <__ieee754_expf+0xc2>
 800bcc0:	4b43      	ldr	r3, [pc, #268]	@ (800bdd0 <__ieee754_expf+0x168>)
 800bcc2:	4413      	add	r3, r2
 800bcc4:	ed93 7a00 	vldr	s14, [r3]
 800bcc8:	4b42      	ldr	r3, [pc, #264]	@ (800bdd4 <__ieee754_expf+0x16c>)
 800bcca:	4413      	add	r3, r2
 800bccc:	ee30 7a47 	vsub.f32	s14, s0, s14
 800bcd0:	f1c1 0201 	rsb	r2, r1, #1
 800bcd4:	edd3 7a00 	vldr	s15, [r3]
 800bcd8:	1a52      	subs	r2, r2, r1
 800bcda:	ee37 0a67 	vsub.f32	s0, s14, s15
 800bcde:	ee20 6a00 	vmul.f32	s12, s0, s0
 800bce2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 800bdd8 <__ieee754_expf+0x170>
 800bce6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bddc <__ieee754_expf+0x174>
 800bcea:	eee6 6a05 	vfma.f32	s13, s12, s10
 800bcee:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800bde0 <__ieee754_expf+0x178>
 800bcf2:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bcf6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800bde4 <__ieee754_expf+0x17c>
 800bcfa:	eee5 6a06 	vfma.f32	s13, s10, s12
 800bcfe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 800bde8 <__ieee754_expf+0x180>
 800bd02:	eea6 5a86 	vfma.f32	s10, s13, s12
 800bd06:	eef0 6a40 	vmov.f32	s13, s0
 800bd0a:	eee5 6a46 	vfms.f32	s13, s10, s12
 800bd0e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800bd12:	ee20 5a26 	vmul.f32	s10, s0, s13
 800bd16:	bb92      	cbnz	r2, 800bd7e <__ieee754_expf+0x116>
 800bd18:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800bd1c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800bd20:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800bd24:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800bd28:	4770      	bx	lr
 800bd2a:	4b30      	ldr	r3, [pc, #192]	@ (800bdec <__ieee754_expf+0x184>)
 800bd2c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800bdf0 <__ieee754_expf+0x188>
 800bd30:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800bdf4 <__ieee754_expf+0x18c>
 800bd34:	4413      	add	r3, r2
 800bd36:	edd3 7a00 	vldr	s15, [r3]
 800bd3a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bd3e:	eeb0 7a40 	vmov.f32	s14, s0
 800bd42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd46:	ee17 2a90 	vmov	r2, s15
 800bd4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd4e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800bd52:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800bdf8 <__ieee754_expf+0x190>
 800bd56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bd5a:	e7be      	b.n	800bcda <__ieee754_expf+0x72>
 800bd5c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800bd60:	d20b      	bcs.n	800bd7a <__ieee754_expf+0x112>
 800bd62:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800bdfc <__ieee754_expf+0x194>
 800bd66:	ee70 6a26 	vadd.f32	s13, s0, s13
 800bd6a:	eef4 6ae5 	vcmpe.f32	s13, s11
 800bd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd72:	dd02      	ble.n	800bd7a <__ieee754_expf+0x112>
 800bd74:	ee30 0a25 	vadd.f32	s0, s0, s11
 800bd78:	4770      	bx	lr
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	e7af      	b.n	800bcde <__ieee754_expf+0x76>
 800bd7e:	ee36 6a66 	vsub.f32	s12, s12, s13
 800bd82:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 800bd86:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800bd8a:	bfb8      	it	lt
 800bd8c:	3264      	addlt	r2, #100	@ 0x64
 800bd8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bd92:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd96:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800bd9a:	ee17 3a90 	vmov	r3, s15
 800bd9e:	bfab      	itete	ge
 800bda0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800bda4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800bda8:	ee00 3a10 	vmovge	s0, r3
 800bdac:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800be00 <__ieee754_expf+0x198>
 800bdb0:	bfbc      	itt	lt
 800bdb2:	ee00 3a10 	vmovlt	s0, r3
 800bdb6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800bdba:	4770      	bx	lr
 800bdbc:	00000000 	.word	0x00000000
 800bdc0:	42b17217 	.word	0x42b17217
 800bdc4:	42cff1b5 	.word	0x42cff1b5
 800bdc8:	3eb17218 	.word	0x3eb17218
 800bdcc:	3f851591 	.word	0x3f851591
 800bdd0:	0800c510 	.word	0x0800c510
 800bdd4:	0800c508 	.word	0x0800c508
 800bdd8:	3331bb4c 	.word	0x3331bb4c
 800bddc:	b5ddea0e 	.word	0xb5ddea0e
 800bde0:	388ab355 	.word	0x388ab355
 800bde4:	bb360b61 	.word	0xbb360b61
 800bde8:	3e2aaaab 	.word	0x3e2aaaab
 800bdec:	0800c518 	.word	0x0800c518
 800bdf0:	3fb8aa3b 	.word	0x3fb8aa3b
 800bdf4:	3f317180 	.word	0x3f317180
 800bdf8:	3717f7d1 	.word	0x3717f7d1
 800bdfc:	7149f2ca 	.word	0x7149f2ca
 800be00:	0d800000 	.word	0x0d800000
 800be04:	00000000 	.word	0x00000000

0800be08 <scalbn>:
 800be08:	b570      	push	{r4, r5, r6, lr}
 800be0a:	ec55 4b10 	vmov	r4, r5, d0
 800be0e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800be12:	4606      	mov	r6, r0
 800be14:	462b      	mov	r3, r5
 800be16:	b991      	cbnz	r1, 800be3e <scalbn+0x36>
 800be18:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800be1c:	4323      	orrs	r3, r4
 800be1e:	d03d      	beq.n	800be9c <scalbn+0x94>
 800be20:	4b35      	ldr	r3, [pc, #212]	@ (800bef8 <scalbn+0xf0>)
 800be22:	4620      	mov	r0, r4
 800be24:	4629      	mov	r1, r5
 800be26:	2200      	movs	r2, #0
 800be28:	f7f4 fbb2 	bl	8000590 <__aeabi_dmul>
 800be2c:	4b33      	ldr	r3, [pc, #204]	@ (800befc <scalbn+0xf4>)
 800be2e:	429e      	cmp	r6, r3
 800be30:	4604      	mov	r4, r0
 800be32:	460d      	mov	r5, r1
 800be34:	da0f      	bge.n	800be56 <scalbn+0x4e>
 800be36:	a328      	add	r3, pc, #160	@ (adr r3, 800bed8 <scalbn+0xd0>)
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	e01e      	b.n	800be7c <scalbn+0x74>
 800be3e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800be42:	4291      	cmp	r1, r2
 800be44:	d10b      	bne.n	800be5e <scalbn+0x56>
 800be46:	4622      	mov	r2, r4
 800be48:	4620      	mov	r0, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7f4 f9ea 	bl	8000224 <__adddf3>
 800be50:	4604      	mov	r4, r0
 800be52:	460d      	mov	r5, r1
 800be54:	e022      	b.n	800be9c <scalbn+0x94>
 800be56:	460b      	mov	r3, r1
 800be58:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800be5c:	3936      	subs	r1, #54	@ 0x36
 800be5e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800be62:	4296      	cmp	r6, r2
 800be64:	dd0d      	ble.n	800be82 <scalbn+0x7a>
 800be66:	2d00      	cmp	r5, #0
 800be68:	a11d      	add	r1, pc, #116	@ (adr r1, 800bee0 <scalbn+0xd8>)
 800be6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be6e:	da02      	bge.n	800be76 <scalbn+0x6e>
 800be70:	a11d      	add	r1, pc, #116	@ (adr r1, 800bee8 <scalbn+0xe0>)
 800be72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be76:	a31a      	add	r3, pc, #104	@ (adr r3, 800bee0 <scalbn+0xd8>)
 800be78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7c:	f7f4 fb88 	bl	8000590 <__aeabi_dmul>
 800be80:	e7e6      	b.n	800be50 <scalbn+0x48>
 800be82:	1872      	adds	r2, r6, r1
 800be84:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800be88:	428a      	cmp	r2, r1
 800be8a:	dcec      	bgt.n	800be66 <scalbn+0x5e>
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	dd08      	ble.n	800bea2 <scalbn+0x9a>
 800be90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800be94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800be98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800be9c:	ec45 4b10 	vmov	d0, r4, r5
 800bea0:	bd70      	pop	{r4, r5, r6, pc}
 800bea2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bea6:	da08      	bge.n	800beba <scalbn+0xb2>
 800bea8:	2d00      	cmp	r5, #0
 800beaa:	a10b      	add	r1, pc, #44	@ (adr r1, 800bed8 <scalbn+0xd0>)
 800beac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb0:	dac1      	bge.n	800be36 <scalbn+0x2e>
 800beb2:	a10f      	add	r1, pc, #60	@ (adr r1, 800bef0 <scalbn+0xe8>)
 800beb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb8:	e7bd      	b.n	800be36 <scalbn+0x2e>
 800beba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bebe:	3236      	adds	r2, #54	@ 0x36
 800bec0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bec4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bec8:	4620      	mov	r0, r4
 800beca:	4b0d      	ldr	r3, [pc, #52]	@ (800bf00 <scalbn+0xf8>)
 800becc:	4629      	mov	r1, r5
 800bece:	2200      	movs	r2, #0
 800bed0:	e7d4      	b.n	800be7c <scalbn+0x74>
 800bed2:	bf00      	nop
 800bed4:	f3af 8000 	nop.w
 800bed8:	c2f8f359 	.word	0xc2f8f359
 800bedc:	01a56e1f 	.word	0x01a56e1f
 800bee0:	8800759c 	.word	0x8800759c
 800bee4:	7e37e43c 	.word	0x7e37e43c
 800bee8:	8800759c 	.word	0x8800759c
 800beec:	fe37e43c 	.word	0xfe37e43c
 800bef0:	c2f8f359 	.word	0xc2f8f359
 800bef4:	81a56e1f 	.word	0x81a56e1f
 800bef8:	43500000 	.word	0x43500000
 800befc:	ffff3cb0 	.word	0xffff3cb0
 800bf00:	3c900000 	.word	0x3c900000

0800bf04 <with_errno>:
 800bf04:	b510      	push	{r4, lr}
 800bf06:	ed2d 8b02 	vpush	{d8}
 800bf0a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf0e:	eef0 8a60 	vmov.f32	s17, s1
 800bf12:	4604      	mov	r4, r0
 800bf14:	f7fe ff2e 	bl	800ad74 <__errno>
 800bf18:	eeb0 0a48 	vmov.f32	s0, s16
 800bf1c:	eef0 0a68 	vmov.f32	s1, s17
 800bf20:	ecbd 8b02 	vpop	{d8}
 800bf24:	6004      	str	r4, [r0, #0]
 800bf26:	bd10      	pop	{r4, pc}

0800bf28 <xflow>:
 800bf28:	4603      	mov	r3, r0
 800bf2a:	b507      	push	{r0, r1, r2, lr}
 800bf2c:	ec51 0b10 	vmov	r0, r1, d0
 800bf30:	b183      	cbz	r3, 800bf54 <xflow+0x2c>
 800bf32:	4602      	mov	r2, r0
 800bf34:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bf38:	e9cd 2300 	strd	r2, r3, [sp]
 800bf3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf40:	f7f4 fb26 	bl	8000590 <__aeabi_dmul>
 800bf44:	ec41 0b10 	vmov	d0, r0, r1
 800bf48:	2022      	movs	r0, #34	@ 0x22
 800bf4a:	b003      	add	sp, #12
 800bf4c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf50:	f7ff bfd8 	b.w	800bf04 <with_errno>
 800bf54:	4602      	mov	r2, r0
 800bf56:	460b      	mov	r3, r1
 800bf58:	e7ee      	b.n	800bf38 <xflow+0x10>
 800bf5a:	0000      	movs	r0, r0
 800bf5c:	0000      	movs	r0, r0
	...

0800bf60 <__math_uflow>:
 800bf60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf68 <__math_uflow+0x8>
 800bf64:	f7ff bfe0 	b.w	800bf28 <xflow>
 800bf68:	00000000 	.word	0x00000000
 800bf6c:	10000000 	.word	0x10000000

0800bf70 <__math_oflow>:
 800bf70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bf78 <__math_oflow+0x8>
 800bf74:	f7ff bfd8 	b.w	800bf28 <xflow>
 800bf78:	00000000 	.word	0x00000000
 800bf7c:	70000000 	.word	0x70000000

0800bf80 <with_errnof>:
 800bf80:	b510      	push	{r4, lr}
 800bf82:	ed2d 8b02 	vpush	{d8}
 800bf86:	eeb0 8a40 	vmov.f32	s16, s0
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	f7fe fef2 	bl	800ad74 <__errno>
 800bf90:	eeb0 0a48 	vmov.f32	s0, s16
 800bf94:	ecbd 8b02 	vpop	{d8}
 800bf98:	6004      	str	r4, [r0, #0]
 800bf9a:	bd10      	pop	{r4, pc}

0800bf9c <xflowf>:
 800bf9c:	b130      	cbz	r0, 800bfac <xflowf+0x10>
 800bf9e:	eef1 7a40 	vneg.f32	s15, s0
 800bfa2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bfa6:	2022      	movs	r0, #34	@ 0x22
 800bfa8:	f7ff bfea 	b.w	800bf80 <with_errnof>
 800bfac:	eef0 7a40 	vmov.f32	s15, s0
 800bfb0:	e7f7      	b.n	800bfa2 <xflowf+0x6>
	...

0800bfb4 <__math_uflowf>:
 800bfb4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfbc <__math_uflowf+0x8>
 800bfb8:	f7ff bff0 	b.w	800bf9c <xflowf>
 800bfbc:	10000000 	.word	0x10000000

0800bfc0 <__math_oflowf>:
 800bfc0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bfc8 <__math_oflowf+0x8>
 800bfc4:	f7ff bfea 	b.w	800bf9c <xflowf>
 800bfc8:	70000000 	.word	0x70000000

0800bfcc <__ieee754_sqrt>:
 800bfcc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd0:	4a68      	ldr	r2, [pc, #416]	@ (800c174 <__ieee754_sqrt+0x1a8>)
 800bfd2:	ec55 4b10 	vmov	r4, r5, d0
 800bfd6:	43aa      	bics	r2, r5
 800bfd8:	462b      	mov	r3, r5
 800bfda:	4621      	mov	r1, r4
 800bfdc:	d110      	bne.n	800c000 <__ieee754_sqrt+0x34>
 800bfde:	4622      	mov	r2, r4
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	4629      	mov	r1, r5
 800bfe4:	f7f4 fad4 	bl	8000590 <__aeabi_dmul>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	460b      	mov	r3, r1
 800bfec:	4620      	mov	r0, r4
 800bfee:	4629      	mov	r1, r5
 800bff0:	f7f4 f918 	bl	8000224 <__adddf3>
 800bff4:	4604      	mov	r4, r0
 800bff6:	460d      	mov	r5, r1
 800bff8:	ec45 4b10 	vmov	d0, r4, r5
 800bffc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c000:	2d00      	cmp	r5, #0
 800c002:	dc0e      	bgt.n	800c022 <__ieee754_sqrt+0x56>
 800c004:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c008:	4322      	orrs	r2, r4
 800c00a:	d0f5      	beq.n	800bff8 <__ieee754_sqrt+0x2c>
 800c00c:	b19d      	cbz	r5, 800c036 <__ieee754_sqrt+0x6a>
 800c00e:	4622      	mov	r2, r4
 800c010:	4620      	mov	r0, r4
 800c012:	4629      	mov	r1, r5
 800c014:	f7f4 f904 	bl	8000220 <__aeabi_dsub>
 800c018:	4602      	mov	r2, r0
 800c01a:	460b      	mov	r3, r1
 800c01c:	f7f4 fbe2 	bl	80007e4 <__aeabi_ddiv>
 800c020:	e7e8      	b.n	800bff4 <__ieee754_sqrt+0x28>
 800c022:	152a      	asrs	r2, r5, #20
 800c024:	d115      	bne.n	800c052 <__ieee754_sqrt+0x86>
 800c026:	2000      	movs	r0, #0
 800c028:	e009      	b.n	800c03e <__ieee754_sqrt+0x72>
 800c02a:	0acb      	lsrs	r3, r1, #11
 800c02c:	3a15      	subs	r2, #21
 800c02e:	0549      	lsls	r1, r1, #21
 800c030:	2b00      	cmp	r3, #0
 800c032:	d0fa      	beq.n	800c02a <__ieee754_sqrt+0x5e>
 800c034:	e7f7      	b.n	800c026 <__ieee754_sqrt+0x5a>
 800c036:	462a      	mov	r2, r5
 800c038:	e7fa      	b.n	800c030 <__ieee754_sqrt+0x64>
 800c03a:	005b      	lsls	r3, r3, #1
 800c03c:	3001      	adds	r0, #1
 800c03e:	02dc      	lsls	r4, r3, #11
 800c040:	d5fb      	bpl.n	800c03a <__ieee754_sqrt+0x6e>
 800c042:	1e44      	subs	r4, r0, #1
 800c044:	1b12      	subs	r2, r2, r4
 800c046:	f1c0 0420 	rsb	r4, r0, #32
 800c04a:	fa21 f404 	lsr.w	r4, r1, r4
 800c04e:	4323      	orrs	r3, r4
 800c050:	4081      	lsls	r1, r0
 800c052:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c056:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c05a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c05e:	07d2      	lsls	r2, r2, #31
 800c060:	bf5c      	itt	pl
 800c062:	005b      	lslpl	r3, r3, #1
 800c064:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c068:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c06c:	bf58      	it	pl
 800c06e:	0049      	lslpl	r1, r1, #1
 800c070:	2600      	movs	r6, #0
 800c072:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c076:	106d      	asrs	r5, r5, #1
 800c078:	0049      	lsls	r1, r1, #1
 800c07a:	2016      	movs	r0, #22
 800c07c:	4632      	mov	r2, r6
 800c07e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c082:	1917      	adds	r7, r2, r4
 800c084:	429f      	cmp	r7, r3
 800c086:	bfde      	ittt	le
 800c088:	193a      	addle	r2, r7, r4
 800c08a:	1bdb      	suble	r3, r3, r7
 800c08c:	1936      	addle	r6, r6, r4
 800c08e:	0fcf      	lsrs	r7, r1, #31
 800c090:	3801      	subs	r0, #1
 800c092:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c096:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c09a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c09e:	d1f0      	bne.n	800c082 <__ieee754_sqrt+0xb6>
 800c0a0:	4604      	mov	r4, r0
 800c0a2:	2720      	movs	r7, #32
 800c0a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	eb00 0e0c 	add.w	lr, r0, ip
 800c0ae:	db02      	blt.n	800c0b6 <__ieee754_sqrt+0xea>
 800c0b0:	d113      	bne.n	800c0da <__ieee754_sqrt+0x10e>
 800c0b2:	458e      	cmp	lr, r1
 800c0b4:	d811      	bhi.n	800c0da <__ieee754_sqrt+0x10e>
 800c0b6:	f1be 0f00 	cmp.w	lr, #0
 800c0ba:	eb0e 000c 	add.w	r0, lr, ip
 800c0be:	da42      	bge.n	800c146 <__ieee754_sqrt+0x17a>
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	db40      	blt.n	800c146 <__ieee754_sqrt+0x17a>
 800c0c4:	f102 0801 	add.w	r8, r2, #1
 800c0c8:	1a9b      	subs	r3, r3, r2
 800c0ca:	458e      	cmp	lr, r1
 800c0cc:	bf88      	it	hi
 800c0ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c0d2:	eba1 010e 	sub.w	r1, r1, lr
 800c0d6:	4464      	add	r4, ip
 800c0d8:	4642      	mov	r2, r8
 800c0da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c0de:	3f01      	subs	r7, #1
 800c0e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c0e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c0e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c0ec:	d1dc      	bne.n	800c0a8 <__ieee754_sqrt+0xdc>
 800c0ee:	4319      	orrs	r1, r3
 800c0f0:	d01b      	beq.n	800c12a <__ieee754_sqrt+0x15e>
 800c0f2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c178 <__ieee754_sqrt+0x1ac>
 800c0f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c17c <__ieee754_sqrt+0x1b0>
 800c0fa:	e9da 0100 	ldrd	r0, r1, [sl]
 800c0fe:	e9db 2300 	ldrd	r2, r3, [fp]
 800c102:	f7f4 f88d 	bl	8000220 <__aeabi_dsub>
 800c106:	e9da 8900 	ldrd	r8, r9, [sl]
 800c10a:	4602      	mov	r2, r0
 800c10c:	460b      	mov	r3, r1
 800c10e:	4640      	mov	r0, r8
 800c110:	4649      	mov	r1, r9
 800c112:	f7f4 fcb9 	bl	8000a88 <__aeabi_dcmple>
 800c116:	b140      	cbz	r0, 800c12a <__ieee754_sqrt+0x15e>
 800c118:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c11c:	e9da 0100 	ldrd	r0, r1, [sl]
 800c120:	e9db 2300 	ldrd	r2, r3, [fp]
 800c124:	d111      	bne.n	800c14a <__ieee754_sqrt+0x17e>
 800c126:	3601      	adds	r6, #1
 800c128:	463c      	mov	r4, r7
 800c12a:	1072      	asrs	r2, r6, #1
 800c12c:	0863      	lsrs	r3, r4, #1
 800c12e:	07f1      	lsls	r1, r6, #31
 800c130:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c134:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c138:	bf48      	it	mi
 800c13a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c13e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c142:	4618      	mov	r0, r3
 800c144:	e756      	b.n	800bff4 <__ieee754_sqrt+0x28>
 800c146:	4690      	mov	r8, r2
 800c148:	e7be      	b.n	800c0c8 <__ieee754_sqrt+0xfc>
 800c14a:	f7f4 f86b 	bl	8000224 <__adddf3>
 800c14e:	e9da 8900 	ldrd	r8, r9, [sl]
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	4640      	mov	r0, r8
 800c158:	4649      	mov	r1, r9
 800c15a:	f7f4 fc8b 	bl	8000a74 <__aeabi_dcmplt>
 800c15e:	b120      	cbz	r0, 800c16a <__ieee754_sqrt+0x19e>
 800c160:	1ca0      	adds	r0, r4, #2
 800c162:	bf08      	it	eq
 800c164:	3601      	addeq	r6, #1
 800c166:	3402      	adds	r4, #2
 800c168:	e7df      	b.n	800c12a <__ieee754_sqrt+0x15e>
 800c16a:	1c63      	adds	r3, r4, #1
 800c16c:	f023 0401 	bic.w	r4, r3, #1
 800c170:	e7db      	b.n	800c12a <__ieee754_sqrt+0x15e>
 800c172:	bf00      	nop
 800c174:	7ff00000 	.word	0x7ff00000
 800c178:	20000510 	.word	0x20000510
 800c17c:	20000508 	.word	0x20000508

0800c180 <_init>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	bf00      	nop
 800c184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c186:	bc08      	pop	{r3}
 800c188:	469e      	mov	lr, r3
 800c18a:	4770      	bx	lr

0800c18c <_fini>:
 800c18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c18e:	bf00      	nop
 800c190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c192:	bc08      	pop	{r3}
 800c194:	469e      	mov	lr, r3
 800c196:	4770      	bx	lr
