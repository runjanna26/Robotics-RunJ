
FinalProject_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6e8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800b7f8  0800b7f8  0000c7f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc40  0800bc40  0000d298  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc40  0800bc40  0000cc40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc48  0800bc48  0000d298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800bc48  0800bc48  0000cc48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bc54  0800bc54  0000cc54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800bc5c  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  20000298  0800bef4  0000d298  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800bef4  0000d7e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d298  2**0
                  CONTENTS, READONLY
 12 .debug_info   000251c0  00000000  00000000  0000d2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004d6c  00000000  00000000  00032481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014b8  00000000  00000000  000371f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffa  00000000  00000000  000386a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f43c  00000000  00000000  000396a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca4f  00000000  00000000  00058ade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b7f7  00000000  00000000  0007552d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110d24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006bac  00000000  00000000  00110d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  00117914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000298 	.word	0x20000298
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7e0 	.word	0x0800b7e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000029c 	.word	0x2000029c
 800014c:	0800b7e0 	.word	0x0800b7e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <__aeabi_f2iz>:
 80010fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001100:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001104:	d30f      	bcc.n	8001126 <__aeabi_f2iz+0x2a>
 8001106:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800110a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800110e:	d90d      	bls.n	800112c <__aeabi_f2iz+0x30>
 8001110:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001118:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800111c:	fa23 f002 	lsr.w	r0, r3, r2
 8001120:	bf18      	it	ne
 8001122:	4240      	negne	r0, r0
 8001124:	4770      	bx	lr
 8001126:	f04f 0000 	mov.w	r0, #0
 800112a:	4770      	bx	lr
 800112c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001130:	d101      	bne.n	8001136 <__aeabi_f2iz+0x3a>
 8001132:	0242      	lsls	r2, r0, #9
 8001134:	d105      	bne.n	8001142 <__aeabi_f2iz+0x46>
 8001136:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800113a:	bf08      	it	eq
 800113c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001140:	4770      	bx	lr
 8001142:	f04f 0000 	mov.w	r0, #0
 8001146:	4770      	bx	lr

08001148 <__aeabi_f2uiz>:
 8001148:	0042      	lsls	r2, r0, #1
 800114a:	d20e      	bcs.n	800116a <__aeabi_f2uiz+0x22>
 800114c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001150:	d30b      	bcc.n	800116a <__aeabi_f2uiz+0x22>
 8001152:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8001156:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800115a:	d409      	bmi.n	8001170 <__aeabi_f2uiz+0x28>
 800115c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001164:	fa23 f002 	lsr.w	r0, r3, r2
 8001168:	4770      	bx	lr
 800116a:	f04f 0000 	mov.w	r0, #0
 800116e:	4770      	bx	lr
 8001170:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001174:	d101      	bne.n	800117a <__aeabi_f2uiz+0x32>
 8001176:	0242      	lsls	r2, r0, #9
 8001178:	d102      	bne.n	8001180 <__aeabi_f2uiz+0x38>
 800117a:	f04f 30ff 	mov.w	r0, #4294967295
 800117e:	4770      	bx	lr
 8001180:	f04f 0000 	mov.w	r0, #0
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001224 <_ZN17AS5048A_interfaceC1Ev+0x84>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	@ 0x24
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2200      	movs	r2, #0
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	635a      	str	r2, [r3, #52]	@ 0x34
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2200      	movs	r2, #0
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <_ZN17AS5048A_interfaceC1Ev+0x88>)
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	@ (800122c <_ZN17AS5048A_interfaceC1Ev+0x8c>)
 80011f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	220e      	movs	r2, #14
 80011fe:	649a      	str	r2, [r3, #72]	@ 0x48
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	334c      	adds	r3, #76	@ 0x4c
 8001204:	490a      	ldr	r1, [pc, #40]	@ (8001230 <_ZN17AS5048A_interfaceC1Ev+0x90>)
 8001206:	4618      	mov	r0, r3
 8001208:	f000 fdd4 	bl	8001db4 <_ZN13LowPassFilterC1Ef>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3358      	adds	r3, #88	@ 0x58
 8001210:	4908      	ldr	r1, [pc, #32]	@ (8001234 <_ZN17AS5048A_interfaceC1Ev+0x94>)
 8001212:	4618      	mov	r0, r3
 8001214:	f000 fdce 	bl	8001db4 <_ZN13LowPassFilterC1Ef>
	// TODO Auto-generated constructor stub

}
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	0800b810 	.word	0x0800b810
 8001228:	c640e400 	.word	0xc640e400
 800122c:	ffffcfc7 	.word	0xffffcfc7
 8001230:	3c23d70a 	.word	0x3c23d70a
 8001234:	3e4ccccd 	.word	0x3e4ccccd

08001238 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a04      	ldr	r2, [pc, #16]	@ (8001254 <_ZN17AS5048A_interfaceD1Ev+0x1c>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4618      	mov	r0, r3
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	0800b810 	.word	0x0800b810

08001258 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
}
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff ffe9 	bl	8001238 <_ZN17AS5048A_interfaceD1Ev>
 8001266:	2164      	movs	r1, #100	@ 0x64
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f006 fc99 	bl	8007ba0 <_ZdlPvj>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}

08001278 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8001278:	b5b0      	push	{r4, r5, r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8001280:	4b19      	ldr	r3, [pc, #100]	@ (80012e8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x70>)
 8001282:	f107 040c 	add.w	r4, r7, #12
 8001286:	461d      	mov	r5, r3
 8001288:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128c:	682b      	ldr	r3, [r5, #0]
 800128e:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	e001      	b.n	800129e <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 800129a:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	4619      	mov	r1, r3
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 fa75 	bl	8001796 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80012ac:	4602      	mov	r2, r0
 80012ae:	460b      	mov	r3, r1
 80012b0:	4610      	mov	r0, r2
 80012b2:	4619      	mov	r1, r3
 80012b4:	f7ff fbe8 	bl	8000a88 <__aeabi_d2f>
 80012b8:	4602      	mov	r2, r0
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 80012c4:	69fa      	ldr	r2, [r7, #28]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2110      	movs	r1, #16
 80012da:	4804      	ldr	r0, [pc, #16]	@ (80012ec <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 80012dc:	f004 fdb0 	bl	8005e40 <HAL_GPIO_WritePin>
}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bdb0      	pop	{r4, r5, r7, pc}
 80012e8:	20000000 	.word	0x20000000
 80012ec:	40010800 	.word	0x40010800

080012f0 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f000 f8d1 	bl	80014a0 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f000 f8ce 	bl	80014a0 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001304:	4602      	mov	r2, r0
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 800130a:	f000 f99d 	bl	8001648 <_ZN17AS5048A_interface6microsEv>
 800130e:	4603      	mov	r3, r0
 8001310:	461a      	mov	r2, r3
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8001316:	2001      	movs	r0, #1
 8001318:	f002 ffb6 	bl	8004288 <HAL_Delay>
	getSensorAngle();
 800131c:	6878      	ldr	r0, [r7, #4]
 800131e:	f000 f8bf 	bl	80014a0 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f000 f8bc 	bl	80014a0 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001328:	4602      	mov	r2, r0
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	61da      	str	r2, [r3, #28]
	angle_prev_ts = micros();
 800132e:	f000 f98b 	bl	8001648 <_ZN17AS5048A_interface6microsEv>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	621a      	str	r2, [r3, #32]
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8001352:	2300      	movs	r3, #0
 8001354:	73bb      	strb	r3, [r7, #14]
 8001356:	e00d      	b.n	8001374 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d002      	beq.n	8001368 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	3301      	adds	r3, #1
 8001366:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	085b      	lsrs	r3, r3, #1
 800136c:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 800136e:	7bbb      	ldrb	r3, [r7, #14]
 8001370:	3301      	adds	r3, #1
 8001372:	73bb      	strb	r3, [r7, #14]
 8001374:	7bbb      	ldrb	r3, [r7, #14]
 8001376:	2b0f      	cmp	r3, #15
 8001378:	d9ee      	bls.n	8001358 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	bc80      	pop	{r7}
 800138a:	4770      	bx	lr

0800138c <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af02      	add	r7, sp, #8
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8001398:	887b      	ldrh	r3, [r7, #2]
 800139a:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0) {
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	dd0b      	ble.n	80013bc <_ZN17AS5048A_interface4readEt+0x30>
		command = angle_register | (1 << command_rw_bit);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	691b      	ldr	r3, [r3, #16]
 80013a8:	2201      	movs	r2, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	b29b      	uxth	r3, r3
 80013ba:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0) {
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	dd11      	ble.n	80013e8 <_ZN17AS5048A_interface4readEt+0x5c>
		//Add a parity bit on the the MSB
		command |=
				((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 80013c4:	897b      	ldrh	r3, [r7, #10]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffba 	bl	8001342 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
		command |=
 80013da:	b21a      	sxth	r2, r3
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	b21b      	sxth	r3, r3
 80013e0:	4313      	orrs	r3, r2
 80013e2:	b21b      	sxth	r3, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80013e8:	2200      	movs	r2, #0
 80013ea:	2110      	movs	r1, #16
 80013ec:	4822      	ldr	r0, [pc, #136]	@ (8001478 <_ZN17AS5048A_interface4readEt+0xec>)
 80013ee:	f004 fd27 	bl	8005e40 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 80013f2:	f107 020c 	add.w	r2, r7, #12
 80013f6:	f107 010a 	add.w	r1, r7, #10
 80013fa:	2364      	movs	r3, #100	@ 0x64
 80013fc:	9300      	str	r3, [sp, #0]
 80013fe:	2301      	movs	r3, #1
 8001400:	481e      	ldr	r0, [pc, #120]	@ (800147c <_ZN17AS5048A_interface4readEt+0xf0>)
 8001402:	f005 fa89 	bl	8006918 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2110      	movs	r1, #16
 800140a:	481b      	ldr	r0, [pc, #108]	@ (8001478 <_ZN17AS5048A_interface4readEt+0xec>)
 800140c:	f004 fd18 	bl	8005e40 <HAL_GPIO_WritePin>

	command = 0x0000;
 8001410:	2300      	movs	r3, #0
 8001412:	817b      	strh	r3, [r7, #10]
	//Now read the response (NO_OPERATION_COMMAND = 0x0000)
	//  uint16_t register_value = spi->transfer16(0x00);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2110      	movs	r1, #16
 8001418:	4817      	ldr	r0, [pc, #92]	@ (8001478 <_ZN17AS5048A_interface4readEt+0xec>)
 800141a:	f004 fd11 	bl	8005e40 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 800141e:	f107 020c 	add.w	r2, r7, #12
 8001422:	f107 010a 	add.w	r1, r7, #10
 8001426:	2364      	movs	r3, #100	@ 0x64
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2301      	movs	r3, #1
 800142c:	4813      	ldr	r0, [pc, #76]	@ (800147c <_ZN17AS5048A_interface4readEt+0xf0>)
 800142e:	f005 fa73 	bl	8006918 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	4810      	ldr	r0, [pc, #64]	@ (8001478 <_ZN17AS5048A_interface4readEt+0xec>)
 8001438:	f004 fd02 	bl	8005e40 <HAL_GPIO_WritePin>

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 800143c:	89bb      	ldrh	r3, [r7, #12]
 800143e:	4619      	mov	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	695b      	ldr	r3, [r3, #20]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	fa41 f303 	asr.w	r3, r1, r3
 8001450:	b29b      	uxth	r3, r3
 8001452:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f1c3 0310 	rsb	r3, r3, #16
 800145c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001460:	fa42 f303 	asr.w	r3, r2, r3
 8001464:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8001466:	89ba      	ldrh	r2, [r7, #12]
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	4013      	ands	r3, r2
 800146c:	b29b      	uxth	r3, r3
}
 800146e:	4618      	mov	r0, r3
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010800 	.word	0x40010800
 800147c:	200004fc 	.word	0x200004fc

08001480 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	b29b      	uxth	r3, r3
 800148e:	4619      	mov	r1, r3
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff7b 	bl	800138c <_ZN17AS5048A_interface4readEt>
 8001496:	4603      	mov	r3, r0
}
 8001498:	4618      	mov	r0, r3
 800149a:	3708      	adds	r7, #8
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ffe9 	bl	8001480 <_ZN17AS5048A_interface11getRawCountEv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fbf3 	bl	8000c9c <__aeabi_i2f>
 80014b6:	4602      	mov	r2, r0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4619      	mov	r1, r3
 80014be:	4610      	mov	r0, r2
 80014c0:	f7ff fcf4 	bl	8000eac <__aeabi_fdiv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4904      	ldr	r1, [pc, #16]	@ (80014d8 <_ZN17AS5048A_interface14getSensorAngleEv+0x38>)
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fc3b 	bl	8000d44 <__aeabi_fmul>
 80014ce:	4603      	mov	r3, r0
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3708      	adds	r7, #8
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40c90fdb 	.word	0x40c90fdb

080014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fbd7 	bl	8000c9c <__aeabi_i2f>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4908      	ldr	r1, [pc, #32]	@ (8001514 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x38>)
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff fc26 	bl	8000d44 <__aeabi_fmul>
 80014f8:	4603      	mov	r3, r0
 80014fa:	461a      	mov	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fb16 	bl	8000b34 <__addsf3>
 8001508:	4603      	mov	r3, r0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40c90fdb 	.word	0x40c90fdb

08001518 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69db      	ldr	r3, [r3, #28]
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	bc80      	pop	{r7}
 800152c:	4770      	bx	lr

0800152e <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 800152e:	b590      	push	{r4, r7, lr}
 8001530:	b083      	sub	sp, #12
 8001532:	af00      	add	r7, sp, #0
 8001534:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fbaa 	bl	8000c9c <__aeabi_i2f>
 8001548:	4604      	mov	r4, r0
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffe4 	bl	8001518 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8001550:	4603      	mov	r3, r0
 8001552:	4619      	mov	r1, r3
 8001554:	4620      	mov	r0, r4
 8001556:	f7ff fbf5 	bl	8000d44 <__aeabi_fmul>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001562:	4619      	mov	r1, r3
 8001564:	4610      	mov	r0, r2
 8001566:	f7ff fae3 	bl	8000b30 <__aeabi_fsub>
 800156a:	4603      	mov	r3, r0
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fbd9 	bl	8001d24 <_Z15_normalizeAnglef>
 8001572:	4603      	mov	r3, r0
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	0000      	movs	r0, r0
	...

08001580 <_ZN17AS5048A_interface17getSensorVelocityEv>:
 * @brief Get angular velocity from angular position
 * 
 * @return angular velocity [radians/second]
*/
float AS5048A_interface::getSensorVelocity() 
{
 8001580:	b590      	push	{r4, r7, lr}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = (angle_prev_ts - vel_angle_prev_ts) * 1e-6;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a1a      	ldr	r2, [r3, #32]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe ff36 	bl	8000404 <__aeabi_i2d>
 8001598:	a327      	add	r3, pc, #156	@ (adr r3, 8001638 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb8>)
 800159a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159e:	f7fe ff9b 	bl	80004d8 <__aeabi_dmul>
 80015a2:	4602      	mov	r2, r0
 80015a4:	460b      	mov	r3, r1
 80015a6:	4610      	mov	r0, r2
 80015a8:	4619      	mov	r1, r3
 80015aa:	f7ff fa6d 	bl	8000a88 <__aeabi_d2f>
 80015ae:	4603      	mov	r3, r0
 80015b0:	60fb      	str	r3, [r7, #12]
	// quick fix for strange cases (micros overflow)
	if (Ts <= 0)
 80015b2:	f04f 0100 	mov.w	r1, #0
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f7ff fd6c 	bl	8001094 <__aeabi_fcmple>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <_ZN17AS5048A_interface17getSensorVelocityEv+0x46>
		Ts = 1e-3f;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <_ZN17AS5048A_interface17getSensorVelocityEv+0xc0>)
 80015c4:	60fb      	str	r3, [r7, #12]
	// velocity calculation
	vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fb63 	bl	8000c9c <__aeabi_i2f>
 80015d6:	4603      	mov	r3, r0
 80015d8:	491a      	ldr	r1, [pc, #104]	@ (8001644 <_ZN17AS5048A_interface17getSensorVelocityEv+0xc4>)
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fbb2 	bl	8000d44 <__aeabi_fmul>
 80015e0:	4603      	mov	r3, r0
 80015e2:	461c      	mov	r4, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69da      	ldr	r2, [r3, #28]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	4610      	mov	r0, r2
 80015f0:	f7ff fa9e 	bl	8000b30 <__aeabi_fsub>
 80015f4:	4603      	mov	r3, r0
 80015f6:	4619      	mov	r1, r3
 80015f8:	4620      	mov	r0, r4
 80015fa:	f7ff fa9b 	bl	8000b34 <__addsf3>
 80015fe:	4603      	mov	r3, r0
 8001600:	68f9      	ldr	r1, [r7, #12]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fc52 	bl	8000eac <__aeabi_fdiv>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	62da      	str	r2, [r3, #44]	@ 0x2c
	// save variables for future pass
	vel_angle_prev = angle_prev;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	69da      	ldr	r2, [r3, #28]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	639a      	str	r2, [r3, #56]	@ 0x38
	vel_angle_prev_ts = angle_prev_ts;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a1a      	ldr	r2, [r3, #32]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	629a      	str	r2, [r3, #40]	@ 0x28
	return vel_prev;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	bd90      	pop	{r4, r7, pc}
 8001634:	f3af 8000 	nop.w
 8001638:	a0b5ed8d 	.word	0xa0b5ed8d
 800163c:	3eb0c6f7 	.word	0x3eb0c6f7
 8001640:	3a83126f 	.word	0x3a83126f
 8001644:	40c90fdb 	.word	0x40c90fdb

08001648 <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800164c:	4b06      	ldr	r3, [pc, #24]	@ (8001668 <_ZN17AS5048A_interface6microsEv+0x20>)
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4b06      	ldr	r3, [pc, #24]	@ (800166c <_ZN17AS5048A_interface6microsEv+0x24>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4906      	ldr	r1, [pc, #24]	@ (8001670 <_ZN17AS5048A_interface6microsEv+0x28>)
 8001656:	fba1 1303 	umull	r1, r3, r1, r3
 800165a:	0c9b      	lsrs	r3, r3, #18
 800165c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr
 8001668:	e0001000 	.word	0xe0001000
 800166c:	200000b4 	.word	0x200000b4
 8001670:	431bde83 	.word	0x431bde83

08001674 <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff0f 	bl	80014a0 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001682:	60f8      	str	r0, [r7, #12]
	angle_prev_ts = micros();
 8001684:	f7ff ffe0 	bl	8001648 <_ZN17AS5048A_interface6microsEv>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69db      	ldr	r3, [r3, #28]
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fa4a 	bl	8000b30 <__aeabi_fsub>
 800169c:	4603      	mov	r3, r0
 800169e:	60bb      	str	r3, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 80016a0:	68b8      	ldr	r0, [r7, #8]
 80016a2:	f7ff fd71 	bl	8001188 <_ZSt3absf>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2201      	movs	r2, #1
 80016aa:	4614      	mov	r4, r2
 80016ac:	4913      	ldr	r1, [pc, #76]	@ (80016fc <_ZN17AS5048A_interface12updateSensorEv+0x88>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff fd04 	bl	80010bc <__aeabi_fcmpgt>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <_ZN17AS5048A_interface12updateSensorEv+0x4a>
 80016ba:	2300      	movs	r3, #0
 80016bc:	461c      	mov	r4, r3
 80016be:	b2e3      	uxtb	r3, r4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d010      	beq.n	80016e6 <_ZN17AS5048A_interface12updateSensorEv+0x72>
		full_rotations += (d_angle > 0) ? -1 : 1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6b5c      	ldr	r4, [r3, #52]	@ 0x34
 80016c8:	f04f 0100 	mov.w	r1, #0
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f7ff fcf5 	bl	80010bc <__aeabi_fcmpgt>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d002      	beq.n	80016de <_ZN17AS5048A_interface12updateSensorEv+0x6a>
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
 80016dc:	e000      	b.n	80016e0 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 80016de:	2301      	movs	r3, #1
 80016e0:	191a      	adds	r2, r3, r4
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	635a      	str	r2, [r3, #52]	@ 0x34
	angle_prev = angle_current;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	61da      	str	r2, [r3, #28]

	getShaftVelocity();
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f000 f82e 	bl	800174e <_ZN17AS5048A_interface16getShaftVelocityEv>
}
 80016f2:	bf00      	nop
 80016f4:	3714      	adds	r7, #20
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40a0d97c 	.word	0x40a0d97c

08001700 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fac5 	bl	8000c9c <__aeabi_i2f>
 8001712:	4605      	mov	r5, r0
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff fede 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8001720:	4603      	mov	r3, r0
 8001722:	4619      	mov	r1, r3
 8001724:	4620      	mov	r0, r4
 8001726:	f000 fb5b 	bl	8001de0 <_ZN13LowPassFilterclEf>
 800172a:	4603      	mov	r3, r0
 800172c:	4619      	mov	r1, r3
 800172e:	4628      	mov	r0, r5
 8001730:	f7ff fb08 	bl	8000d44 <__aeabi_fmul>
 8001734:	4603      	mov	r3, r0
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff f9f6 	bl	8000b30 <__aeabi_fsub>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bdb0      	pop	{r4, r5, r7, pc}

0800174e <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 800174e:	b5b0      	push	{r4, r5, r7, lr}
 8001750:	b082      	sub	sp, #8
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
	vel_prev_LPF = sensor_direction * LPF_velocity(getSensorVelocity());
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fa9e 	bl	8000c9c <__aeabi_i2f>
 8001760:	4605      	mov	r5, r0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7ff ff09 	bl	8001580 <_ZN17AS5048A_interface17getSensorVelocityEv>
 800176e:	4603      	mov	r3, r0
 8001770:	4619      	mov	r1, r3
 8001772:	4620      	mov	r0, r4
 8001774:	f000 fb34 	bl	8001de0 <_ZN13LowPassFilterclEf>
 8001778:	4603      	mov	r3, r0
 800177a:	4619      	mov	r1, r3
 800177c:	4628      	mov	r0, r5
 800177e:	f7ff fae1 	bl	8000d44 <__aeabi_fmul>
 8001782:	4603      	mov	r3, r0
 8001784:	461a      	mov	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	631a      	str	r2, [r3, #48]	@ 0x30
	return vel_prev_LPF;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bdb0      	pop	{r4, r5, r7, pc}

08001796 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001796:	b5b0      	push	{r4, r5, r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	6078      	str	r0, [r7, #4]
 800179e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80017a0:	6878      	ldr	r0, [r7, #4]
 80017a2:	f7fe fe2f 	bl	8000404 <__aeabi_i2d>
 80017a6:	4604      	mov	r4, r0
 80017a8:	460d      	mov	r5, r1
 80017aa:	6838      	ldr	r0, [r7, #0]
 80017ac:	f7fe fe2a 	bl	8000404 <__aeabi_i2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f006 f9f6 	bl	8007ba8 <pow>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
    }
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017cc <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32f1xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4a07      	ldr	r2, [pc, #28]	@ (80017f4 <_ZN12CurrentSenseC1Ev+0x28>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2203      	movs	r2, #3
 80017de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	641a      	str	r2, [r3, #64]	@ 0x40
{
	
}
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	0800b820 	.word	0x0800b820

080017f8 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <_ZN12CurrentSenseD1Ev+0x1c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	0800b820 	.word	0x0800b820

08001818 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
}
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ffe9 	bl	80017f8 <_ZN12CurrentSenseD1Ev>
 8001826:	2148      	movs	r1, #72	@ 0x48
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f006 f9b9 	bl	8007ba0 <_ZdlPvj>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4618      	mov	r0, r3
 8001832:	3708      	adds	r7, #8
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA, 3);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	3330      	adds	r3, #48	@ 0x30
 8001848:	2203      	movs	r2, #3
 800184a:	4619      	mov	r1, r3
 800184c:	4809      	ldr	r0, [pc, #36]	@ (8001874 <_ZN12CurrentSense16initCurrentsenseEff+0x3c>)
 800184e:	f002 fe17 	bl	8004480 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_a = _gain;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	621a      	str	r2, [r3, #32]
	gain_b = _gain;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	625a      	str	r2, [r3, #36]	@ 0x24
	gain_c = _gain;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000460 	.word	0x20000460

08001878 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001878:	b5b0      	push	{r4, r5, r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001880:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001884:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 8001886:	6879      	ldr	r1, [r7, #4]
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = 0;
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = 0;
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
 80018b4:	e03e      	b.n	8001934 <_ZN12CurrentSense16calibrateOffsetsEv+0xbc>
	{
		offset_ia += adcResultDMA[0];
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fd8f 	bl	80003e4 <__aeabi_ui2d>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	f7fe fc4d 	bl	800016c <__adddf3>
 80018d2:	4602      	mov	r2, r0
 80018d4:	460b      	mov	r3, r1
 80018d6:	6879      	ldr	r1, [r7, #4]
 80018d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_ib += adcResultDMA[1];
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fd7c 	bl	80003e4 <__aeabi_ui2d>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fc3a 	bl	800016c <__adddf3>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	6879      	ldr	r1, [r7, #4]
 80018fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_ic += adcResultDMA[2];
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800190c:	4618      	mov	r0, r3
 800190e:	f7fe fd69 	bl	80003e4 <__aeabi_ui2d>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4620      	mov	r0, r4
 8001918:	4629      	mov	r1, r5
 800191a:	f7fe fc27 	bl	800016c <__adddf3>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	e9c1 2306 	strd	r2, r3, [r1, #24]
		HAL_Delay(1);
 8001928:	2001      	movs	r0, #1
 800192a:	f002 fcad 	bl	8004288 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3301      	adds	r3, #1
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800193a:	dbbc      	blt.n	80018b6 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b13      	ldr	r3, [pc, #76]	@ (8001994 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 8001948:	f7fe fef0 	bl	800072c <__aeabi_ddiv>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = offset_ib / calibration_rounds;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	4b0c      	ldr	r3, [pc, #48]	@ (8001994 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 8001962:	f7fe fee3 	bl	800072c <__aeabi_ddiv>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = offset_ic / calibration_rounds;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 800197c:	f7fe fed6 	bl	800072c <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 800198a:	bf00      	nop
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bdb0      	pop	{r4, r5, r7, pc}
 8001992:	bf00      	nop
 8001994:	408f4000 	.word	0x408f4000

08001998 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	struct PhaseCurrent_s current;
	current.a = ((3.3 / 2) - (adcResultDMA[0] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_a);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fd1c 	bl	80003e4 <__aeabi_ui2d>
 80019ac:	a348      	add	r3, pc, #288	@ (adr r3, 8001ad0 <_ZN12CurrentSense16getPhaseCurrentsEv+0x138>)
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f7fe fd91 	bl	80004d8 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	a147      	add	r1, pc, #284	@ (adr r1, 8001ad8 <_ZN12CurrentSense16getPhaseCurrentsEv+0x140>)
 80019bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019c0:	f7fe fbd2 	bl	8000168 <__aeabi_dsub>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4614      	mov	r4, r2
 80019ca:	461d      	mov	r5, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4619      	mov	r1, r3
 80019d6:	4610      	mov	r0, r2
 80019d8:	f7ff f9b4 	bl	8000d44 <__aeabi_fmul>
 80019dc:	4603      	mov	r3, r0
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd22 	bl	8000428 <__aeabi_f2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7fe fe9e 	bl	800072c <__aeabi_ddiv>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7ff f846 	bl	8000a88 <__aeabi_d2f>
 80019fc:	4602      	mov	r2, r0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	601a      	str	r2, [r3, #0]
	current.b = ((3.3 / 2) - (adcResultDMA[1] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_b);
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fcec 	bl	80003e4 <__aeabi_ui2d>
 8001a0c:	a330      	add	r3, pc, #192	@ (adr r3, 8001ad0 <_ZN12CurrentSense16getPhaseCurrentsEv+0x138>)
 8001a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a12:	f7fe fd61 	bl	80004d8 <__aeabi_dmul>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	a12f      	add	r1, pc, #188	@ (adr r1, 8001ad8 <_ZN12CurrentSense16getPhaseCurrentsEv+0x140>)
 8001a1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a20:	f7fe fba2 	bl	8000168 <__aeabi_dsub>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4614      	mov	r4, r2
 8001a2a:	461d      	mov	r5, r3
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4610      	mov	r0, r2
 8001a38:	f7ff f984 	bl	8000d44 <__aeabi_fmul>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fcf2 	bl	8000428 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4620      	mov	r0, r4
 8001a4a:	4629      	mov	r1, r5
 8001a4c:	f7fe fe6e 	bl	800072c <__aeabi_ddiv>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7ff f816 	bl	8000a88 <__aeabi_d2f>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	605a      	str	r2, [r3, #4]
	current.c = ((3.3 / 2) - (adcResultDMA[2] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0))) / (R_sense * gain_c);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fcbc 	bl	80003e4 <__aeabi_ui2d>
 8001a6c:	a318      	add	r3, pc, #96	@ (adr r3, 8001ad0 <_ZN12CurrentSense16getPhaseCurrentsEv+0x138>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	f7fe fd31 	bl	80004d8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	a117      	add	r1, pc, #92	@ (adr r1, 8001ad8 <_ZN12CurrentSense16getPhaseCurrentsEv+0x140>)
 8001a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a80:	f7fe fb72 	bl	8000168 <__aeabi_dsub>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	4619      	mov	r1, r3
 8001a96:	4610      	mov	r0, r2
 8001a98:	f7ff f954 	bl	8000d44 <__aeabi_fmul>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcc2 	bl	8000428 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	4620      	mov	r0, r4
 8001aaa:	4629      	mov	r1, r5
 8001aac:	f7fe fe3e 	bl	800072c <__aeabi_ddiv>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	f7fe ffe6 	bl	8000a88 <__aeabi_d2f>
 8001abc:	4602      	mov	r2, r0
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]
//    current.b = - current.a  - current.c; // --(1)
	return current;
 8001ac2:	bf00      	nop
}
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	3708      	adds	r7, #8
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bdb0      	pop	{r4, r5, r7, pc}
 8001acc:	f3af 8000 	nop.w
 8001ad0:	9f0d96a7 	.word	0x9f0d96a7
 8001ad4:	3f4a691c 	.word	0x3f4a691c
 8001ad8:	66666666 	.word	0x66666666
 8001adc:	3ffa6666 	.word	0x3ffa6666

08001ae0 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001ae0:	b590      	push	{r4, r7, lr}
 8001ae2:	b08f      	sub	sp, #60	@ 0x3c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
	// read current phase currents
	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001aec:	f107 0310 	add.w	r3, r7, #16
 8001af0:	68b9      	ldr	r1, [r7, #8]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff50 	bl	8001998 <_ZN12CurrentSense16getPhaseCurrentsEv>

	// calculate clarke transform
	float i_alpha, i_beta;

    // signal filtering using identity a + b + c = 0. Assumes measurement error is normally distributed.
    float mid = (1.f/3) * (current.a + current.b + current.c);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	697a      	ldr	r2, [r7, #20]
 8001afc:	4611      	mov	r1, r2
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff f818 	bl	8000b34 <__addsf3>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f7ff f811 	bl	8000b34 <__addsf3>
 8001b12:	4603      	mov	r3, r0
 8001b14:	492c      	ldr	r1, [pc, #176]	@ (8001bc8 <_ZN12CurrentSense14getFOCCurrentsEf+0xe8>)
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f914 	bl	8000d44 <__aeabi_fmul>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	637b      	str	r3, [r7, #52]	@ 0x34
    float a = current.a - mid;
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff f803 	bl	8000b30 <__aeabi_fsub>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    float b = current.b - mid;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fffc 	bl	8000b30 <__aeabi_fsub>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    i_alpha = a;
 8001b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
 8001b40:	4922      	ldr	r1, [pc, #136]	@ (8001bcc <_ZN12CurrentSense14getFOCCurrentsEf+0xec>)
 8001b42:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001b44:	f7ff f8fe 	bl	8000d44 <__aeabi_fmul>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	461c      	mov	r4, r3
 8001b4c:	4920      	ldr	r1, [pc, #128]	@ (8001bd0 <_ZN12CurrentSense14getFOCCurrentsEf+0xf0>)
 8001b4e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001b50:	f7ff f8f8 	bl	8000d44 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7fe ffeb 	bl	8000b34 <__addsf3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24


	// calculate park transform
	float ct = _cos(angle_el);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f8b8 	bl	8001cd8 <_Z4_cosf>
 8001b68:	6238      	str	r0, [r7, #32]
	float st = _sin(angle_el);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f840 	bl	8001bf0 <_Z4_sinf>
 8001b70:	61f8      	str	r0, [r7, #28]
	struct DQCurrent_s dq_current;
	dq_current.d = i_alpha * ct + i_beta  * st;
 8001b72:	6a39      	ldr	r1, [r7, #32]
 8001b74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001b76:	f7ff f8e5 	bl	8000d44 <__aeabi_fmul>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	461c      	mov	r4, r3
 8001b7e:	69f9      	ldr	r1, [r7, #28]
 8001b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b82:	f7ff f8df 	bl	8000d44 <__aeabi_fmul>
 8001b86:	4603      	mov	r3, r0
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f7fe ffd2 	bl	8000b34 <__addsf3>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	601a      	str	r2, [r3, #0]
	dq_current.q = i_beta  * ct - i_alpha * st;
 8001b98:	6a39      	ldr	r1, [r7, #32]
 8001b9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b9c:	f7ff f8d2 	bl	8000d44 <__aeabi_fmul>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461c      	mov	r4, r3
 8001ba4:	69f9      	ldr	r1, [r7, #28]
 8001ba6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001ba8:	f7ff f8cc 	bl	8000d44 <__aeabi_fmul>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4620      	mov	r0, r4
 8001bb2:	f7fe ffbd 	bl	8000b30 <__aeabi_fsub>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461a      	mov	r2, r3
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	605a      	str	r2, [r3, #4]
	return dq_current;
 8001bbe:	bf00      	nop
}
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	373c      	adds	r7, #60	@ 0x3c
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd90      	pop	{r4, r7, pc}
 8001bc8:	3eaaaaab 	.word	0x3eaaaaab
 8001bcc:	3f13cd3a 	.word	0x3f13cd3a
 8001bd0:	3f93cd3a 	.word	0x3f93cd3a

08001bd4 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
 8001bde:	6839      	ldr	r1, [r7, #0]
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f006 f84b 	bl	8007c7c <fmodf>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b086      	sub	sp, #24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8001bf8:	4935      	ldr	r1, [pc, #212]	@ (8001cd0 <_Z4_sinf+0xe0>)
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff f8a2 	bl	8000d44 <__aeabi_fmul>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff faa0 	bl	8001148 <__aeabi_f2uiz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c1e:	d80b      	bhi.n	8001c38 <_Z4_sinf+0x48>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 8001c20:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a29      	ldr	r2, [pc, #164]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	e033      	b.n	8001ca0 <_Z4_sinf+0xb0>
  }
  else if(i < 128) {
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c3c:	d80e      	bhi.n	8001c5c <_Z4_sinf+0x6c>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001c44:	4a23      	ldr	r2, [pc, #140]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001c52:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c58:	613b      	str	r3, [r7, #16]
 8001c5a:	e021      	b.n	8001ca0 <_Z4_sinf+0xb0>
  }
  else if(i < 192) {
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2bbf      	cmp	r3, #191	@ 0xbf
 8001c60:	d80e      	bhi.n	8001c80 <_Z4_sinf+0x90>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	3b80      	subs	r3, #128	@ 0x80
 8001c66:	4a1b      	ldr	r2, [pc, #108]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c6c:	425b      	negs	r3, r3
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	3b7f      	subs	r3, #127	@ 0x7f
 8001c74:	4a17      	ldr	r2, [pc, #92]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	613b      	str	r3, [r7, #16]
 8001c7e:	e00f      	b.n	8001ca0 <_Z4_sinf+0xb0>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001c86:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c8c:	425b      	negs	r3, r3
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001c96:	4a0f      	ldr	r2, [pc, #60]	@ (8001cd4 <_Z4_sinf+0xe4>)
 8001c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001c9c:	425b      	negs	r3, r3
 8001c9e:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	68ba      	ldr	r2, [r7, #8]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	121a      	asrs	r2, r3, #8
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fff2 	bl	8000c9c <__aeabi_i2f>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f04f 5160 	mov.w	r1, #939524096	@ 0x38000000
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f840 	bl	8000d44 <__aeabi_fmul>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	4622f983 	.word	0x4622f983
 8001cd4:	20000014 	.word	0x20000014

08001cd8 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  float a_sin = a + _PI_2;
 8001ce0:	490e      	ldr	r1, [pc, #56]	@ (8001d1c <_Z4_cosf+0x44>)
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7fe ff26 	bl	8000b34 <__addsf3>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	60fb      	str	r3, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8001cec:	490c      	ldr	r1, [pc, #48]	@ (8001d20 <_Z4_cosf+0x48>)
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f7ff f9e4 	bl	80010bc <__aeabi_fcmpgt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <_Z4_cosf+0x2e>
 8001cfa:	4909      	ldr	r1, [pc, #36]	@ (8001d20 <_Z4_cosf+0x48>)
 8001cfc:	68f8      	ldr	r0, [r7, #12]
 8001cfe:	f7fe ff17 	bl	8000b30 <__aeabi_fsub>
 8001d02:	4603      	mov	r3, r0
 8001d04:	e000      	b.n	8001d08 <_Z4_cosf+0x30>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	60fb      	str	r3, [r7, #12]
  return _sin(a_sin);
 8001d0a:	68f8      	ldr	r0, [r7, #12]
 8001d0c:	f7ff ff70 	bl	8001bf0 <_Z4_sinf>
 8001d10:	4603      	mov	r3, r0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	3fc90fdb 	.word	0x3fc90fdb
 8001d20:	40c90fdb 	.word	0x40c90fdb

08001d24 <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  float a = fmod(angle, _2PI);
 8001d2c:	490b      	ldr	r1, [pc, #44]	@ (8001d5c <_Z15_normalizeAnglef+0x38>)
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f7ff ff50 	bl	8001bd4 <_ZSt4fmodff>
 8001d34:	60f8      	str	r0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f7ff f9b4 	bl	80010a8 <__aeabi_fcmpge>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_Z15_normalizeAnglef+0x26>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	e004      	b.n	8001d54 <_Z15_normalizeAnglef+0x30>
 8001d4a:	4904      	ldr	r1, [pc, #16]	@ (8001d5c <_Z15_normalizeAnglef+0x38>)
 8001d4c:	68f8      	ldr	r0, [r7, #12]
 8001d4e:	f7fe fef1 	bl	8000b34 <__addsf3>
 8001d52:	4603      	mov	r3, r0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40c90fdb 	.word	0x40c90fdb

08001d60 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  return (shaft_angle * pole_pairs);
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f7fe ff96 	bl	8000c9c <__aeabi_i2f>
 8001d70:	4603      	mov	r3, r0
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7fe ffe5 	bl	8000d44 <__aeabi_fmul>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	085a      	lsrs	r2, r3, #1
 8001d94:	4b06      	ldr	r3, [pc, #24]	@ (8001db0 <_Z11_sqrtApproxf+0x2c>)
 8001d96:	1a9b      	subs	r3, r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe ffd0 	bl	8000d44 <__aeabi_fmul>
 8001da4:	4603      	mov	r3, r0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	5f375a86 	.word	0x5f375a86

08001db4 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32f1xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    : Tf(time_constant)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	683a      	ldr	r2, [r7, #0]
 8001dc2:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 8001dcc:	f000 f872 	bl	8001eb4 <_ZN13LowPassFilter6microsEv>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	605a      	str	r2, [r3, #4]
}
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
    unsigned long timestamp = micros();
 8001dea:	f000 f863 	bl	8001eb4 <_ZN13LowPassFilter6microsEv>
 8001dee:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ff4b 	bl	8000c94 <__aeabi_ui2f>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4929      	ldr	r1, [pc, #164]	@ (8001ea8 <_ZN13LowPassFilterclEf+0xc8>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7fe ff9e 	bl	8000d44 <__aeabi_fmul>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	617b      	str	r3, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8001e0c:	f04f 0100 	mov.w	r1, #0
 8001e10:	6978      	ldr	r0, [r7, #20]
 8001e12:	f7ff f935 	bl	8001080 <__aeabi_fcmplt>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <_ZN13LowPassFilterclEf+0x42>
 8001e1c:	4b23      	ldr	r3, [pc, #140]	@ (8001eac <_ZN13LowPassFilterclEf+0xcc>)
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e00e      	b.n	8001e40 <_ZN13LowPassFilterclEf+0x60>
    else if(dt > 0.3f) {
 8001e22:	4923      	ldr	r1, [pc, #140]	@ (8001eb0 <_ZN13LowPassFilterclEf+0xd0>)
 8001e24:	6978      	ldr	r0, [r7, #20]
 8001e26:	f7ff f949 	bl	80010bc <__aeabi_fcmpgt>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d007      	beq.n	8001e40 <_ZN13LowPassFilterclEf+0x60>
        y_prev = x;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	605a      	str	r2, [r3, #4]
        return x;
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	e02e      	b.n	8001e9e <_ZN13LowPassFilterclEf+0xbe>
    }

    float alpha = Tf/(Tf + dt);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681c      	ldr	r4, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6979      	ldr	r1, [r7, #20]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fe72 	bl	8000b34 <__addsf3>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4619      	mov	r1, r3
 8001e54:	4620      	mov	r0, r4
 8001e56:	f7ff f829 	bl	8000eac <__aeabi_fdiv>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	60fb      	str	r3, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe ff6d 	bl	8000d44 <__aeabi_fmul>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	461c      	mov	r4, r3
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 8001e74:	f7fe fe5c 	bl	8000b30 <__aeabi_fsub>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	6839      	ldr	r1, [r7, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe ff61 	bl	8000d44 <__aeabi_fmul>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4619      	mov	r1, r3
 8001e86:	4620      	mov	r0, r4
 8001e88:	f7fe fe54 	bl	8000b34 <__addsf3>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60bb      	str	r3, [r7, #8]
    y_prev = y;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	68ba      	ldr	r2, [r7, #8]
 8001e94:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	693a      	ldr	r2, [r7, #16]
 8001e9a:	605a      	str	r2, [r3, #4]
    return y;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	371c      	adds	r7, #28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd90      	pop	{r4, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	358637bd 	.word	0x358637bd
 8001eac:	3a83126f 	.word	0x3a83126f
 8001eb0:	3e99999a 	.word	0x3e99999a

08001eb4 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <_ZN13LowPassFilter6microsEv+0x20>)
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4b06      	ldr	r3, [pc, #24]	@ (8001ed8 <_ZN13LowPassFilter6microsEv+0x24>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4906      	ldr	r1, [pc, #24]	@ (8001edc <_ZN13LowPassFilter6microsEv+0x28>)
 8001ec2:	fba1 1303 	umull	r1, r3, r1, r3
 8001ec6:	0c9b      	lsrs	r3, r3, #18
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bc80      	pop	{r7}
 8001ed2:	4770      	bx	lr
 8001ed4:	e0001000 	.word	0xe0001000
 8001ed8:	200000b4 	.word	0x200000b4
 8001edc:	431bde83 	.word	0x431bde83

08001ee0 <_Z41__static_initialization_and_destruction_0ii>:
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
	PIDController PID_velocity  {0.5, 55.0, 0.0, 1000.0, current_limit};
	PIDController PID_position  {20.0, 0.0, 1.0, 0, velocity_limit};

	LowPassFilter LPF_current_q	{0.001};
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d143      	bne.n	8001f78 <_Z41__static_initialization_and_destruction_0ii+0x98>
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d13e      	bne.n	8001f78 <_Z41__static_initialization_and_destruction_0ii+0x98>
	PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f10:	481d      	ldr	r0, [pc, #116]	@ (8001f88 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001f12:	f000 f857 	bl	8001fc4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8001f16:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	9301      	str	r3, [sp, #4]
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	f04f 0200 	mov.w	r2, #0
 8001f28:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001f2c:	4817      	ldr	r0, [pc, #92]	@ (8001f8c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001f2e:	f000 f849 	bl	8001fc4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_velocity  {0.5, 55.0, 0.0, 1000.0, current_limit};
 8001f32:	4b17      	ldr	r3, [pc, #92]	@ (8001f90 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	4b12      	ldr	r3, [pc, #72]	@ (8001f84 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	4a14      	ldr	r2, [pc, #80]	@ (8001f94 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001f42:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001f46:	4814      	ldr	r0, [pc, #80]	@ (8001f98 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001f48:	f000 f83c 	bl	8001fc4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_position  {20.0, 0.0, 1.0, 0, velocity_limit};
 8001f4c:	4b13      	ldr	r3, [pc, #76]	@ (8001f9c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	f04f 0300 	mov.w	r3, #0
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	490f      	ldr	r1, [pc, #60]	@ (8001fa0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8001f62:	4810      	ldr	r0, [pc, #64]	@ (8001fa4 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001f64:	f000 f82e 	bl	8001fc4 <_ZN13PIDControllerC1Efffff>
	LowPassFilter LPF_current_q	{0.001};
 8001f68:	490f      	ldr	r1, [pc, #60]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001f6a:	4810      	ldr	r0, [pc, #64]	@ (8001fac <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001f6c:	f7ff ff22 	bl	8001db4 <_ZN13LowPassFilterC1Ef>
 8001f70:	490d      	ldr	r1, [pc, #52]	@ (8001fa8 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001f72:	480f      	ldr	r0, [pc, #60]	@ (8001fb0 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001f74:	f7ff ff1e 	bl	8001db4 <_ZN13LowPassFilterC1Ef>
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	200000a4 	.word	0x200000a4
 8001f84:	447a0000 	.word	0x447a0000
 8001f88:	200002b4 	.word	0x200002b4
 8001f8c:	200002d8 	.word	0x200002d8
 8001f90:	200000a8 	.word	0x200000a8
 8001f94:	425c0000 	.word	0x425c0000
 8001f98:	200002fc 	.word	0x200002fc
 8001f9c:	200000ac 	.word	0x200000ac
 8001fa0:	41a00000 	.word	0x41a00000
 8001fa4:	20000320 	.word	0x20000320
 8001fa8:	3a83126f 	.word	0x3a83126f
 8001fac:	20000344 	.word	0x20000344
 8001fb0:	20000350 	.word	0x20000350

08001fb4 <_GLOBAL__sub_I_phase_resistance>:
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7ff ff8f 	bl	8001ee0 <_Z41__static_initialization_and_destruction_0ii>
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32f1xx_hal.h"  // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
    : P(P)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	601a      	str	r2, [r3, #0]
    , I(I)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	605a      	str	r2, [r3, #4]
    , D(D)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f04f 0200 	mov.w	r2, #0
 8001ff6:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f04f 0200 	mov.w	r2, #0
 8002006:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002008:	f000 f914 	bl	8002234 <_ZN13PIDController6microsEv>
 800200c:	4602      	mov	r2, r0
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	621a      	str	r2, [r3, #32]
}
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	3710      	adds	r7, #16
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 800201c:	b5b0      	push	{r4, r5, r7, lr}
 800201e:	b08a      	sub	sp, #40	@ 0x28
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002026:	f000 f905 	bl	8002234 <_ZN13PIDController6microsEv>
 800202a:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	69fa      	ldr	r2, [r7, #28]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe fe2d 	bl	8000c94 <__aeabi_ui2f>
 800203a:	4603      	mov	r3, r0
 800203c:	497b      	ldr	r1, [pc, #492]	@ (800222c <_ZN13PIDControllerclEf+0x210>)
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fe80 	bl	8000d44 <__aeabi_fmul>
 8002044:	4603      	mov	r3, r0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002048:	f04f 0100 	mov.w	r1, #0
 800204c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800204e:	f7ff f821 	bl	8001094 <__aeabi_fcmple>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d107      	bne.n	8002068 <_ZN13PIDControllerclEf+0x4c>
 8002058:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800205c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800205e:	f7ff f82d 	bl	80010bc <__aeabi_fcmpgt>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <_ZN13PIDControllerclEf+0x50>
 8002068:	4b71      	ldr	r3, [pc, #452]	@ (8002230 <_ZN13PIDControllerclEf+0x214>)
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4619      	mov	r1, r3
 8002072:	6838      	ldr	r0, [r7, #0]
 8002074:	f7fe fe66 	bl	8000d44 <__aeabi_fmul>
 8002078:	4603      	mov	r3, r0
 800207a:	61bb      	str	r3, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69dc      	ldr	r4, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe5c 	bl	8000d44 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe fe56 	bl	8000d44 <__aeabi_fmul>
 8002098:	4603      	mov	r3, r0
 800209a:	461d      	mov	r5, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	695b      	ldr	r3, [r3, #20]
 80020a0:	6839      	ldr	r1, [r7, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fd46 	bl	8000b34 <__addsf3>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4619      	mov	r1, r3
 80020ac:	4628      	mov	r0, r5
 80020ae:	f7fe fe49 	bl	8000d44 <__aeabi_fmul>
 80020b2:	4603      	mov	r3, r0
 80020b4:	4619      	mov	r1, r3
 80020b6:	4620      	mov	r0, r4
 80020b8:	f7fe fd3c 	bl	8000b34 <__addsf3>
 80020bc:	4603      	mov	r3, r0
 80020be:	617b      	str	r3, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020c8:	4619      	mov	r1, r3
 80020ca:	6978      	ldr	r0, [r7, #20]
 80020cc:	f7fe ffd8 	bl	8001080 <__aeabi_fcmplt>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d004      	beq.n	80020e0 <_ZN13PIDControllerclEf+0xc4>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020de:	e00c      	b.n	80020fa <_ZN13PIDControllerclEf+0xde>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6978      	ldr	r0, [r7, #20]
 80020e8:	f7fe ffe8 	bl	80010bc <__aeabi_fcmpgt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d002      	beq.n	80020f8 <_ZN13PIDControllerclEf+0xdc>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	e000      	b.n	80020fa <_ZN13PIDControllerclEf+0xde>
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	617b      	str	r3, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689c      	ldr	r4, [r3, #8]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	4619      	mov	r1, r3
 8002106:	6838      	ldr	r0, [r7, #0]
 8002108:	f7fe fd12 	bl	8000b30 <__aeabi_fsub>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	4620      	mov	r0, r4
 8002112:	f7fe fe17 	bl	8000d44 <__aeabi_fmul>
 8002116:	4603      	mov	r3, r0
 8002118:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fec6 	bl	8000eac <__aeabi_fdiv>
 8002120:	4603      	mov	r3, r0
 8002122:	613b      	str	r3, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002124:	6979      	ldr	r1, [r7, #20]
 8002126:	69b8      	ldr	r0, [r7, #24]
 8002128:	f7fe fd04 	bl	8000b34 <__addsf3>
 800212c:	4603      	mov	r3, r0
 800212e:	4619      	mov	r1, r3
 8002130:	6938      	ldr	r0, [r7, #16]
 8002132:	f7fe fcff 	bl	8000b34 <__addsf3>
 8002136:	4603      	mov	r3, r0
 8002138:	623b      	str	r3, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002142:	4619      	mov	r1, r3
 8002144:	6a38      	ldr	r0, [r7, #32]
 8002146:	f7fe ff9b 	bl	8001080 <__aeabi_fcmplt>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d004      	beq.n	800215a <_ZN13PIDControllerclEf+0x13e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
 8002154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002158:	e00c      	b.n	8002174 <_ZN13PIDControllerclEf+0x158>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	4619      	mov	r1, r3
 8002160:	6a38      	ldr	r0, [r7, #32]
 8002162:	f7fe ffab 	bl	80010bc <__aeabi_fcmpgt>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d002      	beq.n	8002172 <_ZN13PIDControllerclEf+0x156>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	e000      	b.n	8002174 <_ZN13PIDControllerclEf+0x158>
 8002172:	6a3b      	ldr	r3, [r7, #32]
 8002174:	623b      	str	r3, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	f04f 0100 	mov.w	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe ff9c 	bl	80010bc <__aeabi_fcmpgt>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d03f      	beq.n	800220a <_ZN13PIDControllerclEf+0x1ee>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	4619      	mov	r1, r3
 8002190:	6a38      	ldr	r0, [r7, #32]
 8002192:	f7fe fccd 	bl	8000b30 <__aeabi_fsub>
 8002196:	4603      	mov	r3, r0
 8002198:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe fe86 	bl	8000eac <__aeabi_fdiv>
 80021a0:	4603      	mov	r3, r0
 80021a2:	60fb      	str	r3, [r7, #12]
        if (output_rate > output_ramp)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	4619      	mov	r1, r3
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f7fe ff86 	bl	80010bc <__aeabi_fcmpgt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d00f      	beq.n	80021d6 <_ZN13PIDControllerclEf+0x1ba>
            output = output_prev + output_ramp*Ts;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699c      	ldr	r4, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fdbf 	bl	8000d44 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4619      	mov	r1, r3
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7fe fcb2 	bl	8000b34 <__addsf3>
 80021d0:	4603      	mov	r3, r0
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	e019      	b.n	800220a <_ZN13PIDControllerclEf+0x1ee>
        else if (output_rate < -output_ramp)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80021de:	4619      	mov	r1, r3
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f7fe ff4d 	bl	8001080 <__aeabi_fcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00e      	beq.n	800220a <_ZN13PIDControllerclEf+0x1ee>
            output = output_prev - output_ramp*Ts;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699c      	ldr	r4, [r3, #24]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fe fda4 	bl	8000d44 <__aeabi_fmul>
 80021fc:	4603      	mov	r3, r0
 80021fe:	4619      	mov	r1, r3
 8002200:	4620      	mov	r0, r4
 8002202:	f7fe fc95 	bl	8000b30 <__aeabi_fsub>
 8002206:	4603      	mov	r3, r0
 8002208:	623b      	str	r3, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	697a      	ldr	r2, [r7, #20]
 800220e:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a3a      	ldr	r2, [r7, #32]
 8002214:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	69fa      	ldr	r2, [r7, #28]
 8002220:	621a      	str	r2, [r3, #32]
    return output;
 8002222:	6a3b      	ldr	r3, [r7, #32]
}
 8002224:	4618      	mov	r0, r3
 8002226:	3728      	adds	r7, #40	@ 0x28
 8002228:	46bd      	mov	sp, r7
 800222a:	bdb0      	pop	{r4, r5, r7, pc}
 800222c:	358637bd 	.word	0x358637bd
 8002230:	3a83126f 	.word	0x3a83126f

08002234 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002238:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <_ZN13PIDController6microsEv+0x20>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4b06      	ldr	r3, [pc, #24]	@ (8002258 <_ZN13PIDController6microsEv+0x24>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4906      	ldr	r1, [pc, #24]	@ (800225c <_ZN13PIDController6microsEv+0x28>)
 8002242:	fba1 1303 	umull	r1, r3, r1, r3
 8002246:	0c9b      	lsrs	r3, r3, #18
 8002248:	fbb2 f3f3 	udiv	r3, r2, r3
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	e0001000 	.word	0xe0001000
 8002258:	200000b4 	.word	0x200000b4
 800225c:	431bde83 	.word	0x431bde83

08002260 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	6839      	ldr	r1, [r7, #0]
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f005 fd03 	bl	8007c78 <atan2f>
 8002272:	4603      	mov	r3, r0
 8002274:	4618      	mov	r0, r3
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f005 fd1b 	bl	8007cc0 <floorf>
 800228a:	4603      	mov	r3, r0
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32f1xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	4a04      	ldr	r2, [pc, #16]	@ (80022b0 <_ZN11pwm_driversC1Ev+0x1c>)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bc80      	pop	{r7}
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	0800b830 	.word	0x0800b830

080022b4 <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4a04      	ldr	r2, [pc, #16]	@ (80022d0 <_ZN11pwm_driversD1Ev+0x1c>)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	0800b830 	.word	0x0800b830

080022d4 <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
}
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f7ff ffe9 	bl	80022b4 <_ZN11pwm_driversD1Ev>
 80022e2:	2110      	movs	r1, #16
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f005 fc5b 	bl	8007ba0 <_ZdlPvj>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:


//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 80022f4:	b590      	push	{r4, r7, lr}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	603b      	str	r3, [r7, #0]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ARR_MAX_CA*dc_a);
 8002302:	4915      	ldr	r1, [pc, #84]	@ (8002358 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x64>)
 8002304:	68b8      	ldr	r0, [r7, #8]
 8002306:	f7fe fd1d 	bl	8000d44 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b13      	ldr	r3, [pc, #76]	@ (800235c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x68>)
 8002310:	681c      	ldr	r4, [r3, #0]
 8002312:	4610      	mov	r0, r2
 8002314:	f7fe ff18 	bl	8001148 <__aeabi_f2uiz>
 8002318:	4603      	mov	r3, r0
 800231a:	6363      	str	r3, [r4, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ARR_MAX_CA*dc_b);
 800231c:	490e      	ldr	r1, [pc, #56]	@ (8002358 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x64>)
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fd10 	bl	8000d44 <__aeabi_fmul>
 8002324:	4603      	mov	r3, r0
 8002326:	461a      	mov	r2, r3
 8002328:	4b0c      	ldr	r3, [pc, #48]	@ (800235c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x68>)
 800232a:	681c      	ldr	r4, [r3, #0]
 800232c:	4610      	mov	r0, r2
 800232e:	f7fe ff0b 	bl	8001148 <__aeabi_f2uiz>
 8002332:	4603      	mov	r3, r0
 8002334:	63a3      	str	r3, [r4, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ARR_MAX_CA*dc_c);
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x64>)
 8002338:	6838      	ldr	r0, [r7, #0]
 800233a:	f7fe fd03 	bl	8000d44 <__aeabi_fmul>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b06      	ldr	r3, [pc, #24]	@ (800235c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x68>)
 8002344:	681c      	ldr	r4, [r3, #0]
 8002346:	4610      	mov	r0, r2
 8002348:	f7fe fefe 	bl	8001148 <__aeabi_f2uiz>
 800234c:	4603      	mov	r3, r0
 800234e:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	bd90      	pop	{r4, r7, pc}
 8002358:	44b40000 	.word	0x44b40000
 800235c:	20000554 	.word	0x20000554

08002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b091      	sub	sp, #68	@ 0x44
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
	float Uout;
	// a bit of optitmisation
	if (Ud) {
 800236e:	f04f 0100 	mov.w	r1, #0
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fe7a 	bl	800106c <__aeabi_fcmpeq>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d12a      	bne.n	80023d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x74>
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe fcdf 	bl	8000d44 <__aeabi_fmul>
 8002386:	4603      	mov	r3, r0
 8002388:	461c      	mov	r4, r3
 800238a:	68b9      	ldr	r1, [r7, #8]
 800238c:	68b8      	ldr	r0, [r7, #8]
 800238e:	f7fe fcd9 	bl	8000d44 <__aeabi_fmul>
 8002392:	4603      	mov	r3, r0
 8002394:	4619      	mov	r1, r3
 8002396:	4620      	mov	r0, r4
 8002398:	f7fe fbcc 	bl	8000b34 <__addsf3>
 800239c:	4603      	mov	r3, r0
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fcf0 	bl	8001d84 <_Z11_sqrtApproxf>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b95      	ldr	r3, [pc, #596]	@ (80025fc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x29c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4619      	mov	r1, r3
 80023ac:	4610      	mov	r0, r2
 80023ae:	f7fe fd7d 	bl	8000eac <__aeabi_fdiv>
 80023b2:	4603      	mov	r3, r0
 80023b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	68b8      	ldr	r0, [r7, #8]
 80023ba:	f7ff ff51 	bl	8002260 <_ZSt5atan2ff>
 80023be:	4603      	mov	r3, r0
 80023c0:	6839      	ldr	r1, [r7, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe fbb6 	bl	8000b34 <__addsf3>
 80023c8:	4603      	mov	r3, r0
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff fcaa 	bl	8001d24 <_Z15_normalizeAnglef>
 80023d0:	6038      	str	r0, [r7, #0]
 80023d2:	e010      	b.n	80023f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x96>
	} else {
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 80023d4:	4b89      	ldr	r3, [pc, #548]	@ (80025fc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x29c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4619      	mov	r1, r3
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	f7fe fd66 	bl	8000eac <__aeabi_fdiv>
 80023e0:	4603      	mov	r3, r0
 80023e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 80023e4:	4986      	ldr	r1, [pc, #536]	@ (8002600 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a0>)
 80023e6:	6838      	ldr	r0, [r7, #0]
 80023e8:	f7fe fba4 	bl	8000b34 <__addsf3>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fc98 	bl	8001d24 <_Z15_normalizeAnglef>
 80023f4:	6038      	str	r0, [r7, #0]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 80023f6:	4983      	ldr	r1, [pc, #524]	@ (8002604 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a4>)
 80023f8:	6838      	ldr	r0, [r7, #0]
 80023fa:	f7fe fd57 	bl	8000eac <__aeabi_fdiv>
 80023fe:	4603      	mov	r3, r0
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff ff3b 	bl	800227c <_ZSt5floorf>
 8002406:	4603      	mov	r3, r0
 8002408:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800240c:	4618      	mov	r0, r3
 800240e:	f7fe fb91 	bl	8000b34 <__addsf3>
 8002412:	4603      	mov	r3, r0
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fe71 	bl	80010fc <__aeabi_f2iz>
 800241a:	4603      	mov	r3, r0
 800241c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 800241e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002420:	f7fe fc3c 	bl	8000c9c <__aeabi_i2f>
 8002424:	4603      	mov	r3, r0
 8002426:	4977      	ldr	r1, [pc, #476]	@ (8002604 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a4>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fc8b 	bl	8000d44 <__aeabi_fmul>
 800242e:	4603      	mov	r3, r0
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe fb7c 	bl	8000b30 <__aeabi_fsub>
 8002438:	4603      	mov	r3, r0
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fbd8 	bl	8001bf0 <_Z4_sinf>
 8002440:	4603      	mov	r3, r0
 8002442:	4971      	ldr	r1, [pc, #452]	@ (8002608 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a8>)
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fc7d 	bl	8000d44 <__aeabi_fmul>
 800244a:	4603      	mov	r3, r0
 800244c:	4619      	mov	r1, r3
 800244e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002450:	f7fe fc78 	bl	8000d44 <__aeabi_fmul>
 8002454:	4603      	mov	r3, r0
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 8002458:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800245a:	f7fe fc1f 	bl	8000c9c <__aeabi_i2f>
 800245e:	4603      	mov	r3, r0
 8002460:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe fb63 	bl	8000b30 <__aeabi_fsub>
 800246a:	4603      	mov	r3, r0
 800246c:	4965      	ldr	r1, [pc, #404]	@ (8002604 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a4>)
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe fc68 	bl	8000d44 <__aeabi_fmul>
 8002474:	4603      	mov	r3, r0
 8002476:	4619      	mov	r1, r3
 8002478:	6838      	ldr	r0, [r7, #0]
 800247a:	f7fe fb59 	bl	8000b30 <__aeabi_fsub>
 800247e:	4603      	mov	r3, r0
 8002480:	4618      	mov	r0, r3
 8002482:	f7ff fbb5 	bl	8001bf0 <_Z4_sinf>
 8002486:	4603      	mov	r3, r0
 8002488:	495f      	ldr	r1, [pc, #380]	@ (8002608 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x2a8>)
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fc5a 	bl	8000d44 <__aeabi_fmul>
 8002490:	4603      	mov	r3, r0
 8002492:	4619      	mov	r1, r3
 8002494:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002496:	f7fe fc55 	bl	8000d44 <__aeabi_fmul>
 800249a:	4603      	mov	r3, r0
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
//  float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
	float T0 = 0; // pulled to 0 - better for low power supply voltage
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	623b      	str	r3, [r7, #32]

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 80024a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a6:	3b01      	subs	r3, #1
 80024a8:	2b05      	cmp	r3, #5
 80024aa:	f200 80fb 	bhi.w	80026a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 80024ae:	a201      	add	r2, pc, #4	@ (adr r2, 80024b4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x154>)
 80024b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024b4:	080024cd 	.word	0x080024cd
 80024b8:	08002519 	.word	0x08002519
 80024bc:	08002565 	.word	0x08002565
 80024c0:	080025b1 	.word	0x080025b1
 80024c4:	0800260d 	.word	0x0800260d
 80024c8:	08002659 	.word	0x08002659
	case 1:
		Ta = T1 + T2 + T0 / 2;
 80024cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80024ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024d0:	f7fe fb30 	bl	8000b34 <__addsf3>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
 80024d8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80024dc:	6a38      	ldr	r0, [r7, #32]
 80024de:	f7fe fce5 	bl	8000eac <__aeabi_fdiv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	4619      	mov	r1, r3
 80024e6:	4620      	mov	r0, r4
 80024e8:	f7fe fb24 	bl	8000b34 <__addsf3>
 80024ec:	4603      	mov	r3, r0
 80024ee:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 80024f0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80024f4:	6a38      	ldr	r0, [r7, #32]
 80024f6:	f7fe fcd9 	bl	8000eac <__aeabi_fdiv>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4619      	mov	r1, r3
 80024fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002500:	f7fe fb18 	bl	8000b34 <__addsf3>
 8002504:	4603      	mov	r3, r0
 8002506:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8002508:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800250c:	6a38      	ldr	r0, [r7, #32]
 800250e:	f7fe fccd 	bl	8000eac <__aeabi_fdiv>
 8002512:	4603      	mov	r3, r0
 8002514:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002516:	e0ce      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8002518:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800251c:	6a38      	ldr	r0, [r7, #32]
 800251e:	f7fe fcc5 	bl	8000eac <__aeabi_fdiv>
 8002522:	4603      	mov	r3, r0
 8002524:	4619      	mov	r1, r3
 8002526:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002528:	f7fe fb04 	bl	8000b34 <__addsf3>
 800252c:	4603      	mov	r3, r0
 800252e:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8002530:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002532:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002534:	f7fe fafe 	bl	8000b34 <__addsf3>
 8002538:	4603      	mov	r3, r0
 800253a:	461c      	mov	r4, r3
 800253c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002540:	6a38      	ldr	r0, [r7, #32]
 8002542:	f7fe fcb3 	bl	8000eac <__aeabi_fdiv>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe faf2 	bl	8000b34 <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8002554:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002558:	6a38      	ldr	r0, [r7, #32]
 800255a:	f7fe fca7 	bl	8000eac <__aeabi_fdiv>
 800255e:	4603      	mov	r3, r0
 8002560:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002562:	e0a8      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 8002564:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002568:	6a38      	ldr	r0, [r7, #32]
 800256a:	f7fe fc9f 	bl	8000eac <__aeabi_fdiv>
 800256e:	4603      	mov	r3, r0
 8002570:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8002572:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002574:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002576:	f7fe fadd 	bl	8000b34 <__addsf3>
 800257a:	4603      	mov	r3, r0
 800257c:	461c      	mov	r4, r3
 800257e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002582:	6a38      	ldr	r0, [r7, #32]
 8002584:	f7fe fc92 	bl	8000eac <__aeabi_fdiv>
 8002588:	4603      	mov	r3, r0
 800258a:	4619      	mov	r1, r3
 800258c:	4620      	mov	r0, r4
 800258e:	f7fe fad1 	bl	8000b34 <__addsf3>
 8002592:	4603      	mov	r3, r0
 8002594:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 8002596:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800259a:	6a38      	ldr	r0, [r7, #32]
 800259c:	f7fe fc86 	bl	8000eac <__aeabi_fdiv>
 80025a0:	4603      	mov	r3, r0
 80025a2:	4619      	mov	r1, r3
 80025a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025a6:	f7fe fac5 	bl	8000b34 <__addsf3>
 80025aa:	4603      	mov	r3, r0
 80025ac:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 80025ae:	e082      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 80025b0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025b4:	6a38      	ldr	r0, [r7, #32]
 80025b6:	f7fe fc79 	bl	8000eac <__aeabi_fdiv>
 80025ba:	4603      	mov	r3, r0
 80025bc:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 80025be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025c2:	6a38      	ldr	r0, [r7, #32]
 80025c4:	f7fe fc72 	bl	8000eac <__aeabi_fdiv>
 80025c8:	4603      	mov	r3, r0
 80025ca:	4619      	mov	r1, r3
 80025cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ce:	f7fe fab1 	bl	8000b34 <__addsf3>
 80025d2:	4603      	mov	r3, r0
 80025d4:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 80025d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025da:	f7fe faab 	bl	8000b34 <__addsf3>
 80025de:	4603      	mov	r3, r0
 80025e0:	461c      	mov	r4, r3
 80025e2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025e6:	6a38      	ldr	r0, [r7, #32]
 80025e8:	f7fe fc60 	bl	8000eac <__aeabi_fdiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	4619      	mov	r1, r3
 80025f0:	4620      	mov	r0, r4
 80025f2:	f7fe fa9f 	bl	8000b34 <__addsf3>
 80025f6:	4603      	mov	r3, r0
 80025f8:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 80025fa:	e05c      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
 80025fc:	200000a4 	.word	0x200000a4
 8002600:	3fc90fdb 	.word	0x3fc90fdb
 8002604:	3f860a92 	.word	0x3f860a92
 8002608:	3fddb3d7 	.word	0x3fddb3d7
	case 5:
		Ta = T2 + T0 / 2;
 800260c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002610:	6a38      	ldr	r0, [r7, #32]
 8002612:	f7fe fc4b 	bl	8000eac <__aeabi_fdiv>
 8002616:	4603      	mov	r3, r0
 8002618:	4619      	mov	r1, r3
 800261a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800261c:	f7fe fa8a 	bl	8000b34 <__addsf3>
 8002620:	4603      	mov	r3, r0
 8002622:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8002624:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002628:	6a38      	ldr	r0, [r7, #32]
 800262a:	f7fe fc3f 	bl	8000eac <__aeabi_fdiv>
 800262e:	4603      	mov	r3, r0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8002632:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002634:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002636:	f7fe fa7d 	bl	8000b34 <__addsf3>
 800263a:	4603      	mov	r3, r0
 800263c:	461c      	mov	r4, r3
 800263e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002642:	6a38      	ldr	r0, [r7, #32]
 8002644:	f7fe fc32 	bl	8000eac <__aeabi_fdiv>
 8002648:	4603      	mov	r3, r0
 800264a:	4619      	mov	r1, r3
 800264c:	4620      	mov	r0, r4
 800264e:	f7fe fa71 	bl	8000b34 <__addsf3>
 8002652:	4603      	mov	r3, r0
 8002654:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002656:	e02e      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 8002658:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800265a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800265c:	f7fe fa6a 	bl	8000b34 <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	461c      	mov	r4, r3
 8002664:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002668:	6a38      	ldr	r0, [r7, #32]
 800266a:	f7fe fc1f 	bl	8000eac <__aeabi_fdiv>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	4620      	mov	r0, r4
 8002674:	f7fe fa5e 	bl	8000b34 <__addsf3>
 8002678:	4603      	mov	r3, r0
 800267a:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 800267c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002680:	6a38      	ldr	r0, [r7, #32]
 8002682:	f7fe fc13 	bl	8000eac <__aeabi_fdiv>
 8002686:	4603      	mov	r3, r0
 8002688:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 800268a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800268e:	6a38      	ldr	r0, [r7, #32]
 8002690:	f7fe fc0c 	bl	8000eac <__aeabi_fdiv>
 8002694:	4603      	mov	r3, r0
 8002696:	4619      	mov	r1, r3
 8002698:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800269a:	f7fe fa4b 	bl	8000b34 <__addsf3>
 800269e:	4603      	mov	r3, r0
 80026a0:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 80026a2:	e008      	b.n	80026b6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 80026aa:	f04f 0300 	mov.w	r3, #0
 80026ae:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 80026b6:	4b8d      	ldr	r3, [pc, #564]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80026bc:	4618      	mov	r0, r3
 80026be:	f7fe fb41 	bl	8000d44 <__aeabi_fmul>
 80026c2:	4603      	mov	r3, r0
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	605a      	str	r2, [r3, #4]
	Ub = Tb * voltage_limit;
 80026ca:	4b88      	ldr	r3, [pc, #544]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe fb37 	bl	8000d44 <__aeabi_fmul>
 80026d6:	4603      	mov	r3, r0
 80026d8:	461a      	mov	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
	Uc = Tc * voltage_limit;
 80026de:	4b83      	ldr	r3, [pc, #524]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fe fb2d 	bl	8000d44 <__aeabi_fmul>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	60da      	str	r2, [r3, #12]

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f04f 0100 	mov.w	r1, #0
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fcc0 	bl	8001080 <__aeabi_fcmplt>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d002      	beq.n	800270c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ac>
 8002706:	f04f 0300 	mov.w	r3, #0
 800270a:	e00f      	b.n	800272c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3cc>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	4a76      	ldr	r2, [pc, #472]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 8002712:	6812      	ldr	r2, [r2, #0]
 8002714:	4611      	mov	r1, r2
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fcd0 	bl	80010bc <__aeabi_fcmpgt>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	d002      	beq.n	8002728 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8002722:	4b72      	ldr	r3, [pc, #456]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e001      	b.n	800272c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3cc>
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fca1 	bl	8001080 <__aeabi_fcmplt>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d002      	beq.n	800274a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ea>
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e00f      	b.n	800276a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x40a>
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	4a67      	ldr	r2, [pc, #412]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	4611      	mov	r1, r2
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe fcb1 	bl	80010bc <__aeabi_fcmpgt>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	d002      	beq.n	8002766 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x406>
 8002760:	4b62      	ldr	r3, [pc, #392]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	e001      	b.n	800276a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x40a>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	68fa      	ldr	r2, [r7, #12]
 800276c:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f04f 0100 	mov.w	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f7fe fc82 	bl	8001080 <__aeabi_fcmplt>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d002      	beq.n	8002788 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x428>
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e00f      	b.n	80027a8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x448>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a57      	ldr	r2, [pc, #348]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f7fe fc92 	bl	80010bc <__aeabi_fcmpgt>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d002      	beq.n	80027a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x444>
 800279e:	4b53      	ldr	r3, [pc, #332]	@ (80028ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x58c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	e001      	b.n	80027a8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x448>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 1.0f);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a4f      	ldr	r2, [pc, #316]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	4611      	mov	r1, r2
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7fe fb78 	bl	8000eac <__aeabi_fdiv>
 80027bc:	4603      	mov	r3, r0
 80027be:	f04f 0100 	mov.w	r1, #0
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fe fc5c 	bl	8001080 <__aeabi_fcmplt>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d002      	beq.n	80027d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x474>
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e01c      	b.n	800280e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ae>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	4a45      	ldr	r2, [pc, #276]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fb64 	bl	8000eac <__aeabi_fdiv>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fe fc66 	bl	80010bc <__aeabi_fcmpgt>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d002      	beq.n	80027fc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x49c>
 80027f6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80027fa:	e008      	b.n	800280e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ae>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	4a3b      	ldr	r2, [pc, #236]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f7fe fb50 	bl	8000eac <__aeabi_fdiv>
 800280c:	4603      	mov	r3, r0
 800280e:	61fb      	str	r3, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 1.0f);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	4a36      	ldr	r2, [pc, #216]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe fb46 	bl	8000eac <__aeabi_fdiv>
 8002820:	4603      	mov	r3, r0
 8002822:	f04f 0100 	mov.w	r1, #0
 8002826:	4618      	mov	r0, r3
 8002828:	f7fe fc2a 	bl	8001080 <__aeabi_fcmplt>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d002      	beq.n	8002838 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4d8>
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	e01c      	b.n	8002872 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x512>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	4a2c      	ldr	r2, [pc, #176]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fb32 	bl	8000eac <__aeabi_fdiv>
 8002848:	4603      	mov	r3, r0
 800284a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800284e:	4618      	mov	r0, r3
 8002850:	f7fe fc34 	bl	80010bc <__aeabi_fcmpgt>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x500>
 800285a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800285e:	e008      	b.n	8002872 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x512>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4a22      	ldr	r2, [pc, #136]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 8002866:	6812      	ldr	r2, [r2, #0]
 8002868:	4611      	mov	r1, r2
 800286a:	4618      	mov	r0, r3
 800286c:	f7fe fb1e 	bl	8000eac <__aeabi_fdiv>
 8002870:	4603      	mov	r3, r0
 8002872:	61bb      	str	r3, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 1.0f);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a1d      	ldr	r2, [pc, #116]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 800287a:	6812      	ldr	r2, [r2, #0]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe fb14 	bl	8000eac <__aeabi_fdiv>
 8002884:	4603      	mov	r3, r0
 8002886:	f04f 0100 	mov.w	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fbf8 	bl	8001080 <__aeabi_fcmplt>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x53c>
 8002896:	f04f 0300 	mov.w	r3, #0
 800289a:	e01c      	b.n	80028d6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x576>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a13      	ldr	r2, [pc, #76]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 80028a2:	6812      	ldr	r2, [r2, #0]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fb00 	bl	8000eac <__aeabi_fdiv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe fc02 	bl	80010bc <__aeabi_fcmpgt>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d002      	beq.n	80028c4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x564>
 80028be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80028c2:	e008      	b.n	80028d6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x576>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a09      	ldr	r2, [pc, #36]	@ (80028f0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>)
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4611      	mov	r1, r2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe faec 	bl	8000eac <__aeabi_fdiv>
 80028d4:	4603      	mov	r3, r0
 80028d6:	617b      	str	r3, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	69f9      	ldr	r1, [r7, #28]
 80028de:	68f8      	ldr	r0, [r7, #12]
 80028e0:	f7ff fd08 	bl	80022f4 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 80028e4:	bf00      	nop
 80028e6:	3744      	adds	r7, #68	@ 0x44
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	200000a4 	.word	0x200000a4
 80028f0:	200000a0 	.word	0x200000a0

080028f4 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002902:	4618      	mov	r0, r3
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32f1xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	4a0f      	ldr	r2, [pc, #60]	@ (8002954 <_ZN9simpleFOCC1Ev+0x48>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	601a      	str	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	3304      	adds	r3, #4
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fc3e 	bl	80011a0 <_ZN17AS5048A_interfaceC1Ev>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	3368      	adds	r3, #104	@ 0x68
 8002928:	4618      	mov	r0, r3
 800292a:	f7fe ff4f 	bl	80017cc <_ZN12CurrentSenseC1Ev>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	33b0      	adds	r3, #176	@ 0xb0
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff fcae 	bl	8002294 <_ZN11pwm_driversC1Ev>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <_ZN9simpleFOCC1Ev+0x4c>)
 800293c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a05      	ldr	r2, [pc, #20]	@ (8002958 <_ZN9simpleFOCC1Ev+0x4c>)
 8002944:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
{

}
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	0800b840 	.word	0x0800b840
 8002958:	40400000 	.word	0x40400000

0800295c <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	4a0b      	ldr	r2, [pc, #44]	@ (8002994 <_ZN9simpleFOCD1Ev+0x38>)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	33b0      	adds	r3, #176	@ 0xb0
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff fca0 	bl	80022b4 <_ZN11pwm_driversD1Ev>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	3368      	adds	r3, #104	@ 0x68
 8002978:	4618      	mov	r0, r3
 800297a:	f7fe ff3d 	bl	80017f8 <_ZN12CurrentSenseD1Ev>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	4618      	mov	r0, r3
 8002984:	f7fe fc58 	bl	8001238 <_ZN17AS5048A_interfaceD1Ev>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4618      	mov	r0, r3
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	0800b840 	.word	0x0800b840

08002998 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
}
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ffdb 	bl	800295c <_ZN9simpleFOCD1Ev>
 80029a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f005 f8f8 	bl	8007ba0 <_ZdlPvj>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
	Encoder.MagneticSensorSPI_init();
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	3304      	adds	r3, #4
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7fe fc55 	bl	8001278 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7fe fc8c 	bl	80012f0 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	3368      	adds	r3, #104	@ 0x68
 80029dc:	4a06      	ldr	r2, [pc, #24]	@ (80029f8 <_ZN9simpleFOC11initSensorsEv+0x3c>)
 80029de:	4907      	ldr	r1, [pc, #28]	@ (80029fc <_ZN9simpleFOC11initSensorsEv+0x40>)
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7fe ff29 	bl	8001838 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3368      	adds	r3, #104	@ 0x68
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe ff44 	bl	8001878 <_ZN12CurrentSense16calibrateOffsetsEv>
	// Encoder.zero_electric_angle = 100.0;
}
 80029f0:	bf00      	nop
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	41200000 	.word	0x41200000
 80029fc:	3dcccccd 	.word	0x3dcccccd

08002a00 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
	return 0;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	370c      	adds	r7, #12
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr

08002a14 <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002a2e:	4a24      	ldr	r2, [pc, #144]	@ (8002ac0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 8002a30:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002a38:	4a22      	ldr	r2, [pc, #136]	@ (8002ac4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8002a3a:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	while (needsSearch() && shaft_angle < _2PI) 
 8002a46:	e008      	b.n	8002a5a <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 8002a48:	491f      	ldr	r1, [pc, #124]	@ (8002ac8 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 fac4 	bl	8002fd8 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	3304      	adds	r3, #4
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7fe fd41 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ffd0 	bl	8002a00 <_ZN9simpleFOC11needsSearchEv>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002a6c:	4917      	ldr	r1, [pc, #92]	@ (8002acc <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>)
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fe fb06 	bl	8001080 <__aeabi_fcmplt>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e000      	b.n	8002a80 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 8002a7e:	2300      	movs	r3, #0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1e1      	bne.n	8002a48 <_ZN9simpleFOC18absoluteZeroSearchEv+0x34>
	}
	driver.setPhaseVoltage(0, 0, 0);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0100 	mov.w	r1, #0
 8002a96:	f7ff fc63 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 8002a9a:	4a09      	ldr	r2, [pc, #36]	@ (8002ac0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 8002aa0:	4a08      	ldr	r2, [pc, #32]	@ (8002ac4 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff ffaa 	bl	8002a00 <_ZN9simpleFOC11needsSearchEv>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf0c      	ite	eq
 8002ab2:	2301      	moveq	r3, #1
 8002ab4:	2300      	movne	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	200000ac 	.word	0x200000ac
 8002ac4:	200000a4 	.word	0x200000a4
 8002ac8:	4116cbe4 	.word	0x4116cbe4
 8002acc:	40c90fdb 	.word	0x40c90fdb

08002ad0 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8002ad0:	b590      	push	{r4, r7, lr}
 8002ad2:	b08b      	sub	sp, #44	@ 0x2c
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 8002ad8:	2301      	movs	r3, #1
 8002ada:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7fe f8db 	bl	8000c9c <__aeabi_i2f>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	49a9      	ldr	r1, [pc, #676]	@ (8002d90 <_ZN9simpleFOC11alignSensorEv+0x2c0>)
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe fabe 	bl	800106c <__aeabi_fcmpeq>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 80f9 	beq.w	8002cea <_ZN9simpleFOC11alignSensorEv+0x21a>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f7ff ff81 	bl	8002a00 <_ZN9simpleFOC11needsSearchEv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf14      	ite	ne
 8002b04:	2301      	movne	r3, #1
 8002b06:	2300      	moveq	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <_ZN9simpleFOC11alignSensorEv+0x46>
			exit_flag = absoluteZeroSearch(); // o
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f7ff ff80 	bl	8002a14 <_ZN9simpleFOC18absoluteZeroSearchEv>
 8002b14:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <_ZN9simpleFOC11alignSensorEv+0x50>
			return exit_flag;
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1e:	e12d      	b.n	8002d7c <_ZN9simpleFOC11alignSensorEv+0x2ac>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 8002b20:	2300      	movs	r3, #0
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	e032      	b.n	8002b8c <_ZN9simpleFOC11alignSensorEv+0xbc>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8002b26:	6a38      	ldr	r0, [r7, #32]
 8002b28:	f7fe f8b8 	bl	8000c9c <__aeabi_i2f>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	4999      	ldr	r1, [pc, #612]	@ (8002d94 <_ZN9simpleFOC11alignSensorEv+0x2c4>)
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe f907 	bl	8000d44 <__aeabi_fmul>
 8002b36:	4603      	mov	r3, r0
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fd fc75 	bl	8000428 <__aeabi_f2d>
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	4b95      	ldr	r3, [pc, #596]	@ (8002d98 <_ZN9simpleFOC11alignSensorEv+0x2c8>)
 8002b44:	f7fd fdf2 	bl	800072c <__aeabi_ddiv>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4610      	mov	r0, r2
 8002b4e:	4619      	mov	r1, r3
 8002b50:	a38d      	add	r3, pc, #564	@ (adr r3, 8002d88 <_ZN9simpleFOC11alignSensorEv+0x2b8>)
 8002b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b56:	f7fd fb09 	bl	800016c <__adddf3>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4610      	mov	r0, r2
 8002b60:	4619      	mov	r1, r3
 8002b62:	f7fd ff91 	bl	8000a88 <__aeabi_d2f>
 8002b66:	4603      	mov	r3, r0
 8002b68:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	f04f 0200 	mov.w	r2, #0
 8002b7c:	f7ff fbf0 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8002b80:	2002      	movs	r0, #2
 8002b82:	f001 fb81 	bl	8004288 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	623b      	str	r3, [r7, #32]
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002b92:	ddc8      	ble.n	8002b26 <_ZN9simpleFOC11alignSensorEv+0x56>
		}
		Encoder.updateSensor();
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3304      	adds	r3, #4
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fe fd6b 	bl	8001674 <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fe fc9a 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002ba8:	61b8      	str	r0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8002baa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	e032      	b.n	8002c18 <_ZN9simpleFOC11alignSensorEv+0x148>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8002bb2:	69f8      	ldr	r0, [r7, #28]
 8002bb4:	f7fe f872 	bl	8000c9c <__aeabi_i2f>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4976      	ldr	r1, [pc, #472]	@ (8002d94 <_ZN9simpleFOC11alignSensorEv+0x2c4>)
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f7fe f8c1 	bl	8000d44 <__aeabi_fmul>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fd fc2f 	bl	8000428 <__aeabi_f2d>
 8002bca:	f04f 0200 	mov.w	r2, #0
 8002bce:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <_ZN9simpleFOC11alignSensorEv+0x2c8>)
 8002bd0:	f7fd fdac 	bl	800072c <__aeabi_ddiv>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4610      	mov	r0, r2
 8002bda:	4619      	mov	r1, r3
 8002bdc:	a36a      	add	r3, pc, #424	@ (adr r3, 8002d88 <_ZN9simpleFOC11alignSensorEv+0x2b8>)
 8002bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be2:	f7fd fac3 	bl	800016c <__adddf3>
 8002be6:	4602      	mov	r2, r0
 8002be8:	460b      	mov	r3, r1
 8002bea:	4610      	mov	r0, r2
 8002bec:	4619      	mov	r1, r3
 8002bee:	f7fd ff4b 	bl	8000a88 <__aeabi_d2f>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f7ff fbaa 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f001 fb3b 	bl	8004288 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	3b01      	subs	r3, #1
 8002c16:	61fb      	str	r3, [r7, #28]
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	dac9      	bge.n	8002bb2 <_ZN9simpleFOC11alignSensorEv+0xe2>
		}
		Encoder.updateSensor();
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3304      	adds	r3, #4
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fd26 	bl	8001674 <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fe fc55 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002c32:	6178      	str	r0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002c3a:	f04f 0300 	mov.w	r3, #0
 8002c3e:	f04f 0200 	mov.w	r2, #0
 8002c42:	f04f 0100 	mov.w	r1, #0
 8002c46:	f7ff fb8b 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8002c4a:	20c8      	movs	r0, #200	@ 0xc8
 8002c4c:	f001 fb1c 	bl	8004288 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8002c50:	6979      	ldr	r1, [r7, #20]
 8002c52:	69b8      	ldr	r0, [r7, #24]
 8002c54:	f7fe fa0a 	bl	800106c <__aeabi_fcmpeq>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <_ZN9simpleFOC11alignSensorEv+0x192>
		{
			return 0; // failed calibration
 8002c5e:	2300      	movs	r3, #0
 8002c60:	e08c      	b.n	8002d7c <_ZN9simpleFOC11alignSensorEv+0x2ac>
		} else if (mid_angle < end_angle) 
 8002c62:	6979      	ldr	r1, [r7, #20]
 8002c64:	69b8      	ldr	r0, [r7, #24]
 8002c66:	f7fe fa0b 	bl	8001080 <__aeabi_fcmplt>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d004      	beq.n	8002c7a <_ZN9simpleFOC11alignSensorEv+0x1aa>
		{
			Encoder.sensor_direction = CCW;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f04f 32ff 	mov.w	r2, #4294967295
 8002c76:	649a      	str	r2, [r3, #72]	@ 0x48
 8002c78:	e002      	b.n	8002c80 <_ZN9simpleFOC11alignSensorEv+0x1b0>
		} else {
			Encoder.sensor_direction = CW;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	649a      	str	r2, [r3, #72]	@ 0x48
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8002c80:	6979      	ldr	r1, [r7, #20]
 8002c82:	69b8      	ldr	r0, [r7, #24]
 8002c84:	f7fd ff54 	bl	8000b30 <__aeabi_fsub>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fe32 	bl	80028f4 <_ZSt4fabsf>
 8002c90:	6138      	str	r0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8002c92:	4b42      	ldr	r3, [pc, #264]	@ (8002d9c <_ZN9simpleFOC11alignSensorEv+0x2cc>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7fe f800 	bl	8000c9c <__aeabi_i2f>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	6939      	ldr	r1, [r7, #16]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fe f84f 	bl	8000d44 <__aeabi_fmul>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	493a      	ldr	r1, [pc, #232]	@ (8002d94 <_ZN9simpleFOC11alignSensorEv+0x2c4>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7fd ff40 	bl	8000b30 <__aeabi_fsub>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f7ff fe1e 	bl	80028f4 <_ZSt4fabsf>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4614      	mov	r4, r2
 8002cbe:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe f9fa 	bl	80010bc <__aeabi_fcmpgt>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <_ZN9simpleFOC11alignSensorEv+0x202>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	461c      	mov	r4, r3
 8002cd2:	b2e3      	uxtb	r3, r4
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <_ZN9simpleFOC11alignSensorEv+0x21a>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8002cd8:	6939      	ldr	r1, [r7, #16]
 8002cda:	482e      	ldr	r0, [pc, #184]	@ (8002d94 <_ZN9simpleFOC11alignSensorEv+0x2c4>)
 8002cdc:	f7fe f8e6 	bl	8000eac <__aeabi_fdiv>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cee:	4928      	ldr	r1, [pc, #160]	@ (8002d90 <_ZN9simpleFOC11alignSensorEv+0x2c0>)
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe f9bb 	bl	800106c <__aeabi_fcmpeq>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d03e      	beq.n	8002d7a <_ZN9simpleFOC11alignSensorEv+0x2aa>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f8d3 10f4 	ldr.w	r1, [r3, #244]	@ 0xf4
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <_ZN9simpleFOC11alignSensorEv+0x2d0>)
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f7ff fb27 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 8002d12:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8002d16:	f001 fab7 	bl	8004288 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd ffbc 	bl	8000c9c <__aeabi_i2f>
 8002d24:	4604      	mov	r4, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fe fbd6 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002d30:	4603      	mov	r3, r0
 8002d32:	4619      	mov	r1, r3
 8002d34:	4620      	mov	r0, r4
 8002d36:	f7fe f805 	bl	8000d44 <__aeabi_fmul>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b17      	ldr	r3, [pc, #92]	@ (8002d9c <_ZN9simpleFOC11alignSensorEv+0x2cc>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4619      	mov	r1, r3
 8002d44:	4610      	mov	r0, r2
 8002d46:	f7ff f80b 	bl	8001d60 <_Z16_electricalAnglefi>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7fe ffe9 	bl	8001d24 <_Z15_normalizeAnglef>
 8002d52:	4602      	mov	r2, r0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	645a      	str	r2, [r3, #68]	@ 0x44
		HAL_Delay(20);
 8002d58:	2014      	movs	r0, #20
 8002d5a:	f001 fa95 	bl	8004288 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f7ff faf6 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8002d74:	20c8      	movs	r0, #200	@ 0xc8
 8002d76:	f001 fa87 	bl	8004288 <HAL_Delay>
	}
	return exit_flag;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	372c      	adds	r7, #44	@ 0x2c
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd90      	pop	{r4, r7, pc}
 8002d84:	f3af 8000 	nop.w
 8002d88:	80000000 	.word	0x80000000
 8002d8c:	4012d97c 	.word	0x4012d97c
 8002d90:	c640e400 	.word	0xc640e400
 8002d94:	40c90fdb 	.word	0x40c90fdb
 8002d98:	407f4000 	.word	0x407f4000
 8002d9c:	2000009c 	.word	0x2000009c
 8002da0:	4096cbe4 	.word	0x4096cbe4

08002da4 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	4613      	mov	r3, r2
 8002db0:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8002db2:	2301      	movs	r3, #1
 8002db4:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8002db6:	4914      	ldr	r1, [pc, #80]	@ (8002e08 <_ZN9simpleFOC7initFOCEf9Direction+0x64>)
 8002db8:	68b8      	ldr	r0, [r7, #8]
 8002dba:	f7fe f957 	bl	800106c <__aeabi_fcmpeq>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d106      	bne.n	8002dd2 <_ZN9simpleFOC7initFOCEf9Direction+0x2e>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	645a      	str	r2, [r3, #68]	@ 0x44
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8002dca:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8002dd2:	68f8      	ldr	r0, [r7, #12]
 8002dd4:	f7ff fe7c 	bl	8002ad0 <_ZN9simpleFOC11alignSensorEv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fe fb78 	bl	80014dc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002dec:	4602      	mov	r2, r0
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	HAL_Delay(500);
 8002df4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002df8:	f001 fa46 	bl	8004288 <HAL_Delay>

	return exit_flag;
 8002dfc:	697b      	ldr	r3, [r7, #20]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	c640e400 	.word	0xc640e400

08002e0c <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
	Encoder.updateSensor();
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe fc2b 	bl	8001674 <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	3304      	adds	r3, #4
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7fe fc6c 	bl	8001700 <_ZN17AS5048A_interface13getShaftAngleEv>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	3304      	adds	r3, #4
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fe fb7a 	bl	800152e <_ZN17AS5048A_interface15electricalAngleEv>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8

	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f8d3 20c8 	ldr.w	r2, [r3, #200]	@ 0xc8
 8002e4e:	68fc      	ldr	r4, [r7, #12]
 8002e50:	463b      	mov	r3, r7
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe fe44 	bl	8001ae0 <_ZN12CurrentSense14getFOCCurrentsEf>
 8002e58:	f104 03e4 	add.w	r3, r4, #228	@ 0xe4
 8002e5c:	463a      	mov	r2, r7
 8002e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e62:	e883 0003 	stmia.w	r3, {r0, r1}
	current.q = LPF_current_q(current.q);   // filter values
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4824      	ldr	r0, [pc, #144]	@ (8002f00 <_ZN9simpleFOC7loopFOCEv+0xf4>)
 8002e70:	f7fe ffb6 	bl	8001de0 <_ZN13LowPassFilterclEf>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	current.d = LPF_current_d(current.d);   // filter values
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002e82:	4619      	mov	r1, r3
 8002e84:	481f      	ldr	r0, [pc, #124]	@ (8002f04 <_ZN9simpleFOC7loopFOCEv+0xf8>)
 8002e86:	f7fe ffab 	bl	8001de0 <_ZN13LowPassFilterclEf>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current.q);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002e9e:	4619      	mov	r1, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7fd fe45 	bl	8000b30 <__aeabi_fsub>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	4817      	ldr	r0, [pc, #92]	@ (8002f08 <_ZN9simpleFOC7loopFOCEv+0xfc>)
 8002eac:	f7ff f8b6 	bl	800201c <_ZN13PIDControllerclEf>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	voltage.d = PID_current_d(0 - current.d);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	f04f 0000 	mov.w	r0, #0
 8002ec4:	f7fd fe34 	bl	8000b30 <__aeabi_fsub>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	480f      	ldr	r0, [pc, #60]	@ (8002f0c <_ZN9simpleFOC7loopFOCEv+0x100>)
 8002ece:	f7ff f8a5 	bl	800201c <_ZN13PIDControllerclEf>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f103 00b0 	add.w	r0, r3, #176	@ 0xb0
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8002ef2:	f7ff fa35 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8002ef6:	bf00      	nop
 8002ef8:	3714      	adds	r7, #20
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd90      	pop	{r4, r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000344 	.word	0x20000344
 8002f04:	20000350 	.word	0x20000350
 8002f08:	200002d8 	.word	0x200002d8
 8002f0c:	200002b4 	.word	0x200002b4

08002f10 <_ZN9simpleFOC10move_angleEf>:

void simpleFOC::move_angle(float new_target)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
	// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated // checked
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe fc15 	bl	800174e <_ZN17AS5048A_interface16getShaftVelocityEv>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
 8002f2c:	4926      	ldr	r1, [pc, #152]	@ (8002fc8 <_ZN9simpleFOC10move_angleEf+0xb8>)
 8002f2e:	6838      	ldr	r0, [r7, #0]
 8002f30:	f7fe f89c 	bl	800106c <__aeabi_fcmpeq>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d103      	bne.n	8002f42 <_ZN9simpleFOC10move_angleEf+0x32>
		  target = new_target;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

	// angle set point
	shaft_angle_sp = target;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	// calculate velocity set point
	shaft_velocity_sp = PID_position(shaft_angle_sp - shaft_angle);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f7fd fde7 	bl	8000b30 <__aeabi_fsub>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4619      	mov	r1, r3
 8002f66:	4819      	ldr	r0, [pc, #100]	@ (8002fcc <_ZN9simpleFOC10move_angleEf+0xbc>)
 8002f68:	f7ff f858 	bl	800201c <_ZN13PIDControllerclEf>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	// calculate the torque command
	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8002f80:	4619      	mov	r1, r3
 8002f82:	4610      	mov	r0, r2
 8002f84:	f7fd fdd4 	bl	8000b30 <__aeabi_fsub>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4810      	ldr	r0, [pc, #64]	@ (8002fd0 <_ZN9simpleFOC10move_angleEf+0xc0>)
 8002f8e:	f7ff f845 	bl	800201c <_ZN13PIDControllerclEf>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

	voltage.q = current_sp*phase_resistance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 8002fa0:	4a0c      	ldr	r2, [pc, #48]	@ (8002fd4 <_ZN9simpleFOC10move_angleEf+0xc4>)
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	4611      	mov	r1, r2
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fecc 	bl	8000d44 <__aeabi_fmul>
 8002fac:	4603      	mov	r3, r0
 8002fae:	461a      	mov	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
	voltage.d = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
}
 8002fc0:	bf00      	nop
 8002fc2:	3708      	adds	r7, #8
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	c640e400 	.word	0xc640e400
 8002fcc:	20000320 	.word	0x20000320
 8002fd0:	200002fc 	.word	0x200002fc
 8002fd4:	20000098 	.word	0x20000098

08002fd8 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
	unsigned long now_us = micros();
 8002fe2:	f000 f8cf 	bl	8003184 <_ZN9simpleFOC6microsEv>
 8002fe6:	6138      	str	r0, [r7, #16]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 8002fee:	461a      	mov	r2, r3
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd f9f5 	bl	80003e4 <__aeabi_ui2d>
 8002ffa:	a35b      	add	r3, pc, #364	@ (adr r3, 8003168 <_ZN9simpleFOC13angleOpenloopEf+0x190>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd fa6a 	bl	80004d8 <__aeabi_dmul>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fd3c 	bl	8000a88 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003014:	f04f 0100 	mov.w	r1, #0
 8003018:	6978      	ldr	r0, [r7, #20]
 800301a:	f7fe f83b 	bl	8001094 <__aeabi_fcmple>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d107      	bne.n	8003034 <_ZN9simpleFOC13angleOpenloopEf+0x5c>
 8003024:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f7fe f847 	bl	80010bc <__aeabi_fcmpgt>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <_ZN9simpleFOC13angleOpenloopEf+0x60>
		Ts = 1e-3;
 8003034:	4b4e      	ldr	r3, [pc, #312]	@ (8003170 <_ZN9simpleFOC13angleOpenloopEf+0x198>)
 8003036:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts)) {
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800303e:	4619      	mov	r1, r3
 8003040:	6838      	ldr	r0, [r7, #0]
 8003042:	f7fd fd75 	bl	8000b30 <__aeabi_fsub>
 8003046:	4603      	mov	r3, r0
 8003048:	4618      	mov	r0, r3
 800304a:	f7fe f89d 	bl	8001188 <_ZSt3absf>
 800304e:	4604      	mov	r4, r0
 8003050:	4b48      	ldr	r3, [pc, #288]	@ (8003174 <_ZN9simpleFOC13angleOpenloopEf+0x19c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6979      	ldr	r1, [r7, #20]
 8003056:	4618      	mov	r0, r3
 8003058:	f7fd fe74 	bl	8000d44 <__aeabi_fmul>
 800305c:	4603      	mov	r3, r0
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe f892 	bl	8001188 <_ZSt3absf>
 8003064:	4603      	mov	r3, r0
 8003066:	2201      	movs	r2, #1
 8003068:	4615      	mov	r5, r2
 800306a:	4619      	mov	r1, r3
 800306c:	4620      	mov	r0, r4
 800306e:	f7fe f825 	bl	80010bc <__aeabi_fcmpgt>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d101      	bne.n	800307c <_ZN9simpleFOC13angleOpenloopEf+0xa4>
 8003078:	2300      	movs	r3, #0
 800307a:	461d      	mov	r5, r3
 800307c:	b2eb      	uxtb	r3, r5
 800307e:	2b00      	cmp	r3, #0
 8003080:	d049      	beq.n	8003116 <_ZN9simpleFOC13angleOpenloopEf+0x13e>
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003088:	4619      	mov	r1, r3
 800308a:	6838      	ldr	r0, [r7, #0]
 800308c:	f7fd fd50 	bl	8000b30 <__aeabi_fsub>
 8003090:	4603      	mov	r3, r0
 8003092:	f04f 0100 	mov.w	r1, #0
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fff2 	bl	8001080 <__aeabi_fcmplt>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <_ZN9simpleFOC13angleOpenloopEf+0xce>
 80030a2:	4c35      	ldr	r4, [pc, #212]	@ (8003178 <_ZN9simpleFOC13angleOpenloopEf+0x1a0>)
 80030a4:	e014      	b.n	80030d0 <_ZN9simpleFOC13angleOpenloopEf+0xf8>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030ac:	4619      	mov	r1, r3
 80030ae:	6838      	ldr	r0, [r7, #0]
 80030b0:	f7fd fd3e 	bl	8000b30 <__aeabi_fsub>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f04f 0100 	mov.w	r1, #0
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fffe 	bl	80010bc <__aeabi_fcmpgt>
 80030c0:	4603      	mov	r3, r0
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <_ZN9simpleFOC13angleOpenloopEf+0xf4>
 80030c6:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 80030ca:	e001      	b.n	80030d0 <_ZN9simpleFOC13angleOpenloopEf+0xf8>
 80030cc:	f04f 0400 	mov.w	r4, #0
 80030d0:	4b28      	ldr	r3, [pc, #160]	@ (8003174 <_ZN9simpleFOC13angleOpenloopEf+0x19c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7fe f857 	bl	8001188 <_ZSt3absf>
 80030da:	4603      	mov	r3, r0
 80030dc:	4619      	mov	r1, r3
 80030de:	4620      	mov	r0, r4
 80030e0:	f7fd fe30 	bl	8000d44 <__aeabi_fmul>
 80030e4:	4603      	mov	r3, r0
				* Ts;
 80030e6:	6979      	ldr	r1, [r7, #20]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7fd fe2b 	bl	8000d44 <__aeabi_fmul>
 80030ee:	4603      	mov	r3, r0
 80030f0:	461a      	mov	r2, r3
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80030f8:	4619      	mov	r1, r3
 80030fa:	4610      	mov	r0, r2
 80030fc:	f7fd fd1a 	bl	8000b34 <__addsf3>
 8003100:	4603      	mov	r3, r0
 8003102:	461a      	mov	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
		shaft_velocity = velocity_limit;
 800310a:	4b1a      	ldr	r3, [pc, #104]	@ (8003174 <_ZN9simpleFOC13angleOpenloopEf+0x19c>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
 8003114:	e008      	b.n	8003128 <_ZN9simpleFOC13angleOpenloopEf+0x150>
	} else {
		shaft_angle = target_angle;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
		shaft_velocity = 0;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003128:	4b14      	ldr	r3, [pc, #80]	@ (800317c <_ZN9simpleFOC13angleOpenloopEf+0x1a4>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f103 04b0 	add.w	r4, r3, #176	@ 0xb0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800313a:	4a11      	ldr	r2, [pc, #68]	@ (8003180 <_ZN9simpleFOC13angleOpenloopEf+0x1a8>)
 800313c:	6812      	ldr	r2, [r2, #0]
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fe0d 	bl	8001d60 <_Z16_electricalAnglefi>
 8003146:	4603      	mov	r3, r0
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	4620      	mov	r0, r4
 8003150:	f7ff f906 	bl	8002360 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	return Uq;
 800315c:	68fb      	ldr	r3, [r7, #12]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
 8003166:	bf00      	nop
 8003168:	a0b5ed8d 	.word	0xa0b5ed8d
 800316c:	3eb0c6f7 	.word	0x3eb0c6f7
 8003170:	3a83126f 	.word	0x3a83126f
 8003174:	200000ac 	.word	0x200000ac
 8003178:	bf800000 	.word	0xbf800000
 800317c:	200000a4 	.word	0x200000a4
 8003180:	2000009c 	.word	0x2000009c

08003184 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003188:	4b06      	ldr	r3, [pc, #24]	@ (80031a4 <_ZN9simpleFOC6microsEv+0x20>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4b06      	ldr	r3, [pc, #24]	@ (80031a8 <_ZN9simpleFOC6microsEv+0x24>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4906      	ldr	r1, [pc, #24]	@ (80031ac <_ZN9simpleFOC6microsEv+0x28>)
 8003192:	fba1 1303 	umull	r1, r3, r1, r3
 8003196:	0c9b      	lsrs	r3, r3, #18
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	e0001000 	.word	0xe0001000
 80031a8:	200000b4 	.word	0x200000b4
 80031ac:	431bde83 	.word	0x431bde83

080031b0 <_ZN9simpleFOC15readEncoderOnlyEv>:

void simpleFOC::readEncoderOnly(){
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe fa59 	bl	8001674 <_ZN17AS5048A_interface12updateSensorEv>
}
 80031c2:	bf00      	nop
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_CAN_RxFifo1MsgPendingCallback>:
uint32_t CAN_error;
int count1, count2;

//CAN:103
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO1, &RxHeader, RxData) != HAL_OK)
 80031d4:	4b20      	ldr	r3, [pc, #128]	@ (8003258 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 80031d6:	4a21      	ldr	r2, [pc, #132]	@ (800325c <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80031d8:	2101      	movs	r1, #1
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f001 fe4b 	bl	8004e76 <HAL_CAN_GetRxMessage>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	bf14      	ite	ne
 80031e6:	2301      	movne	r3, #1
 80031e8:	2300      	moveq	r3, #0
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CAN_error = HAL_CAN_GetError(hcan);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f002 f999 	bl	8005528 <HAL_CAN_GetError>
 80031f6:	4603      	mov	r3, r0
 80031f8:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 80031fa:	6013      	str	r3, [r2, #0]
		Error_Handler();
 80031fc:	f000 fc5e 	bl	8003abc <Error_Handler>
	}
	datacheck = 1;
 8003200:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]
	if ((RxHeader.StdId == 0x446) && (RxHeader.DLC == 4))
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f240 4246 	movw	r2, #1094	@ 0x446
 800320e:	4293      	cmp	r3, r2
 8003210:	d119      	bne.n	8003246 <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
 8003212:	4b12      	ldr	r3, [pc, #72]	@ (800325c <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d115      	bne.n	8003246 <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
	{
		bytes[0] = RxData[0];
 800321a:	4b0f      	ldr	r3, [pc, #60]	@ (8003258 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	4b12      	ldr	r3, [pc, #72]	@ (8003268 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8003220:	701a      	strb	r2, [r3, #0]
		bytes[1] = RxData[1];
 8003222:	4b0d      	ldr	r3, [pc, #52]	@ (8003258 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8003224:	785a      	ldrb	r2, [r3, #1]
 8003226:	4b10      	ldr	r3, [pc, #64]	@ (8003268 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8003228:	705a      	strb	r2, [r3, #1]
		bytes[2] = RxData[2];
 800322a:	4b0b      	ldr	r3, [pc, #44]	@ (8003258 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 800322c:	789a      	ldrb	r2, [r3, #2]
 800322e:	4b0e      	ldr	r3, [pc, #56]	@ (8003268 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8003230:	709a      	strb	r2, [r3, #2]
		bytes[3] = RxData[3];
 8003232:	4b09      	ldr	r3, [pc, #36]	@ (8003258 <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8003234:	78da      	ldrb	r2, [r3, #3]
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8003238:	70da      	strb	r2, [r3, #3]
		float_final = Bytes2float(bytes);
 800323a:	480b      	ldr	r0, [pc, #44]	@ (8003268 <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 800323c:	f000 fc24 	bl	8003a88 <_Z11Bytes2floatPh>
 8003240:	4603      	mov	r3, r0
 8003242:	4a0a      	ldr	r2, [pc, #40]	@ (800326c <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8003244:	6013      	str	r3, [r2, #0]
	}
	count2++;
 8003246:	4b0a      	ldr	r3, [pc, #40]	@ (8003270 <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	4a08      	ldr	r2, [pc, #32]	@ (8003270 <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	2000065c 	.word	0x2000065c
 800325c:	20000640 	.word	0x20000640
 8003260:	20000670 	.word	0x20000670
 8003264:	20000664 	.word	0x20000664
 8003268:	20000668 	.word	0x20000668
 800326c:	2000066c 	.word	0x2000066c
 8003270:	20000674 	.word	0x20000674
 8003274:	00000000 	.word	0x00000000

08003278 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800327c:	f000 ffa2 	bl	80041c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003280:	f000 f8b8 	bl	80033f4 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003284:	f000 fb02 	bl	800388c <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 8003288:	f000 f9c8 	bl	800361c <_ZL12MX_SPI1_Initv>
	MX_DMA_Init();
 800328c:	f000 fae0 	bl	8003850 <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 8003290:	f000 faae 	bl	80037f0 <_ZL19MX_USART1_UART_Initv>
	MX_ADC1_Init();
 8003294:	f000 f918 	bl	80034c8 <_ZL12MX_ADC1_Initv>
	MX_TIM2_Init();
 8003298:	f000 f9fc 	bl	8003694 <_ZL12MX_TIM2_Initv>
	MX_CAN_Init();
 800329c:	f000 f984 	bl	80035a8 <_ZL11MX_CAN_Initv>
	/* USER CODE BEGIN 2 */

	//Delay SETUP
	DWT_Init();
 80032a0:	f000 fb78 	bl	8003994 <_ZL8DWT_Initv>
	//Timer Interrupt tim2,tim4
	HAL_TIM_Base_Start_IT(&htim4);
 80032a4:	4844      	ldr	r0, [pc, #272]	@ (80033b8 <main+0x140>)
 80032a6:	f003 fdcf 	bl	8006e48 <HAL_TIM_Base_Start_IT>

	//SPI SETUP
	simpleFOC.initSensors();
 80032aa:	4844      	ldr	r0, [pc, #272]	@ (80033bc <main+0x144>)
 80032ac:	f7ff fb86 	bl	80029bc <_ZN9simpleFOC11initSensorsEv>

	//PWM SETUP
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);   //pinMode
 80032b0:	2100      	movs	r1, #0
 80032b2:	4843      	ldr	r0, [pc, #268]	@ (80033c0 <main+0x148>)
 80032b4:	f003 fe72 	bl	8006f9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//pinMode
 80032b8:	2104      	movs	r1, #4
 80032ba:	4841      	ldr	r0, [pc, #260]	@ (80033c0 <main+0x148>)
 80032bc:	f003 fe6e 	bl	8006f9c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//pinMode
 80032c0:	2108      	movs	r1, #8
 80032c2:	483f      	ldr	r0, [pc, #252]	@ (80033c0 <main+0x148>)
 80032c4:	f003 fe6a 	bl	8006f9c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  // Enable
 80032c8:	2201      	movs	r2, #1
 80032ca:	2120      	movs	r1, #32
 80032cc:	483d      	ldr	r0, [pc, #244]	@ (80033c4 <main+0x14c>)
 80032ce:	f002 fdb7 	bl	8005e40 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//CAN SETUP ID: 0x103
	CAN_init_103();
 80032d2:	f000 fb8b 	bl	80039ec <_Z12CAN_init_103v>
	t1 = micros();
 80032d6:	f000 fb73 	bl	80039c0 <_ZL6microsv>
 80032da:	4603      	mov	r3, r0
 80032dc:	4a3a      	ldr	r2, [pc, #232]	@ (80033c8 <main+0x150>)
 80032de:	6013      	str	r3, [r2, #0]
	t2 = micros();
 80032e0:	f000 fb6e 	bl	80039c0 <_ZL6microsv>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a39      	ldr	r2, [pc, #228]	@ (80033cc <main+0x154>)
 80032e8:	6013      	str	r3, [r2, #0]

	//FOC SETUP
	simpleFOC.initFOC(5.88972235, CW); 			// Do not search!! checked
 80032ea:	2201      	movs	r2, #1
 80032ec:	4938      	ldr	r1, [pc, #224]	@ (80033d0 <main+0x158>)
 80032ee:	4833      	ldr	r0, [pc, #204]	@ (80033bc <main+0x144>)
 80032f0:	f7ff fd58 	bl	8002da4 <_ZN9simpleFOC7initFOCEf9Direction>
//	  sprintf(MSG, "%.3f,%.3f,%.3f \n",sensortest.a,sensortest.b,sensortest.c);
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

		//Position sensor testing
//	    encoder.updateSensor();
	    simpleFOC.readEncoderOnly();
 80032f4:	4831      	ldr	r0, [pc, #196]	@ (80033bc <main+0x144>)
 80032f6:	f7ff ff5b 	bl	80031b0 <_ZN9simpleFOC15readEncoderOnlyEv>
//		HAL_Delay(3);

//  	  ts = micros()-t1;

//=================Closed-loop testing=================
		if(micros() - t1 >= 3000000)
 80032fa:	f000 fb61 	bl	80039c0 <_ZL6microsv>
 80032fe:	4602      	mov	r2, r0
 8003300:	4b31      	ldr	r3, [pc, #196]	@ (80033c8 <main+0x150>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	4a33      	ldr	r2, [pc, #204]	@ (80033d4 <main+0x15c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	bf8c      	ite	hi
 800330c:	2301      	movhi	r3, #1
 800330e:	2300      	movls	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00e      	beq.n	8003334 <main+0xbc>
	    {
	    	t1 = micros();
 8003316:	f000 fb53 	bl	80039c0 <_ZL6microsv>
 800331a:	4603      	mov	r3, r0
 800331c:	4a2a      	ldr	r2, [pc, #168]	@ (80033c8 <main+0x150>)
 800331e:	6013      	str	r3, [r2, #0]
	    	Command_setpoint = Command_setpoint + _PI_2;
 8003320:	4b2d      	ldr	r3, [pc, #180]	@ (80033d8 <main+0x160>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	492d      	ldr	r1, [pc, #180]	@ (80033dc <main+0x164>)
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd fc04 	bl	8000b34 <__addsf3>
 800332c:	4603      	mov	r3, r0
 800332e:	461a      	mov	r2, r3
 8003330:	4b29      	ldr	r3, [pc, #164]	@ (80033d8 <main+0x160>)
 8003332:	601a      	str	r2, [r3, #0]
	    }
	  	if(Command_setpoint > _2PI)
 8003334:	4b28      	ldr	r3, [pc, #160]	@ (80033d8 <main+0x160>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4929      	ldr	r1, [pc, #164]	@ (80033e0 <main+0x168>)
 800333a:	4618      	mov	r0, r3
 800333c:	f7fd febe 	bl	80010bc <__aeabi_fcmpgt>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <main+0xd6>
	  		Command_setpoint = 0.0;
 8003346:	4b24      	ldr	r3, [pc, #144]	@ (80033d8 <main+0x160>)
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

//	  sprintf(MSG, "%.3f,%.3f \n",float_final,shaft_velocity);  		// 134us
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);			  	// 181us

//		Position control
	  	simpleFOC.loopFOC(); 														//1190us --> 495 us
 800334e:	481b      	ldr	r0, [pc, #108]	@ (80033bc <main+0x144>)
 8003350:	f7ff fd5c 	bl	8002e0c <_ZN9simpleFOC7loopFOCEv>
	  	simpleFOC.move_angle(Command_setpoint); 												//161 us --> 112 us
 8003354:	4b20      	ldr	r3, [pc, #128]	@ (80033d8 <main+0x160>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4619      	mov	r1, r3
 800335a:	4818      	ldr	r0, [pc, #96]	@ (80033bc <main+0x144>)
 800335c:	f7ff fdd8 	bl	8002f10 <_ZN9simpleFOC10move_angleEf>
//				t2 = micros();
//				move_angle(0.0f); 	//161 us --> 112 us
//				loopFOC(); 			//1190us --> 495 us
//			}
//		}
		t5 = micros() - t4;
 8003360:	f000 fb2e 	bl	80039c0 <_ZL6microsv>
 8003364:	4602      	mov	r2, r0
 8003366:	4b1f      	ldr	r3, [pc, #124]	@ (80033e4 <main+0x16c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	4a1e      	ldr	r2, [pc, #120]	@ (80033e8 <main+0x170>)
 800336e:	6013      	str	r3, [r2, #0]
		t4 = micros();
 8003370:	f000 fb26 	bl	80039c0 <_ZL6microsv>
 8003374:	4603      	mov	r3, r0
 8003376:	4a1b      	ldr	r2, [pc, #108]	@ (80033e4 <main+0x16c>)
 8003378:	6013      	str	r3, [r2, #0]
		loop_freq = 1.0 / (t5 * 1e-6);
 800337a:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <main+0x170>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f830 	bl	80003e4 <__aeabi_ui2d>
 8003384:	a30a      	add	r3, pc, #40	@ (adr r3, 80033b0 <main+0x138>)
 8003386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338a:	f7fd f8a5 	bl	80004d8 <__aeabi_dmul>
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	f04f 0000 	mov.w	r0, #0
 8003396:	4915      	ldr	r1, [pc, #84]	@ (80033ec <main+0x174>)
 8003398:	f7fd f9c8 	bl	800072c <__aeabi_ddiv>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7fd fb70 	bl	8000a88 <__aeabi_d2f>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4a11      	ldr	r2, [pc, #68]	@ (80033f0 <main+0x178>)
 80033ac:	6013      	str	r3, [r2, #0]
	    simpleFOC.readEncoderOnly();
 80033ae:	e7a1      	b.n	80032f4 <main+0x7c>
 80033b0:	a0b5ed8d 	.word	0xa0b5ed8d
 80033b4:	3eb0c6f7 	.word	0x3eb0c6f7
 80033b8:	2000059c 	.word	0x2000059c
 80033bc:	20000360 	.word	0x20000360
 80033c0:	20000554 	.word	0x20000554
 80033c4:	40010c00 	.word	0x40010c00
 80033c8:	20000678 	.word	0x20000678
 80033cc:	2000067c 	.word	0x2000067c
 80033d0:	40bc789b 	.word	0x40bc789b
 80033d4:	002dc6bf 	.word	0x002dc6bf
 80033d8:	200000b0 	.word	0x200000b0
 80033dc:	3fc90fdb 	.word	0x3fc90fdb
 80033e0:	40c90fdb 	.word	0x40c90fdb
 80033e4:	20000680 	.word	0x20000680
 80033e8:	20000684 	.word	0x20000684
 80033ec:	3ff00000 	.word	0x3ff00000
 80033f0:	20000688 	.word	0x20000688

080033f4 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b094      	sub	sp, #80	@ 0x50
 80033f8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80033fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033fe:	2228      	movs	r2, #40	@ 0x28
 8003400:	2100      	movs	r1, #0
 8003402:	4618      	mov	r0, r3
 8003404:	f006 fb77 	bl	8009af6 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8003408:	f107 0314 	add.w	r3, r7, #20
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8003418:	1d3b      	adds	r3, r7, #4
 800341a:	2200      	movs	r2, #0
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	609a      	str	r2, [r3, #8]
 8003422:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003424:	2301      	movs	r3, #1
 8003426:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003428:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800342c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800342e:	2300      	movs	r3, #0
 8003430:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003432:	2301      	movs	r3, #1
 8003434:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003436:	2302      	movs	r3, #2
 8003438:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800343a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800343e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003440:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8003444:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003446:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800344a:	4618      	mov	r0, r3
 800344c:	f002 fd10 	bl	8005e70 <HAL_RCC_OscConfig>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 8003460:	f000 fb2c 	bl	8003abc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003464:	230f      	movs	r3, #15
 8003466:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003468:	2302      	movs	r3, #2
 800346a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800346c:	2300      	movs	r3, #0
 800346e:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003470:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003474:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	2102      	movs	r1, #2
 8003480:	4618      	mov	r0, r3
 8003482:	f002 ff77 	bl	8006374 <HAL_RCC_ClockConfig>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	bf14      	ite	ne
 800348c:	2301      	movne	r3, #1
 800348e:	2300      	moveq	r3, #0
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <_Z18SystemClock_Configv+0xa6>
		Error_Handler();
 8003496:	f000 fb11 	bl	8003abc <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800349a:	2302      	movs	r3, #2
 800349c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800349e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a2:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80034a4:	1d3b      	adds	r3, r7, #4
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 f8fc 	bl	80066a4 <HAL_RCCEx_PeriphCLKConfig>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	bf14      	ite	ne
 80034b2:	2301      	movne	r3, #1
 80034b4:	2300      	moveq	r3, #0
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <_Z18SystemClock_Configv+0xcc>
		Error_Handler();
 80034bc:	f000 fafe 	bl	8003abc <Error_Handler>
	}
}
 80034c0:	bf00      	nop
 80034c2:	3750      	adds	r7, #80	@ 0x50
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
 80034d6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80034d8:	4b31      	ldr	r3, [pc, #196]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034da:	4a32      	ldr	r2, [pc, #200]	@ (80035a4 <_ZL12MX_ADC1_Initv+0xdc>)
 80034dc:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80034de:	4b30      	ldr	r3, [pc, #192]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80034e6:	4b2e      	ldr	r3, [pc, #184]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80034ec:	4b2c      	ldr	r3, [pc, #176]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80034f2:	4b2b      	ldr	r3, [pc, #172]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034f4:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80034f8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80034fa:	4b29      	ldr	r3, [pc, #164]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 3;
 8003500:	4b27      	ldr	r3, [pc, #156]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8003502:	2203      	movs	r2, #3
 8003504:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003506:	4826      	ldr	r0, [pc, #152]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8003508:	f000 fee2 	bl	80042d0 <HAL_ADC_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	bf14      	ite	ne
 8003512:	2301      	movne	r3, #1
 8003514:	2300      	moveq	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <_ZL12MX_ADC1_Initv+0x58>
		Error_Handler();
 800351c:	f000 face 	bl	8003abc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8003520:	2303      	movs	r3, #3
 8003522:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003524:	2301      	movs	r3, #1
 8003526:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003528:	2307      	movs	r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800352c:	1d3b      	adds	r3, r7, #4
 800352e:	4619      	mov	r1, r3
 8003530:	481b      	ldr	r0, [pc, #108]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8003532:	f001 f89f 	bl	8004674 <HAL_ADC_ConfigChannel>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	bf14      	ite	ne
 800353c:	2301      	movne	r3, #1
 800353e:	2300      	moveq	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <_ZL12MX_ADC1_Initv+0x82>
		Error_Handler();
 8003546:	f000 fab9 	bl	8003abc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800354a:	2308      	movs	r3, #8
 800354c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800354e:	2302      	movs	r3, #2
 8003550:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4812      	ldr	r0, [pc, #72]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 8003558:	f001 f88c 	bl	8004674 <HAL_ADC_ConfigChannel>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	bf14      	ite	ne
 8003562:	2301      	movne	r3, #1
 8003564:	2300      	moveq	r3, #0
 8003566:	b2db      	uxtb	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <_ZL12MX_ADC1_Initv+0xa8>
		Error_Handler();
 800356c:	f000 faa6 	bl	8003abc <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8003570:	2309      	movs	r3, #9
 8003572:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8003574:	2303      	movs	r3, #3
 8003576:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003578:	1d3b      	adds	r3, r7, #4
 800357a:	4619      	mov	r1, r3
 800357c:	4808      	ldr	r0, [pc, #32]	@ (80035a0 <_ZL12MX_ADC1_Initv+0xd8>)
 800357e:	f001 f879 	bl	8004674 <HAL_ADC_ConfigChannel>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf14      	ite	ne
 8003588:	2301      	movne	r3, #1
 800358a:	2300      	moveq	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <_ZL12MX_ADC1_Initv+0xce>
		Error_Handler();
 8003592:	f000 fa93 	bl	8003abc <Error_Handler>
	/* USER CODE BEGIN ADC1_Init 2 */

	//DRV8323RH Unity Gain Bandwidth = 1MHz
	/* USER CODE END ADC1_Init 2 */

}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20000460 	.word	0x20000460
 80035a4:	40012400 	.word	0x40012400

080035a8 <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003618 <_ZL11MX_CAN_Initv+0x70>)
 80035b0:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 80035b2:	4b18      	ldr	r3, [pc, #96]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035b4:	2206      	movs	r2, #6
 80035b6:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80035b8:	4b16      	ldr	r3, [pc, #88]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80035be:	4b15      	ldr	r3, [pc, #84]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035c6:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80035ca:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035d4:	2200      	movs	r2, #0
 80035d6:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80035d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035da:	2201      	movs	r2, #1
 80035dc:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 80035e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035e6:	2201      	movs	r2, #1
 80035e8:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80035ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80035f6:	4807      	ldr	r0, [pc, #28]	@ (8003614 <_ZL11MX_CAN_Initv+0x6c>)
 80035f8:	f001 fa35 	bl	8004a66 <HAL_CAN_Init>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf14      	ite	ne
 8003602:	2301      	movne	r3, #1
 8003604:	2300      	moveq	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <_ZL11MX_CAN_Initv+0x68>
		Error_Handler();
 800360c:	f000 fa56 	bl	8003abc <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8003610:	bf00      	nop
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200004d4 	.word	0x200004d4
 8003618:	40006400 	.word	0x40006400

0800361c <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003620:	4b1a      	ldr	r3, [pc, #104]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003622:	4a1b      	ldr	r2, [pc, #108]	@ (8003690 <_ZL12MX_SPI1_Initv+0x74>)
 8003624:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003626:	4b19      	ldr	r3, [pc, #100]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003628:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800362c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800362e:	4b17      	ldr	r3, [pc, #92]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003630:	2200      	movs	r2, #0
 8003632:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8003634:	4b15      	ldr	r3, [pc, #84]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003636:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800363a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800363c:	4b13      	ldr	r3, [pc, #76]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 800363e:	2200      	movs	r2, #0
 8003640:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003642:	4b12      	ldr	r3, [pc, #72]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003644:	2201      	movs	r2, #1
 8003646:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8003648:	4b10      	ldr	r3, [pc, #64]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 800364a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800364e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003650:	4b0e      	ldr	r3, [pc, #56]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003652:	2228      	movs	r2, #40	@ 0x28
 8003654:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003656:	4b0d      	ldr	r3, [pc, #52]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800365c:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003662:	4b0a      	ldr	r3, [pc, #40]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003664:	2200      	movs	r2, #0
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8003668:	4b08      	ldr	r3, [pc, #32]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 800366a:	220a      	movs	r2, #10
 800366c:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800366e:	4807      	ldr	r0, [pc, #28]	@ (800368c <_ZL12MX_SPI1_Initv+0x70>)
 8003670:	f003 f8ce 	bl	8006810 <HAL_SPI_Init>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	bf14      	ite	ne
 800367a:	2301      	movne	r3, #1
 800367c:	2300      	moveq	r3, #0
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d001      	beq.n	8003688 <_ZL12MX_SPI1_Initv+0x6c>
		Error_Handler();
 8003684:	f000 fa1a 	bl	8003abc <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8003688:	bf00      	nop
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200004fc 	.word	0x200004fc
 8003690:	40013000 	.word	0x40013000

08003694 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	@ 0x38
 8003698:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800369a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80036a8:	f107 0320 	add.w	r3, r7, #32
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80036b2:	1d3b      	adds	r3, r7, #4
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	60da      	str	r2, [r3, #12]
 80036be:	611a      	str	r2, [r3, #16]
 80036c0:	615a      	str	r2, [r3, #20]
 80036c2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80036c4:	4b49      	ldr	r3, [pc, #292]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80036ca:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80036cc:	4b47      	ldr	r3, [pc, #284]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80036d2:	4b46      	ldr	r3, [pc, #280]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036d4:	2220      	movs	r2, #32
 80036d6:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ARR_MAX_CA;
 80036d8:	4b44      	ldr	r3, [pc, #272]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036da:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 80036de:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036e0:	4b42      	ldr	r3, [pc, #264]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80036e6:	4b41      	ldr	r3, [pc, #260]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036e8:	2280      	movs	r2, #128	@ 0x80
 80036ea:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80036ec:	483f      	ldr	r0, [pc, #252]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80036ee:	f003 fb5b 	bl	8006da8 <HAL_TIM_Base_Init>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <_ZL12MX_TIM2_Initv+0x72>
		Error_Handler();
 8003702:	f000 f9db 	bl	8003abc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003706:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800370a:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800370c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003710:	4619      	mov	r1, r3
 8003712:	4836      	ldr	r0, [pc, #216]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 8003714:	f003 fda2 	bl	800725c <HAL_TIM_ConfigClockSource>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <_ZL12MX_TIM2_Initv+0x98>
		Error_Handler();
 8003728:	f000 f9c8 	bl	8003abc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 800372c:	482f      	ldr	r0, [pc, #188]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 800372e:	f003 fbdd 	bl	8006eec <HAL_TIM_PWM_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <_ZL12MX_TIM2_Initv+0xb2>
		Error_Handler();
 8003742:	f000 f9bb 	bl	8003abc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003746:	2320      	movs	r3, #32
 8003748:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800374a:	2300      	movs	r3, #0
 800374c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800374e:	f107 0320 	add.w	r3, r7, #32
 8003752:	4619      	mov	r1, r3
 8003754:	4825      	ldr	r0, [pc, #148]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 8003756:	f004 f8e9 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 800375a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <_ZL12MX_TIM2_Initv+0xda>
		Error_Handler();
 800376a:	f000 f9a7 	bl	8003abc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800376e:	2360      	movs	r3, #96	@ 0x60
 8003770:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003776:	2300      	movs	r3, #0
 8003778:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	2200      	movs	r2, #0
 8003782:	4619      	mov	r1, r3
 8003784:	4819      	ldr	r0, [pc, #100]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 8003786:	f003 fcab 	bl	80070e0 <HAL_TIM_PWM_ConfigChannel>
 800378a:	4603      	mov	r3, r0
			!= HAL_OK) {
 800378c:	2b00      	cmp	r3, #0
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <_ZL12MX_TIM2_Initv+0x10a>
		Error_Handler();
 800379a:	f000 f98f 	bl	8003abc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 800379e:	1d3b      	adds	r3, r7, #4
 80037a0:	2204      	movs	r2, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4811      	ldr	r0, [pc, #68]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80037a6:	f003 fc9b 	bl	80070e0 <HAL_TIM_PWM_ConfigChannel>
 80037aa:	4603      	mov	r3, r0
			!= HAL_OK) {
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	bf14      	ite	ne
 80037b0:	2301      	movne	r3, #1
 80037b2:	2300      	moveq	r3, #0
 80037b4:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <_ZL12MX_TIM2_Initv+0x12a>
		Error_Handler();
 80037ba:	f000 f97f 	bl	8003abc <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80037be:	1d3b      	adds	r3, r7, #4
 80037c0:	2208      	movs	r2, #8
 80037c2:	4619      	mov	r1, r3
 80037c4:	4809      	ldr	r0, [pc, #36]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80037c6:	f003 fc8b 	bl	80070e0 <HAL_TIM_PWM_ConfigChannel>
 80037ca:	4603      	mov	r3, r0
			!= HAL_OK) {
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	bf14      	ite	ne
 80037d0:	2301      	movne	r3, #1
 80037d2:	2300      	moveq	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <_ZL12MX_TIM2_Initv+0x14a>
		Error_Handler();
 80037da:	f000 f96f 	bl	8003abc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80037de:	4803      	ldr	r0, [pc, #12]	@ (80037ec <_ZL12MX_TIM2_Initv+0x158>)
 80037e0:	f000 fb28 	bl	8003e34 <HAL_TIM_MspPostInit>

}
 80037e4:	bf00      	nop
 80037e6:	3738      	adds	r7, #56	@ 0x38
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000554 	.word	0x20000554

080037f0 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80037f4:	4b13      	ldr	r3, [pc, #76]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 80037f6:	4a14      	ldr	r2, [pc, #80]	@ (8003848 <_ZL19MX_USART1_UART_Initv+0x58>)
 80037f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 2000000;
 80037fa:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 80037fc:	4a13      	ldr	r2, [pc, #76]	@ (800384c <_ZL19MX_USART1_UART_Initv+0x5c>)
 80037fe:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003800:	4b10      	ldr	r3, [pc, #64]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003802:	2200      	movs	r2, #0
 8003804:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8003806:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003808:	2200      	movs	r2, #0
 800380a:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800380c:	4b0d      	ldr	r3, [pc, #52]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 800380e:	2200      	movs	r2, #0
 8003810:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8003812:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003814:	220c      	movs	r2, #12
 8003816:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003818:	4b0a      	ldr	r3, [pc, #40]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800381e:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003820:	2200      	movs	r2, #0
 8003822:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8003824:	4807      	ldr	r0, [pc, #28]	@ (8003844 <_ZL19MX_USART1_UART_Initv+0x54>)
 8003826:	f004 f8df 	bl	80079e8 <HAL_UART_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf14      	ite	ne
 8003830:	2301      	movne	r3, #1
 8003832:	2300      	moveq	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <_ZL19MX_USART1_UART_Initv+0x4e>
		Error_Handler();
 800383a:	f000 f93f 	bl	8003abc <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	200005e4 	.word	0x200005e4
 8003848:	40013800 	.word	0x40013800
 800384c:	001e8480 	.word	0x001e8480

08003850 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003856:	4b0c      	ldr	r3, [pc, #48]	@ (8003888 <_ZL11MX_DMA_Initv+0x38>)
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	4a0b      	ldr	r2, [pc, #44]	@ (8003888 <_ZL11MX_DMA_Initv+0x38>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6153      	str	r3, [r2, #20]
 8003862:	4b09      	ldr	r3, [pc, #36]	@ (8003888 <_ZL11MX_DMA_Initv+0x38>)
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	607b      	str	r3, [r7, #4]
 800386c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	200b      	movs	r0, #11
 8003874:	f001 ff3b 	bl	80056ee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003878:	200b      	movs	r0, #11
 800387a:	f001 ff54 	bl	8005726 <HAL_NVIC_EnableIRQ>

}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003892:	f107 0310 	add.w	r3, r7, #16
 8003896:	2200      	movs	r2, #0
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	605a      	str	r2, [r3, #4]
 800389c:	609a      	str	r2, [r3, #8]
 800389e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80038a0:	4b38      	ldr	r3, [pc, #224]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	4a37      	ldr	r2, [pc, #220]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038a6:	f043 0310 	orr.w	r3, r3, #16
 80038aa:	6193      	str	r3, [r2, #24]
 80038ac:	4b35      	ldr	r3, [pc, #212]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	f003 0310 	and.w	r3, r3, #16
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80038b8:	4b32      	ldr	r3, [pc, #200]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	4a31      	ldr	r2, [pc, #196]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6193      	str	r3, [r2, #24]
 80038c4:	4b2f      	ldr	r3, [pc, #188]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	60bb      	str	r3, [r7, #8]
 80038ce:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80038d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038d6:	f043 0304 	orr.w	r3, r3, #4
 80038da:	6193      	str	r3, [r2, #24]
 80038dc:	4b29      	ldr	r3, [pc, #164]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038de:	699b      	ldr	r3, [r3, #24]
 80038e0:	f003 0304 	and.w	r3, r3, #4
 80038e4:	607b      	str	r3, [r7, #4]
 80038e6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80038e8:	4b26      	ldr	r3, [pc, #152]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	4a25      	ldr	r2, [pc, #148]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038ee:	f043 0308 	orr.w	r3, r3, #8
 80038f2:	6193      	str	r3, [r2, #24]
 80038f4:	4b23      	ldr	r3, [pc, #140]	@ (8003984 <_ZL12MX_GPIO_Initv+0xf8>)
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	f003 0308 	and.w	r3, r3, #8
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8003900:	2200      	movs	r2, #0
 8003902:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003906:	4820      	ldr	r0, [pc, #128]	@ (8003988 <_ZL12MX_GPIO_Initv+0xfc>)
 8003908:	f002 fa9a 	bl	8005e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800390c:	2200      	movs	r2, #0
 800390e:	2110      	movs	r1, #16
 8003910:	481e      	ldr	r0, [pc, #120]	@ (800398c <_ZL12MX_GPIO_Initv+0x100>)
 8003912:	f002 fa95 	bl	8005e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | EN_Pin, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 800391c:	481c      	ldr	r0, [pc, #112]	@ (8003990 <_ZL12MX_GPIO_Initv+0x104>)
 800391e:	f002 fa8f 	bl	8005e40 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003922:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003926:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003928:	2301      	movs	r3, #1
 800392a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003930:	2302      	movs	r3, #2
 8003932:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003934:	f107 0310 	add.w	r3, r7, #16
 8003938:	4619      	mov	r1, r3
 800393a:	4813      	ldr	r0, [pc, #76]	@ (8003988 <_ZL12MX_GPIO_Initv+0xfc>)
 800393c:	f002 f8fc 	bl	8005b38 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8003940:	2310      	movs	r3, #16
 8003942:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003944:	2301      	movs	r3, #1
 8003946:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800394c:	2302      	movs	r3, #2
 800394e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8003950:	f107 0310 	add.w	r3, r7, #16
 8003954:	4619      	mov	r1, r3
 8003956:	480d      	ldr	r0, [pc, #52]	@ (800398c <_ZL12MX_GPIO_Initv+0x100>)
 8003958:	f002 f8ee 	bl	8005b38 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 EN_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | EN_Pin;
 800395c:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8003960:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800396a:	2302      	movs	r3, #2
 800396c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800396e:	f107 0310 	add.w	r3, r7, #16
 8003972:	4619      	mov	r1, r3
 8003974:	4806      	ldr	r0, [pc, #24]	@ (8003990 <_ZL12MX_GPIO_Initv+0x104>)
 8003976:	f002 f8df 	bl	8005b38 <HAL_GPIO_Init>

}
 800397a:	bf00      	nop
 800397c:	3720      	adds	r7, #32
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	40021000 	.word	0x40021000
 8003988:	40011000 	.word	0x40011000
 800398c:	40010800 	.word	0x40010800
 8003990:	40010c00 	.word	0x40010c00

08003994 <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */

//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003998:	4b07      	ldr	r3, [pc, #28]	@ (80039b8 <_ZL8DWT_Initv+0x24>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4a06      	ldr	r2, [pc, #24]	@ (80039b8 <_ZL8DWT_Initv+0x24>)
 800399e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80039a2:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <_ZL8DWT_Initv+0x28>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <_ZL8DWT_Initv+0x28>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]
}
 80039b0:	bf00      	nop
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bc80      	pop	{r7}
 80039b6:	4770      	bx	lr
 80039b8:	e000edf0 	.word	0xe000edf0
 80039bc:	e0001000 	.word	0xe0001000

080039c0 <_ZL6microsv>:
	DWT->CYCCNT = 0U;
	while (DWT->CYCCNT < us_count_tic)
		;
}

__STATIC_INLINE uint32_t micros(void) {
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <_ZL6microsv+0x20>)
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <_ZL6microsv+0x24>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4906      	ldr	r1, [pc, #24]	@ (80039e8 <_ZL6microsv+0x28>)
 80039ce:	fba1 1303 	umull	r1, r3, r1, r3
 80039d2:	0c9b      	lsrs	r3, r3, #18
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80039d8:	4618      	mov	r0, r3
 80039da:	46bd      	mov	sp, r7
 80039dc:	bc80      	pop	{r7}
 80039de:	4770      	bx	lr
 80039e0:	e0001000 	.word	0xe0001000
 80039e4:	200000b4 	.word	0x200000b4
 80039e8:	431bde83 	.word	0x431bde83

080039ec <_Z12CAN_init_103v>:
	TxHeader.DLC = 4;  // data length
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.StdId = 0x446;  // ID
}
void CAN_init_103() {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08a      	sub	sp, #40	@ 0x28
 80039f0:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 80039f2:	4823      	ldr	r0, [pc, #140]	@ (8003a80 <_Z12CAN_init_103v+0x94>)
 80039f4:	f001 f9fb 	bl	8004dee <HAL_CAN_Start>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	bf14      	ite	ne
 80039fe:	2301      	movne	r3, #1
 8003a00:	2300      	moveq	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d001      	beq.n	8003a0c <_Z12CAN_init_103v+0x20>
		Error_Handler();
 8003a08:	f000 f858 	bl	8003abc <Error_Handler>
	}

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 8003a10:	2300      	movs	r3, #0
 8003a12:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8003a14:	2301      	movs	r3, #1
 8003a16:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446 << 5;
 8003a18:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8003a1c:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 8003a22:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8003a26:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003a30:	2301      	movs	r3, #1
 8003a32:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10; // doesn't matter in single can controllers
 8003a34:	230a      	movs	r3, #10
 8003a36:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) {
 8003a38:	463b      	mov	r3, r7
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	4810      	ldr	r0, [pc, #64]	@ (8003a80 <_Z12CAN_init_103v+0x94>)
 8003a3e:	f001 f90d 	bl	8004c5c <HAL_CAN_ConfigFilter>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	bf14      	ite	ne
 8003a48:	2301      	movne	r3, #1
 8003a4a:	2300      	moveq	r3, #0
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d001      	beq.n	8003a56 <_Z12CAN_init_103v+0x6a>
		Error_Handler();
 8003a52:	f000 f833 	bl	8003abc <Error_Handler>
	}

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8003a56:	2110      	movs	r1, #16
 8003a58:	4809      	ldr	r0, [pc, #36]	@ (8003a80 <_Z12CAN_init_103v+0x94>)
 8003a5a:	f001 fb1d 	bl	8005098 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;  // data length
 8003a5e:	4b09      	ldr	r3, [pc, #36]	@ (8003a84 <_Z12CAN_init_103v+0x98>)
 8003a60:	2204      	movs	r2, #4
 8003a62:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8003a64:	4b07      	ldr	r3, [pc, #28]	@ (8003a84 <_Z12CAN_init_103v+0x98>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8003a6a:	4b06      	ldr	r3, [pc, #24]	@ (8003a84 <_Z12CAN_init_103v+0x98>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103;  // ID
 8003a70:	4b04      	ldr	r3, [pc, #16]	@ (8003a84 <_Z12CAN_init_103v+0x98>)
 8003a72:	f240 1203 	movw	r2, #259	@ 0x103
 8003a76:	601a      	str	r2, [r3, #0]
}
 8003a78:	bf00      	nop
 8003a7a:	3728      	adds	r7, #40	@ 0x28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200004d4 	.word	0x200004d4
 8003a84:	20000628 	.word	0x20000628

08003a88 <_Z11Bytes2floatPh>:
	u.float_variable = val;
	// Assign bytes to input array
	memcpy(bytes_array, u.temp_array, 4);
}

float Bytes2float(uint8_t *bytes_array) {
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	uint8_t temp_array[4] = { bytes_array[0], bytes_array[1], bytes_array[2],
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	781b      	ldrb	r3, [r3, #0]
			bytes_array[3] };
 8003a94:	723b      	strb	r3, [r7, #8]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	785b      	ldrb	r3, [r3, #1]
 8003a9a:	727b      	strb	r3, [r7, #9]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	789b      	ldrb	r3, [r3, #2]
 8003aa0:	72bb      	strb	r3, [r7, #10]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	78db      	ldrb	r3, [r3, #3]
 8003aa6:	72fb      	strb	r3, [r7, #11]
	float f = *(float*) &temp_array;
 8003aa8:	f107 0308 	add.w	r3, r7, #8
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	60fb      	str	r3, [r7, #12]
	return f;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc80      	pop	{r7}
 8003aba:	4770      	bx	lr

08003abc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac0:	b672      	cpsid	i
}
 8003ac2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003ac4:	bf00      	nop
 8003ac6:	e7fd      	b.n	8003ac4 <Error_Handler+0x8>

08003ac8 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d107      	bne.n	8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d102      	bne.n	8003ae8 <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8003ae2:	4809      	ldr	r0, [pc, #36]	@ (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003ae4:	f7fe ff12 	bl	800290c <_ZN9simpleFOCC1Ev>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d102      	bne.n	8003afe <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003af8:	4803      	ldr	r0, [pc, #12]	@ (8003b08 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003afa:	f7fe ff2f 	bl	800295c <_ZN9simpleFOCD1Ev>
}
 8003afe:	bf00      	nop
 8003b00:	3708      	adds	r7, #8
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000360 	.word	0x20000360

08003b0c <_GLOBAL__sub_I_simpleFOC>:
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b14:	2001      	movs	r0, #1
 8003b16:	f7ff ffd7 	bl	8003ac8 <_Z41__static_initialization_and_destruction_0ii>
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <_GLOBAL__sub_D_simpleFOC>:
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b24:	2000      	movs	r0, #0
 8003b26:	f7ff ffcf 	bl	8003ac8 <_Z41__static_initialization_and_destruction_0ii>
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8003b2c:	b480      	push	{r7}
 8003b2e:	b085      	sub	sp, #20
 8003b30:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_AFIO_CLK_ENABLE();
 8003b32:	4b15      	ldr	r3, [pc, #84]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	4a14      	ldr	r2, [pc, #80]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6193      	str	r3, [r2, #24]
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_PWR_CLK_ENABLE();
 8003b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b4c:	69db      	ldr	r3, [r3, #28]
 8003b4e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b54:	61d3      	str	r3, [r2, #28]
 8003b56:	4b0c      	ldr	r3, [pc, #48]	@ (8003b88 <HAL_MspInit+0x5c>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5e:	607b      	str	r3, [r7, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/

	/** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	 */
	__HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b62:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <HAL_MspInit+0x60>)
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	60fb      	str	r3, [r7, #12]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <HAL_MspInit+0x60>)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6053      	str	r3, [r2, #4]

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8003b7e:	bf00      	nop
 8003b80:	3714      	adds	r7, #20
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bc80      	pop	{r7}
 8003b86:	4770      	bx	lr
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40010000 	.word	0x40010000

08003b90 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	@ 0x28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003b98:	f107 0318 	add.w	r3, r7, #24
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	609a      	str	r2, [r3, #8]
 8003ba4:	60da      	str	r2, [r3, #12]
	if (hadc->Instance == ADC1) {
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a33      	ldr	r2, [pc, #204]	@ (8003c78 <HAL_ADC_MspInit+0xe8>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d15f      	bne.n	8003c70 <HAL_ADC_MspInit+0xe0>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC1_CLK_ENABLE();
 8003bb0:	4b32      	ldr	r3, [pc, #200]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	4a31      	ldr	r2, [pc, #196]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bb6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bba:	6193      	str	r3, [r2, #24]
 8003bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc8:	4b2c      	ldr	r3, [pc, #176]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bce:	f043 0304 	orr.w	r3, r3, #4
 8003bd2:	6193      	str	r3, [r2, #24]
 8003bd4:	4b29      	ldr	r3, [pc, #164]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	f003 0304 	and.w	r3, r3, #4
 8003bdc:	613b      	str	r3, [r7, #16]
 8003bde:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003be0:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a25      	ldr	r2, [pc, #148]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	6193      	str	r3, [r2, #24]
 8003bec:	4b23      	ldr	r3, [pc, #140]	@ (8003c7c <HAL_ADC_MspInit+0xec>)
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	60fb      	str	r3, [r7, #12]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
		/**ADC1 GPIO Configuration
		 PA3     ------> ADC1_IN3
		 PB0     ------> ADC1_IN8
		 PB1     ------> ADC1_IN9
		 */
		GPIO_InitStruct.Pin = SOA_Pin;
 8003bf8:	2308      	movs	r3, #8
 8003bfa:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(SOA_GPIO_Port, &GPIO_InitStruct);
 8003c00:	f107 0318 	add.w	r3, r7, #24
 8003c04:	4619      	mov	r1, r3
 8003c06:	481e      	ldr	r0, [pc, #120]	@ (8003c80 <HAL_ADC_MspInit+0xf0>)
 8003c08:	f001 ff96 	bl	8005b38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = SOB_Pin | SOC_Pin;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	2303      	movs	r3, #3
 8003c12:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	f107 0318 	add.w	r3, r7, #24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	481a      	ldr	r0, [pc, #104]	@ (8003c84 <HAL_ADC_MspInit+0xf4>)
 8003c1c:	f001 ff8c 	bl	8005b38 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA1_Channel1;
 8003c20:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c22:	4a1a      	ldr	r2, [pc, #104]	@ (8003c8c <HAL_ADC_MspInit+0xfc>)
 8003c24:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c26:	4b18      	ldr	r3, [pc, #96]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c28:	2200      	movs	r2, #0
 8003c2a:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c2c:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c2e:	2200      	movs	r2, #0
 8003c30:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003c32:	4b15      	ldr	r3, [pc, #84]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c34:	2280      	movs	r2, #128	@ 0x80
 8003c36:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003c38:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c3e:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c40:	4b11      	ldr	r3, [pc, #68]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c42:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c46:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c48:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c50:	2200      	movs	r2, #0
 8003c52:	61da      	str	r2, [r3, #28]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8003c54:	480c      	ldr	r0, [pc, #48]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c56:	f001 fd81 	bl	800575c <HAL_DMA_Init>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <HAL_ADC_MspInit+0xd4>
			Error_Handler();
 8003c60:	f7ff ff2c 	bl	8003abc <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a08      	ldr	r2, [pc, #32]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <HAL_ADC_MspInit+0xf8>)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6253      	str	r3, [r2, #36]	@ 0x24
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8003c70:	bf00      	nop
 8003c72:	3728      	adds	r7, #40	@ 0x28
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40012400 	.word	0x40012400
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40010800 	.word	0x40010800
 8003c84:	40010c00 	.word	0x40010c00
 8003c88:	20000490 	.word	0x20000490
 8003c8c:	40020008 	.word	0x40020008

08003c90 <HAL_CAN_MspInit>:
 * @brief CAN MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hcan: CAN handle pointer
 * @retval None
 */
void HAL_CAN_MspInit(CAN_HandleTypeDef *hcan) {
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b088      	sub	sp, #32
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003c98:	f107 0310 	add.w	r3, r7, #16
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
	if (hcan->Instance == CAN1) {
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <HAL_CAN_MspInit+0xcc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d151      	bne.n	8003d54 <HAL_CAN_MspInit+0xc4>
		/* USER CODE BEGIN CAN1_MspInit 0 */

		/* USER CODE END CAN1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_CAN1_CLK_ENABLE();
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cb2:	69db      	ldr	r3, [r3, #28]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cb6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003cba:	61d3      	str	r3, [r2, #28]
 8003cbc:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cbe:	69db      	ldr	r3, [r3, #28]
 8003cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc4:	60fb      	str	r3, [r7, #12]
 8003cc6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003cc8:	4b25      	ldr	r3, [pc, #148]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	4a24      	ldr	r2, [pc, #144]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	6193      	str	r3, [r2, #24]
 8003cd4:	4b22      	ldr	r3, [pc, #136]	@ (8003d60 <HAL_CAN_MspInit+0xd0>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	f003 0304 	and.w	r3, r3, #4
 8003cdc:	60bb      	str	r3, [r7, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
		/**CAN GPIO Configuration
		 PA11     ------> CAN_RX
		 PA12     ------> CAN_TX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ce0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ce4:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cee:	f107 0310 	add.w	r3, r7, #16
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	481b      	ldr	r0, [pc, #108]	@ (8003d64 <HAL_CAN_MspInit+0xd4>)
 8003cf6:	f001 ff1f 	bl	8005b38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cfa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cfe:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d00:	2302      	movs	r3, #2
 8003d02:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d04:	2303      	movs	r3, #3
 8003d06:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d08:	f107 0310 	add.w	r3, r7, #16
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4815      	ldr	r0, [pc, #84]	@ (8003d64 <HAL_CAN_MspInit+0xd4>)
 8003d10:	f001 ff12 	bl	8005b38 <HAL_GPIO_Init>

		/* CAN1 interrupt Init */
		HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003d14:	2200      	movs	r2, #0
 8003d16:	2100      	movs	r1, #0
 8003d18:	2013      	movs	r0, #19
 8003d1a:	f001 fce8 	bl	80056ee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003d1e:	2013      	movs	r0, #19
 8003d20:	f001 fd01 	bl	8005726 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003d24:	2200      	movs	r2, #0
 8003d26:	2100      	movs	r1, #0
 8003d28:	2014      	movs	r0, #20
 8003d2a:	f001 fce0 	bl	80056ee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003d2e:	2014      	movs	r0, #20
 8003d30:	f001 fcf9 	bl	8005726 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003d34:	2200      	movs	r2, #0
 8003d36:	2100      	movs	r1, #0
 8003d38:	2015      	movs	r0, #21
 8003d3a:	f001 fcd8 	bl	80056ee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003d3e:	2015      	movs	r0, #21
 8003d40:	f001 fcf1 	bl	8005726 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003d44:	2200      	movs	r2, #0
 8003d46:	2100      	movs	r1, #0
 8003d48:	2016      	movs	r0, #22
 8003d4a:	f001 fcd0 	bl	80056ee <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003d4e:	2016      	movs	r0, #22
 8003d50:	f001 fce9 	bl	8005726 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN CAN1_MspInit 1 */

		/* USER CODE END CAN1_MspInit 1 */
	}

}
 8003d54:	bf00      	nop
 8003d56:	3720      	adds	r7, #32
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	40006400 	.word	0x40006400
 8003d60:	40021000 	.word	0x40021000
 8003d64:	40010800 	.word	0x40010800

08003d68 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	609a      	str	r2, [r3, #8]
 8003d7c:	60da      	str	r2, [r3, #12]
	if (hspi->Instance == SPI1) {
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	@ (8003df0 <HAL_SPI_MspInit+0x88>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d12f      	bne.n	8003de8 <HAL_SPI_MspInit+0x80>
		/* USER CODE BEGIN SPI1_MspInit 0 */

		/* USER CODE END SPI1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 8003d88:	4b1a      	ldr	r3, [pc, #104]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	4a19      	ldr	r2, [pc, #100]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003d8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d92:	6193      	str	r3, [r2, #24]
 8003d94:	4b17      	ldr	r3, [pc, #92]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003d96:	699b      	ldr	r3, [r3, #24]
 8003d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d9c:	60fb      	str	r3, [r7, #12]
 8003d9e:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4a13      	ldr	r2, [pc, #76]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003da6:	f043 0304 	orr.w	r3, r3, #4
 8003daa:	6193      	str	r3, [r2, #24]
 8003dac:	4b11      	ldr	r3, [pc, #68]	@ (8003df4 <HAL_SPI_MspInit+0x8c>)
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
		/**SPI1 GPIO Configuration
		 PA5     ------> SPI1_SCK
		 PA6     ------> SPI1_MISO
		 PA7     ------> SPI1_MOSI
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_7;
 8003db8:	23a0      	movs	r3, #160	@ 0xa0
 8003dba:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc4:	f107 0310 	add.w	r3, r7, #16
 8003dc8:	4619      	mov	r1, r3
 8003dca:	480b      	ldr	r0, [pc, #44]	@ (8003df8 <HAL_SPI_MspInit+0x90>)
 8003dcc:	f001 feb4 	bl	8005b38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003dd0:	2340      	movs	r3, #64	@ 0x40
 8003dd2:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ddc:	f107 0310 	add.w	r3, r7, #16
 8003de0:	4619      	mov	r1, r3
 8003de2:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <HAL_SPI_MspInit+0x90>)
 8003de4:	f001 fea8 	bl	8005b38 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI1_MspInit 1 */

		/* USER CODE END SPI1_MspInit 1 */
	}

}
 8003de8:	bf00      	nop
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013000 	.word	0x40013000
 8003df4:	40021000 	.word	0x40021000
 8003df8:	40010800 	.word	0x40010800

08003dfc <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM2) {
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e0c:	d10b      	bne.n	8003e26 <HAL_TIM_Base_MspInit+0x2a>
		/* USER CODE BEGIN TIM2_MspInit 0 */

		/* USER CODE END TIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003e0e:	4b08      	ldr	r3, [pc, #32]	@ (8003e30 <HAL_TIM_Base_MspInit+0x34>)
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	4a07      	ldr	r2, [pc, #28]	@ (8003e30 <HAL_TIM_Base_MspInit+0x34>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	61d3      	str	r3, [r2, #28]
 8003e1a:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <HAL_TIM_Base_MspInit+0x34>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	60fb      	str	r3, [r7, #12]
 8003e24:	68fb      	ldr	r3, [r7, #12]
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr
 8003e30:	40021000 	.word	0x40021000

08003e34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003e3c:	f107 0310 	add.w	r3, r7, #16
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
	if (htim->Instance == TIM2) {
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e52:	d117      	bne.n	8003e84 <HAL_TIM_MspPostInit+0x50>
		/* USER CODE BEGIN TIM2_MspPostInit 0 */

		/* USER CODE END TIM2_MspPostInit 0 */

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003e54:	4b0d      	ldr	r3, [pc, #52]	@ (8003e8c <HAL_TIM_MspPostInit+0x58>)
 8003e56:	699b      	ldr	r3, [r3, #24]
 8003e58:	4a0c      	ldr	r2, [pc, #48]	@ (8003e8c <HAL_TIM_MspPostInit+0x58>)
 8003e5a:	f043 0304 	orr.w	r3, r3, #4
 8003e5e:	6193      	str	r3, [r2, #24]
 8003e60:	4b0a      	ldr	r3, [pc, #40]	@ (8003e8c <HAL_TIM_MspPostInit+0x58>)
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	60fb      	str	r3, [r7, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
		/**TIM2 GPIO Configuration
		 PA0-WKUP     ------> TIM2_CH1
		 PA1     ------> TIM2_CH2
		 PA2     ------> TIM2_CH3
		 */
		GPIO_InitStruct.Pin = PWMA_Pin | PWMB_Pin | PWMC_Pin;
 8003e6c:	2307      	movs	r3, #7
 8003e6e:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e70:	2302      	movs	r3, #2
 8003e72:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e74:	2302      	movs	r3, #2
 8003e76:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e78:	f107 0310 	add.w	r3, r7, #16
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	4804      	ldr	r0, [pc, #16]	@ (8003e90 <HAL_TIM_MspPostInit+0x5c>)
 8003e80:	f001 fe5a 	bl	8005b38 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 8003e84:	bf00      	nop
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000
 8003e90:	40010800 	.word	0x40010800

08003e94 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b088      	sub	sp, #32
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003e9c:	f107 0310 	add.w	r3, r7, #16
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	605a      	str	r2, [r3, #4]
 8003ea6:	609a      	str	r2, [r3, #8]
 8003ea8:	60da      	str	r2, [r3, #12]
	if (huart->Instance == USART1) {
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1c      	ldr	r2, [pc, #112]	@ (8003f20 <HAL_UART_MspInit+0x8c>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d131      	bne.n	8003f18 <HAL_UART_MspInit+0x84>
		/* USER CODE BEGIN USART1_MspInit 0 */

		/* USER CODE END USART1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 8003eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003eba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ebe:	6193      	str	r3, [r2, #24]
 8003ec0:	4b18      	ldr	r3, [pc, #96]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8003ecc:	4b15      	ldr	r3, [pc, #84]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003ed2:	f043 0304 	orr.w	r3, r3, #4
 8003ed6:	6193      	str	r3, [r2, #24]
 8003ed8:	4b12      	ldr	r3, [pc, #72]	@ (8003f24 <HAL_UART_MspInit+0x90>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	f003 0304 	and.w	r3, r3, #4
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ee4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ee8:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eea:	2302      	movs	r3, #2
 8003eec:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef2:	f107 0310 	add.w	r3, r7, #16
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	480b      	ldr	r0, [pc, #44]	@ (8003f28 <HAL_UART_MspInit+0x94>)
 8003efa:	f001 fe1d 	bl	8005b38 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003efe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f02:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f0c:	f107 0310 	add.w	r3, r7, #16
 8003f10:	4619      	mov	r1, r3
 8003f12:	4805      	ldr	r0, [pc, #20]	@ (8003f28 <HAL_UART_MspInit+0x94>)
 8003f14:	f001 fe10 	bl	8005b38 <HAL_GPIO_Init>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 8003f18:	bf00      	nop
 8003f1a:	3720      	adds	r7, #32
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40013800 	.word	0x40013800
 8003f24:	40021000 	.word	0x40021000
 8003f28:	40010800 	.word	0x40010800

08003f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <NMI_Handler+0x4>

08003f34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <HardFault_Handler+0x4>

08003f3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f40:	bf00      	nop
 8003f42:	e7fd      	b.n	8003f40 <MemManage_Handler+0x4>

08003f44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f48:	bf00      	nop
 8003f4a:	e7fd      	b.n	8003f48 <BusFault_Handler+0x4>

08003f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f50:	bf00      	nop
 8003f52:	e7fd      	b.n	8003f50 <UsageFault_Handler+0x4>

08003f54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f58:	bf00      	nop
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f64:	bf00      	nop
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bc80      	pop	{r7}
 8003f6a:	4770      	bx	lr

08003f6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bc80      	pop	{r7}
 8003f76:	4770      	bx	lr

08003f78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f7c:	f000 f968 	bl	8004250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f80:	bf00      	nop
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f88:	4802      	ldr	r0, [pc, #8]	@ (8003f94 <DMA1_Channel1_IRQHandler+0x10>)
 8003f8a:	f001 fca1 	bl	80058d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f8e:	bf00      	nop
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	20000490 	.word	0x20000490

08003f98 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f9c:	4802      	ldr	r0, [pc, #8]	@ (8003fa8 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003f9e:	f001 f8a0 	bl	80050e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003fa2:	bf00      	nop
 8003fa4:	bd80      	pop	{r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	200004d4 	.word	0x200004d4

08003fac <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003fb0:	4802      	ldr	r0, [pc, #8]	@ (8003fbc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003fb2:	f001 f896 	bl	80050e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	200004d4 	.word	0x200004d4

08003fc0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003fc4:	4802      	ldr	r0, [pc, #8]	@ (8003fd0 <CAN1_RX1_IRQHandler+0x10>)
 8003fc6:	f001 f88c 	bl	80050e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003fca:	bf00      	nop
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	200004d4 	.word	0x200004d4

08003fd4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003fd8:	4802      	ldr	r0, [pc, #8]	@ (8003fe4 <CAN1_SCE_IRQHandler+0x10>)
 8003fda:	f001 f882 	bl	80050e2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003fde:	bf00      	nop
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	200004d4 	.word	0x200004d4

08003fe8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
	return 1;
 8003fec:	2301      	movs	r3, #1
}
 8003fee:	4618      	mov	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr

08003ff6 <_kill>:

int _kill(int pid, int sig)
{
 8003ff6:	b580      	push	{r7, lr}
 8003ff8:	b082      	sub	sp, #8
 8003ffa:	af00      	add	r7, sp, #0
 8003ffc:	6078      	str	r0, [r7, #4]
 8003ffe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004000:	f005 fddc 	bl	8009bbc <__errno>
 8004004:	4603      	mov	r3, r0
 8004006:	2216      	movs	r2, #22
 8004008:	601a      	str	r2, [r3, #0]
	return -1;
 800400a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}

08004016 <_exit>:

void _exit (int status)
{
 8004016:	b580      	push	{r7, lr}
 8004018:	b082      	sub	sp, #8
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800401e:	f04f 31ff 	mov.w	r1, #4294967295
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff ffe7 	bl	8003ff6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <_exit+0x12>

0800402c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004038:	2300      	movs	r3, #0
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	e00a      	b.n	8004054 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800403e:	f3af 8000 	nop.w
 8004042:	4601      	mov	r1, r0
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	60ba      	str	r2, [r7, #8]
 800404a:	b2ca      	uxtb	r2, r1
 800404c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	3301      	adds	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	429a      	cmp	r2, r3
 800405a:	dbf0      	blt.n	800403e <_read+0x12>
	}

return len;
 800405c:	687b      	ldr	r3, [r7, #4]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3718      	adds	r7, #24
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b086      	sub	sp, #24
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
 800406e:	60b9      	str	r1, [r7, #8]
 8004070:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	e009      	b.n	800408c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	60ba      	str	r2, [r7, #8]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	3301      	adds	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	429a      	cmp	r2, r3
 8004092:	dbf1      	blt.n	8004078 <_write+0x12>
	}
	return len;
 8004094:	687b      	ldr	r3, [r7, #4]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <_close>:

int _close(int file)
{
 800409e:	b480      	push	{r7}
 80040a0:	b083      	sub	sp, #12
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
	return -1;
 80040a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	370c      	adds	r7, #12
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr

080040b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80040c4:	605a      	str	r2, [r3, #4]
	return 0;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bc80      	pop	{r7}
 80040d0:	4770      	bx	lr

080040d2 <_isatty>:

int _isatty(int file)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
	return 1;
 80040da:	2301      	movs	r3, #1
}
 80040dc:	4618      	mov	r0, r3
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bc80      	pop	{r7}
 80040e4:	4770      	bx	lr

080040e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040e6:	b480      	push	{r7}
 80040e8:	b085      	sub	sp, #20
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	60f8      	str	r0, [r7, #12]
 80040ee:	60b9      	str	r1, [r7, #8]
 80040f0:	607a      	str	r2, [r7, #4]
	return 0;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bc80      	pop	{r7}
 80040fc:	4770      	bx	lr
	...

08004100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004108:	4a14      	ldr	r2, [pc, #80]	@ (800415c <_sbrk+0x5c>)
 800410a:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <_sbrk+0x60>)
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004114:	4b13      	ldr	r3, [pc, #76]	@ (8004164 <_sbrk+0x64>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d102      	bne.n	8004122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800411c:	4b11      	ldr	r3, [pc, #68]	@ (8004164 <_sbrk+0x64>)
 800411e:	4a12      	ldr	r2, [pc, #72]	@ (8004168 <_sbrk+0x68>)
 8004120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <_sbrk+0x64>)
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4413      	add	r3, r2
 800412a:	693a      	ldr	r2, [r7, #16]
 800412c:	429a      	cmp	r2, r3
 800412e:	d207      	bcs.n	8004140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004130:	f005 fd44 	bl	8009bbc <__errno>
 8004134:	4603      	mov	r3, r0
 8004136:	220c      	movs	r2, #12
 8004138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800413a:	f04f 33ff 	mov.w	r3, #4294967295
 800413e:	e009      	b.n	8004154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004140:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <_sbrk+0x64>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004146:	4b07      	ldr	r3, [pc, #28]	@ (8004164 <_sbrk+0x64>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4413      	add	r3, r2
 800414e:	4a05      	ldr	r2, [pc, #20]	@ (8004164 <_sbrk+0x64>)
 8004150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004152:	68fb      	ldr	r3, [r7, #12]
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20005000 	.word	0x20005000
 8004160:	00000400 	.word	0x00000400
 8004164:	2000068c 	.word	0x2000068c
 8004168:	200007e0 	.word	0x200007e0

0800416c <SystemInit>:
 *         SystemCoreClock variable.
 * @note   This function should be used only after reset.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004170:	bf00      	nop
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004178:	480c      	ldr	r0, [pc, #48]	@ (80041ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800417a:	490d      	ldr	r1, [pc, #52]	@ (80041b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800417c:	4a0d      	ldr	r2, [pc, #52]	@ (80041b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800417e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004180:	e002      	b.n	8004188 <LoopCopyDataInit>

08004182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004186:	3304      	adds	r3, #4

08004188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800418a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800418c:	d3f9      	bcc.n	8004182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800418e:	4a0a      	ldr	r2, [pc, #40]	@ (80041b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004190:	4c0a      	ldr	r4, [pc, #40]	@ (80041bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8004192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004194:	e001      	b.n	800419a <LoopFillZerobss>

08004196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004198:	3204      	adds	r2, #4

0800419a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800419a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800419c:	d3fb      	bcc.n	8004196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800419e:	f7ff ffe5 	bl	800416c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a2:	f005 fd11 	bl	8009bc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80041a6:	f7ff f867 	bl	8003278 <main>
  bx lr
 80041aa:	4770      	bx	lr
  ldr r0, =_sdata
 80041ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80041b0:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 80041b4:	0800bc5c 	.word	0x0800bc5c
  ldr r2, =_sbss
 80041b8:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 80041bc:	200007e0 	.word	0x200007e0

080041c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80041c0:	e7fe      	b.n	80041c0 <ADC1_2_IRQHandler>
	...

080041c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041c8:	4b08      	ldr	r3, [pc, #32]	@ (80041ec <HAL_Init+0x28>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a07      	ldr	r2, [pc, #28]	@ (80041ec <HAL_Init+0x28>)
 80041ce:	f043 0310 	orr.w	r3, r3, #16
 80041d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041d4:	2003      	movs	r0, #3
 80041d6:	f001 fa7f 	bl	80056d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041da:	200f      	movs	r0, #15
 80041dc:	f000 f808 	bl	80041f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041e0:	f7ff fca4 	bl	8003b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041e4:	2300      	movs	r3, #0
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	40022000 	.word	0x40022000

080041f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041f8:	4b12      	ldr	r3, [pc, #72]	@ (8004244 <HAL_InitTick+0x54>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_InitTick+0x58>)
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	4619      	mov	r1, r3
 8004202:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004206:	fbb3 f3f1 	udiv	r3, r3, r1
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	4618      	mov	r0, r3
 8004210:	f001 fa97 	bl	8005742 <HAL_SYSTICK_Config>
 8004214:	4603      	mov	r3, r0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d001      	beq.n	800421e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e00e      	b.n	800423c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b0f      	cmp	r3, #15
 8004222:	d80a      	bhi.n	800423a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004224:	2200      	movs	r2, #0
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	f001 fa5f 	bl	80056ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004230:	4a06      	ldr	r2, [pc, #24]	@ (800424c <HAL_InitTick+0x5c>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004236:	2300      	movs	r3, #0
 8004238:	e000      	b.n	800423c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
}
 800423c:	4618      	mov	r0, r3
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	200000b4 	.word	0x200000b4
 8004248:	200000bc 	.word	0x200000bc
 800424c:	200000b8 	.word	0x200000b8

08004250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004250:	b480      	push	{r7}
 8004252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004254:	4b05      	ldr	r3, [pc, #20]	@ (800426c <HAL_IncTick+0x1c>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_IncTick+0x20>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4413      	add	r3, r2
 8004260:	4a03      	ldr	r2, [pc, #12]	@ (8004270 <HAL_IncTick+0x20>)
 8004262:	6013      	str	r3, [r2, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	200000bc 	.word	0x200000bc
 8004270:	20000690 	.word	0x20000690

08004274 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
  return uwTick;
 8004278:	4b02      	ldr	r3, [pc, #8]	@ (8004284 <HAL_GetTick+0x10>)
 800427a:	681b      	ldr	r3, [r3, #0]
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	bc80      	pop	{r7}
 8004282:	4770      	bx	lr
 8004284:	20000690 	.word	0x20000690

08004288 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004290:	f7ff fff0 	bl	8004274 <HAL_GetTick>
 8004294:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d005      	beq.n	80042ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a2:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <HAL_Delay+0x44>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	4413      	add	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042ae:	bf00      	nop
 80042b0:	f7ff ffe0 	bl	8004274 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d8f7      	bhi.n	80042b0 <HAL_Delay+0x28>
  {
  }
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	200000bc 	.word	0x200000bc

080042d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e0be      	b.n	8004470 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d109      	bne.n	8004314 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7ff fc3e 	bl	8003b90 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 faff 	bl	8004918 <ADC_ConversionStop_Disable>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004322:	f003 0310 	and.w	r3, r3, #16
 8004326:	2b00      	cmp	r3, #0
 8004328:	f040 8099 	bne.w	800445e <HAL_ADC_Init+0x18e>
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 8095 	bne.w	800445e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004338:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800433c:	f023 0302 	bic.w	r3, r3, #2
 8004340:	f043 0202 	orr.w	r2, r3, #2
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004350:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	7b1b      	ldrb	r3, [r3, #12]
 8004356:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004358:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	4313      	orrs	r3, r2
 800435e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004368:	d003      	beq.n	8004372 <HAL_ADC_Init+0xa2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b01      	cmp	r3, #1
 8004370:	d102      	bne.n	8004378 <HAL_ADC_Init+0xa8>
 8004372:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004376:	e000      	b.n	800437a <HAL_ADC_Init+0xaa>
 8004378:	2300      	movs	r3, #0
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	7d1b      	ldrb	r3, [r3, #20]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d119      	bne.n	80043bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	7b1b      	ldrb	r3, [r3, #12]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	3b01      	subs	r3, #1
 8004396:	035a      	lsls	r2, r3, #13
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	4313      	orrs	r3, r2
 800439c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	e00b      	b.n	80043bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	f043 0201 	orr.w	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	4b28      	ldr	r3, [pc, #160]	@ (8004478 <HAL_ADC_Init+0x1a8>)
 80043d8:	4013      	ands	r3, r2
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	68b9      	ldr	r1, [r7, #8]
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ec:	d003      	beq.n	80043f6 <HAL_ADC_Init+0x126>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d104      	bne.n	8004400 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	051b      	lsls	r3, r3, #20
 80043fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004406:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68fa      	ldr	r2, [r7, #12]
 8004410:	430a      	orrs	r2, r1
 8004412:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689a      	ldr	r2, [r3, #8]
 800441a:	4b18      	ldr	r3, [pc, #96]	@ (800447c <HAL_ADC_Init+0x1ac>)
 800441c:	4013      	ands	r3, r2
 800441e:	68ba      	ldr	r2, [r7, #8]
 8004420:	429a      	cmp	r2, r3
 8004422:	d10b      	bne.n	800443c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800442e:	f023 0303 	bic.w	r3, r3, #3
 8004432:	f043 0201 	orr.w	r2, r3, #1
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800443a:	e018      	b.n	800446e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004440:	f023 0312 	bic.w	r3, r3, #18
 8004444:	f043 0210 	orr.w	r2, r3, #16
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	f043 0201 	orr.w	r2, r3, #1
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800445c:	e007      	b.n	800446e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004462:	f043 0210 	orr.w	r2, r3, #16
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	ffe1f7fd 	.word	0xffe1f7fd
 800447c:	ff1f0efe 	.word	0xff1f0efe

08004480 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b086      	sub	sp, #24
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a64      	ldr	r2, [pc, #400]	@ (8004628 <HAL_ADC_Start_DMA+0x1a8>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d004      	beq.n	80044a4 <HAL_ADC_Start_DMA+0x24>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a63      	ldr	r2, [pc, #396]	@ (800462c <HAL_ADC_Start_DMA+0x1ac>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d106      	bne.n	80044b2 <HAL_ADC_Start_DMA+0x32>
 80044a4:	4b60      	ldr	r3, [pc, #384]	@ (8004628 <HAL_ADC_Start_DMA+0x1a8>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f040 80b3 	bne.w	8004618 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d101      	bne.n	80044c0 <HAL_ADC_Start_DMA+0x40>
 80044bc:	2302      	movs	r3, #2
 80044be:	e0ae      	b.n	800461e <HAL_ADC_Start_DMA+0x19e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f9cb 	bl	8004864 <ADC_Enable>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f040 809a 	bne.w	800460e <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044e2:	f023 0301 	bic.w	r3, r3, #1
 80044e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a4e      	ldr	r2, [pc, #312]	@ (800462c <HAL_ADC_Start_DMA+0x1ac>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d105      	bne.n	8004504 <HAL_ADC_Start_DMA+0x84>
 80044f8:	4b4b      	ldr	r3, [pc, #300]	@ (8004628 <HAL_ADC_Start_DMA+0x1a8>)
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d115      	bne.n	8004530 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800451a:	2b00      	cmp	r3, #0
 800451c:	d026      	beq.n	800456c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004522:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004526:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800452e:	e01d      	b.n	800456c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a39      	ldr	r2, [pc, #228]	@ (8004628 <HAL_ADC_Start_DMA+0x1a8>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d004      	beq.n	8004550 <HAL_ADC_Start_DMA+0xd0>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a38      	ldr	r2, [pc, #224]	@ (800462c <HAL_ADC_Start_DMA+0x1ac>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d10d      	bne.n	800456c <HAL_ADC_Start_DMA+0xec>
 8004550:	4b35      	ldr	r3, [pc, #212]	@ (8004628 <HAL_ADC_Start_DMA+0x1a8>)
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004558:	2b00      	cmp	r3, #0
 800455a:	d007      	beq.n	800456c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004560:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004564:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004570:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d006      	beq.n	8004586 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457c:	f023 0206 	bic.w	r2, r3, #6
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004584:	e002      	b.n	800458c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a25      	ldr	r2, [pc, #148]	@ (8004630 <HAL_ADC_Start_DMA+0x1b0>)
 800459a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	4a24      	ldr	r2, [pc, #144]	@ (8004634 <HAL_ADC_Start_DMA+0x1b4>)
 80045a2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	4a23      	ldr	r2, [pc, #140]	@ (8004638 <HAL_ADC_Start_DMA+0x1b8>)
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f06f 0202 	mvn.w	r2, #2
 80045b4:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689a      	ldr	r2, [r3, #8]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80045c4:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a18      	ldr	r0, [r3, #32]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	334c      	adds	r3, #76	@ 0x4c
 80045d0:	4619      	mov	r1, r3
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f001 f91b 	bl	8005810 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80045e4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80045e8:	d108      	bne.n	80045fc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80045f8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80045fa:	e00f      	b.n	800461c <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800460a:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 800460c:	e006      	b.n	800461c <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8004616:	e001      	b.n	800461c <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40012400 	.word	0x40012400
 800462c:	40012800 	.word	0x40012800
 8004630:	0800499b 	.word	0x0800499b
 8004634:	08004a17 	.word	0x08004a17
 8004638:	08004a33 	.word	0x08004a33

0800463c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800464e:	b480      	push	{r7}
 8004650:	b083      	sub	sp, #12
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004656:	bf00      	nop
 8004658:	370c      	adds	r7, #12
 800465a:	46bd      	mov	sp, r7
 800465c:	bc80      	pop	{r7}
 800465e:	4770      	bx	lr

08004660 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004668:	bf00      	nop
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
	...

08004674 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004674:	b480      	push	{r7}
 8004676:	b085      	sub	sp, #20
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004682:	2300      	movs	r3, #0
 8004684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x20>
 8004690:	2302      	movs	r3, #2
 8004692:	e0dc      	b.n	800484e <HAL_ADC_ConfigChannel+0x1da>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	2b06      	cmp	r3, #6
 80046a2:	d81c      	bhi.n	80046de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	685a      	ldr	r2, [r3, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	3b05      	subs	r3, #5
 80046b6:	221f      	movs	r2, #31
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	43db      	mvns	r3, r3
 80046be:	4019      	ands	r1, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	6818      	ldr	r0, [r3, #0]
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	3b05      	subs	r3, #5
 80046d0:	fa00 f203 	lsl.w	r2, r0, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	635a      	str	r2, [r3, #52]	@ 0x34
 80046dc:	e03c      	b.n	8004758 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d81c      	bhi.n	8004720 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	4413      	add	r3, r2
 80046f6:	3b23      	subs	r3, #35	@ 0x23
 80046f8:	221f      	movs	r2, #31
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	43db      	mvns	r3, r3
 8004700:	4019      	ands	r1, r3
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6818      	ldr	r0, [r3, #0]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4413      	add	r3, r2
 8004710:	3b23      	subs	r3, #35	@ 0x23
 8004712:	fa00 f203 	lsl.w	r2, r0, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	430a      	orrs	r2, r1
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30
 800471e:	e01b      	b.n	8004758 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	4613      	mov	r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4413      	add	r3, r2
 8004730:	3b41      	subs	r3, #65	@ 0x41
 8004732:	221f      	movs	r2, #31
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	4019      	ands	r1, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6818      	ldr	r0, [r3, #0]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685a      	ldr	r2, [r3, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	3b41      	subs	r3, #65	@ 0x41
 800474c:	fa00 f203 	lsl.w	r2, r0, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b09      	cmp	r3, #9
 800475e:	d91c      	bls.n	800479a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68d9      	ldr	r1, [r3, #12]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4613      	mov	r3, r2
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	4413      	add	r3, r2
 8004770:	3b1e      	subs	r3, #30
 8004772:	2207      	movs	r2, #7
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	4019      	ands	r1, r3
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	6898      	ldr	r0, [r3, #8]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	4613      	mov	r3, r2
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4413      	add	r3, r2
 800478a:	3b1e      	subs	r3, #30
 800478c:	fa00 f203 	lsl.w	r2, r0, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	60da      	str	r2, [r3, #12]
 8004798:	e019      	b.n	80047ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6919      	ldr	r1, [r3, #16]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	005b      	lsls	r3, r3, #1
 80047a8:	4413      	add	r3, r2
 80047aa:	2207      	movs	r2, #7
 80047ac:	fa02 f303 	lsl.w	r3, r2, r3
 80047b0:	43db      	mvns	r3, r3
 80047b2:	4019      	ands	r1, r3
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	6898      	ldr	r0, [r3, #8]
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	4613      	mov	r3, r2
 80047be:	005b      	lsls	r3, r3, #1
 80047c0:	4413      	add	r3, r2
 80047c2:	fa00 f203 	lsl.w	r2, r0, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b10      	cmp	r3, #16
 80047d4:	d003      	beq.n	80047de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80047da:	2b11      	cmp	r3, #17
 80047dc:	d132      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1d      	ldr	r2, [pc, #116]	@ (8004858 <HAL_ADC_ConfigChannel+0x1e4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d125      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d126      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	689a      	ldr	r2, [r3, #8]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8004804:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b10      	cmp	r3, #16
 800480c:	d11a      	bne.n	8004844 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800480e:	4b13      	ldr	r3, [pc, #76]	@ (800485c <HAL_ADC_ConfigChannel+0x1e8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a13      	ldr	r2, [pc, #76]	@ (8004860 <HAL_ADC_ConfigChannel+0x1ec>)
 8004814:	fba2 2303 	umull	r2, r3, r2, r3
 8004818:	0c9a      	lsrs	r2, r3, #18
 800481a:	4613      	mov	r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	4413      	add	r3, r2
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004824:	e002      	b.n	800482c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	3b01      	subs	r3, #1
 800482a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1f9      	bne.n	8004826 <HAL_ADC_ConfigChannel+0x1b2>
 8004832:	e007      	b.n	8004844 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f043 0220 	orr.w	r2, r3, #32
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800484c:	7bfb      	ldrb	r3, [r7, #15]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	bc80      	pop	{r7}
 8004856:	4770      	bx	lr
 8004858:	40012400 	.word	0x40012400
 800485c:	200000b4 	.word	0x200000b4
 8004860:	431bde83 	.word	0x431bde83

08004864 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800486c:	2300      	movs	r3, #0
 800486e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d040      	beq.n	8004904 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f042 0201 	orr.w	r2, r2, #1
 8004890:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004892:	4b1f      	ldr	r3, [pc, #124]	@ (8004910 <ADC_Enable+0xac>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1f      	ldr	r2, [pc, #124]	@ (8004914 <ADC_Enable+0xb0>)
 8004898:	fba2 2303 	umull	r2, r3, r2, r3
 800489c:	0c9b      	lsrs	r3, r3, #18
 800489e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80048a0:	e002      	b.n	80048a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f9      	bne.n	80048a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80048ae:	f7ff fce1 	bl	8004274 <HAL_GetTick>
 80048b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048b4:	e01f      	b.n	80048f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80048b6:	f7ff fcdd 	bl	8004274 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d918      	bls.n	80048f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 0301 	and.w	r3, r3, #1
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d011      	beq.n	80048f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048d6:	f043 0210 	orr.w	r2, r3, #16
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e2:	f043 0201 	orr.w	r2, r3, #1
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e007      	b.n	8004906 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b01      	cmp	r3, #1
 8004902:	d1d8      	bne.n	80048b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	200000b4 	.word	0x200000b4
 8004914:	431bde83 	.word	0x431bde83

08004918 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b01      	cmp	r3, #1
 8004930:	d12e      	bne.n	8004990 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f022 0201 	bic.w	r2, r2, #1
 8004940:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004942:	f7ff fc97 	bl	8004274 <HAL_GetTick>
 8004946:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004948:	e01b      	b.n	8004982 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800494a:	f7ff fc93 	bl	8004274 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d914      	bls.n	8004982 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b01      	cmp	r3, #1
 8004964:	d10d      	bne.n	8004982 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496a:	f043 0210 	orr.w	r2, r3, #16
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	f043 0201 	orr.w	r2, r3, #1
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e007      	b.n	8004992 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d0dc      	beq.n	800494a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049a6:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d127      	bne.n	8004a04 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80049ca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80049ce:	d115      	bne.n	80049fc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d111      	bne.n	80049fc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f4:	f043 0201 	orr.w	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049fc:	68f8      	ldr	r0, [r7, #12]
 80049fe:	f7ff fe1d 	bl	800463c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004a02:	e004      	b.n	8004a0e <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
}
 8004a0e:	bf00      	nop
 8004a10:	3710      	adds	r7, #16
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b084      	sub	sp, #16
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004a24:	68f8      	ldr	r0, [r7, #12]
 8004a26:	f7ff fe12 	bl	800464e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a2a:	bf00      	nop
 8004a2c:	3710      	adds	r7, #16
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}

08004a32 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004a32:	b580      	push	{r7, lr}
 8004a34:	b084      	sub	sp, #16
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a44:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	f043 0204 	orr.w	r2, r3, #4
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f7ff fe01 	bl	8004660 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}

08004a66 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a66:	b580      	push	{r7, lr}
 8004a68:	b084      	sub	sp, #16
 8004a6a:	af00      	add	r7, sp, #0
 8004a6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0ed      	b.n	8004c54 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d102      	bne.n	8004a8a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff f903 	bl	8003c90 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f042 0201 	orr.w	r2, r2, #1
 8004a98:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9a:	f7ff fbeb 	bl	8004274 <HAL_GetTick>
 8004a9e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004aa0:	e012      	b.n	8004ac8 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aa2:	f7ff fbe7 	bl	8004274 <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b0a      	cmp	r3, #10
 8004aae:	d90b      	bls.n	8004ac8 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2205      	movs	r2, #5
 8004ac0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	e0c5      	b.n	8004c54 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0e5      	beq.n	8004aa2 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f022 0202 	bic.w	r2, r2, #2
 8004ae4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ae6:	f7ff fbc5 	bl	8004274 <HAL_GetTick>
 8004aea:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004aec:	e012      	b.n	8004b14 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aee:	f7ff fbc1 	bl	8004274 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b0a      	cmp	r3, #10
 8004afa:	d90b      	bls.n	8004b14 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b00:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2205      	movs	r2, #5
 8004b0c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e09f      	b.n	8004c54 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d1e5      	bne.n	8004aee <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	7e1b      	ldrb	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d108      	bne.n	8004b3c <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	e007      	b.n	8004b4c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	7e5b      	ldrb	r3, [r3, #25]
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d108      	bne.n	8004b66 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	e007      	b.n	8004b76 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	7e9b      	ldrb	r3, [r3, #26]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d108      	bne.n	8004b90 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f042 0220 	orr.w	r2, r2, #32
 8004b8c:	601a      	str	r2, [r3, #0]
 8004b8e:	e007      	b.n	8004ba0 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 0220 	bic.w	r2, r2, #32
 8004b9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	7edb      	ldrb	r3, [r3, #27]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d108      	bne.n	8004bba <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f022 0210 	bic.w	r2, r2, #16
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e007      	b.n	8004bca <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0210 	orr.w	r2, r2, #16
 8004bc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	7f1b      	ldrb	r3, [r3, #28]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d108      	bne.n	8004be4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0208 	orr.w	r2, r2, #8
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	e007      	b.n	8004bf4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 0208 	bic.w	r2, r2, #8
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	7f5b      	ldrb	r3, [r3, #29]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d108      	bne.n	8004c0e <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f042 0204 	orr.w	r2, r2, #4
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	e007      	b.n	8004c1e <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689a      	ldr	r2, [r3, #8]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	695b      	ldr	r3, [r3, #20]
 8004c32:	ea42 0103 	orr.w	r1, r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	430a      	orrs	r2, r1
 8004c42:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c72:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d003      	beq.n	8004c82 <HAL_CAN_ConfigFilter+0x26>
 8004c7a:	7cfb      	ldrb	r3, [r7, #19]
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	f040 80aa 	bne.w	8004dd6 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c88:	f043 0201 	orr.w	r2, r3, #1
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 031f 	and.w	r3, r3, #31
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	401a      	ands	r2, r3
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d123      	bne.n	8004d04 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004cde:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	3248      	adds	r2, #72	@ 0x48
 8004ce4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cf8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cfa:	6979      	ldr	r1, [r7, #20]
 8004cfc:	3348      	adds	r3, #72	@ 0x48
 8004cfe:	00db      	lsls	r3, r3, #3
 8004d00:	440b      	add	r3, r1
 8004d02:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d122      	bne.n	8004d52 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	431a      	orrs	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004d2c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	3248      	adds	r2, #72	@ 0x48
 8004d32:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d46:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d48:	6979      	ldr	r1, [r7, #20]
 8004d4a:	3348      	adds	r3, #72	@ 0x48
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	440b      	add	r3, r1
 8004d50:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d109      	bne.n	8004d6e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	43db      	mvns	r3, r3
 8004d64:	401a      	ands	r2, r3
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004d6c:	e007      	b.n	8004d7e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d109      	bne.n	8004d9a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	401a      	ands	r2, r3
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004d98:	e007      	b.n	8004daa <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	431a      	orrs	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d107      	bne.n	8004dc2 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004dc8:	f023 0201 	bic.w	r2, r3, #1
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	e006      	b.n	8004de4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
  }
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d12e      	bne.n	8004e60 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e1a:	f7ff fa2b 	bl	8004274 <HAL_GetTick>
 8004e1e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e20:	e012      	b.n	8004e48 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e22:	f7ff fa27 	bl	8004274 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b0a      	cmp	r3, #10
 8004e2e:	d90b      	bls.n	8004e48 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2205      	movs	r2, #5
 8004e40:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e012      	b.n	8004e6e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1e5      	bne.n	8004e22 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	e006      	b.n	8004e6e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e76:	b480      	push	{r7}
 8004e78:	b087      	sub	sp, #28
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	60f8      	str	r0, [r7, #12]
 8004e7e:	60b9      	str	r1, [r7, #8]
 8004e80:	607a      	str	r2, [r7, #4]
 8004e82:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e8a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e8c:	7dfb      	ldrb	r3, [r7, #23]
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d003      	beq.n	8004e9a <HAL_CAN_GetRxMessage+0x24>
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	f040 80f3 	bne.w	8005080 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d10e      	bne.n	8004ebe <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d116      	bne.n	8004edc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0e7      	b.n	800508e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f003 0303 	and.w	r3, r3, #3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d107      	bne.n	8004edc <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0d8      	b.n	800508e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	331b      	adds	r3, #27
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	4413      	add	r3, r2
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0204 	and.w	r2, r3, #4
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10c      	bne.n	8004f14 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	331b      	adds	r3, #27
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	4413      	add	r3, r2
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	0d5b      	lsrs	r3, r3, #21
 8004f0a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	e00b      	b.n	8004f2c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	331b      	adds	r3, #27
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	4413      	add	r3, r2
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	08db      	lsrs	r3, r3, #3
 8004f24:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	331b      	adds	r3, #27
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	4413      	add	r3, r2
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f003 0202 	and.w	r2, r3, #2
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	331b      	adds	r3, #27
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3304      	adds	r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 020f 	and.w	r2, r3, #15
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	331b      	adds	r3, #27
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	4413      	add	r3, r2
 8004f66:	3304      	adds	r3, #4
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	331b      	adds	r3, #27
 8004f7a:	011b      	lsls	r3, r3, #4
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3304      	adds	r3, #4
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	0c1b      	lsrs	r3, r3, #16
 8004f84:	b29a      	uxth	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	b2da      	uxtb	r2, r3
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	0a1a      	lsrs	r2, r3, #8
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	0c1a      	lsrs	r2, r3, #16
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	3302      	adds	r3, #2
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	011b      	lsls	r3, r3, #4
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	0e1a      	lsrs	r2, r3, #24
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	3303      	adds	r3, #3
 8004fea:	b2d2      	uxtb	r2, r2
 8004fec:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	b2d2      	uxtb	r2, r2
 8005004:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	4413      	add	r3, r2
 8005010:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	0a1a      	lsrs	r2, r3, #8
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	3305      	adds	r3, #5
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	4413      	add	r3, r2
 800502a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	0c1a      	lsrs	r2, r3, #16
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3306      	adds	r3, #6
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	4413      	add	r3, r2
 8005044:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	0e1a      	lsrs	r2, r3, #24
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	3307      	adds	r3, #7
 8005050:	b2d2      	uxtb	r2, r2
 8005052:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d108      	bne.n	800506c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0220 	orr.w	r2, r2, #32
 8005068:	60da      	str	r2, [r3, #12]
 800506a:	e007      	b.n	800507c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691a      	ldr	r2, [r3, #16]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0220 	orr.w	r2, r2, #32
 800507a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800507c:	2300      	movs	r3, #0
 800507e:	e006      	b.n	800508e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005084:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800508c:	2301      	movs	r3, #1
  }
}
 800508e:	4618      	mov	r0, r3
 8005090:	371c      	adds	r7, #28
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050a8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80050aa:	7bfb      	ldrb	r3, [r7, #15]
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d002      	beq.n	80050b6 <HAL_CAN_ActivateNotification+0x1e>
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d109      	bne.n	80050ca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	6959      	ldr	r1, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	430a      	orrs	r2, r1
 80050c4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e006      	b.n	80050d8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
  }
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3714      	adds	r7, #20
 80050dc:	46bd      	mov	sp, r7
 80050de:	bc80      	pop	{r7}
 80050e0:	4770      	bx	lr

080050e2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80050e2:	b580      	push	{r7, lr}
 80050e4:	b08a      	sub	sp, #40	@ 0x28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	691b      	ldr	r3, [r3, #16]
 8005114:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	f003 0301 	and.w	r3, r3, #1
 8005124:	2b00      	cmp	r3, #0
 8005126:	d07c      	beq.n	8005222 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	2b00      	cmp	r3, #0
 8005130:	d023      	beq.n	800517a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2201      	movs	r2, #1
 8005138:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f000 f983 	bl	8005450 <HAL_CAN_TxMailbox0CompleteCallback>
 800514a:	e016      	b.n	800517a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b00      	cmp	r3, #0
 8005154:	d004      	beq.n	8005160 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800515c:	627b      	str	r3, [r7, #36]	@ 0x24
 800515e:	e00c      	b.n	800517a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f003 0308 	and.w	r3, r3, #8
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
 8005172:	e002      	b.n	800517a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f986 	bl	8005486 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d024      	beq.n	80051ce <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800518c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f962 	bl	8005462 <HAL_CAN_TxMailbox1CompleteCallback>
 800519e:	e016      	b.n	80051ce <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80051aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ac:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80051b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80051b2:	e00c      	b.n	80051ce <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c6:	e002      	b.n	80051ce <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f965 	bl	8005498 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d024      	beq.n	8005222 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80051e0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d003      	beq.n	80051f4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f941 	bl	8005474 <HAL_CAN_TxMailbox2CompleteCallback>
 80051f2:	e016      	b.n	8005222 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
 8005206:	e00c      	b.n	8005222 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005208:	69bb      	ldr	r3, [r7, #24]
 800520a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	627b      	str	r3, [r7, #36]	@ 0x24
 800521a:	e002      	b.n	8005222 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f944 	bl	80054aa <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f003 0310 	and.w	r3, r3, #16
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	2210      	movs	r2, #16
 8005244:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	2208      	movs	r2, #8
 8005260:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f933 	bl	80054ce <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	f003 0302 	and.w	r3, r3, #2
 800526e:	2b00      	cmp	r3, #0
 8005270:	d009      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	2b00      	cmp	r3, #0
 800527e:	d002      	beq.n	8005286 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 f91b 	bl	80054bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00c      	beq.n	80052aa <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d007      	beq.n	80052aa <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2210      	movs	r2, #16
 80052a8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f003 0308 	and.w	r3, r3, #8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2208      	movs	r2, #8
 80052c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f90a 	bl	80054e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d002      	beq.n	80052ea <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fd ff71 	bl	80031cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00b      	beq.n	800530c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	f003 0310 	and.w	r3, r3, #16
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d006      	beq.n	800530c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2210      	movs	r2, #16
 8005304:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f8f3 	bl	80054f2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00b      	beq.n	800532e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b00      	cmp	r3, #0
 800531e:	d006      	beq.n	800532e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2208      	movs	r2, #8
 8005326:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 f8eb 	bl	8005504 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800532e:	6a3b      	ldr	r3, [r7, #32]
 8005330:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d07b      	beq.n	8005430 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	f003 0304 	and.w	r3, r3, #4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d072      	beq.n	8005428 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005352:	2b00      	cmp	r3, #0
 8005354:	d003      	beq.n	800535e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	f043 0301 	orr.w	r3, r3, #1
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	f043 0302 	orr.w	r3, r3, #2
 8005378:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800538a:	2b00      	cmp	r3, #0
 800538c:	d003      	beq.n	8005396 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	f043 0304 	orr.w	r3, r3, #4
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800539c:	2b00      	cmp	r3, #0
 800539e:	d043      	beq.n	8005428 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d03e      	beq.n	8005428 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80053b0:	2b60      	cmp	r3, #96	@ 0x60
 80053b2:	d02b      	beq.n	800540c <HAL_CAN_IRQHandler+0x32a>
 80053b4:	2b60      	cmp	r3, #96	@ 0x60
 80053b6:	d82e      	bhi.n	8005416 <HAL_CAN_IRQHandler+0x334>
 80053b8:	2b50      	cmp	r3, #80	@ 0x50
 80053ba:	d022      	beq.n	8005402 <HAL_CAN_IRQHandler+0x320>
 80053bc:	2b50      	cmp	r3, #80	@ 0x50
 80053be:	d82a      	bhi.n	8005416 <HAL_CAN_IRQHandler+0x334>
 80053c0:	2b40      	cmp	r3, #64	@ 0x40
 80053c2:	d019      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x316>
 80053c4:	2b40      	cmp	r3, #64	@ 0x40
 80053c6:	d826      	bhi.n	8005416 <HAL_CAN_IRQHandler+0x334>
 80053c8:	2b30      	cmp	r3, #48	@ 0x30
 80053ca:	d010      	beq.n	80053ee <HAL_CAN_IRQHandler+0x30c>
 80053cc:	2b30      	cmp	r3, #48	@ 0x30
 80053ce:	d822      	bhi.n	8005416 <HAL_CAN_IRQHandler+0x334>
 80053d0:	2b10      	cmp	r3, #16
 80053d2:	d002      	beq.n	80053da <HAL_CAN_IRQHandler+0x2f8>
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d005      	beq.n	80053e4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80053d8:	e01d      	b.n	8005416 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80053da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053dc:	f043 0308 	orr.w	r3, r3, #8
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053e2:	e019      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80053e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e6:	f043 0310 	orr.w	r3, r3, #16
 80053ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053ec:	e014      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	f043 0320 	orr.w	r3, r3, #32
 80053f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053f6:	e00f      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005400:	e00a      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800540a:	e005      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800540c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005412:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005414:	e000      	b.n	8005418 <HAL_CAN_IRQHandler+0x336>
            break;
 8005416:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8005426:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2204      	movs	r2, #4
 800542e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	2b00      	cmp	r3, #0
 8005434:	d008      	beq.n	8005448 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f867 	bl	8005516 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005448:	bf00      	nop
 800544a:	3728      	adds	r7, #40	@ 0x28
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	bc80      	pop	{r7}
 8005460:	4770      	bx	lr

08005462 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800546a:	bf00      	nop
 800546c:	370c      	adds	r7, #12
 800546e:	46bd      	mov	sp, r7
 8005470:	bc80      	pop	{r7}
 8005472:	4770      	bx	lr

08005474 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005486:	b480      	push	{r7}
 8005488:	b083      	sub	sp, #12
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800548e:	bf00      	nop
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	bc80      	pop	{r7}
 8005496:	4770      	bx	lr

08005498 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b083      	sub	sp, #12
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80054b2:	bf00      	nop
 80054b4:	370c      	adds	r7, #12
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bc80      	pop	{r7}
 80054ba:	4770      	bx	lr

080054bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bc80      	pop	{r7}
 80054cc:	4770      	bx	lr

080054ce <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	bc80      	pop	{r7}
 80054de:	4770      	bx	lr

080054e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc80      	pop	{r7}
 80054f0:	4770      	bx	lr

080054f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc80      	pop	{r7}
 8005502:	4770      	bx	lr

08005504 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	bc80      	pop	{r7}
 8005514:	4770      	bx	lr

08005516 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	bc80      	pop	{r7}
 8005526:	4770      	bx	lr

08005528 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8005534:	4618      	mov	r0, r3
 8005536:	370c      	adds	r7, #12
 8005538:	46bd      	mov	sp, r7
 800553a:	bc80      	pop	{r7}
 800553c:	4770      	bx	lr
	...

08005540 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8005550:	4b0c      	ldr	r3, [pc, #48]	@ (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8005556:	68ba      	ldr	r2, [r7, #8]
 8005558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800555c:	4013      	ands	r3, r2
 800555e:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	021a      	lsls	r2, r3, #8
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8005568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800556c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005570:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8005572:	4a04      	ldr	r2, [pc, #16]	@ (8005584 <__NVIC_SetPriorityGrouping+0x44>)
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	60d3      	str	r3, [r2, #12]
	}
 8005578:	bf00      	nop
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	e000ed00 	.word	0xe000ed00

08005588 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 800558c:	4b04      	ldr	r3, [pc, #16]	@ (80055a0 <__NVIC_GetPriorityGrouping+0x18>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	0a1b      	lsrs	r3, r3, #8
 8005592:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8005596:	4618      	mov	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	bc80      	pop	{r7}
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	e000ed00 	.word	0xe000ed00

080055a4 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 80055ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db0b      	blt.n	80055ce <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 80055bc:	4906      	ldr	r1, [pc, #24]	@ (80055d8 <__NVIC_EnableIRQ+0x34>)
 80055be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055c2:	095b      	lsrs	r3, r3, #5
 80055c4:	2001      	movs	r0, #1
 80055c6:	fa00 f202 	lsl.w	r2, r0, r2
 80055ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 80055ce:	bf00      	nop
 80055d0:	370c      	adds	r7, #12
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr
 80055d8:	e000e100 	.word	0xe000e100

080055dc <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	6039      	str	r1, [r7, #0]
 80055e6:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 80055e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	db0a      	blt.n	8005606 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	490c      	ldr	r1, [pc, #48]	@ (8005628 <__NVIC_SetPriority+0x4c>)
 80055f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055fa:	0112      	lsls	r2, r2, #4
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	440b      	add	r3, r1
 8005600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8005604:	e00a      	b.n	800561c <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	b2da      	uxtb	r2, r3
 800560a:	4908      	ldr	r1, [pc, #32]	@ (800562c <__NVIC_SetPriority+0x50>)
 800560c:	79fb      	ldrb	r3, [r7, #7]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	3b04      	subs	r3, #4
 8005614:	0112      	lsls	r2, r2, #4
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	440b      	add	r3, r1
 800561a:	761a      	strb	r2, [r3, #24]
	}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	bc80      	pop	{r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	e000e100 	.word	0xe000e100
 800562c:	e000ed00 	.word	0xe000ed00

08005630 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8005630:	b480      	push	{r7}
 8005632:	b089      	sub	sp, #36	@ 0x24
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 800564a:	2b04      	cmp	r3, #4
 800564c:	bf28      	it	cs
 800564e:	2304      	movcs	r3, #4
 8005650:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8005656:	2b06      	cmp	r3, #6
 8005658:	d902      	bls.n	8005660 <NVIC_EncodePriority+0x30>
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3b03      	subs	r3, #3
 800565e:	e000      	b.n	8005662 <NVIC_EncodePriority+0x32>
 8005660:	2300      	movs	r3, #0
		SubPriorityBits =
 8005662:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8005664:	f04f 32ff 	mov.w	r2, #4294967295
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	fa02 f303 	lsl.w	r3, r2, r3
 800566e:	43da      	mvns	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8005678:	f04f 31ff 	mov.w	r1, #4294967295
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	fa01 f303 	lsl.w	r3, r1, r3
 8005682:	43d9      	mvns	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	400b      	ands	r3, r1
 8005688:	4313      	orrs	r3, r2
	}
 800568a:	4618      	mov	r0, r3
 800568c:	3724      	adds	r7, #36	@ 0x24
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3b01      	subs	r3, #1
 80056a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056a4:	d301      	bcc.n	80056aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80056a6:	2301      	movs	r3, #1
 80056a8:	e00f      	b.n	80056ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80056aa:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <SysTick_Config+0x40>)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3b01      	subs	r3, #1
 80056b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80056b2:	210f      	movs	r1, #15
 80056b4:	f04f 30ff 	mov.w	r0, #4294967295
 80056b8:	f7ff ff90 	bl	80055dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80056bc:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <SysTick_Config+0x40>)
 80056be:	2200      	movs	r2, #0
 80056c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80056c2:	4b04      	ldr	r3, [pc, #16]	@ (80056d4 <SysTick_Config+0x40>)
 80056c4:	2207      	movs	r2, #7
 80056c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3708      	adds	r7, #8
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	e000e010 	.word	0xe000e010

080056d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff ff2d 	bl	8005540 <__NVIC_SetPriorityGrouping>
}
 80056e6:	bf00      	nop
 80056e8:	3708      	adds	r7, #8
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}

080056ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ee:	b580      	push	{r7, lr}
 80056f0:	b086      	sub	sp, #24
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	4603      	mov	r3, r0
 80056f6:	60b9      	str	r1, [r7, #8]
 80056f8:	607a      	str	r2, [r7, #4]
 80056fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005700:	f7ff ff42 	bl	8005588 <__NVIC_GetPriorityGrouping>
 8005704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68b9      	ldr	r1, [r7, #8]
 800570a:	6978      	ldr	r0, [r7, #20]
 800570c:	f7ff ff90 	bl	8005630 <NVIC_EncodePriority>
 8005710:	4602      	mov	r2, r0
 8005712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff5f 	bl	80055dc <__NVIC_SetPriority>
}
 800571e:	bf00      	nop
 8005720:	3718      	adds	r7, #24
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005726:	b580      	push	{r7, lr}
 8005728:	b082      	sub	sp, #8
 800572a:	af00      	add	r7, sp, #0
 800572c:	4603      	mov	r3, r0
 800572e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff ff35 	bl	80055a4 <__NVIC_EnableIRQ>
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7ff ffa2 	bl	8005694 <SysTick_Config>
 8005750:	4603      	mov	r3, r0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3708      	adds	r7, #8
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
	...

0800575c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e043      	b.n	80057fa <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	461a      	mov	r2, r3
 8005778:	4b22      	ldr	r3, [pc, #136]	@ (8005804 <HAL_DMA_Init+0xa8>)
 800577a:	4413      	add	r3, r2
 800577c:	4a22      	ldr	r2, [pc, #136]	@ (8005808 <HAL_DMA_Init+0xac>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	091b      	lsrs	r3, r3, #4
 8005784:	009a      	lsls	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4a1f      	ldr	r2, [pc, #124]	@ (800580c <HAL_DMA_Init+0xb0>)
 800578e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80057a6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80057aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80057b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80057c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	695b      	ldr	r3, [r3, #20]
 80057c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80057cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	bc80      	pop	{r7}
 8005802:	4770      	bx	lr
 8005804:	bffdfff8 	.word	0xbffdfff8
 8005808:	cccccccd 	.word	0xcccccccd
 800580c:	40020000 	.word	0x40020000

08005810 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d101      	bne.n	8005830 <HAL_DMA_Start_IT+0x20>
 800582c:	2302      	movs	r3, #2
 800582e:	e04a      	b.n	80058c6 <HAL_DMA_Start_IT+0xb6>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800583e:	2b01      	cmp	r3, #1
 8005840:	d13a      	bne.n	80058b8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2202      	movs	r2, #2
 8005846:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0201 	bic.w	r2, r2, #1
 800585e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f000 f938 	bl	8005adc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005870:	2b00      	cmp	r3, #0
 8005872:	d008      	beq.n	8005886 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f042 020e 	orr.w	r2, r2, #14
 8005882:	601a      	str	r2, [r3, #0]
 8005884:	e00f      	b.n	80058a6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f022 0204 	bic.w	r2, r2, #4
 8005894:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 020a 	orr.w	r2, r2, #10
 80058a4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0201 	orr.w	r2, r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	e005      	b.n	80058c4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80058c0:	2302      	movs	r3, #2
 80058c2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80058c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3718      	adds	r7, #24
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ec:	2204      	movs	r2, #4
 80058ee:	409a      	lsls	r2, r3
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d04f      	beq.n	8005998 <HAL_DMA_IRQHandler+0xc8>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d04a      	beq.n	8005998 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0204 	bic.w	r2, r2, #4
 800591e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a66      	ldr	r2, [pc, #408]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1f0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d029      	beq.n	800597e <HAL_DMA_IRQHandler+0xae>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a65      	ldr	r2, [pc, #404]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1f4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d022      	beq.n	800597a <HAL_DMA_IRQHandler+0xaa>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a63      	ldr	r2, [pc, #396]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1f8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d01a      	beq.n	8005974 <HAL_DMA_IRQHandler+0xa4>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a62      	ldr	r2, [pc, #392]	@ (8005acc <HAL_DMA_IRQHandler+0x1fc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d012      	beq.n	800596e <HAL_DMA_IRQHandler+0x9e>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a60      	ldr	r2, [pc, #384]	@ (8005ad0 <HAL_DMA_IRQHandler+0x200>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d00a      	beq.n	8005968 <HAL_DMA_IRQHandler+0x98>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a5f      	ldr	r2, [pc, #380]	@ (8005ad4 <HAL_DMA_IRQHandler+0x204>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d102      	bne.n	8005962 <HAL_DMA_IRQHandler+0x92>
 800595c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005960:	e00e      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 8005962:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005966:	e00b      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 8005968:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800596c:	e008      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 800596e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005972:	e005      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 8005974:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005978:	e002      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 800597a:	2340      	movs	r3, #64	@ 0x40
 800597c:	e000      	b.n	8005980 <HAL_DMA_IRQHandler+0xb0>
 800597e:	2304      	movs	r3, #4
 8005980:	4a55      	ldr	r2, [pc, #340]	@ (8005ad8 <HAL_DMA_IRQHandler+0x208>)
 8005982:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8094 	beq.w	8005ab6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005996:	e08e      	b.n	8005ab6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599c:	2202      	movs	r2, #2
 800599e:	409a      	lsls	r2, r3
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d056      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x186>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d051      	beq.n	8005a56 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d10b      	bne.n	80059d8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f022 020a 	bic.w	r2, r2, #10
 80059ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a38      	ldr	r2, [pc, #224]	@ (8005ac0 <HAL_DMA_IRQHandler+0x1f0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d029      	beq.n	8005a36 <HAL_DMA_IRQHandler+0x166>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a37      	ldr	r2, [pc, #220]	@ (8005ac4 <HAL_DMA_IRQHandler+0x1f4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d022      	beq.n	8005a32 <HAL_DMA_IRQHandler+0x162>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a35      	ldr	r2, [pc, #212]	@ (8005ac8 <HAL_DMA_IRQHandler+0x1f8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d01a      	beq.n	8005a2c <HAL_DMA_IRQHandler+0x15c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a34      	ldr	r2, [pc, #208]	@ (8005acc <HAL_DMA_IRQHandler+0x1fc>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d012      	beq.n	8005a26 <HAL_DMA_IRQHandler+0x156>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a32      	ldr	r2, [pc, #200]	@ (8005ad0 <HAL_DMA_IRQHandler+0x200>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00a      	beq.n	8005a20 <HAL_DMA_IRQHandler+0x150>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a31      	ldr	r2, [pc, #196]	@ (8005ad4 <HAL_DMA_IRQHandler+0x204>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d102      	bne.n	8005a1a <HAL_DMA_IRQHandler+0x14a>
 8005a14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005a18:	e00e      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a1e:	e00b      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005a24:	e008      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a2a:	e005      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a2c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005a30:	e002      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a32:	2320      	movs	r3, #32
 8005a34:	e000      	b.n	8005a38 <HAL_DMA_IRQHandler+0x168>
 8005a36:	2302      	movs	r3, #2
 8005a38:	4a27      	ldr	r2, [pc, #156]	@ (8005ad8 <HAL_DMA_IRQHandler+0x208>)
 8005a3a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d034      	beq.n	8005ab6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a54:	e02f      	b.n	8005ab6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	2208      	movs	r2, #8
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d028      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x1e8>
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	f003 0308 	and.w	r3, r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d023      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 020e 	bic.w	r2, r2, #14
 8005a7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a88:	2101      	movs	r1, #1
 8005a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d004      	beq.n	8005ab8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	4798      	blx	r3
    }
  }
  return;
 8005ab6:	bf00      	nop
 8005ab8:	bf00      	nop
}
 8005aba:	3710      	adds	r7, #16
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	40020008 	.word	0x40020008
 8005ac4:	4002001c 	.word	0x4002001c
 8005ac8:	40020030 	.word	0x40020030
 8005acc:	40020044 	.word	0x40020044
 8005ad0:	40020058 	.word	0x40020058
 8005ad4:	4002006c 	.word	0x4002006c
 8005ad8:	40020000 	.word	0x40020000

08005adc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
 8005ae8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af2:	2101      	movs	r1, #1
 8005af4:	fa01 f202 	lsl.w	r2, r1, r2
 8005af8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	2b10      	cmp	r3, #16
 8005b08:	d108      	bne.n	8005b1c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005b1a:	e007      	b.n	8005b2c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68ba      	ldr	r2, [r7, #8]
 8005b22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	60da      	str	r2, [r3, #12]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bc80      	pop	{r7}
 8005b34:	4770      	bx	lr
	...

08005b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b08b      	sub	sp, #44	@ 0x2c
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b42:	2300      	movs	r3, #0
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b46:	2300      	movs	r3, #0
 8005b48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b4a:	e169      	b.n	8005e20 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	69fa      	ldr	r2, [r7, #28]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b60:	69ba      	ldr	r2, [r7, #24]
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	f040 8158 	bne.w	8005e1a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	4a9a      	ldr	r2, [pc, #616]	@ (8005dd8 <HAL_GPIO_Init+0x2a0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d05e      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
 8005b74:	4a98      	ldr	r2, [pc, #608]	@ (8005dd8 <HAL_GPIO_Init+0x2a0>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d875      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005b7a:	4a98      	ldr	r2, [pc, #608]	@ (8005ddc <HAL_GPIO_Init+0x2a4>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d058      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
 8005b80:	4a96      	ldr	r2, [pc, #600]	@ (8005ddc <HAL_GPIO_Init+0x2a4>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d86f      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005b86:	4a96      	ldr	r2, [pc, #600]	@ (8005de0 <HAL_GPIO_Init+0x2a8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d052      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
 8005b8c:	4a94      	ldr	r2, [pc, #592]	@ (8005de0 <HAL_GPIO_Init+0x2a8>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d869      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005b92:	4a94      	ldr	r2, [pc, #592]	@ (8005de4 <HAL_GPIO_Init+0x2ac>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d04c      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
 8005b98:	4a92      	ldr	r2, [pc, #584]	@ (8005de4 <HAL_GPIO_Init+0x2ac>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d863      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005b9e:	4a92      	ldr	r2, [pc, #584]	@ (8005de8 <HAL_GPIO_Init+0x2b0>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d046      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
 8005ba4:	4a90      	ldr	r2, [pc, #576]	@ (8005de8 <HAL_GPIO_Init+0x2b0>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d85d      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005baa:	2b12      	cmp	r3, #18
 8005bac:	d82a      	bhi.n	8005c04 <HAL_GPIO_Init+0xcc>
 8005bae:	2b12      	cmp	r3, #18
 8005bb0:	d859      	bhi.n	8005c66 <HAL_GPIO_Init+0x12e>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <HAL_GPIO_Init+0x80>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005c33 	.word	0x08005c33
 8005bbc:	08005c0d 	.word	0x08005c0d
 8005bc0:	08005c1f 	.word	0x08005c1f
 8005bc4:	08005c61 	.word	0x08005c61
 8005bc8:	08005c67 	.word	0x08005c67
 8005bcc:	08005c67 	.word	0x08005c67
 8005bd0:	08005c67 	.word	0x08005c67
 8005bd4:	08005c67 	.word	0x08005c67
 8005bd8:	08005c67 	.word	0x08005c67
 8005bdc:	08005c67 	.word	0x08005c67
 8005be0:	08005c67 	.word	0x08005c67
 8005be4:	08005c67 	.word	0x08005c67
 8005be8:	08005c67 	.word	0x08005c67
 8005bec:	08005c67 	.word	0x08005c67
 8005bf0:	08005c67 	.word	0x08005c67
 8005bf4:	08005c67 	.word	0x08005c67
 8005bf8:	08005c67 	.word	0x08005c67
 8005bfc:	08005c15 	.word	0x08005c15
 8005c00:	08005c29 	.word	0x08005c29
 8005c04:	4a79      	ldr	r2, [pc, #484]	@ (8005dec <HAL_GPIO_Init+0x2b4>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d013      	beq.n	8005c32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005c0a:	e02c      	b.n	8005c66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	623b      	str	r3, [r7, #32]
          break;
 8005c12:	e029      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	3304      	adds	r3, #4
 8005c1a:	623b      	str	r3, [r7, #32]
          break;
 8005c1c:	e024      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	3308      	adds	r3, #8
 8005c24:	623b      	str	r3, [r7, #32]
          break;
 8005c26:	e01f      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	330c      	adds	r3, #12
 8005c2e:	623b      	str	r3, [r7, #32]
          break;
 8005c30:	e01a      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d102      	bne.n	8005c40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005c3a:	2304      	movs	r3, #4
 8005c3c:	623b      	str	r3, [r7, #32]
          break;
 8005c3e:	e013      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d105      	bne.n	8005c54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c48:	2308      	movs	r3, #8
 8005c4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	611a      	str	r2, [r3, #16]
          break;
 8005c52:	e009      	b.n	8005c68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c54:	2308      	movs	r3, #8
 8005c56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	615a      	str	r2, [r3, #20]
          break;
 8005c5e:	e003      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
          break;
 8005c64:	e000      	b.n	8005c68 <HAL_GPIO_Init+0x130>
          break;
 8005c66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	2bff      	cmp	r3, #255	@ 0xff
 8005c6c:	d801      	bhi.n	8005c72 <HAL_GPIO_Init+0x13a>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	e001      	b.n	8005c76 <HAL_GPIO_Init+0x13e>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3304      	adds	r3, #4
 8005c76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	2bff      	cmp	r3, #255	@ 0xff
 8005c7c:	d802      	bhi.n	8005c84 <HAL_GPIO_Init+0x14c>
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	e002      	b.n	8005c8a <HAL_GPIO_Init+0x152>
 8005c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c86:	3b08      	subs	r3, #8
 8005c88:	009b      	lsls	r3, r3, #2
 8005c8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	210f      	movs	r1, #15
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	fa01 f303 	lsl.w	r3, r1, r3
 8005c98:	43db      	mvns	r3, r3
 8005c9a:	401a      	ands	r2, r3
 8005c9c:	6a39      	ldr	r1, [r7, #32]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ca4:	431a      	orrs	r2, r3
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80b1 	beq.w	8005e1a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8005df0 <HAL_GPIO_Init+0x2b8>)
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8005df0 <HAL_GPIO_Init+0x2b8>)
 8005cbe:	f043 0301 	orr.w	r3, r3, #1
 8005cc2:	6193      	str	r3, [r2, #24]
 8005cc4:	4b4a      	ldr	r3, [pc, #296]	@ (8005df0 <HAL_GPIO_Init+0x2b8>)
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	60bb      	str	r3, [r7, #8]
 8005cce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005cd0:	4a48      	ldr	r2, [pc, #288]	@ (8005df4 <HAL_GPIO_Init+0x2bc>)
 8005cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd4:	089b      	lsrs	r3, r3, #2
 8005cd6:	3302      	adds	r3, #2
 8005cd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	f003 0303 	and.w	r3, r3, #3
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	220f      	movs	r2, #15
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	43db      	mvns	r3, r3
 8005cee:	68fa      	ldr	r2, [r7, #12]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a40      	ldr	r2, [pc, #256]	@ (8005df8 <HAL_GPIO_Init+0x2c0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <HAL_GPIO_Init+0x1ec>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3f      	ldr	r2, [pc, #252]	@ (8005dfc <HAL_GPIO_Init+0x2c4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00d      	beq.n	8005d20 <HAL_GPIO_Init+0x1e8>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3e      	ldr	r2, [pc, #248]	@ (8005e00 <HAL_GPIO_Init+0x2c8>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <HAL_GPIO_Init+0x1e4>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3d      	ldr	r2, [pc, #244]	@ (8005e04 <HAL_GPIO_Init+0x2cc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d101      	bne.n	8005d18 <HAL_GPIO_Init+0x1e0>
 8005d14:	2303      	movs	r3, #3
 8005d16:	e006      	b.n	8005d26 <HAL_GPIO_Init+0x1ee>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	e004      	b.n	8005d26 <HAL_GPIO_Init+0x1ee>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e002      	b.n	8005d26 <HAL_GPIO_Init+0x1ee>
 8005d20:	2301      	movs	r3, #1
 8005d22:	e000      	b.n	8005d26 <HAL_GPIO_Init+0x1ee>
 8005d24:	2300      	movs	r3, #0
 8005d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d28:	f002 0203 	and.w	r2, r2, #3
 8005d2c:	0092      	lsls	r2, r2, #2
 8005d2e:	4093      	lsls	r3, r2
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005d36:	492f      	ldr	r1, [pc, #188]	@ (8005df4 <HAL_GPIO_Init+0x2bc>)
 8005d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3a:	089b      	lsrs	r3, r3, #2
 8005d3c:	3302      	adds	r3, #2
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d50:	4b2d      	ldr	r3, [pc, #180]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	492c      	ldr	r1, [pc, #176]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	600b      	str	r3, [r1, #0]
 8005d5c:	e006      	b.n	8005d6c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	69bb      	ldr	r3, [r7, #24]
 8005d64:	43db      	mvns	r3, r3
 8005d66:	4928      	ldr	r1, [pc, #160]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d68:	4013      	ands	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d006      	beq.n	8005d86 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d78:	4b23      	ldr	r3, [pc, #140]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d7a:	685a      	ldr	r2, [r3, #4]
 8005d7c:	4922      	ldr	r1, [pc, #136]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	604b      	str	r3, [r1, #4]
 8005d84:	e006      	b.n	8005d94 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d86:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	43db      	mvns	r3, r3
 8005d8e:	491e      	ldr	r1, [pc, #120]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d006      	beq.n	8005dae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005da0:	4b19      	ldr	r3, [pc, #100]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005da2:	689a      	ldr	r2, [r3, #8]
 8005da4:	4918      	ldr	r1, [pc, #96]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005da6:	69bb      	ldr	r3, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]
 8005dac:	e006      	b.n	8005dbc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005dae:	4b16      	ldr	r3, [pc, #88]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	43db      	mvns	r3, r3
 8005db6:	4914      	ldr	r1, [pc, #80]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005db8:	4013      	ands	r3, r2
 8005dba:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d021      	beq.n	8005e0c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005dca:	68da      	ldr	r2, [r3, #12]
 8005dcc:	490e      	ldr	r1, [pc, #56]	@ (8005e08 <HAL_GPIO_Init+0x2d0>)
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	60cb      	str	r3, [r1, #12]
 8005dd4:	e021      	b.n	8005e1a <HAL_GPIO_Init+0x2e2>
 8005dd6:	bf00      	nop
 8005dd8:	10320000 	.word	0x10320000
 8005ddc:	10310000 	.word	0x10310000
 8005de0:	10220000 	.word	0x10220000
 8005de4:	10210000 	.word	0x10210000
 8005de8:	10120000 	.word	0x10120000
 8005dec:	10110000 	.word	0x10110000
 8005df0:	40021000 	.word	0x40021000
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010800 	.word	0x40010800
 8005dfc:	40010c00 	.word	0x40010c00
 8005e00:	40011000 	.word	0x40011000
 8005e04:	40011400 	.word	0x40011400
 8005e08:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e3c <HAL_GPIO_Init+0x304>)
 8005e0e:	68da      	ldr	r2, [r3, #12]
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	43db      	mvns	r3, r3
 8005e14:	4909      	ldr	r1, [pc, #36]	@ (8005e3c <HAL_GPIO_Init+0x304>)
 8005e16:	4013      	ands	r3, r2
 8005e18:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e26:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f47f ae8e 	bne.w	8005b4c <HAL_GPIO_Init+0x14>
  }
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	372c      	adds	r7, #44	@ 0x2c
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bc80      	pop	{r7}
 8005e3a:	4770      	bx	lr
 8005e3c:	40010400 	.word	0x40010400

08005e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e50:	787b      	ldrb	r3, [r7, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e5c:	e003      	b.n	8005e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e5e:	887b      	ldrh	r3, [r7, #2]
 8005e60:	041a      	lsls	r2, r3, #16
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	611a      	str	r2, [r3, #16]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bc80      	pop	{r7}
 8005e6e:	4770      	bx	lr

08005e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e272      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 8087 	beq.w	8005f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e90:	4b92      	ldr	r3, [pc, #584]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	f003 030c 	and.w	r3, r3, #12
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d00c      	beq.n	8005eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e9c:	4b8f      	ldr	r3, [pc, #572]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 030c 	and.w	r3, r3, #12
 8005ea4:	2b08      	cmp	r3, #8
 8005ea6:	d112      	bne.n	8005ece <HAL_RCC_OscConfig+0x5e>
 8005ea8:	4b8c      	ldr	r3, [pc, #560]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005eb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005eb4:	d10b      	bne.n	8005ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005eb6:	4b89      	ldr	r3, [pc, #548]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d06c      	beq.n	8005f9c <HAL_RCC_OscConfig+0x12c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d168      	bne.n	8005f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e24c      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ed6:	d106      	bne.n	8005ee6 <HAL_RCC_OscConfig+0x76>
 8005ed8:	4b80      	ldr	r3, [pc, #512]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a7f      	ldr	r2, [pc, #508]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee2:	6013      	str	r3, [r2, #0]
 8005ee4:	e02e      	b.n	8005f44 <HAL_RCC_OscConfig+0xd4>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <HAL_RCC_OscConfig+0x98>
 8005eee:	4b7b      	ldr	r3, [pc, #492]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a7a      	ldr	r2, [pc, #488]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005ef4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	4b78      	ldr	r3, [pc, #480]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a77      	ldr	r2, [pc, #476]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f00:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e01d      	b.n	8005f44 <HAL_RCC_OscConfig+0xd4>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0xbc>
 8005f12:	4b72      	ldr	r3, [pc, #456]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a71      	ldr	r2, [pc, #452]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b6f      	ldr	r3, [pc, #444]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6e      	ldr	r2, [pc, #440]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0xd4>
 8005f2c:	4b6b      	ldr	r3, [pc, #428]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a6a      	ldr	r2, [pc, #424]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b68      	ldr	r3, [pc, #416]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a67      	ldr	r2, [pc, #412]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7fe f992 	bl	8004274 <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f54:	f7fe f98e 	bl	8004274 <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	@ 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e200      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f66:	4b5d      	ldr	r3, [pc, #372]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0xe4>
 8005f72:	e014      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fe f97e 	bl	8004274 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f7c:	f7fe f97a 	bl	8004274 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	@ 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e1ec      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8e:	4b53      	ldr	r3, [pc, #332]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x10c>
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d063      	beq.n	8006072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005faa:	4b4c      	ldr	r3, [pc, #304]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005fb6:	4b49      	ldr	r3, [pc, #292]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f003 030c 	and.w	r3, r3, #12
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d11c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x18c>
 8005fc2:	4b46      	ldr	r3, [pc, #280]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d116      	bne.n	8005ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fce:	4b43      	ldr	r3, [pc, #268]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x176>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e1c0      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4b3d      	ldr	r3, [pc, #244]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4939      	ldr	r1, [pc, #228]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffa:	e03a      	b.n	8006072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006004:	4b36      	ldr	r3, [pc, #216]	@ (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600a:	f7fe f933 	bl	8004274 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006012:	f7fe f92f 	bl	8004274 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e1a1      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006024:	4b2d      	ldr	r3, [pc, #180]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b2a      	ldr	r3, [pc, #168]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	695b      	ldr	r3, [r3, #20]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4927      	ldr	r1, [pc, #156]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
 8006044:	e015      	b.n	8006072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006046:	4b26      	ldr	r3, [pc, #152]	@ (80060e0 <HAL_RCC_OscConfig+0x270>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800604c:	f7fe f912 	bl	8004274 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006054:	f7fe f90e 	bl	8004274 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e180      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006066:	4b1d      	ldr	r3, [pc, #116]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d03a      	beq.n	80060f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d019      	beq.n	80060ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006086:	4b17      	ldr	r3, [pc, #92]	@ (80060e4 <HAL_RCC_OscConfig+0x274>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800608c:	f7fe f8f2 	bl	8004274 <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006094:	f7fe f8ee 	bl	8004274 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e160      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a6:	4b0d      	ldr	r3, [pc, #52]	@ (80060dc <HAL_RCC_OscConfig+0x26c>)
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80060b2:	2001      	movs	r0, #1
 80060b4:	f000 fad8 	bl	8006668 <RCC_Delay>
 80060b8:	e01c      	b.n	80060f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060ba:	4b0a      	ldr	r3, [pc, #40]	@ (80060e4 <HAL_RCC_OscConfig+0x274>)
 80060bc:	2200      	movs	r2, #0
 80060be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c0:	f7fe f8d8 	bl	8004274 <HAL_GetTick>
 80060c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c6:	e00f      	b.n	80060e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060c8:	f7fe f8d4 	bl	8004274 <HAL_GetTick>
 80060cc:	4602      	mov	r2, r0
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d908      	bls.n	80060e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e146      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
 80060da:	bf00      	nop
 80060dc:	40021000 	.word	0x40021000
 80060e0:	42420000 	.word	0x42420000
 80060e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e8:	4b92      	ldr	r3, [pc, #584]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1e9      	bne.n	80060c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	f000 80a6 	beq.w	800624e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006106:	4b8b      	ldr	r3, [pc, #556]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10d      	bne.n	800612e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006112:	4b88      	ldr	r3, [pc, #544]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	4a87      	ldr	r2, [pc, #540]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800611c:	61d3      	str	r3, [r2, #28]
 800611e:	4b85      	ldr	r3, [pc, #532]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006120:	69db      	ldr	r3, [r3, #28]
 8006122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006126:	60bb      	str	r3, [r7, #8]
 8006128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800612a:	2301      	movs	r3, #1
 800612c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612e:	4b82      	ldr	r3, [pc, #520]	@ (8006338 <HAL_RCC_OscConfig+0x4c8>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006136:	2b00      	cmp	r3, #0
 8006138:	d118      	bne.n	800616c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800613a:	4b7f      	ldr	r3, [pc, #508]	@ (8006338 <HAL_RCC_OscConfig+0x4c8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a7e      	ldr	r2, [pc, #504]	@ (8006338 <HAL_RCC_OscConfig+0x4c8>)
 8006140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006146:	f7fe f895 	bl	8004274 <HAL_GetTick>
 800614a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614e:	f7fe f891 	bl	8004274 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b64      	cmp	r3, #100	@ 0x64
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e103      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006160:	4b75      	ldr	r3, [pc, #468]	@ (8006338 <HAL_RCC_OscConfig+0x4c8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0f0      	beq.n	800614e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d106      	bne.n	8006182 <HAL_RCC_OscConfig+0x312>
 8006174:	4b6f      	ldr	r3, [pc, #444]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006176:	6a1b      	ldr	r3, [r3, #32]
 8006178:	4a6e      	ldr	r2, [pc, #440]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	f043 0301 	orr.w	r3, r3, #1
 800617e:	6213      	str	r3, [r2, #32]
 8006180:	e02d      	b.n	80061de <HAL_RCC_OscConfig+0x36e>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	68db      	ldr	r3, [r3, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10c      	bne.n	80061a4 <HAL_RCC_OscConfig+0x334>
 800618a:	4b6a      	ldr	r3, [pc, #424]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	4a69      	ldr	r2, [pc, #420]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006190:	f023 0301 	bic.w	r3, r3, #1
 8006194:	6213      	str	r3, [r2, #32]
 8006196:	4b67      	ldr	r3, [pc, #412]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006198:	6a1b      	ldr	r3, [r3, #32]
 800619a:	4a66      	ldr	r2, [pc, #408]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800619c:	f023 0304 	bic.w	r3, r3, #4
 80061a0:	6213      	str	r3, [r2, #32]
 80061a2:	e01c      	b.n	80061de <HAL_RCC_OscConfig+0x36e>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	2b05      	cmp	r3, #5
 80061aa:	d10c      	bne.n	80061c6 <HAL_RCC_OscConfig+0x356>
 80061ac:	4b61      	ldr	r3, [pc, #388]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	4a60      	ldr	r2, [pc, #384]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061b2:	f043 0304 	orr.w	r3, r3, #4
 80061b6:	6213      	str	r3, [r2, #32]
 80061b8:	4b5e      	ldr	r3, [pc, #376]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	4a5d      	ldr	r2, [pc, #372]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061be:	f043 0301 	orr.w	r3, r3, #1
 80061c2:	6213      	str	r3, [r2, #32]
 80061c4:	e00b      	b.n	80061de <HAL_RCC_OscConfig+0x36e>
 80061c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	4a5a      	ldr	r2, [pc, #360]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061cc:	f023 0301 	bic.w	r3, r3, #1
 80061d0:	6213      	str	r3, [r2, #32]
 80061d2:	4b58      	ldr	r3, [pc, #352]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061d4:	6a1b      	ldr	r3, [r3, #32]
 80061d6:	4a57      	ldr	r2, [pc, #348]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80061d8:	f023 0304 	bic.w	r3, r3, #4
 80061dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d015      	beq.n	8006212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061e6:	f7fe f845 	bl	8004274 <HAL_GetTick>
 80061ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ec:	e00a      	b.n	8006204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ee:	f7fe f841 	bl	8004274 <HAL_GetTick>
 80061f2:	4602      	mov	r2, r0
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	1ad3      	subs	r3, r2, r3
 80061f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e0b1      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006204:	4b4b      	ldr	r3, [pc, #300]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006206:	6a1b      	ldr	r3, [r3, #32]
 8006208:	f003 0302 	and.w	r3, r3, #2
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ee      	beq.n	80061ee <HAL_RCC_OscConfig+0x37e>
 8006210:	e014      	b.n	800623c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006212:	f7fe f82f 	bl	8004274 <HAL_GetTick>
 8006216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006218:	e00a      	b.n	8006230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800621a:	f7fe f82b 	bl	8004274 <HAL_GetTick>
 800621e:	4602      	mov	r2, r0
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006228:	4293      	cmp	r3, r2
 800622a:	d901      	bls.n	8006230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e09b      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006230:	4b40      	ldr	r3, [pc, #256]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006232:	6a1b      	ldr	r3, [r3, #32]
 8006234:	f003 0302 	and.w	r3, r3, #2
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1ee      	bne.n	800621a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d105      	bne.n	800624e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006242:	4b3c      	ldr	r3, [pc, #240]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	4a3b      	ldr	r2, [pc, #236]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 8006248:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800624c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69db      	ldr	r3, [r3, #28]
 8006252:	2b00      	cmp	r3, #0
 8006254:	f000 8087 	beq.w	8006366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006258:	4b36      	ldr	r3, [pc, #216]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	f003 030c 	and.w	r3, r3, #12
 8006260:	2b08      	cmp	r3, #8
 8006262:	d061      	beq.n	8006328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	2b02      	cmp	r3, #2
 800626a:	d146      	bne.n	80062fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800626c:	4b33      	ldr	r3, [pc, #204]	@ (800633c <HAL_RCC_OscConfig+0x4cc>)
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006272:	f7fd ffff 	bl	8004274 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006278:	e008      	b.n	800628c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800627a:	f7fd fffb 	bl	8004274 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	2b02      	cmp	r3, #2
 8006286:	d901      	bls.n	800628c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e06d      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800628c:	4b29      	ldr	r3, [pc, #164]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f0      	bne.n	800627a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062a0:	d108      	bne.n	80062b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80062a2:	4b24      	ldr	r3, [pc, #144]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4921      	ldr	r1, [pc, #132]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80062b4:	4b1f      	ldr	r3, [pc, #124]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a19      	ldr	r1, [r3, #32]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c4:	430b      	orrs	r3, r1
 80062c6:	491b      	ldr	r1, [pc, #108]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <HAL_RCC_OscConfig+0x4cc>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fd ffcf 	bl	8004274 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062da:	f7fd ffcb 	bl	8004274 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e03d      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062ec:	4b11      	ldr	r3, [pc, #68]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x46a>
 80062f8:	e035      	b.n	8006366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fa:	4b10      	ldr	r3, [pc, #64]	@ (800633c <HAL_RCC_OscConfig+0x4cc>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006300:	f7fd ffb8 	bl	8004274 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006308:	f7fd ffb4 	bl	8004274 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e026      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800631a:	4b06      	ldr	r3, [pc, #24]	@ (8006334 <HAL_RCC_OscConfig+0x4c4>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x498>
 8006326:	e01e      	b.n	8006366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d107      	bne.n	8006340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e019      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
 8006334:	40021000 	.word	0x40021000
 8006338:	40007000 	.word	0x40007000
 800633c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006340:	4b0b      	ldr	r3, [pc, #44]	@ (8006370 <HAL_RCC_OscConfig+0x500>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	429a      	cmp	r2, r3
 8006352:	d106      	bne.n	8006362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d001      	beq.n	8006366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	e000      	b.n	8006368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3718      	adds	r7, #24
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40021000 	.word	0x40021000

08006374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e0d0      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006388:	4b6a      	ldr	r3, [pc, #424]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d910      	bls.n	80063b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006396:	4b67      	ldr	r3, [pc, #412]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f023 0207 	bic.w	r2, r3, #7
 800639e:	4965      	ldr	r1, [pc, #404]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	4b63      	ldr	r3, [pc, #396]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f003 0307 	and.w	r3, r3, #7
 80063ae:	683a      	ldr	r2, [r7, #0]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d001      	beq.n	80063b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e0b8      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d020      	beq.n	8006406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0304 	and.w	r3, r3, #4
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d005      	beq.n	80063dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d0:	4b59      	ldr	r3, [pc, #356]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80063d2:	685b      	ldr	r3, [r3, #4]
 80063d4:	4a58      	ldr	r2, [pc, #352]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80063d6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80063da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d005      	beq.n	80063f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063e8:	4b53      	ldr	r3, [pc, #332]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	4a52      	ldr	r2, [pc, #328]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80063ee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80063f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f4:	4b50      	ldr	r3, [pc, #320]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	494d      	ldr	r1, [pc, #308]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006402:	4313      	orrs	r3, r2
 8006404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d040      	beq.n	8006494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d107      	bne.n	800642a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800641a:	4b47      	ldr	r3, [pc, #284]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006422:	2b00      	cmp	r3, #0
 8006424:	d115      	bne.n	8006452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e07f      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d107      	bne.n	8006442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006432:	4b41      	ldr	r3, [pc, #260]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d109      	bne.n	8006452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e073      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006442:	4b3d      	ldr	r3, [pc, #244]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0302 	and.w	r3, r3, #2
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06b      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006452:	4b39      	ldr	r3, [pc, #228]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	f023 0203 	bic.w	r2, r3, #3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	4936      	ldr	r1, [pc, #216]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006460:	4313      	orrs	r3, r2
 8006462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006464:	f7fd ff06 	bl	8004274 <HAL_GetTick>
 8006468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800646a:	e00a      	b.n	8006482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800646c:	f7fd ff02 	bl	8004274 <HAL_GetTick>
 8006470:	4602      	mov	r2, r0
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	1ad3      	subs	r3, r2, r3
 8006476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800647a:	4293      	cmp	r3, r2
 800647c:	d901      	bls.n	8006482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800647e:	2303      	movs	r3, #3
 8006480:	e053      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	4b2d      	ldr	r3, [pc, #180]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 020c 	and.w	r2, r3, #12
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	429a      	cmp	r2, r3
 8006492:	d1eb      	bne.n	800646c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006494:	4b27      	ldr	r3, [pc, #156]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 0307 	and.w	r3, r3, #7
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d210      	bcs.n	80064c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064a2:	4b24      	ldr	r3, [pc, #144]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f023 0207 	bic.w	r2, r3, #7
 80064aa:	4922      	ldr	r1, [pc, #136]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064b2:	4b20      	ldr	r3, [pc, #128]	@ (8006534 <HAL_RCC_ClockConfig+0x1c0>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	683a      	ldr	r2, [r7, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d001      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e032      	b.n	800652a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0304 	and.w	r3, r3, #4
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d0:	4b19      	ldr	r3, [pc, #100]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	4916      	ldr	r1, [pc, #88]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80064de:	4313      	orrs	r3, r2
 80064e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d009      	beq.n	8006502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064ee:	4b12      	ldr	r3, [pc, #72]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	490e      	ldr	r1, [pc, #56]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006502:	f000 f821 	bl	8006548 <HAL_RCC_GetSysClockFreq>
 8006506:	4602      	mov	r2, r0
 8006508:	4b0b      	ldr	r3, [pc, #44]	@ (8006538 <HAL_RCC_ClockConfig+0x1c4>)
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	091b      	lsrs	r3, r3, #4
 800650e:	f003 030f 	and.w	r3, r3, #15
 8006512:	490a      	ldr	r1, [pc, #40]	@ (800653c <HAL_RCC_ClockConfig+0x1c8>)
 8006514:	5ccb      	ldrb	r3, [r1, r3]
 8006516:	fa22 f303 	lsr.w	r3, r2, r3
 800651a:	4a09      	ldr	r2, [pc, #36]	@ (8006540 <HAL_RCC_ClockConfig+0x1cc>)
 800651c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800651e:	4b09      	ldr	r3, [pc, #36]	@ (8006544 <HAL_RCC_ClockConfig+0x1d0>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4618      	mov	r0, r3
 8006524:	f7fd fe64 	bl	80041f0 <HAL_InitTick>

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	40022000 	.word	0x40022000
 8006538:	40021000 	.word	0x40021000
 800653c:	0800b848 	.word	0x0800b848
 8006540:	200000b4 	.word	0x200000b4
 8006544:	200000b8 	.word	0x200000b8

08006548 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006548:	b490      	push	{r4, r7}
 800654a:	b08a      	sub	sp, #40	@ 0x28
 800654c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800654e:	4b29      	ldr	r3, [pc, #164]	@ (80065f4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006550:	1d3c      	adds	r4, r7, #4
 8006552:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006558:	f240 2301 	movw	r3, #513	@ 0x201
 800655c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
 8006562:	2300      	movs	r3, #0
 8006564:	61bb      	str	r3, [r7, #24]
 8006566:	2300      	movs	r3, #0
 8006568:	627b      	str	r3, [r7, #36]	@ 0x24
 800656a:	2300      	movs	r3, #0
 800656c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006572:	4b21      	ldr	r3, [pc, #132]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	f003 030c 	and.w	r3, r3, #12
 800657e:	2b04      	cmp	r3, #4
 8006580:	d002      	beq.n	8006588 <HAL_RCC_GetSysClockFreq+0x40>
 8006582:	2b08      	cmp	r3, #8
 8006584:	d003      	beq.n	800658e <HAL_RCC_GetSysClockFreq+0x46>
 8006586:	e02b      	b.n	80065e0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006588:	4b1c      	ldr	r3, [pc, #112]	@ (80065fc <HAL_RCC_GetSysClockFreq+0xb4>)
 800658a:	623b      	str	r3, [r7, #32]
      break;
 800658c:	e02b      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	0c9b      	lsrs	r3, r3, #18
 8006592:	f003 030f 	and.w	r3, r3, #15
 8006596:	3328      	adds	r3, #40	@ 0x28
 8006598:	443b      	add	r3, r7
 800659a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800659e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d012      	beq.n	80065d0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80065aa:	4b13      	ldr	r3, [pc, #76]	@ (80065f8 <HAL_RCC_GetSysClockFreq+0xb0>)
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	0c5b      	lsrs	r3, r3, #17
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	3328      	adds	r3, #40	@ 0x28
 80065b6:	443b      	add	r3, r7
 80065b8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80065bc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	@ (80065fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80065c2:	fb03 f202 	mul.w	r2, r3, r2
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80065cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ce:	e004      	b.n	80065da <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80065d4:	fb02 f303 	mul.w	r3, r2, r3
 80065d8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 80065da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065dc:	623b      	str	r3, [r7, #32]
      break;
 80065de:	e002      	b.n	80065e6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065e0:	4b06      	ldr	r3, [pc, #24]	@ (80065fc <HAL_RCC_GetSysClockFreq+0xb4>)
 80065e2:	623b      	str	r3, [r7, #32]
      break;
 80065e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065e6:	6a3b      	ldr	r3, [r7, #32]
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3728      	adds	r7, #40	@ 0x28
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc90      	pop	{r4, r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	0800b7f8 	.word	0x0800b7f8
 80065f8:	40021000 	.word	0x40021000
 80065fc:	007a1200 	.word	0x007a1200
 8006600:	003d0900 	.word	0x003d0900

08006604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006604:	b480      	push	{r7}
 8006606:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006608:	4b02      	ldr	r3, [pc, #8]	@ (8006614 <HAL_RCC_GetHCLKFreq+0x10>)
 800660a:	681b      	ldr	r3, [r3, #0]
}
 800660c:	4618      	mov	r0, r3
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr
 8006614:	200000b4 	.word	0x200000b4

08006618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800661c:	f7ff fff2 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006620:	4602      	mov	r2, r0
 8006622:	4b05      	ldr	r3, [pc, #20]	@ (8006638 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	0a1b      	lsrs	r3, r3, #8
 8006628:	f003 0307 	and.w	r3, r3, #7
 800662c:	4903      	ldr	r1, [pc, #12]	@ (800663c <HAL_RCC_GetPCLK1Freq+0x24>)
 800662e:	5ccb      	ldrb	r3, [r1, r3]
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40021000 	.word	0x40021000
 800663c:	0800b858 	.word	0x0800b858

08006640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006644:	f7ff ffde 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b05      	ldr	r3, [pc, #20]	@ (8006660 <HAL_RCC_GetPCLK2Freq+0x20>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	0adb      	lsrs	r3, r3, #11
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4903      	ldr	r1, [pc, #12]	@ (8006664 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800665c:	4618      	mov	r0, r3
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40021000 	.word	0x40021000
 8006664:	0800b858 	.word	0x0800b858

08006668 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006670:	4b0a      	ldr	r3, [pc, #40]	@ (800669c <RCC_Delay+0x34>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a0a      	ldr	r2, [pc, #40]	@ (80066a0 <RCC_Delay+0x38>)
 8006676:	fba2 2303 	umull	r2, r3, r2, r3
 800667a:	0a5b      	lsrs	r3, r3, #9
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006684:	bf00      	nop
  }
  while (Delay --);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	1e5a      	subs	r2, r3, #1
 800668a:	60fa      	str	r2, [r7, #12]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1f9      	bne.n	8006684 <RCC_Delay+0x1c>
}
 8006690:	bf00      	nop
 8006692:	bf00      	nop
 8006694:	3714      	adds	r7, #20
 8006696:	46bd      	mov	sp, r7
 8006698:	bc80      	pop	{r7}
 800669a:	4770      	bx	lr
 800669c:	200000b4 	.word	0x200000b4
 80066a0:	10624dd3 	.word	0x10624dd3

080066a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80066ac:	2300      	movs	r3, #0
 80066ae:	613b      	str	r3, [r7, #16]
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f003 0301 	and.w	r3, r3, #1
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d07d      	beq.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80066c0:	2300      	movs	r3, #0
 80066c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80066c4:	4b4f      	ldr	r3, [pc, #316]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10d      	bne.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80066d0:	4b4c      	ldr	r3, [pc, #304]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d2:	69db      	ldr	r3, [r3, #28]
 80066d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066da:	61d3      	str	r3, [r2, #28]
 80066dc:	4b49      	ldr	r3, [pc, #292]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066de:	69db      	ldr	r3, [r3, #28]
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066e4:	60bb      	str	r3, [r7, #8]
 80066e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066e8:	2301      	movs	r3, #1
 80066ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ec:	4b46      	ldr	r3, [pc, #280]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d118      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066f8:	4b43      	ldr	r3, [pc, #268]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a42      	ldr	r2, [pc, #264]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006702:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006704:	f7fd fdb6 	bl	8004274 <HAL_GetTick>
 8006708:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800670a:	e008      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800670c:	f7fd fdb2 	bl	8004274 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	2b64      	cmp	r3, #100	@ 0x64
 8006718:	d901      	bls.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e06d      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800671e:	4b3a      	ldr	r3, [pc, #232]	@ (8006808 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0f0      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800672a:	4b36      	ldr	r3, [pc, #216]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006732:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d02e      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	429a      	cmp	r2, r3
 8006746:	d027      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006748:	4b2e      	ldr	r3, [pc, #184]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674a:	6a1b      	ldr	r3, [r3, #32]
 800674c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006750:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006752:	4b2e      	ldr	r3, [pc, #184]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006754:	2201      	movs	r2, #1
 8006756:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006758:	4b2c      	ldr	r3, [pc, #176]	@ (800680c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800675a:	2200      	movs	r2, #0
 800675c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800675e:	4a29      	ldr	r2, [pc, #164]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f003 0301 	and.w	r3, r3, #1
 800676a:	2b00      	cmp	r3, #0
 800676c:	d014      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800676e:	f7fd fd81 	bl	8004274 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006774:	e00a      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006776:	f7fd fd7d 	bl	8004274 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006784:	4293      	cmp	r3, r2
 8006786:	d901      	bls.n	800678c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e036      	b.n	80067fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800678c:	4b1d      	ldr	r3, [pc, #116]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	f003 0302 	and.w	r3, r3, #2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d0ee      	beq.n	8006776 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006798:	4b1a      	ldr	r3, [pc, #104]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800679a:	6a1b      	ldr	r3, [r3, #32]
 800679c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4917      	ldr	r1, [pc, #92]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a6:	4313      	orrs	r3, r2
 80067a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80067aa:	7dfb      	ldrb	r3, [r7, #23]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d105      	bne.n	80067bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067b0:	4b14      	ldr	r3, [pc, #80]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	4a13      	ldr	r2, [pc, #76]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d008      	beq.n	80067da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	490b      	ldr	r1, [pc, #44]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0310 	and.w	r3, r3, #16
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d008      	beq.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067e6:	4b07      	ldr	r3, [pc, #28]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	4904      	ldr	r1, [pc, #16]	@ (8006804 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	40021000 	.word	0x40021000
 8006808:	40007000 	.word	0x40007000
 800680c:	42420440 	.word	0x42420440

08006810 <HAL_SPI_Init>:
 *         in the SPI_InitTypeDef and initialize the associated handle.
 * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
 *               the configuration information for SPI module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi) {
 8006810:	b580      	push	{r7, lr}
 8006812:	b082      	sub	sp, #8
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
	/* Check the SPI handle allocation */
	if (hspi == NULL) {
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_SPI_Init+0x12>
		return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e076      	b.n	8006910 <HAL_SPI_Init+0x100>
	assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
	assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
	/* TI mode is not supported on this device.
	 TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
	assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
	if (hspi->Init.TIMode == SPI_TIMODE_DISABLE) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006826:	2b00      	cmp	r3, #0
 8006828:	d108      	bne.n	800683c <HAL_SPI_Init+0x2c>
		assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
		assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

		if (hspi->Init.Mode == SPI_MODE_MASTER) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006832:	d009      	beq.n	8006848 <HAL_SPI_Init+0x38>
			assert_param(
					IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
		} else {
			/* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
			hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	61da      	str	r2, [r3, #28]
 800683a:	e005      	b.n	8006848 <HAL_SPI_Init+0x38>
		}
	} else {
		assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

		/* Force polarity and phase to TI protocaol requirements */
		hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	611a      	str	r2, [r3, #16]
		hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
	hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

	if (hspi->State == HAL_SPI_STATE_RESET) {
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_SPI_Init+0x58>
		/* Allocate lock resource and initialize it */
		hspi->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC... */
		HAL_SPI_MspInit(hspi);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fd fa80 	bl	8003d68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
	}

	hspi->State = HAL_SPI_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	/* Disable the selected SPI peripheral */
	__HAL_SPI_DISABLE(hspi);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800687e:	601a      	str	r2, [r3, #0]

	/*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
	/* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
	 Communication speed, First bit and CRC calculation state */
	WRITE_REG(hspi->Instance->CR1,
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006890:	431a      	orrs	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	691b      	ldr	r3, [r3, #16]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	431a      	orrs	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	431a      	orrs	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068cc:	ea42 0103 	orr.w	r1, r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068d4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	601a      	str	r2, [r3, #0]
			((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) | (hspi->Init.Direction & (SPI_CR1_RXONLY | SPI_CR1_BIDIMODE)) | (hspi->Init.DataSize & SPI_CR1_DFF) | (hspi->Init.CLKPolarity & SPI_CR1_CPOL) | (hspi->Init.CLKPhase & SPI_CR1_CPHA) | (hspi->Init.NSS & SPI_CR1_SSM) | (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) | (hspi->Init.FirstBit & SPI_CR1_LSBFIRST) | (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

	/* Configure : NSS management */
	WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	699b      	ldr	r3, [r3, #24]
 80068e4:	0c1a      	lsrs	r2, r3, #16
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f002 0204 	and.w	r2, r2, #4
 80068ee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
	/* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
	CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	69da      	ldr	r2, [r3, #28]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068fe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->State = HAL_SPI_STATE_READY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2201      	movs	r2, #1
 800690a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

	return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <HAL_SPI_TransmitReceive>:
 * @param  Size amount of data to be sent and received
 * @param  Timeout Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi,
		uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b08c      	sub	sp, #48	@ 0x30
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

	/* Variable used to alternate Rx and Tx during transfer */
	uint32_t txallowed = 1U;
 8006926:	2301      	movs	r3, #1
 8006928:	62fb      	str	r3, [r7, #44]	@ 0x2c
	HAL_StatusTypeDef errorcode = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

	/* Check Direction parameter */
	assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

	/* Process Locked */
	__HAL_LOCK(hspi);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_SPI_TransmitReceive+0x26>
 800693a:	2302      	movs	r3, #2
 800693c:	e18a      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x33c>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

	/* Init tickstart for timeout management*/
	tickstart = HAL_GetTick();
 8006946:	f7fd fc95 	bl	8004274 <HAL_GetTick>
 800694a:	6278      	str	r0, [r7, #36]	@ 0x24

	/* Init temporary variables */
	tmp_state = hspi->State;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
	tmp_mode = hspi->Init.Mode;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	61fb      	str	r3, [r7, #28]
	initial_TxXferCount = Size;
 800695c:	887b      	ldrh	r3, [r7, #2]
 800695e:	837b      	strh	r3, [r7, #26]

	if (!((tmp_state == HAL_SPI_STATE_READY)
 8006960:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006964:	2b01      	cmp	r3, #1
 8006966:	d00f      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x70>
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696e:	d107      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x68>
			|| ((tmp_mode == SPI_MODE_MASTER)
					&& (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d103      	bne.n	8006980 <HAL_SPI_TransmitReceive+0x68>
					&& (tmp_state == HAL_SPI_STATE_BUSY_RX)))) {
 8006978:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800697c:	2b04      	cmp	r3, #4
 800697e:	d003      	beq.n	8006988 <HAL_SPI_TransmitReceive+0x70>
		errorcode = HAL_BUSY;
 8006980:	2302      	movs	r3, #2
 8006982:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		goto error;
 8006986:	e15b      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U)) {
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d005      	beq.n	800699a <HAL_SPI_TransmitReceive+0x82>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d002      	beq.n	800699a <HAL_SPI_TransmitReceive+0x82>
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <HAL_SPI_TransmitReceive+0x8a>
		errorcode = HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		goto error;
 80069a0:	e14e      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
	}

	/* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
	if (hspi->State != HAL_SPI_STATE_BUSY_RX) {
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069a8:	b2db      	uxtb	r3, r3
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	d003      	beq.n	80069b6 <HAL_SPI_TransmitReceive+0x9e>
		hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2205      	movs	r2, #5
 80069b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	}

	/* Set the transaction information */
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	655a      	str	r2, [r3, #84]	@ 0x54
	hspi->pRxBuffPtr = (uint8_t*) pRxData;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	639a      	str	r2, [r3, #56]	@ 0x38
	hspi->RxXferCount = Size;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	887a      	ldrh	r2, [r7, #2]
 80069c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
	hspi->RxXferSize = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	887a      	ldrh	r2, [r7, #2]
 80069cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
	hspi->pTxBuffPtr = (uint8_t*) pTxData;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi->TxXferCount = Size;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	887a      	ldrh	r2, [r7, #2]
 80069d8:	86da      	strh	r2, [r3, #54]	@ 0x36
	hspi->TxXferSize = Size;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	887a      	ldrh	r2, [r7, #2]
 80069de:	869a      	strh	r2, [r3, #52]	@ 0x34

	/*Init field not used in handle to zero */
	hspi->RxISR = NULL;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	641a      	str	r2, [r3, #64]	@ 0x40
	hspi->TxISR = NULL;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2200      	movs	r2, #0
 80069ea:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

	/* Check if the SPI is already enabled */
	if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE) {
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069f6:	2b40      	cmp	r3, #64	@ 0x40
 80069f8:	d007      	beq.n	8006a0a <HAL_SPI_TransmitReceive+0xf2>
		/* Enable SPI peripheral */
		__HAL_SPI_ENABLE(hspi);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681a      	ldr	r2, [r3, #0]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a08:	601a      	str	r2, [r3, #0]
	}

	/* Transmit and Receive data in 16 Bit mode */
	if (hspi->Init.DataSize == SPI_DATASIZE_16BIT) {
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a12:	d178      	bne.n	8006b06 <HAL_SPI_TransmitReceive+0x1ee>
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d002      	beq.n	8006a22 <HAL_SPI_TransmitReceive+0x10a>
				|| (initial_TxXferCount == 0x01U)) {
 8006a1c:	8b7b      	ldrh	r3, [r7, #26]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d166      	bne.n	8006af0 <HAL_SPI_TransmitReceive+0x1d8>
			hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	881a      	ldrh	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
			hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	631a      	str	r2, [r3, #48]	@ 0x30
			hspi->TxXferCount--;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	86da      	strh	r2, [r3, #54]	@ 0x36
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8006a46:	e053      	b.n	8006af0 <HAL_SPI_TransmitReceive+0x1d8>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d11b      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x176>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <HAL_SPI_TransmitReceive+0x176>
 8006a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d113      	bne.n	8006a8e <HAL_SPI_TransmitReceive+0x176>
				hspi->Instance->DR = *((uint16_t*) hspi->pTxBuffPtr);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6a:	881a      	ldrh	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	60da      	str	r2, [r3, #12]
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	631a      	str	r2, [r3, #48]	@ 0x30
				hspi->TxXferCount--;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	3b01      	subs	r3, #1
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	86da      	strh	r2, [r3, #54]	@ 0x36
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
			}

			/* Check RXNE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d119      	bne.n	8006ad0 <HAL_SPI_TransmitReceive+0x1b8>
					&& (hspi->RxXferCount > 0U)) {
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d014      	beq.n	8006ad0 <HAL_SPI_TransmitReceive+0x1b8>
				*((uint16_t*) hspi->pRxBuffPtr) = (uint16_t) hspi->Instance->DR;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	68da      	ldr	r2, [r3, #12]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab0:	b292      	uxth	r2, r2
 8006ab2:	801a      	strh	r2, [r3, #0]
				hspi->pRxBuffPtr += sizeof(uint16_t);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab8:	1c9a      	adds	r2, r3, #2
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->RxXferCount--;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	87da      	strh	r2, [r3, #62]	@ 0x3e
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8006acc:	2301      	movs	r3, #1
 8006ace:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			if (((HAL_GetTick() - tickstart) >= Timeout)
 8006ad0:	f7fd fbd0 	bl	8004274 <HAL_GetTick>
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d807      	bhi.n	8006af0 <HAL_SPI_TransmitReceive+0x1d8>
					&& (Timeout != HAL_MAX_DELAY)) {
 8006ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae6:	d003      	beq.n	8006af0 <HAL_SPI_TransmitReceive+0x1d8>
				errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				goto error;
 8006aee:	e0a7      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1a6      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x130>
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1a1      	bne.n	8006a48 <HAL_SPI_TransmitReceive+0x130>
 8006b04:	e07c      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x2e8>
			}
		}
	}
	/* Transmit and Receive data in 8 Bit mode */
	else {
		if ((hspi->Init.Mode == SPI_MODE_SLAVE)
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d002      	beq.n	8006b14 <HAL_SPI_TransmitReceive+0x1fc>
				|| (initial_TxXferCount == 0x01U)) {
 8006b0e:	8b7b      	ldrh	r3, [r7, #26]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d16b      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x2d4>
			*((__IO uint8_t*) &hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	330c      	adds	r3, #12
 8006b1e:	7812      	ldrb	r2, [r2, #0]
 8006b20:	701a      	strb	r2, [r3, #0]
			hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b26:	1c5a      	adds	r2, r3, #1
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	631a      	str	r2, [r3, #48]	@ 0x30
			hspi->TxXferCount--;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	86da      	strh	r2, [r3, #54]	@ 0x36
		}
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8006b3a:	e057      	b.n	8006bec <HAL_SPI_TransmitReceive+0x2d4>
			/* Check TXE flag */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d11c      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x26c>
					&& (hspi->TxXferCount > 0U) && (txallowed == 1U)) {
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d017      	beq.n	8006b84 <HAL_SPI_TransmitReceive+0x26c>
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	2b01      	cmp	r3, #1
 8006b58:	d114      	bne.n	8006b84 <HAL_SPI_TransmitReceive+0x26c>
				*(__IO uint8_t*) &hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	330c      	adds	r3, #12
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr++;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6c:	1c5a      	adds	r2, r3, #1
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	631a      	str	r2, [r3, #48]	@ 0x30
				hspi->TxXferCount--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	3b01      	subs	r3, #1
 8006b7a:	b29a      	uxth	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	86da      	strh	r2, [r3, #54]	@ 0x36
				/* Next Data is a reception (Rx). Tx not allowed */
				txallowed = 0U;
 8006b80:	2300      	movs	r3, #0
 8006b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
			}

			/* Wait until RXNE flag is reset */
			if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f003 0301 	and.w	r3, r3, #1
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d119      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x2ae>
					&& (hspi->RxXferCount > 0U)) {
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d014      	beq.n	8006bc6 <HAL_SPI_TransmitReceive+0x2ae>
				(*(uint8_t*) hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]
				hspi->pRxBuffPtr++;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bae:	1c5a      	adds	r2, r3, #1
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	639a      	str	r2, [r3, #56]	@ 0x38
				hspi->RxXferCount--;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bb8:	b29b      	uxth	r3, r3
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
				/* Next Data is a Transmission (Tx). Tx is allowed */
				txallowed = 1U;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			}
			if ((((HAL_GetTick() - tickstart) >= Timeout)
 8006bc6:	f7fd fb55 	bl	8004274 <HAL_GetTick>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d803      	bhi.n	8006bde <HAL_SPI_TransmitReceive+0x2c6>
					&& ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U)) {
 8006bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bdc:	d102      	bne.n	8006be4 <HAL_SPI_TransmitReceive+0x2cc>
 8006bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d103      	bne.n	8006bec <HAL_SPI_TransmitReceive+0x2d4>
				errorcode = HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				goto error;
 8006bea:	e029      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
		while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U)) {
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1a2      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x224>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d19d      	bne.n	8006b3c <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

	/* Check the end of the transaction */
	if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK) {
 8006c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006c04:	68f8      	ldr	r0, [r7, #12]
 8006c06:	f000 f8b1 	bl	8006d6c <SPI_EndRxTxTransaction>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d006      	beq.n	8006c1e <HAL_SPI_TransmitReceive+0x306>
		errorcode = HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
		hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2220      	movs	r2, #32
 8006c1a:	655a      	str	r2, [r3, #84]	@ 0x54
		goto error;
 8006c1c:	e010      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
	}

	/* Clear overrun flag in 2 Lines communication mode because received is not read */
	if (hspi->Init.Direction == SPI_DIRECTION_2LINES) {
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d10b      	bne.n	8006c3e <HAL_SPI_TransmitReceive+0x326>
		__HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	617b      	str	r3, [r7, #20]
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	e000      	b.n	8006c40 <HAL_SPI_TransmitReceive+0x328>
	}

	error: hspi->State = HAL_SPI_STATE_READY;
 8006c3e:	bf00      	nop
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
	__HAL_UNLOCK(hspi);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	return errorcode;
 8006c50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3730      	adds	r7, #48	@ 0x30
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <SPI_WaitFlagStateUntilTimeout>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi,
		uint32_t Flag, FlagStatus State, uint32_t Timeout, uint32_t Tickstart) {
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
	__IO uint32_t count;
	uint32_t tmp_timeout;
	uint32_t tmp_tickstart;

	/* Adjust Timeout value  in case of end of transfer */
	tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006c6c:	f7fd fb02 	bl	8004274 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
	tmp_tickstart = HAL_GetTick();
 8006c7c:	f7fd fafa 	bl	8004274 <HAL_GetTick>
 8006c80:	61b8      	str	r0, [r7, #24]

	/* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
	count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c82:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	015b      	lsls	r3, r3, #5
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8006c92:	e054      	b.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
		if (Timeout != HAL_MAX_DELAY) {
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c9a:	d050      	beq.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
			if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout)
 8006c9c:	f7fd faea 	bl	8004274 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d902      	bls.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
					|| (tmp_timeout == 0U)) {
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13d      	bne.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
				/* Disable the SPI and reset the CRC: the CRC value should be cleared
				 on both master and slave sides in order to resynchronize the master
				 and slave for their respective CRC calculation */

				/* Disable TXE, RXNE and ERR interrupts for the interrupt process */
				__HAL_SPI_DISABLE_IT(hspi,
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cc0:	605a      	str	r2, [r3, #4]
						(SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));

				if ((hspi->Init.Mode == SPI_MODE_MASTER)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cca:	d111      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
						&& ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd4:	d004      	beq.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
								|| (hspi->Init.Direction
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d107      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
										== SPI_DIRECTION_2LINES_RXONLY))) {
					/* Disable SPI peripheral */
					__HAL_SPI_DISABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cee:	601a      	str	r2, [r3, #0]
				}

				/* Reset CRC Calculation */
				if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) {
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf8:	d10f      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
					SPI_RESET_CRC(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
				}

				hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

				/* Process Unlocked */
				__HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e017      	b.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0x102>
			}
			/* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
			if (count == 0U) {
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
				tmp_timeout = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
			}
			count--;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
	while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State) {
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d19b      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0x38>
		}
	}

	return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	200000b4 	.word	0x200000b4

08006d6c <SPI_EndRxTxTransaction>:
 * @param  Timeout Timeout duration
 * @param  Tickstart tick start value
 * @retval HAL status
 */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi,
		uint32_t Timeout, uint32_t Tickstart) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
	/* Control the BSY flag */
	if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	2180      	movs	r1, #128	@ 0x80
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff ff6a 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <SPI_EndRxTxTransaction+0x32>
			Tickstart) != HAL_OK) {
		SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
		return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e000      	b.n	8006da0 <SPI_EndRxTxTransaction+0x34>
	}
	return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e041      	b.n	8006e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d106      	bne.n	8006dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7fd f814 	bl	8003dfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	3304      	adds	r3, #4
 8006de4:	4619      	mov	r1, r3
 8006de6:	4610      	mov	r0, r2
 8006de8:	f000 fafc 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d001      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e03a      	b.n	8006ed6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2202      	movs	r2, #2
 8006e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68da      	ldr	r2, [r3, #12]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f042 0201 	orr.w	r2, r2, #1
 8006e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a18      	ldr	r2, [pc, #96]	@ (8006ee0 <HAL_TIM_Base_Start_IT+0x98>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d00e      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x58>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e8a:	d009      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x58>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a14      	ldr	r2, [pc, #80]	@ (8006ee4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIM_Base_Start_IT+0x58>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a13      	ldr	r2, [pc, #76]	@ (8006ee8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d111      	bne.n	8006ec4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b06      	cmp	r3, #6
 8006eb0:	d010      	beq.n	8006ed4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f042 0201 	orr.w	r2, r2, #1
 8006ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ec2:	e007      	b.n	8006ed4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ed4:	2300      	movs	r3, #0
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bc80      	pop	{r7}
 8006ede:	4770      	bx	lr
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40000400 	.word	0x40000400
 8006ee8:	40000800 	.word	0x40000800

08006eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d101      	bne.n	8006efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006efa:	2301      	movs	r3, #1
 8006efc:	e041      	b.n	8006f82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d106      	bne.n	8006f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f839 	bl	8006f8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	3304      	adds	r3, #4
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4610      	mov	r0, r2
 8006f2c:	f000 fa5a 	bl	80073e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_TIM_PWM_Start+0x24>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	bf14      	ite	ne
 8006fb8:	2301      	movne	r3, #1
 8006fba:	2300      	moveq	r3, #0
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	e022      	b.n	8007006 <HAL_TIM_PWM_Start+0x6a>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	2b04      	cmp	r3, #4
 8006fc4:	d109      	bne.n	8006fda <HAL_TIM_PWM_Start+0x3e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	bf14      	ite	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	2300      	moveq	r3, #0
 8006fd6:	b2db      	uxtb	r3, r3
 8006fd8:	e015      	b.n	8007006 <HAL_TIM_PWM_Start+0x6a>
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	2b08      	cmp	r3, #8
 8006fde:	d109      	bne.n	8006ff4 <HAL_TIM_PWM_Start+0x58>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	e008      	b.n	8007006 <HAL_TIM_PWM_Start+0x6a>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	bf14      	ite	ne
 8007000:	2301      	movne	r3, #1
 8007002:	2300      	moveq	r3, #0
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e05e      	b.n	80070cc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d104      	bne.n	800701e <HAL_TIM_PWM_Start+0x82>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2202      	movs	r2, #2
 8007018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800701c:	e013      	b.n	8007046 <HAL_TIM_PWM_Start+0xaa>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b04      	cmp	r3, #4
 8007022:	d104      	bne.n	800702e <HAL_TIM_PWM_Start+0x92>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2202      	movs	r2, #2
 8007028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800702c:	e00b      	b.n	8007046 <HAL_TIM_PWM_Start+0xaa>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b08      	cmp	r3, #8
 8007032:	d104      	bne.n	800703e <HAL_TIM_PWM_Start+0xa2>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800703c:	e003      	b.n	8007046 <HAL_TIM_PWM_Start+0xaa>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2202      	movs	r2, #2
 8007042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2201      	movs	r2, #1
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	4618      	mov	r0, r3
 8007050:	f000 fc48 	bl	80078e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1e      	ldr	r2, [pc, #120]	@ (80070d4 <HAL_TIM_PWM_Start+0x138>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d107      	bne.n	800706e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800706c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a18      	ldr	r2, [pc, #96]	@ (80070d4 <HAL_TIM_PWM_Start+0x138>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d00e      	beq.n	8007096 <HAL_TIM_PWM_Start+0xfa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007080:	d009      	beq.n	8007096 <HAL_TIM_PWM_Start+0xfa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a14      	ldr	r2, [pc, #80]	@ (80070d8 <HAL_TIM_PWM_Start+0x13c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d004      	beq.n	8007096 <HAL_TIM_PWM_Start+0xfa>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a12      	ldr	r2, [pc, #72]	@ (80070dc <HAL_TIM_PWM_Start+0x140>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d111      	bne.n	80070ba <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0307 	and.w	r3, r3, #7
 80070a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b06      	cmp	r3, #6
 80070a6:	d010      	beq.n	80070ca <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f042 0201 	orr.w	r2, r2, #1
 80070b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b8:	e007      	b.n	80070ca <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3710      	adds	r7, #16
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}
 80070d4:	40012c00 	.word	0x40012c00
 80070d8:	40000400 	.word	0x40000400
 80070dc:	40000800 	.word	0x40000800

080070e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070f2:	2b01      	cmp	r3, #1
 80070f4:	d101      	bne.n	80070fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070f6:	2302      	movs	r3, #2
 80070f8:	e0ac      	b.n	8007254 <HAL_TIM_PWM_ConfigChannel+0x174>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2b0c      	cmp	r3, #12
 8007106:	f200 809f 	bhi.w	8007248 <HAL_TIM_PWM_ConfigChannel+0x168>
 800710a:	a201      	add	r2, pc, #4	@ (adr r2, 8007110 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800710c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007110:	08007145 	.word	0x08007145
 8007114:	08007249 	.word	0x08007249
 8007118:	08007249 	.word	0x08007249
 800711c:	08007249 	.word	0x08007249
 8007120:	08007185 	.word	0x08007185
 8007124:	08007249 	.word	0x08007249
 8007128:	08007249 	.word	0x08007249
 800712c:	08007249 	.word	0x08007249
 8007130:	080071c7 	.word	0x080071c7
 8007134:	08007249 	.word	0x08007249
 8007138:	08007249 	.word	0x08007249
 800713c:	08007249 	.word	0x08007249
 8007140:	08007207 	.word	0x08007207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f9ac 	bl	80074a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0208 	orr.w	r2, r2, #8
 800715e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0204 	bic.w	r2, r2, #4
 800716e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6999      	ldr	r1, [r3, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	619a      	str	r2, [r3, #24]
      break;
 8007182:	e062      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 f9f2 	bl	8007574 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800719e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6999      	ldr	r1, [r3, #24]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	619a      	str	r2, [r3, #24]
      break;
 80071c4:	e041      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa3b 	bl	8007648 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0208 	orr.w	r2, r2, #8
 80071e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0204 	bic.w	r2, r2, #4
 80071f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69d9      	ldr	r1, [r3, #28]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]
      break;
 8007204:	e021      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fa85 	bl	800771c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69d9      	ldr	r1, [r3, #28]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	021a      	lsls	r2, r3, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	61da      	str	r2, [r3, #28]
      break;
 8007246:	e000      	b.n	800724a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	3710      	adds	r7, #16
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}

0800725c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b084      	sub	sp, #16
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_TIM_ConfigClockSource+0x18>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b3      	b.n	80073dc <HAL_TIM_ConfigClockSource+0x180>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800729a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ac:	d03e      	beq.n	800732c <HAL_TIM_ConfigClockSource+0xd0>
 80072ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b2:	f200 8087 	bhi.w	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ba:	f000 8085 	beq.w	80073c8 <HAL_TIM_ConfigClockSource+0x16c>
 80072be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c2:	d87f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072c4:	2b70      	cmp	r3, #112	@ 0x70
 80072c6:	d01a      	beq.n	80072fe <HAL_TIM_ConfigClockSource+0xa2>
 80072c8:	2b70      	cmp	r3, #112	@ 0x70
 80072ca:	d87b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072cc:	2b60      	cmp	r3, #96	@ 0x60
 80072ce:	d050      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x116>
 80072d0:	2b60      	cmp	r3, #96	@ 0x60
 80072d2:	d877      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072d4:	2b50      	cmp	r3, #80	@ 0x50
 80072d6:	d03c      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0xf6>
 80072d8:	2b50      	cmp	r3, #80	@ 0x50
 80072da:	d873      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072dc:	2b40      	cmp	r3, #64	@ 0x40
 80072de:	d058      	beq.n	8007392 <HAL_TIM_ConfigClockSource+0x136>
 80072e0:	2b40      	cmp	r3, #64	@ 0x40
 80072e2:	d86f      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072e4:	2b30      	cmp	r3, #48	@ 0x30
 80072e6:	d064      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x156>
 80072e8:	2b30      	cmp	r3, #48	@ 0x30
 80072ea:	d86b      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072ec:	2b20      	cmp	r3, #32
 80072ee:	d060      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x156>
 80072f0:	2b20      	cmp	r3, #32
 80072f2:	d867      	bhi.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d05c      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x156>
 80072f8:	2b10      	cmp	r3, #16
 80072fa:	d05a      	beq.n	80073b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80072fc:	e062      	b.n	80073c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	685a      	ldr	r2, [r3, #4]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	f000 faca 	bl	80078a6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	609a      	str	r2, [r3, #8]
      break;
 800732a:	e04e      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	6899      	ldr	r1, [r3, #8]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f000 fab3 	bl	80078a6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689a      	ldr	r2, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800734e:	609a      	str	r2, [r3, #8]
      break;
 8007350:	e03b      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fa2a 	bl	80077b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2150      	movs	r1, #80	@ 0x50
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fa81 	bl	8007872 <TIM_ITRx_SetConfig>
      break;
 8007370:	e02b      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6818      	ldr	r0, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	6859      	ldr	r1, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	461a      	mov	r2, r3
 8007380:	f000 fa48 	bl	8007814 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2160      	movs	r1, #96	@ 0x60
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fa71 	bl	8007872 <TIM_ITRx_SetConfig>
      break;
 8007390:	e01b      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	6859      	ldr	r1, [r3, #4]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	461a      	mov	r2, r3
 80073a0:	f000 fa0a 	bl	80077b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	2140      	movs	r1, #64	@ 0x40
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fa61 	bl	8007872 <TIM_ITRx_SetConfig>
      break;
 80073b0:	e00b      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4619      	mov	r1, r3
 80073bc:	4610      	mov	r0, r2
 80073be:	f000 fa58 	bl	8007872 <TIM_ITRx_SetConfig>
        break;
 80073c2:	e002      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073c4:	bf00      	nop
 80073c6:	e000      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80073c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3710      	adds	r7, #16
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a29      	ldr	r2, [pc, #164]	@ (800749c <TIM_Base_SetConfig+0xb8>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d00b      	beq.n	8007414 <TIM_Base_SetConfig+0x30>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007402:	d007      	beq.n	8007414 <TIM_Base_SetConfig+0x30>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a26      	ldr	r2, [pc, #152]	@ (80074a0 <TIM_Base_SetConfig+0xbc>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d003      	beq.n	8007414 <TIM_Base_SetConfig+0x30>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a25      	ldr	r2, [pc, #148]	@ (80074a4 <TIM_Base_SetConfig+0xc0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d108      	bne.n	8007426 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800741a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	68fa      	ldr	r2, [r7, #12]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1c      	ldr	r2, [pc, #112]	@ (800749c <TIM_Base_SetConfig+0xb8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00b      	beq.n	8007446 <TIM_Base_SetConfig+0x62>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007434:	d007      	beq.n	8007446 <TIM_Base_SetConfig+0x62>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <TIM_Base_SetConfig+0xbc>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d003      	beq.n	8007446 <TIM_Base_SetConfig+0x62>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <TIM_Base_SetConfig+0xc0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d108      	bne.n	8007458 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800744c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	68fa      	ldr	r2, [r7, #12]
 8007454:	4313      	orrs	r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	695b      	ldr	r3, [r3, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	4a07      	ldr	r2, [pc, #28]	@ (800749c <TIM_Base_SetConfig+0xb8>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d103      	bne.n	800748c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	691a      	ldr	r2, [r3, #16]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	615a      	str	r2, [r3, #20]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	bc80      	pop	{r7}
 800749a:	4770      	bx	lr
 800749c:	40012c00 	.word	0x40012c00
 80074a0:	40000400 	.word	0x40000400
 80074a4:	40000800 	.word	0x40000800

080074a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f023 0201 	bic.w	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0303 	bic.w	r3, r3, #3
 80074de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f023 0302 	bic.w	r3, r3, #2
 80074f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a1c      	ldr	r2, [pc, #112]	@ (8007570 <TIM_OC1_SetConfig+0xc8>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d10c      	bne.n	800751e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	f023 0308 	bic.w	r3, r3, #8
 800750a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68db      	ldr	r3, [r3, #12]
 8007510:	697a      	ldr	r2, [r7, #20]
 8007512:	4313      	orrs	r3, r2
 8007514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	f023 0304 	bic.w	r3, r3, #4
 800751c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4a13      	ldr	r2, [pc, #76]	@ (8007570 <TIM_OC1_SetConfig+0xc8>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d111      	bne.n	800754a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800752c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007534:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	695b      	ldr	r3, [r3, #20]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	4313      	orrs	r3, r2
 800753e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	4313      	orrs	r3, r2
 8007548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	685a      	ldr	r2, [r3, #4]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	697a      	ldr	r2, [r7, #20]
 8007562:	621a      	str	r2, [r3, #32]
}
 8007564:	bf00      	nop
 8007566:	371c      	adds	r7, #28
 8007568:	46bd      	mov	sp, r7
 800756a:	bc80      	pop	{r7}
 800756c:	4770      	bx	lr
 800756e:	bf00      	nop
 8007570:	40012c00 	.word	0x40012c00

08007574 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a1b      	ldr	r3, [r3, #32]
 8007582:	f023 0210 	bic.w	r2, r3, #16
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	685b      	ldr	r3, [r3, #4]
 8007594:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	699b      	ldr	r3, [r3, #24]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	021b      	lsls	r3, r3, #8
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f023 0320 	bic.w	r3, r3, #32
 80075be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	011b      	lsls	r3, r3, #4
 80075c6:	697a      	ldr	r2, [r7, #20]
 80075c8:	4313      	orrs	r3, r2
 80075ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007644 <TIM_OC2_SetConfig+0xd0>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d10d      	bne.n	80075f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	011b      	lsls	r3, r3, #4
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a14      	ldr	r2, [pc, #80]	@ (8007644 <TIM_OC2_SetConfig+0xd0>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d113      	bne.n	8007620 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	693a      	ldr	r2, [r7, #16]
 800761c:	4313      	orrs	r3, r2
 800761e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	68fa      	ldr	r2, [r7, #12]
 800762a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685a      	ldr	r2, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	621a      	str	r2, [r3, #32]
}
 800763a:	bf00      	nop
 800763c:	371c      	adds	r7, #28
 800763e:	46bd      	mov	sp, r7
 8007640:	bc80      	pop	{r7}
 8007642:	4770      	bx	lr
 8007644:	40012c00 	.word	0x40012c00

08007648 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
 8007650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0303 	bic.w	r3, r3, #3
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007690:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	021b      	lsls	r3, r3, #8
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007718 <TIM_OC3_SetConfig+0xd0>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d10d      	bne.n	80076c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	68db      	ldr	r3, [r3, #12]
 80076b2:	021b      	lsls	r3, r3, #8
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	4a14      	ldr	r2, [pc, #80]	@ (8007718 <TIM_OC3_SetConfig+0xd0>)
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d113      	bne.n	80076f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80076d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80076d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	695b      	ldr	r3, [r3, #20]
 80076de:	011b      	lsls	r3, r3, #4
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	4313      	orrs	r3, r2
 80076e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	011b      	lsls	r3, r3, #4
 80076ec:	693a      	ldr	r2, [r7, #16]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	693a      	ldr	r2, [r7, #16]
 80076f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685a      	ldr	r2, [r3, #4]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	621a      	str	r2, [r3, #32]
}
 800770c:	bf00      	nop
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	bc80      	pop	{r7}
 8007714:	4770      	bx	lr
 8007716:	bf00      	nop
 8007718:	40012c00 	.word	0x40012c00

0800771c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	69db      	ldr	r3, [r3, #28]
 8007742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800774a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	021b      	lsls	r3, r3, #8
 800775a:	68fa      	ldr	r2, [r7, #12]
 800775c:	4313      	orrs	r3, r2
 800775e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007766:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	689b      	ldr	r3, [r3, #8]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	693a      	ldr	r2, [r7, #16]
 8007770:	4313      	orrs	r3, r2
 8007772:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	4a0f      	ldr	r2, [pc, #60]	@ (80077b4 <TIM_OC4_SetConfig+0x98>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d109      	bne.n	8007790 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007782:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	019b      	lsls	r3, r3, #6
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	697a      	ldr	r2, [r7, #20]
 8007794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	621a      	str	r2, [r3, #32]
}
 80077aa:	bf00      	nop
 80077ac:	371c      	adds	r7, #28
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr
 80077b4:	40012c00 	.word	0x40012c00

080077b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b087      	sub	sp, #28
 80077bc:	af00      	add	r7, sp, #0
 80077be:	60f8      	str	r0, [r7, #12]
 80077c0:	60b9      	str	r1, [r7, #8]
 80077c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	f023 0201 	bic.w	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	699b      	ldr	r3, [r3, #24]
 80077da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	011b      	lsls	r3, r3, #4
 80077e8:	693a      	ldr	r2, [r7, #16]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f023 030a 	bic.w	r3, r3, #10
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077f6:	697a      	ldr	r2, [r7, #20]
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	697a      	ldr	r2, [r7, #20]
 8007808:	621a      	str	r2, [r3, #32]
}
 800780a:	bf00      	nop
 800780c:	371c      	adds	r7, #28
 800780e:	46bd      	mov	sp, r7
 8007810:	bc80      	pop	{r7}
 8007812:	4770      	bx	lr

08007814 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a1b      	ldr	r3, [r3, #32]
 8007824:	f023 0210 	bic.w	r2, r3, #16
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	699b      	ldr	r3, [r3, #24]
 8007830:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	6a1b      	ldr	r3, [r3, #32]
 8007836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800783e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	031b      	lsls	r3, r3, #12
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	4313      	orrs	r3, r2
 8007848:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007850:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	011b      	lsls	r3, r3, #4
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	621a      	str	r2, [r3, #32]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	bc80      	pop	{r7}
 8007870:	4770      	bx	lr

08007872 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007872:	b480      	push	{r7}
 8007874:	b085      	sub	sp, #20
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
 800787a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007888:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	4313      	orrs	r3, r2
 8007890:	f043 0307 	orr.w	r3, r3, #7
 8007894:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	609a      	str	r2, [r3, #8]
}
 800789c:	bf00      	nop
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bc80      	pop	{r7}
 80078a4:	4770      	bx	lr

080078a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80078a6:	b480      	push	{r7}
 80078a8:	b087      	sub	sp, #28
 80078aa:	af00      	add	r7, sp, #0
 80078ac:	60f8      	str	r0, [r7, #12]
 80078ae:	60b9      	str	r1, [r7, #8]
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80078c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	021a      	lsls	r2, r3, #8
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	431a      	orrs	r2, r3
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	609a      	str	r2, [r3, #8]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	bc80      	pop	{r7}
 80078e2:	4770      	bx	lr

080078e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f003 031f 	and.w	r3, r3, #31
 80078f6:	2201      	movs	r2, #1
 80078f8:	fa02 f303 	lsl.w	r3, r2, r3
 80078fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	6a1a      	ldr	r2, [r3, #32]
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	43db      	mvns	r3, r3
 8007906:	401a      	ands	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	6a1a      	ldr	r2, [r3, #32]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	f003 031f 	and.w	r3, r3, #31
 8007916:	6879      	ldr	r1, [r7, #4]
 8007918:	fa01 f303 	lsl.w	r3, r1, r3
 800791c:	431a      	orrs	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	621a      	str	r2, [r3, #32]
}
 8007922:	bf00      	nop
 8007924:	371c      	adds	r7, #28
 8007926:	46bd      	mov	sp, r7
 8007928:	bc80      	pop	{r7}
 800792a:	4770      	bx	lr

0800792c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e046      	b.n	80079d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800796a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4a16      	ldr	r2, [pc, #88]	@ (80079dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d00e      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007990:	d009      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a12      	ldr	r2, [pc, #72]	@ (80079e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007998:	4293      	cmp	r3, r2
 800799a:	d004      	beq.n	80079a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a10      	ldr	r2, [pc, #64]	@ (80079e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d10c      	bne.n	80079c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80079ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	68ba      	ldr	r2, [r7, #8]
 80079b4:	4313      	orrs	r3, r2
 80079b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	40012c00 	.word	0x40012c00
 80079e0:	40000400 	.word	0x40000400
 80079e4:	40000800 	.word	0x40000800

080079e8 <HAL_UART_Init>:
 *         the UART_InitTypeDef and create the associated handle.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e03f      	b.n	8007a7a <HAL_UART_Init+0x92>
	assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

	if (huart->gState == HAL_UART_STATE_RESET) {
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_UART_Init+0x2c>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7fc fa40 	bl	8003e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2224      	movs	r2, #36	@ 0x24
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

	/* Disable the peripheral */
	__HAL_UART_DISABLE(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68da      	ldr	r2, [r3, #12]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a2a:	60da      	str	r2, [r3, #12]

	/* Set the UART Communication parameters */
	UART_SetConfig(huart);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 f829 	bl	8007a84 <UART_SetConfig>

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a40:	611a      	str	r2, [r3, #16]
	CLEAR_BIT(huart->Instance->CR3,
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	695a      	ldr	r2, [r3, #20]
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a50:	615a      	str	r2, [r3, #20]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	/* Enable the peripheral */
	__HAL_UART_ENABLE(huart);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	68da      	ldr	r2, [r3, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a60:	60da      	str	r2, [r3, #12]

	/* Initialize the UART state */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	641a      	str	r2, [r3, #64]	@ 0x40
	huart->gState = HAL_UART_STATE_READY;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2220      	movs	r2, #32
 8007a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
	huart->RxState = HAL_UART_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2220      	movs	r2, #32
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

	return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
	...

08007a84 <UART_SetConfig>:
 * @brief  Configures the UART peripheral.
 * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
 *                the configuration information for the specified UART module.
 * @retval None
 */
static void UART_SetConfig(UART_HandleTypeDef *huart) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	assert_param(IS_UART_MODE(huart->Init.Mode));

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits
	 according to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689a      	ldr	r2, [r3, #8]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	431a      	orrs	r2, r3
			| huart->Init.Mode;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	695b      	ldr	r3, [r3, #20]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60bb      	str	r3, [r7, #8]
	MODIFY_REG(huart->Instance->CR1,
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007abe:	f023 030c 	bic.w	r3, r3, #12
 8007ac2:	687a      	ldr	r2, [r7, #4]
 8007ac4:	6812      	ldr	r2, [r2, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	60d3      	str	r3, [r2, #12]
			tmpreg);
#endif /* USART_CR1_OVER8 */

	/*-------------------------- USART CR3 Configuration -----------------------*/
	/* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
	MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE),
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	695b      	ldr	r3, [r3, #20]
 8007ad2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	699a      	ldr	r2, [r3, #24]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	430a      	orrs	r2, r1
 8007ae0:	615a      	str	r2, [r3, #20]
			huart->Init.HwFlowCtl);

	if (huart->Instance == USART1) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a2c      	ldr	r2, [pc, #176]	@ (8007b98 <UART_SetConfig+0x114>)
 8007ae8:	4293      	cmp	r3, r2
 8007aea:	d103      	bne.n	8007af4 <UART_SetConfig+0x70>
		pclk = HAL_RCC_GetPCLK2Freq();
 8007aec:	f7fe fda8 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 8007af0:	60f8      	str	r0, [r7, #12]
 8007af2:	e002      	b.n	8007afa <UART_SetConfig+0x76>
	} else {
		pclk = HAL_RCC_GetPCLK1Freq();
 8007af4:	f7fe fd90 	bl	8006618 <HAL_RCC_GetPCLK1Freq>
 8007af8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
	huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009a      	lsls	r2, r3, #2
 8007b04:	441a      	add	r2, r3
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	685b      	ldr	r3, [r3, #4]
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b10:	4a22      	ldr	r2, [pc, #136]	@ (8007b9c <UART_SetConfig+0x118>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	095b      	lsrs	r3, r3, #5
 8007b18:	0119      	lsls	r1, r3, #4
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	4613      	mov	r3, r2
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	009a      	lsls	r2, r3, #2
 8007b24:	441a      	add	r2, r3
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b30:	4b1a      	ldr	r3, [pc, #104]	@ (8007b9c <UART_SetConfig+0x118>)
 8007b32:	fba3 0302 	umull	r0, r3, r3, r2
 8007b36:	095b      	lsrs	r3, r3, #5
 8007b38:	2064      	movs	r0, #100	@ 0x64
 8007b3a:	fb00 f303 	mul.w	r3, r0, r3
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	011b      	lsls	r3, r3, #4
 8007b42:	3332      	adds	r3, #50	@ 0x32
 8007b44:	4a15      	ldr	r2, [pc, #84]	@ (8007b9c <UART_SetConfig+0x118>)
 8007b46:	fba2 2303 	umull	r2, r3, r2, r3
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b50:	4419      	add	r1, r3
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	4613      	mov	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4413      	add	r3, r2
 8007b5a:	009a      	lsls	r2, r3, #2
 8007b5c:	441a      	add	r2, r3
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b68:	4b0c      	ldr	r3, [pc, #48]	@ (8007b9c <UART_SetConfig+0x118>)
 8007b6a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b6e:	095b      	lsrs	r3, r3, #5
 8007b70:	2064      	movs	r0, #100	@ 0x64
 8007b72:	fb00 f303 	mul.w	r3, r0, r3
 8007b76:	1ad3      	subs	r3, r2, r3
 8007b78:	011b      	lsls	r3, r3, #4
 8007b7a:	3332      	adds	r3, #50	@ 0x32
 8007b7c:	4a07      	ldr	r2, [pc, #28]	@ (8007b9c <UART_SetConfig+0x118>)
 8007b7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b82:	095b      	lsrs	r3, r3, #5
 8007b84:	f003 020f 	and.w	r2, r3, #15
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	440a      	add	r2, r1
 8007b8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}
 8007b98:	40013800 	.word	0x40013800
 8007b9c:	51eb851f 	.word	0x51eb851f

08007ba0 <_ZdlPvj>:
 8007ba0:	f000 b800 	b.w	8007ba4 <_ZdlPv>

08007ba4 <_ZdlPv>:
 8007ba4:	f001 b990 	b.w	8008ec8 <free>

08007ba8 <pow>:
 8007ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bac:	4614      	mov	r4, r2
 8007bae:	461d      	mov	r5, r3
 8007bb0:	4680      	mov	r8, r0
 8007bb2:	4689      	mov	r9, r1
 8007bb4:	f000 f8c8 	bl	8007d48 <__ieee754_pow>
 8007bb8:	4622      	mov	r2, r4
 8007bba:	4606      	mov	r6, r0
 8007bbc:	460f      	mov	r7, r1
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	4620      	mov	r0, r4
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	f7f8 ff22 	bl	8000a0c <__aeabi_dcmpun>
 8007bc8:	bbc8      	cbnz	r0, 8007c3e <pow+0x96>
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4640      	mov	r0, r8
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	f7f8 fee9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bd6:	b1b8      	cbz	r0, 8007c08 <pow+0x60>
 8007bd8:	2200      	movs	r2, #0
 8007bda:	2300      	movs	r3, #0
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f8 fee2 	bl	80009a8 <__aeabi_dcmpeq>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	d141      	bne.n	8007c6c <pow+0xc4>
 8007be8:	4620      	mov	r0, r4
 8007bea:	4629      	mov	r1, r5
 8007bec:	f000 f861 	bl	8007cb2 <finite>
 8007bf0:	b328      	cbz	r0, 8007c3e <pow+0x96>
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f8 fedf 	bl	80009bc <__aeabi_dcmplt>
 8007bfe:	b1f0      	cbz	r0, 8007c3e <pow+0x96>
 8007c00:	f001 ffdc 	bl	8009bbc <__errno>
 8007c04:	2322      	movs	r3, #34	@ 0x22
 8007c06:	e019      	b.n	8007c3c <pow+0x94>
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f000 f851 	bl	8007cb2 <finite>
 8007c10:	b9c8      	cbnz	r0, 8007c46 <pow+0x9e>
 8007c12:	4640      	mov	r0, r8
 8007c14:	4649      	mov	r1, r9
 8007c16:	f000 f84c 	bl	8007cb2 <finite>
 8007c1a:	b1a0      	cbz	r0, 8007c46 <pow+0x9e>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	4629      	mov	r1, r5
 8007c20:	f000 f847 	bl	8007cb2 <finite>
 8007c24:	b178      	cbz	r0, 8007c46 <pow+0x9e>
 8007c26:	4632      	mov	r2, r6
 8007c28:	463b      	mov	r3, r7
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 feed 	bl	8000a0c <__aeabi_dcmpun>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	d0e4      	beq.n	8007c00 <pow+0x58>
 8007c36:	f001 ffc1 	bl	8009bbc <__errno>
 8007c3a:	2321      	movs	r3, #33	@ 0x21
 8007c3c:	6003      	str	r3, [r0, #0]
 8007c3e:	4630      	mov	r0, r6
 8007c40:	4639      	mov	r1, r7
 8007c42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c46:	2200      	movs	r2, #0
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	f7f8 feab 	bl	80009a8 <__aeabi_dcmpeq>
 8007c52:	2800      	cmp	r0, #0
 8007c54:	d0f3      	beq.n	8007c3e <pow+0x96>
 8007c56:	4640      	mov	r0, r8
 8007c58:	4649      	mov	r1, r9
 8007c5a:	f000 f82a 	bl	8007cb2 <finite>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d0ed      	beq.n	8007c3e <pow+0x96>
 8007c62:	4620      	mov	r0, r4
 8007c64:	4629      	mov	r1, r5
 8007c66:	f000 f824 	bl	8007cb2 <finite>
 8007c6a:	e7c8      	b.n	8007bfe <pow+0x56>
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	4f01      	ldr	r7, [pc, #4]	@ (8007c74 <pow+0xcc>)
 8007c70:	e7e5      	b.n	8007c3e <pow+0x96>
 8007c72:	bf00      	nop
 8007c74:	3ff00000 	.word	0x3ff00000

08007c78 <atan2f>:
 8007c78:	f000 bd92 	b.w	80087a0 <__ieee754_atan2f>

08007c7c <fmodf>:
 8007c7c:	b570      	push	{r4, r5, r6, lr}
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460d      	mov	r5, r1
 8007c82:	f000 fe15 	bl	80088b0 <__ieee754_fmodf>
 8007c86:	4629      	mov	r1, r5
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7f9 fa20 	bl	80010d0 <__aeabi_fcmpun>
 8007c90:	b968      	cbnz	r0, 8007cae <fmodf+0x32>
 8007c92:	2100      	movs	r1, #0
 8007c94:	4628      	mov	r0, r5
 8007c96:	f7f9 f9e9 	bl	800106c <__aeabi_fcmpeq>
 8007c9a:	b140      	cbz	r0, 8007cae <fmodf+0x32>
 8007c9c:	f001 ff8e 	bl	8009bbc <__errno>
 8007ca0:	2321      	movs	r3, #33	@ 0x21
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	6003      	str	r3, [r0, #0]
 8007ca6:	4608      	mov	r0, r1
 8007ca8:	f7f9 f900 	bl	8000eac <__aeabi_fdiv>
 8007cac:	4604      	mov	r4, r0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	bd70      	pop	{r4, r5, r6, pc}

08007cb2 <finite>:
 8007cb2:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007cb6:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007cba:	0fc0      	lsrs	r0, r0, #31
 8007cbc:	4770      	bx	lr
	...

08007cc0 <floorf>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007cc6:	3d7f      	subs	r5, #127	@ 0x7f
 8007cc8:	2d16      	cmp	r5, #22
 8007cca:	4601      	mov	r1, r0
 8007ccc:	4604      	mov	r4, r0
 8007cce:	f020 4600 	bic.w	r6, r0, #2147483648	@ 0x80000000
 8007cd2:	dc26      	bgt.n	8007d22 <floorf+0x62>
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	da0f      	bge.n	8007cf8 <floorf+0x38>
 8007cd8:	4917      	ldr	r1, [pc, #92]	@ (8007d38 <floorf+0x78>)
 8007cda:	f7f8 ff2b 	bl	8000b34 <__addsf3>
 8007cde:	2100      	movs	r1, #0
 8007ce0:	f7f9 f9ec 	bl	80010bc <__aeabi_fcmpgt>
 8007ce4:	b130      	cbz	r0, 8007cf4 <floorf+0x34>
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	da23      	bge.n	8007d32 <floorf+0x72>
 8007cea:	2e00      	cmp	r6, #0
 8007cec:	4c13      	ldr	r4, [pc, #76]	@ (8007d3c <floorf+0x7c>)
 8007cee:	bf08      	it	eq
 8007cf0:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007cf4:	4621      	mov	r1, r4
 8007cf6:	e01a      	b.n	8007d2e <floorf+0x6e>
 8007cf8:	4e11      	ldr	r6, [pc, #68]	@ (8007d40 <floorf+0x80>)
 8007cfa:	412e      	asrs	r6, r5
 8007cfc:	4230      	tst	r0, r6
 8007cfe:	d016      	beq.n	8007d2e <floorf+0x6e>
 8007d00:	490d      	ldr	r1, [pc, #52]	@ (8007d38 <floorf+0x78>)
 8007d02:	f7f8 ff17 	bl	8000b34 <__addsf3>
 8007d06:	2100      	movs	r1, #0
 8007d08:	f7f9 f9d8 	bl	80010bc <__aeabi_fcmpgt>
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d0f1      	beq.n	8007cf4 <floorf+0x34>
 8007d10:	2c00      	cmp	r4, #0
 8007d12:	bfbe      	ittt	lt
 8007d14:	f44f 0300 	movlt.w	r3, #8388608	@ 0x800000
 8007d18:	412b      	asrlt	r3, r5
 8007d1a:	18e4      	addlt	r4, r4, r3
 8007d1c:	ea24 0406 	bic.w	r4, r4, r6
 8007d20:	e7e8      	b.n	8007cf4 <floorf+0x34>
 8007d22:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007d26:	d302      	bcc.n	8007d2e <floorf+0x6e>
 8007d28:	f7f8 ff04 	bl	8000b34 <__addsf3>
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	4608      	mov	r0, r1
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
 8007d32:	2400      	movs	r4, #0
 8007d34:	e7de      	b.n	8007cf4 <floorf+0x34>
 8007d36:	bf00      	nop
 8007d38:	7149f2ca 	.word	0x7149f2ca
 8007d3c:	bf800000 	.word	0xbf800000
 8007d40:	007fffff 	.word	0x007fffff
 8007d44:	00000000 	.word	0x00000000

08007d48 <__ieee754_pow>:
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	b091      	sub	sp, #68	@ 0x44
 8007d4e:	e9cd 2300 	strd	r2, r3, [sp]
 8007d52:	468b      	mov	fp, r1
 8007d54:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007d58:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	ea57 0001 	orrs.w	r0, r7, r1
 8007d62:	d112      	bne.n	8007d8a <__ieee754_pow+0x42>
 8007d64:	4653      	mov	r3, sl
 8007d66:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007d6a:	18db      	adds	r3, r3, r3
 8007d6c:	4152      	adcs	r2, r2
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	4b91      	ldr	r3, [pc, #580]	@ (8007fb8 <__ieee754_pow+0x270>)
 8007d72:	4193      	sbcs	r3, r2
 8007d74:	f080 84ce 	bcs.w	8008714 <__ieee754_pow+0x9cc>
 8007d78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d7c:	4650      	mov	r0, sl
 8007d7e:	4659      	mov	r1, fp
 8007d80:	f7f8 f9f4 	bl	800016c <__adddf3>
 8007d84:	b011      	add	sp, #68	@ 0x44
 8007d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8007fbc <__ieee754_pow+0x274>)
 8007d8c:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007d90:	429e      	cmp	r6, r3
 8007d92:	465d      	mov	r5, fp
 8007d94:	46d1      	mov	r9, sl
 8007d96:	d807      	bhi.n	8007da8 <__ieee754_pow+0x60>
 8007d98:	d102      	bne.n	8007da0 <__ieee754_pow+0x58>
 8007d9a:	f1ba 0f00 	cmp.w	sl, #0
 8007d9e:	d1eb      	bne.n	8007d78 <__ieee754_pow+0x30>
 8007da0:	429f      	cmp	r7, r3
 8007da2:	d801      	bhi.n	8007da8 <__ieee754_pow+0x60>
 8007da4:	d10f      	bne.n	8007dc6 <__ieee754_pow+0x7e>
 8007da6:	b171      	cbz	r1, 8007dc6 <__ieee754_pow+0x7e>
 8007da8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007dac:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007db0:	ea55 0509 	orrs.w	r5, r5, r9
 8007db4:	d1e0      	bne.n	8007d78 <__ieee754_pow+0x30>
 8007db6:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007dba:	18db      	adds	r3, r3, r3
 8007dbc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007dc0:	4152      	adcs	r2, r2
 8007dc2:	429d      	cmp	r5, r3
 8007dc4:	e7d4      	b.n	8007d70 <__ieee754_pow+0x28>
 8007dc6:	2d00      	cmp	r5, #0
 8007dc8:	4633      	mov	r3, r6
 8007dca:	da39      	bge.n	8007e40 <__ieee754_pow+0xf8>
 8007dcc:	4a7c      	ldr	r2, [pc, #496]	@ (8007fc0 <__ieee754_pow+0x278>)
 8007dce:	4297      	cmp	r7, r2
 8007dd0:	d84e      	bhi.n	8007e70 <__ieee754_pow+0x128>
 8007dd2:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007dd6:	4297      	cmp	r7, r2
 8007dd8:	f240 84ab 	bls.w	8008732 <__ieee754_pow+0x9ea>
 8007ddc:	153a      	asrs	r2, r7, #20
 8007dde:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007de2:	2a14      	cmp	r2, #20
 8007de4:	dd0f      	ble.n	8007e06 <__ieee754_pow+0xbe>
 8007de6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8007dea:	fa21 f402 	lsr.w	r4, r1, r2
 8007dee:	fa04 f202 	lsl.w	r2, r4, r2
 8007df2:	428a      	cmp	r2, r1
 8007df4:	f040 849d 	bne.w	8008732 <__ieee754_pow+0x9ea>
 8007df8:	f004 0401 	and.w	r4, r4, #1
 8007dfc:	f1c4 0402 	rsb	r4, r4, #2
 8007e00:	2900      	cmp	r1, #0
 8007e02:	d15a      	bne.n	8007eba <__ieee754_pow+0x172>
 8007e04:	e00e      	b.n	8007e24 <__ieee754_pow+0xdc>
 8007e06:	2900      	cmp	r1, #0
 8007e08:	d156      	bne.n	8007eb8 <__ieee754_pow+0x170>
 8007e0a:	f1c2 0214 	rsb	r2, r2, #20
 8007e0e:	fa47 f402 	asr.w	r4, r7, r2
 8007e12:	fa04 f202 	lsl.w	r2, r4, r2
 8007e16:	42ba      	cmp	r2, r7
 8007e18:	f040 8488 	bne.w	800872c <__ieee754_pow+0x9e4>
 8007e1c:	f004 0401 	and.w	r4, r4, #1
 8007e20:	f1c4 0402 	rsb	r4, r4, #2
 8007e24:	4a67      	ldr	r2, [pc, #412]	@ (8007fc4 <__ieee754_pow+0x27c>)
 8007e26:	4297      	cmp	r7, r2
 8007e28:	d130      	bne.n	8007e8c <__ieee754_pow+0x144>
 8007e2a:	f1b8 0f00 	cmp.w	r8, #0
 8007e2e:	f280 8479 	bge.w	8008724 <__ieee754_pow+0x9dc>
 8007e32:	4652      	mov	r2, sl
 8007e34:	465b      	mov	r3, fp
 8007e36:	2000      	movs	r0, #0
 8007e38:	4962      	ldr	r1, [pc, #392]	@ (8007fc4 <__ieee754_pow+0x27c>)
 8007e3a:	f7f8 fc77 	bl	800072c <__aeabi_ddiv>
 8007e3e:	e7a1      	b.n	8007d84 <__ieee754_pow+0x3c>
 8007e40:	2400      	movs	r4, #0
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d139      	bne.n	8007eba <__ieee754_pow+0x172>
 8007e46:	4a5d      	ldr	r2, [pc, #372]	@ (8007fbc <__ieee754_pow+0x274>)
 8007e48:	4297      	cmp	r7, r2
 8007e4a:	d1eb      	bne.n	8007e24 <__ieee754_pow+0xdc>
 8007e4c:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 8007e50:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007e54:	ea53 0309 	orrs.w	r3, r3, r9
 8007e58:	f000 845c 	beq.w	8008714 <__ieee754_pow+0x9cc>
 8007e5c:	4b5a      	ldr	r3, [pc, #360]	@ (8007fc8 <__ieee754_pow+0x280>)
 8007e5e:	429e      	cmp	r6, r3
 8007e60:	d908      	bls.n	8007e74 <__ieee754_pow+0x12c>
 8007e62:	f1b8 0f00 	cmp.w	r8, #0
 8007e66:	f2c0 8459 	blt.w	800871c <__ieee754_pow+0x9d4>
 8007e6a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e6e:	e789      	b.n	8007d84 <__ieee754_pow+0x3c>
 8007e70:	2402      	movs	r4, #2
 8007e72:	e7e6      	b.n	8007e42 <__ieee754_pow+0xfa>
 8007e74:	f1b8 0f00 	cmp.w	r8, #0
 8007e78:	f04f 0000 	mov.w	r0, #0
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	da80      	bge.n	8007d84 <__ieee754_pow+0x3c>
 8007e82:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007e86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8007e8a:	e77b      	b.n	8007d84 <__ieee754_pow+0x3c>
 8007e8c:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 8007e90:	d106      	bne.n	8007ea0 <__ieee754_pow+0x158>
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	4650      	mov	r0, sl
 8007e98:	4659      	mov	r1, fp
 8007e9a:	f7f8 fb1d 	bl	80004d8 <__aeabi_dmul>
 8007e9e:	e771      	b.n	8007d84 <__ieee754_pow+0x3c>
 8007ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8007fcc <__ieee754_pow+0x284>)
 8007ea2:	4590      	cmp	r8, r2
 8007ea4:	d109      	bne.n	8007eba <__ieee754_pow+0x172>
 8007ea6:	2d00      	cmp	r5, #0
 8007ea8:	db07      	blt.n	8007eba <__ieee754_pow+0x172>
 8007eaa:	4650      	mov	r0, sl
 8007eac:	4659      	mov	r1, fp
 8007eae:	b011      	add	sp, #68	@ 0x44
 8007eb0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	f000 bf2a 	b.w	8008d0c <__ieee754_sqrt>
 8007eb8:	2400      	movs	r4, #0
 8007eba:	4650      	mov	r0, sl
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	9302      	str	r3, [sp, #8]
 8007ec0:	f000 fc6a 	bl	8008798 <fabs>
 8007ec4:	9b02      	ldr	r3, [sp, #8]
 8007ec6:	f1b9 0f00 	cmp.w	r9, #0
 8007eca:	d127      	bne.n	8007f1c <__ieee754_pow+0x1d4>
 8007ecc:	4a3d      	ldr	r2, [pc, #244]	@ (8007fc4 <__ieee754_pow+0x27c>)
 8007ece:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 8007ed2:	4594      	cmp	ip, r2
 8007ed4:	d000      	beq.n	8007ed8 <__ieee754_pow+0x190>
 8007ed6:	bb0e      	cbnz	r6, 8007f1c <__ieee754_pow+0x1d4>
 8007ed8:	f1b8 0f00 	cmp.w	r8, #0
 8007edc:	da05      	bge.n	8007eea <__ieee754_pow+0x1a2>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	4937      	ldr	r1, [pc, #220]	@ (8007fc4 <__ieee754_pow+0x27c>)
 8007ee6:	f7f8 fc21 	bl	800072c <__aeabi_ddiv>
 8007eea:	2d00      	cmp	r5, #0
 8007eec:	f6bf af4a 	bge.w	8007d84 <__ieee754_pow+0x3c>
 8007ef0:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 8007ef4:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007ef8:	4326      	orrs	r6, r4
 8007efa:	d108      	bne.n	8007f0e <__ieee754_pow+0x1c6>
 8007efc:	4602      	mov	r2, r0
 8007efe:	460b      	mov	r3, r1
 8007f00:	4610      	mov	r0, r2
 8007f02:	4619      	mov	r1, r3
 8007f04:	f7f8 f930 	bl	8000168 <__aeabi_dsub>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	e795      	b.n	8007e3a <__ieee754_pow+0xf2>
 8007f0e:	2c01      	cmp	r4, #1
 8007f10:	f47f af38 	bne.w	8007d84 <__ieee754_pow+0x3c>
 8007f14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f18:	4619      	mov	r1, r3
 8007f1a:	e733      	b.n	8007d84 <__ieee754_pow+0x3c>
 8007f1c:	0fea      	lsrs	r2, r5, #31
 8007f1e:	3a01      	subs	r2, #1
 8007f20:	ea52 0c04 	orrs.w	ip, r2, r4
 8007f24:	d102      	bne.n	8007f2c <__ieee754_pow+0x1e4>
 8007f26:	4652      	mov	r2, sl
 8007f28:	465b      	mov	r3, fp
 8007f2a:	e7e9      	b.n	8007f00 <__ieee754_pow+0x1b8>
 8007f2c:	f04f 0900 	mov.w	r9, #0
 8007f30:	3c01      	subs	r4, #1
 8007f32:	4314      	orrs	r4, r2
 8007f34:	bf14      	ite	ne
 8007f36:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007fc4 <__ieee754_pow+0x27c>
 8007f3a:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007fd0 <__ieee754_pow+0x288>
 8007f3e:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 8007f42:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 8007f46:	f240 8107 	bls.w	8008158 <__ieee754_pow+0x410>
 8007f4a:	4b22      	ldr	r3, [pc, #136]	@ (8007fd4 <__ieee754_pow+0x28c>)
 8007f4c:	429f      	cmp	r7, r3
 8007f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8007fc8 <__ieee754_pow+0x280>)
 8007f50:	d913      	bls.n	8007f7a <__ieee754_pow+0x232>
 8007f52:	429e      	cmp	r6, r3
 8007f54:	d808      	bhi.n	8007f68 <__ieee754_pow+0x220>
 8007f56:	f1b8 0f00 	cmp.w	r8, #0
 8007f5a:	da08      	bge.n	8007f6e <__ieee754_pow+0x226>
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	b011      	add	sp, #68	@ 0x44
 8007f60:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	f000 becc 	b.w	8008d00 <__math_oflow>
 8007f68:	f1b8 0f00 	cmp.w	r8, #0
 8007f6c:	dcf6      	bgt.n	8007f5c <__ieee754_pow+0x214>
 8007f6e:	2000      	movs	r0, #0
 8007f70:	b011      	add	sp, #68	@ 0x44
 8007f72:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f76:	f000 bebe 	b.w	8008cf6 <__math_uflow>
 8007f7a:	429e      	cmp	r6, r3
 8007f7c:	d20c      	bcs.n	8007f98 <__ieee754_pow+0x250>
 8007f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	2300      	movs	r3, #0
 8007f86:	f7f8 fd19 	bl	80009bc <__aeabi_dcmplt>
 8007f8a:	3800      	subs	r0, #0
 8007f8c:	bf18      	it	ne
 8007f8e:	2001      	movne	r0, #1
 8007f90:	f1b8 0f00 	cmp.w	r8, #0
 8007f94:	daec      	bge.n	8007f70 <__ieee754_pow+0x228>
 8007f96:	e7e2      	b.n	8007f5e <__ieee754_pow+0x216>
 8007f98:	4b0a      	ldr	r3, [pc, #40]	@ (8007fc4 <__ieee754_pow+0x27c>)
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	429e      	cmp	r6, r3
 8007f9e:	d91b      	bls.n	8007fd8 <__ieee754_pow+0x290>
 8007fa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	f7f8 fd09 	bl	80009bc <__aeabi_dcmplt>
 8007faa:	3800      	subs	r0, #0
 8007fac:	bf18      	it	ne
 8007fae:	2001      	movne	r0, #1
 8007fb0:	f1b8 0f00 	cmp.w	r8, #0
 8007fb4:	dcd3      	bgt.n	8007f5e <__ieee754_pow+0x216>
 8007fb6:	e7db      	b.n	8007f70 <__ieee754_pow+0x228>
 8007fb8:	fff00000 	.word	0xfff00000
 8007fbc:	7ff00000 	.word	0x7ff00000
 8007fc0:	433fffff 	.word	0x433fffff
 8007fc4:	3ff00000 	.word	0x3ff00000
 8007fc8:	3fefffff 	.word	0x3fefffff
 8007fcc:	3fe00000 	.word	0x3fe00000
 8007fd0:	bff00000 	.word	0xbff00000
 8007fd4:	43f00000 	.word	0x43f00000
 8007fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8008148 <__ieee754_pow+0x400>)
 8007fda:	f7f8 f8c5 	bl	8000168 <__aeabi_dsub>
 8007fde:	a352      	add	r3, pc, #328	@ (adr r3, 8008128 <__ieee754_pow+0x3e0>)
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	f7f8 fa76 	bl	80004d8 <__aeabi_dmul>
 8007fec:	a350      	add	r3, pc, #320	@ (adr r3, 8008130 <__ieee754_pow+0x3e8>)
 8007fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	460f      	mov	r7, r1
 8007ff6:	4620      	mov	r0, r4
 8007ff8:	4629      	mov	r1, r5
 8007ffa:	f7f8 fa6d 	bl	80004d8 <__aeabi_dmul>
 8007ffe:	2200      	movs	r2, #0
 8008000:	4682      	mov	sl, r0
 8008002:	468b      	mov	fp, r1
 8008004:	4620      	mov	r0, r4
 8008006:	4629      	mov	r1, r5
 8008008:	4b50      	ldr	r3, [pc, #320]	@ (800814c <__ieee754_pow+0x404>)
 800800a:	f7f8 fa65 	bl	80004d8 <__aeabi_dmul>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	a149      	add	r1, pc, #292	@ (adr r1, 8008138 <__ieee754_pow+0x3f0>)
 8008014:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008018:	f7f8 f8a6 	bl	8000168 <__aeabi_dsub>
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	f7f8 fa5a 	bl	80004d8 <__aeabi_dmul>
 8008024:	4602      	mov	r2, r0
 8008026:	460b      	mov	r3, r1
 8008028:	2000      	movs	r0, #0
 800802a:	4949      	ldr	r1, [pc, #292]	@ (8008150 <__ieee754_pow+0x408>)
 800802c:	f7f8 f89c 	bl	8000168 <__aeabi_dsub>
 8008030:	4622      	mov	r2, r4
 8008032:	4680      	mov	r8, r0
 8008034:	4689      	mov	r9, r1
 8008036:	462b      	mov	r3, r5
 8008038:	4620      	mov	r0, r4
 800803a:	4629      	mov	r1, r5
 800803c:	f7f8 fa4c 	bl	80004d8 <__aeabi_dmul>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	4640      	mov	r0, r8
 8008046:	4649      	mov	r1, r9
 8008048:	f7f8 fa46 	bl	80004d8 <__aeabi_dmul>
 800804c:	a33c      	add	r3, pc, #240	@ (adr r3, 8008140 <__ieee754_pow+0x3f8>)
 800804e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008052:	f7f8 fa41 	bl	80004d8 <__aeabi_dmul>
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4650      	mov	r0, sl
 800805c:	4659      	mov	r1, fp
 800805e:	f7f8 f883 	bl	8000168 <__aeabi_dsub>
 8008062:	2400      	movs	r4, #0
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4680      	mov	r8, r0
 800806a:	4689      	mov	r9, r1
 800806c:	4630      	mov	r0, r6
 800806e:	4639      	mov	r1, r7
 8008070:	f7f8 f87c 	bl	800016c <__adddf3>
 8008074:	4632      	mov	r2, r6
 8008076:	463b      	mov	r3, r7
 8008078:	4620      	mov	r0, r4
 800807a:	460d      	mov	r5, r1
 800807c:	f7f8 f874 	bl	8000168 <__aeabi_dsub>
 8008080:	4602      	mov	r2, r0
 8008082:	460b      	mov	r3, r1
 8008084:	4640      	mov	r0, r8
 8008086:	4649      	mov	r1, r9
 8008088:	f7f8 f86e 	bl	8000168 <__aeabi_dsub>
 800808c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008090:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008094:	2300      	movs	r3, #0
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080a4:	4652      	mov	r2, sl
 80080a6:	465b      	mov	r3, fp
 80080a8:	f7f8 f85e 	bl	8000168 <__aeabi_dsub>
 80080ac:	4622      	mov	r2, r4
 80080ae:	462b      	mov	r3, r5
 80080b0:	f7f8 fa12 	bl	80004d8 <__aeabi_dmul>
 80080b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80080b8:	4680      	mov	r8, r0
 80080ba:	4689      	mov	r9, r1
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 fa0a 	bl	80004d8 <__aeabi_dmul>
 80080c4:	4602      	mov	r2, r0
 80080c6:	460b      	mov	r3, r1
 80080c8:	4640      	mov	r0, r8
 80080ca:	4649      	mov	r1, r9
 80080cc:	f7f8 f84e 	bl	800016c <__adddf3>
 80080d0:	4652      	mov	r2, sl
 80080d2:	465b      	mov	r3, fp
 80080d4:	4606      	mov	r6, r0
 80080d6:	460f      	mov	r7, r1
 80080d8:	4620      	mov	r0, r4
 80080da:	4629      	mov	r1, r5
 80080dc:	f7f8 f9fc 	bl	80004d8 <__aeabi_dmul>
 80080e0:	460b      	mov	r3, r1
 80080e2:	4602      	mov	r2, r0
 80080e4:	4680      	mov	r8, r0
 80080e6:	4689      	mov	r9, r1
 80080e8:	4630      	mov	r0, r6
 80080ea:	4639      	mov	r1, r7
 80080ec:	f7f8 f83e 	bl	800016c <__adddf3>
 80080f0:	4b18      	ldr	r3, [pc, #96]	@ (8008154 <__ieee754_pow+0x40c>)
 80080f2:	4604      	mov	r4, r0
 80080f4:	4299      	cmp	r1, r3
 80080f6:	460d      	mov	r5, r1
 80080f8:	468a      	mov	sl, r1
 80080fa:	468b      	mov	fp, r1
 80080fc:	f340 82e0 	ble.w	80086c0 <__ieee754_pow+0x978>
 8008100:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008104:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008108:	4303      	orrs	r3, r0
 800810a:	f000 81df 	beq.w	80084cc <__ieee754_pow+0x784>
 800810e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008112:	2200      	movs	r2, #0
 8008114:	2300      	movs	r3, #0
 8008116:	f7f8 fc51 	bl	80009bc <__aeabi_dcmplt>
 800811a:	3800      	subs	r0, #0
 800811c:	bf18      	it	ne
 800811e:	2001      	movne	r0, #1
 8008120:	e71d      	b.n	8007f5e <__ieee754_pow+0x216>
 8008122:	bf00      	nop
 8008124:	f3af 8000 	nop.w
 8008128:	60000000 	.word	0x60000000
 800812c:	3ff71547 	.word	0x3ff71547
 8008130:	f85ddf44 	.word	0xf85ddf44
 8008134:	3e54ae0b 	.word	0x3e54ae0b
 8008138:	55555555 	.word	0x55555555
 800813c:	3fd55555 	.word	0x3fd55555
 8008140:	652b82fe 	.word	0x652b82fe
 8008144:	3ff71547 	.word	0x3ff71547
 8008148:	3ff00000 	.word	0x3ff00000
 800814c:	3fd00000 	.word	0x3fd00000
 8008150:	3fe00000 	.word	0x3fe00000
 8008154:	408fffff 	.word	0x408fffff
 8008158:	4ad3      	ldr	r2, [pc, #844]	@ (80084a8 <__ieee754_pow+0x760>)
 800815a:	402a      	ands	r2, r5
 800815c:	2a00      	cmp	r2, #0
 800815e:	f040 817a 	bne.w	8008456 <__ieee754_pow+0x70e>
 8008162:	4bd2      	ldr	r3, [pc, #840]	@ (80084ac <__ieee754_pow+0x764>)
 8008164:	2200      	movs	r2, #0
 8008166:	f7f8 f9b7 	bl	80004d8 <__aeabi_dmul>
 800816a:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 800816e:	460b      	mov	r3, r1
 8008170:	151a      	asrs	r2, r3, #20
 8008172:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008176:	4422      	add	r2, r4
 8008178:	920a      	str	r2, [sp, #40]	@ 0x28
 800817a:	4acd      	ldr	r2, [pc, #820]	@ (80084b0 <__ieee754_pow+0x768>)
 800817c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008180:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 8008184:	4293      	cmp	r3, r2
 8008186:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800818a:	dd08      	ble.n	800819e <__ieee754_pow+0x456>
 800818c:	4ac9      	ldr	r2, [pc, #804]	@ (80084b4 <__ieee754_pow+0x76c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	f340 8163 	ble.w	800845a <__ieee754_pow+0x712>
 8008194:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008196:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800819a:	3301      	adds	r3, #1
 800819c:	930a      	str	r3, [sp, #40]	@ 0x28
 800819e:	2600      	movs	r6, #0
 80081a0:	00f3      	lsls	r3, r6, #3
 80081a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081a4:	4bc4      	ldr	r3, [pc, #784]	@ (80084b8 <__ieee754_pow+0x770>)
 80081a6:	4629      	mov	r1, r5
 80081a8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081b0:	461a      	mov	r2, r3
 80081b2:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80081b6:	4623      	mov	r3, r4
 80081b8:	4682      	mov	sl, r0
 80081ba:	f7f7 ffd5 	bl	8000168 <__aeabi_dsub>
 80081be:	4652      	mov	r2, sl
 80081c0:	462b      	mov	r3, r5
 80081c2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80081c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80081ca:	f7f7 ffcf 	bl	800016c <__adddf3>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	2000      	movs	r0, #0
 80081d4:	49b9      	ldr	r1, [pc, #740]	@ (80084bc <__ieee754_pow+0x774>)
 80081d6:	f7f8 faa9 	bl	800072c <__aeabi_ddiv>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80081e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081e6:	f7f8 f977 	bl	80004d8 <__aeabi_dmul>
 80081ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80081ee:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 80081f2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081f6:	2300      	movs	r3, #0
 80081f8:	2200      	movs	r2, #0
 80081fa:	46ab      	mov	fp, r5
 80081fc:	106d      	asrs	r5, r5, #1
 80081fe:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008202:	9304      	str	r3, [sp, #16]
 8008204:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008208:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800820c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008210:	4640      	mov	r0, r8
 8008212:	4649      	mov	r1, r9
 8008214:	4614      	mov	r4, r2
 8008216:	461d      	mov	r5, r3
 8008218:	f7f8 f95e 	bl	80004d8 <__aeabi_dmul>
 800821c:	4602      	mov	r2, r0
 800821e:	460b      	mov	r3, r1
 8008220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008224:	f7f7 ffa0 	bl	8000168 <__aeabi_dsub>
 8008228:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800822c:	4606      	mov	r6, r0
 800822e:	460f      	mov	r7, r1
 8008230:	4620      	mov	r0, r4
 8008232:	4629      	mov	r1, r5
 8008234:	f7f7 ff98 	bl	8000168 <__aeabi_dsub>
 8008238:	4602      	mov	r2, r0
 800823a:	460b      	mov	r3, r1
 800823c:	4650      	mov	r0, sl
 800823e:	4659      	mov	r1, fp
 8008240:	f7f7 ff92 	bl	8000168 <__aeabi_dsub>
 8008244:	4642      	mov	r2, r8
 8008246:	464b      	mov	r3, r9
 8008248:	f7f8 f946 	bl	80004d8 <__aeabi_dmul>
 800824c:	4602      	mov	r2, r0
 800824e:	460b      	mov	r3, r1
 8008250:	4630      	mov	r0, r6
 8008252:	4639      	mov	r1, r7
 8008254:	f7f7 ff88 	bl	8000168 <__aeabi_dsub>
 8008258:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800825c:	f7f8 f93c 	bl	80004d8 <__aeabi_dmul>
 8008260:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008264:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008268:	4610      	mov	r0, r2
 800826a:	4619      	mov	r1, r3
 800826c:	f7f8 f934 	bl	80004d8 <__aeabi_dmul>
 8008270:	a37b      	add	r3, pc, #492	@ (adr r3, 8008460 <__ieee754_pow+0x718>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
 800827a:	f7f8 f92d 	bl	80004d8 <__aeabi_dmul>
 800827e:	a37a      	add	r3, pc, #488	@ (adr r3, 8008468 <__ieee754_pow+0x720>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f7 ff72 	bl	800016c <__adddf3>
 8008288:	4622      	mov	r2, r4
 800828a:	462b      	mov	r3, r5
 800828c:	f7f8 f924 	bl	80004d8 <__aeabi_dmul>
 8008290:	a377      	add	r3, pc, #476	@ (adr r3, 8008470 <__ieee754_pow+0x728>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f7 ff69 	bl	800016c <__adddf3>
 800829a:	4622      	mov	r2, r4
 800829c:	462b      	mov	r3, r5
 800829e:	f7f8 f91b 	bl	80004d8 <__aeabi_dmul>
 80082a2:	a375      	add	r3, pc, #468	@ (adr r3, 8008478 <__ieee754_pow+0x730>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 ff60 	bl	800016c <__adddf3>
 80082ac:	4622      	mov	r2, r4
 80082ae:	462b      	mov	r3, r5
 80082b0:	f7f8 f912 	bl	80004d8 <__aeabi_dmul>
 80082b4:	a372      	add	r3, pc, #456	@ (adr r3, 8008480 <__ieee754_pow+0x738>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	f7f7 ff57 	bl	800016c <__adddf3>
 80082be:	4622      	mov	r2, r4
 80082c0:	462b      	mov	r3, r5
 80082c2:	f7f8 f909 	bl	80004d8 <__aeabi_dmul>
 80082c6:	a370      	add	r3, pc, #448	@ (adr r3, 8008488 <__ieee754_pow+0x740>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ff4e 	bl	800016c <__adddf3>
 80082d0:	4622      	mov	r2, r4
 80082d2:	4606      	mov	r6, r0
 80082d4:	460f      	mov	r7, r1
 80082d6:	462b      	mov	r3, r5
 80082d8:	4620      	mov	r0, r4
 80082da:	4629      	mov	r1, r5
 80082dc:	f7f8 f8fc 	bl	80004d8 <__aeabi_dmul>
 80082e0:	4602      	mov	r2, r0
 80082e2:	460b      	mov	r3, r1
 80082e4:	4630      	mov	r0, r6
 80082e6:	4639      	mov	r1, r7
 80082e8:	f7f8 f8f6 	bl	80004d8 <__aeabi_dmul>
 80082ec:	4604      	mov	r4, r0
 80082ee:	460d      	mov	r5, r1
 80082f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082f4:	4642      	mov	r2, r8
 80082f6:	464b      	mov	r3, r9
 80082f8:	f7f7 ff38 	bl	800016c <__adddf3>
 80082fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008300:	f7f8 f8ea 	bl	80004d8 <__aeabi_dmul>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f7 ff30 	bl	800016c <__adddf3>
 800830c:	4642      	mov	r2, r8
 800830e:	4682      	mov	sl, r0
 8008310:	468b      	mov	fp, r1
 8008312:	464b      	mov	r3, r9
 8008314:	4640      	mov	r0, r8
 8008316:	4649      	mov	r1, r9
 8008318:	f7f8 f8de 	bl	80004d8 <__aeabi_dmul>
 800831c:	2200      	movs	r2, #0
 800831e:	4b68      	ldr	r3, [pc, #416]	@ (80084c0 <__ieee754_pow+0x778>)
 8008320:	4606      	mov	r6, r0
 8008322:	460f      	mov	r7, r1
 8008324:	f7f7 ff22 	bl	800016c <__adddf3>
 8008328:	4652      	mov	r2, sl
 800832a:	465b      	mov	r3, fp
 800832c:	f7f7 ff1e 	bl	800016c <__adddf3>
 8008330:	2400      	movs	r4, #0
 8008332:	460d      	mov	r5, r1
 8008334:	4622      	mov	r2, r4
 8008336:	460b      	mov	r3, r1
 8008338:	4640      	mov	r0, r8
 800833a:	4649      	mov	r1, r9
 800833c:	f7f8 f8cc 	bl	80004d8 <__aeabi_dmul>
 8008340:	2200      	movs	r2, #0
 8008342:	4680      	mov	r8, r0
 8008344:	4689      	mov	r9, r1
 8008346:	4620      	mov	r0, r4
 8008348:	4629      	mov	r1, r5
 800834a:	4b5d      	ldr	r3, [pc, #372]	@ (80084c0 <__ieee754_pow+0x778>)
 800834c:	f7f7 ff0c 	bl	8000168 <__aeabi_dsub>
 8008350:	4632      	mov	r2, r6
 8008352:	463b      	mov	r3, r7
 8008354:	f7f7 ff08 	bl	8000168 <__aeabi_dsub>
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	4650      	mov	r0, sl
 800835e:	4659      	mov	r1, fp
 8008360:	f7f7 ff02 	bl	8000168 <__aeabi_dsub>
 8008364:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008368:	f7f8 f8b6 	bl	80004d8 <__aeabi_dmul>
 800836c:	4622      	mov	r2, r4
 800836e:	4606      	mov	r6, r0
 8008370:	460f      	mov	r7, r1
 8008372:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008376:	462b      	mov	r3, r5
 8008378:	f7f8 f8ae 	bl	80004d8 <__aeabi_dmul>
 800837c:	4602      	mov	r2, r0
 800837e:	460b      	mov	r3, r1
 8008380:	4630      	mov	r0, r6
 8008382:	4639      	mov	r1, r7
 8008384:	f7f7 fef2 	bl	800016c <__adddf3>
 8008388:	2400      	movs	r4, #0
 800838a:	4606      	mov	r6, r0
 800838c:	460f      	mov	r7, r1
 800838e:	4602      	mov	r2, r0
 8008390:	460b      	mov	r3, r1
 8008392:	4640      	mov	r0, r8
 8008394:	4649      	mov	r1, r9
 8008396:	f7f7 fee9 	bl	800016c <__adddf3>
 800839a:	a33d      	add	r3, pc, #244	@ (adr r3, 8008490 <__ieee754_pow+0x748>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	4620      	mov	r0, r4
 80083a2:	460d      	mov	r5, r1
 80083a4:	f7f8 f898 	bl	80004d8 <__aeabi_dmul>
 80083a8:	4642      	mov	r2, r8
 80083aa:	464b      	mov	r3, r9
 80083ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80083b0:	4620      	mov	r0, r4
 80083b2:	4629      	mov	r1, r5
 80083b4:	f7f7 fed8 	bl	8000168 <__aeabi_dsub>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	4630      	mov	r0, r6
 80083be:	4639      	mov	r1, r7
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	a334      	add	r3, pc, #208	@ (adr r3, 8008498 <__ieee754_pow+0x750>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f8 f885 	bl	80004d8 <__aeabi_dmul>
 80083ce:	a334      	add	r3, pc, #208	@ (adr r3, 80084a0 <__ieee754_pow+0x758>)
 80083d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d4:	4606      	mov	r6, r0
 80083d6:	460f      	mov	r7, r1
 80083d8:	4620      	mov	r0, r4
 80083da:	4629      	mov	r1, r5
 80083dc:	f7f8 f87c 	bl	80004d8 <__aeabi_dmul>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4630      	mov	r0, r6
 80083e6:	4639      	mov	r1, r7
 80083e8:	f7f7 fec0 	bl	800016c <__adddf3>
 80083ec:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083ee:	4b35      	ldr	r3, [pc, #212]	@ (80084c4 <__ieee754_pow+0x77c>)
 80083f0:	2400      	movs	r4, #0
 80083f2:	4413      	add	r3, r2
 80083f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f8:	f7f7 feb8 	bl	800016c <__adddf3>
 80083fc:	4682      	mov	sl, r0
 80083fe:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008400:	468b      	mov	fp, r1
 8008402:	f7f7 ffff 	bl	8000404 <__aeabi_i2d>
 8008406:	4606      	mov	r6, r0
 8008408:	460f      	mov	r7, r1
 800840a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800840c:	4b2e      	ldr	r3, [pc, #184]	@ (80084c8 <__ieee754_pow+0x780>)
 800840e:	4413      	add	r3, r2
 8008410:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008414:	4652      	mov	r2, sl
 8008416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841a:	465b      	mov	r3, fp
 800841c:	f7f7 fea6 	bl	800016c <__adddf3>
 8008420:	4642      	mov	r2, r8
 8008422:	464b      	mov	r3, r9
 8008424:	f7f7 fea2 	bl	800016c <__adddf3>
 8008428:	4632      	mov	r2, r6
 800842a:	463b      	mov	r3, r7
 800842c:	f7f7 fe9e 	bl	800016c <__adddf3>
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	4620      	mov	r0, r4
 8008436:	460d      	mov	r5, r1
 8008438:	f7f7 fe96 	bl	8000168 <__aeabi_dsub>
 800843c:	4642      	mov	r2, r8
 800843e:	464b      	mov	r3, r9
 8008440:	f7f7 fe92 	bl	8000168 <__aeabi_dsub>
 8008444:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008448:	f7f7 fe8e 	bl	8000168 <__aeabi_dsub>
 800844c:	4602      	mov	r2, r0
 800844e:	460b      	mov	r3, r1
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	e618      	b.n	8008088 <__ieee754_pow+0x340>
 8008456:	2400      	movs	r4, #0
 8008458:	e68a      	b.n	8008170 <__ieee754_pow+0x428>
 800845a:	2601      	movs	r6, #1
 800845c:	e6a0      	b.n	80081a0 <__ieee754_pow+0x458>
 800845e:	bf00      	nop
 8008460:	4a454eef 	.word	0x4a454eef
 8008464:	3fca7e28 	.word	0x3fca7e28
 8008468:	93c9db65 	.word	0x93c9db65
 800846c:	3fcd864a 	.word	0x3fcd864a
 8008470:	a91d4101 	.word	0xa91d4101
 8008474:	3fd17460 	.word	0x3fd17460
 8008478:	518f264d 	.word	0x518f264d
 800847c:	3fd55555 	.word	0x3fd55555
 8008480:	db6fabff 	.word	0xdb6fabff
 8008484:	3fdb6db6 	.word	0x3fdb6db6
 8008488:	33333303 	.word	0x33333303
 800848c:	3fe33333 	.word	0x3fe33333
 8008490:	e0000000 	.word	0xe0000000
 8008494:	3feec709 	.word	0x3feec709
 8008498:	dc3a03fd 	.word	0xdc3a03fd
 800849c:	3feec709 	.word	0x3feec709
 80084a0:	145b01f5 	.word	0x145b01f5
 80084a4:	be3e2fe0 	.word	0xbe3e2fe0
 80084a8:	7ff00000 	.word	0x7ff00000
 80084ac:	43400000 	.word	0x43400000
 80084b0:	0003988e 	.word	0x0003988e
 80084b4:	000bb679 	.word	0x000bb679
 80084b8:	0800b880 	.word	0x0800b880
 80084bc:	3ff00000 	.word	0x3ff00000
 80084c0:	40080000 	.word	0x40080000
 80084c4:	0800b860 	.word	0x0800b860
 80084c8:	0800b870 	.word	0x0800b870
 80084cc:	a39a      	add	r3, pc, #616	@ (adr r3, 8008738 <__ieee754_pow+0x9f0>)
 80084ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f7 fe49 	bl	800016c <__adddf3>
 80084da:	4642      	mov	r2, r8
 80084dc:	e9cd 0100 	strd	r0, r1, [sp]
 80084e0:	464b      	mov	r3, r9
 80084e2:	4620      	mov	r0, r4
 80084e4:	4629      	mov	r1, r5
 80084e6:	f7f7 fe3f 	bl	8000168 <__aeabi_dsub>
 80084ea:	4602      	mov	r2, r0
 80084ec:	460b      	mov	r3, r1
 80084ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084f2:	f7f8 fa81 	bl	80009f8 <__aeabi_dcmpgt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f47f ae09 	bne.w	800810e <__ieee754_pow+0x3c6>
 80084fc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008500:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008504:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008508:	fa43 fa0a 	asr.w	sl, r3, sl
 800850c:	44da      	add	sl, fp
 800850e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008512:	489b      	ldr	r0, [pc, #620]	@ (8008780 <__ieee754_pow+0xa38>)
 8008514:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008518:	4108      	asrs	r0, r1
 800851a:	ea00 030a 	and.w	r3, r0, sl
 800851e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008522:	f1c1 0114 	rsb	r1, r1, #20
 8008526:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800852a:	4640      	mov	r0, r8
 800852c:	fa4a fa01 	asr.w	sl, sl, r1
 8008530:	f1bb 0f00 	cmp.w	fp, #0
 8008534:	4649      	mov	r1, r9
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	bfb8      	it	lt
 800853c:	f1ca 0a00 	rsblt	sl, sl, #0
 8008540:	f7f7 fe12 	bl	8000168 <__aeabi_dsub>
 8008544:	4680      	mov	r8, r0
 8008546:	4689      	mov	r9, r1
 8008548:	2400      	movs	r4, #0
 800854a:	4632      	mov	r2, r6
 800854c:	463b      	mov	r3, r7
 800854e:	4640      	mov	r0, r8
 8008550:	4649      	mov	r1, r9
 8008552:	f7f7 fe0b 	bl	800016c <__adddf3>
 8008556:	a37a      	add	r3, pc, #488	@ (adr r3, 8008740 <__ieee754_pow+0x9f8>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	4620      	mov	r0, r4
 800855e:	460d      	mov	r5, r1
 8008560:	f7f7 ffba 	bl	80004d8 <__aeabi_dmul>
 8008564:	4642      	mov	r2, r8
 8008566:	464b      	mov	r3, r9
 8008568:	e9cd 0100 	strd	r0, r1, [sp]
 800856c:	4620      	mov	r0, r4
 800856e:	4629      	mov	r1, r5
 8008570:	f7f7 fdfa 	bl	8000168 <__aeabi_dsub>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4630      	mov	r0, r6
 800857a:	4639      	mov	r1, r7
 800857c:	f7f7 fdf4 	bl	8000168 <__aeabi_dsub>
 8008580:	a371      	add	r3, pc, #452	@ (adr r3, 8008748 <__ieee754_pow+0xa00>)
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	f7f7 ffa7 	bl	80004d8 <__aeabi_dmul>
 800858a:	a371      	add	r3, pc, #452	@ (adr r3, 8008750 <__ieee754_pow+0xa08>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	4680      	mov	r8, r0
 8008592:	4689      	mov	r9, r1
 8008594:	4620      	mov	r0, r4
 8008596:	4629      	mov	r1, r5
 8008598:	f7f7 ff9e 	bl	80004d8 <__aeabi_dmul>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f7 fde2 	bl	800016c <__adddf3>
 80085a8:	4604      	mov	r4, r0
 80085aa:	460d      	mov	r5, r1
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b4:	f7f7 fdda 	bl	800016c <__adddf3>
 80085b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085bc:	4680      	mov	r8, r0
 80085be:	4689      	mov	r9, r1
 80085c0:	f7f7 fdd2 	bl	8000168 <__aeabi_dsub>
 80085c4:	4602      	mov	r2, r0
 80085c6:	460b      	mov	r3, r1
 80085c8:	4620      	mov	r0, r4
 80085ca:	4629      	mov	r1, r5
 80085cc:	f7f7 fdcc 	bl	8000168 <__aeabi_dsub>
 80085d0:	4642      	mov	r2, r8
 80085d2:	4606      	mov	r6, r0
 80085d4:	460f      	mov	r7, r1
 80085d6:	464b      	mov	r3, r9
 80085d8:	4640      	mov	r0, r8
 80085da:	4649      	mov	r1, r9
 80085dc:	f7f7 ff7c 	bl	80004d8 <__aeabi_dmul>
 80085e0:	a35d      	add	r3, pc, #372	@ (adr r3, 8008758 <__ieee754_pow+0xa10>)
 80085e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e6:	4604      	mov	r4, r0
 80085e8:	460d      	mov	r5, r1
 80085ea:	f7f7 ff75 	bl	80004d8 <__aeabi_dmul>
 80085ee:	a35c      	add	r3, pc, #368	@ (adr r3, 8008760 <__ieee754_pow+0xa18>)
 80085f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f4:	f7f7 fdb8 	bl	8000168 <__aeabi_dsub>
 80085f8:	4622      	mov	r2, r4
 80085fa:	462b      	mov	r3, r5
 80085fc:	f7f7 ff6c 	bl	80004d8 <__aeabi_dmul>
 8008600:	a359      	add	r3, pc, #356	@ (adr r3, 8008768 <__ieee754_pow+0xa20>)
 8008602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008606:	f7f7 fdb1 	bl	800016c <__adddf3>
 800860a:	4622      	mov	r2, r4
 800860c:	462b      	mov	r3, r5
 800860e:	f7f7 ff63 	bl	80004d8 <__aeabi_dmul>
 8008612:	a357      	add	r3, pc, #348	@ (adr r3, 8008770 <__ieee754_pow+0xa28>)
 8008614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008618:	f7f7 fda6 	bl	8000168 <__aeabi_dsub>
 800861c:	4622      	mov	r2, r4
 800861e:	462b      	mov	r3, r5
 8008620:	f7f7 ff5a 	bl	80004d8 <__aeabi_dmul>
 8008624:	a354      	add	r3, pc, #336	@ (adr r3, 8008778 <__ieee754_pow+0xa30>)
 8008626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862a:	f7f7 fd9f 	bl	800016c <__adddf3>
 800862e:	4622      	mov	r2, r4
 8008630:	462b      	mov	r3, r5
 8008632:	f7f7 ff51 	bl	80004d8 <__aeabi_dmul>
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	4640      	mov	r0, r8
 800863c:	4649      	mov	r1, r9
 800863e:	f7f7 fd93 	bl	8000168 <__aeabi_dsub>
 8008642:	4604      	mov	r4, r0
 8008644:	460d      	mov	r5, r1
 8008646:	4602      	mov	r2, r0
 8008648:	460b      	mov	r3, r1
 800864a:	4640      	mov	r0, r8
 800864c:	4649      	mov	r1, r9
 800864e:	f7f7 ff43 	bl	80004d8 <__aeabi_dmul>
 8008652:	2200      	movs	r2, #0
 8008654:	e9cd 0100 	strd	r0, r1, [sp]
 8008658:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800865c:	4620      	mov	r0, r4
 800865e:	4629      	mov	r1, r5
 8008660:	f7f7 fd82 	bl	8000168 <__aeabi_dsub>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	e9dd 0100 	ldrd	r0, r1, [sp]
 800866c:	f7f8 f85e 	bl	800072c <__aeabi_ddiv>
 8008670:	4632      	mov	r2, r6
 8008672:	4604      	mov	r4, r0
 8008674:	460d      	mov	r5, r1
 8008676:	463b      	mov	r3, r7
 8008678:	4640      	mov	r0, r8
 800867a:	4649      	mov	r1, r9
 800867c:	f7f7 ff2c 	bl	80004d8 <__aeabi_dmul>
 8008680:	4632      	mov	r2, r6
 8008682:	463b      	mov	r3, r7
 8008684:	f7f7 fd72 	bl	800016c <__adddf3>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	4620      	mov	r0, r4
 800868e:	4629      	mov	r1, r5
 8008690:	f7f7 fd6a 	bl	8000168 <__aeabi_dsub>
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	f7f7 fd66 	bl	8000168 <__aeabi_dsub>
 800869c:	4602      	mov	r2, r0
 800869e:	460b      	mov	r3, r1
 80086a0:	2000      	movs	r0, #0
 80086a2:	4938      	ldr	r1, [pc, #224]	@ (8008784 <__ieee754_pow+0xa3c>)
 80086a4:	f7f7 fd60 	bl	8000168 <__aeabi_dsub>
 80086a8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80086ac:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 80086b0:	da2e      	bge.n	8008710 <__ieee754_pow+0x9c8>
 80086b2:	4652      	mov	r2, sl
 80086b4:	f000 fa8c 	bl	8008bd0 <scalbn>
 80086b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086bc:	f7ff bbed 	b.w	8007e9a <__ieee754_pow+0x152>
 80086c0:	4c31      	ldr	r4, [pc, #196]	@ (8008788 <__ieee754_pow+0xa40>)
 80086c2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80086c6:	42a3      	cmp	r3, r4
 80086c8:	d91a      	bls.n	8008700 <__ieee754_pow+0x9b8>
 80086ca:	4b30      	ldr	r3, [pc, #192]	@ (800878c <__ieee754_pow+0xa44>)
 80086cc:	440b      	add	r3, r1
 80086ce:	4303      	orrs	r3, r0
 80086d0:	d009      	beq.n	80086e6 <__ieee754_pow+0x99e>
 80086d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2300      	movs	r3, #0
 80086da:	f7f8 f96f 	bl	80009bc <__aeabi_dcmplt>
 80086de:	3800      	subs	r0, #0
 80086e0:	bf18      	it	ne
 80086e2:	2001      	movne	r0, #1
 80086e4:	e444      	b.n	8007f70 <__ieee754_pow+0x228>
 80086e6:	4642      	mov	r2, r8
 80086e8:	464b      	mov	r3, r9
 80086ea:	f7f7 fd3d 	bl	8000168 <__aeabi_dsub>
 80086ee:	4632      	mov	r2, r6
 80086f0:	463b      	mov	r3, r7
 80086f2:	f7f8 f977 	bl	80009e4 <__aeabi_dcmpge>
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d1eb      	bne.n	80086d2 <__ieee754_pow+0x98a>
 80086fa:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8008790 <__ieee754_pow+0xa48>
 80086fe:	e6fd      	b.n	80084fc <__ieee754_pow+0x7b4>
 8008700:	469a      	mov	sl, r3
 8008702:	4b24      	ldr	r3, [pc, #144]	@ (8008794 <__ieee754_pow+0xa4c>)
 8008704:	459a      	cmp	sl, r3
 8008706:	f63f aef9 	bhi.w	80084fc <__ieee754_pow+0x7b4>
 800870a:	f8dd a010 	ldr.w	sl, [sp, #16]
 800870e:	e71b      	b.n	8008548 <__ieee754_pow+0x800>
 8008710:	4621      	mov	r1, r4
 8008712:	e7d1      	b.n	80086b8 <__ieee754_pow+0x970>
 8008714:	2000      	movs	r0, #0
 8008716:	491b      	ldr	r1, [pc, #108]	@ (8008784 <__ieee754_pow+0xa3c>)
 8008718:	f7ff bb34 	b.w	8007d84 <__ieee754_pow+0x3c>
 800871c:	2000      	movs	r0, #0
 800871e:	2100      	movs	r1, #0
 8008720:	f7ff bb30 	b.w	8007d84 <__ieee754_pow+0x3c>
 8008724:	4650      	mov	r0, sl
 8008726:	4659      	mov	r1, fp
 8008728:	f7ff bb2c 	b.w	8007d84 <__ieee754_pow+0x3c>
 800872c:	460c      	mov	r4, r1
 800872e:	f7ff bb79 	b.w	8007e24 <__ieee754_pow+0xdc>
 8008732:	2400      	movs	r4, #0
 8008734:	f7ff bb64 	b.w	8007e00 <__ieee754_pow+0xb8>
 8008738:	652b82fe 	.word	0x652b82fe
 800873c:	3c971547 	.word	0x3c971547
 8008740:	00000000 	.word	0x00000000
 8008744:	3fe62e43 	.word	0x3fe62e43
 8008748:	fefa39ef 	.word	0xfefa39ef
 800874c:	3fe62e42 	.word	0x3fe62e42
 8008750:	0ca86c39 	.word	0x0ca86c39
 8008754:	be205c61 	.word	0xbe205c61
 8008758:	72bea4d0 	.word	0x72bea4d0
 800875c:	3e663769 	.word	0x3e663769
 8008760:	c5d26bf1 	.word	0xc5d26bf1
 8008764:	3ebbbd41 	.word	0x3ebbbd41
 8008768:	af25de2c 	.word	0xaf25de2c
 800876c:	3f11566a 	.word	0x3f11566a
 8008770:	16bebd93 	.word	0x16bebd93
 8008774:	3f66c16c 	.word	0x3f66c16c
 8008778:	5555553e 	.word	0x5555553e
 800877c:	3fc55555 	.word	0x3fc55555
 8008780:	fff00000 	.word	0xfff00000
 8008784:	3ff00000 	.word	0x3ff00000
 8008788:	4090cbff 	.word	0x4090cbff
 800878c:	3f6f3400 	.word	0x3f6f3400
 8008790:	4090cc00 	.word	0x4090cc00
 8008794:	3fe00000 	.word	0x3fe00000

08008798 <fabs>:
 8008798:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800879c:	4619      	mov	r1, r3
 800879e:	4770      	bx	lr

080087a0 <__ieee754_atan2f>:
 80087a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087a2:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80087a6:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80087aa:	4603      	mov	r3, r0
 80087ac:	d805      	bhi.n	80087ba <__ieee754_atan2f+0x1a>
 80087ae:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 80087b2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80087b6:	4607      	mov	r7, r0
 80087b8:	d904      	bls.n	80087c4 <__ieee754_atan2f+0x24>
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7f8 f9ba 	bl	8000b34 <__addsf3>
 80087c0:	4603      	mov	r3, r0
 80087c2:	e010      	b.n	80087e6 <__ieee754_atan2f+0x46>
 80087c4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 80087c8:	d103      	bne.n	80087d2 <__ieee754_atan2f+0x32>
 80087ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80087ce:	f000 b8ef 	b.w	80089b0 <atanf>
 80087d2:	178c      	asrs	r4, r1, #30
 80087d4:	f004 0402 	and.w	r4, r4, #2
 80087d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80087dc:	b92a      	cbnz	r2, 80087ea <__ieee754_atan2f+0x4a>
 80087de:	2c02      	cmp	r4, #2
 80087e0:	d04b      	beq.n	800887a <__ieee754_atan2f+0xda>
 80087e2:	2c03      	cmp	r4, #3
 80087e4:	d04b      	beq.n	800887e <__ieee754_atan2f+0xde>
 80087e6:	4618      	mov	r0, r3
 80087e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ea:	b91e      	cbnz	r6, 80087f4 <__ieee754_atan2f+0x54>
 80087ec:	2f00      	cmp	r7, #0
 80087ee:	da4c      	bge.n	800888a <__ieee754_atan2f+0xea>
 80087f0:	4b27      	ldr	r3, [pc, #156]	@ (8008890 <__ieee754_atan2f+0xf0>)
 80087f2:	e7f8      	b.n	80087e6 <__ieee754_atan2f+0x46>
 80087f4:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 80087f8:	d10e      	bne.n	8008818 <__ieee754_atan2f+0x78>
 80087fa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80087fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8008802:	d105      	bne.n	8008810 <__ieee754_atan2f+0x70>
 8008804:	2c02      	cmp	r4, #2
 8008806:	d83c      	bhi.n	8008882 <__ieee754_atan2f+0xe2>
 8008808:	4b22      	ldr	r3, [pc, #136]	@ (8008894 <__ieee754_atan2f+0xf4>)
 800880a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800880e:	e7ea      	b.n	80087e6 <__ieee754_atan2f+0x46>
 8008810:	2c02      	cmp	r4, #2
 8008812:	d838      	bhi.n	8008886 <__ieee754_atan2f+0xe6>
 8008814:	4b20      	ldr	r3, [pc, #128]	@ (8008898 <__ieee754_atan2f+0xf8>)
 8008816:	e7f8      	b.n	800880a <__ieee754_atan2f+0x6a>
 8008818:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800881c:	d0e6      	beq.n	80087ec <__ieee754_atan2f+0x4c>
 800881e:	1b92      	subs	r2, r2, r6
 8008820:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8008824:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008828:	da17      	bge.n	800885a <__ieee754_atan2f+0xba>
 800882a:	2900      	cmp	r1, #0
 800882c:	da01      	bge.n	8008832 <__ieee754_atan2f+0x92>
 800882e:	303c      	adds	r0, #60	@ 0x3c
 8008830:	db15      	blt.n	800885e <__ieee754_atan2f+0xbe>
 8008832:	4618      	mov	r0, r3
 8008834:	f7f8 fb3a 	bl	8000eac <__aeabi_fdiv>
 8008838:	f000 f9c6 	bl	8008bc8 <fabsf>
 800883c:	f000 f8b8 	bl	80089b0 <atanf>
 8008840:	4603      	mov	r3, r0
 8008842:	2c01      	cmp	r4, #1
 8008844:	d00d      	beq.n	8008862 <__ieee754_atan2f+0xc2>
 8008846:	2c02      	cmp	r4, #2
 8008848:	d00e      	beq.n	8008868 <__ieee754_atan2f+0xc8>
 800884a:	2c00      	cmp	r4, #0
 800884c:	d0cb      	beq.n	80087e6 <__ieee754_atan2f+0x46>
 800884e:	4913      	ldr	r1, [pc, #76]	@ (800889c <__ieee754_atan2f+0xfc>)
 8008850:	4618      	mov	r0, r3
 8008852:	f7f8 f96f 	bl	8000b34 <__addsf3>
 8008856:	4912      	ldr	r1, [pc, #72]	@ (80088a0 <__ieee754_atan2f+0x100>)
 8008858:	e00c      	b.n	8008874 <__ieee754_atan2f+0xd4>
 800885a:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <__ieee754_atan2f+0x104>)
 800885c:	e7f1      	b.n	8008842 <__ieee754_atan2f+0xa2>
 800885e:	2300      	movs	r3, #0
 8008860:	e7ef      	b.n	8008842 <__ieee754_atan2f+0xa2>
 8008862:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008866:	e7be      	b.n	80087e6 <__ieee754_atan2f+0x46>
 8008868:	490c      	ldr	r1, [pc, #48]	@ (800889c <__ieee754_atan2f+0xfc>)
 800886a:	4618      	mov	r0, r3
 800886c:	f7f8 f962 	bl	8000b34 <__addsf3>
 8008870:	4601      	mov	r1, r0
 8008872:	480b      	ldr	r0, [pc, #44]	@ (80088a0 <__ieee754_atan2f+0x100>)
 8008874:	f7f8 f95c 	bl	8000b30 <__aeabi_fsub>
 8008878:	e7a2      	b.n	80087c0 <__ieee754_atan2f+0x20>
 800887a:	4b09      	ldr	r3, [pc, #36]	@ (80088a0 <__ieee754_atan2f+0x100>)
 800887c:	e7b3      	b.n	80087e6 <__ieee754_atan2f+0x46>
 800887e:	4b0a      	ldr	r3, [pc, #40]	@ (80088a8 <__ieee754_atan2f+0x108>)
 8008880:	e7b1      	b.n	80087e6 <__ieee754_atan2f+0x46>
 8008882:	4b0a      	ldr	r3, [pc, #40]	@ (80088ac <__ieee754_atan2f+0x10c>)
 8008884:	e7af      	b.n	80087e6 <__ieee754_atan2f+0x46>
 8008886:	2300      	movs	r3, #0
 8008888:	e7ad      	b.n	80087e6 <__ieee754_atan2f+0x46>
 800888a:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <__ieee754_atan2f+0x104>)
 800888c:	e7ab      	b.n	80087e6 <__ieee754_atan2f+0x46>
 800888e:	bf00      	nop
 8008890:	bfc90fdb 	.word	0xbfc90fdb
 8008894:	0800b89c 	.word	0x0800b89c
 8008898:	0800b890 	.word	0x0800b890
 800889c:	33bbbd2e 	.word	0x33bbbd2e
 80088a0:	40490fdb 	.word	0x40490fdb
 80088a4:	3fc90fdb 	.word	0x3fc90fdb
 80088a8:	c0490fdb 	.word	0xc0490fdb
 80088ac:	3f490fdb 	.word	0x3f490fdb

080088b0 <__ieee754_fmodf>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	f021 4500 	bic.w	r5, r1, #2147483648	@ 0x80000000
 80088b6:	1e6b      	subs	r3, r5, #1
 80088b8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80088bc:	460e      	mov	r6, r1
 80088be:	d205      	bcs.n	80088cc <__ieee754_fmodf+0x1c>
 80088c0:	f020 4700 	bic.w	r7, r0, #2147483648	@ 0x80000000
 80088c4:	f1b7 4fff 	cmp.w	r7, #2139095040	@ 0x7f800000
 80088c8:	4603      	mov	r3, r0
 80088ca:	d305      	bcc.n	80088d8 <__ieee754_fmodf+0x28>
 80088cc:	f7f8 fa3a 	bl	8000d44 <__aeabi_fmul>
 80088d0:	4601      	mov	r1, r0
 80088d2:	f7f8 faeb 	bl	8000eac <__aeabi_fdiv>
 80088d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d8:	42af      	cmp	r7, r5
 80088da:	dbfc      	blt.n	80088d6 <__ieee754_fmodf+0x26>
 80088dc:	f000 4400 	and.w	r4, r0, #2147483648	@ 0x80000000
 80088e0:	d104      	bne.n	80088ec <__ieee754_fmodf+0x3c>
 80088e2:	4b32      	ldr	r3, [pc, #200]	@ (80089ac <__ieee754_fmodf+0xfc>)
 80088e4:	0fe4      	lsrs	r4, r4, #31
 80088e6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80088ea:	e7f4      	b.n	80088d6 <__ieee754_fmodf+0x26>
 80088ec:	f010 4fff 	tst.w	r0, #2139095040	@ 0x7f800000
 80088f0:	d13e      	bne.n	8008970 <__ieee754_fmodf+0xc0>
 80088f2:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 80088f6:	023a      	lsls	r2, r7, #8
 80088f8:	2a00      	cmp	r2, #0
 80088fa:	dc36      	bgt.n	800896a <__ieee754_fmodf+0xba>
 80088fc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8008900:	d13c      	bne.n	800897c <__ieee754_fmodf+0xcc>
 8008902:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8008906:	0228      	lsls	r0, r5, #8
 8008908:	2800      	cmp	r0, #0
 800890a:	da34      	bge.n	8008976 <__ieee754_fmodf+0xc6>
 800890c:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 8008910:	bfb5      	itete	lt
 8008912:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 8008916:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800891a:	1a5b      	sublt	r3, r3, r1
 800891c:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 8008920:	bfb8      	it	lt
 8008922:	fa07 f303 	lsllt.w	r3, r7, r3
 8008926:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800892a:	bfb5      	itete	lt
 800892c:	f06f 007d 	mvnlt.w	r0, #125	@ 0x7d
 8008930:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 8008934:	1a80      	sublt	r0, r0, r2
 8008936:	f446 0500 	orrge.w	r5, r6, #8388608	@ 0x800000
 800893a:	bfb8      	it	lt
 800893c:	4085      	lsllt	r5, r0
 800893e:	1a89      	subs	r1, r1, r2
 8008940:	1b58      	subs	r0, r3, r5
 8008942:	b9f1      	cbnz	r1, 8008982 <__ieee754_fmodf+0xd2>
 8008944:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 8008948:	bf38      	it	cc
 800894a:	4603      	movcc	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c8      	beq.n	80088e2 <__ieee754_fmodf+0x32>
 8008950:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008954:	db1d      	blt.n	8008992 <__ieee754_fmodf+0xe2>
 8008956:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800895a:	db1d      	blt.n	8008998 <__ieee754_fmodf+0xe8>
 800895c:	f5a3 0000 	sub.w	r0, r3, #8388608	@ 0x800000
 8008960:	327f      	adds	r2, #127	@ 0x7f
 8008962:	4320      	orrs	r0, r4
 8008964:	ea40 50c2 	orr.w	r0, r0, r2, lsl #23
 8008968:	e7b5      	b.n	80088d6 <__ieee754_fmodf+0x26>
 800896a:	3901      	subs	r1, #1
 800896c:	0052      	lsls	r2, r2, #1
 800896e:	e7c3      	b.n	80088f8 <__ieee754_fmodf+0x48>
 8008970:	15f9      	asrs	r1, r7, #23
 8008972:	397f      	subs	r1, #127	@ 0x7f
 8008974:	e7c2      	b.n	80088fc <__ieee754_fmodf+0x4c>
 8008976:	3a01      	subs	r2, #1
 8008978:	0040      	lsls	r0, r0, #1
 800897a:	e7c5      	b.n	8008908 <__ieee754_fmodf+0x58>
 800897c:	15ea      	asrs	r2, r5, #23
 800897e:	3a7f      	subs	r2, #127	@ 0x7f
 8008980:	e7c4      	b.n	800890c <__ieee754_fmodf+0x5c>
 8008982:	2800      	cmp	r0, #0
 8008984:	da02      	bge.n	800898c <__ieee754_fmodf+0xdc>
 8008986:	005b      	lsls	r3, r3, #1
 8008988:	3901      	subs	r1, #1
 800898a:	e7d9      	b.n	8008940 <__ieee754_fmodf+0x90>
 800898c:	d0a9      	beq.n	80088e2 <__ieee754_fmodf+0x32>
 800898e:	0043      	lsls	r3, r0, #1
 8008990:	e7fa      	b.n	8008988 <__ieee754_fmodf+0xd8>
 8008992:	005b      	lsls	r3, r3, #1
 8008994:	3a01      	subs	r2, #1
 8008996:	e7db      	b.n	8008950 <__ieee754_fmodf+0xa0>
 8008998:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800899c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 80089a0:	3282      	adds	r2, #130	@ 0x82
 80089a2:	fa43 f002 	asr.w	r0, r3, r2
 80089a6:	4320      	orrs	r0, r4
 80089a8:	e795      	b.n	80088d6 <__ieee754_fmodf+0x26>
 80089aa:	bf00      	nop
 80089ac:	0800b8a8 	.word	0x0800b8a8

080089b0 <atanf>:
 80089b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b4:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 80089b8:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 80089bc:	4604      	mov	r4, r0
 80089be:	4680      	mov	r8, r0
 80089c0:	d30e      	bcc.n	80089e0 <atanf+0x30>
 80089c2:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80089c6:	d904      	bls.n	80089d2 <atanf+0x22>
 80089c8:	4601      	mov	r1, r0
 80089ca:	f7f8 f8b3 	bl	8000b34 <__addsf3>
 80089ce:	4604      	mov	r4, r0
 80089d0:	e003      	b.n	80089da <atanf+0x2a>
 80089d2:	2800      	cmp	r0, #0
 80089d4:	f340 80ce 	ble.w	8008b74 <atanf+0x1c4>
 80089d8:	4c67      	ldr	r4, [pc, #412]	@ (8008b78 <atanf+0x1c8>)
 80089da:	4620      	mov	r0, r4
 80089dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e0:	4b66      	ldr	r3, [pc, #408]	@ (8008b7c <atanf+0x1cc>)
 80089e2:	429d      	cmp	r5, r3
 80089e4:	d80e      	bhi.n	8008a04 <atanf+0x54>
 80089e6:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 80089ea:	d208      	bcs.n	80089fe <atanf+0x4e>
 80089ec:	4964      	ldr	r1, [pc, #400]	@ (8008b80 <atanf+0x1d0>)
 80089ee:	f7f8 f8a1 	bl	8000b34 <__addsf3>
 80089f2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80089f6:	f7f8 fb61 	bl	80010bc <__aeabi_fcmpgt>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1ed      	bne.n	80089da <atanf+0x2a>
 80089fe:	f04f 36ff 	mov.w	r6, #4294967295
 8008a02:	e01c      	b.n	8008a3e <atanf+0x8e>
 8008a04:	f000 f8e0 	bl	8008bc8 <fabsf>
 8008a08:	4b5e      	ldr	r3, [pc, #376]	@ (8008b84 <atanf+0x1d4>)
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	429d      	cmp	r5, r3
 8008a0e:	d87c      	bhi.n	8008b0a <atanf+0x15a>
 8008a10:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008a14:	429d      	cmp	r5, r3
 8008a16:	d867      	bhi.n	8008ae8 <atanf+0x138>
 8008a18:	4601      	mov	r1, r0
 8008a1a:	f7f8 f88b 	bl	8000b34 <__addsf3>
 8008a1e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008a22:	f7f8 f885 	bl	8000b30 <__aeabi_fsub>
 8008a26:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f7f8 f881 	bl	8000b34 <__addsf3>
 8008a32:	4601      	mov	r1, r0
 8008a34:	4628      	mov	r0, r5
 8008a36:	f7f8 fa39 	bl	8000eac <__aeabi_fdiv>
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	4604      	mov	r4, r0
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4620      	mov	r0, r4
 8008a42:	f7f8 f97f 	bl	8000d44 <__aeabi_fmul>
 8008a46:	4601      	mov	r1, r0
 8008a48:	4607      	mov	r7, r0
 8008a4a:	f7f8 f97b 	bl	8000d44 <__aeabi_fmul>
 8008a4e:	4605      	mov	r5, r0
 8008a50:	494d      	ldr	r1, [pc, #308]	@ (8008b88 <atanf+0x1d8>)
 8008a52:	f7f8 f977 	bl	8000d44 <__aeabi_fmul>
 8008a56:	494d      	ldr	r1, [pc, #308]	@ (8008b8c <atanf+0x1dc>)
 8008a58:	f7f8 f86c 	bl	8000b34 <__addsf3>
 8008a5c:	4629      	mov	r1, r5
 8008a5e:	f7f8 f971 	bl	8000d44 <__aeabi_fmul>
 8008a62:	494b      	ldr	r1, [pc, #300]	@ (8008b90 <atanf+0x1e0>)
 8008a64:	f7f8 f866 	bl	8000b34 <__addsf3>
 8008a68:	4629      	mov	r1, r5
 8008a6a:	f7f8 f96b 	bl	8000d44 <__aeabi_fmul>
 8008a6e:	4949      	ldr	r1, [pc, #292]	@ (8008b94 <atanf+0x1e4>)
 8008a70:	f7f8 f860 	bl	8000b34 <__addsf3>
 8008a74:	4629      	mov	r1, r5
 8008a76:	f7f8 f965 	bl	8000d44 <__aeabi_fmul>
 8008a7a:	4947      	ldr	r1, [pc, #284]	@ (8008b98 <atanf+0x1e8>)
 8008a7c:	f7f8 f85a 	bl	8000b34 <__addsf3>
 8008a80:	4629      	mov	r1, r5
 8008a82:	f7f8 f95f 	bl	8000d44 <__aeabi_fmul>
 8008a86:	4945      	ldr	r1, [pc, #276]	@ (8008b9c <atanf+0x1ec>)
 8008a88:	f7f8 f854 	bl	8000b34 <__addsf3>
 8008a8c:	4639      	mov	r1, r7
 8008a8e:	f7f8 f959 	bl	8000d44 <__aeabi_fmul>
 8008a92:	4943      	ldr	r1, [pc, #268]	@ (8008ba0 <atanf+0x1f0>)
 8008a94:	4607      	mov	r7, r0
 8008a96:	4628      	mov	r0, r5
 8008a98:	f7f8 f954 	bl	8000d44 <__aeabi_fmul>
 8008a9c:	4941      	ldr	r1, [pc, #260]	@ (8008ba4 <atanf+0x1f4>)
 8008a9e:	f7f8 f847 	bl	8000b30 <__aeabi_fsub>
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f8 f94e 	bl	8000d44 <__aeabi_fmul>
 8008aa8:	493f      	ldr	r1, [pc, #252]	@ (8008ba8 <atanf+0x1f8>)
 8008aaa:	f7f8 f841 	bl	8000b30 <__aeabi_fsub>
 8008aae:	4629      	mov	r1, r5
 8008ab0:	f7f8 f948 	bl	8000d44 <__aeabi_fmul>
 8008ab4:	493d      	ldr	r1, [pc, #244]	@ (8008bac <atanf+0x1fc>)
 8008ab6:	f7f8 f83b 	bl	8000b30 <__aeabi_fsub>
 8008aba:	4629      	mov	r1, r5
 8008abc:	f7f8 f942 	bl	8000d44 <__aeabi_fmul>
 8008ac0:	493b      	ldr	r1, [pc, #236]	@ (8008bb0 <atanf+0x200>)
 8008ac2:	f7f8 f835 	bl	8000b30 <__aeabi_fsub>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	f7f8 f93c 	bl	8000d44 <__aeabi_fmul>
 8008acc:	4601      	mov	r1, r0
 8008ace:	4638      	mov	r0, r7
 8008ad0:	f7f8 f830 	bl	8000b34 <__addsf3>
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7f8 f935 	bl	8000d44 <__aeabi_fmul>
 8008ada:	1c73      	adds	r3, r6, #1
 8008adc:	4601      	mov	r1, r0
 8008ade:	d133      	bne.n	8008b48 <atanf+0x198>
 8008ae0:	4620      	mov	r0, r4
 8008ae2:	f7f8 f825 	bl	8000b30 <__aeabi_fsub>
 8008ae6:	e772      	b.n	80089ce <atanf+0x1e>
 8008ae8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008aec:	f7f8 f820 	bl	8000b30 <__aeabi_fsub>
 8008af0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008af4:	4605      	mov	r5, r0
 8008af6:	4620      	mov	r0, r4
 8008af8:	f7f8 f81c 	bl	8000b34 <__addsf3>
 8008afc:	4601      	mov	r1, r0
 8008afe:	4628      	mov	r0, r5
 8008b00:	f7f8 f9d4 	bl	8000eac <__aeabi_fdiv>
 8008b04:	2601      	movs	r6, #1
 8008b06:	4604      	mov	r4, r0
 8008b08:	e799      	b.n	8008a3e <atanf+0x8e>
 8008b0a:	4b2a      	ldr	r3, [pc, #168]	@ (8008bb4 <atanf+0x204>)
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d814      	bhi.n	8008b3a <atanf+0x18a>
 8008b10:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008b14:	f7f8 f80c 	bl	8000b30 <__aeabi_fsub>
 8008b18:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008b1c:	4605      	mov	r5, r0
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f7f8 f910 	bl	8000d44 <__aeabi_fmul>
 8008b24:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b28:	f7f8 f804 	bl	8000b34 <__addsf3>
 8008b2c:	4601      	mov	r1, r0
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f7f8 f9bc 	bl	8000eac <__aeabi_fdiv>
 8008b34:	2602      	movs	r6, #2
 8008b36:	4604      	mov	r4, r0
 8008b38:	e781      	b.n	8008a3e <atanf+0x8e>
 8008b3a:	4601      	mov	r1, r0
 8008b3c:	481e      	ldr	r0, [pc, #120]	@ (8008bb8 <atanf+0x208>)
 8008b3e:	f7f8 f9b5 	bl	8000eac <__aeabi_fdiv>
 8008b42:	2603      	movs	r6, #3
 8008b44:	4604      	mov	r4, r0
 8008b46:	e77a      	b.n	8008a3e <atanf+0x8e>
 8008b48:	4b1c      	ldr	r3, [pc, #112]	@ (8008bbc <atanf+0x20c>)
 8008b4a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008b4e:	f7f7 ffef 	bl	8000b30 <__aeabi_fsub>
 8008b52:	4621      	mov	r1, r4
 8008b54:	f7f7 ffec 	bl	8000b30 <__aeabi_fsub>
 8008b58:	4b19      	ldr	r3, [pc, #100]	@ (8008bc0 <atanf+0x210>)
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008b60:	f7f7 ffe6 	bl	8000b30 <__aeabi_fsub>
 8008b64:	f1b8 0f00 	cmp.w	r8, #0
 8008b68:	4604      	mov	r4, r0
 8008b6a:	f6bf af36 	bge.w	80089da <atanf+0x2a>
 8008b6e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008b72:	e732      	b.n	80089da <atanf+0x2a>
 8008b74:	4c13      	ldr	r4, [pc, #76]	@ (8008bc4 <atanf+0x214>)
 8008b76:	e730      	b.n	80089da <atanf+0x2a>
 8008b78:	3fc90fdb 	.word	0x3fc90fdb
 8008b7c:	3edfffff 	.word	0x3edfffff
 8008b80:	7149f2ca 	.word	0x7149f2ca
 8008b84:	3f97ffff 	.word	0x3f97ffff
 8008b88:	3c8569d7 	.word	0x3c8569d7
 8008b8c:	3d4bda59 	.word	0x3d4bda59
 8008b90:	3d886b35 	.word	0x3d886b35
 8008b94:	3dba2e6e 	.word	0x3dba2e6e
 8008b98:	3e124925 	.word	0x3e124925
 8008b9c:	3eaaaaab 	.word	0x3eaaaaab
 8008ba0:	bd15a221 	.word	0xbd15a221
 8008ba4:	3d6ef16b 	.word	0x3d6ef16b
 8008ba8:	3d9d8795 	.word	0x3d9d8795
 8008bac:	3de38e38 	.word	0x3de38e38
 8008bb0:	3e4ccccd 	.word	0x3e4ccccd
 8008bb4:	401bffff 	.word	0x401bffff
 8008bb8:	bf800000 	.word	0xbf800000
 8008bbc:	0800b8b0 	.word	0x0800b8b0
 8008bc0:	0800b8c0 	.word	0x0800b8c0
 8008bc4:	bfc90fdb 	.word	0xbfc90fdb

08008bc8 <fabsf>:
 8008bc8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008bcc:	4770      	bx	lr
	...

08008bd0 <scalbn>:
 8008bd0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008bda:	4683      	mov	fp, r0
 8008bdc:	468c      	mov	ip, r1
 8008bde:	460b      	mov	r3, r1
 8008be0:	b982      	cbnz	r2, 8008c04 <scalbn+0x34>
 8008be2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008be6:	4303      	orrs	r3, r0
 8008be8:	d039      	beq.n	8008c5e <scalbn+0x8e>
 8008bea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ca8 <scalbn+0xd8>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	f7f7 fc73 	bl	80004d8 <__aeabi_dmul>
 8008bf2:	4b2e      	ldr	r3, [pc, #184]	@ (8008cac <scalbn+0xdc>)
 8008bf4:	4683      	mov	fp, r0
 8008bf6:	429e      	cmp	r6, r3
 8008bf8:	468c      	mov	ip, r1
 8008bfa:	da0d      	bge.n	8008c18 <scalbn+0x48>
 8008bfc:	a326      	add	r3, pc, #152	@ (adr r3, 8008c98 <scalbn+0xc8>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	e01b      	b.n	8008c3c <scalbn+0x6c>
 8008c04:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008c08:	42ba      	cmp	r2, r7
 8008c0a:	d109      	bne.n	8008c20 <scalbn+0x50>
 8008c0c:	4602      	mov	r2, r0
 8008c0e:	f7f7 faad 	bl	800016c <__adddf3>
 8008c12:	4683      	mov	fp, r0
 8008c14:	468c      	mov	ip, r1
 8008c16:	e022      	b.n	8008c5e <scalbn+0x8e>
 8008c18:	460b      	mov	r3, r1
 8008c1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008c1e:	3a36      	subs	r2, #54	@ 0x36
 8008c20:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008c24:	428e      	cmp	r6, r1
 8008c26:	dd0c      	ble.n	8008c42 <scalbn+0x72>
 8008c28:	a31d      	add	r3, pc, #116	@ (adr r3, 8008ca0 <scalbn+0xd0>)
 8008c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2e:	461c      	mov	r4, r3
 8008c30:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008c34:	f361 74df 	bfi	r4, r1, #31, #1
 8008c38:	4621      	mov	r1, r4
 8008c3a:	481d      	ldr	r0, [pc, #116]	@ (8008cb0 <scalbn+0xe0>)
 8008c3c:	f7f7 fc4c 	bl	80004d8 <__aeabi_dmul>
 8008c40:	e7e7      	b.n	8008c12 <scalbn+0x42>
 8008c42:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008c46:	4432      	add	r2, r6
 8008c48:	428a      	cmp	r2, r1
 8008c4a:	dced      	bgt.n	8008c28 <scalbn+0x58>
 8008c4c:	2a00      	cmp	r2, #0
 8008c4e:	dd0a      	ble.n	8008c66 <scalbn+0x96>
 8008c50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008c54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008c58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c5c:	46ac      	mov	ip, r5
 8008c5e:	4658      	mov	r0, fp
 8008c60:	4661      	mov	r1, ip
 8008c62:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008c66:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008c6a:	da09      	bge.n	8008c80 <scalbn+0xb0>
 8008c6c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008c70:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008c74:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008c78:	480e      	ldr	r0, [pc, #56]	@ (8008cb4 <scalbn+0xe4>)
 8008c7a:	f041 011f 	orr.w	r1, r1, #31
 8008c7e:	e7bd      	b.n	8008bfc <scalbn+0x2c>
 8008c80:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008c84:	3236      	adds	r2, #54	@ 0x36
 8008c86:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008c8a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008c8e:	4658      	mov	r0, fp
 8008c90:	4629      	mov	r1, r5
 8008c92:	2200      	movs	r2, #0
 8008c94:	4b08      	ldr	r3, [pc, #32]	@ (8008cb8 <scalbn+0xe8>)
 8008c96:	e7d1      	b.n	8008c3c <scalbn+0x6c>
 8008c98:	c2f8f359 	.word	0xc2f8f359
 8008c9c:	01a56e1f 	.word	0x01a56e1f
 8008ca0:	8800759c 	.word	0x8800759c
 8008ca4:	7e37e43c 	.word	0x7e37e43c
 8008ca8:	43500000 	.word	0x43500000
 8008cac:	ffff3cb0 	.word	0xffff3cb0
 8008cb0:	8800759c 	.word	0x8800759c
 8008cb4:	c2f8f359 	.word	0xc2f8f359
 8008cb8:	3c900000 	.word	0x3c900000

08008cbc <with_errno>:
 8008cbc:	b570      	push	{r4, r5, r6, lr}
 8008cbe:	4604      	mov	r4, r0
 8008cc0:	460d      	mov	r5, r1
 8008cc2:	4616      	mov	r6, r2
 8008cc4:	f000 ff7a 	bl	8009bbc <__errno>
 8008cc8:	4629      	mov	r1, r5
 8008cca:	6006      	str	r6, [r0, #0]
 8008ccc:	4620      	mov	r0, r4
 8008cce:	bd70      	pop	{r4, r5, r6, pc}

08008cd0 <xflow>:
 8008cd0:	b513      	push	{r0, r1, r4, lr}
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	4619      	mov	r1, r3
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	b10c      	cbz	r4, 8008cde <xflow+0xe>
 8008cda:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008cde:	e9cd 2300 	strd	r2, r3, [sp]
 8008ce2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ce6:	f7f7 fbf7 	bl	80004d8 <__aeabi_dmul>
 8008cea:	2222      	movs	r2, #34	@ 0x22
 8008cec:	b002      	add	sp, #8
 8008cee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008cf2:	f7ff bfe3 	b.w	8008cbc <with_errno>

08008cf6 <__math_uflow>:
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008cfc:	f7ff bfe8 	b.w	8008cd0 <xflow>

08008d00 <__math_oflow>:
 8008d00:	2200      	movs	r2, #0
 8008d02:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008d06:	f7ff bfe3 	b.w	8008cd0 <xflow>
	...

08008d0c <__ieee754_sqrt>:
 8008d0c:	4a67      	ldr	r2, [pc, #412]	@ (8008eac <__ieee754_sqrt+0x1a0>)
 8008d0e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d12:	438a      	bics	r2, r1
 8008d14:	4606      	mov	r6, r0
 8008d16:	460f      	mov	r7, r1
 8008d18:	460b      	mov	r3, r1
 8008d1a:	4604      	mov	r4, r0
 8008d1c:	d10e      	bne.n	8008d3c <__ieee754_sqrt+0x30>
 8008d1e:	4602      	mov	r2, r0
 8008d20:	f7f7 fbda 	bl	80004d8 <__aeabi_dmul>
 8008d24:	4602      	mov	r2, r0
 8008d26:	460b      	mov	r3, r1
 8008d28:	4630      	mov	r0, r6
 8008d2a:	4639      	mov	r1, r7
 8008d2c:	f7f7 fa1e 	bl	800016c <__adddf3>
 8008d30:	4606      	mov	r6, r0
 8008d32:	460f      	mov	r7, r1
 8008d34:	4630      	mov	r0, r6
 8008d36:	4639      	mov	r1, r7
 8008d38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	dc0c      	bgt.n	8008d5a <__ieee754_sqrt+0x4e>
 8008d40:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008d44:	4302      	orrs	r2, r0
 8008d46:	d0f5      	beq.n	8008d34 <__ieee754_sqrt+0x28>
 8008d48:	b189      	cbz	r1, 8008d6e <__ieee754_sqrt+0x62>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	f7f7 fa0c 	bl	8000168 <__aeabi_dsub>
 8008d50:	4602      	mov	r2, r0
 8008d52:	460b      	mov	r3, r1
 8008d54:	f7f7 fcea 	bl	800072c <__aeabi_ddiv>
 8008d58:	e7ea      	b.n	8008d30 <__ieee754_sqrt+0x24>
 8008d5a:	150a      	asrs	r2, r1, #20
 8008d5c:	d115      	bne.n	8008d8a <__ieee754_sqrt+0x7e>
 8008d5e:	2100      	movs	r1, #0
 8008d60:	e009      	b.n	8008d76 <__ieee754_sqrt+0x6a>
 8008d62:	0ae3      	lsrs	r3, r4, #11
 8008d64:	3a15      	subs	r2, #21
 8008d66:	0564      	lsls	r4, r4, #21
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0fa      	beq.n	8008d62 <__ieee754_sqrt+0x56>
 8008d6c:	e7f7      	b.n	8008d5e <__ieee754_sqrt+0x52>
 8008d6e:	460a      	mov	r2, r1
 8008d70:	e7fa      	b.n	8008d68 <__ieee754_sqrt+0x5c>
 8008d72:	005b      	lsls	r3, r3, #1
 8008d74:	3101      	adds	r1, #1
 8008d76:	02d8      	lsls	r0, r3, #11
 8008d78:	d5fb      	bpl.n	8008d72 <__ieee754_sqrt+0x66>
 8008d7a:	1e48      	subs	r0, r1, #1
 8008d7c:	1a12      	subs	r2, r2, r0
 8008d7e:	f1c1 0020 	rsb	r0, r1, #32
 8008d82:	fa24 f000 	lsr.w	r0, r4, r0
 8008d86:	4303      	orrs	r3, r0
 8008d88:	408c      	lsls	r4, r1
 8008d8a:	2600      	movs	r6, #0
 8008d8c:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008d90:	2116      	movs	r1, #22
 8008d92:	07d2      	lsls	r2, r2, #31
 8008d94:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008d98:	4632      	mov	r2, r6
 8008d9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008da2:	bf5c      	itt	pl
 8008da4:	005b      	lslpl	r3, r3, #1
 8008da6:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008daa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dae:	bf58      	it	pl
 8008db0:	0064      	lslpl	r4, r4, #1
 8008db2:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008db6:	107f      	asrs	r7, r7, #1
 8008db8:	0064      	lsls	r4, r4, #1
 8008dba:	1815      	adds	r5, r2, r0
 8008dbc:	429d      	cmp	r5, r3
 8008dbe:	bfde      	ittt	le
 8008dc0:	182a      	addle	r2, r5, r0
 8008dc2:	1b5b      	suble	r3, r3, r5
 8008dc4:	1836      	addle	r6, r6, r0
 8008dc6:	0fe5      	lsrs	r5, r4, #31
 8008dc8:	3901      	subs	r1, #1
 8008dca:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008dce:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008dd2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008dd6:	d1f0      	bne.n	8008dba <__ieee754_sqrt+0xae>
 8008dd8:	460d      	mov	r5, r1
 8008dda:	f04f 0a20 	mov.w	sl, #32
 8008dde:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008de2:	429a      	cmp	r2, r3
 8008de4:	eb01 0c00 	add.w	ip, r1, r0
 8008de8:	db02      	blt.n	8008df0 <__ieee754_sqrt+0xe4>
 8008dea:	d113      	bne.n	8008e14 <__ieee754_sqrt+0x108>
 8008dec:	45a4      	cmp	ip, r4
 8008dee:	d811      	bhi.n	8008e14 <__ieee754_sqrt+0x108>
 8008df0:	f1bc 0f00 	cmp.w	ip, #0
 8008df4:	eb0c 0100 	add.w	r1, ip, r0
 8008df8:	da42      	bge.n	8008e80 <__ieee754_sqrt+0x174>
 8008dfa:	2900      	cmp	r1, #0
 8008dfc:	db40      	blt.n	8008e80 <__ieee754_sqrt+0x174>
 8008dfe:	f102 0e01 	add.w	lr, r2, #1
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	4672      	mov	r2, lr
 8008e06:	45a4      	cmp	ip, r4
 8008e08:	bf88      	it	hi
 8008e0a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008e0e:	eba4 040c 	sub.w	r4, r4, ip
 8008e12:	4405      	add	r5, r0
 8008e14:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008e18:	f1ba 0a01 	subs.w	sl, sl, #1
 8008e1c:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008e20:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008e24:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008e28:	d1db      	bne.n	8008de2 <__ieee754_sqrt+0xd6>
 8008e2a:	431c      	orrs	r4, r3
 8008e2c:	d01a      	beq.n	8008e64 <__ieee754_sqrt+0x158>
 8008e2e:	4c20      	ldr	r4, [pc, #128]	@ (8008eb0 <__ieee754_sqrt+0x1a4>)
 8008e30:	f8df b080 	ldr.w	fp, [pc, #128]	@ 8008eb4 <__ieee754_sqrt+0x1a8>
 8008e34:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e38:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e3c:	f7f7 f994 	bl	8000168 <__aeabi_dsub>
 8008e40:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	4640      	mov	r0, r8
 8008e4a:	4649      	mov	r1, r9
 8008e4c:	f7f7 fdc0 	bl	80009d0 <__aeabi_dcmple>
 8008e50:	b140      	cbz	r0, 8008e64 <__ieee754_sqrt+0x158>
 8008e52:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008e56:	e9db 2300 	ldrd	r2, r3, [fp]
 8008e5a:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008e5e:	d111      	bne.n	8008e84 <__ieee754_sqrt+0x178>
 8008e60:	4655      	mov	r5, sl
 8008e62:	3601      	adds	r6, #1
 8008e64:	1072      	asrs	r2, r6, #1
 8008e66:	086b      	lsrs	r3, r5, #1
 8008e68:	07f1      	lsls	r1, r6, #31
 8008e6a:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008e6e:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008e72:	bf48      	it	mi
 8008e74:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008e78:	4618      	mov	r0, r3
 8008e7a:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008e7e:	e757      	b.n	8008d30 <__ieee754_sqrt+0x24>
 8008e80:	4696      	mov	lr, r2
 8008e82:	e7be      	b.n	8008e02 <__ieee754_sqrt+0xf6>
 8008e84:	f7f7 f972 	bl	800016c <__adddf3>
 8008e88:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	4640      	mov	r0, r8
 8008e92:	4649      	mov	r1, r9
 8008e94:	f7f7 fd92 	bl	80009bc <__aeabi_dcmplt>
 8008e98:	b120      	cbz	r0, 8008ea4 <__ieee754_sqrt+0x198>
 8008e9a:	1ca8      	adds	r0, r5, #2
 8008e9c:	bf08      	it	eq
 8008e9e:	3601      	addeq	r6, #1
 8008ea0:	3502      	adds	r5, #2
 8008ea2:	e7df      	b.n	8008e64 <__ieee754_sqrt+0x158>
 8008ea4:	1c6b      	adds	r3, r5, #1
 8008ea6:	f023 0501 	bic.w	r5, r3, #1
 8008eaa:	e7db      	b.n	8008e64 <__ieee754_sqrt+0x158>
 8008eac:	7ff00000 	.word	0x7ff00000
 8008eb0:	200000c8 	.word	0x200000c8
 8008eb4:	200000c0 	.word	0x200000c0

08008eb8 <malloc>:
 8008eb8:	4b02      	ldr	r3, [pc, #8]	@ (8008ec4 <malloc+0xc>)
 8008eba:	4601      	mov	r1, r0
 8008ebc:	6818      	ldr	r0, [r3, #0]
 8008ebe:	f000 b82d 	b.w	8008f1c <_malloc_r>
 8008ec2:	bf00      	nop
 8008ec4:	200000dc 	.word	0x200000dc

08008ec8 <free>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	@ (8008ed4 <free+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f001 bd03 	b.w	800a8d8 <_free_r>
 8008ed2:	bf00      	nop
 8008ed4:	200000dc 	.word	0x200000dc

08008ed8 <sbrk_aligned>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4e0f      	ldr	r6, [pc, #60]	@ (8008f18 <sbrk_aligned+0x40>)
 8008edc:	460c      	mov	r4, r1
 8008ede:	6831      	ldr	r1, [r6, #0]
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	b911      	cbnz	r1, 8008eea <sbrk_aligned+0x12>
 8008ee4:	f000 fe48 	bl	8009b78 <_sbrk_r>
 8008ee8:	6030      	str	r0, [r6, #0]
 8008eea:	4621      	mov	r1, r4
 8008eec:	4628      	mov	r0, r5
 8008eee:	f000 fe43 	bl	8009b78 <_sbrk_r>
 8008ef2:	1c43      	adds	r3, r0, #1
 8008ef4:	d103      	bne.n	8008efe <sbrk_aligned+0x26>
 8008ef6:	f04f 34ff 	mov.w	r4, #4294967295
 8008efa:	4620      	mov	r0, r4
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	1cc4      	adds	r4, r0, #3
 8008f00:	f024 0403 	bic.w	r4, r4, #3
 8008f04:	42a0      	cmp	r0, r4
 8008f06:	d0f8      	beq.n	8008efa <sbrk_aligned+0x22>
 8008f08:	1a21      	subs	r1, r4, r0
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f000 fe34 	bl	8009b78 <_sbrk_r>
 8008f10:	3001      	adds	r0, #1
 8008f12:	d1f2      	bne.n	8008efa <sbrk_aligned+0x22>
 8008f14:	e7ef      	b.n	8008ef6 <sbrk_aligned+0x1e>
 8008f16:	bf00      	nop
 8008f18:	20000694 	.word	0x20000694

08008f1c <_malloc_r>:
 8008f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f20:	1ccd      	adds	r5, r1, #3
 8008f22:	f025 0503 	bic.w	r5, r5, #3
 8008f26:	3508      	adds	r5, #8
 8008f28:	2d0c      	cmp	r5, #12
 8008f2a:	bf38      	it	cc
 8008f2c:	250c      	movcc	r5, #12
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	4606      	mov	r6, r0
 8008f32:	db01      	blt.n	8008f38 <_malloc_r+0x1c>
 8008f34:	42a9      	cmp	r1, r5
 8008f36:	d904      	bls.n	8008f42 <_malloc_r+0x26>
 8008f38:	230c      	movs	r3, #12
 8008f3a:	6033      	str	r3, [r6, #0]
 8008f3c:	2000      	movs	r0, #0
 8008f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009018 <_malloc_r+0xfc>
 8008f46:	f000 f869 	bl	800901c <__malloc_lock>
 8008f4a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f4e:	461c      	mov	r4, r3
 8008f50:	bb44      	cbnz	r4, 8008fa4 <_malloc_r+0x88>
 8008f52:	4629      	mov	r1, r5
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7ff ffbf 	bl	8008ed8 <sbrk_aligned>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	4604      	mov	r4, r0
 8008f5e:	d158      	bne.n	8009012 <_malloc_r+0xf6>
 8008f60:	f8d8 4000 	ldr.w	r4, [r8]
 8008f64:	4627      	mov	r7, r4
 8008f66:	2f00      	cmp	r7, #0
 8008f68:	d143      	bne.n	8008ff2 <_malloc_r+0xd6>
 8008f6a:	2c00      	cmp	r4, #0
 8008f6c:	d04b      	beq.n	8009006 <_malloc_r+0xea>
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	4639      	mov	r1, r7
 8008f72:	4630      	mov	r0, r6
 8008f74:	eb04 0903 	add.w	r9, r4, r3
 8008f78:	f000 fdfe 	bl	8009b78 <_sbrk_r>
 8008f7c:	4581      	cmp	r9, r0
 8008f7e:	d142      	bne.n	8009006 <_malloc_r+0xea>
 8008f80:	6821      	ldr	r1, [r4, #0]
 8008f82:	4630      	mov	r0, r6
 8008f84:	1a6d      	subs	r5, r5, r1
 8008f86:	4629      	mov	r1, r5
 8008f88:	f7ff ffa6 	bl	8008ed8 <sbrk_aligned>
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d03a      	beq.n	8009006 <_malloc_r+0xea>
 8008f90:	6823      	ldr	r3, [r4, #0]
 8008f92:	442b      	add	r3, r5
 8008f94:	6023      	str	r3, [r4, #0]
 8008f96:	f8d8 3000 	ldr.w	r3, [r8]
 8008f9a:	685a      	ldr	r2, [r3, #4]
 8008f9c:	bb62      	cbnz	r2, 8008ff8 <_malloc_r+0xdc>
 8008f9e:	f8c8 7000 	str.w	r7, [r8]
 8008fa2:	e00f      	b.n	8008fc4 <_malloc_r+0xa8>
 8008fa4:	6822      	ldr	r2, [r4, #0]
 8008fa6:	1b52      	subs	r2, r2, r5
 8008fa8:	d420      	bmi.n	8008fec <_malloc_r+0xd0>
 8008faa:	2a0b      	cmp	r2, #11
 8008fac:	d917      	bls.n	8008fde <_malloc_r+0xc2>
 8008fae:	1961      	adds	r1, r4, r5
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	6025      	str	r5, [r4, #0]
 8008fb4:	bf18      	it	ne
 8008fb6:	6059      	strne	r1, [r3, #4]
 8008fb8:	6863      	ldr	r3, [r4, #4]
 8008fba:	bf08      	it	eq
 8008fbc:	f8c8 1000 	streq.w	r1, [r8]
 8008fc0:	5162      	str	r2, [r4, r5]
 8008fc2:	604b      	str	r3, [r1, #4]
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f000 f82f 	bl	8009028 <__malloc_unlock>
 8008fca:	f104 000b 	add.w	r0, r4, #11
 8008fce:	1d23      	adds	r3, r4, #4
 8008fd0:	f020 0007 	bic.w	r0, r0, #7
 8008fd4:	1ac2      	subs	r2, r0, r3
 8008fd6:	bf1c      	itt	ne
 8008fd8:	1a1b      	subne	r3, r3, r0
 8008fda:	50a3      	strne	r3, [r4, r2]
 8008fdc:	e7af      	b.n	8008f3e <_malloc_r+0x22>
 8008fde:	6862      	ldr	r2, [r4, #4]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	bf0c      	ite	eq
 8008fe4:	f8c8 2000 	streq.w	r2, [r8]
 8008fe8:	605a      	strne	r2, [r3, #4]
 8008fea:	e7eb      	b.n	8008fc4 <_malloc_r+0xa8>
 8008fec:	4623      	mov	r3, r4
 8008fee:	6864      	ldr	r4, [r4, #4]
 8008ff0:	e7ae      	b.n	8008f50 <_malloc_r+0x34>
 8008ff2:	463c      	mov	r4, r7
 8008ff4:	687f      	ldr	r7, [r7, #4]
 8008ff6:	e7b6      	b.n	8008f66 <_malloc_r+0x4a>
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d1fb      	bne.n	8008ff8 <_malloc_r+0xdc>
 8009000:	2300      	movs	r3, #0
 8009002:	6053      	str	r3, [r2, #4]
 8009004:	e7de      	b.n	8008fc4 <_malloc_r+0xa8>
 8009006:	230c      	movs	r3, #12
 8009008:	4630      	mov	r0, r6
 800900a:	6033      	str	r3, [r6, #0]
 800900c:	f000 f80c 	bl	8009028 <__malloc_unlock>
 8009010:	e794      	b.n	8008f3c <_malloc_r+0x20>
 8009012:	6005      	str	r5, [r0, #0]
 8009014:	e7d6      	b.n	8008fc4 <_malloc_r+0xa8>
 8009016:	bf00      	nop
 8009018:	20000698 	.word	0x20000698

0800901c <__malloc_lock>:
 800901c:	4801      	ldr	r0, [pc, #4]	@ (8009024 <__malloc_lock+0x8>)
 800901e:	f000 bdf8 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 8009022:	bf00      	nop
 8009024:	200007dc 	.word	0x200007dc

08009028 <__malloc_unlock>:
 8009028:	4801      	ldr	r0, [pc, #4]	@ (8009030 <__malloc_unlock+0x8>)
 800902a:	f000 bdf3 	b.w	8009c14 <__retarget_lock_release_recursive>
 800902e:	bf00      	nop
 8009030:	200007dc 	.word	0x200007dc

08009034 <__cvt>:
 8009034:	2b00      	cmp	r3, #0
 8009036:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800903a:	461d      	mov	r5, r3
 800903c:	bfbb      	ittet	lt
 800903e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8009042:	461d      	movlt	r5, r3
 8009044:	2300      	movge	r3, #0
 8009046:	232d      	movlt	r3, #45	@ 0x2d
 8009048:	b088      	sub	sp, #32
 800904a:	4614      	mov	r4, r2
 800904c:	bfb8      	it	lt
 800904e:	4614      	movlt	r4, r2
 8009050:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009052:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8009054:	7013      	strb	r3, [r2, #0]
 8009056:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009058:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800905c:	f023 0820 	bic.w	r8, r3, #32
 8009060:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009064:	d005      	beq.n	8009072 <__cvt+0x3e>
 8009066:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800906a:	d100      	bne.n	800906e <__cvt+0x3a>
 800906c:	3601      	adds	r6, #1
 800906e:	2302      	movs	r3, #2
 8009070:	e000      	b.n	8009074 <__cvt+0x40>
 8009072:	2303      	movs	r3, #3
 8009074:	aa07      	add	r2, sp, #28
 8009076:	9204      	str	r2, [sp, #16]
 8009078:	aa06      	add	r2, sp, #24
 800907a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800907e:	e9cd 3600 	strd	r3, r6, [sp]
 8009082:	4622      	mov	r2, r4
 8009084:	462b      	mov	r3, r5
 8009086:	f000 fe5f 	bl	8009d48 <_dtoa_r>
 800908a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800908e:	4607      	mov	r7, r0
 8009090:	d119      	bne.n	80090c6 <__cvt+0x92>
 8009092:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009094:	07db      	lsls	r3, r3, #31
 8009096:	d50e      	bpl.n	80090b6 <__cvt+0x82>
 8009098:	eb00 0906 	add.w	r9, r0, r6
 800909c:	2200      	movs	r2, #0
 800909e:	2300      	movs	r3, #0
 80090a0:	4620      	mov	r0, r4
 80090a2:	4629      	mov	r1, r5
 80090a4:	f7f7 fc80 	bl	80009a8 <__aeabi_dcmpeq>
 80090a8:	b108      	cbz	r0, 80090ae <__cvt+0x7a>
 80090aa:	f8cd 901c 	str.w	r9, [sp, #28]
 80090ae:	2230      	movs	r2, #48	@ 0x30
 80090b0:	9b07      	ldr	r3, [sp, #28]
 80090b2:	454b      	cmp	r3, r9
 80090b4:	d31e      	bcc.n	80090f4 <__cvt+0xc0>
 80090b6:	4638      	mov	r0, r7
 80090b8:	9b07      	ldr	r3, [sp, #28]
 80090ba:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80090bc:	1bdb      	subs	r3, r3, r7
 80090be:	6013      	str	r3, [r2, #0]
 80090c0:	b008      	add	sp, #32
 80090c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80090ca:	eb00 0906 	add.w	r9, r0, r6
 80090ce:	d1e5      	bne.n	800909c <__cvt+0x68>
 80090d0:	7803      	ldrb	r3, [r0, #0]
 80090d2:	2b30      	cmp	r3, #48	@ 0x30
 80090d4:	d10a      	bne.n	80090ec <__cvt+0xb8>
 80090d6:	2200      	movs	r2, #0
 80090d8:	2300      	movs	r3, #0
 80090da:	4620      	mov	r0, r4
 80090dc:	4629      	mov	r1, r5
 80090de:	f7f7 fc63 	bl	80009a8 <__aeabi_dcmpeq>
 80090e2:	b918      	cbnz	r0, 80090ec <__cvt+0xb8>
 80090e4:	f1c6 0601 	rsb	r6, r6, #1
 80090e8:	f8ca 6000 	str.w	r6, [sl]
 80090ec:	f8da 3000 	ldr.w	r3, [sl]
 80090f0:	4499      	add	r9, r3
 80090f2:	e7d3      	b.n	800909c <__cvt+0x68>
 80090f4:	1c59      	adds	r1, r3, #1
 80090f6:	9107      	str	r1, [sp, #28]
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	e7d9      	b.n	80090b0 <__cvt+0x7c>

080090fc <__exponent>:
 80090fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090fe:	2900      	cmp	r1, #0
 8009100:	bfb6      	itet	lt
 8009102:	232d      	movlt	r3, #45	@ 0x2d
 8009104:	232b      	movge	r3, #43	@ 0x2b
 8009106:	4249      	neglt	r1, r1
 8009108:	2909      	cmp	r1, #9
 800910a:	7002      	strb	r2, [r0, #0]
 800910c:	7043      	strb	r3, [r0, #1]
 800910e:	dd29      	ble.n	8009164 <__exponent+0x68>
 8009110:	f10d 0307 	add.w	r3, sp, #7
 8009114:	461d      	mov	r5, r3
 8009116:	270a      	movs	r7, #10
 8009118:	fbb1 f6f7 	udiv	r6, r1, r7
 800911c:	461a      	mov	r2, r3
 800911e:	fb07 1416 	mls	r4, r7, r6, r1
 8009122:	3430      	adds	r4, #48	@ 0x30
 8009124:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009128:	460c      	mov	r4, r1
 800912a:	2c63      	cmp	r4, #99	@ 0x63
 800912c:	4631      	mov	r1, r6
 800912e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009132:	dcf1      	bgt.n	8009118 <__exponent+0x1c>
 8009134:	3130      	adds	r1, #48	@ 0x30
 8009136:	1e94      	subs	r4, r2, #2
 8009138:	f803 1c01 	strb.w	r1, [r3, #-1]
 800913c:	4623      	mov	r3, r4
 800913e:	1c41      	adds	r1, r0, #1
 8009140:	42ab      	cmp	r3, r5
 8009142:	d30a      	bcc.n	800915a <__exponent+0x5e>
 8009144:	f10d 0309 	add.w	r3, sp, #9
 8009148:	1a9b      	subs	r3, r3, r2
 800914a:	42ac      	cmp	r4, r5
 800914c:	bf88      	it	hi
 800914e:	2300      	movhi	r3, #0
 8009150:	3302      	adds	r3, #2
 8009152:	4403      	add	r3, r0
 8009154:	1a18      	subs	r0, r3, r0
 8009156:	b003      	add	sp, #12
 8009158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800915a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800915e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009162:	e7ed      	b.n	8009140 <__exponent+0x44>
 8009164:	2330      	movs	r3, #48	@ 0x30
 8009166:	3130      	adds	r1, #48	@ 0x30
 8009168:	7083      	strb	r3, [r0, #2]
 800916a:	70c1      	strb	r1, [r0, #3]
 800916c:	1d03      	adds	r3, r0, #4
 800916e:	e7f1      	b.n	8009154 <__exponent+0x58>

08009170 <_printf_float>:
 8009170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009174:	b091      	sub	sp, #68	@ 0x44
 8009176:	460c      	mov	r4, r1
 8009178:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800917c:	4616      	mov	r6, r2
 800917e:	461f      	mov	r7, r3
 8009180:	4605      	mov	r5, r0
 8009182:	f000 fcc1 	bl	8009b08 <_localeconv_r>
 8009186:	6803      	ldr	r3, [r0, #0]
 8009188:	4618      	mov	r0, r3
 800918a:	9308      	str	r3, [sp, #32]
 800918c:	f7f6 ffe0 	bl	8000150 <strlen>
 8009190:	2300      	movs	r3, #0
 8009192:	930e      	str	r3, [sp, #56]	@ 0x38
 8009194:	f8d8 3000 	ldr.w	r3, [r8]
 8009198:	9009      	str	r0, [sp, #36]	@ 0x24
 800919a:	3307      	adds	r3, #7
 800919c:	f023 0307 	bic.w	r3, r3, #7
 80091a0:	f103 0208 	add.w	r2, r3, #8
 80091a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80091a8:	f8d4 b000 	ldr.w	fp, [r4]
 80091ac:	f8c8 2000 	str.w	r2, [r8]
 80091b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80091b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80091b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091ba:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80091ca:	4b9c      	ldr	r3, [pc, #624]	@ (800943c <_printf_float+0x2cc>)
 80091cc:	f7f7 fc1e 	bl	8000a0c <__aeabi_dcmpun>
 80091d0:	bb70      	cbnz	r0, 8009230 <_printf_float+0xc0>
 80091d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80091d6:	f04f 32ff 	mov.w	r2, #4294967295
 80091da:	4b98      	ldr	r3, [pc, #608]	@ (800943c <_printf_float+0x2cc>)
 80091dc:	f7f7 fbf8 	bl	80009d0 <__aeabi_dcmple>
 80091e0:	bb30      	cbnz	r0, 8009230 <_printf_float+0xc0>
 80091e2:	2200      	movs	r2, #0
 80091e4:	2300      	movs	r3, #0
 80091e6:	4640      	mov	r0, r8
 80091e8:	4649      	mov	r1, r9
 80091ea:	f7f7 fbe7 	bl	80009bc <__aeabi_dcmplt>
 80091ee:	b110      	cbz	r0, 80091f6 <_printf_float+0x86>
 80091f0:	232d      	movs	r3, #45	@ 0x2d
 80091f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091f6:	4a92      	ldr	r2, [pc, #584]	@ (8009440 <_printf_float+0x2d0>)
 80091f8:	4b92      	ldr	r3, [pc, #584]	@ (8009444 <_printf_float+0x2d4>)
 80091fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80091fe:	bf94      	ite	ls
 8009200:	4690      	movls	r8, r2
 8009202:	4698      	movhi	r8, r3
 8009204:	2303      	movs	r3, #3
 8009206:	f04f 0900 	mov.w	r9, #0
 800920a:	6123      	str	r3, [r4, #16]
 800920c:	f02b 0304 	bic.w	r3, fp, #4
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	4633      	mov	r3, r6
 8009214:	4621      	mov	r1, r4
 8009216:	4628      	mov	r0, r5
 8009218:	9700      	str	r7, [sp, #0]
 800921a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800921c:	f000 f9d4 	bl	80095c8 <_printf_common>
 8009220:	3001      	adds	r0, #1
 8009222:	f040 8090 	bne.w	8009346 <_printf_float+0x1d6>
 8009226:	f04f 30ff 	mov.w	r0, #4294967295
 800922a:	b011      	add	sp, #68	@ 0x44
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	4642      	mov	r2, r8
 8009232:	464b      	mov	r3, r9
 8009234:	4640      	mov	r0, r8
 8009236:	4649      	mov	r1, r9
 8009238:	f7f7 fbe8 	bl	8000a0c <__aeabi_dcmpun>
 800923c:	b148      	cbz	r0, 8009252 <_printf_float+0xe2>
 800923e:	464b      	mov	r3, r9
 8009240:	2b00      	cmp	r3, #0
 8009242:	bfb8      	it	lt
 8009244:	232d      	movlt	r3, #45	@ 0x2d
 8009246:	4a80      	ldr	r2, [pc, #512]	@ (8009448 <_printf_float+0x2d8>)
 8009248:	bfb8      	it	lt
 800924a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800924e:	4b7f      	ldr	r3, [pc, #508]	@ (800944c <_printf_float+0x2dc>)
 8009250:	e7d3      	b.n	80091fa <_printf_float+0x8a>
 8009252:	6863      	ldr	r3, [r4, #4]
 8009254:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009258:	1c5a      	adds	r2, r3, #1
 800925a:	d13f      	bne.n	80092dc <_printf_float+0x16c>
 800925c:	2306      	movs	r3, #6
 800925e:	6063      	str	r3, [r4, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009266:	6023      	str	r3, [r4, #0]
 8009268:	9206      	str	r2, [sp, #24]
 800926a:	aa0e      	add	r2, sp, #56	@ 0x38
 800926c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009270:	aa0d      	add	r2, sp, #52	@ 0x34
 8009272:	9203      	str	r2, [sp, #12]
 8009274:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009278:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800927c:	6863      	ldr	r3, [r4, #4]
 800927e:	4642      	mov	r2, r8
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	4628      	mov	r0, r5
 8009284:	464b      	mov	r3, r9
 8009286:	910a      	str	r1, [sp, #40]	@ 0x28
 8009288:	f7ff fed4 	bl	8009034 <__cvt>
 800928c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800928e:	4680      	mov	r8, r0
 8009290:	2947      	cmp	r1, #71	@ 0x47
 8009292:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009294:	d128      	bne.n	80092e8 <_printf_float+0x178>
 8009296:	1cc8      	adds	r0, r1, #3
 8009298:	db02      	blt.n	80092a0 <_printf_float+0x130>
 800929a:	6863      	ldr	r3, [r4, #4]
 800929c:	4299      	cmp	r1, r3
 800929e:	dd40      	ble.n	8009322 <_printf_float+0x1b2>
 80092a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80092a4:	fa5f fa8a 	uxtb.w	sl, sl
 80092a8:	4652      	mov	r2, sl
 80092aa:	3901      	subs	r1, #1
 80092ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80092b0:	910d      	str	r1, [sp, #52]	@ 0x34
 80092b2:	f7ff ff23 	bl	80090fc <__exponent>
 80092b6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80092b8:	4681      	mov	r9, r0
 80092ba:	1813      	adds	r3, r2, r0
 80092bc:	2a01      	cmp	r2, #1
 80092be:	6123      	str	r3, [r4, #16]
 80092c0:	dc02      	bgt.n	80092c8 <_printf_float+0x158>
 80092c2:	6822      	ldr	r2, [r4, #0]
 80092c4:	07d2      	lsls	r2, r2, #31
 80092c6:	d501      	bpl.n	80092cc <_printf_float+0x15c>
 80092c8:	3301      	adds	r3, #1
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d09e      	beq.n	8009212 <_printf_float+0xa2>
 80092d4:	232d      	movs	r3, #45	@ 0x2d
 80092d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80092da:	e79a      	b.n	8009212 <_printf_float+0xa2>
 80092dc:	2947      	cmp	r1, #71	@ 0x47
 80092de:	d1bf      	bne.n	8009260 <_printf_float+0xf0>
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1bd      	bne.n	8009260 <_printf_float+0xf0>
 80092e4:	2301      	movs	r3, #1
 80092e6:	e7ba      	b.n	800925e <_printf_float+0xee>
 80092e8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80092ec:	d9dc      	bls.n	80092a8 <_printf_float+0x138>
 80092ee:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80092f2:	d118      	bne.n	8009326 <_printf_float+0x1b6>
 80092f4:	2900      	cmp	r1, #0
 80092f6:	6863      	ldr	r3, [r4, #4]
 80092f8:	dd0b      	ble.n	8009312 <_printf_float+0x1a2>
 80092fa:	6121      	str	r1, [r4, #16]
 80092fc:	b913      	cbnz	r3, 8009304 <_printf_float+0x194>
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	07d0      	lsls	r0, r2, #31
 8009302:	d502      	bpl.n	800930a <_printf_float+0x19a>
 8009304:	3301      	adds	r3, #1
 8009306:	440b      	add	r3, r1
 8009308:	6123      	str	r3, [r4, #16]
 800930a:	f04f 0900 	mov.w	r9, #0
 800930e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009310:	e7dc      	b.n	80092cc <_printf_float+0x15c>
 8009312:	b913      	cbnz	r3, 800931a <_printf_float+0x1aa>
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	07d2      	lsls	r2, r2, #31
 8009318:	d501      	bpl.n	800931e <_printf_float+0x1ae>
 800931a:	3302      	adds	r3, #2
 800931c:	e7f4      	b.n	8009308 <_printf_float+0x198>
 800931e:	2301      	movs	r3, #1
 8009320:	e7f2      	b.n	8009308 <_printf_float+0x198>
 8009322:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009326:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009328:	4299      	cmp	r1, r3
 800932a:	db05      	blt.n	8009338 <_printf_float+0x1c8>
 800932c:	6823      	ldr	r3, [r4, #0]
 800932e:	6121      	str	r1, [r4, #16]
 8009330:	07d8      	lsls	r0, r3, #31
 8009332:	d5ea      	bpl.n	800930a <_printf_float+0x19a>
 8009334:	1c4b      	adds	r3, r1, #1
 8009336:	e7e7      	b.n	8009308 <_printf_float+0x198>
 8009338:	2900      	cmp	r1, #0
 800933a:	bfcc      	ite	gt
 800933c:	2201      	movgt	r2, #1
 800933e:	f1c1 0202 	rsble	r2, r1, #2
 8009342:	4413      	add	r3, r2
 8009344:	e7e0      	b.n	8009308 <_printf_float+0x198>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	055a      	lsls	r2, r3, #21
 800934a:	d407      	bmi.n	800935c <_printf_float+0x1ec>
 800934c:	6923      	ldr	r3, [r4, #16]
 800934e:	4642      	mov	r2, r8
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	d12b      	bne.n	80093b2 <_printf_float+0x242>
 800935a:	e764      	b.n	8009226 <_printf_float+0xb6>
 800935c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009360:	f240 80dc 	bls.w	800951c <_printf_float+0x3ac>
 8009364:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009368:	2200      	movs	r2, #0
 800936a:	2300      	movs	r3, #0
 800936c:	f7f7 fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8009370:	2800      	cmp	r0, #0
 8009372:	d033      	beq.n	80093dc <_printf_float+0x26c>
 8009374:	2301      	movs	r3, #1
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	4a35      	ldr	r2, [pc, #212]	@ (8009450 <_printf_float+0x2e0>)
 800937c:	47b8      	blx	r7
 800937e:	3001      	adds	r0, #1
 8009380:	f43f af51 	beq.w	8009226 <_printf_float+0xb6>
 8009384:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009388:	4543      	cmp	r3, r8
 800938a:	db02      	blt.n	8009392 <_printf_float+0x222>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	07d8      	lsls	r0, r3, #31
 8009390:	d50f      	bpl.n	80093b2 <_printf_float+0x242>
 8009392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009396:	4631      	mov	r1, r6
 8009398:	4628      	mov	r0, r5
 800939a:	47b8      	blx	r7
 800939c:	3001      	adds	r0, #1
 800939e:	f43f af42 	beq.w	8009226 <_printf_float+0xb6>
 80093a2:	f04f 0900 	mov.w	r9, #0
 80093a6:	f108 38ff 	add.w	r8, r8, #4294967295
 80093aa:	f104 0a1a 	add.w	sl, r4, #26
 80093ae:	45c8      	cmp	r8, r9
 80093b0:	dc09      	bgt.n	80093c6 <_printf_float+0x256>
 80093b2:	6823      	ldr	r3, [r4, #0]
 80093b4:	079b      	lsls	r3, r3, #30
 80093b6:	f100 8102 	bmi.w	80095be <_printf_float+0x44e>
 80093ba:	68e0      	ldr	r0, [r4, #12]
 80093bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093be:	4298      	cmp	r0, r3
 80093c0:	bfb8      	it	lt
 80093c2:	4618      	movlt	r0, r3
 80093c4:	e731      	b.n	800922a <_printf_float+0xba>
 80093c6:	2301      	movs	r3, #1
 80093c8:	4652      	mov	r2, sl
 80093ca:	4631      	mov	r1, r6
 80093cc:	4628      	mov	r0, r5
 80093ce:	47b8      	blx	r7
 80093d0:	3001      	adds	r0, #1
 80093d2:	f43f af28 	beq.w	8009226 <_printf_float+0xb6>
 80093d6:	f109 0901 	add.w	r9, r9, #1
 80093da:	e7e8      	b.n	80093ae <_printf_float+0x23e>
 80093dc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80093de:	2b00      	cmp	r3, #0
 80093e0:	dc38      	bgt.n	8009454 <_printf_float+0x2e4>
 80093e2:	2301      	movs	r3, #1
 80093e4:	4631      	mov	r1, r6
 80093e6:	4628      	mov	r0, r5
 80093e8:	4a19      	ldr	r2, [pc, #100]	@ (8009450 <_printf_float+0x2e0>)
 80093ea:	47b8      	blx	r7
 80093ec:	3001      	adds	r0, #1
 80093ee:	f43f af1a 	beq.w	8009226 <_printf_float+0xb6>
 80093f2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80093f6:	ea59 0303 	orrs.w	r3, r9, r3
 80093fa:	d102      	bne.n	8009402 <_printf_float+0x292>
 80093fc:	6823      	ldr	r3, [r4, #0]
 80093fe:	07d9      	lsls	r1, r3, #31
 8009400:	d5d7      	bpl.n	80093b2 <_printf_float+0x242>
 8009402:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	f43f af0a 	beq.w	8009226 <_printf_float+0xb6>
 8009412:	f04f 0a00 	mov.w	sl, #0
 8009416:	f104 0b1a 	add.w	fp, r4, #26
 800941a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800941c:	425b      	negs	r3, r3
 800941e:	4553      	cmp	r3, sl
 8009420:	dc01      	bgt.n	8009426 <_printf_float+0x2b6>
 8009422:	464b      	mov	r3, r9
 8009424:	e793      	b.n	800934e <_printf_float+0x1de>
 8009426:	2301      	movs	r3, #1
 8009428:	465a      	mov	r2, fp
 800942a:	4631      	mov	r1, r6
 800942c:	4628      	mov	r0, r5
 800942e:	47b8      	blx	r7
 8009430:	3001      	adds	r0, #1
 8009432:	f43f aef8 	beq.w	8009226 <_printf_float+0xb6>
 8009436:	f10a 0a01 	add.w	sl, sl, #1
 800943a:	e7ee      	b.n	800941a <_printf_float+0x2aa>
 800943c:	7fefffff 	.word	0x7fefffff
 8009440:	0800b8d0 	.word	0x0800b8d0
 8009444:	0800b8d4 	.word	0x0800b8d4
 8009448:	0800b8d8 	.word	0x0800b8d8
 800944c:	0800b8dc 	.word	0x0800b8dc
 8009450:	0800b8e0 	.word	0x0800b8e0
 8009454:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009456:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800945a:	4553      	cmp	r3, sl
 800945c:	bfa8      	it	ge
 800945e:	4653      	movge	r3, sl
 8009460:	2b00      	cmp	r3, #0
 8009462:	4699      	mov	r9, r3
 8009464:	dc36      	bgt.n	80094d4 <_printf_float+0x364>
 8009466:	f04f 0b00 	mov.w	fp, #0
 800946a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800946e:	f104 021a 	add.w	r2, r4, #26
 8009472:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009474:	930a      	str	r3, [sp, #40]	@ 0x28
 8009476:	eba3 0309 	sub.w	r3, r3, r9
 800947a:	455b      	cmp	r3, fp
 800947c:	dc31      	bgt.n	80094e2 <_printf_float+0x372>
 800947e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009480:	459a      	cmp	sl, r3
 8009482:	dc3a      	bgt.n	80094fa <_printf_float+0x38a>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	07da      	lsls	r2, r3, #31
 8009488:	d437      	bmi.n	80094fa <_printf_float+0x38a>
 800948a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800948c:	ebaa 0903 	sub.w	r9, sl, r3
 8009490:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009492:	ebaa 0303 	sub.w	r3, sl, r3
 8009496:	4599      	cmp	r9, r3
 8009498:	bfa8      	it	ge
 800949a:	4699      	movge	r9, r3
 800949c:	f1b9 0f00 	cmp.w	r9, #0
 80094a0:	dc33      	bgt.n	800950a <_printf_float+0x39a>
 80094a2:	f04f 0800 	mov.w	r8, #0
 80094a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80094aa:	f104 0b1a 	add.w	fp, r4, #26
 80094ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094b0:	ebaa 0303 	sub.w	r3, sl, r3
 80094b4:	eba3 0309 	sub.w	r3, r3, r9
 80094b8:	4543      	cmp	r3, r8
 80094ba:	f77f af7a 	ble.w	80093b2 <_printf_float+0x242>
 80094be:	2301      	movs	r3, #1
 80094c0:	465a      	mov	r2, fp
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	47b8      	blx	r7
 80094c8:	3001      	adds	r0, #1
 80094ca:	f43f aeac 	beq.w	8009226 <_printf_float+0xb6>
 80094ce:	f108 0801 	add.w	r8, r8, #1
 80094d2:	e7ec      	b.n	80094ae <_printf_float+0x33e>
 80094d4:	4642      	mov	r2, r8
 80094d6:	4631      	mov	r1, r6
 80094d8:	4628      	mov	r0, r5
 80094da:	47b8      	blx	r7
 80094dc:	3001      	adds	r0, #1
 80094de:	d1c2      	bne.n	8009466 <_printf_float+0x2f6>
 80094e0:	e6a1      	b.n	8009226 <_printf_float+0xb6>
 80094e2:	2301      	movs	r3, #1
 80094e4:	4631      	mov	r1, r6
 80094e6:	4628      	mov	r0, r5
 80094e8:	920a      	str	r2, [sp, #40]	@ 0x28
 80094ea:	47b8      	blx	r7
 80094ec:	3001      	adds	r0, #1
 80094ee:	f43f ae9a 	beq.w	8009226 <_printf_float+0xb6>
 80094f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094f4:	f10b 0b01 	add.w	fp, fp, #1
 80094f8:	e7bb      	b.n	8009472 <_printf_float+0x302>
 80094fa:	4631      	mov	r1, r6
 80094fc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009500:	4628      	mov	r0, r5
 8009502:	47b8      	blx	r7
 8009504:	3001      	adds	r0, #1
 8009506:	d1c0      	bne.n	800948a <_printf_float+0x31a>
 8009508:	e68d      	b.n	8009226 <_printf_float+0xb6>
 800950a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800950c:	464b      	mov	r3, r9
 800950e:	4631      	mov	r1, r6
 8009510:	4628      	mov	r0, r5
 8009512:	4442      	add	r2, r8
 8009514:	47b8      	blx	r7
 8009516:	3001      	adds	r0, #1
 8009518:	d1c3      	bne.n	80094a2 <_printf_float+0x332>
 800951a:	e684      	b.n	8009226 <_printf_float+0xb6>
 800951c:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009520:	f1ba 0f01 	cmp.w	sl, #1
 8009524:	dc01      	bgt.n	800952a <_printf_float+0x3ba>
 8009526:	07db      	lsls	r3, r3, #31
 8009528:	d536      	bpl.n	8009598 <_printf_float+0x428>
 800952a:	2301      	movs	r3, #1
 800952c:	4642      	mov	r2, r8
 800952e:	4631      	mov	r1, r6
 8009530:	4628      	mov	r0, r5
 8009532:	47b8      	blx	r7
 8009534:	3001      	adds	r0, #1
 8009536:	f43f ae76 	beq.w	8009226 <_printf_float+0xb6>
 800953a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f ae6e 	beq.w	8009226 <_printf_float+0xb6>
 800954a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800954e:	2200      	movs	r2, #0
 8009550:	2300      	movs	r3, #0
 8009552:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009556:	f7f7 fa27 	bl	80009a8 <__aeabi_dcmpeq>
 800955a:	b9c0      	cbnz	r0, 800958e <_printf_float+0x41e>
 800955c:	4653      	mov	r3, sl
 800955e:	f108 0201 	add.w	r2, r8, #1
 8009562:	4631      	mov	r1, r6
 8009564:	4628      	mov	r0, r5
 8009566:	47b8      	blx	r7
 8009568:	3001      	adds	r0, #1
 800956a:	d10c      	bne.n	8009586 <_printf_float+0x416>
 800956c:	e65b      	b.n	8009226 <_printf_float+0xb6>
 800956e:	2301      	movs	r3, #1
 8009570:	465a      	mov	r2, fp
 8009572:	4631      	mov	r1, r6
 8009574:	4628      	mov	r0, r5
 8009576:	47b8      	blx	r7
 8009578:	3001      	adds	r0, #1
 800957a:	f43f ae54 	beq.w	8009226 <_printf_float+0xb6>
 800957e:	f108 0801 	add.w	r8, r8, #1
 8009582:	45d0      	cmp	r8, sl
 8009584:	dbf3      	blt.n	800956e <_printf_float+0x3fe>
 8009586:	464b      	mov	r3, r9
 8009588:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800958c:	e6e0      	b.n	8009350 <_printf_float+0x1e0>
 800958e:	f04f 0800 	mov.w	r8, #0
 8009592:	f104 0b1a 	add.w	fp, r4, #26
 8009596:	e7f4      	b.n	8009582 <_printf_float+0x412>
 8009598:	2301      	movs	r3, #1
 800959a:	4642      	mov	r2, r8
 800959c:	e7e1      	b.n	8009562 <_printf_float+0x3f2>
 800959e:	2301      	movs	r3, #1
 80095a0:	464a      	mov	r2, r9
 80095a2:	4631      	mov	r1, r6
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b8      	blx	r7
 80095a8:	3001      	adds	r0, #1
 80095aa:	f43f ae3c 	beq.w	8009226 <_printf_float+0xb6>
 80095ae:	f108 0801 	add.w	r8, r8, #1
 80095b2:	68e3      	ldr	r3, [r4, #12]
 80095b4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80095b6:	1a5b      	subs	r3, r3, r1
 80095b8:	4543      	cmp	r3, r8
 80095ba:	dcf0      	bgt.n	800959e <_printf_float+0x42e>
 80095bc:	e6fd      	b.n	80093ba <_printf_float+0x24a>
 80095be:	f04f 0800 	mov.w	r8, #0
 80095c2:	f104 0919 	add.w	r9, r4, #25
 80095c6:	e7f4      	b.n	80095b2 <_printf_float+0x442>

080095c8 <_printf_common>:
 80095c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095cc:	4616      	mov	r6, r2
 80095ce:	4698      	mov	r8, r3
 80095d0:	688a      	ldr	r2, [r1, #8]
 80095d2:	690b      	ldr	r3, [r1, #16]
 80095d4:	4607      	mov	r7, r0
 80095d6:	4293      	cmp	r3, r2
 80095d8:	bfb8      	it	lt
 80095da:	4613      	movlt	r3, r2
 80095dc:	6033      	str	r3, [r6, #0]
 80095de:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80095e2:	460c      	mov	r4, r1
 80095e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80095e8:	b10a      	cbz	r2, 80095ee <_printf_common+0x26>
 80095ea:	3301      	adds	r3, #1
 80095ec:	6033      	str	r3, [r6, #0]
 80095ee:	6823      	ldr	r3, [r4, #0]
 80095f0:	0699      	lsls	r1, r3, #26
 80095f2:	bf42      	ittt	mi
 80095f4:	6833      	ldrmi	r3, [r6, #0]
 80095f6:	3302      	addmi	r3, #2
 80095f8:	6033      	strmi	r3, [r6, #0]
 80095fa:	6825      	ldr	r5, [r4, #0]
 80095fc:	f015 0506 	ands.w	r5, r5, #6
 8009600:	d106      	bne.n	8009610 <_printf_common+0x48>
 8009602:	f104 0a19 	add.w	sl, r4, #25
 8009606:	68e3      	ldr	r3, [r4, #12]
 8009608:	6832      	ldr	r2, [r6, #0]
 800960a:	1a9b      	subs	r3, r3, r2
 800960c:	42ab      	cmp	r3, r5
 800960e:	dc2b      	bgt.n	8009668 <_printf_common+0xa0>
 8009610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009614:	6822      	ldr	r2, [r4, #0]
 8009616:	3b00      	subs	r3, #0
 8009618:	bf18      	it	ne
 800961a:	2301      	movne	r3, #1
 800961c:	0692      	lsls	r2, r2, #26
 800961e:	d430      	bmi.n	8009682 <_printf_common+0xba>
 8009620:	4641      	mov	r1, r8
 8009622:	4638      	mov	r0, r7
 8009624:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009628:	47c8      	blx	r9
 800962a:	3001      	adds	r0, #1
 800962c:	d023      	beq.n	8009676 <_printf_common+0xae>
 800962e:	6823      	ldr	r3, [r4, #0]
 8009630:	6922      	ldr	r2, [r4, #16]
 8009632:	f003 0306 	and.w	r3, r3, #6
 8009636:	2b04      	cmp	r3, #4
 8009638:	bf14      	ite	ne
 800963a:	2500      	movne	r5, #0
 800963c:	6833      	ldreq	r3, [r6, #0]
 800963e:	f04f 0600 	mov.w	r6, #0
 8009642:	bf08      	it	eq
 8009644:	68e5      	ldreq	r5, [r4, #12]
 8009646:	f104 041a 	add.w	r4, r4, #26
 800964a:	bf08      	it	eq
 800964c:	1aed      	subeq	r5, r5, r3
 800964e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009652:	bf08      	it	eq
 8009654:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009658:	4293      	cmp	r3, r2
 800965a:	bfc4      	itt	gt
 800965c:	1a9b      	subgt	r3, r3, r2
 800965e:	18ed      	addgt	r5, r5, r3
 8009660:	42b5      	cmp	r5, r6
 8009662:	d11a      	bne.n	800969a <_printf_common+0xd2>
 8009664:	2000      	movs	r0, #0
 8009666:	e008      	b.n	800967a <_printf_common+0xb2>
 8009668:	2301      	movs	r3, #1
 800966a:	4652      	mov	r2, sl
 800966c:	4641      	mov	r1, r8
 800966e:	4638      	mov	r0, r7
 8009670:	47c8      	blx	r9
 8009672:	3001      	adds	r0, #1
 8009674:	d103      	bne.n	800967e <_printf_common+0xb6>
 8009676:	f04f 30ff 	mov.w	r0, #4294967295
 800967a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800967e:	3501      	adds	r5, #1
 8009680:	e7c1      	b.n	8009606 <_printf_common+0x3e>
 8009682:	2030      	movs	r0, #48	@ 0x30
 8009684:	18e1      	adds	r1, r4, r3
 8009686:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009690:	4422      	add	r2, r4
 8009692:	3302      	adds	r3, #2
 8009694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009698:	e7c2      	b.n	8009620 <_printf_common+0x58>
 800969a:	2301      	movs	r3, #1
 800969c:	4622      	mov	r2, r4
 800969e:	4641      	mov	r1, r8
 80096a0:	4638      	mov	r0, r7
 80096a2:	47c8      	blx	r9
 80096a4:	3001      	adds	r0, #1
 80096a6:	d0e6      	beq.n	8009676 <_printf_common+0xae>
 80096a8:	3601      	adds	r6, #1
 80096aa:	e7d9      	b.n	8009660 <_printf_common+0x98>

080096ac <_printf_i>:
 80096ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80096b0:	7e0f      	ldrb	r7, [r1, #24]
 80096b2:	4691      	mov	r9, r2
 80096b4:	2f78      	cmp	r7, #120	@ 0x78
 80096b6:	4680      	mov	r8, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	469a      	mov	sl, r3
 80096bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80096be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80096c2:	d807      	bhi.n	80096d4 <_printf_i+0x28>
 80096c4:	2f62      	cmp	r7, #98	@ 0x62
 80096c6:	d80a      	bhi.n	80096de <_printf_i+0x32>
 80096c8:	2f00      	cmp	r7, #0
 80096ca:	f000 80d3 	beq.w	8009874 <_printf_i+0x1c8>
 80096ce:	2f58      	cmp	r7, #88	@ 0x58
 80096d0:	f000 80ba 	beq.w	8009848 <_printf_i+0x19c>
 80096d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80096d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80096dc:	e03a      	b.n	8009754 <_printf_i+0xa8>
 80096de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80096e2:	2b15      	cmp	r3, #21
 80096e4:	d8f6      	bhi.n	80096d4 <_printf_i+0x28>
 80096e6:	a101      	add	r1, pc, #4	@ (adr r1, 80096ec <_printf_i+0x40>)
 80096e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096ec:	08009745 	.word	0x08009745
 80096f0:	08009759 	.word	0x08009759
 80096f4:	080096d5 	.word	0x080096d5
 80096f8:	080096d5 	.word	0x080096d5
 80096fc:	080096d5 	.word	0x080096d5
 8009700:	080096d5 	.word	0x080096d5
 8009704:	08009759 	.word	0x08009759
 8009708:	080096d5 	.word	0x080096d5
 800970c:	080096d5 	.word	0x080096d5
 8009710:	080096d5 	.word	0x080096d5
 8009714:	080096d5 	.word	0x080096d5
 8009718:	0800985b 	.word	0x0800985b
 800971c:	08009783 	.word	0x08009783
 8009720:	08009815 	.word	0x08009815
 8009724:	080096d5 	.word	0x080096d5
 8009728:	080096d5 	.word	0x080096d5
 800972c:	0800987d 	.word	0x0800987d
 8009730:	080096d5 	.word	0x080096d5
 8009734:	08009783 	.word	0x08009783
 8009738:	080096d5 	.word	0x080096d5
 800973c:	080096d5 	.word	0x080096d5
 8009740:	0800981d 	.word	0x0800981d
 8009744:	6833      	ldr	r3, [r6, #0]
 8009746:	1d1a      	adds	r2, r3, #4
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	6032      	str	r2, [r6, #0]
 800974c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009750:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009754:	2301      	movs	r3, #1
 8009756:	e09e      	b.n	8009896 <_printf_i+0x1ea>
 8009758:	6833      	ldr	r3, [r6, #0]
 800975a:	6820      	ldr	r0, [r4, #0]
 800975c:	1d19      	adds	r1, r3, #4
 800975e:	6031      	str	r1, [r6, #0]
 8009760:	0606      	lsls	r6, r0, #24
 8009762:	d501      	bpl.n	8009768 <_printf_i+0xbc>
 8009764:	681d      	ldr	r5, [r3, #0]
 8009766:	e003      	b.n	8009770 <_printf_i+0xc4>
 8009768:	0645      	lsls	r5, r0, #25
 800976a:	d5fb      	bpl.n	8009764 <_printf_i+0xb8>
 800976c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009770:	2d00      	cmp	r5, #0
 8009772:	da03      	bge.n	800977c <_printf_i+0xd0>
 8009774:	232d      	movs	r3, #45	@ 0x2d
 8009776:	426d      	negs	r5, r5
 8009778:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800977c:	230a      	movs	r3, #10
 800977e:	4859      	ldr	r0, [pc, #356]	@ (80098e4 <_printf_i+0x238>)
 8009780:	e011      	b.n	80097a6 <_printf_i+0xfa>
 8009782:	6821      	ldr	r1, [r4, #0]
 8009784:	6833      	ldr	r3, [r6, #0]
 8009786:	0608      	lsls	r0, r1, #24
 8009788:	f853 5b04 	ldr.w	r5, [r3], #4
 800978c:	d402      	bmi.n	8009794 <_printf_i+0xe8>
 800978e:	0649      	lsls	r1, r1, #25
 8009790:	bf48      	it	mi
 8009792:	b2ad      	uxthmi	r5, r5
 8009794:	2f6f      	cmp	r7, #111	@ 0x6f
 8009796:	6033      	str	r3, [r6, #0]
 8009798:	bf14      	ite	ne
 800979a:	230a      	movne	r3, #10
 800979c:	2308      	moveq	r3, #8
 800979e:	4851      	ldr	r0, [pc, #324]	@ (80098e4 <_printf_i+0x238>)
 80097a0:	2100      	movs	r1, #0
 80097a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80097a6:	6866      	ldr	r6, [r4, #4]
 80097a8:	2e00      	cmp	r6, #0
 80097aa:	bfa8      	it	ge
 80097ac:	6821      	ldrge	r1, [r4, #0]
 80097ae:	60a6      	str	r6, [r4, #8]
 80097b0:	bfa4      	itt	ge
 80097b2:	f021 0104 	bicge.w	r1, r1, #4
 80097b6:	6021      	strge	r1, [r4, #0]
 80097b8:	b90d      	cbnz	r5, 80097be <_printf_i+0x112>
 80097ba:	2e00      	cmp	r6, #0
 80097bc:	d04b      	beq.n	8009856 <_printf_i+0x1aa>
 80097be:	4616      	mov	r6, r2
 80097c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80097c4:	fb03 5711 	mls	r7, r3, r1, r5
 80097c8:	5dc7      	ldrb	r7, [r0, r7]
 80097ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80097ce:	462f      	mov	r7, r5
 80097d0:	42bb      	cmp	r3, r7
 80097d2:	460d      	mov	r5, r1
 80097d4:	d9f4      	bls.n	80097c0 <_printf_i+0x114>
 80097d6:	2b08      	cmp	r3, #8
 80097d8:	d10b      	bne.n	80097f2 <_printf_i+0x146>
 80097da:	6823      	ldr	r3, [r4, #0]
 80097dc:	07df      	lsls	r7, r3, #31
 80097de:	d508      	bpl.n	80097f2 <_printf_i+0x146>
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	6861      	ldr	r1, [r4, #4]
 80097e4:	4299      	cmp	r1, r3
 80097e6:	bfde      	ittt	le
 80097e8:	2330      	movle	r3, #48	@ 0x30
 80097ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80097ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80097f2:	1b92      	subs	r2, r2, r6
 80097f4:	6122      	str	r2, [r4, #16]
 80097f6:	464b      	mov	r3, r9
 80097f8:	4621      	mov	r1, r4
 80097fa:	4640      	mov	r0, r8
 80097fc:	f8cd a000 	str.w	sl, [sp]
 8009800:	aa03      	add	r2, sp, #12
 8009802:	f7ff fee1 	bl	80095c8 <_printf_common>
 8009806:	3001      	adds	r0, #1
 8009808:	d14a      	bne.n	80098a0 <_printf_i+0x1f4>
 800980a:	f04f 30ff 	mov.w	r0, #4294967295
 800980e:	b004      	add	sp, #16
 8009810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	f043 0320 	orr.w	r3, r3, #32
 800981a:	6023      	str	r3, [r4, #0]
 800981c:	2778      	movs	r7, #120	@ 0x78
 800981e:	4832      	ldr	r0, [pc, #200]	@ (80098e8 <_printf_i+0x23c>)
 8009820:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009824:	6823      	ldr	r3, [r4, #0]
 8009826:	6831      	ldr	r1, [r6, #0]
 8009828:	061f      	lsls	r7, r3, #24
 800982a:	f851 5b04 	ldr.w	r5, [r1], #4
 800982e:	d402      	bmi.n	8009836 <_printf_i+0x18a>
 8009830:	065f      	lsls	r7, r3, #25
 8009832:	bf48      	it	mi
 8009834:	b2ad      	uxthmi	r5, r5
 8009836:	6031      	str	r1, [r6, #0]
 8009838:	07d9      	lsls	r1, r3, #31
 800983a:	bf44      	itt	mi
 800983c:	f043 0320 	orrmi.w	r3, r3, #32
 8009840:	6023      	strmi	r3, [r4, #0]
 8009842:	b11d      	cbz	r5, 800984c <_printf_i+0x1a0>
 8009844:	2310      	movs	r3, #16
 8009846:	e7ab      	b.n	80097a0 <_printf_i+0xf4>
 8009848:	4826      	ldr	r0, [pc, #152]	@ (80098e4 <_printf_i+0x238>)
 800984a:	e7e9      	b.n	8009820 <_printf_i+0x174>
 800984c:	6823      	ldr	r3, [r4, #0]
 800984e:	f023 0320 	bic.w	r3, r3, #32
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	e7f6      	b.n	8009844 <_printf_i+0x198>
 8009856:	4616      	mov	r6, r2
 8009858:	e7bd      	b.n	80097d6 <_printf_i+0x12a>
 800985a:	6833      	ldr	r3, [r6, #0]
 800985c:	6825      	ldr	r5, [r4, #0]
 800985e:	1d18      	adds	r0, r3, #4
 8009860:	6961      	ldr	r1, [r4, #20]
 8009862:	6030      	str	r0, [r6, #0]
 8009864:	062e      	lsls	r6, r5, #24
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	d501      	bpl.n	800986e <_printf_i+0x1c2>
 800986a:	6019      	str	r1, [r3, #0]
 800986c:	e002      	b.n	8009874 <_printf_i+0x1c8>
 800986e:	0668      	lsls	r0, r5, #25
 8009870:	d5fb      	bpl.n	800986a <_printf_i+0x1be>
 8009872:	8019      	strh	r1, [r3, #0]
 8009874:	2300      	movs	r3, #0
 8009876:	4616      	mov	r6, r2
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	e7bc      	b.n	80097f6 <_printf_i+0x14a>
 800987c:	6833      	ldr	r3, [r6, #0]
 800987e:	2100      	movs	r1, #0
 8009880:	1d1a      	adds	r2, r3, #4
 8009882:	6032      	str	r2, [r6, #0]
 8009884:	681e      	ldr	r6, [r3, #0]
 8009886:	6862      	ldr	r2, [r4, #4]
 8009888:	4630      	mov	r0, r6
 800988a:	f000 f9c4 	bl	8009c16 <memchr>
 800988e:	b108      	cbz	r0, 8009894 <_printf_i+0x1e8>
 8009890:	1b80      	subs	r0, r0, r6
 8009892:	6060      	str	r0, [r4, #4]
 8009894:	6863      	ldr	r3, [r4, #4]
 8009896:	6123      	str	r3, [r4, #16]
 8009898:	2300      	movs	r3, #0
 800989a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800989e:	e7aa      	b.n	80097f6 <_printf_i+0x14a>
 80098a0:	4632      	mov	r2, r6
 80098a2:	4649      	mov	r1, r9
 80098a4:	4640      	mov	r0, r8
 80098a6:	6923      	ldr	r3, [r4, #16]
 80098a8:	47d0      	blx	sl
 80098aa:	3001      	adds	r0, #1
 80098ac:	d0ad      	beq.n	800980a <_printf_i+0x15e>
 80098ae:	6823      	ldr	r3, [r4, #0]
 80098b0:	079b      	lsls	r3, r3, #30
 80098b2:	d413      	bmi.n	80098dc <_printf_i+0x230>
 80098b4:	68e0      	ldr	r0, [r4, #12]
 80098b6:	9b03      	ldr	r3, [sp, #12]
 80098b8:	4298      	cmp	r0, r3
 80098ba:	bfb8      	it	lt
 80098bc:	4618      	movlt	r0, r3
 80098be:	e7a6      	b.n	800980e <_printf_i+0x162>
 80098c0:	2301      	movs	r3, #1
 80098c2:	4632      	mov	r2, r6
 80098c4:	4649      	mov	r1, r9
 80098c6:	4640      	mov	r0, r8
 80098c8:	47d0      	blx	sl
 80098ca:	3001      	adds	r0, #1
 80098cc:	d09d      	beq.n	800980a <_printf_i+0x15e>
 80098ce:	3501      	adds	r5, #1
 80098d0:	68e3      	ldr	r3, [r4, #12]
 80098d2:	9903      	ldr	r1, [sp, #12]
 80098d4:	1a5b      	subs	r3, r3, r1
 80098d6:	42ab      	cmp	r3, r5
 80098d8:	dcf2      	bgt.n	80098c0 <_printf_i+0x214>
 80098da:	e7eb      	b.n	80098b4 <_printf_i+0x208>
 80098dc:	2500      	movs	r5, #0
 80098de:	f104 0619 	add.w	r6, r4, #25
 80098e2:	e7f5      	b.n	80098d0 <_printf_i+0x224>
 80098e4:	0800b8e2 	.word	0x0800b8e2
 80098e8:	0800b8f3 	.word	0x0800b8f3

080098ec <std>:
 80098ec:	2300      	movs	r3, #0
 80098ee:	b510      	push	{r4, lr}
 80098f0:	4604      	mov	r4, r0
 80098f2:	e9c0 3300 	strd	r3, r3, [r0]
 80098f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098fa:	6083      	str	r3, [r0, #8]
 80098fc:	8181      	strh	r1, [r0, #12]
 80098fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8009900:	81c2      	strh	r2, [r0, #14]
 8009902:	6183      	str	r3, [r0, #24]
 8009904:	4619      	mov	r1, r3
 8009906:	2208      	movs	r2, #8
 8009908:	305c      	adds	r0, #92	@ 0x5c
 800990a:	f000 f8f4 	bl	8009af6 <memset>
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <std+0x58>)
 8009910:	6224      	str	r4, [r4, #32]
 8009912:	6263      	str	r3, [r4, #36]	@ 0x24
 8009914:	4b0c      	ldr	r3, [pc, #48]	@ (8009948 <std+0x5c>)
 8009916:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009918:	4b0c      	ldr	r3, [pc, #48]	@ (800994c <std+0x60>)
 800991a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800991c:	4b0c      	ldr	r3, [pc, #48]	@ (8009950 <std+0x64>)
 800991e:	6323      	str	r3, [r4, #48]	@ 0x30
 8009920:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <std+0x68>)
 8009922:	429c      	cmp	r4, r3
 8009924:	d006      	beq.n	8009934 <std+0x48>
 8009926:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800992a:	4294      	cmp	r4, r2
 800992c:	d002      	beq.n	8009934 <std+0x48>
 800992e:	33d0      	adds	r3, #208	@ 0xd0
 8009930:	429c      	cmp	r4, r3
 8009932:	d105      	bne.n	8009940 <std+0x54>
 8009934:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800993c:	f000 b968 	b.w	8009c10 <__retarget_lock_init_recursive>
 8009940:	bd10      	pop	{r4, pc}
 8009942:	bf00      	nop
 8009944:	08009a71 	.word	0x08009a71
 8009948:	08009a93 	.word	0x08009a93
 800994c:	08009acb 	.word	0x08009acb
 8009950:	08009aef 	.word	0x08009aef
 8009954:	2000069c 	.word	0x2000069c

08009958 <stdio_exit_handler>:
 8009958:	4a02      	ldr	r2, [pc, #8]	@ (8009964 <stdio_exit_handler+0xc>)
 800995a:	4903      	ldr	r1, [pc, #12]	@ (8009968 <stdio_exit_handler+0x10>)
 800995c:	4803      	ldr	r0, [pc, #12]	@ (800996c <stdio_exit_handler+0x14>)
 800995e:	f000 b869 	b.w	8009a34 <_fwalk_sglue>
 8009962:	bf00      	nop
 8009964:	200000d0 	.word	0x200000d0
 8009968:	0800b169 	.word	0x0800b169
 800996c:	200000e0 	.word	0x200000e0

08009970 <cleanup_stdio>:
 8009970:	6841      	ldr	r1, [r0, #4]
 8009972:	4b0c      	ldr	r3, [pc, #48]	@ (80099a4 <cleanup_stdio+0x34>)
 8009974:	b510      	push	{r4, lr}
 8009976:	4299      	cmp	r1, r3
 8009978:	4604      	mov	r4, r0
 800997a:	d001      	beq.n	8009980 <cleanup_stdio+0x10>
 800997c:	f001 fbf4 	bl	800b168 <_fflush_r>
 8009980:	68a1      	ldr	r1, [r4, #8]
 8009982:	4b09      	ldr	r3, [pc, #36]	@ (80099a8 <cleanup_stdio+0x38>)
 8009984:	4299      	cmp	r1, r3
 8009986:	d002      	beq.n	800998e <cleanup_stdio+0x1e>
 8009988:	4620      	mov	r0, r4
 800998a:	f001 fbed 	bl	800b168 <_fflush_r>
 800998e:	68e1      	ldr	r1, [r4, #12]
 8009990:	4b06      	ldr	r3, [pc, #24]	@ (80099ac <cleanup_stdio+0x3c>)
 8009992:	4299      	cmp	r1, r3
 8009994:	d004      	beq.n	80099a0 <cleanup_stdio+0x30>
 8009996:	4620      	mov	r0, r4
 8009998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800999c:	f001 bbe4 	b.w	800b168 <_fflush_r>
 80099a0:	bd10      	pop	{r4, pc}
 80099a2:	bf00      	nop
 80099a4:	2000069c 	.word	0x2000069c
 80099a8:	20000704 	.word	0x20000704
 80099ac:	2000076c 	.word	0x2000076c

080099b0 <global_stdio_init.part.0>:
 80099b0:	b510      	push	{r4, lr}
 80099b2:	4b0b      	ldr	r3, [pc, #44]	@ (80099e0 <global_stdio_init.part.0+0x30>)
 80099b4:	4c0b      	ldr	r4, [pc, #44]	@ (80099e4 <global_stdio_init.part.0+0x34>)
 80099b6:	4a0c      	ldr	r2, [pc, #48]	@ (80099e8 <global_stdio_init.part.0+0x38>)
 80099b8:	4620      	mov	r0, r4
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	2104      	movs	r1, #4
 80099be:	2200      	movs	r2, #0
 80099c0:	f7ff ff94 	bl	80098ec <std>
 80099c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099c8:	2201      	movs	r2, #1
 80099ca:	2109      	movs	r1, #9
 80099cc:	f7ff ff8e 	bl	80098ec <std>
 80099d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099d4:	2202      	movs	r2, #2
 80099d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099da:	2112      	movs	r1, #18
 80099dc:	f7ff bf86 	b.w	80098ec <std>
 80099e0:	200007d4 	.word	0x200007d4
 80099e4:	2000069c 	.word	0x2000069c
 80099e8:	08009959 	.word	0x08009959

080099ec <__sfp_lock_acquire>:
 80099ec:	4801      	ldr	r0, [pc, #4]	@ (80099f4 <__sfp_lock_acquire+0x8>)
 80099ee:	f000 b910 	b.w	8009c12 <__retarget_lock_acquire_recursive>
 80099f2:	bf00      	nop
 80099f4:	200007dd 	.word	0x200007dd

080099f8 <__sfp_lock_release>:
 80099f8:	4801      	ldr	r0, [pc, #4]	@ (8009a00 <__sfp_lock_release+0x8>)
 80099fa:	f000 b90b 	b.w	8009c14 <__retarget_lock_release_recursive>
 80099fe:	bf00      	nop
 8009a00:	200007dd 	.word	0x200007dd

08009a04 <__sinit>:
 8009a04:	b510      	push	{r4, lr}
 8009a06:	4604      	mov	r4, r0
 8009a08:	f7ff fff0 	bl	80099ec <__sfp_lock_acquire>
 8009a0c:	6a23      	ldr	r3, [r4, #32]
 8009a0e:	b11b      	cbz	r3, 8009a18 <__sinit+0x14>
 8009a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a14:	f7ff bff0 	b.w	80099f8 <__sfp_lock_release>
 8009a18:	4b04      	ldr	r3, [pc, #16]	@ (8009a2c <__sinit+0x28>)
 8009a1a:	6223      	str	r3, [r4, #32]
 8009a1c:	4b04      	ldr	r3, [pc, #16]	@ (8009a30 <__sinit+0x2c>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d1f5      	bne.n	8009a10 <__sinit+0xc>
 8009a24:	f7ff ffc4 	bl	80099b0 <global_stdio_init.part.0>
 8009a28:	e7f2      	b.n	8009a10 <__sinit+0xc>
 8009a2a:	bf00      	nop
 8009a2c:	08009971 	.word	0x08009971
 8009a30:	200007d4 	.word	0x200007d4

08009a34 <_fwalk_sglue>:
 8009a34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a38:	4607      	mov	r7, r0
 8009a3a:	4688      	mov	r8, r1
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	2600      	movs	r6, #0
 8009a40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a44:	f1b9 0901 	subs.w	r9, r9, #1
 8009a48:	d505      	bpl.n	8009a56 <_fwalk_sglue+0x22>
 8009a4a:	6824      	ldr	r4, [r4, #0]
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d1f7      	bne.n	8009a40 <_fwalk_sglue+0xc>
 8009a50:	4630      	mov	r0, r6
 8009a52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a56:	89ab      	ldrh	r3, [r5, #12]
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d907      	bls.n	8009a6c <_fwalk_sglue+0x38>
 8009a5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a60:	3301      	adds	r3, #1
 8009a62:	d003      	beq.n	8009a6c <_fwalk_sglue+0x38>
 8009a64:	4629      	mov	r1, r5
 8009a66:	4638      	mov	r0, r7
 8009a68:	47c0      	blx	r8
 8009a6a:	4306      	orrs	r6, r0
 8009a6c:	3568      	adds	r5, #104	@ 0x68
 8009a6e:	e7e9      	b.n	8009a44 <_fwalk_sglue+0x10>

08009a70 <__sread>:
 8009a70:	b510      	push	{r4, lr}
 8009a72:	460c      	mov	r4, r1
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	f000 f86c 	bl	8009b54 <_read_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	bfab      	itete	ge
 8009a80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a82:	89a3      	ldrhlt	r3, [r4, #12]
 8009a84:	181b      	addge	r3, r3, r0
 8009a86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a8a:	bfac      	ite	ge
 8009a8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a8e:	81a3      	strhlt	r3, [r4, #12]
 8009a90:	bd10      	pop	{r4, pc}

08009a92 <__swrite>:
 8009a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	461f      	mov	r7, r3
 8009a98:	898b      	ldrh	r3, [r1, #12]
 8009a9a:	4605      	mov	r5, r0
 8009a9c:	05db      	lsls	r3, r3, #23
 8009a9e:	460c      	mov	r4, r1
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	d505      	bpl.n	8009ab0 <__swrite+0x1e>
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aac:	f000 f840 	bl	8009b30 <_lseek_r>
 8009ab0:	89a3      	ldrh	r3, [r4, #12]
 8009ab2:	4632      	mov	r2, r6
 8009ab4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ab8:	81a3      	strh	r3, [r4, #12]
 8009aba:	4628      	mov	r0, r5
 8009abc:	463b      	mov	r3, r7
 8009abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac6:	f000 b867 	b.w	8009b98 <_write_r>

08009aca <__sseek>:
 8009aca:	b510      	push	{r4, lr}
 8009acc:	460c      	mov	r4, r1
 8009ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ad2:	f000 f82d 	bl	8009b30 <_lseek_r>
 8009ad6:	1c43      	adds	r3, r0, #1
 8009ad8:	89a3      	ldrh	r3, [r4, #12]
 8009ada:	bf15      	itete	ne
 8009adc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009ade:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ae2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ae6:	81a3      	strheq	r3, [r4, #12]
 8009ae8:	bf18      	it	ne
 8009aea:	81a3      	strhne	r3, [r4, #12]
 8009aec:	bd10      	pop	{r4, pc}

08009aee <__sclose>:
 8009aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009af2:	f000 b80d 	b.w	8009b10 <_close_r>

08009af6 <memset>:
 8009af6:	4603      	mov	r3, r0
 8009af8:	4402      	add	r2, r0
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d100      	bne.n	8009b00 <memset+0xa>
 8009afe:	4770      	bx	lr
 8009b00:	f803 1b01 	strb.w	r1, [r3], #1
 8009b04:	e7f9      	b.n	8009afa <memset+0x4>
	...

08009b08 <_localeconv_r>:
 8009b08:	4800      	ldr	r0, [pc, #0]	@ (8009b0c <_localeconv_r+0x4>)
 8009b0a:	4770      	bx	lr
 8009b0c:	2000021c 	.word	0x2000021c

08009b10 <_close_r>:
 8009b10:	b538      	push	{r3, r4, r5, lr}
 8009b12:	2300      	movs	r3, #0
 8009b14:	4d05      	ldr	r5, [pc, #20]	@ (8009b2c <_close_r+0x1c>)
 8009b16:	4604      	mov	r4, r0
 8009b18:	4608      	mov	r0, r1
 8009b1a:	602b      	str	r3, [r5, #0]
 8009b1c:	f7fa fabf 	bl	800409e <_close>
 8009b20:	1c43      	adds	r3, r0, #1
 8009b22:	d102      	bne.n	8009b2a <_close_r+0x1a>
 8009b24:	682b      	ldr	r3, [r5, #0]
 8009b26:	b103      	cbz	r3, 8009b2a <_close_r+0x1a>
 8009b28:	6023      	str	r3, [r4, #0]
 8009b2a:	bd38      	pop	{r3, r4, r5, pc}
 8009b2c:	200007d8 	.word	0x200007d8

08009b30 <_lseek_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	4611      	mov	r1, r2
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4d05      	ldr	r5, [pc, #20]	@ (8009b50 <_lseek_r+0x20>)
 8009b3c:	602a      	str	r2, [r5, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f7fa fad1 	bl	80040e6 <_lseek>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d102      	bne.n	8009b4e <_lseek_r+0x1e>
 8009b48:	682b      	ldr	r3, [r5, #0]
 8009b4a:	b103      	cbz	r3, 8009b4e <_lseek_r+0x1e>
 8009b4c:	6023      	str	r3, [r4, #0]
 8009b4e:	bd38      	pop	{r3, r4, r5, pc}
 8009b50:	200007d8 	.word	0x200007d8

08009b54 <_read_r>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	4604      	mov	r4, r0
 8009b58:	4608      	mov	r0, r1
 8009b5a:	4611      	mov	r1, r2
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4d05      	ldr	r5, [pc, #20]	@ (8009b74 <_read_r+0x20>)
 8009b60:	602a      	str	r2, [r5, #0]
 8009b62:	461a      	mov	r2, r3
 8009b64:	f7fa fa62 	bl	800402c <_read>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_read_r+0x1e>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_read_r+0x1e>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	200007d8 	.word	0x200007d8

08009b78 <_sbrk_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4d05      	ldr	r5, [pc, #20]	@ (8009b94 <_sbrk_r+0x1c>)
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	602b      	str	r3, [r5, #0]
 8009b84:	f7fa fabc 	bl	8004100 <_sbrk>
 8009b88:	1c43      	adds	r3, r0, #1
 8009b8a:	d102      	bne.n	8009b92 <_sbrk_r+0x1a>
 8009b8c:	682b      	ldr	r3, [r5, #0]
 8009b8e:	b103      	cbz	r3, 8009b92 <_sbrk_r+0x1a>
 8009b90:	6023      	str	r3, [r4, #0]
 8009b92:	bd38      	pop	{r3, r4, r5, pc}
 8009b94:	200007d8 	.word	0x200007d8

08009b98 <_write_r>:
 8009b98:	b538      	push	{r3, r4, r5, lr}
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	4608      	mov	r0, r1
 8009b9e:	4611      	mov	r1, r2
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	4d05      	ldr	r5, [pc, #20]	@ (8009bb8 <_write_r+0x20>)
 8009ba4:	602a      	str	r2, [r5, #0]
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	f7fa fa5d 	bl	8004066 <_write>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_write_r+0x1e>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_write_r+0x1e>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	200007d8 	.word	0x200007d8

08009bbc <__errno>:
 8009bbc:	4b01      	ldr	r3, [pc, #4]	@ (8009bc4 <__errno+0x8>)
 8009bbe:	6818      	ldr	r0, [r3, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	bf00      	nop
 8009bc4:	200000dc 	.word	0x200000dc

08009bc8 <__libc_init_array>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	2600      	movs	r6, #0
 8009bcc:	4d0c      	ldr	r5, [pc, #48]	@ (8009c00 <__libc_init_array+0x38>)
 8009bce:	4c0d      	ldr	r4, [pc, #52]	@ (8009c04 <__libc_init_array+0x3c>)
 8009bd0:	1b64      	subs	r4, r4, r5
 8009bd2:	10a4      	asrs	r4, r4, #2
 8009bd4:	42a6      	cmp	r6, r4
 8009bd6:	d109      	bne.n	8009bec <__libc_init_array+0x24>
 8009bd8:	f001 fe02 	bl	800b7e0 <_init>
 8009bdc:	2600      	movs	r6, #0
 8009bde:	4d0a      	ldr	r5, [pc, #40]	@ (8009c08 <__libc_init_array+0x40>)
 8009be0:	4c0a      	ldr	r4, [pc, #40]	@ (8009c0c <__libc_init_array+0x44>)
 8009be2:	1b64      	subs	r4, r4, r5
 8009be4:	10a4      	asrs	r4, r4, #2
 8009be6:	42a6      	cmp	r6, r4
 8009be8:	d105      	bne.n	8009bf6 <__libc_init_array+0x2e>
 8009bea:	bd70      	pop	{r4, r5, r6, pc}
 8009bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bf0:	4798      	blx	r3
 8009bf2:	3601      	adds	r6, #1
 8009bf4:	e7ee      	b.n	8009bd4 <__libc_init_array+0xc>
 8009bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfa:	4798      	blx	r3
 8009bfc:	3601      	adds	r6, #1
 8009bfe:	e7f2      	b.n	8009be6 <__libc_init_array+0x1e>
 8009c00:	0800bc48 	.word	0x0800bc48
 8009c04:	0800bc48 	.word	0x0800bc48
 8009c08:	0800bc48 	.word	0x0800bc48
 8009c0c:	0800bc54 	.word	0x0800bc54

08009c10 <__retarget_lock_init_recursive>:
 8009c10:	4770      	bx	lr

08009c12 <__retarget_lock_acquire_recursive>:
 8009c12:	4770      	bx	lr

08009c14 <__retarget_lock_release_recursive>:
 8009c14:	4770      	bx	lr

08009c16 <memchr>:
 8009c16:	4603      	mov	r3, r0
 8009c18:	b510      	push	{r4, lr}
 8009c1a:	b2c9      	uxtb	r1, r1
 8009c1c:	4402      	add	r2, r0
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	4618      	mov	r0, r3
 8009c22:	d101      	bne.n	8009c28 <memchr+0x12>
 8009c24:	2000      	movs	r0, #0
 8009c26:	e003      	b.n	8009c30 <memchr+0x1a>
 8009c28:	7804      	ldrb	r4, [r0, #0]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	428c      	cmp	r4, r1
 8009c2e:	d1f6      	bne.n	8009c1e <memchr+0x8>
 8009c30:	bd10      	pop	{r4, pc}

08009c32 <quorem>:
 8009c32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c36:	6903      	ldr	r3, [r0, #16]
 8009c38:	690c      	ldr	r4, [r1, #16]
 8009c3a:	4607      	mov	r7, r0
 8009c3c:	42a3      	cmp	r3, r4
 8009c3e:	db7e      	blt.n	8009d3e <quorem+0x10c>
 8009c40:	3c01      	subs	r4, #1
 8009c42:	00a3      	lsls	r3, r4, #2
 8009c44:	f100 0514 	add.w	r5, r0, #20
 8009c48:	f101 0814 	add.w	r8, r1, #20
 8009c4c:	9300      	str	r3, [sp, #0]
 8009c4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009c52:	9301      	str	r3, [sp, #4]
 8009c54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009c58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	fbb2 f6f3 	udiv	r6, r2, r3
 8009c64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009c68:	d32e      	bcc.n	8009cc8 <quorem+0x96>
 8009c6a:	f04f 0a00 	mov.w	sl, #0
 8009c6e:	46c4      	mov	ip, r8
 8009c70:	46ae      	mov	lr, r5
 8009c72:	46d3      	mov	fp, sl
 8009c74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c78:	b298      	uxth	r0, r3
 8009c7a:	fb06 a000 	mla	r0, r6, r0, sl
 8009c7e:	0c1b      	lsrs	r3, r3, #16
 8009c80:	0c02      	lsrs	r2, r0, #16
 8009c82:	fb06 2303 	mla	r3, r6, r3, r2
 8009c86:	f8de 2000 	ldr.w	r2, [lr]
 8009c8a:	b280      	uxth	r0, r0
 8009c8c:	b292      	uxth	r2, r2
 8009c8e:	1a12      	subs	r2, r2, r0
 8009c90:	445a      	add	r2, fp
 8009c92:	f8de 0000 	ldr.w	r0, [lr]
 8009c96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ca0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009ca4:	b292      	uxth	r2, r2
 8009ca6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009caa:	45e1      	cmp	r9, ip
 8009cac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009cb0:	f84e 2b04 	str.w	r2, [lr], #4
 8009cb4:	d2de      	bcs.n	8009c74 <quorem+0x42>
 8009cb6:	9b00      	ldr	r3, [sp, #0]
 8009cb8:	58eb      	ldr	r3, [r5, r3]
 8009cba:	b92b      	cbnz	r3, 8009cc8 <quorem+0x96>
 8009cbc:	9b01      	ldr	r3, [sp, #4]
 8009cbe:	3b04      	subs	r3, #4
 8009cc0:	429d      	cmp	r5, r3
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	d32f      	bcc.n	8009d26 <quorem+0xf4>
 8009cc6:	613c      	str	r4, [r7, #16]
 8009cc8:	4638      	mov	r0, r7
 8009cca:	f001 f8c5 	bl	800ae58 <__mcmp>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	db25      	blt.n	8009d1e <quorem+0xec>
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	2000      	movs	r0, #0
 8009cd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8009cda:	f8d1 c000 	ldr.w	ip, [r1]
 8009cde:	fa1f fe82 	uxth.w	lr, r2
 8009ce2:	fa1f f38c 	uxth.w	r3, ip
 8009ce6:	eba3 030e 	sub.w	r3, r3, lr
 8009cea:	4403      	add	r3, r0
 8009cec:	0c12      	lsrs	r2, r2, #16
 8009cee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009cf2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009cfc:	45c1      	cmp	r9, r8
 8009cfe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009d02:	f841 3b04 	str.w	r3, [r1], #4
 8009d06:	d2e6      	bcs.n	8009cd6 <quorem+0xa4>
 8009d08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009d0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009d10:	b922      	cbnz	r2, 8009d1c <quorem+0xea>
 8009d12:	3b04      	subs	r3, #4
 8009d14:	429d      	cmp	r5, r3
 8009d16:	461a      	mov	r2, r3
 8009d18:	d30b      	bcc.n	8009d32 <quorem+0x100>
 8009d1a:	613c      	str	r4, [r7, #16]
 8009d1c:	3601      	adds	r6, #1
 8009d1e:	4630      	mov	r0, r6
 8009d20:	b003      	add	sp, #12
 8009d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d26:	6812      	ldr	r2, [r2, #0]
 8009d28:	3b04      	subs	r3, #4
 8009d2a:	2a00      	cmp	r2, #0
 8009d2c:	d1cb      	bne.n	8009cc6 <quorem+0x94>
 8009d2e:	3c01      	subs	r4, #1
 8009d30:	e7c6      	b.n	8009cc0 <quorem+0x8e>
 8009d32:	6812      	ldr	r2, [r2, #0]
 8009d34:	3b04      	subs	r3, #4
 8009d36:	2a00      	cmp	r2, #0
 8009d38:	d1ef      	bne.n	8009d1a <quorem+0xe8>
 8009d3a:	3c01      	subs	r4, #1
 8009d3c:	e7ea      	b.n	8009d14 <quorem+0xe2>
 8009d3e:	2000      	movs	r0, #0
 8009d40:	e7ee      	b.n	8009d20 <quorem+0xee>
 8009d42:	0000      	movs	r0, r0
 8009d44:	0000      	movs	r0, r0
	...

08009d48 <_dtoa_r>:
 8009d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	461d      	mov	r5, r3
 8009d50:	69c7      	ldr	r7, [r0, #28]
 8009d52:	b097      	sub	sp, #92	@ 0x5c
 8009d54:	4683      	mov	fp, r0
 8009d56:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009d5a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009d5c:	b97f      	cbnz	r7, 8009d7e <_dtoa_r+0x36>
 8009d5e:	2010      	movs	r0, #16
 8009d60:	f7ff f8aa 	bl	8008eb8 <malloc>
 8009d64:	4602      	mov	r2, r0
 8009d66:	f8cb 001c 	str.w	r0, [fp, #28]
 8009d6a:	b920      	cbnz	r0, 8009d76 <_dtoa_r+0x2e>
 8009d6c:	21ef      	movs	r1, #239	@ 0xef
 8009d6e:	4ba8      	ldr	r3, [pc, #672]	@ (800a010 <_dtoa_r+0x2c8>)
 8009d70:	48a8      	ldr	r0, [pc, #672]	@ (800a014 <_dtoa_r+0x2cc>)
 8009d72:	f001 fa2f 	bl	800b1d4 <__assert_func>
 8009d76:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009d7a:	6007      	str	r7, [r0, #0]
 8009d7c:	60c7      	str	r7, [r0, #12]
 8009d7e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d82:	6819      	ldr	r1, [r3, #0]
 8009d84:	b159      	cbz	r1, 8009d9e <_dtoa_r+0x56>
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	2301      	movs	r3, #1
 8009d8a:	4093      	lsls	r3, r2
 8009d8c:	604a      	str	r2, [r1, #4]
 8009d8e:	608b      	str	r3, [r1, #8]
 8009d90:	4658      	mov	r0, fp
 8009d92:	f000 fe29 	bl	800a9e8 <_Bfree>
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009d9c:	601a      	str	r2, [r3, #0]
 8009d9e:	1e2b      	subs	r3, r5, #0
 8009da0:	bfaf      	iteee	ge
 8009da2:	2300      	movge	r3, #0
 8009da4:	2201      	movlt	r2, #1
 8009da6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009daa:	9303      	strlt	r3, [sp, #12]
 8009dac:	bfa8      	it	ge
 8009dae:	6033      	strge	r3, [r6, #0]
 8009db0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009db4:	4b98      	ldr	r3, [pc, #608]	@ (800a018 <_dtoa_r+0x2d0>)
 8009db6:	bfb8      	it	lt
 8009db8:	6032      	strlt	r2, [r6, #0]
 8009dba:	ea33 0308 	bics.w	r3, r3, r8
 8009dbe:	d112      	bne.n	8009de6 <_dtoa_r+0x9e>
 8009dc0:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009dc4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009dc6:	6013      	str	r3, [r2, #0]
 8009dc8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009dcc:	4323      	orrs	r3, r4
 8009dce:	f000 8550 	beq.w	800a872 <_dtoa_r+0xb2a>
 8009dd2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009dd4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a01c <_dtoa_r+0x2d4>
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	f000 8552 	beq.w	800a882 <_dtoa_r+0xb3a>
 8009dde:	f10a 0303 	add.w	r3, sl, #3
 8009de2:	f000 bd4c 	b.w	800a87e <_dtoa_r+0xb36>
 8009de6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009dea:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009dee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009df2:	2200      	movs	r2, #0
 8009df4:	2300      	movs	r3, #0
 8009df6:	f7f6 fdd7 	bl	80009a8 <__aeabi_dcmpeq>
 8009dfa:	4607      	mov	r7, r0
 8009dfc:	b158      	cbz	r0, 8009e16 <_dtoa_r+0xce>
 8009dfe:	2301      	movs	r3, #1
 8009e00:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009e02:	6013      	str	r3, [r2, #0]
 8009e04:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009e06:	b113      	cbz	r3, 8009e0e <_dtoa_r+0xc6>
 8009e08:	4b85      	ldr	r3, [pc, #532]	@ (800a020 <_dtoa_r+0x2d8>)
 8009e0a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009e0c:	6013      	str	r3, [r2, #0]
 8009e0e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a024 <_dtoa_r+0x2dc>
 8009e12:	f000 bd36 	b.w	800a882 <_dtoa_r+0xb3a>
 8009e16:	ab14      	add	r3, sp, #80	@ 0x50
 8009e18:	9301      	str	r3, [sp, #4]
 8009e1a:	ab15      	add	r3, sp, #84	@ 0x54
 8009e1c:	9300      	str	r3, [sp, #0]
 8009e1e:	4658      	mov	r0, fp
 8009e20:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009e24:	f001 f8c8 	bl	800afb8 <__d2b>
 8009e28:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009e2c:	4681      	mov	r9, r0
 8009e2e:	2e00      	cmp	r6, #0
 8009e30:	d077      	beq.n	8009f22 <_dtoa_r+0x1da>
 8009e32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e38:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009e3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e40:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009e44:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009e48:	9712      	str	r7, [sp, #72]	@ 0x48
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4b76      	ldr	r3, [pc, #472]	@ (800a028 <_dtoa_r+0x2e0>)
 8009e50:	f7f6 f98a 	bl	8000168 <__aeabi_dsub>
 8009e54:	a368      	add	r3, pc, #416	@ (adr r3, 8009ff8 <_dtoa_r+0x2b0>)
 8009e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e5a:	f7f6 fb3d 	bl	80004d8 <__aeabi_dmul>
 8009e5e:	a368      	add	r3, pc, #416	@ (adr r3, 800a000 <_dtoa_r+0x2b8>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 f982 	bl	800016c <__adddf3>
 8009e68:	4604      	mov	r4, r0
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	460d      	mov	r5, r1
 8009e6e:	f7f6 fac9 	bl	8000404 <__aeabi_i2d>
 8009e72:	a365      	add	r3, pc, #404	@ (adr r3, 800a008 <_dtoa_r+0x2c0>)
 8009e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e78:	f7f6 fb2e 	bl	80004d8 <__aeabi_dmul>
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4620      	mov	r0, r4
 8009e82:	4629      	mov	r1, r5
 8009e84:	f7f6 f972 	bl	800016c <__adddf3>
 8009e88:	4604      	mov	r4, r0
 8009e8a:	460d      	mov	r5, r1
 8009e8c:	f7f6 fdd4 	bl	8000a38 <__aeabi_d2iz>
 8009e90:	2200      	movs	r2, #0
 8009e92:	4607      	mov	r7, r0
 8009e94:	2300      	movs	r3, #0
 8009e96:	4620      	mov	r0, r4
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7f6 fd8f 	bl	80009bc <__aeabi_dcmplt>
 8009e9e:	b140      	cbz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	f7f6 faaf 	bl	8000404 <__aeabi_i2d>
 8009ea6:	4622      	mov	r2, r4
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	f7f6 fd7d 	bl	80009a8 <__aeabi_dcmpeq>
 8009eae:	b900      	cbnz	r0, 8009eb2 <_dtoa_r+0x16a>
 8009eb0:	3f01      	subs	r7, #1
 8009eb2:	2f16      	cmp	r7, #22
 8009eb4:	d853      	bhi.n	8009f5e <_dtoa_r+0x216>
 8009eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009eba:	4b5c      	ldr	r3, [pc, #368]	@ (800a02c <_dtoa_r+0x2e4>)
 8009ebc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec4:	f7f6 fd7a 	bl	80009bc <__aeabi_dcmplt>
 8009ec8:	2800      	cmp	r0, #0
 8009eca:	d04a      	beq.n	8009f62 <_dtoa_r+0x21a>
 8009ecc:	2300      	movs	r3, #0
 8009ece:	3f01      	subs	r7, #1
 8009ed0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ed2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009ed4:	1b9b      	subs	r3, r3, r6
 8009ed6:	1e5a      	subs	r2, r3, #1
 8009ed8:	bf46      	itte	mi
 8009eda:	f1c3 0801 	rsbmi	r8, r3, #1
 8009ede:	2300      	movmi	r3, #0
 8009ee0:	f04f 0800 	movpl.w	r8, #0
 8009ee4:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ee6:	bf48      	it	mi
 8009ee8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009eea:	2f00      	cmp	r7, #0
 8009eec:	db3b      	blt.n	8009f66 <_dtoa_r+0x21e>
 8009eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef0:	970e      	str	r7, [sp, #56]	@ 0x38
 8009ef2:	443b      	add	r3, r7
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009efa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009efc:	2b09      	cmp	r3, #9
 8009efe:	d866      	bhi.n	8009fce <_dtoa_r+0x286>
 8009f00:	2b05      	cmp	r3, #5
 8009f02:	bfc4      	itt	gt
 8009f04:	3b04      	subgt	r3, #4
 8009f06:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009f08:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009f0a:	bfc8      	it	gt
 8009f0c:	2400      	movgt	r4, #0
 8009f0e:	f1a3 0302 	sub.w	r3, r3, #2
 8009f12:	bfd8      	it	le
 8009f14:	2401      	movle	r4, #1
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d864      	bhi.n	8009fe4 <_dtoa_r+0x29c>
 8009f1a:	e8df f003 	tbb	[pc, r3]
 8009f1e:	382b      	.short	0x382b
 8009f20:	5636      	.short	0x5636
 8009f22:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009f26:	441e      	add	r6, r3
 8009f28:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009f2c:	2b20      	cmp	r3, #32
 8009f2e:	bfc1      	itttt	gt
 8009f30:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009f34:	fa08 f803 	lslgt.w	r8, r8, r3
 8009f38:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009f3c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009f40:	bfd6      	itet	le
 8009f42:	f1c3 0320 	rsble	r3, r3, #32
 8009f46:	ea48 0003 	orrgt.w	r0, r8, r3
 8009f4a:	fa04 f003 	lslle.w	r0, r4, r3
 8009f4e:	f7f6 fa49 	bl	80003e4 <__aeabi_ui2d>
 8009f52:	2201      	movs	r2, #1
 8009f54:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009f58:	3e01      	subs	r6, #1
 8009f5a:	9212      	str	r2, [sp, #72]	@ 0x48
 8009f5c:	e775      	b.n	8009e4a <_dtoa_r+0x102>
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7b6      	b.n	8009ed0 <_dtoa_r+0x188>
 8009f62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009f64:	e7b5      	b.n	8009ed2 <_dtoa_r+0x18a>
 8009f66:	427b      	negs	r3, r7
 8009f68:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	eba8 0807 	sub.w	r8, r8, r7
 8009f70:	930e      	str	r3, [sp, #56]	@ 0x38
 8009f72:	e7c2      	b.n	8009efa <_dtoa_r+0x1b2>
 8009f74:	2300      	movs	r3, #0
 8009f76:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f78:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	dc35      	bgt.n	8009fea <_dtoa_r+0x2a2>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	461a      	mov	r2, r3
 8009f82:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009f86:	9221      	str	r2, [sp, #132]	@ 0x84
 8009f88:	e00b      	b.n	8009fa2 <_dtoa_r+0x25a>
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	e7f3      	b.n	8009f76 <_dtoa_r+0x22e>
 8009f8e:	2300      	movs	r3, #0
 8009f90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009f92:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f94:	18fb      	adds	r3, r7, r3
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	3301      	adds	r3, #1
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	9307      	str	r3, [sp, #28]
 8009f9e:	bfb8      	it	lt
 8009fa0:	2301      	movlt	r3, #1
 8009fa2:	2100      	movs	r1, #0
 8009fa4:	2204      	movs	r2, #4
 8009fa6:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009faa:	f102 0514 	add.w	r5, r2, #20
 8009fae:	429d      	cmp	r5, r3
 8009fb0:	d91f      	bls.n	8009ff2 <_dtoa_r+0x2aa>
 8009fb2:	6041      	str	r1, [r0, #4]
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f000 fcd7 	bl	800a968 <_Balloc>
 8009fba:	4682      	mov	sl, r0
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d139      	bne.n	800a034 <_dtoa_r+0x2ec>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	f240 11af 	movw	r1, #431	@ 0x1af
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	@ (800a030 <_dtoa_r+0x2e8>)
 8009fc8:	e6d2      	b.n	8009d70 <_dtoa_r+0x28>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e7e0      	b.n	8009f90 <_dtoa_r+0x248>
 8009fce:	2401      	movs	r4, #1
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009fd4:	9320      	str	r3, [sp, #128]	@ 0x80
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8009fda:	2200      	movs	r2, #0
 8009fdc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009fe0:	2312      	movs	r3, #18
 8009fe2:	e7d0      	b.n	8009f86 <_dtoa_r+0x23e>
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009fe8:	e7f5      	b.n	8009fd6 <_dtoa_r+0x28e>
 8009fea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009fec:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ff0:	e7d7      	b.n	8009fa2 <_dtoa_r+0x25a>
 8009ff2:	3101      	adds	r1, #1
 8009ff4:	0052      	lsls	r2, r2, #1
 8009ff6:	e7d8      	b.n	8009faa <_dtoa_r+0x262>
 8009ff8:	636f4361 	.word	0x636f4361
 8009ffc:	3fd287a7 	.word	0x3fd287a7
 800a000:	8b60c8b3 	.word	0x8b60c8b3
 800a004:	3fc68a28 	.word	0x3fc68a28
 800a008:	509f79fb 	.word	0x509f79fb
 800a00c:	3fd34413 	.word	0x3fd34413
 800a010:	0800b911 	.word	0x0800b911
 800a014:	0800b928 	.word	0x0800b928
 800a018:	7ff00000 	.word	0x7ff00000
 800a01c:	0800b90d 	.word	0x0800b90d
 800a020:	0800b8e1 	.word	0x0800b8e1
 800a024:	0800b8e0 	.word	0x0800b8e0
 800a028:	3ff80000 	.word	0x3ff80000
 800a02c:	0800ba20 	.word	0x0800ba20
 800a030:	0800b980 	.word	0x0800b980
 800a034:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a038:	6018      	str	r0, [r3, #0]
 800a03a:	9b07      	ldr	r3, [sp, #28]
 800a03c:	2b0e      	cmp	r3, #14
 800a03e:	f200 80a4 	bhi.w	800a18a <_dtoa_r+0x442>
 800a042:	2c00      	cmp	r4, #0
 800a044:	f000 80a1 	beq.w	800a18a <_dtoa_r+0x442>
 800a048:	2f00      	cmp	r7, #0
 800a04a:	dd33      	ble.n	800a0b4 <_dtoa_r+0x36c>
 800a04c:	4b86      	ldr	r3, [pc, #536]	@ (800a268 <_dtoa_r+0x520>)
 800a04e:	f007 020f 	and.w	r2, r7, #15
 800a052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a056:	05f8      	lsls	r0, r7, #23
 800a058:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a05c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a060:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a064:	d516      	bpl.n	800a094 <_dtoa_r+0x34c>
 800a066:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a06a:	4b80      	ldr	r3, [pc, #512]	@ (800a26c <_dtoa_r+0x524>)
 800a06c:	2603      	movs	r6, #3
 800a06e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a072:	f7f6 fb5b 	bl	800072c <__aeabi_ddiv>
 800a076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a07a:	f004 040f 	and.w	r4, r4, #15
 800a07e:	4d7b      	ldr	r5, [pc, #492]	@ (800a26c <_dtoa_r+0x524>)
 800a080:	b954      	cbnz	r4, 800a098 <_dtoa_r+0x350>
 800a082:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a086:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a08a:	f7f6 fb4f 	bl	800072c <__aeabi_ddiv>
 800a08e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a092:	e028      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a094:	2602      	movs	r6, #2
 800a096:	e7f2      	b.n	800a07e <_dtoa_r+0x336>
 800a098:	07e1      	lsls	r1, r4, #31
 800a09a:	d508      	bpl.n	800a0ae <_dtoa_r+0x366>
 800a09c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a0a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a0a4:	f7f6 fa18 	bl	80004d8 <__aeabi_dmul>
 800a0a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a0ac:	3601      	adds	r6, #1
 800a0ae:	1064      	asrs	r4, r4, #1
 800a0b0:	3508      	adds	r5, #8
 800a0b2:	e7e5      	b.n	800a080 <_dtoa_r+0x338>
 800a0b4:	f000 80d2 	beq.w	800a25c <_dtoa_r+0x514>
 800a0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a0bc:	427c      	negs	r4, r7
 800a0be:	4b6a      	ldr	r3, [pc, #424]	@ (800a268 <_dtoa_r+0x520>)
 800a0c0:	f004 020f 	and.w	r2, r4, #15
 800a0c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0cc:	f7f6 fa04 	bl	80004d8 <__aeabi_dmul>
 800a0d0:	2602      	movs	r6, #2
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a0d8:	4d64      	ldr	r5, [pc, #400]	@ (800a26c <_dtoa_r+0x524>)
 800a0da:	1124      	asrs	r4, r4, #4
 800a0dc:	2c00      	cmp	r4, #0
 800a0de:	f040 80b2 	bne.w	800a246 <_dtoa_r+0x4fe>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1d3      	bne.n	800a08e <_dtoa_r+0x346>
 800a0e6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a0ea:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	f000 80b7 	beq.w	800a260 <_dtoa_r+0x518>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	4b5d      	ldr	r3, [pc, #372]	@ (800a270 <_dtoa_r+0x528>)
 800a0fa:	f7f6 fc5f 	bl	80009bc <__aeabi_dcmplt>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	f000 80ae 	beq.w	800a260 <_dtoa_r+0x518>
 800a104:	9b07      	ldr	r3, [sp, #28]
 800a106:	2b00      	cmp	r3, #0
 800a108:	f000 80aa 	beq.w	800a260 <_dtoa_r+0x518>
 800a10c:	9b08      	ldr	r3, [sp, #32]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	dd37      	ble.n	800a182 <_dtoa_r+0x43a>
 800a112:	1e7b      	subs	r3, r7, #1
 800a114:	4620      	mov	r0, r4
 800a116:	9304      	str	r3, [sp, #16]
 800a118:	2200      	movs	r2, #0
 800a11a:	4629      	mov	r1, r5
 800a11c:	4b55      	ldr	r3, [pc, #340]	@ (800a274 <_dtoa_r+0x52c>)
 800a11e:	f7f6 f9db 	bl	80004d8 <__aeabi_dmul>
 800a122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a126:	9c08      	ldr	r4, [sp, #32]
 800a128:	3601      	adds	r6, #1
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7f6 f96a 	bl	8000404 <__aeabi_i2d>
 800a130:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a134:	f7f6 f9d0 	bl	80004d8 <__aeabi_dmul>
 800a138:	2200      	movs	r2, #0
 800a13a:	4b4f      	ldr	r3, [pc, #316]	@ (800a278 <_dtoa_r+0x530>)
 800a13c:	f7f6 f816 	bl	800016c <__adddf3>
 800a140:	4605      	mov	r5, r0
 800a142:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a146:	2c00      	cmp	r4, #0
 800a148:	f040 809a 	bne.w	800a280 <_dtoa_r+0x538>
 800a14c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a150:	2200      	movs	r2, #0
 800a152:	4b4a      	ldr	r3, [pc, #296]	@ (800a27c <_dtoa_r+0x534>)
 800a154:	f7f6 f808 	bl	8000168 <__aeabi_dsub>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a160:	462a      	mov	r2, r5
 800a162:	4633      	mov	r3, r6
 800a164:	f7f6 fc48 	bl	80009f8 <__aeabi_dcmpgt>
 800a168:	2800      	cmp	r0, #0
 800a16a:	f040 828e 	bne.w	800a68a <_dtoa_r+0x942>
 800a16e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a172:	462a      	mov	r2, r5
 800a174:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a178:	f7f6 fc20 	bl	80009bc <__aeabi_dcmplt>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f040 8127 	bne.w	800a3d0 <_dtoa_r+0x688>
 800a182:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a186:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a18a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f2c0 8163 	blt.w	800a458 <_dtoa_r+0x710>
 800a192:	2f0e      	cmp	r7, #14
 800a194:	f300 8160 	bgt.w	800a458 <_dtoa_r+0x710>
 800a198:	4b33      	ldr	r3, [pc, #204]	@ (800a268 <_dtoa_r+0x520>)
 800a19a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a19e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	da03      	bge.n	800a1b4 <_dtoa_r+0x46c>
 800a1ac:	9b07      	ldr	r3, [sp, #28]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f340 8100 	ble.w	800a3b4 <_dtoa_r+0x66c>
 800a1b4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a1b8:	4656      	mov	r6, sl
 800a1ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1be:	4620      	mov	r0, r4
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7f6 fab3 	bl	800072c <__aeabi_ddiv>
 800a1c6:	f7f6 fc37 	bl	8000a38 <__aeabi_d2iz>
 800a1ca:	4680      	mov	r8, r0
 800a1cc:	f7f6 f91a 	bl	8000404 <__aeabi_i2d>
 800a1d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1d4:	f7f6 f980 	bl	80004d8 <__aeabi_dmul>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	460b      	mov	r3, r1
 800a1dc:	4620      	mov	r0, r4
 800a1de:	4629      	mov	r1, r5
 800a1e0:	f7f5 ffc2 	bl	8000168 <__aeabi_dsub>
 800a1e4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a1e8:	9d07      	ldr	r5, [sp, #28]
 800a1ea:	f806 4b01 	strb.w	r4, [r6], #1
 800a1ee:	eba6 040a 	sub.w	r4, r6, sl
 800a1f2:	42a5      	cmp	r5, r4
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	f040 8116 	bne.w	800a428 <_dtoa_r+0x6e0>
 800a1fc:	f7f5 ffb6 	bl	800016c <__adddf3>
 800a200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a204:	4604      	mov	r4, r0
 800a206:	460d      	mov	r5, r1
 800a208:	f7f6 fbf6 	bl	80009f8 <__aeabi_dcmpgt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f040 80f8 	bne.w	800a402 <_dtoa_r+0x6ba>
 800a212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a216:	4620      	mov	r0, r4
 800a218:	4629      	mov	r1, r5
 800a21a:	f7f6 fbc5 	bl	80009a8 <__aeabi_dcmpeq>
 800a21e:	b118      	cbz	r0, 800a228 <_dtoa_r+0x4e0>
 800a220:	f018 0f01 	tst.w	r8, #1
 800a224:	f040 80ed 	bne.w	800a402 <_dtoa_r+0x6ba>
 800a228:	4649      	mov	r1, r9
 800a22a:	4658      	mov	r0, fp
 800a22c:	f000 fbdc 	bl	800a9e8 <_Bfree>
 800a230:	2300      	movs	r3, #0
 800a232:	7033      	strb	r3, [r6, #0]
 800a234:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a236:	3701      	adds	r7, #1
 800a238:	601f      	str	r7, [r3, #0]
 800a23a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 8320 	beq.w	800a882 <_dtoa_r+0xb3a>
 800a242:	601e      	str	r6, [r3, #0]
 800a244:	e31d      	b.n	800a882 <_dtoa_r+0xb3a>
 800a246:	07e2      	lsls	r2, r4, #31
 800a248:	d505      	bpl.n	800a256 <_dtoa_r+0x50e>
 800a24a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a24e:	f7f6 f943 	bl	80004d8 <__aeabi_dmul>
 800a252:	2301      	movs	r3, #1
 800a254:	3601      	adds	r6, #1
 800a256:	1064      	asrs	r4, r4, #1
 800a258:	3508      	adds	r5, #8
 800a25a:	e73f      	b.n	800a0dc <_dtoa_r+0x394>
 800a25c:	2602      	movs	r6, #2
 800a25e:	e742      	b.n	800a0e6 <_dtoa_r+0x39e>
 800a260:	9c07      	ldr	r4, [sp, #28]
 800a262:	9704      	str	r7, [sp, #16]
 800a264:	e761      	b.n	800a12a <_dtoa_r+0x3e2>
 800a266:	bf00      	nop
 800a268:	0800ba20 	.word	0x0800ba20
 800a26c:	0800b9f8 	.word	0x0800b9f8
 800a270:	3ff00000 	.word	0x3ff00000
 800a274:	40240000 	.word	0x40240000
 800a278:	401c0000 	.word	0x401c0000
 800a27c:	40140000 	.word	0x40140000
 800a280:	4b70      	ldr	r3, [pc, #448]	@ (800a444 <_dtoa_r+0x6fc>)
 800a282:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a284:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a288:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a28c:	4454      	add	r4, sl
 800a28e:	2900      	cmp	r1, #0
 800a290:	d045      	beq.n	800a31e <_dtoa_r+0x5d6>
 800a292:	2000      	movs	r0, #0
 800a294:	496c      	ldr	r1, [pc, #432]	@ (800a448 <_dtoa_r+0x700>)
 800a296:	f7f6 fa49 	bl	800072c <__aeabi_ddiv>
 800a29a:	4633      	mov	r3, r6
 800a29c:	462a      	mov	r2, r5
 800a29e:	f7f5 ff63 	bl	8000168 <__aeabi_dsub>
 800a2a2:	4656      	mov	r6, sl
 800a2a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a2a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ac:	f7f6 fbc4 	bl	8000a38 <__aeabi_d2iz>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	f7f6 f8a7 	bl	8000404 <__aeabi_i2d>
 800a2b6:	4602      	mov	r2, r0
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2be:	f7f5 ff53 	bl	8000168 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	3530      	adds	r5, #48	@ 0x30
 800a2c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2d0:	f806 5b01 	strb.w	r5, [r6], #1
 800a2d4:	f7f6 fb72 	bl	80009bc <__aeabi_dcmplt>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	d163      	bne.n	800a3a4 <_dtoa_r+0x65c>
 800a2dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	495a      	ldr	r1, [pc, #360]	@ (800a44c <_dtoa_r+0x704>)
 800a2e4:	f7f5 ff40 	bl	8000168 <__aeabi_dsub>
 800a2e8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a2ec:	f7f6 fb66 	bl	80009bc <__aeabi_dcmplt>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f040 8087 	bne.w	800a404 <_dtoa_r+0x6bc>
 800a2f6:	42a6      	cmp	r6, r4
 800a2f8:	f43f af43 	beq.w	800a182 <_dtoa_r+0x43a>
 800a2fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a300:	2200      	movs	r2, #0
 800a302:	4b53      	ldr	r3, [pc, #332]	@ (800a450 <_dtoa_r+0x708>)
 800a304:	f7f6 f8e8 	bl	80004d8 <__aeabi_dmul>
 800a308:	2200      	movs	r2, #0
 800a30a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a312:	4b4f      	ldr	r3, [pc, #316]	@ (800a450 <_dtoa_r+0x708>)
 800a314:	f7f6 f8e0 	bl	80004d8 <__aeabi_dmul>
 800a318:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a31c:	e7c4      	b.n	800a2a8 <_dtoa_r+0x560>
 800a31e:	4631      	mov	r1, r6
 800a320:	4628      	mov	r0, r5
 800a322:	f7f6 f8d9 	bl	80004d8 <__aeabi_dmul>
 800a326:	4656      	mov	r6, sl
 800a328:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a32c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a332:	f7f6 fb81 	bl	8000a38 <__aeabi_d2iz>
 800a336:	4605      	mov	r5, r0
 800a338:	f7f6 f864 	bl	8000404 <__aeabi_i2d>
 800a33c:	4602      	mov	r2, r0
 800a33e:	460b      	mov	r3, r1
 800a340:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a344:	f7f5 ff10 	bl	8000168 <__aeabi_dsub>
 800a348:	4602      	mov	r2, r0
 800a34a:	460b      	mov	r3, r1
 800a34c:	3530      	adds	r5, #48	@ 0x30
 800a34e:	f806 5b01 	strb.w	r5, [r6], #1
 800a352:	42a6      	cmp	r6, r4
 800a354:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a358:	f04f 0200 	mov.w	r2, #0
 800a35c:	d124      	bne.n	800a3a8 <_dtoa_r+0x660>
 800a35e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a362:	4b39      	ldr	r3, [pc, #228]	@ (800a448 <_dtoa_r+0x700>)
 800a364:	f7f5 ff02 	bl	800016c <__adddf3>
 800a368:	4602      	mov	r2, r0
 800a36a:	460b      	mov	r3, r1
 800a36c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a370:	f7f6 fb42 	bl	80009f8 <__aeabi_dcmpgt>
 800a374:	2800      	cmp	r0, #0
 800a376:	d145      	bne.n	800a404 <_dtoa_r+0x6bc>
 800a378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a37c:	2000      	movs	r0, #0
 800a37e:	4932      	ldr	r1, [pc, #200]	@ (800a448 <_dtoa_r+0x700>)
 800a380:	f7f5 fef2 	bl	8000168 <__aeabi_dsub>
 800a384:	4602      	mov	r2, r0
 800a386:	460b      	mov	r3, r1
 800a388:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a38c:	f7f6 fb16 	bl	80009bc <__aeabi_dcmplt>
 800a390:	2800      	cmp	r0, #0
 800a392:	f43f aef6 	beq.w	800a182 <_dtoa_r+0x43a>
 800a396:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a398:	1e73      	subs	r3, r6, #1
 800a39a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a39c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a3a0:	2b30      	cmp	r3, #48	@ 0x30
 800a3a2:	d0f8      	beq.n	800a396 <_dtoa_r+0x64e>
 800a3a4:	9f04      	ldr	r7, [sp, #16]
 800a3a6:	e73f      	b.n	800a228 <_dtoa_r+0x4e0>
 800a3a8:	4b29      	ldr	r3, [pc, #164]	@ (800a450 <_dtoa_r+0x708>)
 800a3aa:	f7f6 f895 	bl	80004d8 <__aeabi_dmul>
 800a3ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3b2:	e7bc      	b.n	800a32e <_dtoa_r+0x5e6>
 800a3b4:	d10c      	bne.n	800a3d0 <_dtoa_r+0x688>
 800a3b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4b25      	ldr	r3, [pc, #148]	@ (800a454 <_dtoa_r+0x70c>)
 800a3be:	f7f6 f88b 	bl	80004d8 <__aeabi_dmul>
 800a3c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c6:	f7f6 fb0d 	bl	80009e4 <__aeabi_dcmpge>
 800a3ca:	2800      	cmp	r0, #0
 800a3cc:	f000 815b 	beq.w	800a686 <_dtoa_r+0x93e>
 800a3d0:	2400      	movs	r4, #0
 800a3d2:	4625      	mov	r5, r4
 800a3d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3d6:	4656      	mov	r6, sl
 800a3d8:	43db      	mvns	r3, r3
 800a3da:	9304      	str	r3, [sp, #16]
 800a3dc:	2700      	movs	r7, #0
 800a3de:	4621      	mov	r1, r4
 800a3e0:	4658      	mov	r0, fp
 800a3e2:	f000 fb01 	bl	800a9e8 <_Bfree>
 800a3e6:	2d00      	cmp	r5, #0
 800a3e8:	d0dc      	beq.n	800a3a4 <_dtoa_r+0x65c>
 800a3ea:	b12f      	cbz	r7, 800a3f8 <_dtoa_r+0x6b0>
 800a3ec:	42af      	cmp	r7, r5
 800a3ee:	d003      	beq.n	800a3f8 <_dtoa_r+0x6b0>
 800a3f0:	4639      	mov	r1, r7
 800a3f2:	4658      	mov	r0, fp
 800a3f4:	f000 faf8 	bl	800a9e8 <_Bfree>
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4658      	mov	r0, fp
 800a3fc:	f000 faf4 	bl	800a9e8 <_Bfree>
 800a400:	e7d0      	b.n	800a3a4 <_dtoa_r+0x65c>
 800a402:	9704      	str	r7, [sp, #16]
 800a404:	4633      	mov	r3, r6
 800a406:	461e      	mov	r6, r3
 800a408:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a40c:	2a39      	cmp	r2, #57	@ 0x39
 800a40e:	d107      	bne.n	800a420 <_dtoa_r+0x6d8>
 800a410:	459a      	cmp	sl, r3
 800a412:	d1f8      	bne.n	800a406 <_dtoa_r+0x6be>
 800a414:	9a04      	ldr	r2, [sp, #16]
 800a416:	3201      	adds	r2, #1
 800a418:	9204      	str	r2, [sp, #16]
 800a41a:	2230      	movs	r2, #48	@ 0x30
 800a41c:	f88a 2000 	strb.w	r2, [sl]
 800a420:	781a      	ldrb	r2, [r3, #0]
 800a422:	3201      	adds	r2, #1
 800a424:	701a      	strb	r2, [r3, #0]
 800a426:	e7bd      	b.n	800a3a4 <_dtoa_r+0x65c>
 800a428:	2200      	movs	r2, #0
 800a42a:	4b09      	ldr	r3, [pc, #36]	@ (800a450 <_dtoa_r+0x708>)
 800a42c:	f7f6 f854 	bl	80004d8 <__aeabi_dmul>
 800a430:	2200      	movs	r2, #0
 800a432:	2300      	movs	r3, #0
 800a434:	4604      	mov	r4, r0
 800a436:	460d      	mov	r5, r1
 800a438:	f7f6 fab6 	bl	80009a8 <__aeabi_dcmpeq>
 800a43c:	2800      	cmp	r0, #0
 800a43e:	f43f aebc 	beq.w	800a1ba <_dtoa_r+0x472>
 800a442:	e6f1      	b.n	800a228 <_dtoa_r+0x4e0>
 800a444:	0800ba20 	.word	0x0800ba20
 800a448:	3fe00000 	.word	0x3fe00000
 800a44c:	3ff00000 	.word	0x3ff00000
 800a450:	40240000 	.word	0x40240000
 800a454:	40140000 	.word	0x40140000
 800a458:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	f000 80db 	beq.w	800a616 <_dtoa_r+0x8ce>
 800a460:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a462:	2a01      	cmp	r2, #1
 800a464:	f300 80bf 	bgt.w	800a5e6 <_dtoa_r+0x89e>
 800a468:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a46a:	2a00      	cmp	r2, #0
 800a46c:	f000 80b7 	beq.w	800a5de <_dtoa_r+0x896>
 800a470:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a474:	4646      	mov	r6, r8
 800a476:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a478:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a47a:	2101      	movs	r1, #1
 800a47c:	441a      	add	r2, r3
 800a47e:	4658      	mov	r0, fp
 800a480:	4498      	add	r8, r3
 800a482:	9209      	str	r2, [sp, #36]	@ 0x24
 800a484:	f000 fb64 	bl	800ab50 <__i2b>
 800a488:	4605      	mov	r5, r0
 800a48a:	b15e      	cbz	r6, 800a4a4 <_dtoa_r+0x75c>
 800a48c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a48e:	2b00      	cmp	r3, #0
 800a490:	dd08      	ble.n	800a4a4 <_dtoa_r+0x75c>
 800a492:	42b3      	cmp	r3, r6
 800a494:	bfa8      	it	ge
 800a496:	4633      	movge	r3, r6
 800a498:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a49a:	eba8 0803 	sub.w	r8, r8, r3
 800a49e:	1af6      	subs	r6, r6, r3
 800a4a0:	1ad3      	subs	r3, r2, r3
 800a4a2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4a6:	b1f3      	cbz	r3, 800a4e6 <_dtoa_r+0x79e>
 800a4a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 80b7 	beq.w	800a61e <_dtoa_r+0x8d6>
 800a4b0:	b18c      	cbz	r4, 800a4d6 <_dtoa_r+0x78e>
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	4622      	mov	r2, r4
 800a4b6:	4658      	mov	r0, fp
 800a4b8:	f000 fc08 	bl	800accc <__pow5mult>
 800a4bc:	464a      	mov	r2, r9
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 fb5a 	bl	800ab7c <__multiply>
 800a4c8:	4649      	mov	r1, r9
 800a4ca:	9004      	str	r0, [sp, #16]
 800a4cc:	4658      	mov	r0, fp
 800a4ce:	f000 fa8b 	bl	800a9e8 <_Bfree>
 800a4d2:	9b04      	ldr	r3, [sp, #16]
 800a4d4:	4699      	mov	r9, r3
 800a4d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4d8:	1b1a      	subs	r2, r3, r4
 800a4da:	d004      	beq.n	800a4e6 <_dtoa_r+0x79e>
 800a4dc:	4649      	mov	r1, r9
 800a4de:	4658      	mov	r0, fp
 800a4e0:	f000 fbf4 	bl	800accc <__pow5mult>
 800a4e4:	4681      	mov	r9, r0
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	4658      	mov	r0, fp
 800a4ea:	f000 fb31 	bl	800ab50 <__i2b>
 800a4ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a4f0:	4604      	mov	r4, r0
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 81c9 	beq.w	800a88a <_dtoa_r+0xb42>
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	4601      	mov	r1, r0
 800a4fc:	4658      	mov	r0, fp
 800a4fe:	f000 fbe5 	bl	800accc <__pow5mult>
 800a502:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a504:	4604      	mov	r4, r0
 800a506:	2b01      	cmp	r3, #1
 800a508:	f300 808f 	bgt.w	800a62a <_dtoa_r+0x8e2>
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	f040 8087 	bne.w	800a622 <_dtoa_r+0x8da>
 800a514:	9b03      	ldr	r3, [sp, #12]
 800a516:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f040 8083 	bne.w	800a626 <_dtoa_r+0x8de>
 800a520:	9b03      	ldr	r3, [sp, #12]
 800a522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a526:	0d1b      	lsrs	r3, r3, #20
 800a528:	051b      	lsls	r3, r3, #20
 800a52a:	b12b      	cbz	r3, 800a538 <_dtoa_r+0x7f0>
 800a52c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a52e:	f108 0801 	add.w	r8, r8, #1
 800a532:	3301      	adds	r3, #1
 800a534:	9309      	str	r3, [sp, #36]	@ 0x24
 800a536:	2301      	movs	r3, #1
 800a538:	930a      	str	r3, [sp, #40]	@ 0x28
 800a53a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	f000 81aa 	beq.w	800a896 <_dtoa_r+0xb4e>
 800a542:	6923      	ldr	r3, [r4, #16]
 800a544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a548:	6918      	ldr	r0, [r3, #16]
 800a54a:	f000 fab5 	bl	800aab8 <__hi0bits>
 800a54e:	f1c0 0020 	rsb	r0, r0, #32
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	4418      	add	r0, r3
 800a556:	f010 001f 	ands.w	r0, r0, #31
 800a55a:	d071      	beq.n	800a640 <_dtoa_r+0x8f8>
 800a55c:	f1c0 0320 	rsb	r3, r0, #32
 800a560:	2b04      	cmp	r3, #4
 800a562:	dd65      	ble.n	800a630 <_dtoa_r+0x8e8>
 800a564:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a566:	f1c0 001c 	rsb	r0, r0, #28
 800a56a:	4403      	add	r3, r0
 800a56c:	4480      	add	r8, r0
 800a56e:	4406      	add	r6, r0
 800a570:	9309      	str	r3, [sp, #36]	@ 0x24
 800a572:	f1b8 0f00 	cmp.w	r8, #0
 800a576:	dd05      	ble.n	800a584 <_dtoa_r+0x83c>
 800a578:	4649      	mov	r1, r9
 800a57a:	4642      	mov	r2, r8
 800a57c:	4658      	mov	r0, fp
 800a57e:	f000 fbff 	bl	800ad80 <__lshift>
 800a582:	4681      	mov	r9, r0
 800a584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a586:	2b00      	cmp	r3, #0
 800a588:	dd05      	ble.n	800a596 <_dtoa_r+0x84e>
 800a58a:	4621      	mov	r1, r4
 800a58c:	461a      	mov	r2, r3
 800a58e:	4658      	mov	r0, fp
 800a590:	f000 fbf6 	bl	800ad80 <__lshift>
 800a594:	4604      	mov	r4, r0
 800a596:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d053      	beq.n	800a644 <_dtoa_r+0x8fc>
 800a59c:	4621      	mov	r1, r4
 800a59e:	4648      	mov	r0, r9
 800a5a0:	f000 fc5a 	bl	800ae58 <__mcmp>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	da4d      	bge.n	800a644 <_dtoa_r+0x8fc>
 800a5a8:	1e7b      	subs	r3, r7, #1
 800a5aa:	4649      	mov	r1, r9
 800a5ac:	9304      	str	r3, [sp, #16]
 800a5ae:	220a      	movs	r2, #10
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	4658      	mov	r0, fp
 800a5b4:	f000 fa3a 	bl	800aa2c <__multadd>
 800a5b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5ba:	4681      	mov	r9, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	f000 816c 	beq.w	800a89a <_dtoa_r+0xb52>
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	4629      	mov	r1, r5
 800a5c6:	220a      	movs	r2, #10
 800a5c8:	4658      	mov	r0, fp
 800a5ca:	f000 fa2f 	bl	800aa2c <__multadd>
 800a5ce:	9b08      	ldr	r3, [sp, #32]
 800a5d0:	4605      	mov	r5, r0
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	dc61      	bgt.n	800a69a <_dtoa_r+0x952>
 800a5d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	dc3b      	bgt.n	800a654 <_dtoa_r+0x90c>
 800a5dc:	e05d      	b.n	800a69a <_dtoa_r+0x952>
 800a5de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a5e0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a5e4:	e746      	b.n	800a474 <_dtoa_r+0x72c>
 800a5e6:	9b07      	ldr	r3, [sp, #28]
 800a5e8:	1e5c      	subs	r4, r3, #1
 800a5ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5ec:	42a3      	cmp	r3, r4
 800a5ee:	bfbf      	itttt	lt
 800a5f0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a5f2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a5f4:	1ae3      	sublt	r3, r4, r3
 800a5f6:	18d2      	addlt	r2, r2, r3
 800a5f8:	bfa8      	it	ge
 800a5fa:	1b1c      	subge	r4, r3, r4
 800a5fc:	9b07      	ldr	r3, [sp, #28]
 800a5fe:	bfbe      	ittt	lt
 800a600:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a602:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a604:	2400      	movlt	r4, #0
 800a606:	2b00      	cmp	r3, #0
 800a608:	bfb5      	itete	lt
 800a60a:	eba8 0603 	sublt.w	r6, r8, r3
 800a60e:	4646      	movge	r6, r8
 800a610:	2300      	movlt	r3, #0
 800a612:	9b07      	ldrge	r3, [sp, #28]
 800a614:	e730      	b.n	800a478 <_dtoa_r+0x730>
 800a616:	4646      	mov	r6, r8
 800a618:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a61a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a61c:	e735      	b.n	800a48a <_dtoa_r+0x742>
 800a61e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a620:	e75c      	b.n	800a4dc <_dtoa_r+0x794>
 800a622:	2300      	movs	r3, #0
 800a624:	e788      	b.n	800a538 <_dtoa_r+0x7f0>
 800a626:	9b02      	ldr	r3, [sp, #8]
 800a628:	e786      	b.n	800a538 <_dtoa_r+0x7f0>
 800a62a:	2300      	movs	r3, #0
 800a62c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a62e:	e788      	b.n	800a542 <_dtoa_r+0x7fa>
 800a630:	d09f      	beq.n	800a572 <_dtoa_r+0x82a>
 800a632:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a634:	331c      	adds	r3, #28
 800a636:	441a      	add	r2, r3
 800a638:	4498      	add	r8, r3
 800a63a:	441e      	add	r6, r3
 800a63c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a63e:	e798      	b.n	800a572 <_dtoa_r+0x82a>
 800a640:	4603      	mov	r3, r0
 800a642:	e7f6      	b.n	800a632 <_dtoa_r+0x8ea>
 800a644:	9b07      	ldr	r3, [sp, #28]
 800a646:	9704      	str	r7, [sp, #16]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	dc20      	bgt.n	800a68e <_dtoa_r+0x946>
 800a64c:	9308      	str	r3, [sp, #32]
 800a64e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a650:	2b02      	cmp	r3, #2
 800a652:	dd1e      	ble.n	800a692 <_dtoa_r+0x94a>
 800a654:	9b08      	ldr	r3, [sp, #32]
 800a656:	2b00      	cmp	r3, #0
 800a658:	f47f aebc 	bne.w	800a3d4 <_dtoa_r+0x68c>
 800a65c:	4621      	mov	r1, r4
 800a65e:	2205      	movs	r2, #5
 800a660:	4658      	mov	r0, fp
 800a662:	f000 f9e3 	bl	800aa2c <__multadd>
 800a666:	4601      	mov	r1, r0
 800a668:	4604      	mov	r4, r0
 800a66a:	4648      	mov	r0, r9
 800a66c:	f000 fbf4 	bl	800ae58 <__mcmp>
 800a670:	2800      	cmp	r0, #0
 800a672:	f77f aeaf 	ble.w	800a3d4 <_dtoa_r+0x68c>
 800a676:	2331      	movs	r3, #49	@ 0x31
 800a678:	4656      	mov	r6, sl
 800a67a:	f806 3b01 	strb.w	r3, [r6], #1
 800a67e:	9b04      	ldr	r3, [sp, #16]
 800a680:	3301      	adds	r3, #1
 800a682:	9304      	str	r3, [sp, #16]
 800a684:	e6aa      	b.n	800a3dc <_dtoa_r+0x694>
 800a686:	9c07      	ldr	r4, [sp, #28]
 800a688:	9704      	str	r7, [sp, #16]
 800a68a:	4625      	mov	r5, r4
 800a68c:	e7f3      	b.n	800a676 <_dtoa_r+0x92e>
 800a68e:	9b07      	ldr	r3, [sp, #28]
 800a690:	9308      	str	r3, [sp, #32]
 800a692:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 8104 	beq.w	800a8a2 <_dtoa_r+0xb5a>
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	dd05      	ble.n	800a6aa <_dtoa_r+0x962>
 800a69e:	4629      	mov	r1, r5
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	4658      	mov	r0, fp
 800a6a4:	f000 fb6c 	bl	800ad80 <__lshift>
 800a6a8:	4605      	mov	r5, r0
 800a6aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d05a      	beq.n	800a766 <_dtoa_r+0xa1e>
 800a6b0:	4658      	mov	r0, fp
 800a6b2:	6869      	ldr	r1, [r5, #4]
 800a6b4:	f000 f958 	bl	800a968 <_Balloc>
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	b928      	cbnz	r0, 800a6c8 <_dtoa_r+0x980>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a6c2:	4b83      	ldr	r3, [pc, #524]	@ (800a8d0 <_dtoa_r+0xb88>)
 800a6c4:	f7ff bb54 	b.w	8009d70 <_dtoa_r+0x28>
 800a6c8:	692a      	ldr	r2, [r5, #16]
 800a6ca:	f105 010c 	add.w	r1, r5, #12
 800a6ce:	3202      	adds	r2, #2
 800a6d0:	0092      	lsls	r2, r2, #2
 800a6d2:	300c      	adds	r0, #12
 800a6d4:	f000 fd70 	bl	800b1b8 <memcpy>
 800a6d8:	2201      	movs	r2, #1
 800a6da:	4631      	mov	r1, r6
 800a6dc:	4658      	mov	r0, fp
 800a6de:	f000 fb4f 	bl	800ad80 <__lshift>
 800a6e2:	462f      	mov	r7, r5
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	f10a 0301 	add.w	r3, sl, #1
 800a6ea:	9307      	str	r3, [sp, #28]
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	4453      	add	r3, sl
 800a6f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a6f2:	9b02      	ldr	r3, [sp, #8]
 800a6f4:	f003 0301 	and.w	r3, r3, #1
 800a6f8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a6fa:	9b07      	ldr	r3, [sp, #28]
 800a6fc:	4621      	mov	r1, r4
 800a6fe:	3b01      	subs	r3, #1
 800a700:	4648      	mov	r0, r9
 800a702:	9302      	str	r3, [sp, #8]
 800a704:	f7ff fa95 	bl	8009c32 <quorem>
 800a708:	4639      	mov	r1, r7
 800a70a:	9008      	str	r0, [sp, #32]
 800a70c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a710:	4648      	mov	r0, r9
 800a712:	f000 fba1 	bl	800ae58 <__mcmp>
 800a716:	462a      	mov	r2, r5
 800a718:	9009      	str	r0, [sp, #36]	@ 0x24
 800a71a:	4621      	mov	r1, r4
 800a71c:	4658      	mov	r0, fp
 800a71e:	f000 fbb7 	bl	800ae90 <__mdiff>
 800a722:	68c2      	ldr	r2, [r0, #12]
 800a724:	4606      	mov	r6, r0
 800a726:	bb02      	cbnz	r2, 800a76a <_dtoa_r+0xa22>
 800a728:	4601      	mov	r1, r0
 800a72a:	4648      	mov	r0, r9
 800a72c:	f000 fb94 	bl	800ae58 <__mcmp>
 800a730:	4602      	mov	r2, r0
 800a732:	4631      	mov	r1, r6
 800a734:	4658      	mov	r0, fp
 800a736:	920c      	str	r2, [sp, #48]	@ 0x30
 800a738:	f000 f956 	bl	800a9e8 <_Bfree>
 800a73c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a73e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a740:	9e07      	ldr	r6, [sp, #28]
 800a742:	ea43 0102 	orr.w	r1, r3, r2
 800a746:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a748:	4319      	orrs	r1, r3
 800a74a:	d110      	bne.n	800a76e <_dtoa_r+0xa26>
 800a74c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a750:	d029      	beq.n	800a7a6 <_dtoa_r+0xa5e>
 800a752:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	dd02      	ble.n	800a75e <_dtoa_r+0xa16>
 800a758:	9b08      	ldr	r3, [sp, #32]
 800a75a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a75e:	9b02      	ldr	r3, [sp, #8]
 800a760:	f883 8000 	strb.w	r8, [r3]
 800a764:	e63b      	b.n	800a3de <_dtoa_r+0x696>
 800a766:	4628      	mov	r0, r5
 800a768:	e7bb      	b.n	800a6e2 <_dtoa_r+0x99a>
 800a76a:	2201      	movs	r2, #1
 800a76c:	e7e1      	b.n	800a732 <_dtoa_r+0x9ea>
 800a76e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a770:	2b00      	cmp	r3, #0
 800a772:	db04      	blt.n	800a77e <_dtoa_r+0xa36>
 800a774:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a776:	430b      	orrs	r3, r1
 800a778:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a77a:	430b      	orrs	r3, r1
 800a77c:	d120      	bne.n	800a7c0 <_dtoa_r+0xa78>
 800a77e:	2a00      	cmp	r2, #0
 800a780:	dded      	ble.n	800a75e <_dtoa_r+0xa16>
 800a782:	4649      	mov	r1, r9
 800a784:	2201      	movs	r2, #1
 800a786:	4658      	mov	r0, fp
 800a788:	f000 fafa 	bl	800ad80 <__lshift>
 800a78c:	4621      	mov	r1, r4
 800a78e:	4681      	mov	r9, r0
 800a790:	f000 fb62 	bl	800ae58 <__mcmp>
 800a794:	2800      	cmp	r0, #0
 800a796:	dc03      	bgt.n	800a7a0 <_dtoa_r+0xa58>
 800a798:	d1e1      	bne.n	800a75e <_dtoa_r+0xa16>
 800a79a:	f018 0f01 	tst.w	r8, #1
 800a79e:	d0de      	beq.n	800a75e <_dtoa_r+0xa16>
 800a7a0:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7a4:	d1d8      	bne.n	800a758 <_dtoa_r+0xa10>
 800a7a6:	2339      	movs	r3, #57	@ 0x39
 800a7a8:	9a02      	ldr	r2, [sp, #8]
 800a7aa:	7013      	strb	r3, [r2, #0]
 800a7ac:	4633      	mov	r3, r6
 800a7ae:	461e      	mov	r6, r3
 800a7b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a7b4:	3b01      	subs	r3, #1
 800a7b6:	2a39      	cmp	r2, #57	@ 0x39
 800a7b8:	d052      	beq.n	800a860 <_dtoa_r+0xb18>
 800a7ba:	3201      	adds	r2, #1
 800a7bc:	701a      	strb	r2, [r3, #0]
 800a7be:	e60e      	b.n	800a3de <_dtoa_r+0x696>
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	dd07      	ble.n	800a7d4 <_dtoa_r+0xa8c>
 800a7c4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a7c8:	d0ed      	beq.n	800a7a6 <_dtoa_r+0xa5e>
 800a7ca:	9a02      	ldr	r2, [sp, #8]
 800a7cc:	f108 0301 	add.w	r3, r8, #1
 800a7d0:	7013      	strb	r3, [r2, #0]
 800a7d2:	e604      	b.n	800a3de <_dtoa_r+0x696>
 800a7d4:	9b07      	ldr	r3, [sp, #28]
 800a7d6:	9a07      	ldr	r2, [sp, #28]
 800a7d8:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a7dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d028      	beq.n	800a834 <_dtoa_r+0xaec>
 800a7e2:	4649      	mov	r1, r9
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	220a      	movs	r2, #10
 800a7e8:	4658      	mov	r0, fp
 800a7ea:	f000 f91f 	bl	800aa2c <__multadd>
 800a7ee:	42af      	cmp	r7, r5
 800a7f0:	4681      	mov	r9, r0
 800a7f2:	f04f 0300 	mov.w	r3, #0
 800a7f6:	f04f 020a 	mov.w	r2, #10
 800a7fa:	4639      	mov	r1, r7
 800a7fc:	4658      	mov	r0, fp
 800a7fe:	d107      	bne.n	800a810 <_dtoa_r+0xac8>
 800a800:	f000 f914 	bl	800aa2c <__multadd>
 800a804:	4607      	mov	r7, r0
 800a806:	4605      	mov	r5, r0
 800a808:	9b07      	ldr	r3, [sp, #28]
 800a80a:	3301      	adds	r3, #1
 800a80c:	9307      	str	r3, [sp, #28]
 800a80e:	e774      	b.n	800a6fa <_dtoa_r+0x9b2>
 800a810:	f000 f90c 	bl	800aa2c <__multadd>
 800a814:	4629      	mov	r1, r5
 800a816:	4607      	mov	r7, r0
 800a818:	2300      	movs	r3, #0
 800a81a:	220a      	movs	r2, #10
 800a81c:	4658      	mov	r0, fp
 800a81e:	f000 f905 	bl	800aa2c <__multadd>
 800a822:	4605      	mov	r5, r0
 800a824:	e7f0      	b.n	800a808 <_dtoa_r+0xac0>
 800a826:	9b08      	ldr	r3, [sp, #32]
 800a828:	2700      	movs	r7, #0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	bfcc      	ite	gt
 800a82e:	461e      	movgt	r6, r3
 800a830:	2601      	movle	r6, #1
 800a832:	4456      	add	r6, sl
 800a834:	4649      	mov	r1, r9
 800a836:	2201      	movs	r2, #1
 800a838:	4658      	mov	r0, fp
 800a83a:	f000 faa1 	bl	800ad80 <__lshift>
 800a83e:	4621      	mov	r1, r4
 800a840:	4681      	mov	r9, r0
 800a842:	f000 fb09 	bl	800ae58 <__mcmp>
 800a846:	2800      	cmp	r0, #0
 800a848:	dcb0      	bgt.n	800a7ac <_dtoa_r+0xa64>
 800a84a:	d102      	bne.n	800a852 <_dtoa_r+0xb0a>
 800a84c:	f018 0f01 	tst.w	r8, #1
 800a850:	d1ac      	bne.n	800a7ac <_dtoa_r+0xa64>
 800a852:	4633      	mov	r3, r6
 800a854:	461e      	mov	r6, r3
 800a856:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a85a:	2a30      	cmp	r2, #48	@ 0x30
 800a85c:	d0fa      	beq.n	800a854 <_dtoa_r+0xb0c>
 800a85e:	e5be      	b.n	800a3de <_dtoa_r+0x696>
 800a860:	459a      	cmp	sl, r3
 800a862:	d1a4      	bne.n	800a7ae <_dtoa_r+0xa66>
 800a864:	9b04      	ldr	r3, [sp, #16]
 800a866:	3301      	adds	r3, #1
 800a868:	9304      	str	r3, [sp, #16]
 800a86a:	2331      	movs	r3, #49	@ 0x31
 800a86c:	f88a 3000 	strb.w	r3, [sl]
 800a870:	e5b5      	b.n	800a3de <_dtoa_r+0x696>
 800a872:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a874:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a8d4 <_dtoa_r+0xb8c>
 800a878:	b11b      	cbz	r3, 800a882 <_dtoa_r+0xb3a>
 800a87a:	f10a 0308 	add.w	r3, sl, #8
 800a87e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a880:	6013      	str	r3, [r2, #0]
 800a882:	4650      	mov	r0, sl
 800a884:	b017      	add	sp, #92	@ 0x5c
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a88c:	2b01      	cmp	r3, #1
 800a88e:	f77f ae3d 	ble.w	800a50c <_dtoa_r+0x7c4>
 800a892:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a894:	930a      	str	r3, [sp, #40]	@ 0x28
 800a896:	2001      	movs	r0, #1
 800a898:	e65b      	b.n	800a552 <_dtoa_r+0x80a>
 800a89a:	9b08      	ldr	r3, [sp, #32]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	f77f aed6 	ble.w	800a64e <_dtoa_r+0x906>
 800a8a2:	4656      	mov	r6, sl
 800a8a4:	4621      	mov	r1, r4
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	f7ff f9c3 	bl	8009c32 <quorem>
 800a8ac:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	f806 8b01 	strb.w	r8, [r6], #1
 800a8b6:	eba6 020a 	sub.w	r2, r6, sl
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	ddb3      	ble.n	800a826 <_dtoa_r+0xade>
 800a8be:	4649      	mov	r1, r9
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4658      	mov	r0, fp
 800a8c6:	f000 f8b1 	bl	800aa2c <__multadd>
 800a8ca:	4681      	mov	r9, r0
 800a8cc:	e7ea      	b.n	800a8a4 <_dtoa_r+0xb5c>
 800a8ce:	bf00      	nop
 800a8d0:	0800b980 	.word	0x0800b980
 800a8d4:	0800b904 	.word	0x0800b904

0800a8d8 <_free_r>:
 800a8d8:	b538      	push	{r3, r4, r5, lr}
 800a8da:	4605      	mov	r5, r0
 800a8dc:	2900      	cmp	r1, #0
 800a8de:	d040      	beq.n	800a962 <_free_r+0x8a>
 800a8e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8e4:	1f0c      	subs	r4, r1, #4
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	bfb8      	it	lt
 800a8ea:	18e4      	addlt	r4, r4, r3
 800a8ec:	f7fe fb96 	bl	800901c <__malloc_lock>
 800a8f0:	4a1c      	ldr	r2, [pc, #112]	@ (800a964 <_free_r+0x8c>)
 800a8f2:	6813      	ldr	r3, [r2, #0]
 800a8f4:	b933      	cbnz	r3, 800a904 <_free_r+0x2c>
 800a8f6:	6063      	str	r3, [r4, #4]
 800a8f8:	6014      	str	r4, [r2, #0]
 800a8fa:	4628      	mov	r0, r5
 800a8fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a900:	f7fe bb92 	b.w	8009028 <__malloc_unlock>
 800a904:	42a3      	cmp	r3, r4
 800a906:	d908      	bls.n	800a91a <_free_r+0x42>
 800a908:	6820      	ldr	r0, [r4, #0]
 800a90a:	1821      	adds	r1, r4, r0
 800a90c:	428b      	cmp	r3, r1
 800a90e:	bf01      	itttt	eq
 800a910:	6819      	ldreq	r1, [r3, #0]
 800a912:	685b      	ldreq	r3, [r3, #4]
 800a914:	1809      	addeq	r1, r1, r0
 800a916:	6021      	streq	r1, [r4, #0]
 800a918:	e7ed      	b.n	800a8f6 <_free_r+0x1e>
 800a91a:	461a      	mov	r2, r3
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	b10b      	cbz	r3, 800a924 <_free_r+0x4c>
 800a920:	42a3      	cmp	r3, r4
 800a922:	d9fa      	bls.n	800a91a <_free_r+0x42>
 800a924:	6811      	ldr	r1, [r2, #0]
 800a926:	1850      	adds	r0, r2, r1
 800a928:	42a0      	cmp	r0, r4
 800a92a:	d10b      	bne.n	800a944 <_free_r+0x6c>
 800a92c:	6820      	ldr	r0, [r4, #0]
 800a92e:	4401      	add	r1, r0
 800a930:	1850      	adds	r0, r2, r1
 800a932:	4283      	cmp	r3, r0
 800a934:	6011      	str	r1, [r2, #0]
 800a936:	d1e0      	bne.n	800a8fa <_free_r+0x22>
 800a938:	6818      	ldr	r0, [r3, #0]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	4408      	add	r0, r1
 800a93e:	6010      	str	r0, [r2, #0]
 800a940:	6053      	str	r3, [r2, #4]
 800a942:	e7da      	b.n	800a8fa <_free_r+0x22>
 800a944:	d902      	bls.n	800a94c <_free_r+0x74>
 800a946:	230c      	movs	r3, #12
 800a948:	602b      	str	r3, [r5, #0]
 800a94a:	e7d6      	b.n	800a8fa <_free_r+0x22>
 800a94c:	6820      	ldr	r0, [r4, #0]
 800a94e:	1821      	adds	r1, r4, r0
 800a950:	428b      	cmp	r3, r1
 800a952:	bf01      	itttt	eq
 800a954:	6819      	ldreq	r1, [r3, #0]
 800a956:	685b      	ldreq	r3, [r3, #4]
 800a958:	1809      	addeq	r1, r1, r0
 800a95a:	6021      	streq	r1, [r4, #0]
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	6054      	str	r4, [r2, #4]
 800a960:	e7cb      	b.n	800a8fa <_free_r+0x22>
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20000698 	.word	0x20000698

0800a968 <_Balloc>:
 800a968:	b570      	push	{r4, r5, r6, lr}
 800a96a:	69c6      	ldr	r6, [r0, #28]
 800a96c:	4604      	mov	r4, r0
 800a96e:	460d      	mov	r5, r1
 800a970:	b976      	cbnz	r6, 800a990 <_Balloc+0x28>
 800a972:	2010      	movs	r0, #16
 800a974:	f7fe faa0 	bl	8008eb8 <malloc>
 800a978:	4602      	mov	r2, r0
 800a97a:	61e0      	str	r0, [r4, #28]
 800a97c:	b920      	cbnz	r0, 800a988 <_Balloc+0x20>
 800a97e:	216b      	movs	r1, #107	@ 0x6b
 800a980:	4b17      	ldr	r3, [pc, #92]	@ (800a9e0 <_Balloc+0x78>)
 800a982:	4818      	ldr	r0, [pc, #96]	@ (800a9e4 <_Balloc+0x7c>)
 800a984:	f000 fc26 	bl	800b1d4 <__assert_func>
 800a988:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a98c:	6006      	str	r6, [r0, #0]
 800a98e:	60c6      	str	r6, [r0, #12]
 800a990:	69e6      	ldr	r6, [r4, #28]
 800a992:	68f3      	ldr	r3, [r6, #12]
 800a994:	b183      	cbz	r3, 800a9b8 <_Balloc+0x50>
 800a996:	69e3      	ldr	r3, [r4, #28]
 800a998:	68db      	ldr	r3, [r3, #12]
 800a99a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a99e:	b9b8      	cbnz	r0, 800a9d0 <_Balloc+0x68>
 800a9a0:	2101      	movs	r1, #1
 800a9a2:	fa01 f605 	lsl.w	r6, r1, r5
 800a9a6:	1d72      	adds	r2, r6, #5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	0092      	lsls	r2, r2, #2
 800a9ac:	f000 fc30 	bl	800b210 <_calloc_r>
 800a9b0:	b160      	cbz	r0, 800a9cc <_Balloc+0x64>
 800a9b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9b6:	e00e      	b.n	800a9d6 <_Balloc+0x6e>
 800a9b8:	2221      	movs	r2, #33	@ 0x21
 800a9ba:	2104      	movs	r1, #4
 800a9bc:	4620      	mov	r0, r4
 800a9be:	f000 fc27 	bl	800b210 <_calloc_r>
 800a9c2:	69e3      	ldr	r3, [r4, #28]
 800a9c4:	60f0      	str	r0, [r6, #12]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d1e4      	bne.n	800a996 <_Balloc+0x2e>
 800a9cc:	2000      	movs	r0, #0
 800a9ce:	bd70      	pop	{r4, r5, r6, pc}
 800a9d0:	6802      	ldr	r2, [r0, #0]
 800a9d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a9dc:	e7f7      	b.n	800a9ce <_Balloc+0x66>
 800a9de:	bf00      	nop
 800a9e0:	0800b911 	.word	0x0800b911
 800a9e4:	0800b991 	.word	0x0800b991

0800a9e8 <_Bfree>:
 800a9e8:	b570      	push	{r4, r5, r6, lr}
 800a9ea:	69c6      	ldr	r6, [r0, #28]
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	b976      	cbnz	r6, 800aa10 <_Bfree+0x28>
 800a9f2:	2010      	movs	r0, #16
 800a9f4:	f7fe fa60 	bl	8008eb8 <malloc>
 800a9f8:	4602      	mov	r2, r0
 800a9fa:	61e8      	str	r0, [r5, #28]
 800a9fc:	b920      	cbnz	r0, 800aa08 <_Bfree+0x20>
 800a9fe:	218f      	movs	r1, #143	@ 0x8f
 800aa00:	4b08      	ldr	r3, [pc, #32]	@ (800aa24 <_Bfree+0x3c>)
 800aa02:	4809      	ldr	r0, [pc, #36]	@ (800aa28 <_Bfree+0x40>)
 800aa04:	f000 fbe6 	bl	800b1d4 <__assert_func>
 800aa08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa0c:	6006      	str	r6, [r0, #0]
 800aa0e:	60c6      	str	r6, [r0, #12]
 800aa10:	b13c      	cbz	r4, 800aa22 <_Bfree+0x3a>
 800aa12:	69eb      	ldr	r3, [r5, #28]
 800aa14:	6862      	ldr	r2, [r4, #4]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa1c:	6021      	str	r1, [r4, #0]
 800aa1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	0800b911 	.word	0x0800b911
 800aa28:	0800b991 	.word	0x0800b991

0800aa2c <__multadd>:
 800aa2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa30:	4607      	mov	r7, r0
 800aa32:	460c      	mov	r4, r1
 800aa34:	461e      	mov	r6, r3
 800aa36:	2000      	movs	r0, #0
 800aa38:	690d      	ldr	r5, [r1, #16]
 800aa3a:	f101 0c14 	add.w	ip, r1, #20
 800aa3e:	f8dc 3000 	ldr.w	r3, [ip]
 800aa42:	3001      	adds	r0, #1
 800aa44:	b299      	uxth	r1, r3
 800aa46:	fb02 6101 	mla	r1, r2, r1, r6
 800aa4a:	0c1e      	lsrs	r6, r3, #16
 800aa4c:	0c0b      	lsrs	r3, r1, #16
 800aa4e:	fb02 3306 	mla	r3, r2, r6, r3
 800aa52:	b289      	uxth	r1, r1
 800aa54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa58:	4285      	cmp	r5, r0
 800aa5a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aa5e:	f84c 1b04 	str.w	r1, [ip], #4
 800aa62:	dcec      	bgt.n	800aa3e <__multadd+0x12>
 800aa64:	b30e      	cbz	r6, 800aaaa <__multadd+0x7e>
 800aa66:	68a3      	ldr	r3, [r4, #8]
 800aa68:	42ab      	cmp	r3, r5
 800aa6a:	dc19      	bgt.n	800aaa0 <__multadd+0x74>
 800aa6c:	6861      	ldr	r1, [r4, #4]
 800aa6e:	4638      	mov	r0, r7
 800aa70:	3101      	adds	r1, #1
 800aa72:	f7ff ff79 	bl	800a968 <_Balloc>
 800aa76:	4680      	mov	r8, r0
 800aa78:	b928      	cbnz	r0, 800aa86 <__multadd+0x5a>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	21ba      	movs	r1, #186	@ 0xba
 800aa7e:	4b0c      	ldr	r3, [pc, #48]	@ (800aab0 <__multadd+0x84>)
 800aa80:	480c      	ldr	r0, [pc, #48]	@ (800aab4 <__multadd+0x88>)
 800aa82:	f000 fba7 	bl	800b1d4 <__assert_func>
 800aa86:	6922      	ldr	r2, [r4, #16]
 800aa88:	f104 010c 	add.w	r1, r4, #12
 800aa8c:	3202      	adds	r2, #2
 800aa8e:	0092      	lsls	r2, r2, #2
 800aa90:	300c      	adds	r0, #12
 800aa92:	f000 fb91 	bl	800b1b8 <memcpy>
 800aa96:	4621      	mov	r1, r4
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff ffa5 	bl	800a9e8 <_Bfree>
 800aa9e:	4644      	mov	r4, r8
 800aaa0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aaa4:	3501      	adds	r5, #1
 800aaa6:	615e      	str	r6, [r3, #20]
 800aaa8:	6125      	str	r5, [r4, #16]
 800aaaa:	4620      	mov	r0, r4
 800aaac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aab0:	0800b980 	.word	0x0800b980
 800aab4:	0800b991 	.word	0x0800b991

0800aab8 <__hi0bits>:
 800aab8:	4603      	mov	r3, r0
 800aaba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aabe:	bf3a      	itte	cc
 800aac0:	0403      	lslcc	r3, r0, #16
 800aac2:	2010      	movcc	r0, #16
 800aac4:	2000      	movcs	r0, #0
 800aac6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aaca:	bf3c      	itt	cc
 800aacc:	021b      	lslcc	r3, r3, #8
 800aace:	3008      	addcc	r0, #8
 800aad0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aad4:	bf3c      	itt	cc
 800aad6:	011b      	lslcc	r3, r3, #4
 800aad8:	3004      	addcc	r0, #4
 800aada:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aade:	bf3c      	itt	cc
 800aae0:	009b      	lslcc	r3, r3, #2
 800aae2:	3002      	addcc	r0, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	db05      	blt.n	800aaf4 <__hi0bits+0x3c>
 800aae8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aaec:	f100 0001 	add.w	r0, r0, #1
 800aaf0:	bf08      	it	eq
 800aaf2:	2020      	moveq	r0, #32
 800aaf4:	4770      	bx	lr

0800aaf6 <__lo0bits>:
 800aaf6:	6803      	ldr	r3, [r0, #0]
 800aaf8:	4602      	mov	r2, r0
 800aafa:	f013 0007 	ands.w	r0, r3, #7
 800aafe:	d00b      	beq.n	800ab18 <__lo0bits+0x22>
 800ab00:	07d9      	lsls	r1, r3, #31
 800ab02:	d421      	bmi.n	800ab48 <__lo0bits+0x52>
 800ab04:	0798      	lsls	r0, r3, #30
 800ab06:	bf49      	itett	mi
 800ab08:	085b      	lsrmi	r3, r3, #1
 800ab0a:	089b      	lsrpl	r3, r3, #2
 800ab0c:	2001      	movmi	r0, #1
 800ab0e:	6013      	strmi	r3, [r2, #0]
 800ab10:	bf5c      	itt	pl
 800ab12:	2002      	movpl	r0, #2
 800ab14:	6013      	strpl	r3, [r2, #0]
 800ab16:	4770      	bx	lr
 800ab18:	b299      	uxth	r1, r3
 800ab1a:	b909      	cbnz	r1, 800ab20 <__lo0bits+0x2a>
 800ab1c:	2010      	movs	r0, #16
 800ab1e:	0c1b      	lsrs	r3, r3, #16
 800ab20:	b2d9      	uxtb	r1, r3
 800ab22:	b909      	cbnz	r1, 800ab28 <__lo0bits+0x32>
 800ab24:	3008      	adds	r0, #8
 800ab26:	0a1b      	lsrs	r3, r3, #8
 800ab28:	0719      	lsls	r1, r3, #28
 800ab2a:	bf04      	itt	eq
 800ab2c:	091b      	lsreq	r3, r3, #4
 800ab2e:	3004      	addeq	r0, #4
 800ab30:	0799      	lsls	r1, r3, #30
 800ab32:	bf04      	itt	eq
 800ab34:	089b      	lsreq	r3, r3, #2
 800ab36:	3002      	addeq	r0, #2
 800ab38:	07d9      	lsls	r1, r3, #31
 800ab3a:	d403      	bmi.n	800ab44 <__lo0bits+0x4e>
 800ab3c:	085b      	lsrs	r3, r3, #1
 800ab3e:	f100 0001 	add.w	r0, r0, #1
 800ab42:	d003      	beq.n	800ab4c <__lo0bits+0x56>
 800ab44:	6013      	str	r3, [r2, #0]
 800ab46:	4770      	bx	lr
 800ab48:	2000      	movs	r0, #0
 800ab4a:	4770      	bx	lr
 800ab4c:	2020      	movs	r0, #32
 800ab4e:	4770      	bx	lr

0800ab50 <__i2b>:
 800ab50:	b510      	push	{r4, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	2101      	movs	r1, #1
 800ab56:	f7ff ff07 	bl	800a968 <_Balloc>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	b928      	cbnz	r0, 800ab6a <__i2b+0x1a>
 800ab5e:	f240 1145 	movw	r1, #325	@ 0x145
 800ab62:	4b04      	ldr	r3, [pc, #16]	@ (800ab74 <__i2b+0x24>)
 800ab64:	4804      	ldr	r0, [pc, #16]	@ (800ab78 <__i2b+0x28>)
 800ab66:	f000 fb35 	bl	800b1d4 <__assert_func>
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	6144      	str	r4, [r0, #20]
 800ab6e:	6103      	str	r3, [r0, #16]
 800ab70:	bd10      	pop	{r4, pc}
 800ab72:	bf00      	nop
 800ab74:	0800b980 	.word	0x0800b980
 800ab78:	0800b991 	.word	0x0800b991

0800ab7c <__multiply>:
 800ab7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab80:	4614      	mov	r4, r2
 800ab82:	690a      	ldr	r2, [r1, #16]
 800ab84:	6923      	ldr	r3, [r4, #16]
 800ab86:	460f      	mov	r7, r1
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	bfa2      	ittt	ge
 800ab8c:	4623      	movge	r3, r4
 800ab8e:	460c      	movge	r4, r1
 800ab90:	461f      	movge	r7, r3
 800ab92:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ab96:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ab9a:	68a3      	ldr	r3, [r4, #8]
 800ab9c:	6861      	ldr	r1, [r4, #4]
 800ab9e:	eb0a 0609 	add.w	r6, sl, r9
 800aba2:	42b3      	cmp	r3, r6
 800aba4:	b085      	sub	sp, #20
 800aba6:	bfb8      	it	lt
 800aba8:	3101      	addlt	r1, #1
 800abaa:	f7ff fedd 	bl	800a968 <_Balloc>
 800abae:	b930      	cbnz	r0, 800abbe <__multiply+0x42>
 800abb0:	4602      	mov	r2, r0
 800abb2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800abb6:	4b43      	ldr	r3, [pc, #268]	@ (800acc4 <__multiply+0x148>)
 800abb8:	4843      	ldr	r0, [pc, #268]	@ (800acc8 <__multiply+0x14c>)
 800abba:	f000 fb0b 	bl	800b1d4 <__assert_func>
 800abbe:	f100 0514 	add.w	r5, r0, #20
 800abc2:	462b      	mov	r3, r5
 800abc4:	2200      	movs	r2, #0
 800abc6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800abca:	4543      	cmp	r3, r8
 800abcc:	d321      	bcc.n	800ac12 <__multiply+0x96>
 800abce:	f107 0114 	add.w	r1, r7, #20
 800abd2:	f104 0214 	add.w	r2, r4, #20
 800abd6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800abda:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800abde:	9302      	str	r3, [sp, #8]
 800abe0:	1b13      	subs	r3, r2, r4
 800abe2:	3b15      	subs	r3, #21
 800abe4:	f023 0303 	bic.w	r3, r3, #3
 800abe8:	3304      	adds	r3, #4
 800abea:	f104 0715 	add.w	r7, r4, #21
 800abee:	42ba      	cmp	r2, r7
 800abf0:	bf38      	it	cc
 800abf2:	2304      	movcc	r3, #4
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	9b02      	ldr	r3, [sp, #8]
 800abf8:	9103      	str	r1, [sp, #12]
 800abfa:	428b      	cmp	r3, r1
 800abfc:	d80c      	bhi.n	800ac18 <__multiply+0x9c>
 800abfe:	2e00      	cmp	r6, #0
 800ac00:	dd03      	ble.n	800ac0a <__multiply+0x8e>
 800ac02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d05a      	beq.n	800acc0 <__multiply+0x144>
 800ac0a:	6106      	str	r6, [r0, #16]
 800ac0c:	b005      	add	sp, #20
 800ac0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac12:	f843 2b04 	str.w	r2, [r3], #4
 800ac16:	e7d8      	b.n	800abca <__multiply+0x4e>
 800ac18:	f8b1 a000 	ldrh.w	sl, [r1]
 800ac1c:	f1ba 0f00 	cmp.w	sl, #0
 800ac20:	d023      	beq.n	800ac6a <__multiply+0xee>
 800ac22:	46a9      	mov	r9, r5
 800ac24:	f04f 0c00 	mov.w	ip, #0
 800ac28:	f104 0e14 	add.w	lr, r4, #20
 800ac2c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ac30:	f8d9 3000 	ldr.w	r3, [r9]
 800ac34:	fa1f fb87 	uxth.w	fp, r7
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	fb0a 330b 	mla	r3, sl, fp, r3
 800ac3e:	4463      	add	r3, ip
 800ac40:	f8d9 c000 	ldr.w	ip, [r9]
 800ac44:	0c3f      	lsrs	r7, r7, #16
 800ac46:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ac4a:	fb0a c707 	mla	r7, sl, r7, ip
 800ac4e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac58:	4572      	cmp	r2, lr
 800ac5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ac5e:	f849 3b04 	str.w	r3, [r9], #4
 800ac62:	d8e3      	bhi.n	800ac2c <__multiply+0xb0>
 800ac64:	9b01      	ldr	r3, [sp, #4]
 800ac66:	f845 c003 	str.w	ip, [r5, r3]
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	3104      	adds	r1, #4
 800ac6e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ac72:	f1b9 0f00 	cmp.w	r9, #0
 800ac76:	d021      	beq.n	800acbc <__multiply+0x140>
 800ac78:	46ae      	mov	lr, r5
 800ac7a:	f04f 0a00 	mov.w	sl, #0
 800ac7e:	682b      	ldr	r3, [r5, #0]
 800ac80:	f104 0c14 	add.w	ip, r4, #20
 800ac84:	f8bc b000 	ldrh.w	fp, [ip]
 800ac88:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	fb09 770b 	mla	r7, r9, fp, r7
 800ac92:	4457      	add	r7, sl
 800ac94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ac98:	f84e 3b04 	str.w	r3, [lr], #4
 800ac9c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800aca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aca4:	f8be 3000 	ldrh.w	r3, [lr]
 800aca8:	4562      	cmp	r2, ip
 800acaa:	fb09 330a 	mla	r3, r9, sl, r3
 800acae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800acb2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800acb6:	d8e5      	bhi.n	800ac84 <__multiply+0x108>
 800acb8:	9f01      	ldr	r7, [sp, #4]
 800acba:	51eb      	str	r3, [r5, r7]
 800acbc:	3504      	adds	r5, #4
 800acbe:	e79a      	b.n	800abf6 <__multiply+0x7a>
 800acc0:	3e01      	subs	r6, #1
 800acc2:	e79c      	b.n	800abfe <__multiply+0x82>
 800acc4:	0800b980 	.word	0x0800b980
 800acc8:	0800b991 	.word	0x0800b991

0800accc <__pow5mult>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	4615      	mov	r5, r2
 800acd2:	f012 0203 	ands.w	r2, r2, #3
 800acd6:	4607      	mov	r7, r0
 800acd8:	460e      	mov	r6, r1
 800acda:	d007      	beq.n	800acec <__pow5mult+0x20>
 800acdc:	4c25      	ldr	r4, [pc, #148]	@ (800ad74 <__pow5mult+0xa8>)
 800acde:	3a01      	subs	r2, #1
 800ace0:	2300      	movs	r3, #0
 800ace2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ace6:	f7ff fea1 	bl	800aa2c <__multadd>
 800acea:	4606      	mov	r6, r0
 800acec:	10ad      	asrs	r5, r5, #2
 800acee:	d03d      	beq.n	800ad6c <__pow5mult+0xa0>
 800acf0:	69fc      	ldr	r4, [r7, #28]
 800acf2:	b97c      	cbnz	r4, 800ad14 <__pow5mult+0x48>
 800acf4:	2010      	movs	r0, #16
 800acf6:	f7fe f8df 	bl	8008eb8 <malloc>
 800acfa:	4602      	mov	r2, r0
 800acfc:	61f8      	str	r0, [r7, #28]
 800acfe:	b928      	cbnz	r0, 800ad0c <__pow5mult+0x40>
 800ad00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ad04:	4b1c      	ldr	r3, [pc, #112]	@ (800ad78 <__pow5mult+0xac>)
 800ad06:	481d      	ldr	r0, [pc, #116]	@ (800ad7c <__pow5mult+0xb0>)
 800ad08:	f000 fa64 	bl	800b1d4 <__assert_func>
 800ad0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ad10:	6004      	str	r4, [r0, #0]
 800ad12:	60c4      	str	r4, [r0, #12]
 800ad14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ad18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ad1c:	b94c      	cbnz	r4, 800ad32 <__pow5mult+0x66>
 800ad1e:	f240 2171 	movw	r1, #625	@ 0x271
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ff14 	bl	800ab50 <__i2b>
 800ad28:	2300      	movs	r3, #0
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	f8c8 0008 	str.w	r0, [r8, #8]
 800ad30:	6003      	str	r3, [r0, #0]
 800ad32:	f04f 0900 	mov.w	r9, #0
 800ad36:	07eb      	lsls	r3, r5, #31
 800ad38:	d50a      	bpl.n	800ad50 <__pow5mult+0x84>
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4622      	mov	r2, r4
 800ad3e:	4638      	mov	r0, r7
 800ad40:	f7ff ff1c 	bl	800ab7c <__multiply>
 800ad44:	4680      	mov	r8, r0
 800ad46:	4631      	mov	r1, r6
 800ad48:	4638      	mov	r0, r7
 800ad4a:	f7ff fe4d 	bl	800a9e8 <_Bfree>
 800ad4e:	4646      	mov	r6, r8
 800ad50:	106d      	asrs	r5, r5, #1
 800ad52:	d00b      	beq.n	800ad6c <__pow5mult+0xa0>
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	b938      	cbnz	r0, 800ad68 <__pow5mult+0x9c>
 800ad58:	4622      	mov	r2, r4
 800ad5a:	4621      	mov	r1, r4
 800ad5c:	4638      	mov	r0, r7
 800ad5e:	f7ff ff0d 	bl	800ab7c <__multiply>
 800ad62:	6020      	str	r0, [r4, #0]
 800ad64:	f8c0 9000 	str.w	r9, [r0]
 800ad68:	4604      	mov	r4, r0
 800ad6a:	e7e4      	b.n	800ad36 <__pow5mult+0x6a>
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad72:	bf00      	nop
 800ad74:	0800b9ec 	.word	0x0800b9ec
 800ad78:	0800b911 	.word	0x0800b911
 800ad7c:	0800b991 	.word	0x0800b991

0800ad80 <__lshift>:
 800ad80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad84:	460c      	mov	r4, r1
 800ad86:	4607      	mov	r7, r0
 800ad88:	4691      	mov	r9, r2
 800ad8a:	6923      	ldr	r3, [r4, #16]
 800ad8c:	6849      	ldr	r1, [r1, #4]
 800ad8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ad92:	68a3      	ldr	r3, [r4, #8]
 800ad94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ad98:	f108 0601 	add.w	r6, r8, #1
 800ad9c:	42b3      	cmp	r3, r6
 800ad9e:	db0b      	blt.n	800adb8 <__lshift+0x38>
 800ada0:	4638      	mov	r0, r7
 800ada2:	f7ff fde1 	bl	800a968 <_Balloc>
 800ada6:	4605      	mov	r5, r0
 800ada8:	b948      	cbnz	r0, 800adbe <__lshift+0x3e>
 800adaa:	4602      	mov	r2, r0
 800adac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800adb0:	4b27      	ldr	r3, [pc, #156]	@ (800ae50 <__lshift+0xd0>)
 800adb2:	4828      	ldr	r0, [pc, #160]	@ (800ae54 <__lshift+0xd4>)
 800adb4:	f000 fa0e 	bl	800b1d4 <__assert_func>
 800adb8:	3101      	adds	r1, #1
 800adba:	005b      	lsls	r3, r3, #1
 800adbc:	e7ee      	b.n	800ad9c <__lshift+0x1c>
 800adbe:	2300      	movs	r3, #0
 800adc0:	f100 0114 	add.w	r1, r0, #20
 800adc4:	f100 0210 	add.w	r2, r0, #16
 800adc8:	4618      	mov	r0, r3
 800adca:	4553      	cmp	r3, sl
 800adcc:	db33      	blt.n	800ae36 <__lshift+0xb6>
 800adce:	6920      	ldr	r0, [r4, #16]
 800add0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800add4:	f104 0314 	add.w	r3, r4, #20
 800add8:	f019 091f 	ands.w	r9, r9, #31
 800addc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ade0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ade4:	d02b      	beq.n	800ae3e <__lshift+0xbe>
 800ade6:	468a      	mov	sl, r1
 800ade8:	2200      	movs	r2, #0
 800adea:	f1c9 0e20 	rsb	lr, r9, #32
 800adee:	6818      	ldr	r0, [r3, #0]
 800adf0:	fa00 f009 	lsl.w	r0, r0, r9
 800adf4:	4310      	orrs	r0, r2
 800adf6:	f84a 0b04 	str.w	r0, [sl], #4
 800adfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800adfe:	459c      	cmp	ip, r3
 800ae00:	fa22 f20e 	lsr.w	r2, r2, lr
 800ae04:	d8f3      	bhi.n	800adee <__lshift+0x6e>
 800ae06:	ebac 0304 	sub.w	r3, ip, r4
 800ae0a:	3b15      	subs	r3, #21
 800ae0c:	f023 0303 	bic.w	r3, r3, #3
 800ae10:	3304      	adds	r3, #4
 800ae12:	f104 0015 	add.w	r0, r4, #21
 800ae16:	4584      	cmp	ip, r0
 800ae18:	bf38      	it	cc
 800ae1a:	2304      	movcc	r3, #4
 800ae1c:	50ca      	str	r2, [r1, r3]
 800ae1e:	b10a      	cbz	r2, 800ae24 <__lshift+0xa4>
 800ae20:	f108 0602 	add.w	r6, r8, #2
 800ae24:	3e01      	subs	r6, #1
 800ae26:	4638      	mov	r0, r7
 800ae28:	4621      	mov	r1, r4
 800ae2a:	612e      	str	r6, [r5, #16]
 800ae2c:	f7ff fddc 	bl	800a9e8 <_Bfree>
 800ae30:	4628      	mov	r0, r5
 800ae32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae36:	f842 0f04 	str.w	r0, [r2, #4]!
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	e7c5      	b.n	800adca <__lshift+0x4a>
 800ae3e:	3904      	subs	r1, #4
 800ae40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae44:	459c      	cmp	ip, r3
 800ae46:	f841 2f04 	str.w	r2, [r1, #4]!
 800ae4a:	d8f9      	bhi.n	800ae40 <__lshift+0xc0>
 800ae4c:	e7ea      	b.n	800ae24 <__lshift+0xa4>
 800ae4e:	bf00      	nop
 800ae50:	0800b980 	.word	0x0800b980
 800ae54:	0800b991 	.word	0x0800b991

0800ae58 <__mcmp>:
 800ae58:	4603      	mov	r3, r0
 800ae5a:	690a      	ldr	r2, [r1, #16]
 800ae5c:	6900      	ldr	r0, [r0, #16]
 800ae5e:	b530      	push	{r4, r5, lr}
 800ae60:	1a80      	subs	r0, r0, r2
 800ae62:	d10e      	bne.n	800ae82 <__mcmp+0x2a>
 800ae64:	3314      	adds	r3, #20
 800ae66:	3114      	adds	r1, #20
 800ae68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ae6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ae70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ae74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ae78:	4295      	cmp	r5, r2
 800ae7a:	d003      	beq.n	800ae84 <__mcmp+0x2c>
 800ae7c:	d205      	bcs.n	800ae8a <__mcmp+0x32>
 800ae7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ae82:	bd30      	pop	{r4, r5, pc}
 800ae84:	42a3      	cmp	r3, r4
 800ae86:	d3f3      	bcc.n	800ae70 <__mcmp+0x18>
 800ae88:	e7fb      	b.n	800ae82 <__mcmp+0x2a>
 800ae8a:	2001      	movs	r0, #1
 800ae8c:	e7f9      	b.n	800ae82 <__mcmp+0x2a>
	...

0800ae90 <__mdiff>:
 800ae90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae94:	4689      	mov	r9, r1
 800ae96:	4606      	mov	r6, r0
 800ae98:	4611      	mov	r1, r2
 800ae9a:	4648      	mov	r0, r9
 800ae9c:	4614      	mov	r4, r2
 800ae9e:	f7ff ffdb 	bl	800ae58 <__mcmp>
 800aea2:	1e05      	subs	r5, r0, #0
 800aea4:	d112      	bne.n	800aecc <__mdiff+0x3c>
 800aea6:	4629      	mov	r1, r5
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f7ff fd5d 	bl	800a968 <_Balloc>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	b928      	cbnz	r0, 800aebe <__mdiff+0x2e>
 800aeb2:	f240 2137 	movw	r1, #567	@ 0x237
 800aeb6:	4b3e      	ldr	r3, [pc, #248]	@ (800afb0 <__mdiff+0x120>)
 800aeb8:	483e      	ldr	r0, [pc, #248]	@ (800afb4 <__mdiff+0x124>)
 800aeba:	f000 f98b 	bl	800b1d4 <__assert_func>
 800aebe:	2301      	movs	r3, #1
 800aec0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aec4:	4610      	mov	r0, r2
 800aec6:	b003      	add	sp, #12
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aecc:	bfbc      	itt	lt
 800aece:	464b      	movlt	r3, r9
 800aed0:	46a1      	movlt	r9, r4
 800aed2:	4630      	mov	r0, r6
 800aed4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aed8:	bfba      	itte	lt
 800aeda:	461c      	movlt	r4, r3
 800aedc:	2501      	movlt	r5, #1
 800aede:	2500      	movge	r5, #0
 800aee0:	f7ff fd42 	bl	800a968 <_Balloc>
 800aee4:	4602      	mov	r2, r0
 800aee6:	b918      	cbnz	r0, 800aef0 <__mdiff+0x60>
 800aee8:	f240 2145 	movw	r1, #581	@ 0x245
 800aeec:	4b30      	ldr	r3, [pc, #192]	@ (800afb0 <__mdiff+0x120>)
 800aeee:	e7e3      	b.n	800aeb8 <__mdiff+0x28>
 800aef0:	f100 0b14 	add.w	fp, r0, #20
 800aef4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aef8:	f109 0310 	add.w	r3, r9, #16
 800aefc:	60c5      	str	r5, [r0, #12]
 800aefe:	f04f 0c00 	mov.w	ip, #0
 800af02:	f109 0514 	add.w	r5, r9, #20
 800af06:	46d9      	mov	r9, fp
 800af08:	6926      	ldr	r6, [r4, #16]
 800af0a:	f104 0e14 	add.w	lr, r4, #20
 800af0e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800af12:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800af16:	9301      	str	r3, [sp, #4]
 800af18:	9b01      	ldr	r3, [sp, #4]
 800af1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800af1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800af22:	b281      	uxth	r1, r0
 800af24:	9301      	str	r3, [sp, #4]
 800af26:	fa1f f38a 	uxth.w	r3, sl
 800af2a:	1a5b      	subs	r3, r3, r1
 800af2c:	0c00      	lsrs	r0, r0, #16
 800af2e:	4463      	add	r3, ip
 800af30:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800af34:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800af38:	b29b      	uxth	r3, r3
 800af3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800af3e:	4576      	cmp	r6, lr
 800af40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af44:	f849 3b04 	str.w	r3, [r9], #4
 800af48:	d8e6      	bhi.n	800af18 <__mdiff+0x88>
 800af4a:	1b33      	subs	r3, r6, r4
 800af4c:	3b15      	subs	r3, #21
 800af4e:	f023 0303 	bic.w	r3, r3, #3
 800af52:	3415      	adds	r4, #21
 800af54:	3304      	adds	r3, #4
 800af56:	42a6      	cmp	r6, r4
 800af58:	bf38      	it	cc
 800af5a:	2304      	movcc	r3, #4
 800af5c:	441d      	add	r5, r3
 800af5e:	445b      	add	r3, fp
 800af60:	461e      	mov	r6, r3
 800af62:	462c      	mov	r4, r5
 800af64:	4544      	cmp	r4, r8
 800af66:	d30e      	bcc.n	800af86 <__mdiff+0xf6>
 800af68:	f108 0103 	add.w	r1, r8, #3
 800af6c:	1b49      	subs	r1, r1, r5
 800af6e:	f021 0103 	bic.w	r1, r1, #3
 800af72:	3d03      	subs	r5, #3
 800af74:	45a8      	cmp	r8, r5
 800af76:	bf38      	it	cc
 800af78:	2100      	movcc	r1, #0
 800af7a:	440b      	add	r3, r1
 800af7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800af80:	b199      	cbz	r1, 800afaa <__mdiff+0x11a>
 800af82:	6117      	str	r7, [r2, #16]
 800af84:	e79e      	b.n	800aec4 <__mdiff+0x34>
 800af86:	46e6      	mov	lr, ip
 800af88:	f854 1b04 	ldr.w	r1, [r4], #4
 800af8c:	fa1f fc81 	uxth.w	ip, r1
 800af90:	44f4      	add	ip, lr
 800af92:	0c08      	lsrs	r0, r1, #16
 800af94:	4471      	add	r1, lr
 800af96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800af9a:	b289      	uxth	r1, r1
 800af9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800afa0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800afa4:	f846 1b04 	str.w	r1, [r6], #4
 800afa8:	e7dc      	b.n	800af64 <__mdiff+0xd4>
 800afaa:	3f01      	subs	r7, #1
 800afac:	e7e6      	b.n	800af7c <__mdiff+0xec>
 800afae:	bf00      	nop
 800afb0:	0800b980 	.word	0x0800b980
 800afb4:	0800b991 	.word	0x0800b991

0800afb8 <__d2b>:
 800afb8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800afbc:	2101      	movs	r1, #1
 800afbe:	4690      	mov	r8, r2
 800afc0:	4699      	mov	r9, r3
 800afc2:	9e08      	ldr	r6, [sp, #32]
 800afc4:	f7ff fcd0 	bl	800a968 <_Balloc>
 800afc8:	4604      	mov	r4, r0
 800afca:	b930      	cbnz	r0, 800afda <__d2b+0x22>
 800afcc:	4602      	mov	r2, r0
 800afce:	f240 310f 	movw	r1, #783	@ 0x30f
 800afd2:	4b23      	ldr	r3, [pc, #140]	@ (800b060 <__d2b+0xa8>)
 800afd4:	4823      	ldr	r0, [pc, #140]	@ (800b064 <__d2b+0xac>)
 800afd6:	f000 f8fd 	bl	800b1d4 <__assert_func>
 800afda:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800afde:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800afe2:	b10d      	cbz	r5, 800afe8 <__d2b+0x30>
 800afe4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	f1b8 0300 	subs.w	r3, r8, #0
 800afee:	d024      	beq.n	800b03a <__d2b+0x82>
 800aff0:	4668      	mov	r0, sp
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	f7ff fd7f 	bl	800aaf6 <__lo0bits>
 800aff8:	e9dd 1200 	ldrd	r1, r2, [sp]
 800affc:	b1d8      	cbz	r0, 800b036 <__d2b+0x7e>
 800affe:	f1c0 0320 	rsb	r3, r0, #32
 800b002:	fa02 f303 	lsl.w	r3, r2, r3
 800b006:	430b      	orrs	r3, r1
 800b008:	40c2      	lsrs	r2, r0
 800b00a:	6163      	str	r3, [r4, #20]
 800b00c:	9201      	str	r2, [sp, #4]
 800b00e:	9b01      	ldr	r3, [sp, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	bf0c      	ite	eq
 800b014:	2201      	moveq	r2, #1
 800b016:	2202      	movne	r2, #2
 800b018:	61a3      	str	r3, [r4, #24]
 800b01a:	6122      	str	r2, [r4, #16]
 800b01c:	b1ad      	cbz	r5, 800b04a <__d2b+0x92>
 800b01e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b022:	4405      	add	r5, r0
 800b024:	6035      	str	r5, [r6, #0]
 800b026:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b02c:	6018      	str	r0, [r3, #0]
 800b02e:	4620      	mov	r0, r4
 800b030:	b002      	add	sp, #8
 800b032:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b036:	6161      	str	r1, [r4, #20]
 800b038:	e7e9      	b.n	800b00e <__d2b+0x56>
 800b03a:	a801      	add	r0, sp, #4
 800b03c:	f7ff fd5b 	bl	800aaf6 <__lo0bits>
 800b040:	9b01      	ldr	r3, [sp, #4]
 800b042:	2201      	movs	r2, #1
 800b044:	6163      	str	r3, [r4, #20]
 800b046:	3020      	adds	r0, #32
 800b048:	e7e7      	b.n	800b01a <__d2b+0x62>
 800b04a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b04e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b052:	6030      	str	r0, [r6, #0]
 800b054:	6918      	ldr	r0, [r3, #16]
 800b056:	f7ff fd2f 	bl	800aab8 <__hi0bits>
 800b05a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b05e:	e7e4      	b.n	800b02a <__d2b+0x72>
 800b060:	0800b980 	.word	0x0800b980
 800b064:	0800b991 	.word	0x0800b991

0800b068 <__sflush_r>:
 800b068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b06c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b06e:	0716      	lsls	r6, r2, #28
 800b070:	4605      	mov	r5, r0
 800b072:	460c      	mov	r4, r1
 800b074:	d454      	bmi.n	800b120 <__sflush_r+0xb8>
 800b076:	684b      	ldr	r3, [r1, #4]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	dc02      	bgt.n	800b082 <__sflush_r+0x1a>
 800b07c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b07e:	2b00      	cmp	r3, #0
 800b080:	dd48      	ble.n	800b114 <__sflush_r+0xac>
 800b082:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b084:	2e00      	cmp	r6, #0
 800b086:	d045      	beq.n	800b114 <__sflush_r+0xac>
 800b088:	2300      	movs	r3, #0
 800b08a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b08e:	682f      	ldr	r7, [r5, #0]
 800b090:	6a21      	ldr	r1, [r4, #32]
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	d030      	beq.n	800b0f8 <__sflush_r+0x90>
 800b096:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b098:	89a3      	ldrh	r3, [r4, #12]
 800b09a:	0759      	lsls	r1, r3, #29
 800b09c:	d505      	bpl.n	800b0aa <__sflush_r+0x42>
 800b09e:	6863      	ldr	r3, [r4, #4]
 800b0a0:	1ad2      	subs	r2, r2, r3
 800b0a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0a4:	b10b      	cbz	r3, 800b0aa <__sflush_r+0x42>
 800b0a6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0a8:	1ad2      	subs	r2, r2, r3
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0b0:	6a21      	ldr	r1, [r4, #32]
 800b0b2:	47b0      	blx	r6
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	89a3      	ldrh	r3, [r4, #12]
 800b0b8:	d106      	bne.n	800b0c8 <__sflush_r+0x60>
 800b0ba:	6829      	ldr	r1, [r5, #0]
 800b0bc:	291d      	cmp	r1, #29
 800b0be:	d82b      	bhi.n	800b118 <__sflush_r+0xb0>
 800b0c0:	4a28      	ldr	r2, [pc, #160]	@ (800b164 <__sflush_r+0xfc>)
 800b0c2:	410a      	asrs	r2, r1
 800b0c4:	07d6      	lsls	r6, r2, #31
 800b0c6:	d427      	bmi.n	800b118 <__sflush_r+0xb0>
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	6062      	str	r2, [r4, #4]
 800b0cc:	6922      	ldr	r2, [r4, #16]
 800b0ce:	04d9      	lsls	r1, r3, #19
 800b0d0:	6022      	str	r2, [r4, #0]
 800b0d2:	d504      	bpl.n	800b0de <__sflush_r+0x76>
 800b0d4:	1c42      	adds	r2, r0, #1
 800b0d6:	d101      	bne.n	800b0dc <__sflush_r+0x74>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	b903      	cbnz	r3, 800b0de <__sflush_r+0x76>
 800b0dc:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0e0:	602f      	str	r7, [r5, #0]
 800b0e2:	b1b9      	cbz	r1, 800b114 <__sflush_r+0xac>
 800b0e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b0e8:	4299      	cmp	r1, r3
 800b0ea:	d002      	beq.n	800b0f2 <__sflush_r+0x8a>
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	f7ff fbf3 	bl	800a8d8 <_free_r>
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b0f6:	e00d      	b.n	800b114 <__sflush_r+0xac>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	47b0      	blx	r6
 800b0fe:	4602      	mov	r2, r0
 800b100:	1c50      	adds	r0, r2, #1
 800b102:	d1c9      	bne.n	800b098 <__sflush_r+0x30>
 800b104:	682b      	ldr	r3, [r5, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d0c6      	beq.n	800b098 <__sflush_r+0x30>
 800b10a:	2b1d      	cmp	r3, #29
 800b10c:	d001      	beq.n	800b112 <__sflush_r+0xaa>
 800b10e:	2b16      	cmp	r3, #22
 800b110:	d11d      	bne.n	800b14e <__sflush_r+0xe6>
 800b112:	602f      	str	r7, [r5, #0]
 800b114:	2000      	movs	r0, #0
 800b116:	e021      	b.n	800b15c <__sflush_r+0xf4>
 800b118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b11c:	b21b      	sxth	r3, r3
 800b11e:	e01a      	b.n	800b156 <__sflush_r+0xee>
 800b120:	690f      	ldr	r7, [r1, #16]
 800b122:	2f00      	cmp	r7, #0
 800b124:	d0f6      	beq.n	800b114 <__sflush_r+0xac>
 800b126:	0793      	lsls	r3, r2, #30
 800b128:	bf18      	it	ne
 800b12a:	2300      	movne	r3, #0
 800b12c:	680e      	ldr	r6, [r1, #0]
 800b12e:	bf08      	it	eq
 800b130:	694b      	ldreq	r3, [r1, #20]
 800b132:	1bf6      	subs	r6, r6, r7
 800b134:	600f      	str	r7, [r1, #0]
 800b136:	608b      	str	r3, [r1, #8]
 800b138:	2e00      	cmp	r6, #0
 800b13a:	ddeb      	ble.n	800b114 <__sflush_r+0xac>
 800b13c:	4633      	mov	r3, r6
 800b13e:	463a      	mov	r2, r7
 800b140:	4628      	mov	r0, r5
 800b142:	6a21      	ldr	r1, [r4, #32]
 800b144:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b148:	47e0      	blx	ip
 800b14a:	2800      	cmp	r0, #0
 800b14c:	dc07      	bgt.n	800b15e <__sflush_r+0xf6>
 800b14e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b156:	f04f 30ff 	mov.w	r0, #4294967295
 800b15a:	81a3      	strh	r3, [r4, #12]
 800b15c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b15e:	4407      	add	r7, r0
 800b160:	1a36      	subs	r6, r6, r0
 800b162:	e7e9      	b.n	800b138 <__sflush_r+0xd0>
 800b164:	dfbffffe 	.word	0xdfbffffe

0800b168 <_fflush_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	690b      	ldr	r3, [r1, #16]
 800b16c:	4605      	mov	r5, r0
 800b16e:	460c      	mov	r4, r1
 800b170:	b913      	cbnz	r3, 800b178 <_fflush_r+0x10>
 800b172:	2500      	movs	r5, #0
 800b174:	4628      	mov	r0, r5
 800b176:	bd38      	pop	{r3, r4, r5, pc}
 800b178:	b118      	cbz	r0, 800b182 <_fflush_r+0x1a>
 800b17a:	6a03      	ldr	r3, [r0, #32]
 800b17c:	b90b      	cbnz	r3, 800b182 <_fflush_r+0x1a>
 800b17e:	f7fe fc41 	bl	8009a04 <__sinit>
 800b182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d0f3      	beq.n	800b172 <_fflush_r+0xa>
 800b18a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b18c:	07d0      	lsls	r0, r2, #31
 800b18e:	d404      	bmi.n	800b19a <_fflush_r+0x32>
 800b190:	0599      	lsls	r1, r3, #22
 800b192:	d402      	bmi.n	800b19a <_fflush_r+0x32>
 800b194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b196:	f7fe fd3c 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800b19a:	4628      	mov	r0, r5
 800b19c:	4621      	mov	r1, r4
 800b19e:	f7ff ff63 	bl	800b068 <__sflush_r>
 800b1a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	07da      	lsls	r2, r3, #31
 800b1a8:	d4e4      	bmi.n	800b174 <_fflush_r+0xc>
 800b1aa:	89a3      	ldrh	r3, [r4, #12]
 800b1ac:	059b      	lsls	r3, r3, #22
 800b1ae:	d4e1      	bmi.n	800b174 <_fflush_r+0xc>
 800b1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1b2:	f7fe fd2f 	bl	8009c14 <__retarget_lock_release_recursive>
 800b1b6:	e7dd      	b.n	800b174 <_fflush_r+0xc>

0800b1b8 <memcpy>:
 800b1b8:	440a      	add	r2, r1
 800b1ba:	4291      	cmp	r1, r2
 800b1bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c0:	d100      	bne.n	800b1c4 <memcpy+0xc>
 800b1c2:	4770      	bx	lr
 800b1c4:	b510      	push	{r4, lr}
 800b1c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ca:	4291      	cmp	r1, r2
 800b1cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d0:	d1f9      	bne.n	800b1c6 <memcpy+0xe>
 800b1d2:	bd10      	pop	{r4, pc}

0800b1d4 <__assert_func>:
 800b1d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b1d6:	4614      	mov	r4, r2
 800b1d8:	461a      	mov	r2, r3
 800b1da:	4b09      	ldr	r3, [pc, #36]	@ (800b200 <__assert_func+0x2c>)
 800b1dc:	4605      	mov	r5, r0
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	68d8      	ldr	r0, [r3, #12]
 800b1e2:	b954      	cbnz	r4, 800b1fa <__assert_func+0x26>
 800b1e4:	4b07      	ldr	r3, [pc, #28]	@ (800b204 <__assert_func+0x30>)
 800b1e6:	461c      	mov	r4, r3
 800b1e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b1ec:	9100      	str	r1, [sp, #0]
 800b1ee:	462b      	mov	r3, r5
 800b1f0:	4905      	ldr	r1, [pc, #20]	@ (800b208 <__assert_func+0x34>)
 800b1f2:	f000 f841 	bl	800b278 <fiprintf>
 800b1f6:	f000 f851 	bl	800b29c <abort>
 800b1fa:	4b04      	ldr	r3, [pc, #16]	@ (800b20c <__assert_func+0x38>)
 800b1fc:	e7f4      	b.n	800b1e8 <__assert_func+0x14>
 800b1fe:	bf00      	nop
 800b200:	200000dc 	.word	0x200000dc
 800b204:	0800bb2d 	.word	0x0800bb2d
 800b208:	0800baff 	.word	0x0800baff
 800b20c:	0800baf2 	.word	0x0800baf2

0800b210 <_calloc_r>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	fba1 5402 	umull	r5, r4, r1, r2
 800b216:	b93c      	cbnz	r4, 800b228 <_calloc_r+0x18>
 800b218:	4629      	mov	r1, r5
 800b21a:	f7fd fe7f 	bl	8008f1c <_malloc_r>
 800b21e:	4606      	mov	r6, r0
 800b220:	b928      	cbnz	r0, 800b22e <_calloc_r+0x1e>
 800b222:	2600      	movs	r6, #0
 800b224:	4630      	mov	r0, r6
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	220c      	movs	r2, #12
 800b22a:	6002      	str	r2, [r0, #0]
 800b22c:	e7f9      	b.n	800b222 <_calloc_r+0x12>
 800b22e:	462a      	mov	r2, r5
 800b230:	4621      	mov	r1, r4
 800b232:	f7fe fc60 	bl	8009af6 <memset>
 800b236:	e7f5      	b.n	800b224 <_calloc_r+0x14>

0800b238 <__ascii_mbtowc>:
 800b238:	b082      	sub	sp, #8
 800b23a:	b901      	cbnz	r1, 800b23e <__ascii_mbtowc+0x6>
 800b23c:	a901      	add	r1, sp, #4
 800b23e:	b142      	cbz	r2, 800b252 <__ascii_mbtowc+0x1a>
 800b240:	b14b      	cbz	r3, 800b256 <__ascii_mbtowc+0x1e>
 800b242:	7813      	ldrb	r3, [r2, #0]
 800b244:	600b      	str	r3, [r1, #0]
 800b246:	7812      	ldrb	r2, [r2, #0]
 800b248:	1e10      	subs	r0, r2, #0
 800b24a:	bf18      	it	ne
 800b24c:	2001      	movne	r0, #1
 800b24e:	b002      	add	sp, #8
 800b250:	4770      	bx	lr
 800b252:	4610      	mov	r0, r2
 800b254:	e7fb      	b.n	800b24e <__ascii_mbtowc+0x16>
 800b256:	f06f 0001 	mvn.w	r0, #1
 800b25a:	e7f8      	b.n	800b24e <__ascii_mbtowc+0x16>

0800b25c <__ascii_wctomb>:
 800b25c:	4603      	mov	r3, r0
 800b25e:	4608      	mov	r0, r1
 800b260:	b141      	cbz	r1, 800b274 <__ascii_wctomb+0x18>
 800b262:	2aff      	cmp	r2, #255	@ 0xff
 800b264:	d904      	bls.n	800b270 <__ascii_wctomb+0x14>
 800b266:	228a      	movs	r2, #138	@ 0x8a
 800b268:	f04f 30ff 	mov.w	r0, #4294967295
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	4770      	bx	lr
 800b270:	2001      	movs	r0, #1
 800b272:	700a      	strb	r2, [r1, #0]
 800b274:	4770      	bx	lr
	...

0800b278 <fiprintf>:
 800b278:	b40e      	push	{r1, r2, r3}
 800b27a:	b503      	push	{r0, r1, lr}
 800b27c:	4601      	mov	r1, r0
 800b27e:	ab03      	add	r3, sp, #12
 800b280:	4805      	ldr	r0, [pc, #20]	@ (800b298 <fiprintf+0x20>)
 800b282:	f853 2b04 	ldr.w	r2, [r3], #4
 800b286:	6800      	ldr	r0, [r0, #0]
 800b288:	9301      	str	r3, [sp, #4]
 800b28a:	f000 f835 	bl	800b2f8 <_vfiprintf_r>
 800b28e:	b002      	add	sp, #8
 800b290:	f85d eb04 	ldr.w	lr, [sp], #4
 800b294:	b003      	add	sp, #12
 800b296:	4770      	bx	lr
 800b298:	200000dc 	.word	0x200000dc

0800b29c <abort>:
 800b29c:	2006      	movs	r0, #6
 800b29e:	b508      	push	{r3, lr}
 800b2a0:	f000 f9fe 	bl	800b6a0 <raise>
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	f7f8 feb6 	bl	8004016 <_exit>

0800b2aa <__sfputc_r>:
 800b2aa:	6893      	ldr	r3, [r2, #8]
 800b2ac:	b410      	push	{r4}
 800b2ae:	3b01      	subs	r3, #1
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	6093      	str	r3, [r2, #8]
 800b2b4:	da07      	bge.n	800b2c6 <__sfputc_r+0x1c>
 800b2b6:	6994      	ldr	r4, [r2, #24]
 800b2b8:	42a3      	cmp	r3, r4
 800b2ba:	db01      	blt.n	800b2c0 <__sfputc_r+0x16>
 800b2bc:	290a      	cmp	r1, #10
 800b2be:	d102      	bne.n	800b2c6 <__sfputc_r+0x1c>
 800b2c0:	bc10      	pop	{r4}
 800b2c2:	f000 b931 	b.w	800b528 <__swbuf_r>
 800b2c6:	6813      	ldr	r3, [r2, #0]
 800b2c8:	1c58      	adds	r0, r3, #1
 800b2ca:	6010      	str	r0, [r2, #0]
 800b2cc:	7019      	strb	r1, [r3, #0]
 800b2ce:	4608      	mov	r0, r1
 800b2d0:	bc10      	pop	{r4}
 800b2d2:	4770      	bx	lr

0800b2d4 <__sfputs_r>:
 800b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460f      	mov	r7, r1
 800b2da:	4614      	mov	r4, r2
 800b2dc:	18d5      	adds	r5, r2, r3
 800b2de:	42ac      	cmp	r4, r5
 800b2e0:	d101      	bne.n	800b2e6 <__sfputs_r+0x12>
 800b2e2:	2000      	movs	r0, #0
 800b2e4:	e007      	b.n	800b2f6 <__sfputs_r+0x22>
 800b2e6:	463a      	mov	r2, r7
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ee:	f7ff ffdc 	bl	800b2aa <__sfputc_r>
 800b2f2:	1c43      	adds	r3, r0, #1
 800b2f4:	d1f3      	bne.n	800b2de <__sfputs_r+0xa>
 800b2f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2f8 <_vfiprintf_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	460d      	mov	r5, r1
 800b2fe:	4614      	mov	r4, r2
 800b300:	4698      	mov	r8, r3
 800b302:	4606      	mov	r6, r0
 800b304:	b09d      	sub	sp, #116	@ 0x74
 800b306:	b118      	cbz	r0, 800b310 <_vfiprintf_r+0x18>
 800b308:	6a03      	ldr	r3, [r0, #32]
 800b30a:	b90b      	cbnz	r3, 800b310 <_vfiprintf_r+0x18>
 800b30c:	f7fe fb7a 	bl	8009a04 <__sinit>
 800b310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b312:	07d9      	lsls	r1, r3, #31
 800b314:	d405      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	059a      	lsls	r2, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_vfiprintf_r+0x2a>
 800b31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31e:	f7fe fc78 	bl	8009c12 <__retarget_lock_acquire_recursive>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	071b      	lsls	r3, r3, #28
 800b326:	d501      	bpl.n	800b32c <_vfiprintf_r+0x34>
 800b328:	692b      	ldr	r3, [r5, #16]
 800b32a:	b99b      	cbnz	r3, 800b354 <_vfiprintf_r+0x5c>
 800b32c:	4629      	mov	r1, r5
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 f938 	bl	800b5a4 <__swsetup_r>
 800b334:	b170      	cbz	r0, 800b354 <_vfiprintf_r+0x5c>
 800b336:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b338:	07dc      	lsls	r4, r3, #31
 800b33a:	d504      	bpl.n	800b346 <_vfiprintf_r+0x4e>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	b01d      	add	sp, #116	@ 0x74
 800b342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	0598      	lsls	r0, r3, #22
 800b34a:	d4f7      	bmi.n	800b33c <_vfiprintf_r+0x44>
 800b34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34e:	f7fe fc61 	bl	8009c14 <__retarget_lock_release_recursive>
 800b352:	e7f3      	b.n	800b33c <_vfiprintf_r+0x44>
 800b354:	2300      	movs	r3, #0
 800b356:	9309      	str	r3, [sp, #36]	@ 0x24
 800b358:	2320      	movs	r3, #32
 800b35a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b35e:	2330      	movs	r3, #48	@ 0x30
 800b360:	f04f 0901 	mov.w	r9, #1
 800b364:	f8cd 800c 	str.w	r8, [sp, #12]
 800b368:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b514 <_vfiprintf_r+0x21c>
 800b36c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b370:	4623      	mov	r3, r4
 800b372:	469a      	mov	sl, r3
 800b374:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b378:	b10a      	cbz	r2, 800b37e <_vfiprintf_r+0x86>
 800b37a:	2a25      	cmp	r2, #37	@ 0x25
 800b37c:	d1f9      	bne.n	800b372 <_vfiprintf_r+0x7a>
 800b37e:	ebba 0b04 	subs.w	fp, sl, r4
 800b382:	d00b      	beq.n	800b39c <_vfiprintf_r+0xa4>
 800b384:	465b      	mov	r3, fp
 800b386:	4622      	mov	r2, r4
 800b388:	4629      	mov	r1, r5
 800b38a:	4630      	mov	r0, r6
 800b38c:	f7ff ffa2 	bl	800b2d4 <__sfputs_r>
 800b390:	3001      	adds	r0, #1
 800b392:	f000 80a7 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b396:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b398:	445a      	add	r2, fp
 800b39a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b39c:	f89a 3000 	ldrb.w	r3, [sl]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	f000 809f 	beq.w	800b4e4 <_vfiprintf_r+0x1ec>
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b3ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3b0:	f10a 0a01 	add.w	sl, sl, #1
 800b3b4:	9304      	str	r3, [sp, #16]
 800b3b6:	9307      	str	r3, [sp, #28]
 800b3b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3bc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3be:	4654      	mov	r4, sl
 800b3c0:	2205      	movs	r2, #5
 800b3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3c6:	4853      	ldr	r0, [pc, #332]	@ (800b514 <_vfiprintf_r+0x21c>)
 800b3c8:	f7fe fc25 	bl	8009c16 <memchr>
 800b3cc:	9a04      	ldr	r2, [sp, #16]
 800b3ce:	b9d8      	cbnz	r0, 800b408 <_vfiprintf_r+0x110>
 800b3d0:	06d1      	lsls	r1, r2, #27
 800b3d2:	bf44      	itt	mi
 800b3d4:	2320      	movmi	r3, #32
 800b3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3da:	0713      	lsls	r3, r2, #28
 800b3dc:	bf44      	itt	mi
 800b3de:	232b      	movmi	r3, #43	@ 0x2b
 800b3e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b3e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3e8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b3ea:	d015      	beq.n	800b418 <_vfiprintf_r+0x120>
 800b3ec:	4654      	mov	r4, sl
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	f04f 0c0a 	mov.w	ip, #10
 800b3f4:	9a07      	ldr	r2, [sp, #28]
 800b3f6:	4621      	mov	r1, r4
 800b3f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3fc:	3b30      	subs	r3, #48	@ 0x30
 800b3fe:	2b09      	cmp	r3, #9
 800b400:	d94b      	bls.n	800b49a <_vfiprintf_r+0x1a2>
 800b402:	b1b0      	cbz	r0, 800b432 <_vfiprintf_r+0x13a>
 800b404:	9207      	str	r2, [sp, #28]
 800b406:	e014      	b.n	800b432 <_vfiprintf_r+0x13a>
 800b408:	eba0 0308 	sub.w	r3, r0, r8
 800b40c:	fa09 f303 	lsl.w	r3, r9, r3
 800b410:	4313      	orrs	r3, r2
 800b412:	46a2      	mov	sl, r4
 800b414:	9304      	str	r3, [sp, #16]
 800b416:	e7d2      	b.n	800b3be <_vfiprintf_r+0xc6>
 800b418:	9b03      	ldr	r3, [sp, #12]
 800b41a:	1d19      	adds	r1, r3, #4
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	9103      	str	r1, [sp, #12]
 800b420:	2b00      	cmp	r3, #0
 800b422:	bfbb      	ittet	lt
 800b424:	425b      	neglt	r3, r3
 800b426:	f042 0202 	orrlt.w	r2, r2, #2
 800b42a:	9307      	strge	r3, [sp, #28]
 800b42c:	9307      	strlt	r3, [sp, #28]
 800b42e:	bfb8      	it	lt
 800b430:	9204      	strlt	r2, [sp, #16]
 800b432:	7823      	ldrb	r3, [r4, #0]
 800b434:	2b2e      	cmp	r3, #46	@ 0x2e
 800b436:	d10a      	bne.n	800b44e <_vfiprintf_r+0x156>
 800b438:	7863      	ldrb	r3, [r4, #1]
 800b43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b43c:	d132      	bne.n	800b4a4 <_vfiprintf_r+0x1ac>
 800b43e:	9b03      	ldr	r3, [sp, #12]
 800b440:	3402      	adds	r4, #2
 800b442:	1d1a      	adds	r2, r3, #4
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	9203      	str	r2, [sp, #12]
 800b448:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b44c:	9305      	str	r3, [sp, #20]
 800b44e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b518 <_vfiprintf_r+0x220>
 800b452:	2203      	movs	r2, #3
 800b454:	4650      	mov	r0, sl
 800b456:	7821      	ldrb	r1, [r4, #0]
 800b458:	f7fe fbdd 	bl	8009c16 <memchr>
 800b45c:	b138      	cbz	r0, 800b46e <_vfiprintf_r+0x176>
 800b45e:	2240      	movs	r2, #64	@ 0x40
 800b460:	9b04      	ldr	r3, [sp, #16]
 800b462:	eba0 000a 	sub.w	r0, r0, sl
 800b466:	4082      	lsls	r2, r0
 800b468:	4313      	orrs	r3, r2
 800b46a:	3401      	adds	r4, #1
 800b46c:	9304      	str	r3, [sp, #16]
 800b46e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b472:	2206      	movs	r2, #6
 800b474:	4829      	ldr	r0, [pc, #164]	@ (800b51c <_vfiprintf_r+0x224>)
 800b476:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b47a:	f7fe fbcc 	bl	8009c16 <memchr>
 800b47e:	2800      	cmp	r0, #0
 800b480:	d03f      	beq.n	800b502 <_vfiprintf_r+0x20a>
 800b482:	4b27      	ldr	r3, [pc, #156]	@ (800b520 <_vfiprintf_r+0x228>)
 800b484:	bb1b      	cbnz	r3, 800b4ce <_vfiprintf_r+0x1d6>
 800b486:	9b03      	ldr	r3, [sp, #12]
 800b488:	3307      	adds	r3, #7
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	3308      	adds	r3, #8
 800b490:	9303      	str	r3, [sp, #12]
 800b492:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b494:	443b      	add	r3, r7
 800b496:	9309      	str	r3, [sp, #36]	@ 0x24
 800b498:	e76a      	b.n	800b370 <_vfiprintf_r+0x78>
 800b49a:	460c      	mov	r4, r1
 800b49c:	2001      	movs	r0, #1
 800b49e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4a2:	e7a8      	b.n	800b3f6 <_vfiprintf_r+0xfe>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	f04f 0c0a 	mov.w	ip, #10
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	3401      	adds	r4, #1
 800b4ae:	9305      	str	r3, [sp, #20]
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4b6:	3a30      	subs	r2, #48	@ 0x30
 800b4b8:	2a09      	cmp	r2, #9
 800b4ba:	d903      	bls.n	800b4c4 <_vfiprintf_r+0x1cc>
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0c6      	beq.n	800b44e <_vfiprintf_r+0x156>
 800b4c0:	9105      	str	r1, [sp, #20]
 800b4c2:	e7c4      	b.n	800b44e <_vfiprintf_r+0x156>
 800b4c4:	4604      	mov	r4, r0
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4cc:	e7f0      	b.n	800b4b0 <_vfiprintf_r+0x1b8>
 800b4ce:	ab03      	add	r3, sp, #12
 800b4d0:	9300      	str	r3, [sp, #0]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	4b13      	ldr	r3, [pc, #76]	@ (800b524 <_vfiprintf_r+0x22c>)
 800b4d8:	a904      	add	r1, sp, #16
 800b4da:	f7fd fe49 	bl	8009170 <_printf_float>
 800b4de:	4607      	mov	r7, r0
 800b4e0:	1c78      	adds	r0, r7, #1
 800b4e2:	d1d6      	bne.n	800b492 <_vfiprintf_r+0x19a>
 800b4e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b4e6:	07d9      	lsls	r1, r3, #31
 800b4e8:	d405      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4ea:	89ab      	ldrh	r3, [r5, #12]
 800b4ec:	059a      	lsls	r2, r3, #22
 800b4ee:	d402      	bmi.n	800b4f6 <_vfiprintf_r+0x1fe>
 800b4f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4f2:	f7fe fb8f 	bl	8009c14 <__retarget_lock_release_recursive>
 800b4f6:	89ab      	ldrh	r3, [r5, #12]
 800b4f8:	065b      	lsls	r3, r3, #25
 800b4fa:	f53f af1f 	bmi.w	800b33c <_vfiprintf_r+0x44>
 800b4fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b500:	e71e      	b.n	800b340 <_vfiprintf_r+0x48>
 800b502:	ab03      	add	r3, sp, #12
 800b504:	9300      	str	r3, [sp, #0]
 800b506:	462a      	mov	r2, r5
 800b508:	4630      	mov	r0, r6
 800b50a:	4b06      	ldr	r3, [pc, #24]	@ (800b524 <_vfiprintf_r+0x22c>)
 800b50c:	a904      	add	r1, sp, #16
 800b50e:	f7fe f8cd 	bl	80096ac <_printf_i>
 800b512:	e7e4      	b.n	800b4de <_vfiprintf_r+0x1e6>
 800b514:	0800bc2f 	.word	0x0800bc2f
 800b518:	0800bc35 	.word	0x0800bc35
 800b51c:	0800bc39 	.word	0x0800bc39
 800b520:	08009171 	.word	0x08009171
 800b524:	0800b2d5 	.word	0x0800b2d5

0800b528 <__swbuf_r>:
 800b528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b52a:	460e      	mov	r6, r1
 800b52c:	4614      	mov	r4, r2
 800b52e:	4605      	mov	r5, r0
 800b530:	b118      	cbz	r0, 800b53a <__swbuf_r+0x12>
 800b532:	6a03      	ldr	r3, [r0, #32]
 800b534:	b90b      	cbnz	r3, 800b53a <__swbuf_r+0x12>
 800b536:	f7fe fa65 	bl	8009a04 <__sinit>
 800b53a:	69a3      	ldr	r3, [r4, #24]
 800b53c:	60a3      	str	r3, [r4, #8]
 800b53e:	89a3      	ldrh	r3, [r4, #12]
 800b540:	071a      	lsls	r2, r3, #28
 800b542:	d501      	bpl.n	800b548 <__swbuf_r+0x20>
 800b544:	6923      	ldr	r3, [r4, #16]
 800b546:	b943      	cbnz	r3, 800b55a <__swbuf_r+0x32>
 800b548:	4621      	mov	r1, r4
 800b54a:	4628      	mov	r0, r5
 800b54c:	f000 f82a 	bl	800b5a4 <__swsetup_r>
 800b550:	b118      	cbz	r0, 800b55a <__swbuf_r+0x32>
 800b552:	f04f 37ff 	mov.w	r7, #4294967295
 800b556:	4638      	mov	r0, r7
 800b558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b55a:	6823      	ldr	r3, [r4, #0]
 800b55c:	6922      	ldr	r2, [r4, #16]
 800b55e:	b2f6      	uxtb	r6, r6
 800b560:	1a98      	subs	r0, r3, r2
 800b562:	6963      	ldr	r3, [r4, #20]
 800b564:	4637      	mov	r7, r6
 800b566:	4283      	cmp	r3, r0
 800b568:	dc05      	bgt.n	800b576 <__swbuf_r+0x4e>
 800b56a:	4621      	mov	r1, r4
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7ff fdfb 	bl	800b168 <_fflush_r>
 800b572:	2800      	cmp	r0, #0
 800b574:	d1ed      	bne.n	800b552 <__swbuf_r+0x2a>
 800b576:	68a3      	ldr	r3, [r4, #8]
 800b578:	3b01      	subs	r3, #1
 800b57a:	60a3      	str	r3, [r4, #8]
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	1c5a      	adds	r2, r3, #1
 800b580:	6022      	str	r2, [r4, #0]
 800b582:	701e      	strb	r6, [r3, #0]
 800b584:	6962      	ldr	r2, [r4, #20]
 800b586:	1c43      	adds	r3, r0, #1
 800b588:	429a      	cmp	r2, r3
 800b58a:	d004      	beq.n	800b596 <__swbuf_r+0x6e>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	07db      	lsls	r3, r3, #31
 800b590:	d5e1      	bpl.n	800b556 <__swbuf_r+0x2e>
 800b592:	2e0a      	cmp	r6, #10
 800b594:	d1df      	bne.n	800b556 <__swbuf_r+0x2e>
 800b596:	4621      	mov	r1, r4
 800b598:	4628      	mov	r0, r5
 800b59a:	f7ff fde5 	bl	800b168 <_fflush_r>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d0d9      	beq.n	800b556 <__swbuf_r+0x2e>
 800b5a2:	e7d6      	b.n	800b552 <__swbuf_r+0x2a>

0800b5a4 <__swsetup_r>:
 800b5a4:	b538      	push	{r3, r4, r5, lr}
 800b5a6:	4b29      	ldr	r3, [pc, #164]	@ (800b64c <__swsetup_r+0xa8>)
 800b5a8:	4605      	mov	r5, r0
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	460c      	mov	r4, r1
 800b5ae:	b118      	cbz	r0, 800b5b8 <__swsetup_r+0x14>
 800b5b0:	6a03      	ldr	r3, [r0, #32]
 800b5b2:	b90b      	cbnz	r3, 800b5b8 <__swsetup_r+0x14>
 800b5b4:	f7fe fa26 	bl	8009a04 <__sinit>
 800b5b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5bc:	0719      	lsls	r1, r3, #28
 800b5be:	d422      	bmi.n	800b606 <__swsetup_r+0x62>
 800b5c0:	06da      	lsls	r2, r3, #27
 800b5c2:	d407      	bmi.n	800b5d4 <__swsetup_r+0x30>
 800b5c4:	2209      	movs	r2, #9
 800b5c6:	602a      	str	r2, [r5, #0]
 800b5c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b5d0:	81a3      	strh	r3, [r4, #12]
 800b5d2:	e033      	b.n	800b63c <__swsetup_r+0x98>
 800b5d4:	0758      	lsls	r0, r3, #29
 800b5d6:	d512      	bpl.n	800b5fe <__swsetup_r+0x5a>
 800b5d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b5da:	b141      	cbz	r1, 800b5ee <__swsetup_r+0x4a>
 800b5dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	d002      	beq.n	800b5ea <__swsetup_r+0x46>
 800b5e4:	4628      	mov	r0, r5
 800b5e6:	f7ff f977 	bl	800a8d8 <_free_r>
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800b5ee:	89a3      	ldrh	r3, [r4, #12]
 800b5f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b5f4:	81a3      	strh	r3, [r4, #12]
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	6063      	str	r3, [r4, #4]
 800b5fa:	6923      	ldr	r3, [r4, #16]
 800b5fc:	6023      	str	r3, [r4, #0]
 800b5fe:	89a3      	ldrh	r3, [r4, #12]
 800b600:	f043 0308 	orr.w	r3, r3, #8
 800b604:	81a3      	strh	r3, [r4, #12]
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	b94b      	cbnz	r3, 800b61e <__swsetup_r+0x7a>
 800b60a:	89a3      	ldrh	r3, [r4, #12]
 800b60c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b610:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b614:	d003      	beq.n	800b61e <__swsetup_r+0x7a>
 800b616:	4621      	mov	r1, r4
 800b618:	4628      	mov	r0, r5
 800b61a:	f000 f882 	bl	800b722 <__smakebuf_r>
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	f013 0201 	ands.w	r2, r3, #1
 800b626:	d00a      	beq.n	800b63e <__swsetup_r+0x9a>
 800b628:	2200      	movs	r2, #0
 800b62a:	60a2      	str	r2, [r4, #8]
 800b62c:	6962      	ldr	r2, [r4, #20]
 800b62e:	4252      	negs	r2, r2
 800b630:	61a2      	str	r2, [r4, #24]
 800b632:	6922      	ldr	r2, [r4, #16]
 800b634:	b942      	cbnz	r2, 800b648 <__swsetup_r+0xa4>
 800b636:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b63a:	d1c5      	bne.n	800b5c8 <__swsetup_r+0x24>
 800b63c:	bd38      	pop	{r3, r4, r5, pc}
 800b63e:	0799      	lsls	r1, r3, #30
 800b640:	bf58      	it	pl
 800b642:	6962      	ldrpl	r2, [r4, #20]
 800b644:	60a2      	str	r2, [r4, #8]
 800b646:	e7f4      	b.n	800b632 <__swsetup_r+0x8e>
 800b648:	2000      	movs	r0, #0
 800b64a:	e7f7      	b.n	800b63c <__swsetup_r+0x98>
 800b64c:	200000dc 	.word	0x200000dc

0800b650 <_raise_r>:
 800b650:	291f      	cmp	r1, #31
 800b652:	b538      	push	{r3, r4, r5, lr}
 800b654:	4605      	mov	r5, r0
 800b656:	460c      	mov	r4, r1
 800b658:	d904      	bls.n	800b664 <_raise_r+0x14>
 800b65a:	2316      	movs	r3, #22
 800b65c:	6003      	str	r3, [r0, #0]
 800b65e:	f04f 30ff 	mov.w	r0, #4294967295
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b666:	b112      	cbz	r2, 800b66e <_raise_r+0x1e>
 800b668:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b66c:	b94b      	cbnz	r3, 800b682 <_raise_r+0x32>
 800b66e:	4628      	mov	r0, r5
 800b670:	f000 f830 	bl	800b6d4 <_getpid_r>
 800b674:	4622      	mov	r2, r4
 800b676:	4601      	mov	r1, r0
 800b678:	4628      	mov	r0, r5
 800b67a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b67e:	f000 b817 	b.w	800b6b0 <_kill_r>
 800b682:	2b01      	cmp	r3, #1
 800b684:	d00a      	beq.n	800b69c <_raise_r+0x4c>
 800b686:	1c59      	adds	r1, r3, #1
 800b688:	d103      	bne.n	800b692 <_raise_r+0x42>
 800b68a:	2316      	movs	r3, #22
 800b68c:	6003      	str	r3, [r0, #0]
 800b68e:	2001      	movs	r0, #1
 800b690:	e7e7      	b.n	800b662 <_raise_r+0x12>
 800b692:	2100      	movs	r1, #0
 800b694:	4620      	mov	r0, r4
 800b696:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b69a:	4798      	blx	r3
 800b69c:	2000      	movs	r0, #0
 800b69e:	e7e0      	b.n	800b662 <_raise_r+0x12>

0800b6a0 <raise>:
 800b6a0:	4b02      	ldr	r3, [pc, #8]	@ (800b6ac <raise+0xc>)
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f7ff bfd3 	b.w	800b650 <_raise_r>
 800b6aa:	bf00      	nop
 800b6ac:	200000dc 	.word	0x200000dc

0800b6b0 <_kill_r>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4d06      	ldr	r5, [pc, #24]	@ (800b6d0 <_kill_r+0x20>)
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	4608      	mov	r0, r1
 800b6ba:	4611      	mov	r1, r2
 800b6bc:	602b      	str	r3, [r5, #0]
 800b6be:	f7f8 fc9a 	bl	8003ff6 <_kill>
 800b6c2:	1c43      	adds	r3, r0, #1
 800b6c4:	d102      	bne.n	800b6cc <_kill_r+0x1c>
 800b6c6:	682b      	ldr	r3, [r5, #0]
 800b6c8:	b103      	cbz	r3, 800b6cc <_kill_r+0x1c>
 800b6ca:	6023      	str	r3, [r4, #0]
 800b6cc:	bd38      	pop	{r3, r4, r5, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200007d8 	.word	0x200007d8

0800b6d4 <_getpid_r>:
 800b6d4:	f7f8 bc88 	b.w	8003fe8 <_getpid>

0800b6d8 <__swhatbuf_r>:
 800b6d8:	b570      	push	{r4, r5, r6, lr}
 800b6da:	460c      	mov	r4, r1
 800b6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6e0:	4615      	mov	r5, r2
 800b6e2:	2900      	cmp	r1, #0
 800b6e4:	461e      	mov	r6, r3
 800b6e6:	b096      	sub	sp, #88	@ 0x58
 800b6e8:	da0c      	bge.n	800b704 <__swhatbuf_r+0x2c>
 800b6ea:	89a3      	ldrh	r3, [r4, #12]
 800b6ec:	2100      	movs	r1, #0
 800b6ee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b6f2:	bf14      	ite	ne
 800b6f4:	2340      	movne	r3, #64	@ 0x40
 800b6f6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	6031      	str	r1, [r6, #0]
 800b6fe:	602b      	str	r3, [r5, #0]
 800b700:	b016      	add	sp, #88	@ 0x58
 800b702:	bd70      	pop	{r4, r5, r6, pc}
 800b704:	466a      	mov	r2, sp
 800b706:	f000 f849 	bl	800b79c <_fstat_r>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	dbed      	blt.n	800b6ea <__swhatbuf_r+0x12>
 800b70e:	9901      	ldr	r1, [sp, #4]
 800b710:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b714:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b718:	4259      	negs	r1, r3
 800b71a:	4159      	adcs	r1, r3
 800b71c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b720:	e7eb      	b.n	800b6fa <__swhatbuf_r+0x22>

0800b722 <__smakebuf_r>:
 800b722:	898b      	ldrh	r3, [r1, #12]
 800b724:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b726:	079d      	lsls	r5, r3, #30
 800b728:	4606      	mov	r6, r0
 800b72a:	460c      	mov	r4, r1
 800b72c:	d507      	bpl.n	800b73e <__smakebuf_r+0x1c>
 800b72e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b732:	6023      	str	r3, [r4, #0]
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	2301      	movs	r3, #1
 800b738:	6163      	str	r3, [r4, #20]
 800b73a:	b003      	add	sp, #12
 800b73c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b73e:	466a      	mov	r2, sp
 800b740:	ab01      	add	r3, sp, #4
 800b742:	f7ff ffc9 	bl	800b6d8 <__swhatbuf_r>
 800b746:	9f00      	ldr	r7, [sp, #0]
 800b748:	4605      	mov	r5, r0
 800b74a:	4639      	mov	r1, r7
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7fd fbe5 	bl	8008f1c <_malloc_r>
 800b752:	b948      	cbnz	r0, 800b768 <__smakebuf_r+0x46>
 800b754:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b758:	059a      	lsls	r2, r3, #22
 800b75a:	d4ee      	bmi.n	800b73a <__smakebuf_r+0x18>
 800b75c:	f023 0303 	bic.w	r3, r3, #3
 800b760:	f043 0302 	orr.w	r3, r3, #2
 800b764:	81a3      	strh	r3, [r4, #12]
 800b766:	e7e2      	b.n	800b72e <__smakebuf_r+0xc>
 800b768:	89a3      	ldrh	r3, [r4, #12]
 800b76a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b76e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b772:	81a3      	strh	r3, [r4, #12]
 800b774:	9b01      	ldr	r3, [sp, #4]
 800b776:	6020      	str	r0, [r4, #0]
 800b778:	b15b      	cbz	r3, 800b792 <__smakebuf_r+0x70>
 800b77a:	4630      	mov	r0, r6
 800b77c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b780:	f000 f81e 	bl	800b7c0 <_isatty_r>
 800b784:	b128      	cbz	r0, 800b792 <__smakebuf_r+0x70>
 800b786:	89a3      	ldrh	r3, [r4, #12]
 800b788:	f023 0303 	bic.w	r3, r3, #3
 800b78c:	f043 0301 	orr.w	r3, r3, #1
 800b790:	81a3      	strh	r3, [r4, #12]
 800b792:	89a3      	ldrh	r3, [r4, #12]
 800b794:	431d      	orrs	r5, r3
 800b796:	81a5      	strh	r5, [r4, #12]
 800b798:	e7cf      	b.n	800b73a <__smakebuf_r+0x18>
	...

0800b79c <_fstat_r>:
 800b79c:	b538      	push	{r3, r4, r5, lr}
 800b79e:	2300      	movs	r3, #0
 800b7a0:	4d06      	ldr	r5, [pc, #24]	@ (800b7bc <_fstat_r+0x20>)
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	4608      	mov	r0, r1
 800b7a6:	4611      	mov	r1, r2
 800b7a8:	602b      	str	r3, [r5, #0]
 800b7aa:	f7f8 fc83 	bl	80040b4 <_fstat>
 800b7ae:	1c43      	adds	r3, r0, #1
 800b7b0:	d102      	bne.n	800b7b8 <_fstat_r+0x1c>
 800b7b2:	682b      	ldr	r3, [r5, #0]
 800b7b4:	b103      	cbz	r3, 800b7b8 <_fstat_r+0x1c>
 800b7b6:	6023      	str	r3, [r4, #0]
 800b7b8:	bd38      	pop	{r3, r4, r5, pc}
 800b7ba:	bf00      	nop
 800b7bc:	200007d8 	.word	0x200007d8

0800b7c0 <_isatty_r>:
 800b7c0:	b538      	push	{r3, r4, r5, lr}
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	4d05      	ldr	r5, [pc, #20]	@ (800b7dc <_isatty_r+0x1c>)
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	4608      	mov	r0, r1
 800b7ca:	602b      	str	r3, [r5, #0]
 800b7cc:	f7f8 fc81 	bl	80040d2 <_isatty>
 800b7d0:	1c43      	adds	r3, r0, #1
 800b7d2:	d102      	bne.n	800b7da <_isatty_r+0x1a>
 800b7d4:	682b      	ldr	r3, [r5, #0]
 800b7d6:	b103      	cbz	r3, 800b7da <_isatty_r+0x1a>
 800b7d8:	6023      	str	r3, [r4, #0]
 800b7da:	bd38      	pop	{r3, r4, r5, pc}
 800b7dc:	200007d8 	.word	0x200007d8

0800b7e0 <_init>:
 800b7e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7e2:	bf00      	nop
 800b7e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7e6:	bc08      	pop	{r3}
 800b7e8:	469e      	mov	lr, r3
 800b7ea:	4770      	bx	lr

0800b7ec <_fini>:
 800b7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ee:	bf00      	nop
 800b7f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7f2:	bc08      	pop	{r3}
 800b7f4:	469e      	mov	lr, r3
 800b7f6:	4770      	bx	lr
