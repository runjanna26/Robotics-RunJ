/*
 * ekf.h
 *
 *  Created on: Jun 3, 2024
 *      Author: WINDOWS 11
 */

#ifndef LIBS_EKF_H_
#define LIBS_EKF_H_

// Define your own _float_t if not defined
#ifndef _float_t
#define _float_t float
#endif

// EKF parameters
#define EKF_N 2  // State vector dimension
#define EKF_M 1  // Measurement vector dimension

#include <cmath>
#include <cstring>
#include <vector>

class EKF {
public:
    int EKF_N = 2;  // State vector dimension: [angle, velocity]
    int EKF_M = 1;  // Measurement vector dimension: [angle]

    EKF() {
        initialize();
    }

    void initialize() {
        const _float_t pdiag[EKF_N] = {1, 1};
        for (int i = 0; i < EKF_N; ++i) {
            for (int j = 0; j < EKF_N; ++j) {
                P[i * EKF_N + j] = (i == j) ? pdiag[i] : 0;
            }
            x[i] = 0;
        }
    }

    void predict() {
        _float_t fx[EKF_N];
        fx[0] = x[0] + x[1] * Ts;  // Angle update: θ + ω * dt
        fx[1] = x[1];              // Velocity remains the same

        memcpy(x, fx, EKF_N * sizeof(_float_t));

        // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
        _float_t FP[EKF_N * EKF_N] = {};
        _mulmat(F, P, FP, EKF_N, EKF_N, EKF_N);

        _float_t Ft[EKF_N * EKF_N] = {};
        _transpose(F, Ft, EKF_N, EKF_N);

        _float_t FPFt[EKF_N * EKF_N] = {};
        _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);

        _addmat(FPFt, Q, P, EKF_N, EKF_N);
    }

    bool update(_float_t z) {
        _float_t hx[EKF_N];
        hx[0] = x[0];  // Predicted measurement

        // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
        _float_t G[EKF_N * EKF_M];
        _float_t Ht[EKF_N * EKF_M];
        _transpose(H, Ht, EKF_M, EKF_N);
        _float_t PHt[EKF_N * EKF_M];
        _mulmat(P, Ht, PHt, EKF_N, EKF_N, EKF_M);
        _float_t HP[EKF_M * EKF_N];
        _mulmat(H, P, HP, EKF_M, EKF_N, EKF_N);
        _float_t HpHt[EKF_M * EKF_M];
        _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
        _float_t HpHtR[EKF_M * EKF_M];
        _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
        _float_t HPHtRinv[EKF_M * EKF_M];
        if (!invert(HpHtR, HPHtRinv)) {
            return false;
        }
        _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);

        // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
        _float_t z_hx[EKF_M];
        _sub(&z, hx, z_hx, EKF_M);
        _float_t Gz_hx[EKF_N];
        _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
        _addvec(x, Gz_hx, x, EKF_N);

        // P_k = (I - G_k H_k) P_k
        _float_t GH[EKF_N * EKF_N];
        _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
        _negate(GH, EKF_N, EKF_N);
        _addeye(GH, EKF_N);
        _float_t GHP[EKF_N * EKF_N];
        _mulmat(GH, P, GHP, EKF_N, EKF_N, EKF_N);
        memcpy(P, GHP, EKF_N * EKF_N * sizeof(_float_t));

        return true;
    }

    _float_t getVelocity() const {
        return x[1];
    }

    void setSampleTime(_float_t sampleTime) {
        Ts = sampleTime;
    }

private:
    _float_t x[EKF_N];          // State vector
    _float_t P[EKF_N * EKF_N];  // Prediction error covariance
    _float_t Ts = 1e-3f;        // Sample time

    // Covariance matrices (tune these values)
    const _float_t Q[EKF_N * EKF_N] = {
        1e-5, 0,
        0, 1e-5
    };

    const _float_t R[EKF_M * EKF_M] = {
        1e-2
    };

    // Jacobian of state transition function
    const _float_t F[EKF_N * EKF_N] = {
        1, 0.01,
        0, 1
    };

    // Jacobian of measurement function
    const _float_t H[EKF_M * EKF_N] = {
        1, 0
    };

    // Linear algebra functions (from your provided code)
    // ... (Include all the static functions: _mulmat, _mulvec, _transpose, etc.)
    // ...
};

#endif /* LIBS_EKF_H_ */
