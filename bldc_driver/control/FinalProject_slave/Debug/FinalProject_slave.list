
FinalProject_slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b840  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000740  0800b950  0800b950  0000c950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c090  0800c090  0000e208  2**0
                  CONTENTS
  4 .ARM          00000008  0800c090  0800c090  0000d090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c098  0800c098  0000e208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c098  0800c098  0000d098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800c0a0  0800c0a0  0000d0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800c0a8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000554  20000208  0800c2b0  0000e208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800c2b0  0000e75c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012e3b  00000000  00000000  0000e231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cda  00000000  00000000  0002106c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00023d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f1c  00000000  00000000  000250a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca15  00000000  00000000  00025fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a3e  00000000  00000000  000429d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00099de7  00000000  00000000  00056417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f01fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067f0  00000000  00000000  000f0244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000081  00000000  00000000  000f6a34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b938 	.word	0x0800b938

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800b938 	.word	0x0800b938

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	@ 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d96:	2afd      	cmp	r2, #253	@ 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	@ 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	@ 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	@ 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <_ZN9HelloRunJC1Ev>:
#include "HelloRunJ.h"

HelloRunJ::HelloRunJ() :
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
		some_variable(0) {
 8001118:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <_ZN9HelloRunJC1Ev+0x20>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
}
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4618      	mov	r0, r3
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	bc80      	pop	{r7}
 800112e:	4770      	bx	lr
 8001130:	0800b968 	.word	0x0800b968

08001134 <_ZN9HelloRunJD1Ev>:

HelloRunJ::~HelloRunJ() {
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	4a04      	ldr	r2, [pc, #16]	@ (8001150 <_ZN9HelloRunJD1Ev+0x1c>)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	0800b968 	.word	0x0800b968

08001154 <_ZN9HelloRunJD0Ev>:
HelloRunJ::~HelloRunJ() {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
}
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ffe9 	bl	8001134 <_ZN9HelloRunJD1Ev>
 8001162:	2108      	movs	r1, #8
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f006 fcfb 	bl	8007b60 <_ZdlPvj>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4618      	mov	r0, r3
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <_ZN9HelloRunJ15setSomeVariableEi>:

void HelloRunJ::setSomeVariable(int value) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
 800117c:	6039      	str	r1, [r7, #0]
	some_variable = value;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	683a      	ldr	r2, [r7, #0]
 8001182:	605a      	str	r2, [r3, #4]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <_ZNK9HelloRunJ15getSomeVariableEv>:

int HelloRunJ::getSomeVariable() const {
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
	return some_variable;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685b      	ldr	r3, [r3, #4]
}
 800119a:	4618      	mov	r0, r3
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr

080011a4 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011b2:	4618      	mov	r0, r3
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bc80      	pop	{r7}
 80011ba:	4770      	bx	lr

080011bc <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
 80011c6:	6839      	ldr	r1, [r7, #0]
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f006 fd5d 	bl	8007c88 <atan2f>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4618      	mov	r0, r3
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80011e6:	4618      	mov	r0, r3
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr

080011f0 <HAL_CAN_RxFifo1MsgPendingCallback>:
uint32_t CAN_error;
int count1, count2;

//CAN:103
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(hcan, CAN_FILTER_FIFO1, &RxHeader, RxData) != HAL_OK)
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 80011fa:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f003 fe19 	bl	8004e36 <HAL_CAN_GetRxMessage>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf14      	ite	ne
 800120a:	2301      	movne	r3, #1
 800120c:	2300      	moveq	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	2b00      	cmp	r3, #0
 8001212:	d007      	beq.n	8001224 <HAL_CAN_RxFifo1MsgPendingCallback+0x34>
	{
		CAN_error = HAL_CAN_GetError(hcan);
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f004 f967 	bl	80054e8 <HAL_CAN_GetError>
 800121a:	4603      	mov	r3, r0
 800121c:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <HAL_CAN_RxFifo1MsgPendingCallback+0x94>)
 800121e:	6013      	str	r3, [r2, #0]
		Error_Handler();
 8001220:	f002 fbfe 	bl	8003a20 <Error_Handler>
	}
	datacheck = 1;
 8001224:	4b18      	ldr	r3, [pc, #96]	@ (8001288 <HAL_CAN_RxFifo1MsgPendingCallback+0x98>)
 8001226:	2201      	movs	r2, #1
 8001228:	601a      	str	r2, [r3, #0]
	if ((RxHeader.StdId == 0x446) && (RxHeader.DLC == 4))
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f240 4246 	movw	r2, #1094	@ 0x446
 8001232:	4293      	cmp	r3, r2
 8001234:	d119      	bne.n	800126a <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
 8001236:	4b12      	ldr	r3, [pc, #72]	@ (8001280 <HAL_CAN_RxFifo1MsgPendingCallback+0x90>)
 8001238:	691b      	ldr	r3, [r3, #16]
 800123a:	2b04      	cmp	r3, #4
 800123c:	d115      	bne.n	800126a <HAL_CAN_RxFifo1MsgPendingCallback+0x7a>
	{
		bytes[0] = RxData[0];
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001240:	781a      	ldrb	r2, [r3, #0]
 8001242:	4b12      	ldr	r3, [pc, #72]	@ (800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8001244:	701a      	strb	r2, [r3, #0]
		bytes[1] = RxData[1];
 8001246:	4b0d      	ldr	r3, [pc, #52]	@ (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001248:	785a      	ldrb	r2, [r3, #1]
 800124a:	4b10      	ldr	r3, [pc, #64]	@ (800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 800124c:	705a      	strb	r2, [r3, #1]
		bytes[2] = RxData[2];
 800124e:	4b0b      	ldr	r3, [pc, #44]	@ (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001250:	789a      	ldrb	r2, [r3, #2]
 8001252:	4b0e      	ldr	r3, [pc, #56]	@ (800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8001254:	709a      	strb	r2, [r3, #2]
		bytes[3] = RxData[3];
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <HAL_CAN_RxFifo1MsgPendingCallback+0x8c>)
 8001258:	78da      	ldrb	r2, [r3, #3]
 800125a:	4b0c      	ldr	r3, [pc, #48]	@ (800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 800125c:	70da      	strb	r2, [r3, #3]
		float_final = Bytes2float(bytes);
 800125e:	480b      	ldr	r0, [pc, #44]	@ (800128c <HAL_CAN_RxFifo1MsgPendingCallback+0x9c>)
 8001260:	f000 fca4 	bl	8001bac <_Z11Bytes2floatPh>
 8001264:	4603      	mov	r3, r0
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <HAL_CAN_RxFifo1MsgPendingCallback+0xa0>)
 8001268:	6013      	str	r3, [r2, #0]
	}
	count2++;
 800126a:	4b0a      	ldr	r3, [pc, #40]	@ (8001294 <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3301      	adds	r3, #1
 8001270:	4a08      	ldr	r2, [pc, #32]	@ (8001294 <HAL_CAN_RxFifo1MsgPendingCallback+0xa4>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200005d8 	.word	0x200005d8
 8001280:	200005bc 	.word	0x200005bc
 8001284:	200005ec 	.word	0x200005ec
 8001288:	200005e0 	.word	0x200005e0
 800128c:	200005e4 	.word	0x200005e4
 8001290:	200005e8 	.word	0x200005e8
 8001294:	200005f0 	.word	0x200005f0

08001298 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	runx.setSomeVariable(10); // Use setter method to set the value
 800129e:	210a      	movs	r1, #10
 80012a0:	4875      	ldr	r0, [pc, #468]	@ (8001478 <main+0x1e0>)
 80012a2:	f7ff ff67 	bl	8001174 <_ZN9HelloRunJ15setSomeVariableEi>

	// Set a breakpoint here to check the value
	int value = runx.getSomeVariable();
 80012a6:	4874      	ldr	r0, [pc, #464]	@ (8001478 <main+0x1e0>)
 80012a8:	f7ff ff71 	bl	800118e <_ZNK9HelloRunJ15getSomeVariableEv>
 80012ac:	6078      	str	r0, [r7, #4]

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80012ae:	f002 ff69 	bl	8004184 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012b2:	f000 f931 	bl	8001518 <_Z18SystemClock_Configv>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012b6:	f000 fb7b 	bl	80019b0 <_ZL12MX_GPIO_Initv>
	MX_SPI1_Init();
 80012ba:	f000 fa41 	bl	8001740 <_ZL12MX_SPI1_Initv>
	MX_DMA_Init();
 80012be:	f000 fb59 	bl	8001974 <_ZL11MX_DMA_Initv>
	MX_USART1_UART_Init();
 80012c2:	f000 fb27 	bl	8001914 <_ZL19MX_USART1_UART_Initv>
	MX_ADC1_Init();
 80012c6:	f000 f991 	bl	80015ec <_ZL12MX_ADC1_Initv>
	MX_TIM2_Init();
 80012ca:	f000 fa75 	bl	80017b8 <_ZL12MX_TIM2_Initv>
	MX_CAN_Init();
 80012ce:	f000 f9fd 	bl	80016cc <_ZL11MX_CAN_Initv>
	/* USER CODE BEGIN 2 */

	//Delay SETUP
	DWT_Init();
 80012d2:	f000 fbf1 	bl	8001ab8 <_ZL8DWT_Initv>

	//Timer Interrupt tim2,tim4

	HAL_TIM_Base_Start_IT(&htim4);
 80012d6:	4869      	ldr	r0, [pc, #420]	@ (800147c <main+0x1e4>)
 80012d8:	f005 fd96 	bl	8006e08 <HAL_TIM_Base_Start_IT>

	//Driver SETUP
	voltage_sensor_align = 3; // aligning voltage [V]
 80012dc:	4b68      	ldr	r3, [pc, #416]	@ (8001480 <main+0x1e8>)
 80012de:	4a69      	ldr	r2, [pc, #420]	@ (8001484 <main+0x1ec>)
 80012e0:	601a      	str	r2, [r3, #0]
	velocity_index_search = 3; // index search velocity [rad/s]
 80012e2:	4b69      	ldr	r3, [pc, #420]	@ (8001488 <main+0x1f0>)
 80012e4:	4a67      	ldr	r2, [pc, #412]	@ (8001484 <main+0x1ec>)
 80012e6:	601a      	str	r2, [r3, #0]

	voltage_power_supply = 24.0;
 80012e8:	4b68      	ldr	r3, [pc, #416]	@ (800148c <main+0x1f4>)
 80012ea:	4a69      	ldr	r2, [pc, #420]	@ (8001490 <main+0x1f8>)
 80012ec:	601a      	str	r2, [r3, #0]

	voltage_limit = 24.0;
 80012ee:	4b69      	ldr	r3, [pc, #420]	@ (8001494 <main+0x1fc>)
 80012f0:	4a67      	ldr	r2, [pc, #412]	@ (8001490 <main+0x1f8>)
 80012f2:	601a      	str	r2, [r3, #0]
	current_limit = 20.0;		// current_sp maximum
 80012f4:	4b68      	ldr	r3, [pc, #416]	@ (8001498 <main+0x200>)
 80012f6:	4a69      	ldr	r2, [pc, #420]	@ (800149c <main+0x204>)
 80012f8:	601a      	str	r2, [r3, #0]
	velocity_limit = 20.0;       // maximal velocity of the position control
 80012fa:	4b69      	ldr	r3, [pc, #420]	@ (80014a0 <main+0x208>)
 80012fc:	4a67      	ldr	r2, [pc, #412]	@ (800149c <main+0x204>)
 80012fe:	601a      	str	r2, [r3, #0]

	//Control system configuration

//====Motor====
	LPF_current_d_s.y_prev = 0.0;
 8001300:	4b68      	ldr	r3, [pc, #416]	@ (80014a4 <main+0x20c>)
 8001302:	f04f 0200 	mov.w	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
	LPF_current_d_s.Tf = 0.001;
 8001308:	4b66      	ldr	r3, [pc, #408]	@ (80014a4 <main+0x20c>)
 800130a:	4a67      	ldr	r2, [pc, #412]	@ (80014a8 <main+0x210>)
 800130c:	60da      	str	r2, [r3, #12]
	PID_current_d_s.P = 1.0;  //1.0
 800130e:	4b67      	ldr	r3, [pc, #412]	@ (80014ac <main+0x214>)
 8001310:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001314:	61da      	str	r2, [r3, #28]
	PID_current_d_s.I = 0.0; //713.0
 8001316:	4b65      	ldr	r3, [pc, #404]	@ (80014ac <main+0x214>)
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
	PID_current_d_s.D = 0.0;
 800131e:	4b63      	ldr	r3, [pc, #396]	@ (80014ac <main+0x214>)
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_current_d_s.output_ramp = 1000.0;
 8001326:	4b61      	ldr	r3, [pc, #388]	@ (80014ac <main+0x214>)
 8001328:	4a61      	ldr	r2, [pc, #388]	@ (80014b0 <main+0x218>)
 800132a:	615a      	str	r2, [r3, #20]
	PID_current_d_s.limit = voltage_limit;
 800132c:	4b59      	ldr	r3, [pc, #356]	@ (8001494 <main+0x1fc>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a5e      	ldr	r2, [pc, #376]	@ (80014ac <main+0x214>)
 8001332:	6193      	str	r3, [r2, #24]

	LPF_current_q_s.y_prev = 0.0;
 8001334:	4b5f      	ldr	r3, [pc, #380]	@ (80014b4 <main+0x21c>)
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
	LPF_current_q_s.Tf = 0.001;
 800133c:	4b5d      	ldr	r3, [pc, #372]	@ (80014b4 <main+0x21c>)
 800133e:	4a5a      	ldr	r2, [pc, #360]	@ (80014a8 <main+0x210>)
 8001340:	60da      	str	r2, [r3, #12]
	PID_current_q_s.P = 1.0;  // 1.0
 8001342:	4b5d      	ldr	r3, [pc, #372]	@ (80014b8 <main+0x220>)
 8001344:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001348:	61da      	str	r2, [r3, #28]
	PID_current_q_s.I = 0.0; //10.0
 800134a:	4b5b      	ldr	r3, [pc, #364]	@ (80014b8 <main+0x220>)
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
	PID_current_q_s.D = 0.0;
 8001352:	4b59      	ldr	r3, [pc, #356]	@ (80014b8 <main+0x220>)
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_current_q_s.output_ramp = 1000.0;
 800135a:	4b57      	ldr	r3, [pc, #348]	@ (80014b8 <main+0x220>)
 800135c:	4a54      	ldr	r2, [pc, #336]	@ (80014b0 <main+0x218>)
 800135e:	615a      	str	r2, [r3, #20]
	PID_current_q_s.limit = voltage_limit;
 8001360:	4b4c      	ldr	r3, [pc, #304]	@ (8001494 <main+0x1fc>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a54      	ldr	r2, [pc, #336]	@ (80014b8 <main+0x220>)
 8001366:	6193      	str	r3, [r2, #24]

	LPF_velocity_s.y_prev = 0.0;
 8001368:	4b54      	ldr	r3, [pc, #336]	@ (80014bc <main+0x224>)
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
	LPF_velocity_s.Tf = 0.01;
 8001370:	4b52      	ldr	r3, [pc, #328]	@ (80014bc <main+0x224>)
 8001372:	4a53      	ldr	r2, [pc, #332]	@ (80014c0 <main+0x228>)
 8001374:	60da      	str	r2, [r3, #12]
	PID_velocity_s.P = 0.5;   // P > 0.5 oscillate
 8001376:	4b53      	ldr	r3, [pc, #332]	@ (80014c4 <main+0x22c>)
 8001378:	f04f 527c 	mov.w	r2, #1056964608	@ 0x3f000000
 800137c:	61da      	str	r2, [r3, #28]
	PID_velocity_s.I = 55.0;  // I > 55 under-overshoot
 800137e:	4b51      	ldr	r3, [pc, #324]	@ (80014c4 <main+0x22c>)
 8001380:	4a51      	ldr	r2, [pc, #324]	@ (80014c8 <main+0x230>)
 8001382:	621a      	str	r2, [r3, #32]
	PID_velocity_s.D = 0.0;
 8001384:	4b4f      	ldr	r3, [pc, #316]	@ (80014c4 <main+0x22c>)
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_velocity_s.output_ramp = 1000;
 800138c:	4b4d      	ldr	r3, [pc, #308]	@ (80014c4 <main+0x22c>)
 800138e:	4a48      	ldr	r2, [pc, #288]	@ (80014b0 <main+0x218>)
 8001390:	615a      	str	r2, [r3, #20]
	PID_velocity_s.limit = current_limit;  // current_limit
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <main+0x200>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a4b      	ldr	r2, [pc, #300]	@ (80014c4 <main+0x22c>)
 8001398:	6193      	str	r3, [r2, #24]

	LPF_angle_s.y_prev = 0.0;
 800139a:	4b4c      	ldr	r3, [pc, #304]	@ (80014cc <main+0x234>)
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	609a      	str	r2, [r3, #8]
	LPF_angle_s.Tf = 0.01;
 80013a2:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <main+0x234>)
 80013a4:	4a46      	ldr	r2, [pc, #280]	@ (80014c0 <main+0x228>)
 80013a6:	60da      	str	r2, [r3, #12]
	PID_angle_s.P = 50.0;
 80013a8:	4b49      	ldr	r3, [pc, #292]	@ (80014d0 <main+0x238>)
 80013aa:	4a4a      	ldr	r2, [pc, #296]	@ (80014d4 <main+0x23c>)
 80013ac:	61da      	str	r2, [r3, #28]
	PID_angle_s.I = 0.0;
 80013ae:	4b48      	ldr	r3, [pc, #288]	@ (80014d0 <main+0x238>)
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	621a      	str	r2, [r3, #32]
	PID_angle_s.D = 0.2;
 80013b6:	4b46      	ldr	r3, [pc, #280]	@ (80014d0 <main+0x238>)
 80013b8:	4a47      	ldr	r2, [pc, #284]	@ (80014d8 <main+0x240>)
 80013ba:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_angle_s.output_ramp = 0;
 80013bc:	4b44      	ldr	r3, [pc, #272]	@ (80014d0 <main+0x238>)
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
	PID_angle_s.limit = velocity_limit;
 80013c4:	4b36      	ldr	r3, [pc, #216]	@ (80014a0 <main+0x208>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a41      	ldr	r2, [pc, #260]	@ (80014d0 <main+0x238>)
 80013ca:	6193      	str	r3, [r2, #24]

	PID_haptic_s.P = 40.0;
 80013cc:	4b43      	ldr	r3, [pc, #268]	@ (80014dc <main+0x244>)
 80013ce:	4a44      	ldr	r2, [pc, #272]	@ (80014e0 <main+0x248>)
 80013d0:	61da      	str	r2, [r3, #28]
	PID_haptic_s.I = 0.1;
 80013d2:	4b42      	ldr	r3, [pc, #264]	@ (80014dc <main+0x244>)
 80013d4:	4a43      	ldr	r2, [pc, #268]	@ (80014e4 <main+0x24c>)
 80013d6:	621a      	str	r2, [r3, #32]
	PID_haptic_s.D = 0.4;
 80013d8:	4b40      	ldr	r3, [pc, #256]	@ (80014dc <main+0x244>)
 80013da:	4a43      	ldr	r2, [pc, #268]	@ (80014e8 <main+0x250>)
 80013dc:	625a      	str	r2, [r3, #36]	@ 0x24
	PID_haptic_s.output_ramp = 0;
 80013de:	4b3f      	ldr	r3, [pc, #252]	@ (80014dc <main+0x244>)
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	615a      	str	r2, [r3, #20]
	PID_haptic_s.limit = velocity_limit;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <main+0x208>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a3c      	ldr	r2, [pc, #240]	@ (80014dc <main+0x244>)
 80013ec:	6193      	str	r3, [r2, #24]
	passivity_gain = 0.2f;
 80013ee:	4b3f      	ldr	r3, [pc, #252]	@ (80014ec <main+0x254>)
 80013f0:	4a39      	ldr	r2, [pc, #228]	@ (80014d8 <main+0x240>)
 80013f2:	601a      	str	r2, [r3, #0]

	//SPI SETUP
	MagneticSensorSPI_init(AS5048A_SPI);
 80013f4:	4b3e      	ldr	r3, [pc, #248]	@ (80014f0 <main+0x258>)
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	9200      	str	r2, [sp, #0]
 80013fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013fc:	f000 ff2e 	bl	800225c <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s>
	//POSITION SENSOR SETUP
	Sensor_init();
 8001400:	f001 f854 	bl	80024ac <_Z11Sensor_initv>

	//CURRENT SENSE SETUP
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA, 3);
 8001404:	2203      	movs	r2, #3
 8001406:	493b      	ldr	r1, [pc, #236]	@ (80014f4 <main+0x25c>)
 8001408:	483b      	ldr	r0, [pc, #236]	@ (80014f8 <main+0x260>)
 800140a:	f003 f819 	bl	8004440 <HAL_ADC_Start_DMA>
	initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 800140e:	493b      	ldr	r1, [pc, #236]	@ (80014fc <main+0x264>)
 8001410:	4834      	ldr	r0, [pc, #208]	@ (80014e4 <main+0x24c>)
 8001412:	f000 fbe5 	bl	8001be0 <_Z16initCurrentsenseff>
//  calibrateOffsets();

	//PWM SETUP
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);    //pinMode
 8001416:	2100      	movs	r1, #0
 8001418:	4839      	ldr	r0, [pc, #228]	@ (8001500 <main+0x268>)
 800141a:	f005 fd9f 	bl	8006f5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);	//pinMode
 800141e:	2104      	movs	r1, #4
 8001420:	4837      	ldr	r0, [pc, #220]	@ (8001500 <main+0x268>)
 8001422:	f005 fd9b 	bl	8006f5c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);	//pinMode
 8001426:	2108      	movs	r1, #8
 8001428:	4835      	ldr	r0, [pc, #212]	@ (8001500 <main+0x268>)
 800142a:	f005 fd97 	bl	8006f5c <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_SET);  // Enable
 800142e:	2201      	movs	r2, #1
 8001430:	2120      	movs	r1, #32
 8001432:	4834      	ldr	r0, [pc, #208]	@ (8001504 <main+0x26c>)
 8001434:	f004 fce4 	bl	8005e00 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//FOC SETUP
	zero_electric_angle = 0.397302926;
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <main+0x270>)
 800143a:	4a34      	ldr	r2, [pc, #208]	@ (800150c <main+0x274>)
 800143c:	601a      	str	r2, [r3, #0]
	initFOC(zero_electric_angle, CW); //M1 3.85949397
 800143e:	4b32      	ldr	r3, [pc, #200]	@ (8001508 <main+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2101      	movs	r1, #1
 8001444:	4618      	mov	r0, r3
 8001446:	f001 ff0f 	bl	8003268 <_Z7initFOCf9Direction>
	//1.98957574+1.98957574+1.98420465
//	initFOC(zero_electric_angle, UNKNOWN); //Not yet calibrate find the best init value

	//CAN SETUP ID: 0x103
	CAN_init_103();
 800144a:	f000 fb61 	bl	8001b10 <_Z12CAN_init_103v>
	t1 = micros();
 800144e:	f000 fb49 	bl	8001ae4 <_ZL6microsv>
 8001452:	4603      	mov	r3, r0
 8001454:	4a2e      	ldr	r2, [pc, #184]	@ (8001510 <main+0x278>)
 8001456:	6013      	str	r3, [r2, #0]
	t2 = micros();
 8001458:	f000 fb44 	bl	8001ae4 <_ZL6microsv>
 800145c:	4603      	mov	r3, r0
 800145e:	4a2d      	ldr	r2, [pc, #180]	@ (8001514 <main+0x27c>)
 8001460:	6013      	str	r3, [r2, #0]
//	  LPF_current_q_s = LowPassFilter(LPF_current_q_s);
//	  sprintf(MSG, "%.3f,%.3f,%.3f \n",sensortest.a,sensortest.b,sensortest.c);
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);

		//Position sensor testing
	    updateSensor();
 8001462:	f001 f84d 	bl	8002500 <_Z12updateSensorv>

//	  sprintf(MSG, "%.3f,%.3f \n",float_final,shaft_velocity);  		// 134us
//	  HAL_UART_Transmit(&huart1, MSG, sizeof(MSG), 100);			  	// 181us

//		Position control
	  	loopFOC(); 														//1190us --> 495 us
 8001466:	f001 ff33 	bl	80032d0 <_Z7loopFOCv>
	  	move_angle(0.0f); 												//161 us --> 112 us
 800146a:	f04f 0000 	mov.w	r0, #0
 800146e:	f002 f97f 	bl	8003770 <_Z10move_anglef>
	    updateSensor();
 8001472:	bf00      	nop
 8001474:	e7f5      	b.n	8001462 <main+0x1ca>
 8001476:	bf00      	nop
 8001478:	20000224 	.word	0x20000224
 800147c:	20000368 	.word	0x20000368
 8001480:	20000584 	.word	0x20000584
 8001484:	40400000 	.word	0x40400000
 8001488:	20000588 	.word	0x20000588
 800148c:	2000058c 	.word	0x2000058c
 8001490:	41c00000 	.word	0x41c00000
 8001494:	20000590 	.word	0x20000590
 8001498:	20000594 	.word	0x20000594
 800149c:	41a00000 	.word	0x41a00000
 80014a0:	20000598 	.word	0x20000598
 80014a4:	200004a8 	.word	0x200004a8
 80014a8:	3a83126f 	.word	0x3a83126f
 80014ac:	200004b8 	.word	0x200004b8
 80014b0:	447a0000 	.word	0x447a0000
 80014b4:	20000498 	.word	0x20000498
 80014b8:	200004e0 	.word	0x200004e0
 80014bc:	20000488 	.word	0x20000488
 80014c0:	3c23d70a 	.word	0x3c23d70a
 80014c4:	20000508 	.word	0x20000508
 80014c8:	425c0000 	.word	0x425c0000
 80014cc:	20000478 	.word	0x20000478
 80014d0:	20000530 	.word	0x20000530
 80014d4:	42480000 	.word	0x42480000
 80014d8:	3e4ccccd 	.word	0x3e4ccccd
 80014dc:	20000558 	.word	0x20000558
 80014e0:	42200000 	.word	0x42200000
 80014e4:	3dcccccd 	.word	0x3dcccccd
 80014e8:	3ecccccd 	.word	0x3ecccccd
 80014ec:	20000580 	.word	0x20000580
 80014f0:	20000000 	.word	0x20000000
 80014f4:	20000434 	.word	0x20000434
 80014f8:	2000022c 	.word	0x2000022c
 80014fc:	41200000 	.word	0x41200000
 8001500:	20000320 	.word	0x20000320
 8001504:	40010c00 	.word	0x40010c00
 8001508:	20000018 	.word	0x20000018
 800150c:	3ecb6b4a 	.word	0x3ecb6b4a
 8001510:	20000600 	.word	0x20000600
 8001514:	20000604 	.word	0x20000604

08001518 <_Z18SystemClock_Configv>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b094      	sub	sp, #80	@ 0x50
 800151c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800151e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001522:	2228      	movs	r2, #40	@ 0x28
 8001524:	2100      	movs	r1, #0
 8001526:	4618      	mov	r0, r3
 8001528:	f008 fb91 	bl	8009c4e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800152c:	f107 0314 	add.w	r3, r7, #20
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
 800153a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
 8001542:	605a      	str	r2, [r3, #4]
 8001544:	609a      	str	r2, [r3, #8]
 8001546:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001548:	2301      	movs	r3, #1
 800154a:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800154c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001550:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001552:	2300      	movs	r3, #0
 8001554:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001562:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001564:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001568:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800156a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fc5e 	bl	8005e30 <HAL_RCC_OscConfig>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	bf14      	ite	ne
 800157a:	2301      	movne	r3, #1
 800157c:	2300      	moveq	r3, #0
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <_Z18SystemClock_Configv+0x70>
		Error_Handler();
 8001584:	f002 fa4c 	bl	8003a20 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001594:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001598:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2102      	movs	r1, #2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f004 fec5 	bl	8006334 <HAL_RCC_ClockConfig>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_Z18SystemClock_Configv+0xa6>
		Error_Handler();
 80015ba:	f002 fa31 	bl	8003a20 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015be:	2302      	movs	r3, #2
 80015c0:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80015c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c6:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f005 f84a 	bl	8006664 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_Z18SystemClock_Configv+0xcc>
		Error_Handler();
 80015e0:	f002 fa1e 	bl	8003a20 <Error_Handler>
	}
}
 80015e4:	bf00      	nop
 80015e6:	3750      	adds	r7, #80	@ 0x50
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZL12MX_ADC1_Initv>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b084      	sub	sp, #16
 80015f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 80015fc:	4b31      	ldr	r3, [pc, #196]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 80015fe:	4a32      	ldr	r2, [pc, #200]	@ (80016c8 <_ZL12MX_ADC1_Initv+0xdc>)
 8001600:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001602:	4b30      	ldr	r3, [pc, #192]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001604:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001608:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800160a:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 800160c:	2201      	movs	r2, #1
 800160e:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001610:	4b2c      	ldr	r3, [pc, #176]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001612:	2200      	movs	r2, #0
 8001614:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001616:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001618:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800161c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800161e:	4b29      	ldr	r3, [pc, #164]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001620:	2200      	movs	r2, #0
 8001622:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 3;
 8001624:	4b27      	ldr	r3, [pc, #156]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001626:	2203      	movs	r2, #3
 8001628:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800162a:	4826      	ldr	r0, [pc, #152]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 800162c:	f002 fe30 	bl	8004290 <HAL_ADC_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	bf14      	ite	ne
 8001636:	2301      	movne	r3, #1
 8001638:	2300      	moveq	r3, #0
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <_ZL12MX_ADC1_Initv+0x58>
		Error_Handler();
 8001640:	f002 f9ee 	bl	8003a20 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8001644:	2303      	movs	r3, #3
 8001646:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001648:	2301      	movs	r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800164c:	2307      	movs	r3, #7
 800164e:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001650:	1d3b      	adds	r3, r7, #4
 8001652:	4619      	mov	r1, r3
 8001654:	481b      	ldr	r0, [pc, #108]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 8001656:	f002 ffed 	bl	8004634 <HAL_ADC_ConfigChannel>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf14      	ite	ne
 8001660:	2301      	movne	r3, #1
 8001662:	2300      	moveq	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <_ZL12MX_ADC1_Initv+0x82>
		Error_Handler();
 800166a:	f002 f9d9 	bl	8003a20 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 800166e:	2308      	movs	r3, #8
 8001670:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001672:	2302      	movs	r3, #2
 8001674:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	4619      	mov	r1, r3
 800167a:	4812      	ldr	r0, [pc, #72]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 800167c:	f002 ffda 	bl	8004634 <HAL_ADC_ConfigChannel>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	bf14      	ite	ne
 8001686:	2301      	movne	r3, #1
 8001688:	2300      	moveq	r3, #0
 800168a:	b2db      	uxtb	r3, r3
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <_ZL12MX_ADC1_Initv+0xa8>
		Error_Handler();
 8001690:	f002 f9c6 	bl	8003a20 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001694:	2309      	movs	r3, #9
 8001696:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001698:	2303      	movs	r3, #3
 800169a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4808      	ldr	r0, [pc, #32]	@ (80016c4 <_ZL12MX_ADC1_Initv+0xd8>)
 80016a2:	f002 ffc7 	bl	8004634 <HAL_ADC_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bf14      	ite	ne
 80016ac:	2301      	movne	r3, #1
 80016ae:	2300      	moveq	r3, #0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <_ZL12MX_ADC1_Initv+0xce>
		Error_Handler();
 80016b6:	f002 f9b3 	bl	8003a20 <Error_Handler>
	/* USER CODE BEGIN ADC1_Init 2 */

	//DRV8323RH Unity Gain Bandwidth = 1MHz
	/* USER CODE END ADC1_Init 2 */

}
 80016ba:	bf00      	nop
 80016bc:	3710      	adds	r7, #16
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000022c 	.word	0x2000022c
 80016c8:	40012400 	.word	0x40012400

080016cc <_ZL11MX_CAN_Initv>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 80016d0:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016d2:	4a1a      	ldr	r2, [pc, #104]	@ (800173c <_ZL11MX_CAN_Initv+0x70>)
 80016d4:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 6;
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016d8:	2206      	movs	r2, #6
 80016da:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 80016dc:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80016e8:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016ea:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80016ee:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016f0:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 80016f6:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = ENABLE;
 80016fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001704:	2200      	movs	r2, #0
 8001706:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = ENABLE;
 8001708:	4b0b      	ldr	r3, [pc, #44]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 800170a:	2201      	movs	r2, #1
 800170c:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001710:	2200      	movs	r2, #0
 8001712:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8001714:	4b08      	ldr	r3, [pc, #32]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 8001716:	2200      	movs	r2, #0
 8001718:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 800171a:	4807      	ldr	r0, [pc, #28]	@ (8001738 <_ZL11MX_CAN_Initv+0x6c>)
 800171c:	f003 f983 	bl	8004a26 <HAL_CAN_Init>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <_ZL11MX_CAN_Initv+0x68>
		Error_Handler();
 8001730:	f002 f976 	bl	8003a20 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */

	/* USER CODE END CAN_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200002a0 	.word	0x200002a0
 800173c:	40006400 	.word	0x40006400

08001740 <_ZL12MX_SPI1_Initv>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001744:	4b1a      	ldr	r3, [pc, #104]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001746:	4a1b      	ldr	r2, [pc, #108]	@ (80017b4 <_ZL12MX_SPI1_Initv+0x74>)
 8001748:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800174a:	4b19      	ldr	r3, [pc, #100]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 800174c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001750:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001752:	4b17      	ldr	r3, [pc, #92]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001758:	4b15      	ldr	r3, [pc, #84]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 800175a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800175e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001760:	4b13      	ldr	r3, [pc, #76]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001762:	2200      	movs	r2, #0
 8001764:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001766:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001768:	2201      	movs	r2, #1
 800176a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800176c:	4b10      	ldr	r3, [pc, #64]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 800176e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001772:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001774:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001776:	2228      	movs	r2, #40	@ 0x28
 8001778:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177a:	4b0d      	ldr	r3, [pc, #52]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 800177c:	2200      	movs	r2, #0
 800177e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001780:	4b0b      	ldr	r3, [pc, #44]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001782:	2200      	movs	r2, #0
 8001784:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001788:	2200      	movs	r2, #0
 800178a:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 800178e:	220a      	movs	r2, #10
 8001790:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001792:	4807      	ldr	r0, [pc, #28]	@ (80017b0 <_ZL12MX_SPI1_Initv+0x70>)
 8001794:	f005 f81c 	bl	80067d0 <HAL_SPI_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	bf14      	ite	ne
 800179e:	2301      	movne	r3, #1
 80017a0:	2300      	moveq	r3, #0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <_ZL12MX_SPI1_Initv+0x6c>
		Error_Handler();
 80017a8:	f002 f93a 	bl	8003a20 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200002c8 	.word	0x200002c8
 80017b4:	40013000 	.word	0x40013000

080017b8 <_ZL12MX_TIM2_Initv>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08e      	sub	sp, #56	@ 0x38
 80017bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017cc:	f107 0320 	add.w	r3, r7, #32
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]
 80017e0:	60da      	str	r2, [r3, #12]
 80017e2:	611a      	str	r2, [r3, #16]
 80017e4:	615a      	str	r2, [r3, #20]
 80017e6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80017e8:	4b49      	ldr	r3, [pc, #292]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80017ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017ee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80017f0:	4b47      	ldr	r3, [pc, #284]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017f6:	4b46      	ldr	r3, [pc, #280]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80017f8:	2220      	movs	r2, #32
 80017fa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ARR_MAX_CA;
 80017fc:	4b44      	ldr	r3, [pc, #272]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80017fe:	f44f 62b4 	mov.w	r2, #1440	@ 0x5a0
 8001802:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001804:	4b42      	ldr	r3, [pc, #264]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800180a:	4b41      	ldr	r3, [pc, #260]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 800180c:	2280      	movs	r2, #128	@ 0x80
 800180e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001810:	483f      	ldr	r0, [pc, #252]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 8001812:	f005 faa9 	bl	8006d68 <HAL_TIM_Base_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	bf14      	ite	ne
 800181c:	2301      	movne	r3, #1
 800181e:	2300      	moveq	r3, #0
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <_ZL12MX_TIM2_Initv+0x72>
		Error_Handler();
 8001826:	f002 f8fb 	bl	8003a20 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800182a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8001830:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001834:	4619      	mov	r1, r3
 8001836:	4836      	ldr	r0, [pc, #216]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 8001838:	f005 fcf0 	bl	800721c <HAL_TIM_ConfigClockSource>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	bf14      	ite	ne
 8001842:	2301      	movne	r3, #1
 8001844:	2300      	moveq	r3, #0
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <_ZL12MX_TIM2_Initv+0x98>
		Error_Handler();
 800184c:	f002 f8e8 	bl	8003a20 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001850:	482f      	ldr	r0, [pc, #188]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 8001852:	f005 fb2b 	bl	8006eac <HAL_TIM_PWM_Init>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	bf14      	ite	ne
 800185c:	2301      	movne	r3, #1
 800185e:	2300      	moveq	r3, #0
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <_ZL12MX_TIM2_Initv+0xb2>
		Error_Handler();
 8001866:	f002 f8db 	bl	8003a20 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800186a:	2320      	movs	r3, #32
 800186c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	4619      	mov	r1, r3
 8001878:	4825      	ldr	r0, [pc, #148]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 800187a:	f006 f837 	bl	80078ec <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
			!= HAL_OK) {
 8001880:	2b00      	cmp	r3, #0
 8001882:	bf14      	ite	ne
 8001884:	2301      	movne	r3, #1
 8001886:	2300      	moveq	r3, #0
 8001888:	b2db      	uxtb	r3, r3
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <_ZL12MX_TIM2_Initv+0xda>
		Error_Handler();
 800188e:	f002 f8c7 	bl	8003a20 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	@ 0x60
 8001894:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4819      	ldr	r0, [pc, #100]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80018aa:	f005 fbf9 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
			!= HAL_OK) {
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_ZL12MX_TIM2_Initv+0x10a>
		Error_Handler();
 80018be:	f002 f8af 	bl	8003a20 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80018c2:	1d3b      	adds	r3, r7, #4
 80018c4:	2204      	movs	r2, #4
 80018c6:	4619      	mov	r1, r3
 80018c8:	4811      	ldr	r0, [pc, #68]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80018ca:	f005 fbe9 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 80018ce:	4603      	mov	r3, r0
			!= HAL_OK) {
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2)
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <_ZL12MX_TIM2_Initv+0x12a>
		Error_Handler();
 80018de:	f002 f89f 	bl	8003a20 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	2208      	movs	r2, #8
 80018e6:	4619      	mov	r1, r3
 80018e8:	4809      	ldr	r0, [pc, #36]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 80018ea:	f005 fbd9 	bl	80070a0 <HAL_TIM_PWM_ConfigChannel>
 80018ee:	4603      	mov	r3, r0
			!= HAL_OK) {
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	bf14      	ite	ne
 80018f4:	2301      	movne	r3, #1
 80018f6:	2300      	moveq	r3, #0
 80018f8:	b2db      	uxtb	r3, r3
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3)
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <_ZL12MX_TIM2_Initv+0x14a>
		Error_Handler();
 80018fe:	f002 f88f 	bl	8003a20 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001902:	4803      	ldr	r0, [pc, #12]	@ (8001910 <_ZL12MX_TIM2_Initv+0x158>)
 8001904:	f002 fa76 	bl	8003df4 <HAL_TIM_MspPostInit>

}
 8001908:	bf00      	nop
 800190a:	3738      	adds	r7, #56	@ 0x38
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	20000320 	.word	0x20000320

08001914 <_ZL19MX_USART1_UART_Initv>:

static void MX_USART1_UART_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001918:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 800191a:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_ZL19MX_USART1_UART_Initv+0x58>)
 800191c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 2000000;
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001920:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <_ZL19MX_USART1_UART_Initv+0x5c>)
 8001922:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001924:	4b10      	ldr	r3, [pc, #64]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800192a:	4b0f      	ldr	r3, [pc, #60]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 800192c:	2200      	movs	r2, #0
 800192e:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001932:	2200      	movs	r2, #0
 8001934:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001936:	4b0c      	ldr	r3, [pc, #48]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001938:	220c      	movs	r2, #12
 800193a:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800193c:	4b0a      	ldr	r3, [pc, #40]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 800193e:	2200      	movs	r2, #0
 8001940:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001944:	2200      	movs	r2, #0
 8001946:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001948:	4807      	ldr	r0, [pc, #28]	@ (8001968 <_ZL19MX_USART1_UART_Initv+0x54>)
 800194a:	f006 f82d 	bl	80079a8 <HAL_UART_Init>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	bf14      	ite	ne
 8001954:	2301      	movne	r3, #1
 8001956:	2300      	moveq	r3, #0
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <_ZL19MX_USART1_UART_Initv+0x4e>
		Error_Handler();
 800195e:	f002 f85f 	bl	8003a20 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001962:	bf00      	nop
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	200003b0 	.word	0x200003b0
 800196c:	40013800 	.word	0x40013800
 8001970:	001e8480 	.word	0x001e8480

08001974 <_ZL11MX_DMA_Initv>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800197a:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <_ZL11MX_DMA_Initv+0x38>)
 800197c:	695b      	ldr	r3, [r3, #20]
 800197e:	4a0b      	ldr	r2, [pc, #44]	@ (80019ac <_ZL11MX_DMA_Initv+0x38>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	6153      	str	r3, [r2, #20]
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <_ZL11MX_DMA_Initv+0x38>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001992:	2200      	movs	r2, #0
 8001994:	2100      	movs	r1, #0
 8001996:	200b      	movs	r0, #11
 8001998:	f003 fe89 	bl	80056ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800199c:	200b      	movs	r0, #11
 800199e:	f003 fea2 	bl	80056e6 <HAL_NVIC_EnableIRQ>

}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <_ZL12MX_GPIO_Initv>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80019b6:	f107 0310 	add.w	r3, r7, #16
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	605a      	str	r2, [r3, #4]
 80019c0:	609a      	str	r2, [r3, #8]
 80019c2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a37      	ldr	r2, [pc, #220]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019ca:	f043 0310 	orr.w	r3, r3, #16
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b35      	ldr	r3, [pc, #212]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0310 	and.w	r3, r3, #16
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80019dc:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a31      	ldr	r2, [pc, #196]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019e2:	f043 0320 	orr.w	r3, r3, #32
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b2f      	ldr	r3, [pc, #188]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0320 	and.w	r3, r3, #32
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a2b      	ldr	r2, [pc, #172]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a25      	ldr	r2, [pc, #148]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001a12:	f043 0308 	orr.w	r3, r3, #8
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0308 	and.w	r3, r3, #8
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a2a:	4820      	ldr	r0, [pc, #128]	@ (8001aac <_ZL12MX_GPIO_Initv+0xfc>)
 8001a2c:	f004 f9e8 	bl	8005e00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2110      	movs	r1, #16
 8001a34:	481e      	ldr	r0, [pc, #120]	@ (8001ab0 <_ZL12MX_GPIO_Initv+0x100>)
 8001a36:	f004 f9e3 	bl	8005e00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | EN_Pin, GPIO_PIN_RESET);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	f44f 5181 	mov.w	r1, #4128	@ 0x1020
 8001a40:	481c      	ldr	r0, [pc, #112]	@ (8001ab4 <_ZL12MX_GPIO_Initv+0x104>)
 8001a42:	f004 f9dd 	bl	8005e00 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a46:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a4a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4813      	ldr	r0, [pc, #76]	@ (8001aac <_ZL12MX_GPIO_Initv+0xfc>)
 8001a60:	f004 f84a 	bl	8005af8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_NSS_Pin */
	GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001a64:	2310      	movs	r3, #16
 8001a66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	480d      	ldr	r0, [pc, #52]	@ (8001ab0 <_ZL12MX_GPIO_Initv+0x100>)
 8001a7c:	f004 f83c 	bl	8005af8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB12 EN_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_12 | EN_Pin;
 8001a80:	f44f 5381 	mov.w	r3, #4128	@ 0x1020
 8001a84:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	4806      	ldr	r0, [pc, #24]	@ (8001ab4 <_ZL12MX_GPIO_Initv+0x104>)
 8001a9a:	f004 f82d 	bl	8005af8 <HAL_GPIO_Init>

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	40011000 	.word	0x40011000
 8001ab0:	40010800 	.word	0x40010800
 8001ab4:	40010c00 	.word	0x40010c00

08001ab8 <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */

//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001abc:	4b07      	ldr	r3, [pc, #28]	@ (8001adc <_ZL8DWT_Initv+0x24>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	4a06      	ldr	r2, [pc, #24]	@ (8001adc <_ZL8DWT_Initv+0x24>)
 8001ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ac6:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <_ZL8DWT_Initv+0x28>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a04      	ldr	r2, [pc, #16]	@ (8001ae0 <_ZL8DWT_Initv+0x28>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	e000edf0 	.word	0xe000edf0
 8001ae0:	e0001000 	.word	0xe0001000

08001ae4 <_ZL6microsv>:
	DWT->CYCCNT = 0U;
	while (DWT->CYCCNT < us_count_tic)
		;
}

__STATIC_INLINE uint32_t micros(void) {
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	@ (8001b04 <_ZL6microsv+0x20>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4b06      	ldr	r3, [pc, #24]	@ (8001b08 <_ZL6microsv+0x24>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4906      	ldr	r1, [pc, #24]	@ (8001b0c <_ZL6microsv+0x28>)
 8001af2:	fba1 1303 	umull	r1, r3, r1, r3
 8001af6:	0c9b      	lsrs	r3, r3, #18
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr
 8001b04:	e0001000 	.word	0xe0001000
 8001b08:	20000020 	.word	0x20000020
 8001b0c:	431bde83 	.word	0x431bde83

08001b10 <_Z12CAN_init_103v>:
	TxHeader.DLC = 4;  // data length
	TxHeader.IDE = CAN_ID_STD;
	TxHeader.RTR = CAN_RTR_DATA;
	TxHeader.StdId = 0x446;  // ID
}
void CAN_init_103() {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	@ 0x28
 8001b14:	af00      	add	r7, sp, #0
	if (HAL_CAN_Start(&hcan) != HAL_OK) {
 8001b16:	4823      	ldr	r0, [pc, #140]	@ (8001ba4 <_Z12CAN_init_103v+0x94>)
 8001b18:	f003 f949 	bl	8004dae <HAL_CAN_Start>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <_Z12CAN_init_103v+0x20>
		Error_Handler();
 8001b2c:	f001 ff78 	bl	8003a20 <Error_Handler>
	}

	CAN_FilterTypeDef canfilterconfig;
	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8001b30:	2301      	movs	r3, #1
 8001b32:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0; // which filter bank to use from the assigned ones
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0x446 << 5;
 8001b3c:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8001b40:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0x0000;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0x446 << 5;
 8001b46:	f648 03c0 	movw	r3, #35008	@ 0x88c0
 8001b4a:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0x0000;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001b54:	2301      	movs	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 10; // doesn't matter in single can controllers
 8001b58:	230a      	movs	r3, #10
 8001b5a:	627b      	str	r3, [r7, #36]	@ 0x24
	if (HAL_CAN_ConfigFilter(&hcan, &canfilterconfig) != HAL_OK) {
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4810      	ldr	r0, [pc, #64]	@ (8001ba4 <_Z12CAN_init_103v+0x94>)
 8001b62:	f003 f85b 	bl	8004c1c <HAL_CAN_ConfigFilter>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	bf14      	ite	ne
 8001b6c:	2301      	movne	r3, #1
 8001b6e:	2300      	moveq	r3, #0
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <_Z12CAN_init_103v+0x6a>
		Error_Handler();
 8001b76:	f001 ff53 	bl	8003a20 <Error_Handler>
	}

	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4809      	ldr	r0, [pc, #36]	@ (8001ba4 <_Z12CAN_init_103v+0x94>)
 8001b7e:	f003 fa6b 	bl	8005058 <HAL_CAN_ActivateNotification>

	TxHeader.DLC = 4;  // data length
 8001b82:	4b09      	ldr	r3, [pc, #36]	@ (8001ba8 <_Z12CAN_init_103v+0x98>)
 8001b84:	2204      	movs	r2, #4
 8001b86:	611a      	str	r2, [r3, #16]
	TxHeader.IDE = CAN_ID_STD;
 8001b88:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <_Z12CAN_init_103v+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <_Z12CAN_init_103v+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	60da      	str	r2, [r3, #12]
	TxHeader.StdId = 0x103;  // ID
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <_Z12CAN_init_103v+0x98>)
 8001b96:	f240 1203 	movw	r2, #259	@ 0x103
 8001b9a:	601a      	str	r2, [r3, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	3728      	adds	r7, #40	@ 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	200002a0 	.word	0x200002a0
 8001ba8:	200005a4 	.word	0x200005a4

08001bac <_Z11Bytes2floatPh>:
	u.float_variable = val;
	// Assign bytes to input array
	memcpy(bytes_array, u.temp_array, 4);
}

float Bytes2float(uint8_t *bytes_array) {
 8001bac:	b480      	push	{r7}
 8001bae:	b085      	sub	sp, #20
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	uint8_t temp_array[4] = { bytes_array[0], bytes_array[1], bytes_array[2],
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	781b      	ldrb	r3, [r3, #0]
			bytes_array[3] };
 8001bb8:	723b      	strb	r3, [r7, #8]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	727b      	strb	r3, [r7, #9]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	789b      	ldrb	r3, [r3, #2]
 8001bc4:	72bb      	strb	r3, [r7, #10]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	78db      	ldrb	r3, [r3, #3]
 8001bca:	72fb      	strb	r3, [r7, #11]
	float f = *(float*) &temp_array;
 8001bcc:	f107 0308 	add.w	r3, r7, #8
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	60fb      	str	r3, [r7, #12]
	return f;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_Z16initCurrentsenseff>:
	HAL_ADC_Stop(&hadc1);
	return val;
}

//Initialize Current Sensor
void initCurrentsense(float _shunt_resistor, float _gain) {
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	R_sense = _shunt_resistor;
 8001bea:	4a08      	ldr	r2, [pc, #32]	@ (8001c0c <_Z16initCurrentsenseff+0x2c>)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6013      	str	r3, [r2, #0]
	gain_a = _gain;
 8001bf0:	4a07      	ldr	r2, [pc, #28]	@ (8001c10 <_Z16initCurrentsenseff+0x30>)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6013      	str	r3, [r2, #0]
	gain_b = _gain;
 8001bf6:	4a07      	ldr	r2, [pc, #28]	@ (8001c14 <_Z16initCurrentsenseff+0x34>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	6013      	str	r3, [r2, #0]
	gain_c = _gain;
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <_Z16initCurrentsenseff+0x38>)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	6013      	str	r3, [r2, #0]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	20000430 	.word	0x20000430
 8001c10:	20000424 	.word	0x20000424
 8001c14:	20000428 	.word	0x20000428
 8001c18:	2000042c 	.word	0x2000042c
 8001c1c:	00000000 	.word	0x00000000

08001c20 <_Z16getPhaseCurrentsv>:
	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
}

//// read all three phase currents (if possible 2 or 3)
struct PhaseCurrent_s getPhaseCurrents() {
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
	struct PhaseCurrent_s current;
	current.a = ((3.3 / 2)
			- (adcResultDMA[0] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0)))
 8001c28:	4b4f      	ldr	r3, [pc, #316]	@ (8001d68 <_Z16getPhaseCurrentsv+0x148>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fbd9 	bl	80003e4 <__aeabi_ui2d>
 8001c32:	a349      	add	r3, pc, #292	@ (adr r3, 8001d58 <_Z16getPhaseCurrentsv+0x138>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fc4e 	bl	80004d8 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	a147      	add	r1, pc, #284	@ (adr r1, 8001d60 <_Z16getPhaseCurrentsv+0x140>)
 8001c42:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c46:	f7fe fa8f 	bl	8000168 <__aeabi_dsub>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	4614      	mov	r4, r2
 8001c50:	461d      	mov	r5, r3
			/ (R_sense * gain_a);
 8001c52:	4b46      	ldr	r3, [pc, #280]	@ (8001d6c <_Z16getPhaseCurrentsv+0x14c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a46      	ldr	r2, [pc, #280]	@ (8001d70 <_Z16getPhaseCurrentsv+0x150>)
 8001c58:	6812      	ldr	r2, [r2, #0]
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff f871 	bl	8000d44 <__aeabi_fmul>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fbdf 	bl	8000428 <__aeabi_f2d>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	4620      	mov	r0, r4
 8001c70:	4629      	mov	r1, r5
 8001c72:	f7fe fd5b 	bl	800072c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ff03 	bl	8000a88 <__aeabi_d2f>
 8001c82:	4602      	mov	r2, r0
	current.a = ((3.3 / 2)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	601a      	str	r2, [r3, #0]
	current.b = ((3.3 / 2)
			- (adcResultDMA[1] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0)))
 8001c88:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <_Z16getPhaseCurrentsv+0x148>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7fe fba9 	bl	80003e4 <__aeabi_ui2d>
 8001c92:	a331      	add	r3, pc, #196	@ (adr r3, 8001d58 <_Z16getPhaseCurrentsv+0x138>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fc1e 	bl	80004d8 <__aeabi_dmul>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	a12f      	add	r1, pc, #188	@ (adr r1, 8001d60 <_Z16getPhaseCurrentsv+0x140>)
 8001ca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ca6:	f7fe fa5f 	bl	8000168 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
			/ (R_sense * gain_b);
 8001cb2:	4b2e      	ldr	r3, [pc, #184]	@ (8001d6c <_Z16getPhaseCurrentsv+0x14c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d74 <_Z16getPhaseCurrentsv+0x154>)
 8001cb8:	6812      	ldr	r2, [r2, #0]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f841 	bl	8000d44 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7fe fbaf 	bl	8000428 <__aeabi_f2d>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4620      	mov	r0, r4
 8001cd0:	4629      	mov	r1, r5
 8001cd2:	f7fe fd2b 	bl	800072c <__aeabi_ddiv>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe fed3 	bl	8000a88 <__aeabi_d2f>
 8001ce2:	4602      	mov	r2, r0
	current.b = ((3.3 / 2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	605a      	str	r2, [r3, #4]
	current.c = ((3.3 / 2)
			- (adcResultDMA[2] - 0) * ((3.05 - 0.25) / (3785.0 - 311.0)))
 8001ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d68 <_Z16getPhaseCurrentsv+0x148>)
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fb79 	bl	80003e4 <__aeabi_ui2d>
 8001cf2:	a319      	add	r3, pc, #100	@ (adr r3, 8001d58 <_Z16getPhaseCurrentsv+0x138>)
 8001cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf8:	f7fe fbee 	bl	80004d8 <__aeabi_dmul>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	a117      	add	r1, pc, #92	@ (adr r1, 8001d60 <_Z16getPhaseCurrentsv+0x140>)
 8001d02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d06:	f7fe fa2f 	bl	8000168 <__aeabi_dsub>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4614      	mov	r4, r2
 8001d10:	461d      	mov	r5, r3
			/ (R_sense * gain_c);
 8001d12:	4b16      	ldr	r3, [pc, #88]	@ (8001d6c <_Z16getPhaseCurrentsv+0x14c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a18      	ldr	r2, [pc, #96]	@ (8001d78 <_Z16getPhaseCurrentsv+0x158>)
 8001d18:	6812      	ldr	r2, [r2, #0]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff f811 	bl	8000d44 <__aeabi_fmul>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fb7f 	bl	8000428 <__aeabi_f2d>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4620      	mov	r0, r4
 8001d30:	4629      	mov	r1, r5
 8001d32:	f7fe fcfb 	bl	800072c <__aeabi_ddiv>
 8001d36:	4602      	mov	r2, r0
 8001d38:	460b      	mov	r3, r1
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f7fe fea3 	bl	8000a88 <__aeabi_d2f>
 8001d42:	4602      	mov	r2, r0
	current.c = ((3.3 / 2)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]
//    current.b = -current.a-current.c;
	return current;
 8001d48:	bf00      	nop
}
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bdb0      	pop	{r4, r5, r7, pc}
 8001d52:	bf00      	nop
 8001d54:	f3af 8000 	nop.w
 8001d58:	9f0d96a7 	.word	0x9f0d96a7
 8001d5c:	3f4a691c 	.word	0x3f4a691c
 8001d60:	66666666 	.word	0x66666666
 8001d64:	3ffa6666 	.word	0x3ffa6666
 8001d68:	20000434 	.word	0x20000434
 8001d6c:	20000430 	.word	0x20000430
 8001d70:	20000424 	.word	0x20000424
 8001d74:	20000428 	.word	0x20000428
 8001d78:	2000042c 	.word	0x2000042c
 8001d7c:	00000000 	.word	0x00000000

08001d80 <_Z14getFOCCurrentsf>:

// function used with the foc algorihtm
//   calculating DQ currents from phase currents
//   - function calculating park and clarke transform of the phase currents
//   - using getPhaseCurrents internally
struct DQCurrent_s getFOCCurrents(float angle_el) {
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b08a      	sub	sp, #40	@ 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
	// read current phase currents
	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia,Ib,Ic
 8001d8a:	f107 030c 	add.w	r3, r7, #12
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff ff46 	bl	8001c20 <_Z16getPhaseCurrentsv>
	// calculate clarke transform
	float i_alpha, i_beta;
//    if(!current.c)
//    {
	// if only two measured currents
	i_alpha = current.a;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fb44 	bl	8000428 <__aeabi_f2d>
 8001da0:	a329      	add	r3, pc, #164	@ (adr r3, 8001e48 <_Z14getFOCCurrentsf+0xc8>)
 8001da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da6:	f7fe fb97 	bl	80004d8 <__aeabi_dmul>
 8001daa:	4602      	mov	r2, r0
 8001dac:	460b      	mov	r3, r1
 8001dae:	4614      	mov	r4, r2
 8001db0:	461d      	mov	r5, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fb37 	bl	8000428 <__aeabi_f2d>
 8001dba:	a325      	add	r3, pc, #148	@ (adr r3, 8001e50 <_Z14getFOCCurrentsf+0xd0>)
 8001dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc0:	f7fe fb8a 	bl	80004d8 <__aeabi_dmul>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	4620      	mov	r0, r4
 8001dca:	4629      	mov	r1, r5
 8001dcc:	f7fe f9ce 	bl	800016c <__adddf3>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	4610      	mov	r0, r2
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	f7fe fe56 	bl	8000a88 <__aeabi_d2f>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	623b      	str	r3, [r7, #32]
//        i_alpha = a;
//        i_beta = _1_SQRT3 * a + _2_SQRT3 * b;
//    }

	// calculate park transform
	float ct = _cos(angle_el);
 8001de0:	6838      	ldr	r0, [r7, #0]
 8001de2:	f000 f991 	bl	8002108 <_Z4_cosf>
 8001de6:	61f8      	str	r0, [r7, #28]
	float st = _sin(angle_el);
 8001de8:	6838      	ldr	r0, [r7, #0]
 8001dea:	f000 f835 	bl	8001e58 <_Z4_sinf>
 8001dee:	61b8      	str	r0, [r7, #24]
	struct DQCurrent_s return_current;
	return_current.d = i_alpha * ct + i_beta * st;
 8001df0:	69f9      	ldr	r1, [r7, #28]
 8001df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001df4:	f7fe ffa6 	bl	8000d44 <__aeabi_fmul>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	69b9      	ldr	r1, [r7, #24]
 8001dfe:	6a38      	ldr	r0, [r7, #32]
 8001e00:	f7fe ffa0 	bl	8000d44 <__aeabi_fmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4620      	mov	r0, r4
 8001e0a:	f7fe fe93 	bl	8000b34 <__addsf3>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	461a      	mov	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	601a      	str	r2, [r3, #0]
	return_current.q = i_beta * ct - i_alpha * st;
 8001e16:	69f9      	ldr	r1, [r7, #28]
 8001e18:	6a38      	ldr	r0, [r7, #32]
 8001e1a:	f7fe ff93 	bl	8000d44 <__aeabi_fmul>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	461c      	mov	r4, r3
 8001e22:	69b9      	ldr	r1, [r7, #24]
 8001e24:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e26:	f7fe ff8d 	bl	8000d44 <__aeabi_fmul>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f7fe fe7e 	bl	8000b30 <__aeabi_fsub>
 8001e34:	4603      	mov	r3, r0
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	605a      	str	r2, [r3, #4]
	return return_current;
 8001e3c:	bf00      	nop
}
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	3728      	adds	r7, #40	@ 0x28
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bdb0      	pop	{r4, r5, r7, pc}
 8001e46:	bf00      	nop
 8001e48:	45904047 	.word	0x45904047
 8001e4c:	bfe279a7 	.word	0xbfe279a7
 8001e50:	45904047 	.word	0x45904047
 8001e54:	bff279a7 	.word	0xbff279a7

08001e58 <_Z4_sinf>:
// function approximating the sine calculation by using fixed size array
// ~40us (float array)
// ~50us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _sin(float a) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
	if (a < _PI_2) {
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7fe fae1 	bl	8000428 <__aeabi_f2d>
 8001e66:	a39c      	add	r3, pc, #624	@ (adr r3, 80020d8 <_Z4_sinf+0x280>)
 8001e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6c:	f7fe fda6 	bl	80009bc <__aeabi_dcmplt>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d042      	beq.n	8001efc <_Z4_sinf+0xa4>
		//return sine_array[(int)(199.0*( a / (_PI/2.0)))];
		//return sine_array[(int)(126.6873* a)];           // float array optimized
		return 0.0001f * sine_array[_round(126.6873f * a)]; // int array optimized
 8001e76:	499e      	ldr	r1, [pc, #632]	@ (80020f0 <_Z4_sinf+0x298>)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7fe ff63 	bl	8000d44 <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff f90f 	bl	80010a8 <__aeabi_fcmpge>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d014      	beq.n	8001eba <_Z4_sinf+0x62>
 8001e90:	4997      	ldr	r1, [pc, #604]	@ (80020f0 <_Z4_sinf+0x298>)
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f7fe ff56 	bl	8000d44 <__aeabi_fmul>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fac4 	bl	8000428 <__aeabi_f2d>
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	4b93      	ldr	r3, [pc, #588]	@ (80020f4 <_Z4_sinf+0x29c>)
 8001ea6:	f7fe f961 	bl	800016c <__adddf3>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	460b      	mov	r3, r1
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f7fe fdc1 	bl	8000a38 <__aeabi_d2iz>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	e013      	b.n	8001ee2 <_Z4_sinf+0x8a>
 8001eba:	498d      	ldr	r1, [pc, #564]	@ (80020f0 <_Z4_sinf+0x298>)
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe ff41 	bl	8000d44 <__aeabi_fmul>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7fe faaf 	bl	8000428 <__aeabi_f2d>
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	4b89      	ldr	r3, [pc, #548]	@ (80020f4 <_Z4_sinf+0x29c>)
 8001ed0:	f7fe f94a 	bl	8000168 <__aeabi_dsub>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	460b      	mov	r3, r1
 8001ed8:	4610      	mov	r0, r2
 8001eda:	4619      	mov	r1, r3
 8001edc:	f7fe fdac 	bl	8000a38 <__aeabi_d2iz>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	4a85      	ldr	r2, [pc, #532]	@ (80020f8 <_Z4_sinf+0x2a0>)
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7fe fed7 	bl	8000c9c <__aeabi_i2f>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	4982      	ldr	r1, [pc, #520]	@ (80020fc <_Z4_sinf+0x2a4>)
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe ff26 	bl	8000d44 <__aeabi_fmul>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	e0e9      	b.n	80020d0 <_Z4_sinf+0x278>
	} else if (a < _PI) {
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7fe fa93 	bl	8000428 <__aeabi_f2d>
 8001f02:	a377      	add	r3, pc, #476	@ (adr r3, 80020e0 <_Z4_sinf+0x288>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fd58 	bl	80009bc <__aeabi_dcmplt>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d046      	beq.n	8001fa0 <_Z4_sinf+0x148>
		// return sine_array[(int)(199.0*(1.0 - (a-_PI/2.0) / (_PI/2.0)))];
		//return sine_array[398 - (int)(126.6873*a)];          // float array optimized
		return 0.0001f * sine_array[398 - _round(126.6873f * a)]; // int array optimized
 8001f12:	4977      	ldr	r1, [pc, #476]	@ (80020f0 <_Z4_sinf+0x298>)
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7fe ff15 	bl	8000d44 <__aeabi_fmul>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	f04f 0100 	mov.w	r1, #0
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff f8c1 	bl	80010a8 <__aeabi_fcmpge>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d016      	beq.n	8001f5a <_Z4_sinf+0x102>
 8001f2c:	4970      	ldr	r1, [pc, #448]	@ (80020f0 <_Z4_sinf+0x298>)
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f7fe ff08 	bl	8000d44 <__aeabi_fmul>
 8001f34:	4603      	mov	r3, r0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fa76 	bl	8000428 <__aeabi_f2d>
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4b6c      	ldr	r3, [pc, #432]	@ (80020f4 <_Z4_sinf+0x29c>)
 8001f42:	f7fe f913 	bl	800016c <__adddf3>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4610      	mov	r0, r2
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f7fe fd73 	bl	8000a38 <__aeabi_d2iz>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001f58:	e015      	b.n	8001f86 <_Z4_sinf+0x12e>
 8001f5a:	4965      	ldr	r1, [pc, #404]	@ (80020f0 <_Z4_sinf+0x298>)
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7fe fef1 	bl	8000d44 <__aeabi_fmul>
 8001f62:	4603      	mov	r3, r0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7fe fa5f 	bl	8000428 <__aeabi_f2d>
 8001f6a:	f04f 0200 	mov.w	r2, #0
 8001f6e:	4b61      	ldr	r3, [pc, #388]	@ (80020f4 <_Z4_sinf+0x29c>)
 8001f70:	f7fe f8fa 	bl	8000168 <__aeabi_dsub>
 8001f74:	4602      	mov	r2, r0
 8001f76:	460b      	mov	r3, r1
 8001f78:	4610      	mov	r0, r2
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	f7fe fd5c 	bl	8000a38 <__aeabi_d2iz>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f5c3 73c7 	rsb	r3, r3, #398	@ 0x18e
 8001f86:	4a5c      	ldr	r2, [pc, #368]	@ (80020f8 <_Z4_sinf+0x2a0>)
 8001f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fe85 	bl	8000c9c <__aeabi_i2f>
 8001f92:	4603      	mov	r3, r0
 8001f94:	4959      	ldr	r1, [pc, #356]	@ (80020fc <_Z4_sinf+0x2a4>)
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fed4 	bl	8000d44 <__aeabi_fmul>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	e097      	b.n	80020d0 <_Z4_sinf+0x278>
	} else if (a < _3PI_2) {
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7fe fa41 	bl	8000428 <__aeabi_f2d>
 8001fa6:	a350      	add	r3, pc, #320	@ (adr r3, 80020e8 <_Z4_sinf+0x290>)
 8001fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fac:	f7fe fd06 	bl	80009bc <__aeabi_dcmplt>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d046      	beq.n	8002044 <_Z4_sinf+0x1ec>
		// return -sine_array[(int)(199.0*((a - _PI) / (_PI/2.0)))];
		//return -sine_array[-398 + (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[-398 + _round(126.6873f * a)]; // int array optimized
 8001fb6:	494e      	ldr	r1, [pc, #312]	@ (80020f0 <_Z4_sinf+0x298>)
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7fe fec3 	bl	8000d44 <__aeabi_fmul>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff f86f 	bl	80010a8 <__aeabi_fcmpge>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d016      	beq.n	8001ffe <_Z4_sinf+0x1a6>
 8001fd0:	4947      	ldr	r1, [pc, #284]	@ (80020f0 <_Z4_sinf+0x298>)
 8001fd2:	6878      	ldr	r0, [r7, #4]
 8001fd4:	f7fe feb6 	bl	8000d44 <__aeabi_fmul>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fa24 	bl	8000428 <__aeabi_f2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <_Z4_sinf+0x29c>)
 8001fe6:	f7fe f8c1 	bl	800016c <__adddf3>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fd21 	bl	8000a38 <__aeabi_d2iz>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 8001ffc:	e015      	b.n	800202a <_Z4_sinf+0x1d2>
 8001ffe:	493c      	ldr	r1, [pc, #240]	@ (80020f0 <_Z4_sinf+0x298>)
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f7fe fe9f 	bl	8000d44 <__aeabi_fmul>
 8002006:	4603      	mov	r3, r0
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fa0d 	bl	8000428 <__aeabi_f2d>
 800200e:	f04f 0200 	mov.w	r2, #0
 8002012:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <_Z4_sinf+0x29c>)
 8002014:	f7fe f8a8 	bl	8000168 <__aeabi_dsub>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4610      	mov	r0, r2
 800201e:	4619      	mov	r1, r3
 8002020:	f7fe fd0a 	bl	8000a38 <__aeabi_d2iz>
 8002024:	4603      	mov	r3, r0
 8002026:	f5a3 73c7 	sub.w	r3, r3, #398	@ 0x18e
 800202a:	4a33      	ldr	r2, [pc, #204]	@ (80020f8 <_Z4_sinf+0x2a0>)
 800202c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fe33 	bl	8000c9c <__aeabi_i2f>
 8002036:	4603      	mov	r3, r0
 8002038:	4931      	ldr	r1, [pc, #196]	@ (8002100 <_Z4_sinf+0x2a8>)
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fe82 	bl	8000d44 <__aeabi_fmul>
 8002040:	4603      	mov	r3, r0
 8002042:	e045      	b.n	80020d0 <_Z4_sinf+0x278>
	} else {
		// return -sine_array[(int)(199.0*(1.0 - (a - 3*_PI/2) / (_PI/2.0)))];
		//return -sine_array[796 - (int)(126.6873*a)];           // float array optimized
		return -0.0001f * sine_array[796 - _round(126.6873f * a)]; // int array optimized
 8002044:	492a      	ldr	r1, [pc, #168]	@ (80020f0 <_Z4_sinf+0x298>)
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7fe fe7c 	bl	8000d44 <__aeabi_fmul>
 800204c:	4603      	mov	r3, r0
 800204e:	f04f 0100 	mov.w	r1, #0
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f828 	bl	80010a8 <__aeabi_fcmpge>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d016      	beq.n	800208c <_Z4_sinf+0x234>
 800205e:	4924      	ldr	r1, [pc, #144]	@ (80020f0 <_Z4_sinf+0x298>)
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	f7fe fe6f 	bl	8000d44 <__aeabi_fmul>
 8002066:	4603      	mov	r3, r0
 8002068:	4618      	mov	r0, r3
 800206a:	f7fe f9dd 	bl	8000428 <__aeabi_f2d>
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b20      	ldr	r3, [pc, #128]	@ (80020f4 <_Z4_sinf+0x29c>)
 8002074:	f7fe f87a 	bl	800016c <__adddf3>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fcda 	bl	8000a38 <__aeabi_d2iz>
 8002084:	4603      	mov	r3, r0
 8002086:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 800208a:	e015      	b.n	80020b8 <_Z4_sinf+0x260>
 800208c:	4918      	ldr	r1, [pc, #96]	@ (80020f0 <_Z4_sinf+0x298>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7fe fe58 	bl	8000d44 <__aeabi_fmul>
 8002094:	4603      	mov	r3, r0
 8002096:	4618      	mov	r0, r3
 8002098:	f7fe f9c6 	bl	8000428 <__aeabi_f2d>
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	4b14      	ldr	r3, [pc, #80]	@ (80020f4 <_Z4_sinf+0x29c>)
 80020a2:	f7fe f861 	bl	8000168 <__aeabi_dsub>
 80020a6:	4602      	mov	r2, r0
 80020a8:	460b      	mov	r3, r1
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fcc3 	bl	8000a38 <__aeabi_d2iz>
 80020b2:	4603      	mov	r3, r0
 80020b4:	f5c3 7347 	rsb	r3, r3, #796	@ 0x31c
 80020b8:	4a0f      	ldr	r2, [pc, #60]	@ (80020f8 <_Z4_sinf+0x2a0>)
 80020ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fdec 	bl	8000c9c <__aeabi_i2f>
 80020c4:	4603      	mov	r3, r0
 80020c6:	490e      	ldr	r1, [pc, #56]	@ (8002100 <_Z4_sinf+0x2a8>)
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe3b 	bl	8000d44 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
	}
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	5443d6f4 	.word	0x5443d6f4
 80020dc:	3ff921fb 	.word	0x3ff921fb
 80020e0:	54442eea 	.word	0x54442eea
 80020e4:	400921fb 	.word	0x400921fb
 80020e8:	7f330d32 	.word	0x7f330d32
 80020ec:	4012d97c 	.word	0x4012d97c
 80020f0:	42fd5fe6 	.word	0x42fd5fe6
 80020f4:	3fe00000 	.word	0x3fe00000
 80020f8:	0800b970 	.word	0x0800b970
 80020fc:	38d1b717 	.word	0x38d1b717
 8002100:	b8d1b717 	.word	0xb8d1b717
 8002104:	00000000 	.word	0x00000000

08002108 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
float _cos(float a) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
	float a_sin = a + _PI_2;
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe f989 	bl	8000428 <__aeabi_f2d>
 8002116:	a31a      	add	r3, pc, #104	@ (adr r3, 8002180 <_Z4_cosf+0x78>)
 8002118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211c:	f7fe f826 	bl	800016c <__adddf3>
 8002120:	4602      	mov	r2, r0
 8002122:	460b      	mov	r3, r1
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	f7fe fcae 	bl	8000a88 <__aeabi_d2f>
 800212c:	4603      	mov	r3, r0
 800212e:	60fb      	str	r3, [r7, #12]
	a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002130:	68f8      	ldr	r0, [r7, #12]
 8002132:	f7fe f979 	bl	8000428 <__aeabi_f2d>
 8002136:	a314      	add	r3, pc, #80	@ (adr r3, 8002188 <_Z4_cosf+0x80>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fc5c 	bl	80009f8 <__aeabi_dcmpgt>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00f      	beq.n	8002166 <_Z4_cosf+0x5e>
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f7fe f96e 	bl	8000428 <__aeabi_f2d>
 800214c:	a30e      	add	r3, pc, #56	@ (adr r3, 8002188 <_Z4_cosf+0x80>)
 800214e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002152:	f7fe f809 	bl	8000168 <__aeabi_dsub>
 8002156:	4602      	mov	r2, r0
 8002158:	460b      	mov	r3, r1
 800215a:	4610      	mov	r0, r2
 800215c:	4619      	mov	r1, r3
 800215e:	f7fe fc93 	bl	8000a88 <__aeabi_d2f>
 8002162:	4603      	mov	r3, r0
 8002164:	e000      	b.n	8002168 <_Z4_cosf+0x60>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	60fb      	str	r3, [r7, #12]
	return _sin(a_sin);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f7ff fe74 	bl	8001e58 <_Z4_sinf>
 8002170:	4603      	mov	r3, r0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	f3af 8000 	nop.w
 8002180:	5443d6f4 	.word	0x5443d6f4
 8002184:	3ff921fb 	.word	0x3ff921fb
 8002188:	54442eea 	.word	0x54442eea
 800218c:	401921fb 	.word	0x401921fb

08002190 <_Z15_normalizeAnglef>:

//normalizing radian angle to [0,2PI]
float _normalizeAngle(float angle) {
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
	float a = fmod(angle, _2PI);
 8002198:	a315      	add	r3, pc, #84	@ (adr r3, 80021f0 <_Z15_normalizeAnglef+0x60>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f001 fc44 	bl	8003a2c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4610      	mov	r0, r2
 80021aa:	4619      	mov	r1, r3
 80021ac:	f7fe fc6c 	bl	8000a88 <__aeabi_d2f>
 80021b0:	4603      	mov	r3, r0
 80021b2:	60fb      	str	r3, [r7, #12]
	return a >= 0 ? a : (a + _2PI);      //always project from 0 degree
 80021b4:	f04f 0100 	mov.w	r1, #0
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7fe ff75 	bl	80010a8 <__aeabi_fcmpge>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <_Z15_normalizeAnglef+0x38>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	e00e      	b.n	80021e6 <_Z15_normalizeAnglef+0x56>
 80021c8:	68f8      	ldr	r0, [r7, #12]
 80021ca:	f7fe f92d 	bl	8000428 <__aeabi_f2d>
 80021ce:	a308      	add	r3, pc, #32	@ (adr r3, 80021f0 <_Z15_normalizeAnglef+0x60>)
 80021d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d4:	f7fd ffca 	bl	800016c <__adddf3>
 80021d8:	4602      	mov	r2, r0
 80021da:	460b      	mov	r3, r1
 80021dc:	4610      	mov	r0, r2
 80021de:	4619      	mov	r1, r3
 80021e0:	f7fe fc52 	bl	8000a88 <__aeabi_d2f>
 80021e4:	4603      	mov	r3, r0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	54442eea 	.word	0x54442eea
 80021f4:	401921fb 	.word	0x401921fb

080021f8 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
	return (shaft_angle * pole_pairs);
 8002202:	6838      	ldr	r0, [r7, #0]
 8002204:	f7fe fd4a 	bl	8000c9c <__aeabi_i2f>
 8002208:	4603      	mov	r3, r0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe fd99 	bl	8000d44 <__aeabi_fmul>
 8002212:	4603      	mov	r3, r0
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
float _sqrtApprox(float number) {
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
	float y;
	// float x;
	// const float f = 1.5F; // better precision

	// x = number * 0.5F;
	y = number;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60bb      	str	r3, [r7, #8]
	i = *(long*) &y;
 8002228:	f107 0308 	add.w	r3, r7, #8
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]
	i = 0x5f375a86 - (i >> 1);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	105a      	asrs	r2, r3, #1
 8002234:	4b08      	ldr	r3, [pc, #32]	@ (8002258 <_Z11_sqrtApproxf+0x3c>)
 8002236:	1a9b      	subs	r3, r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
	y = *(float*) &i;
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
	// y = y * ( f - ( x * y * y ) ); // better precision
	return number * y;
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fd7c 	bl	8000d44 <__aeabi_fmul>
 800224c:	4603      	mov	r3, r0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	5f375a86 	.word	0x5f375a86

0800225c <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s>:

// initialize SPI for Magnetic Sensor
void MagneticSensorSPI_init(struct MagneticSensorSPIConfig_s config) {
 800225c:	b084      	sub	sp, #16
 800225e:	b580      	push	{r7, lr}
 8002260:	af00      	add	r7, sp, #0
 8002262:	f107 0c08 	add.w	ip, r7, #8
 8002266:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	// angle read register of the magnetic sensor
	angle_register =
			config.angle_registers ?
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x18>
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	e001      	b.n	8002278 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x1c>
 8002274:	f643 73ff 	movw	r3, #16383	@ 0x3fff
	angle_register =
 8002278:	4a13      	ldr	r2, [pc, #76]	@ (80022c8 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x6c>)
 800227a:	6013      	str	r3, [r2, #0]
					config.angle_registers : DEF_ANGLE_REGISTER;
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	4619      	mov	r1, r3
 8002280:	2002      	movs	r0, #2
 8002282:	f001 fbe7 	bl	8003a54 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fbfb 	bl	8000a88 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a0d      	ldr	r2, [pc, #52]	@ (80022cc <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x70>)
 8002296:	6013      	str	r3, [r2, #0]
	bit_resolution = config.bit_resolution;
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4a0d      	ldr	r2, [pc, #52]	@ (80022d0 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x74>)
 800229c:	6013      	str	r3, [r2, #0]

	command_parity_bit = config.command_parity_bit; // for backwards compatibility
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4a0c      	ldr	r2, [pc, #48]	@ (80022d4 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x78>)
 80022a2:	6013      	str	r3, [r2, #0]
	command_rw_bit = config.command_rw_bit; // for backwards compatibility
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	4a0c      	ldr	r2, [pc, #48]	@ (80022d8 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x7c>)
 80022a8:	6013      	str	r3, [r2, #0]
	data_start_bit = config.data_start_bit; // for backwards compatibility
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4a0b      	ldr	r2, [pc, #44]	@ (80022dc <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x80>)
 80022ae:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80022b0:	2201      	movs	r2, #1
 80022b2:	2110      	movs	r1, #16
 80022b4:	480a      	ldr	r0, [pc, #40]	@ (80022e0 <_Z22MagneticSensorSPI_init25MagneticSensorSPIConfig_s+0x84>)
 80022b6:	f003 fda3 	bl	8005e00 <HAL_GPIO_WritePin>
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022c2:	b004      	add	sp, #16
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	20000408 	.word	0x20000408
 80022cc:	200003f4 	.word	0x200003f4
 80022d0:	200003f8 	.word	0x200003f8
 80022d4:	200003fc 	.word	0x200003fc
 80022d8:	20000400 	.word	0x20000400
 80022dc:	20000404 	.word	0x20000404
 80022e0:	40010800 	.word	0x40010800

080022e4 <_Z17spiCalcEvenParityt>:

/**
 * Utility function used to calculate even parity of word
 */
uint8_t spiCalcEvenParity(uint16_t value) {
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	80fb      	strh	r3, [r7, #6]
	uint8_t cnt = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	73fb      	strb	r3, [r7, #15]
	uint8_t i;

	for (i = 0; i < 16; i++) {
 80022f2:	2300      	movs	r3, #0
 80022f4:	73bb      	strb	r3, [r7, #14]
 80022f6:	e00d      	b.n	8002314 <_Z17spiCalcEvenParityt+0x30>
		if (value & 0x1)
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d002      	beq.n	8002308 <_Z17spiCalcEvenParityt+0x24>
			cnt++;
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	085b      	lsrs	r3, r3, #1
 800230c:	80fb      	strh	r3, [r7, #6]
	for (i = 0; i < 16; i++) {
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	3301      	adds	r3, #1
 8002312:	73bb      	strb	r3, [r7, #14]
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	2b0f      	cmp	r3, #15
 8002318:	d9ee      	bls.n	80022f8 <_Z17spiCalcEvenParityt+0x14>
	}
	return cnt & 0x1;
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	f003 0301 	and.w	r3, r3, #1
 8002320:	b2db      	uxtb	r3, r3
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <_Z4readt>:
/*
 * Read a register from the sensor
 * Takes the address of the register as a 16 bit word
 * Returns the value of the register
 */
uint16_t read(uint16_t angle_register) {
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af02      	add	r7, sp, #8
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
	uint16_t register_value;
	uint16_t command = angle_register;
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0) {
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <_Z4readt+0xf4>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	dd0b      	ble.n	800235a <_Z4readt+0x2e>
		command = angle_register | (1 << command_rw_bit);
 8002342:	4b37      	ldr	r3, [pc, #220]	@ (8002420 <_Z4readt+0xf4>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	b21a      	sxth	r2, r3
 800234e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002352:	4313      	orrs	r3, r2
 8002354:	b21b      	sxth	r3, r3
 8002356:	b29b      	uxth	r3, r3
 8002358:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0) {
 800235a:	4b32      	ldr	r3, [pc, #200]	@ (8002424 <_Z4readt+0xf8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	dd10      	ble.n	8002384 <_Z4readt+0x58>
		//Add a parity bit on the the MSB
		command |=
				((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8002362:	897b      	ldrh	r3, [r7, #10]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ffbd 	bl	80022e4 <_Z17spiCalcEvenParityt>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b2d      	ldr	r3, [pc, #180]	@ (8002424 <_Z4readt+0xf8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
		command |=
 8002376:	b21a      	sxth	r2, r3
 8002378:	897b      	ldrh	r3, [r7, #10]
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	b29b      	uxth	r3, r3
 8002382:	817b      	strh	r3, [r7, #10]

	//SPI - begin transaction

	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8002384:	2200      	movs	r2, #0
 8002386:	2110      	movs	r1, #16
 8002388:	4827      	ldr	r0, [pc, #156]	@ (8002428 <_Z4readt+0xfc>)
 800238a:	f003 fd39 	bl	8005e00 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 800238e:	f107 020c 	add.w	r2, r7, #12
 8002392:	f107 010a 	add.w	r1, r7, #10
 8002396:	2364      	movs	r3, #100	@ 0x64
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2301      	movs	r3, #1
 800239c:	4823      	ldr	r0, [pc, #140]	@ (800242c <_Z4readt+0x100>)
 800239e:	f004 fa9b 	bl	80068d8 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80023a2:	2201      	movs	r2, #1
 80023a4:	2110      	movs	r1, #16
 80023a6:	4820      	ldr	r0, [pc, #128]	@ (8002428 <_Z4readt+0xfc>)
 80023a8:	f003 fd2a 	bl	8005e00 <HAL_GPIO_WritePin>

//  delay_us(1);

	command = 0x0000;
 80023ac:	2300      	movs	r3, #0
 80023ae:	817b      	strh	r3, [r7, #10]
	//Now read the response (NO_OPERATION_COMMAND = 0x0000)
	//  uint16_t register_value = spi->transfer16(0x00);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80023b0:	2200      	movs	r2, #0
 80023b2:	2110      	movs	r1, #16
 80023b4:	481c      	ldr	r0, [pc, #112]	@ (8002428 <_Z4readt+0xfc>)
 80023b6:	f003 fd23 	bl	8005e00 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 80023ba:	f107 020c 	add.w	r2, r7, #12
 80023be:	f107 010a 	add.w	r1, r7, #10
 80023c2:	2364      	movs	r3, #100	@ 0x64
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2301      	movs	r3, #1
 80023c8:	4818      	ldr	r0, [pc, #96]	@ (800242c <_Z4readt+0x100>)
 80023ca:	f004 fa85 	bl	80068d8 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 80023ce:	2201      	movs	r2, #1
 80023d0:	2110      	movs	r1, #16
 80023d2:	4815      	ldr	r0, [pc, #84]	@ (8002428 <_Z4readt+0xfc>)
 80023d4:	f003 fd14 	bl	8005e00 <HAL_GPIO_WritePin>

	//SPI - end transaction

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	4619      	mov	r1, r3
 80023dc:	4b14      	ldr	r3, [pc, #80]	@ (8002430 <_Z4readt+0x104>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	1c5a      	adds	r2, r3, #1
 80023e2:	4b14      	ldr	r3, [pc, #80]	@ (8002434 <_Z4readt+0x108>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	fa41 f303 	asr.w	r3, r1, r3
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 80023f0:	4b10      	ldr	r3, [pc, #64]	@ (8002434 <_Z4readt+0x108>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f1c3 0310 	rsb	r3, r3, #16
 80023f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023fc:	fa42 f303 	asr.w	r3, r2, r3
 8002400:	81fb      	strh	r3, [r7, #14]
	temp = register_value & data_mask;
 8002402:	89ba      	ldrh	r2, [r7, #12]
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	4013      	ands	r3, r2
 8002408:	b29a      	uxth	r2, r3
 800240a:	4b0b      	ldr	r3, [pc, #44]	@ (8002438 <_Z4readt+0x10c>)
 800240c:	801a      	strh	r2, [r3, #0]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 800240e:	89ba      	ldrh	r2, [r7, #12]
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	4013      	ands	r3, r2
 8002414:	b29b      	uxth	r3, r3
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	20000400 	.word	0x20000400
 8002424:	200003fc 	.word	0x200003fc
 8002428:	40010800 	.word	0x40010800
 800242c:	200002c8 	.word	0x200002c8
 8002430:	20000404 	.word	0x20000404
 8002434:	200003f8 	.word	0x200003f8
 8002438:	200005f8 	.word	0x200005f8

0800243c <_Z11getRawCountv>:

// function reading the raw counter of the magnetic sensor
int getRawCount() {
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	return (int) read(angle_register);
 8002440:	4b04      	ldr	r3, [pc, #16]	@ (8002454 <_Z11getRawCountv+0x18>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	b29b      	uxth	r3, r3
 8002446:	4618      	mov	r0, r3
 8002448:	f7ff ff70 	bl	800232c <_Z4readt>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000408 	.word	0x20000408

08002458 <_Z14getSensorAnglev>:

//  Shaft angle calculation
//  angle is in radians [rad]
float getSensorAngle() {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
	return (getRawCount() / (float) cpr) * _2PI;
 800245c:	f7ff ffee 	bl	800243c <_Z11getRawCountv>
 8002460:	4603      	mov	r3, r0
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fc1a 	bl	8000c9c <__aeabi_i2f>
 8002468:	4602      	mov	r2, r0
 800246a:	4b0f      	ldr	r3, [pc, #60]	@ (80024a8 <_Z14getSensorAnglev+0x50>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4619      	mov	r1, r3
 8002470:	4610      	mov	r0, r2
 8002472:	f7fe fd1b 	bl	8000eac <__aeabi_fdiv>
 8002476:	4603      	mov	r3, r0
 8002478:	4618      	mov	r0, r3
 800247a:	f7fd ffd5 	bl	8000428 <__aeabi_f2d>
 800247e:	a308      	add	r3, pc, #32	@ (adr r3, 80024a0 <_Z14getSensorAnglev+0x48>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	f7fe f828 	bl	80004d8 <__aeabi_dmul>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4610      	mov	r0, r2
 800248e:	4619      	mov	r1, r3
 8002490:	f7fe fafa 	bl	8000a88 <__aeabi_d2f>
 8002494:	4603      	mov	r3, r0
}
 8002496:	4618      	mov	r0, r3
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	f3af 8000 	nop.w
 80024a0:	54442eea 	.word	0x54442eea
 80024a4:	401921fb 	.word	0x401921fb
 80024a8:	200003f4 	.word	0x200003f4

080024ac <_Z11Sensor_initv>:

void Sensor_init() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); // call once
 80024b0:	f7ff ffd2 	bl	8002458 <_Z14getSensorAnglev>

	vel_angle_prev = getSensorAngle(); // call again
 80024b4:	f7ff ffd0 	bl	8002458 <_Z14getSensorAnglev>
 80024b8:	4603      	mov	r3, r0
 80024ba:	4a0d      	ldr	r2, [pc, #52]	@ (80024f0 <_Z11Sensor_initv+0x44>)
 80024bc:	6013      	str	r3, [r2, #0]
	vel_angle_prev_ts = micros();
 80024be:	f7ff fb11 	bl	8001ae4 <_ZL6microsv>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b0b      	ldr	r3, [pc, #44]	@ (80024f4 <_Z11Sensor_initv+0x48>)
 80024c8:	601a      	str	r2, [r3, #0]
	HAL_Delay(1);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f001 febc 	bl	8004248 <HAL_Delay>
	getSensorAngle(); // call once
 80024d0:	f7ff ffc2 	bl	8002458 <_Z14getSensorAnglev>

	angle_prev = getSensorAngle(); // call again
 80024d4:	f7ff ffc0 	bl	8002458 <_Z14getSensorAnglev>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a07      	ldr	r2, [pc, #28]	@ (80024f8 <_Z11Sensor_initv+0x4c>)
 80024dc:	6013      	str	r3, [r2, #0]
	angle_prev_ts = micros();
 80024de:	f7ff fb01 	bl	8001ae4 <_ZL6microsv>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b05      	ldr	r3, [pc, #20]	@ (80024fc <_Z11Sensor_initv+0x50>)
 80024e8:	601a      	str	r2, [r3, #0]
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000414 	.word	0x20000414
 80024f4:	20000418 	.word	0x20000418
 80024f8:	2000040c 	.word	0x2000040c
 80024fc:	20000410 	.word	0x20000410

08002500 <_Z12updateSensorv>:

void updateSensor() {
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
	float val = getSensorAngle();
 8002506:	f7ff ffa7 	bl	8002458 <_Z14getSensorAnglev>
 800250a:	6078      	str	r0, [r7, #4]
	angle_prev_ts = micros();
 800250c:	f7ff faea 	bl	8001ae4 <_ZL6microsv>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <_Z12updateSensorv+0x90>)
 8002516:	601a      	str	r2, [r3, #0]
	float d_angle = val - angle_prev;
 8002518:	4b1e      	ldr	r3, [pc, #120]	@ (8002594 <_Z12updateSensorv+0x94>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4619      	mov	r1, r3
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7fe fb06 	bl	8000b30 <__aeabi_fsub>
 8002524:	4603      	mov	r3, r0
 8002526:	603b      	str	r3, [r7, #0]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f7fe fe3b 	bl	80011a4 <_ZSt3absf>
 800252e:	4603      	mov	r3, r0
 8002530:	4618      	mov	r0, r3
 8002532:	f7fd ff79 	bl	8000428 <__aeabi_f2d>
 8002536:	2301      	movs	r3, #1
 8002538:	461c      	mov	r4, r3
 800253a:	a313      	add	r3, pc, #76	@ (adr r3, 8002588 <_Z12updateSensorv+0x88>)
 800253c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002540:	f7fe fa5a 	bl	80009f8 <__aeabi_dcmpgt>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <_Z12updateSensorv+0x4e>
 800254a:	2300      	movs	r3, #0
 800254c:	461c      	mov	r4, r3
 800254e:	b2e3      	uxtb	r3, r4
 8002550:	2b00      	cmp	r3, #0
 8002552:	d010      	beq.n	8002576 <_Z12updateSensorv+0x76>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8002554:	f04f 0100 	mov.w	r1, #0
 8002558:	6838      	ldr	r0, [r7, #0]
 800255a:	f7fe fdaf 	bl	80010bc <__aeabi_fcmpgt>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d002      	beq.n	800256a <_Z12updateSensorv+0x6a>
 8002564:	f04f 32ff 	mov.w	r2, #4294967295
 8002568:	e000      	b.n	800256c <_Z12updateSensorv+0x6c>
 800256a:	2201      	movs	r2, #1
 800256c:	4b0a      	ldr	r3, [pc, #40]	@ (8002598 <_Z12updateSensorv+0x98>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4413      	add	r3, r2
 8002572:	4a09      	ldr	r2, [pc, #36]	@ (8002598 <_Z12updateSensorv+0x98>)
 8002574:	6013      	str	r3, [r2, #0]
	angle_prev = val;
 8002576:	4a07      	ldr	r2, [pc, #28]	@ (8002594 <_Z12updateSensorv+0x94>)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6013      	str	r3, [r2, #0]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	bd90      	pop	{r4, r7, pc}
 8002584:	f3af 8000 	nop.w
 8002588:	7ba3be32 	.word	0x7ba3be32
 800258c:	40141b2f 	.word	0x40141b2f
 8002590:	20000410 	.word	0x20000410
 8002594:	2000040c 	.word	0x2000040c
 8002598:	2000041c 	.word	0x2000041c

0800259c <_Z18getMechanicalAnglev>:

float getMechanicalAngle() {
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
	return angle_prev;
 80025a0:	4b02      	ldr	r3, [pc, #8]	@ (80025ac <_Z18getMechanicalAnglev+0x10>)
 80025a2:	681b      	ldr	r3, [r3, #0]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	2000040c 	.word	0x2000040c

080025b0 <_Z8getAnglev>:

float getAngle() {
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	return (float) full_rotations * _2PI + angle_prev;
 80025b4:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <_Z8getAnglev+0x58>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fb6f 	bl	8000c9c <__aeabi_i2f>
 80025be:	4603      	mov	r3, r0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fd ff31 	bl	8000428 <__aeabi_f2d>
 80025c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8002600 <_Z8getAnglev+0x50>)
 80025c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025cc:	f7fd ff84 	bl	80004d8 <__aeabi_dmul>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4614      	mov	r4, r2
 80025d6:	461d      	mov	r5, r3
 80025d8:	4b0c      	ldr	r3, [pc, #48]	@ (800260c <_Z8getAnglev+0x5c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fd ff23 	bl	8000428 <__aeabi_f2d>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4620      	mov	r0, r4
 80025e8:	4629      	mov	r1, r5
 80025ea:	f7fd fdbf 	bl	800016c <__adddf3>
 80025ee:	4602      	mov	r2, r0
 80025f0:	460b      	mov	r3, r1
 80025f2:	4610      	mov	r0, r2
 80025f4:	4619      	mov	r1, r3
 80025f6:	f7fe fa47 	bl	8000a88 <__aeabi_d2f>
 80025fa:	4603      	mov	r3, r0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002600:	54442eea 	.word	0x54442eea
 8002604:	401921fb 	.word	0x401921fb
 8002608:	2000041c 	.word	0x2000041c
 800260c:	2000040c 	.word	0x2000040c

08002610 <_Z11getvelocityv>:

int32_t getFullRotations() {
	return full_rotations;
}

float getvelocity() {
 8002610:	b5b0      	push	{r4, r5, r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
	// calculate sample time
	float Ts = (angle_prev_ts - vel_angle_prev_ts) * 1e-6;
 8002616:	4b3a      	ldr	r3, [pc, #232]	@ (8002700 <_Z11getvelocityv+0xf0>)
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b3a      	ldr	r3, [pc, #232]	@ (8002704 <_Z11getvelocityv+0xf4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7fd feef 	bl	8000404 <__aeabi_i2d>
 8002626:	a332      	add	r3, pc, #200	@ (adr r3, 80026f0 <_Z11getvelocityv+0xe0>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fd ff54 	bl	80004d8 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f7fe fa26 	bl	8000a88 <__aeabi_d2f>
 800263c:	4603      	mov	r3, r0
 800263e:	607b      	str	r3, [r7, #4]
	// quick fix for strange cases (micros overflow)
	if (Ts <= 0)
 8002640:	f04f 0100 	mov.w	r1, #0
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7fe fd25 	bl	8001094 <__aeabi_fcmple>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <_Z11getvelocityv+0x44>
		Ts = 1e-3f;
 8002650:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <_Z11getvelocityv+0xf8>)
 8002652:	607b      	str	r3, [r7, #4]
	// velocity calculation
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 8002654:	4b2d      	ldr	r3, [pc, #180]	@ (800270c <_Z11getvelocityv+0xfc>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <_Z11getvelocityv+0x100>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f7fe fb1c 	bl	8000c9c <__aeabi_i2f>
 8002664:	4603      	mov	r3, r0
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd fede 	bl	8000428 <__aeabi_f2d>
 800266c:	a322      	add	r3, pc, #136	@ (adr r3, 80026f8 <_Z11getvelocityv+0xe8>)
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	f7fd ff31 	bl	80004d8 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4614      	mov	r4, r2
 800267c:	461d      	mov	r5, r3
			+ (angle_prev - vel_angle_prev)) / Ts;
 800267e:	4b25      	ldr	r3, [pc, #148]	@ (8002714 <_Z11getvelocityv+0x104>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a25      	ldr	r2, [pc, #148]	@ (8002718 <_Z11getvelocityv+0x108>)
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4611      	mov	r1, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fe fa51 	bl	8000b30 <__aeabi_fsub>
 800268e:	4603      	mov	r3, r0
 8002690:	4618      	mov	r0, r3
 8002692:	f7fd fec9 	bl	8000428 <__aeabi_f2d>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	4620      	mov	r0, r4
 800269c:	4629      	mov	r1, r5
 800269e:	f7fd fd65 	bl	800016c <__adddf3>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4614      	mov	r4, r2
 80026a8:	461d      	mov	r5, r3
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7fd febc 	bl	8000428 <__aeabi_f2d>
 80026b0:	4602      	mov	r2, r0
 80026b2:	460b      	mov	r3, r1
 80026b4:	4620      	mov	r0, r4
 80026b6:	4629      	mov	r1, r5
 80026b8:	f7fe f838 	bl	800072c <__aeabi_ddiv>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
	float vel = ((float) (full_rotations - vel_full_rotations) * _2PI
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe f9e0 	bl	8000a88 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	603b      	str	r3, [r7, #0]
	// save variables for future pass
	vel_angle_prev = angle_prev;
 80026cc:	4b11      	ldr	r3, [pc, #68]	@ (8002714 <_Z11getvelocityv+0x104>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a11      	ldr	r2, [pc, #68]	@ (8002718 <_Z11getvelocityv+0x108>)
 80026d2:	6013      	str	r3, [r2, #0]
	vel_full_rotations = full_rotations;
 80026d4:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <_Z11getvelocityv+0xfc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <_Z11getvelocityv+0x100>)
 80026da:	6013      	str	r3, [r2, #0]
	vel_angle_prev_ts = angle_prev_ts;
 80026dc:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <_Z11getvelocityv+0xf0>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a08      	ldr	r2, [pc, #32]	@ (8002704 <_Z11getvelocityv+0xf4>)
 80026e2:	6013      	str	r3, [r2, #0]
	return vel;
 80026e4:	683b      	ldr	r3, [r7, #0]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bdb0      	pop	{r4, r5, r7, pc}
 80026ee:	bf00      	nop
 80026f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80026f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80026f8:	54442eea 	.word	0x54442eea
 80026fc:	401921fb 	.word	0x401921fb
 8002700:	20000410 	.word	0x20000410
 8002704:	20000418 	.word	0x20000418
 8002708:	3a83126f 	.word	0x3a83126f
 800270c:	2000041c 	.word	0x2000041c
 8002710:	20000420 	.word	0x20000420
 8002714:	2000040c 	.word	0x2000040c
 8002718:	20000414 	.word	0x20000414

0800271c <_Z10shaftAnglev>:

// shaft angle calculation
float shaftAngle() {
 800271c:	b590      	push	{r4, r7, lr}
 800271e:	b087      	sub	sp, #28
 8002720:	af02      	add	r7, sp, #8
	LPF_angle_s.x = getAngle();
 8002722:	f7ff ff45 	bl	80025b0 <_Z8getAnglev>
 8002726:	4603      	mov	r3, r0
 8002728:	4a13      	ldr	r2, [pc, #76]	@ (8002778 <_Z10shaftAnglev+0x5c>)
 800272a:	6013      	str	r3, [r2, #0]
	LPF_angle_s = LowPassFilter(LPF_angle_s);
 800272c:	4c12      	ldr	r4, [pc, #72]	@ (8002778 <_Z10shaftAnglev+0x5c>)
 800272e:	4638      	mov	r0, r7
 8002730:	4b11      	ldr	r3, [pc, #68]	@ (8002778 <_Z10shaftAnglev+0x5c>)
 8002732:	68da      	ldr	r2, [r3, #12]
 8002734:	9200      	str	r2, [sp, #0]
 8002736:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002738:	f000 fe90 	bl	800345c <_Z13LowPassFilter3LPF>
 800273c:	463b      	mov	r3, r7
 800273e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return sensor_direction * LPF_angle_s.y_prev - sensor_offset;
 8002744:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <_Z10shaftAnglev+0x60>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe faa7 	bl	8000c9c <__aeabi_i2f>
 800274e:	4602      	mov	r2, r0
 8002750:	4b09      	ldr	r3, [pc, #36]	@ (8002778 <_Z10shaftAnglev+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7fe faf4 	bl	8000d44 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	461a      	mov	r2, r3
 8002760:	4b07      	ldr	r3, [pc, #28]	@ (8002780 <_Z10shaftAnglev+0x64>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4619      	mov	r1, r3
 8002766:	4610      	mov	r0, r2
 8002768:	f7fe f9e2 	bl	8000b30 <__aeabi_fsub>
 800276c:	4603      	mov	r3, r0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	bd90      	pop	{r4, r7, pc}
 8002776:	bf00      	nop
 8002778:	20000478 	.word	0x20000478
 800277c:	2000001c 	.word	0x2000001c
 8002780:	2000059c 	.word	0x2000059c

08002784 <_Z13shaftVelocityv>:
// shaft velocity calculation
float shaftVelocity() {
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b087      	sub	sp, #28
 8002788:	af02      	add	r7, sp, #8
	LPF_velocity_s.x = getvelocity();
 800278a:	f7ff ff41 	bl	8002610 <_Z11getvelocityv>
 800278e:	4603      	mov	r3, r0
 8002790:	4a0f      	ldr	r2, [pc, #60]	@ (80027d0 <_Z13shaftVelocityv+0x4c>)
 8002792:	6013      	str	r3, [r2, #0]
	LPF_velocity_s = LowPassFilter(LPF_velocity_s);
 8002794:	4c0e      	ldr	r4, [pc, #56]	@ (80027d0 <_Z13shaftVelocityv+0x4c>)
 8002796:	4638      	mov	r0, r7
 8002798:	4b0d      	ldr	r3, [pc, #52]	@ (80027d0 <_Z13shaftVelocityv+0x4c>)
 800279a:	68da      	ldr	r2, [r3, #12]
 800279c:	9200      	str	r2, [sp, #0]
 800279e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027a0:	f000 fe5c 	bl	800345c <_Z13LowPassFilter3LPF>
 80027a4:	463b      	mov	r3, r7
 80027a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return sensor_direction * LPF_velocity_s.y_prev;
 80027ac:	4b09      	ldr	r3, [pc, #36]	@ (80027d4 <_Z13shaftVelocityv+0x50>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe fa73 	bl	8000c9c <__aeabi_i2f>
 80027b6:	4602      	mov	r2, r0
 80027b8:	4b05      	ldr	r3, [pc, #20]	@ (80027d0 <_Z13shaftVelocityv+0x4c>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7fe fac0 	bl	8000d44 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd90      	pop	{r4, r7, pc}
 80027ce:	bf00      	nop
 80027d0:	20000488 	.word	0x20000488
 80027d4:	2000001c 	.word	0x2000001c

080027d8 <_Z15electricalAnglev>:

//Conversion shaft angle to elec angle
float electricalAngle() {
 80027d8:	b598      	push	{r3, r4, r7, lr}
 80027da:	af00      	add	r7, sp, #0
	return _normalizeAngle(
			(float) (sensor_direction * pole_pairs) * getMechanicalAngle()
 80027dc:	4b0f      	ldr	r3, [pc, #60]	@ (800281c <_Z15electricalAnglev+0x44>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <_Z15electricalAnglev+0x48>)
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	fb02 f303 	mul.w	r3, r2, r3
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7fe fa57 	bl	8000c9c <__aeabi_i2f>
 80027ee:	4604      	mov	r4, r0
 80027f0:	f7ff fed4 	bl	800259c <_Z18getMechanicalAnglev>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4619      	mov	r1, r3
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7fe faa3 	bl	8000d44 <__aeabi_fmul>
 80027fe:	4603      	mov	r3, r0
 8002800:	461a      	mov	r2, r3
	return _normalizeAngle(
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <_Z15electricalAnglev+0x4c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f7fe f991 	bl	8000b30 <__aeabi_fsub>
 800280e:	4603      	mov	r3, r0
 8002810:	4618      	mov	r0, r3
 8002812:	f7ff fcbd 	bl	8002190 <_Z15_normalizeAnglef>
 8002816:	4603      	mov	r3, r0
					- zero_electric_angle);
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd98      	pop	{r3, r4, r7, pc}
 800281c:	2000001c 	.word	0x2000001c
 8002820:	20000014 	.word	0x20000014
 8002824:	20000018 	.word	0x20000018

08002828 <_Z18writeDutyCycle3PWMfff>:

//Write PWM fsw = 25kHzfloat Ts
void writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) {
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, ARR_MAX_CA*dc_a);
 8002834:	4915      	ldr	r1, [pc, #84]	@ (800288c <_Z18writeDutyCycle3PWMfff+0x64>)
 8002836:	68f8      	ldr	r0, [r7, #12]
 8002838:	f7fe fa84 	bl	8000d44 <__aeabi_fmul>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	4b13      	ldr	r3, [pc, #76]	@ (8002890 <_Z18writeDutyCycle3PWMfff+0x68>)
 8002842:	681c      	ldr	r4, [r3, #0]
 8002844:	4610      	mov	r0, r2
 8002846:	f7fe fc43 	bl	80010d0 <__aeabi_f2uiz>
 800284a:	4603      	mov	r3, r0
 800284c:	6363      	str	r3, [r4, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, ARR_MAX_CA*dc_b);
 800284e:	490f      	ldr	r1, [pc, #60]	@ (800288c <_Z18writeDutyCycle3PWMfff+0x64>)
 8002850:	68b8      	ldr	r0, [r7, #8]
 8002852:	f7fe fa77 	bl	8000d44 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	461a      	mov	r2, r3
 800285a:	4b0d      	ldr	r3, [pc, #52]	@ (8002890 <_Z18writeDutyCycle3PWMfff+0x68>)
 800285c:	681c      	ldr	r4, [r3, #0]
 800285e:	4610      	mov	r0, r2
 8002860:	f7fe fc36 	bl	80010d0 <__aeabi_f2uiz>
 8002864:	4603      	mov	r3, r0
 8002866:	63a3      	str	r3, [r4, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, ARR_MAX_CA*dc_c);
 8002868:	4908      	ldr	r1, [pc, #32]	@ (800288c <_Z18writeDutyCycle3PWMfff+0x64>)
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7fe fa6a 	bl	8000d44 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <_Z18writeDutyCycle3PWMfff+0x68>)
 8002876:	681c      	ldr	r4, [r3, #0]
 8002878:	4610      	mov	r0, r2
 800287a:	f7fe fc29 	bl	80010d0 <__aeabi_f2uiz>
 800287e:	4603      	mov	r3, r0
 8002880:	63e3      	str	r3, [r4, #60]	@ 0x3c
}
 8002882:	bf00      	nop
 8002884:	3714      	adds	r7, #20
 8002886:	46bd      	mov	sp, r7
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	bf00      	nop
 800288c:	44b40000 	.word	0x44b40000
 8002890:	20000320 	.word	0x20000320
 8002894:	00000000 	.word	0x00000000

08002898 <_Z15setPhaseVoltagefff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void setPhaseVoltage(float Uq, float Ud, float angle_el) {
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b090      	sub	sp, #64	@ 0x40
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
	float Uout;
	// a bit of optitmisation
	if (Ud) {
 80028a4:	f04f 0100 	mov.w	r1, #0
 80028a8:	68b8      	ldr	r0, [r7, #8]
 80028aa:	f7fe fbdf 	bl	800106c <__aeabi_fcmpeq>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d12a      	bne.n	800290a <_Z15setPhaseVoltagefff+0x72>
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrt(Ud*Ud + Uq*Uq) / voltage_limit;
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	68b8      	ldr	r0, [r7, #8]
 80028b8:	f7fe fa44 	bl	8000d44 <__aeabi_fmul>
 80028bc:	4603      	mov	r3, r0
 80028be:	461c      	mov	r4, r3
 80028c0:	68f9      	ldr	r1, [r7, #12]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7fe fa3e 	bl	8000d44 <__aeabi_fmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4619      	mov	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe f931 	bl	8000b34 <__addsf3>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fca1 	bl	800221c <_Z11_sqrtApproxf>
 80028da:	4602      	mov	r2, r0
 80028dc:	4bb2      	ldr	r3, [pc, #712]	@ (8002ba8 <_Z15setPhaseVoltagefff+0x310>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f7fe fae2 	bl	8000eac <__aeabi_fdiv>
 80028e8:	4603      	mov	r3, r0
 80028ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 80028ec:	68b9      	ldr	r1, [r7, #8]
 80028ee:	68f8      	ldr	r0, [r7, #12]
 80028f0:	f7fe fc64 	bl	80011bc <_ZSt5atan2ff>
 80028f4:	4603      	mov	r3, r0
 80028f6:	6879      	ldr	r1, [r7, #4]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f91b 	bl	8000b34 <__addsf3>
 80028fe:	4603      	mov	r3, r0
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fc45 	bl	8002190 <_Z15_normalizeAnglef>
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	e01a      	b.n	8002940 <_Z15setPhaseVoltagefff+0xa8>
	} else {
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 800290a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ba8 <_Z15setPhaseVoltagefff+0x310>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4619      	mov	r1, r3
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7fe facb 	bl	8000eac <__aeabi_fdiv>
 8002916:	4603      	mov	r3, r0
 8002918:	63fb      	str	r3, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd fd84 	bl	8000428 <__aeabi_f2d>
 8002920:	a39b      	add	r3, pc, #620	@ (adr r3, 8002b90 <_Z15setPhaseVoltagefff+0x2f8>)
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f7fd fc21 	bl	800016c <__adddf3>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4610      	mov	r0, r2
 8002930:	4619      	mov	r1, r3
 8002932:	f7fe f8a9 	bl	8000a88 <__aeabi_d2f>
 8002936:	4603      	mov	r3, r0
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff fc29 	bl	8002190 <_Z15_normalizeAnglef>
 800293e:	6078      	str	r0, [r7, #4]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7fd fd71 	bl	8000428 <__aeabi_f2d>
 8002946:	a394      	add	r3, pc, #592	@ (adr r3, 8002b98 <_Z15setPhaseVoltagefff+0x300>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	f7fd feee 	bl	800072c <__aeabi_ddiv>
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4610      	mov	r0, r2
 8002956:	4619      	mov	r1, r3
 8002958:	f005 f99e 	bl	8007c98 <floor>
 800295c:	f04f 0200 	mov.w	r2, #0
 8002960:	4b92      	ldr	r3, [pc, #584]	@ (8002bac <_Z15setPhaseVoltagefff+0x314>)
 8002962:	f7fd fc03 	bl	800016c <__adddf3>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4610      	mov	r0, r2
 800296c:	4619      	mov	r1, r3
 800296e:	f7fe f863 	bl	8000a38 <__aeabi_d2iz>
 8002972:	4603      	mov	r3, r0
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 8002976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002978:	f7fd fd44 	bl	8000404 <__aeabi_i2d>
 800297c:	a386      	add	r3, pc, #536	@ (adr r3, 8002b98 <_Z15setPhaseVoltagefff+0x300>)
 800297e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002982:	f7fd fda9 	bl	80004d8 <__aeabi_dmul>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4614      	mov	r4, r2
 800298c:	461d      	mov	r5, r3
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7fd fd4a 	bl	8000428 <__aeabi_f2d>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4620      	mov	r0, r4
 800299a:	4629      	mov	r1, r5
 800299c:	f7fd fbe4 	bl	8000168 <__aeabi_dsub>
 80029a0:	4602      	mov	r2, r0
 80029a2:	460b      	mov	r3, r1
 80029a4:	4610      	mov	r0, r2
 80029a6:	4619      	mov	r1, r3
 80029a8:	f7fe f86e 	bl	8000a88 <__aeabi_d2f>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fa52 	bl	8001e58 <_Z4_sinf>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fd36 	bl	8000428 <__aeabi_f2d>
 80029bc:	a378      	add	r3, pc, #480	@ (adr r3, 8002ba0 <_Z15setPhaseVoltagefff+0x308>)
 80029be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c2:	f7fd fd89 	bl	80004d8 <__aeabi_dmul>
 80029c6:	4602      	mov	r2, r0
 80029c8:	460b      	mov	r3, r1
 80029ca:	4614      	mov	r4, r2
 80029cc:	461d      	mov	r5, r3
 80029ce:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029d0:	f7fd fd2a 	bl	8000428 <__aeabi_f2d>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fd fd7c 	bl	80004d8 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f84e 	bl	8000a88 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fd19 	bl	8000428 <__aeabi_f2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80029fc:	f7fe f94e 	bl	8000c9c <__aeabi_i2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fe f892 	bl	8000b30 <__aeabi_fsub>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fd0a 	bl	8000428 <__aeabi_f2d>
 8002a14:	a360      	add	r3, pc, #384	@ (adr r3, 8002b98 <_Z15setPhaseVoltagefff+0x300>)
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	f7fd fd5d 	bl	80004d8 <__aeabi_dmul>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	460b      	mov	r3, r1
 8002a22:	4620      	mov	r0, r4
 8002a24:	4629      	mov	r1, r5
 8002a26:	f7fd fb9f 	bl	8000168 <__aeabi_dsub>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4619      	mov	r1, r3
 8002a32:	f7fe f829 	bl	8000a88 <__aeabi_d2f>
 8002a36:	4603      	mov	r3, r0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff fa0d 	bl	8001e58 <_Z4_sinf>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fcf1 	bl	8000428 <__aeabi_f2d>
 8002a46:	a356      	add	r3, pc, #344	@ (adr r3, 8002ba0 <_Z15setPhaseVoltagefff+0x308>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fd44 	bl	80004d8 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4614      	mov	r4, r2
 8002a56:	461d      	mov	r5, r3
 8002a58:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002a5a:	f7fd fce5 	bl	8000428 <__aeabi_f2d>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4620      	mov	r0, r4
 8002a64:	4629      	mov	r1, r5
 8002a66:	f7fd fd37 	bl	80004d8 <__aeabi_dmul>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	f7fe f809 	bl	8000a88 <__aeabi_d2f>
 8002a76:	4603      	mov	r3, r0
 8002a78:	627b      	str	r3, [r7, #36]	@ 0x24
//  float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
	float T0 = 0; // pulled to 0 - better for low power supply voltage
 8002a7a:	f04f 0300 	mov.w	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 8002a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a82:	3b01      	subs	r3, #1
 8002a84:	2b05      	cmp	r3, #5
 8002a86:	f200 8105 	bhi.w	8002c94 <_Z15setPhaseVoltagefff+0x3fc>
 8002a8a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a90 <_Z15setPhaseVoltagefff+0x1f8>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002aa9 	.word	0x08002aa9
 8002a94:	08002af5 	.word	0x08002af5
 8002a98:	08002b41 	.word	0x08002b41
 8002a9c:	08002bb1 	.word	0x08002bb1
 8002aa0:	08002bfd 	.word	0x08002bfd
 8002aa4:	08002c49 	.word	0x08002c49
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8002aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002aaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aac:	f7fe f842 	bl	8000b34 <__addsf3>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	461c      	mov	r4, r3
 8002ab4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ab8:	6a38      	ldr	r0, [r7, #32]
 8002aba:	f7fe f9f7 	bl	8000eac <__aeabi_fdiv>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7fe f836 	bl	8000b34 <__addsf3>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8002acc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ad0:	6a38      	ldr	r0, [r7, #32]
 8002ad2:	f7fe f9eb 	bl	8000eac <__aeabi_fdiv>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002adc:	f7fe f82a 	bl	8000b34 <__addsf3>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8002ae4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ae8:	6a38      	ldr	r0, [r7, #32]
 8002aea:	f7fe f9df 	bl	8000eac <__aeabi_fdiv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002af2:	e0d8      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
	case 2:
		Ta = T1 + T0 / 2;
 8002af4:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002af8:	6a38      	ldr	r0, [r7, #32]
 8002afa:	f7fe f9d7 	bl	8000eac <__aeabi_fdiv>
 8002afe:	4603      	mov	r3, r0
 8002b00:	4619      	mov	r1, r3
 8002b02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b04:	f7fe f816 	bl	8000b34 <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8002b0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b10:	f7fe f810 	bl	8000b34 <__addsf3>
 8002b14:	4603      	mov	r3, r0
 8002b16:	461c      	mov	r4, r3
 8002b18:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b1c:	6a38      	ldr	r0, [r7, #32]
 8002b1e:	f7fe f9c5 	bl	8000eac <__aeabi_fdiv>
 8002b22:	4603      	mov	r3, r0
 8002b24:	4619      	mov	r1, r3
 8002b26:	4620      	mov	r0, r4
 8002b28:	f7fe f804 	bl	8000b34 <__addsf3>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8002b30:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b34:	6a38      	ldr	r0, [r7, #32]
 8002b36:	f7fe f9b9 	bl	8000eac <__aeabi_fdiv>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002b3e:	e0b2      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
	case 3:
		Ta = T0 / 2;
 8002b40:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b44:	6a38      	ldr	r0, [r7, #32]
 8002b46:	f7fe f9b1 	bl	8000eac <__aeabi_fdiv>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8002b4e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002b50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b52:	f7fd ffef 	bl	8000b34 <__addsf3>
 8002b56:	4603      	mov	r3, r0
 8002b58:	461c      	mov	r4, r3
 8002b5a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b5e:	6a38      	ldr	r0, [r7, #32]
 8002b60:	f7fe f9a4 	bl	8000eac <__aeabi_fdiv>
 8002b64:	4603      	mov	r3, r0
 8002b66:	4619      	mov	r1, r3
 8002b68:	4620      	mov	r0, r4
 8002b6a:	f7fd ffe3 	bl	8000b34 <__addsf3>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 8002b72:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002b76:	6a38      	ldr	r0, [r7, #32]
 8002b78:	f7fe f998 	bl	8000eac <__aeabi_fdiv>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4619      	mov	r1, r3
 8002b80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002b82:	f7fd ffd7 	bl	8000b34 <__addsf3>
 8002b86:	4603      	mov	r3, r0
 8002b88:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002b8a:	e08c      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
 8002b8c:	f3af 8000 	nop.w
 8002b90:	5443d6f4 	.word	0x5443d6f4
 8002b94:	3ff921fb 	.word	0x3ff921fb
 8002b98:	382daf40 	.word	0x382daf40
 8002b9c:	3ff0c152 	.word	0x3ff0c152
 8002ba0:	e858606b 	.word	0xe858606b
 8002ba4:	3ffbb67a 	.word	0x3ffbb67a
 8002ba8:	20000590 	.word	0x20000590
 8002bac:	3ff00000 	.word	0x3ff00000
	case 4:
		Ta = T0 / 2;
 8002bb0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002bb4:	6a38      	ldr	r0, [r7, #32]
 8002bb6:	f7fe f979 	bl	8000eac <__aeabi_fdiv>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 8002bbe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002bc2:	6a38      	ldr	r0, [r7, #32]
 8002bc4:	f7fe f972 	bl	8000eac <__aeabi_fdiv>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bce:	f7fd ffb1 	bl	8000b34 <__addsf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8002bd6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bda:	f7fd ffab 	bl	8000b34 <__addsf3>
 8002bde:	4603      	mov	r3, r0
 8002be0:	461c      	mov	r4, r3
 8002be2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002be6:	6a38      	ldr	r0, [r7, #32]
 8002be8:	f7fe f960 	bl	8000eac <__aeabi_fdiv>
 8002bec:	4603      	mov	r3, r0
 8002bee:	4619      	mov	r1, r3
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7fd ff9f 	bl	8000b34 <__addsf3>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002bfa:	e054      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
	case 5:
		Ta = T2 + T0 / 2;
 8002bfc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c00:	6a38      	ldr	r0, [r7, #32]
 8002c02:	f7fe f953 	bl	8000eac <__aeabi_fdiv>
 8002c06:	4603      	mov	r3, r0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002c0c:	f7fd ff92 	bl	8000b34 <__addsf3>
 8002c10:	4603      	mov	r3, r0
 8002c12:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8002c14:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c18:	6a38      	ldr	r0, [r7, #32]
 8002c1a:	f7fe f947 	bl	8000eac <__aeabi_fdiv>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8002c22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c26:	f7fd ff85 	bl	8000b34 <__addsf3>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	461c      	mov	r4, r3
 8002c2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c32:	6a38      	ldr	r0, [r7, #32]
 8002c34:	f7fe f93a 	bl	8000eac <__aeabi_fdiv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	f7fd ff79 	bl	8000b34 <__addsf3>
 8002c42:	4603      	mov	r3, r0
 8002c44:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002c46:	e02e      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 8002c48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c4c:	f7fd ff72 	bl	8000b34 <__addsf3>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461c      	mov	r4, r3
 8002c54:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c58:	6a38      	ldr	r0, [r7, #32]
 8002c5a:	f7fe f927 	bl	8000eac <__aeabi_fdiv>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	4619      	mov	r1, r3
 8002c62:	4620      	mov	r0, r4
 8002c64:	f7fd ff66 	bl	8000b34 <__addsf3>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8002c6c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c70:	6a38      	ldr	r0, [r7, #32]
 8002c72:	f7fe f91b 	bl	8000eac <__aeabi_fdiv>
 8002c76:	4603      	mov	r3, r0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 8002c7a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c7e:	6a38      	ldr	r0, [r7, #32]
 8002c80:	f7fe f914 	bl	8000eac <__aeabi_fdiv>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4619      	mov	r1, r3
 8002c88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c8a:	f7fd ff53 	bl	8000b34 <__addsf3>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	633b      	str	r3, [r7, #48]	@ 0x30
		break;
 8002c92:	e008      	b.n	8002ca6 <_Z15setPhaseVoltagefff+0x40e>
	default:
		// possible error state
		Ta = 0;
 8002c94:	f04f 0300 	mov.w	r3, #0
 8002c98:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	633b      	str	r3, [r7, #48]	@ 0x30
	}

	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 8002ca6:	4b8d      	ldr	r3, [pc, #564]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fe f849 	bl	8000d44 <__aeabi_fmul>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	4b8a      	ldr	r3, [pc, #552]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002cb8:	601a      	str	r2, [r3, #0]
	Ub = Tb * voltage_limit;
 8002cba:	4b88      	ldr	r3, [pc, #544]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe f83f 	bl	8000d44 <__aeabi_fmul>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4b86      	ldr	r3, [pc, #536]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002ccc:	601a      	str	r2, [r3, #0]
	Uc = Tc * voltage_limit;
 8002cce:	4b83      	ldr	r3, [pc, #524]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fe f835 	bl	8000d44 <__aeabi_fmul>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b82      	ldr	r3, [pc, #520]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002ce0:	601a      	str	r2, [r3, #0]

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002ce2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f9c8 	bl	8001080 <__aeabi_fcmplt>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <_Z15setPhaseVoltagefff+0x464>
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e00f      	b.n	8002d1c <_Z15setPhaseVoltagefff+0x484>
 8002cfc:	4b78      	ldr	r3, [pc, #480]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a76      	ldr	r2, [pc, #472]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d02:	6812      	ldr	r2, [r2, #0]
 8002d04:	4611      	mov	r1, r2
 8002d06:	4618      	mov	r0, r3
 8002d08:	f7fe f9d8 	bl	80010bc <__aeabi_fcmpgt>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <_Z15setPhaseVoltagefff+0x480>
 8002d12:	4b72      	ldr	r3, [pc, #456]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	e001      	b.n	8002d1c <_Z15setPhaseVoltagefff+0x484>
 8002d18:	4b71      	ldr	r3, [pc, #452]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a70      	ldr	r2, [pc, #448]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002d1e:	6013      	str	r3, [r2, #0]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002d20:	4b70      	ldr	r3, [pc, #448]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fe f9a9 	bl	8001080 <__aeabi_fcmplt>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <_Z15setPhaseVoltagefff+0x4a2>
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	e00f      	b.n	8002d5a <_Z15setPhaseVoltagefff+0x4c2>
 8002d3a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a67      	ldr	r2, [pc, #412]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d40:	6812      	ldr	r2, [r2, #0]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7fe f9b9 	bl	80010bc <__aeabi_fcmpgt>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d002      	beq.n	8002d56 <_Z15setPhaseVoltagefff+0x4be>
 8002d50:	4b62      	ldr	r3, [pc, #392]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	e001      	b.n	8002d5a <_Z15setPhaseVoltagefff+0x4c2>
 8002d56:	4b63      	ldr	r3, [pc, #396]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a62      	ldr	r2, [pc, #392]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002d5c:	6013      	str	r3, [r2, #0]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8002d5e:	4b62      	ldr	r3, [pc, #392]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f04f 0100 	mov.w	r1, #0
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7fe f98a 	bl	8001080 <__aeabi_fcmplt>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <_Z15setPhaseVoltagefff+0x4e0>
 8002d72:	f04f 0300 	mov.w	r3, #0
 8002d76:	e00f      	b.n	8002d98 <_Z15setPhaseVoltagefff+0x500>
 8002d78:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a57      	ldr	r2, [pc, #348]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d7e:	6812      	ldr	r2, [r2, #0]
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe f99a 	bl	80010bc <__aeabi_fcmpgt>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d002      	beq.n	8002d94 <_Z15setPhaseVoltagefff+0x4fc>
 8002d8e:	4b53      	ldr	r3, [pc, #332]	@ (8002edc <_Z15setPhaseVoltagefff+0x644>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	e001      	b.n	8002d98 <_Z15setPhaseVoltagefff+0x500>
 8002d94:	4b54      	ldr	r3, [pc, #336]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a53      	ldr	r2, [pc, #332]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002d9a:	6013      	str	r3, [r2, #0]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 1.0f);
 8002d9c:	4b50      	ldr	r3, [pc, #320]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a52      	ldr	r2, [pc, #328]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002da2:	6812      	ldr	r2, [r2, #0]
 8002da4:	4611      	mov	r1, r2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe f880 	bl	8000eac <__aeabi_fdiv>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f964 	bl	8001080 <__aeabi_fcmplt>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <_Z15setPhaseVoltagefff+0x52c>
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	e01c      	b.n	8002dfe <_Z15setPhaseVoltagefff+0x566>
 8002dc4:	4b46      	ldr	r3, [pc, #280]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a48      	ldr	r2, [pc, #288]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002dca:	6812      	ldr	r2, [r2, #0]
 8002dcc:	4611      	mov	r1, r2
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe f86c 	bl	8000eac <__aeabi_fdiv>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7fe f96e 	bl	80010bc <__aeabi_fcmpgt>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d002      	beq.n	8002dec <_Z15setPhaseVoltagefff+0x554>
 8002de6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002dea:	e008      	b.n	8002dfe <_Z15setPhaseVoltagefff+0x566>
 8002dec:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee0 <_Z15setPhaseVoltagefff+0x648>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3e      	ldr	r2, [pc, #248]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7fe f858 	bl	8000eac <__aeabi_fdiv>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	61fb      	str	r3, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 1.0f);
 8002e00:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a39      	ldr	r2, [pc, #228]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fe f84e 	bl	8000eac <__aeabi_fdiv>
 8002e10:	4603      	mov	r3, r0
 8002e12:	f04f 0100 	mov.w	r1, #0
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f932 	bl	8001080 <__aeabi_fcmplt>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d002      	beq.n	8002e28 <_Z15setPhaseVoltagefff+0x590>
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e01c      	b.n	8002e62 <_Z15setPhaseVoltagefff+0x5ca>
 8002e28:	4b2e      	ldr	r3, [pc, #184]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7fe f83a 	bl	8000eac <__aeabi_fdiv>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe f93c 	bl	80010bc <__aeabi_fcmpgt>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d002      	beq.n	8002e50 <_Z15setPhaseVoltagefff+0x5b8>
 8002e4a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e4e:	e008      	b.n	8002e62 <_Z15setPhaseVoltagefff+0x5ca>
 8002e50:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <_Z15setPhaseVoltagefff+0x64c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a25      	ldr	r2, [pc, #148]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f826 	bl	8000eac <__aeabi_fdiv>
 8002e60:	4603      	mov	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 1.0f);
 8002e64:	4b20      	ldr	r3, [pc, #128]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a20      	ldr	r2, [pc, #128]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002e6a:	6812      	ldr	r2, [r2, #0]
 8002e6c:	4611      	mov	r1, r2
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe f81c 	bl	8000eac <__aeabi_fdiv>
 8002e74:	4603      	mov	r3, r0
 8002e76:	f04f 0100 	mov.w	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f7fe f900 	bl	8001080 <__aeabi_fcmplt>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <_Z15setPhaseVoltagefff+0x5f4>
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	e01c      	b.n	8002ec6 <_Z15setPhaseVoltagefff+0x62e>
 8002e8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	f7fe f808 	bl	8000eac <__aeabi_fdiv>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7fe f90a 	bl	80010bc <__aeabi_fcmpgt>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <_Z15setPhaseVoltagefff+0x61c>
 8002eae:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002eb2:	e008      	b.n	8002ec6 <_Z15setPhaseVoltagefff+0x62e>
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee8 <_Z15setPhaseVoltagefff+0x650>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a0c      	ldr	r2, [pc, #48]	@ (8002eec <_Z15setPhaseVoltagefff+0x654>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fff4 	bl	8000eac <__aeabi_fdiv>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	617b      	str	r3, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	69b9      	ldr	r1, [r7, #24]
 8002ecc:	69f8      	ldr	r0, [r7, #28]
 8002ece:	f7ff fcab 	bl	8002828 <_Z18writeDutyCycle3PWMfff>
}
 8002ed2:	bf00      	nop
 8002ed4:	3740      	adds	r7, #64	@ 0x40
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	bf00      	nop
 8002edc:	20000590 	.word	0x20000590
 8002ee0:	20000440 	.word	0x20000440
 8002ee4:	20000444 	.word	0x20000444
 8002ee8:	20000448 	.word	0x20000448
 8002eec:	2000058c 	.word	0x2000058c

08002ef0 <_Z11needsSearchv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int needsSearch() {
 8002ef0:	b480      	push	{r7}
 8002ef2:	af00      	add	r7, sp, #0
	return 0;
 8002ef4:	2300      	movs	r3, #0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bc80      	pop	{r7}
 8002efc:	4770      	bx	lr
	...

08002f00 <_Z18absoluteZeroSearchv>:
// Encoder alignment the absolute zero angle
// - to the index
int absoluteZeroSearch() {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8002f06:	4b26      	ldr	r3, [pc, #152]	@ (8002fa0 <_Z18absoluteZeroSearchv+0xa0>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	607b      	str	r3, [r7, #4]
	float limit_volt = voltage_limit;
 8002f0c:	4b25      	ldr	r3, [pc, #148]	@ (8002fa4 <_Z18absoluteZeroSearchv+0xa4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	603b      	str	r3, [r7, #0]
	velocity_limit = velocity_index_search;
 8002f12:	4b25      	ldr	r3, [pc, #148]	@ (8002fa8 <_Z18absoluteZeroSearchv+0xa8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a22      	ldr	r2, [pc, #136]	@ (8002fa0 <_Z18absoluteZeroSearchv+0xa0>)
 8002f18:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 8002f1a:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <_Z18absoluteZeroSearchv+0xac>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a21      	ldr	r2, [pc, #132]	@ (8002fa4 <_Z18absoluteZeroSearchv+0xa4>)
 8002f20:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8002f22:	4b23      	ldr	r3, [pc, #140]	@ (8002fb0 <_Z18absoluteZeroSearchv+0xb0>)
 8002f24:	f04f 0200 	mov.w	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
	while (needsSearch() && shaft_angle < _2PI) {
 8002f2a:	e004      	b.n	8002f36 <_Z18absoluteZeroSearchv+0x36>
		angleOpenloop(1.5 * _2PI);
 8002f2c:	4821      	ldr	r0, [pc, #132]	@ (8002fb4 <_Z18absoluteZeroSearchv+0xb4>)
 8002f2e:	f000 fcab 	bl	8003888 <_Z13angleOpenloopf>
		// call important for some sensors not to loose count
		// not needed for the search
		getAngle();
 8002f32:	f7ff fb3d 	bl	80025b0 <_Z8getAnglev>
	while (needsSearch() && shaft_angle < _2PI) {
 8002f36:	f7ff ffdb 	bl	8002ef0 <_Z11needsSearchv>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00e      	beq.n	8002f5e <_Z18absoluteZeroSearchv+0x5e>
 8002f40:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <_Z18absoluteZeroSearchv+0xb0>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7fd fa6f 	bl	8000428 <__aeabi_f2d>
 8002f4a:	a313      	add	r3, pc, #76	@ (adr r3, 8002f98 <_Z18absoluteZeroSearchv+0x98>)
 8002f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f50:	f7fd fd34 	bl	80009bc <__aeabi_dcmplt>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <_Z18absoluteZeroSearchv+0x5e>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <_Z18absoluteZeroSearchv+0x60>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d1e3      	bne.n	8002f2c <_Z18absoluteZeroSearchv+0x2c>
	}
	setPhaseVoltage(0, 0, 0);
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f04f 0000 	mov.w	r0, #0
 8002f70:	f7ff fc92 	bl	8002898 <_Z15setPhaseVoltagefff>

	// re-init the limits
	velocity_limit = limit_vel;
 8002f74:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa0 <_Z18absoluteZeroSearchv+0xa0>)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 8002f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8002fa4 <_Z18absoluteZeroSearchv+0xa4>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8002f80:	f7ff ffb6 	bl	8002ef0 <_Z11needsSearchv>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	bf0c      	ite	eq
 8002f8a:	2301      	moveq	r3, #1
 8002f8c:	2300      	movne	r3, #0
 8002f8e:	b2db      	uxtb	r3, r3
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3708      	adds	r7, #8
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	54442eea 	.word	0x54442eea
 8002f9c:	401921fb 	.word	0x401921fb
 8002fa0:	20000598 	.word	0x20000598
 8002fa4:	20000590 	.word	0x20000590
 8002fa8:	20000588 	.word	0x20000588
 8002fac:	20000584 	.word	0x20000584
 8002fb0:	20000450 	.word	0x20000450
 8002fb4:	4116cbe4 	.word	0x4116cbe4

08002fb8 <_Z11alignSensorv>:
// Encoder alignment to electrical 0 angle
int alignSensor() {
 8002fb8:	b5b0      	push	{r4, r5, r7, lr}
 8002fba:	b088      	sub	sp, #32
 8002fbc:	af00      	add	r7, sp, #0
	int exit_flag = 1; //success
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	61fb      	str	r3, [r7, #28]
	// if unknown natural direction
	if (!_isset(sensor_direction)) //sensor_direction == -12345.0
 8002fc2:	4b9f      	ldr	r3, [pc, #636]	@ (8003240 <_Z11alignSensorv+0x288>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a9f      	ldr	r2, [pc, #636]	@ (8003244 <_Z11alignSensorv+0x28c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 80eb 	bne.w	80031a4 <_Z11alignSensorv+0x1ec>
			{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8002fce:	f7ff ff8f 	bl	8002ef0 <_Z11needsSearchv>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <_Z11alignSensorv+0x30>
			exit_flag = absoluteZeroSearch(); // o
 8002fe2:	f7ff ff8d 	bl	8002f00 <_Z18absoluteZeroSearchv>
 8002fe6:	61f8      	str	r0, [r7, #28]
		if (!exit_flag)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <_Z11alignSensorv+0x3a>
			return exit_flag;
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	e118      	b.n	8003224 <_Z11alignSensorv+0x26c>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) {
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61bb      	str	r3, [r7, #24]
 8002ff6:	e02f      	b.n	8003058 <_Z11alignSensorv+0xa0>
			float angle = _3PI_2 + _2PI * i / 500.0;
 8002ff8:	69b8      	ldr	r0, [r7, #24]
 8002ffa:	f7fd fa03 	bl	8000404 <__aeabi_i2d>
 8002ffe:	a38c      	add	r3, pc, #560	@ (adr r3, 8003230 <_Z11alignSensorv+0x278>)
 8003000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003004:	f7fd fa68 	bl	80004d8 <__aeabi_dmul>
 8003008:	4602      	mov	r2, r0
 800300a:	460b      	mov	r3, r1
 800300c:	4610      	mov	r0, r2
 800300e:	4619      	mov	r1, r3
 8003010:	f04f 0200 	mov.w	r2, #0
 8003014:	4b8c      	ldr	r3, [pc, #560]	@ (8003248 <_Z11alignSensorv+0x290>)
 8003016:	f7fd fb89 	bl	800072c <__aeabi_ddiv>
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4610      	mov	r0, r2
 8003020:	4619      	mov	r1, r3
 8003022:	a385      	add	r3, pc, #532	@ (adr r3, 8003238 <_Z11alignSensorv+0x280>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	f7fd f8a0 	bl	800016c <__adddf3>
 800302c:	4602      	mov	r2, r0
 800302e:	460b      	mov	r3, r1
 8003030:	4610      	mov	r0, r2
 8003032:	4619      	mov	r1, r3
 8003034:	f7fd fd28 	bl	8000a88 <__aeabi_d2f>
 8003038:	4603      	mov	r3, r0
 800303a:	603b      	str	r3, [r7, #0]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 800303c:	4b83      	ldr	r3, [pc, #524]	@ (800324c <_Z11alignSensorv+0x294>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	f04f 0100 	mov.w	r1, #0
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fc26 	bl	8002898 <_Z15setPhaseVoltagefff>
			HAL_Delay(2);
 800304c:	2002      	movs	r0, #2
 800304e:	f001 f8fb 	bl	8004248 <HAL_Delay>
		for (int i = 0; i <= 500; i++) {
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	3301      	adds	r3, #1
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800305e:	ddcb      	ble.n	8002ff8 <_Z11alignSensorv+0x40>
		}
		updateSensor();
 8003060:	f7ff fa4e 	bl	8002500 <_Z12updateSensorv>
		// take and angle in the middle
		float mid_angle = getAngle();
 8003064:	f7ff faa4 	bl	80025b0 <_Z8getAnglev>
 8003068:	6138      	str	r0, [r7, #16]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) {
 800306a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e02f      	b.n	80030d2 <_Z11alignSensorv+0x11a>
			float angle = _3PI_2 + _2PI * i / 500.0;
 8003072:	6978      	ldr	r0, [r7, #20]
 8003074:	f7fd f9c6 	bl	8000404 <__aeabi_i2d>
 8003078:	a36d      	add	r3, pc, #436	@ (adr r3, 8003230 <_Z11alignSensorv+0x278>)
 800307a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800307e:	f7fd fa2b 	bl	80004d8 <__aeabi_dmul>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4610      	mov	r0, r2
 8003088:	4619      	mov	r1, r3
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	4b6e      	ldr	r3, [pc, #440]	@ (8003248 <_Z11alignSensorv+0x290>)
 8003090:	f7fd fb4c 	bl	800072c <__aeabi_ddiv>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4610      	mov	r0, r2
 800309a:	4619      	mov	r1, r3
 800309c:	a366      	add	r3, pc, #408	@ (adr r3, 8003238 <_Z11alignSensorv+0x280>)
 800309e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a2:	f7fd f863 	bl	800016c <__adddf3>
 80030a6:	4602      	mov	r2, r0
 80030a8:	460b      	mov	r3, r1
 80030aa:	4610      	mov	r0, r2
 80030ac:	4619      	mov	r1, r3
 80030ae:	f7fd fceb 	bl	8000a88 <__aeabi_d2f>
 80030b2:	4603      	mov	r3, r0
 80030b4:	607b      	str	r3, [r7, #4]
			setPhaseVoltage(voltage_sensor_align, 0, angle);
 80030b6:	4b65      	ldr	r3, [pc, #404]	@ (800324c <_Z11alignSensorv+0x294>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	f04f 0100 	mov.w	r1, #0
 80030c0:	4618      	mov	r0, r3
 80030c2:	f7ff fbe9 	bl	8002898 <_Z15setPhaseVoltagefff>
			HAL_Delay(2);
 80030c6:	2002      	movs	r0, #2
 80030c8:	f001 f8be 	bl	8004248 <HAL_Delay>
		for (int i = 500; i >= 0; i--) {
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	3b01      	subs	r3, #1
 80030d0:	617b      	str	r3, [r7, #20]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	dacc      	bge.n	8003072 <_Z11alignSensorv+0xba>
		}
		updateSensor();
 80030d8:	f7ff fa12 	bl	8002500 <_Z12updateSensorv>
		float end_angle = getAngle();
 80030dc:	f7ff fa68 	bl	80025b0 <_Z8getAnglev>
 80030e0:	60f8      	str	r0, [r7, #12]
		setPhaseVoltage(0, 0, 0);
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0100 	mov.w	r1, #0
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f7ff fbd3 	bl	8002898 <_Z15setPhaseVoltagefff>
		HAL_Delay(200);
 80030f2:	20c8      	movs	r0, #200	@ 0xc8
 80030f4:	f001 f8a8 	bl	8004248 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) {
 80030f8:	68f9      	ldr	r1, [r7, #12]
 80030fa:	6938      	ldr	r0, [r7, #16]
 80030fc:	f7fd ffb6 	bl	800106c <__aeabi_fcmpeq>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <_Z11alignSensorv+0x152>
			return 0; // failed calibration
 8003106:	2300      	movs	r3, #0
 8003108:	e08c      	b.n	8003224 <_Z11alignSensorv+0x26c>
		} else if (mid_angle < end_angle) {
 800310a:	68f9      	ldr	r1, [r7, #12]
 800310c:	6938      	ldr	r0, [r7, #16]
 800310e:	f7fd ffb7 	bl	8001080 <__aeabi_fcmplt>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <_Z11alignSensorv+0x16a>
			sensor_direction = CCW;
 8003118:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <_Z11alignSensorv+0x288>)
 800311a:	f04f 32ff 	mov.w	r2, #4294967295
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e002      	b.n	8003128 <_Z11alignSensorv+0x170>
		} else {
			sensor_direction = CW;
 8003122:	4b47      	ldr	r3, [pc, #284]	@ (8003240 <_Z11alignSensorv+0x288>)
 8003124:	2201      	movs	r2, #1
 8003126:	601a      	str	r2, [r3, #0]
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8003128:	68f9      	ldr	r1, [r7, #12]
 800312a:	6938      	ldr	r0, [r7, #16]
 800312c:	f7fd fd00 	bl	8000b30 <__aeabi_fsub>
 8003130:	4603      	mov	r3, r0
 8003132:	4618      	mov	r0, r3
 8003134:	f7fe f850 	bl	80011d8 <_ZSt4fabsf>
 8003138:	60b8      	str	r0, [r7, #8]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) { // 0.5 is arbitrary number it can be lower or higher!
 800313a:	4b45      	ldr	r3, [pc, #276]	@ (8003250 <_Z11alignSensorv+0x298>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f7fd fdac 	bl	8000c9c <__aeabi_i2f>
 8003144:	4603      	mov	r3, r0
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	4618      	mov	r0, r3
 800314a:	f7fd fdfb 	bl	8000d44 <__aeabi_fmul>
 800314e:	4603      	mov	r3, r0
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd f969 	bl	8000428 <__aeabi_f2d>
 8003156:	a336      	add	r3, pc, #216	@ (adr r3, 8003230 <_Z11alignSensorv+0x278>)
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f7fd f804 	bl	8000168 <__aeabi_dsub>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4614      	mov	r4, r2
 8003166:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	4b39      	ldr	r3, [pc, #228]	@ (8003254 <_Z11alignSensorv+0x29c>)
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fc40 	bl	80009f8 <__aeabi_dcmpgt>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d012      	beq.n	80031a4 <_Z11alignSensorv+0x1ec>
			pp_check = _2PI / moved;
 800317e:	68b8      	ldr	r0, [r7, #8]
 8003180:	f7fd f952 	bl	8000428 <__aeabi_f2d>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	a129      	add	r1, pc, #164	@ (adr r1, 8003230 <_Z11alignSensorv+0x278>)
 800318a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800318e:	f7fd facd 	bl	800072c <__aeabi_ddiv>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4610      	mov	r0, r2
 8003198:	4619      	mov	r1, r3
 800319a:	f7fd fc75 	bl	8000a88 <__aeabi_d2f>
 800319e:	4603      	mov	r3, r0
 80031a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003258 <_Z11alignSensorv+0x2a0>)
 80031a2:	6013      	str	r3, [r2, #0]
		}
	}

	// zero electric angle not known
	if (!_isset(zero_electric_angle)) {
 80031a4:	4b2d      	ldr	r3, [pc, #180]	@ (800325c <_Z11alignSensorv+0x2a4>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	492d      	ldr	r1, [pc, #180]	@ (8003260 <_Z11alignSensorv+0x2a8>)
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd ff5e 	bl	800106c <__aeabi_fcmpeq>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d035      	beq.n	8003222 <_Z11alignSensorv+0x26a>
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 80031b6:	4b25      	ldr	r3, [pc, #148]	@ (800324c <_Z11alignSensorv+0x294>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003264 <_Z11alignSensorv+0x2ac>)
 80031bc:	f04f 0100 	mov.w	r1, #0
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff fb69 	bl	8002898 <_Z15setPhaseVoltagefff>
		HAL_Delay(700);
 80031c6:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 80031ca:	f001 f83d 	bl	8004248 <HAL_Delay>
		zero_electric_angle = _normalizeAngle(_electricalAngle(sensor_direction * getAngle(), pole_pairs));
 80031ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003240 <_Z11alignSensorv+0x288>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fd fd62 	bl	8000c9c <__aeabi_i2f>
 80031d8:	4604      	mov	r4, r0
 80031da:	f7ff f9e9 	bl	80025b0 <_Z8getAnglev>
 80031de:	4603      	mov	r3, r0
 80031e0:	4619      	mov	r1, r3
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7fd fdae 	bl	8000d44 <__aeabi_fmul>
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	4b18      	ldr	r3, [pc, #96]	@ (8003250 <_Z11alignSensorv+0x298>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4619      	mov	r1, r3
 80031f2:	4610      	mov	r0, r2
 80031f4:	f7ff f800 	bl	80021f8 <_Z16_electricalAnglefi>
 80031f8:	4603      	mov	r3, r0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fe ffc8 	bl	8002190 <_Z15_normalizeAnglef>
 8003200:	4603      	mov	r3, r0
 8003202:	4a16      	ldr	r2, [pc, #88]	@ (800325c <_Z11alignSensorv+0x2a4>)
 8003204:	6013      	str	r3, [r2, #0]
		HAL_Delay(20);
 8003206:	2014      	movs	r0, #20
 8003208:	f001 f81e 	bl	8004248 <HAL_Delay>
		// stop everything
		setPhaseVoltage(0, 0, 0);
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0100 	mov.w	r1, #0
 8003214:	f04f 0000 	mov.w	r0, #0
 8003218:	f7ff fb3e 	bl	8002898 <_Z15setPhaseVoltagefff>
		HAL_Delay(200);
 800321c:	20c8      	movs	r0, #200	@ 0xc8
 800321e:	f001 f813 	bl	8004248 <HAL_Delay>
	}
	return exit_flag;
 8003222:	69fb      	ldr	r3, [r7, #28]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3720      	adds	r7, #32
 8003228:	46bd      	mov	sp, r7
 800322a:	bdb0      	pop	{r4, r5, r7, pc}
 800322c:	f3af 8000 	nop.w
 8003230:	54442eea 	.word	0x54442eea
 8003234:	401921fb 	.word	0x401921fb
 8003238:	7f330d32 	.word	0x7f330d32
 800323c:	4012d97c 	.word	0x4012d97c
 8003240:	2000001c 	.word	0x2000001c
 8003244:	ffffcfc7 	.word	0xffffcfc7
 8003248:	407f4000 	.word	0x407f4000
 800324c:	20000584 	.word	0x20000584
 8003250:	20000014 	.word	0x20000014
 8003254:	3fe00000 	.word	0x3fe00000
 8003258:	200005fc 	.word	0x200005fc
 800325c:	20000018 	.word	0x20000018
 8003260:	c640e400 	.word	0xc640e400
 8003264:	4096cbe4 	.word	0x4096cbe4

08003268 <_Z7initFOCf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int initFOC(float zero_electric_offset, enum Direction _sensor_direction) {
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
	int exit_flag = 1;
 8003274:	2301      	movs	r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) {
 8003278:	4911      	ldr	r1, [pc, #68]	@ (80032c0 <_Z7initFOCf9Direction+0x58>)
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fef6 	bl	800106c <__aeabi_fcmpeq>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <_Z7initFOCf9Direction+0x2c>
		// absolute zero offset provided - no need to align
		zero_electric_angle = zero_electric_offset;
 8003286:	4a0f      	ldr	r2, [pc, #60]	@ (80032c4 <_Z7initFOCf9Direction+0x5c>)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6013      	str	r3, [r2, #0]
		// set the sensor direction - default CW
		sensor_direction = _sensor_direction;
 800328c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003290:	4a0d      	ldr	r2, [pc, #52]	@ (80032c8 <_Z7initFOCf9Direction+0x60>)
 8003292:	6013      	str	r3, [r2, #0]
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.zero_electric_angle
	exit_flag *= alignSensor();
 8003294:	f7ff fe90 	bl	8002fb8 <_Z11alignSensorv>
 8003298:	4602      	mov	r2, r0
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	60fb      	str	r3, [r7, #12]
	// added the shaft_angle update
	shaft_angle = getAngle();
 80032a2:	f7ff f985 	bl	80025b0 <_Z8getAnglev>
 80032a6:	4603      	mov	r3, r0
 80032a8:	4a08      	ldr	r2, [pc, #32]	@ (80032cc <_Z7initFOCf9Direction+0x64>)
 80032aa:	6013      	str	r3, [r2, #0]
	HAL_Delay(500);
 80032ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80032b0:	f000 ffca 	bl	8004248 <HAL_Delay>

	return exit_flag;
 80032b4:	68fb      	ldr	r3, [r7, #12]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	c640e400 	.word	0xc640e400
 80032c4:	20000018 	.word	0x20000018
 80032c8:	2000001c 	.word	0x2000001c
 80032cc:	20000450 	.word	0x20000450

080032d0 <_Z7loopFOCv>:

void loopFOC() {
 80032d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032d2:	b09b      	sub	sp, #108	@ 0x6c
 80032d4:	af08      	add	r7, sp, #32
	updateSensor();
 80032d6:	f7ff f913 	bl	8002500 <_Z12updateSensorv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = shaftAngle();
 80032da:	f7ff fa1f 	bl	800271c <_Z10shaftAnglev>
 80032de:	4603      	mov	r3, r0
 80032e0:	4a55      	ldr	r2, [pc, #340]	@ (8003438 <_Z7loopFOCv+0x168>)
 80032e2:	6013      	str	r3, [r2, #0]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = electricalAngle();
 80032e4:	f7ff fa78 	bl	80027d8 <_Z15electricalAnglev>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a54      	ldr	r2, [pc, #336]	@ (800343c <_Z7loopFOCv+0x16c>)
 80032ec:	6013      	str	r3, [r2, #0]

	// Chosen TorqueControlType::foc_current
	// read dq currents
	current = getFOCCurrents(electrical_angle);
 80032ee:	4b53      	ldr	r3, [pc, #332]	@ (800343c <_Z7loopFOCv+0x16c>)
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	4c53      	ldr	r4, [pc, #332]	@ (8003440 <_Z7loopFOCv+0x170>)
 80032f4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f7fe fd40 	bl	8001d80 <_Z14getFOCCurrentsf>
 8003300:	4622      	mov	r2, r4
 8003302:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003306:	e893 0003 	ldmia.w	r3, {r0, r1}
 800330a:	e882 0003 	stmia.w	r2, {r0, r1}
	LPF_current_q_s.x = current.q;
 800330e:	4b4c      	ldr	r3, [pc, #304]	@ (8003440 <_Z7loopFOCv+0x170>)
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4a4c      	ldr	r2, [pc, #304]	@ (8003444 <_Z7loopFOCv+0x174>)
 8003314:	6013      	str	r3, [r2, #0]
	LPF_current_q_s = LowPassFilter(LPF_current_q_s);
 8003316:	4c4b      	ldr	r4, [pc, #300]	@ (8003444 <_Z7loopFOCv+0x174>)
 8003318:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800331c:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <_Z7loopFOCv+0x174>)
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	9200      	str	r2, [sp, #0]
 8003322:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003324:	f000 f89a 	bl	800345c <_Z13LowPassFilter3LPF>
 8003328:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800332c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800332e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current.q = LPF_current_q_s.y_prev;   // filter values
 8003332:	4b44      	ldr	r3, [pc, #272]	@ (8003444 <_Z7loopFOCv+0x174>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	4a42      	ldr	r2, [pc, #264]	@ (8003440 <_Z7loopFOCv+0x170>)
 8003338:	6053      	str	r3, [r2, #4]

	LPF_current_d_s.x = current.d;
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <_Z7loopFOCv+0x170>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a42      	ldr	r2, [pc, #264]	@ (8003448 <_Z7loopFOCv+0x178>)
 8003340:	6013      	str	r3, [r2, #0]
	LPF_current_d_s = LowPassFilter(LPF_current_d_s);
 8003342:	4c41      	ldr	r4, [pc, #260]	@ (8003448 <_Z7loopFOCv+0x178>)
 8003344:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8003348:	4b3f      	ldr	r3, [pc, #252]	@ (8003448 <_Z7loopFOCv+0x178>)
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	9200      	str	r2, [sp, #0]
 800334e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003350:	f000 f884 	bl	800345c <_Z13LowPassFilter3LPF>
 8003354:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003358:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800335a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current.d = LPF_current_d_s.y_prev;   // filter values
 800335e:	4b3a      	ldr	r3, [pc, #232]	@ (8003448 <_Z7loopFOCv+0x178>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	4a37      	ldr	r2, [pc, #220]	@ (8003440 <_Z7loopFOCv+0x170>)
 8003364:	6013      	str	r3, [r2, #0]

	// calculate the phase voltages
	PID_current_q_s.error = current_sp - current.q;
 8003366:	4b39      	ldr	r3, [pc, #228]	@ (800344c <_Z7loopFOCv+0x17c>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a35      	ldr	r2, [pc, #212]	@ (8003440 <_Z7loopFOCv+0x170>)
 800336c:	6852      	ldr	r2, [r2, #4]
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd fbdd 	bl	8000b30 <__aeabi_fsub>
 8003376:	4603      	mov	r3, r0
 8003378:	461a      	mov	r2, r3
 800337a:	4b35      	ldr	r3, [pc, #212]	@ (8003450 <_Z7loopFOCv+0x180>)
 800337c:	601a      	str	r2, [r3, #0]
	PID_current_q_s = PID(PID_current_q_s);
 800337e:	4b34      	ldr	r3, [pc, #208]	@ (8003450 <_Z7loopFOCv+0x180>)
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	f107 0c08 	add.w	ip, r7, #8
 8003386:	4e32      	ldr	r6, [pc, #200]	@ (8003450 <_Z7loopFOCv+0x180>)
 8003388:	466d      	mov	r5, sp
 800338a:	f106 040c 	add.w	r4, r6, #12
 800338e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003392:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003396:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800339a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800339e:	4660      	mov	r0, ip
 80033a0:	f000 f8d2 	bl	8003548 <_Z3PID3PID>
 80033a4:	687d      	ldr	r5, [r7, #4]
 80033a6:	f107 0408 	add.w	r4, r7, #8
 80033aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033b6:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.q = PID_current_q_s.output_prev;
 80033ba:	4b25      	ldr	r3, [pc, #148]	@ (8003450 <_Z7loopFOCv+0x180>)
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	4a25      	ldr	r2, [pc, #148]	@ (8003454 <_Z7loopFOCv+0x184>)
 80033c0:	6053      	str	r3, [r2, #4]

	PID_current_d_s.error = 0 - current.d;
 80033c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003440 <_Z7loopFOCv+0x170>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4619      	mov	r1, r3
 80033c8:	f04f 0000 	mov.w	r0, #0
 80033cc:	f7fd fbb0 	bl	8000b30 <__aeabi_fsub>
 80033d0:	4603      	mov	r3, r0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b20      	ldr	r3, [pc, #128]	@ (8003458 <_Z7loopFOCv+0x188>)
 80033d6:	601a      	str	r2, [r3, #0]
	PID_current_d_s = PID(PID_current_d_s);
 80033d8:	4b1f      	ldr	r3, [pc, #124]	@ (8003458 <_Z7loopFOCv+0x188>)
 80033da:	607b      	str	r3, [r7, #4]
 80033dc:	f107 0c08 	add.w	ip, r7, #8
 80033e0:	4e1d      	ldr	r6, [pc, #116]	@ (8003458 <_Z7loopFOCv+0x188>)
 80033e2:	466d      	mov	r5, sp
 80033e4:	f106 040c 	add.w	r4, r6, #12
 80033e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033ec:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80033f0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80033f4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80033f8:	4660      	mov	r0, ip
 80033fa:	f000 f8a5 	bl	8003548 <_Z3PID3PID>
 80033fe:	687d      	ldr	r5, [r7, #4]
 8003400:	f107 0408 	add.w	r4, r7, #8
 8003404:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003406:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003408:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800340a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800340c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003410:	e885 0003 	stmia.w	r5, {r0, r1}
	voltage.d = PID_current_d_s.output_prev;
 8003414:	4b10      	ldr	r3, [pc, #64]	@ (8003458 <_Z7loopFOCv+0x188>)
 8003416:	691b      	ldr	r3, [r3, #16]
 8003418:	4a0e      	ldr	r2, [pc, #56]	@ (8003454 <_Z7loopFOCv+0x184>)
 800341a:	6013      	str	r3, [r2, #0]

	// set the phase voltage - FOC heart function :)
	setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 800341c:	4b0d      	ldr	r3, [pc, #52]	@ (8003454 <_Z7loopFOCv+0x184>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a0c      	ldr	r2, [pc, #48]	@ (8003454 <_Z7loopFOCv+0x184>)
 8003422:	6811      	ldr	r1, [r2, #0]
 8003424:	4a05      	ldr	r2, [pc, #20]	@ (800343c <_Z7loopFOCv+0x16c>)
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff fa35 	bl	8002898 <_Z15setPhaseVoltagefff>
}
 800342e:	bf00      	nop
 8003430:	374c      	adds	r7, #76	@ 0x4c
 8003432:	46bd      	mov	sp, r7
 8003434:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003436:	bf00      	nop
 8003438:	20000450 	.word	0x20000450
 800343c:	20000454 	.word	0x20000454
 8003440:	20000470 	.word	0x20000470
 8003444:	20000498 	.word	0x20000498
 8003448:	200004a8 	.word	0x200004a8
 800344c:	2000045c 	.word	0x2000045c
 8003450:	200004e0 	.word	0x200004e0
 8003454:	20000468 	.word	0x20000468
 8003458:	200004b8 	.word	0x200004b8

0800345c <_Z13LowPassFilter3LPF>:

//Low-Pass Filter
struct LPF LowPassFilter(struct LPF LPF) {
 800345c:	b084      	sub	sp, #16
 800345e:	b590      	push	{r4, r7, lr}
 8003460:	b087      	sub	sp, #28
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800346a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	unsigned long timestamp = micros();
 800346e:	f7fe fb39 	bl	8001ae4 <_ZL6microsv>
 8003472:	6138      	str	r0, [r7, #16]

	float dt = (timestamp - LPF.timestamp_prev) * 1e-6f;
 8003474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fc0a 	bl	8000c94 <__aeabi_ui2f>
 8003480:	4603      	mov	r3, r0
 8003482:	492e      	ldr	r1, [pc, #184]	@ (800353c <_Z13LowPassFilter3LPF+0xe0>)
 8003484:	4618      	mov	r0, r3
 8003486:	f7fd fc5d 	bl	8000d44 <__aeabi_fmul>
 800348a:	4603      	mov	r3, r0
 800348c:	617b      	str	r3, [r7, #20]

	if (dt < 0.0f)
 800348e:	f04f 0100 	mov.w	r1, #0
 8003492:	6978      	ldr	r0, [r7, #20]
 8003494:	f7fd fdf4 	bl	8001080 <__aeabi_fcmplt>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <_Z13LowPassFilter3LPF+0x48>
		dt = 1e-3f;
 800349e:	4b28      	ldr	r3, [pc, #160]	@ (8003540 <_Z13LowPassFilter3LPF+0xe4>)
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	e012      	b.n	80034ca <_Z13LowPassFilter3LPF+0x6e>
	else if (dt > 0.3f) {
 80034a4:	4927      	ldr	r1, [pc, #156]	@ (8003544 <_Z13LowPassFilter3LPF+0xe8>)
 80034a6:	6978      	ldr	r0, [r7, #20]
 80034a8:	f7fd fe08 	bl	80010bc <__aeabi_fcmpgt>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <_Z13LowPassFilter3LPF+0x6e>
		LPF.y_prev = LPF.x;
 80034b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b4:	637b      	str	r3, [r7, #52]	@ 0x34
		LPF.timestamp_prev = timestamp;
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	633b      	str	r3, [r7, #48]	@ 0x30
		return LPF;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	461c      	mov	r4, r3
 80034be:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80034c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80034c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80034c8:	e031      	b.n	800352e <_Z13LowPassFilter3LPF+0xd2>
	}

	float alpha = LPF.Tf / (LPF.Tf + dt);
 80034ca:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 80034cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034ce:	6979      	ldr	r1, [r7, #20]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd fb2f 	bl	8000b34 <__addsf3>
 80034d6:	4603      	mov	r3, r0
 80034d8:	4619      	mov	r1, r3
 80034da:	4620      	mov	r0, r4
 80034dc:	f7fd fce6 	bl	8000eac <__aeabi_fdiv>
 80034e0:	4603      	mov	r3, r0
 80034e2:	60fb      	str	r3, [r7, #12]
	float y = alpha * LPF.y_prev + (1.0f - alpha) * LPF.x;
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7fd fc2b 	bl	8000d44 <__aeabi_fmul>
 80034ee:	4603      	mov	r3, r0
 80034f0:	461c      	mov	r4, r3
 80034f2:	68f9      	ldr	r1, [r7, #12]
 80034f4:	f04f 507e 	mov.w	r0, #1065353216	@ 0x3f800000
 80034f8:	f7fd fb1a 	bl	8000b30 <__aeabi_fsub>
 80034fc:	4603      	mov	r3, r0
 80034fe:	461a      	mov	r2, r3
 8003500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003502:	4619      	mov	r1, r3
 8003504:	4610      	mov	r0, r2
 8003506:	f7fd fc1d 	bl	8000d44 <__aeabi_fmul>
 800350a:	4603      	mov	r3, r0
 800350c:	4619      	mov	r1, r3
 800350e:	4620      	mov	r0, r4
 8003510:	f7fd fb10 	bl	8000b34 <__addsf3>
 8003514:	4603      	mov	r3, r0
 8003516:	60bb      	str	r3, [r7, #8]

	LPF.y_prev = y;
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	637b      	str	r3, [r7, #52]	@ 0x34
	LPF.timestamp_prev = timestamp;
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	633b      	str	r3, [r7, #48]	@ 0x30

	return LPF;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	461c      	mov	r4, r3
 8003524:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8003528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800352a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	371c      	adds	r7, #28
 8003532:	46bd      	mov	sp, r7
 8003534:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003538:	b004      	add	sp, #16
 800353a:	4770      	bx	lr
 800353c:	358637bd 	.word	0x358637bd
 8003540:	3a83126f 	.word	0x3a83126f
 8003544:	3e99999a 	.word	0x3e99999a

08003548 <_Z3PID3PID>:

//float PID(float error,float P, float I, float D, float output_ramp, float limit, unsigned long timestamp_prev, float integral_prev, float error_prev , float output_prev)
struct PID PID(struct PID PID) {
 8003548:	b084      	sub	sp, #16
 800354a:	b5b0      	push	{r4, r5, r7, lr}
 800354c:	b08a      	sub	sp, #40	@ 0x28
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
 8003552:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8003556:	e880 000e 	stmia.w	r0, {r1, r2, r3}

	// calculate the time from the last call
	unsigned long timestamp_now = micros();
 800355a:	f7fe fac3 	bl	8001ae4 <_ZL6microsv>
 800355e:	61f8      	str	r0, [r7, #28]
	float Ts = (timestamp_now - PID.timestamp_prev) * 1e-6;
 8003560:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	4618      	mov	r0, r3
 8003568:	f7fc ff3c 	bl	80003e4 <__aeabi_ui2d>
 800356c:	a37c      	add	r3, pc, #496	@ (adr r3, 8003760 <_Z3PID3PID+0x218>)
 800356e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003572:	f7fc ffb1 	bl	80004d8 <__aeabi_dmul>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fa83 	bl	8000a88 <__aeabi_d2f>
 8003582:	4603      	mov	r3, r0
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
	// quick fix for strange cases (micros overflow)
	if (Ts <= 0 || Ts > 0.5)
 8003586:	f04f 0100 	mov.w	r1, #0
 800358a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800358c:	f7fd fd82 	bl	8001094 <__aeabi_fcmple>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d107      	bne.n	80035a6 <_Z3PID3PID+0x5e>
 8003596:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800359a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800359c:	f7fd fd8e 	bl	80010bc <__aeabi_fcmpgt>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <_Z3PID3PID+0x62>
		Ts = 1e-3;
 80035a6:	4b70      	ldr	r3, [pc, #448]	@ (8003768 <_Z3PID3PID+0x220>)
 80035a8:	627b      	str	r3, [r7, #36]	@ 0x24
	dtx = Ts;
 80035aa:	4a70      	ldr	r2, [pc, #448]	@ (800376c <_Z3PID3PID+0x224>)
 80035ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ae:	6013      	str	r3, [r2, #0]
	// u(s) = (P + I/s + Ds)e(s)
	// Discrete implementations
	// proportional part
	// u_p  = P *e(k)
	float proportional = PID.P * PID.error;
 80035b0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035b4:	4611      	mov	r1, r2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fd fbc4 	bl	8000d44 <__aeabi_fmul>
 80035bc:	4603      	mov	r3, r0
 80035be:	61bb      	str	r3, [r7, #24]
	// Tustin transform of the integral part
	// u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
	float integral = PID.integral_prev
 80035c0:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
			+ PID.I * Ts * 0.5f * (PID.error + PID.error_prev);
 80035c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80035c6:	4618      	mov	r0, r3
 80035c8:	f7fd fbbc 	bl	8000d44 <__aeabi_fmul>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fbb6 	bl	8000d44 <__aeabi_fmul>
 80035d8:	4603      	mov	r3, r0
 80035da:	461d      	mov	r5, r3
 80035dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035e0:	4611      	mov	r1, r2
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fd faa6 	bl	8000b34 <__addsf3>
 80035e8:	4603      	mov	r3, r0
 80035ea:	4619      	mov	r1, r3
 80035ec:	4628      	mov	r0, r5
 80035ee:	f7fd fba9 	bl	8000d44 <__aeabi_fmul>
 80035f2:	4603      	mov	r3, r0
	float integral = PID.integral_prev
 80035f4:	4619      	mov	r1, r3
 80035f6:	4620      	mov	r0, r4
 80035f8:	f7fd fa9c 	bl	8000b34 <__addsf3>
 80035fc:	4603      	mov	r3, r0
 80035fe:	617b      	str	r3, [r7, #20]
	// antiwindup - limit the output
	integral = _constrain(integral, -PID.limit, PID.limit);
 8003600:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003602:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003606:	4619      	mov	r1, r3
 8003608:	6978      	ldr	r0, [r7, #20]
 800360a:	f7fd fd39 	bl	8001080 <__aeabi_fcmplt>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <_Z3PID3PID+0xd4>
 8003614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003616:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800361a:	e00a      	b.n	8003632 <_Z3PID3PID+0xea>
 800361c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361e:	4619      	mov	r1, r3
 8003620:	6978      	ldr	r0, [r7, #20]
 8003622:	f7fd fd4b 	bl	80010bc <__aeabi_fcmpgt>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <_Z3PID3PID+0xe8>
 800362c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362e:	e000      	b.n	8003632 <_Z3PID3PID+0xea>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	617b      	str	r3, [r7, #20]
	// Discrete derivation
	// u_dk = D(ek - ek_1)/Ts
	float derivative = PID.D * (PID.error - PID.error_prev) / Ts;
 8003634:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8003636:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003638:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7fd fa77 	bl	8000b30 <__aeabi_fsub>
 8003642:	4603      	mov	r3, r0
 8003644:	4619      	mov	r1, r3
 8003646:	4620      	mov	r0, r4
 8003648:	f7fd fb7c 	bl	8000d44 <__aeabi_fmul>
 800364c:	4603      	mov	r3, r0
 800364e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fc2b 	bl	8000eac <__aeabi_fdiv>
 8003656:	4603      	mov	r3, r0
 8003658:	613b      	str	r3, [r7, #16]

	// sum all the components
	float output = proportional + integral + derivative;
 800365a:	6979      	ldr	r1, [r7, #20]
 800365c:	69b8      	ldr	r0, [r7, #24]
 800365e:	f7fd fa69 	bl	8000b34 <__addsf3>
 8003662:	4603      	mov	r3, r0
 8003664:	4619      	mov	r1, r3
 8003666:	6938      	ldr	r0, [r7, #16]
 8003668:	f7fd fa64 	bl	8000b34 <__addsf3>
 800366c:	4603      	mov	r3, r0
 800366e:	623b      	str	r3, [r7, #32]
	// antiwindup - limit the output variable
	output = _constrain(output, -PID.limit, PID.limit);
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8003676:	4619      	mov	r1, r3
 8003678:	6a38      	ldr	r0, [r7, #32]
 800367a:	f7fd fd01 	bl	8001080 <__aeabi_fcmplt>
 800367e:	4603      	mov	r3, r0
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <_Z3PID3PID+0x144>
 8003684:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003686:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800368a:	e00a      	b.n	80036a2 <_Z3PID3PID+0x15a>
 800368c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800368e:	4619      	mov	r1, r3
 8003690:	6a38      	ldr	r0, [r7, #32]
 8003692:	f7fd fd13 	bl	80010bc <__aeabi_fcmpgt>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <_Z3PID3PID+0x158>
 800369c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369e:	e000      	b.n	80036a2 <_Z3PID3PID+0x15a>
 80036a0:	6a3b      	ldr	r3, [r7, #32]
 80036a2:	623b      	str	r3, [r7, #32]

	// if output ramp defined
	float output_ramp = PID.output_ramp;
 80036a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036a6:	60fb      	str	r3, [r7, #12]
	if (output_ramp > 0) {
 80036a8:	f04f 0100 	mov.w	r1, #0
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f7fd fd05 	bl	80010bc <__aeabi_fcmpgt>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d035      	beq.n	8003724 <_Z3PID3PID+0x1dc>
		// limit the acceleration by ramping the output
		float output_rate = (output - PID.output_prev) / Ts;
 80036b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ba:	4619      	mov	r1, r3
 80036bc:	6a38      	ldr	r0, [r7, #32]
 80036be:	f7fd fa37 	bl	8000b30 <__aeabi_fsub>
 80036c2:	4603      	mov	r3, r0
 80036c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd fbf0 	bl	8000eac <__aeabi_fdiv>
 80036cc:	4603      	mov	r3, r0
 80036ce:	60bb      	str	r3, [r7, #8]
		if (output_rate > output_ramp)
 80036d0:	68f9      	ldr	r1, [r7, #12]
 80036d2:	68b8      	ldr	r0, [r7, #8]
 80036d4:	f7fd fcf2 	bl	80010bc <__aeabi_fcmpgt>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00c      	beq.n	80036f8 <_Z3PID3PID+0x1b0>
			output = PID.output_prev + output_ramp * Ts;
 80036de:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 80036e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7fd fb2e 	bl	8000d44 <__aeabi_fmul>
 80036e8:	4603      	mov	r3, r0
 80036ea:	4619      	mov	r1, r3
 80036ec:	4620      	mov	r0, r4
 80036ee:	f7fd fa21 	bl	8000b34 <__addsf3>
 80036f2:	4603      	mov	r3, r0
 80036f4:	623b      	str	r3, [r7, #32]
 80036f6:	e015      	b.n	8003724 <_Z3PID3PID+0x1dc>
		else if (output_rate < -output_ramp)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80036fe:	4619      	mov	r1, r3
 8003700:	68b8      	ldr	r0, [r7, #8]
 8003702:	f7fd fcbd 	bl	8001080 <__aeabi_fcmplt>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00b      	beq.n	8003724 <_Z3PID3PID+0x1dc>
			output = PID.output_prev - output_ramp * Ts;
 800370c:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 800370e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f7fd fb17 	bl	8000d44 <__aeabi_fmul>
 8003716:	4603      	mov	r3, r0
 8003718:	4619      	mov	r1, r3
 800371a:	4620      	mov	r0, r4
 800371c:	f7fd fa08 	bl	8000b30 <__aeabi_fsub>
 8003720:	4603      	mov	r3, r0
 8003722:	623b      	str	r3, [r7, #32]
	}

	// saving for the next pass
	PID.integral_prev = integral;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	643b      	str	r3, [r7, #64]	@ 0x40
	PID.output_prev = output;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	PID.error_prev = PID.error;
 800372c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800372e:	647b      	str	r3, [r7, #68]	@ 0x44
	PID.timestamp_prev = timestamp_now;
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	64bb      	str	r3, [r7, #72]	@ 0x48
	return PID;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	461d      	mov	r5, r3
 8003738:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 800373c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800373e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003748:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	3728      	adds	r7, #40	@ 0x28
 8003750:	46bd      	mov	sp, r7
 8003752:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8003756:	b004      	add	sp, #16
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	f3af 8000 	nop.w
 8003760:	a0b5ed8d 	.word	0xa0b5ed8d
 8003764:	3eb0c6f7 	.word	0x3eb0c6f7
 8003768:	3a83126f 	.word	0x3a83126f
 800376c:	200005f4 	.word	0x200005f4

08003770 <_Z10move_anglef>:
//  voltage.d = 0;

}

void move_angle(float new_target)
{
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	b097      	sub	sp, #92	@ 0x5c
 8003774:	af08      	add	r7, sp, #32
 8003776:	6378      	str	r0, [r7, #52]	@ 0x34
  // get angular velocity
  shaft_velocity = shaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 8003778:	f7ff f804 	bl	8002784 <_Z13shaftVelocityv>
 800377c:	4603      	mov	r3, r0
 800377e:	4a38      	ldr	r2, [pc, #224]	@ (8003860 <_Z10move_anglef+0xf0>)
 8003780:	6013      	str	r3, [r2, #0]

  // downsampling (optional)
  // if(motion_cnt++ < motion_downsample) return;
  // motion_cnt = 0;
  // set internal target variable
  if(_isset(new_target))
 8003782:	4938      	ldr	r1, [pc, #224]	@ (8003864 <_Z10move_anglef+0xf4>)
 8003784:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8003786:	f7fd fc71 	bl	800106c <__aeabi_fcmpeq>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d102      	bne.n	8003796 <_Z10move_anglef+0x26>
	  target = new_target;
 8003790:	4a35      	ldr	r2, [pc, #212]	@ (8003868 <_Z10move_anglef+0xf8>)
 8003792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003794:	6013      	str	r3, [r2, #0]

  // angle set point
  shaft_angle_sp = target;
 8003796:	4b34      	ldr	r3, [pc, #208]	@ (8003868 <_Z10move_anglef+0xf8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a34      	ldr	r2, [pc, #208]	@ (800386c <_Z10move_anglef+0xfc>)
 800379c:	6013      	str	r3, [r2, #0]
  // calculate velocity set point
  PID_angle_s.error = shaft_angle_sp - shaft_angle;
 800379e:	4b33      	ldr	r3, [pc, #204]	@ (800386c <_Z10move_anglef+0xfc>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a33      	ldr	r2, [pc, #204]	@ (8003870 <_Z10move_anglef+0x100>)
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4611      	mov	r1, r2
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7fd f9c1 	bl	8000b30 <__aeabi_fsub>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	4b30      	ldr	r3, [pc, #192]	@ (8003874 <_Z10move_anglef+0x104>)
 80037b4:	601a      	str	r2, [r3, #0]
  PID_angle_s = PID(PID_angle_s);
 80037b6:	4b2f      	ldr	r3, [pc, #188]	@ (8003874 <_Z10move_anglef+0x104>)
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	f107 0c08 	add.w	ip, r7, #8
 80037be:	4e2d      	ldr	r6, [pc, #180]	@ (8003874 <_Z10move_anglef+0x104>)
 80037c0:	466d      	mov	r5, sp
 80037c2:	f106 040c 	add.w	r4, r6, #12
 80037c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ca:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80037ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80037d2:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80037d6:	4660      	mov	r0, ip
 80037d8:	f7ff feb6 	bl	8003548 <_Z3PID3PID>
 80037dc:	687d      	ldr	r5, [r7, #4]
 80037de:	f107 0408 	add.w	r4, r7, #8
 80037e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037ee:	e885 0003 	stmia.w	r5, {r0, r1}
  shaft_velocity_sp = PID_angle_s.output_prev;
 80037f2:	4b20      	ldr	r3, [pc, #128]	@ (8003874 <_Z10move_anglef+0x104>)
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	4a20      	ldr	r2, [pc, #128]	@ (8003878 <_Z10move_anglef+0x108>)
 80037f8:	6013      	str	r3, [r2, #0]
  // calculate the torque command
  PID_velocity_s.error = shaft_velocity_sp - shaft_velocity ;
 80037fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003878 <_Z10move_anglef+0x108>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a18      	ldr	r2, [pc, #96]	@ (8003860 <_Z10move_anglef+0xf0>)
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd f993 	bl	8000b30 <__aeabi_fsub>
 800380a:	4603      	mov	r3, r0
 800380c:	461a      	mov	r2, r3
 800380e:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <_Z10move_anglef+0x10c>)
 8003810:	601a      	str	r2, [r3, #0]
  PID_velocity_s = PID(PID_velocity_s);
 8003812:	4b1a      	ldr	r3, [pc, #104]	@ (800387c <_Z10move_anglef+0x10c>)
 8003814:	607b      	str	r3, [r7, #4]
 8003816:	f107 0c08 	add.w	ip, r7, #8
 800381a:	4e18      	ldr	r6, [pc, #96]	@ (800387c <_Z10move_anglef+0x10c>)
 800381c:	466d      	mov	r5, sp
 800381e:	f106 040c 	add.w	r4, r6, #12
 8003822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003826:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800382a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800382e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8003832:	4660      	mov	r0, ip
 8003834:	f7ff fe88 	bl	8003548 <_Z3PID3PID>
 8003838:	687d      	ldr	r5, [r7, #4]
 800383a:	f107 0408 	add.w	r4, r7, #8
 800383e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003844:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003846:	e894 0003 	ldmia.w	r4, {r0, r1}
 800384a:	e885 0003 	stmia.w	r5, {r0, r1}
  current_sp = PID_velocity_s.output_prev;
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <_Z10move_anglef+0x10c>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	4a0b      	ldr	r2, [pc, #44]	@ (8003880 <_Z10move_anglef+0x110>)
 8003854:	6013      	str	r3, [r2, #0]

//  voltage.q = current_sp*phase_resistance;
//  voltage.d = 0;
}
 8003856:	bf00      	nop
 8003858:	373c      	adds	r7, #60	@ 0x3c
 800385a:	46bd      	mov	sp, r7
 800385c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800385e:	bf00      	nop
 8003860:	20000458 	.word	0x20000458
 8003864:	c640e400 	.word	0xc640e400
 8003868:	2000044c 	.word	0x2000044c
 800386c:	20000464 	.word	0x20000464
 8003870:	20000450 	.word	0x20000450
 8003874:	20000530 	.word	0x20000530
 8003878:	20000460 	.word	0x20000460
 800387c:	20000508 	.word	0x20000508
 8003880:	2000045c 	.word	0x2000045c
 8003884:	00000000 	.word	0x00000000

08003888 <_Z13angleOpenloopf>:
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float angleOpenloop(float target_angle) {
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	unsigned long now_us = micros();
 8003890:	f7fe f928 	bl	8001ae4 <_ZL6microsv>
 8003894:	6138      	str	r0, [r7, #16]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003896:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <_Z13angleOpenloopf+0x178>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	461a      	mov	r2, r3
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fc fd9f 	bl	80003e4 <__aeabi_ui2d>
 80038a6:	a354      	add	r3, pc, #336	@ (adr r3, 80039f8 <_Z13angleOpenloopf+0x170>)
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f7fc fe14 	bl	80004d8 <__aeabi_dmul>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4610      	mov	r0, r2
 80038b6:	4619      	mov	r1, r3
 80038b8:	f7fd f8e6 	bl	8000a88 <__aeabi_d2f>
 80038bc:	4603      	mov	r3, r0
 80038be:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 80038c0:	f04f 0100 	mov.w	r1, #0
 80038c4:	6978      	ldr	r0, [r7, #20]
 80038c6:	f7fd fbe5 	bl	8001094 <__aeabi_fcmple>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d107      	bne.n	80038e0 <_Z13angleOpenloopf+0x58>
 80038d0:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80038d4:	6978      	ldr	r0, [r7, #20]
 80038d6:	f7fd fbf1 	bl	80010bc <__aeabi_fcmpgt>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <_Z13angleOpenloopf+0x5c>
		Ts = 1e-3;
 80038e0:	4b48      	ldr	r3, [pc, #288]	@ (8003a04 <_Z13angleOpenloopf+0x17c>)
 80038e2:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts)) {
 80038e4:	4b48      	ldr	r3, [pc, #288]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4619      	mov	r1, r3
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fd f920 	bl	8000b30 <__aeabi_fsub>
 80038f0:	4603      	mov	r3, r0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7fd fc56 	bl	80011a4 <_ZSt3absf>
 80038f8:	4604      	mov	r4, r0
 80038fa:	4b44      	ldr	r3, [pc, #272]	@ (8003a0c <_Z13angleOpenloopf+0x184>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6979      	ldr	r1, [r7, #20]
 8003900:	4618      	mov	r0, r3
 8003902:	f7fd fa1f 	bl	8000d44 <__aeabi_fmul>
 8003906:	4603      	mov	r3, r0
 8003908:	4618      	mov	r0, r3
 800390a:	f7fd fc4b 	bl	80011a4 <_ZSt3absf>
 800390e:	4603      	mov	r3, r0
 8003910:	2201      	movs	r2, #1
 8003912:	4615      	mov	r5, r2
 8003914:	4619      	mov	r1, r3
 8003916:	4620      	mov	r0, r4
 8003918:	f7fd fbd0 	bl	80010bc <__aeabi_fcmpgt>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <_Z13angleOpenloopf+0x9e>
 8003922:	2300      	movs	r3, #0
 8003924:	461d      	mov	r5, r3
 8003926:	b2eb      	uxtb	r3, r5
 8003928:	2b00      	cmp	r3, #0
 800392a:	d044      	beq.n	80039b6 <_Z13angleOpenloopf+0x12e>
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 800392c:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fd f8fc 	bl	8000b30 <__aeabi_fsub>
 8003938:	4603      	mov	r3, r0
 800393a:	f04f 0100 	mov.w	r1, #0
 800393e:	4618      	mov	r0, r3
 8003940:	f7fd fb9e 	bl	8001080 <__aeabi_fcmplt>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <_Z13angleOpenloopf+0xc6>
 800394a:	4c31      	ldr	r4, [pc, #196]	@ (8003a10 <_Z13angleOpenloopf+0x188>)
 800394c:	e013      	b.n	8003976 <_Z13angleOpenloopf+0xee>
 800394e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4619      	mov	r1, r3
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f7fd f8eb 	bl	8000b30 <__aeabi_fsub>
 800395a:	4603      	mov	r3, r0
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fbab 	bl	80010bc <__aeabi_fcmpgt>
 8003966:	4603      	mov	r3, r0
 8003968:	2b00      	cmp	r3, #0
 800396a:	d002      	beq.n	8003972 <_Z13angleOpenloopf+0xea>
 800396c:	f04f 547e 	mov.w	r4, #1065353216	@ 0x3f800000
 8003970:	e001      	b.n	8003976 <_Z13angleOpenloopf+0xee>
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	4b25      	ldr	r3, [pc, #148]	@ (8003a0c <_Z13angleOpenloopf+0x184>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fc12 	bl	80011a4 <_ZSt3absf>
 8003980:	4603      	mov	r3, r0
 8003982:	4619      	mov	r1, r3
 8003984:	4620      	mov	r0, r4
 8003986:	f7fd f9dd 	bl	8000d44 <__aeabi_fmul>
 800398a:	4603      	mov	r3, r0
				* Ts;
 800398c:	6979      	ldr	r1, [r7, #20]
 800398e:	4618      	mov	r0, r3
 8003990:	f7fd f9d8 	bl	8000d44 <__aeabi_fmul>
 8003994:	4603      	mov	r3, r0
 8003996:	461a      	mov	r2, r3
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit)
 8003998:	4b1b      	ldr	r3, [pc, #108]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4619      	mov	r1, r3
 800399e:	4610      	mov	r0, r2
 80039a0:	f7fd f8c8 	bl	8000b34 <__addsf3>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b17      	ldr	r3, [pc, #92]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 80039aa:	601a      	str	r2, [r3, #0]
		shaft_velocity = velocity_limit;
 80039ac:	4b17      	ldr	r3, [pc, #92]	@ (8003a0c <_Z13angleOpenloopf+0x184>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a18      	ldr	r2, [pc, #96]	@ (8003a14 <_Z13angleOpenloopf+0x18c>)
 80039b2:	6013      	str	r3, [r2, #0]
 80039b4:	e006      	b.n	80039c4 <_Z13angleOpenloopf+0x13c>
	} else {
		shaft_angle = target_angle;
 80039b6:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6013      	str	r3, [r2, #0]
		shaft_velocity = 0;
 80039bc:	4b15      	ldr	r3, [pc, #84]	@ (8003a14 <_Z13angleOpenloopf+0x18c>)
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <_Z13angleOpenloopf+0x190>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]
//  if(_isset(phase_resistance))
//	  Uq =  current_limit*phase_resistance;

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 80039ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <_Z13angleOpenloopf+0x180>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a13      	ldr	r2, [pc, #76]	@ (8003a1c <_Z13angleOpenloopf+0x194>)
 80039d0:	6812      	ldr	r2, [r2, #0]
 80039d2:	4611      	mov	r1, r2
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fe fc0f 	bl	80021f8 <_Z16_electricalAnglefi>
 80039da:	4603      	mov	r3, r0
 80039dc:	461a      	mov	r2, r3
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	68f8      	ldr	r0, [r7, #12]
 80039e4:	f7fe ff58 	bl	8002898 <_Z15setPhaseVoltagefff>

	open_loop_timestamp = now_us;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4a05      	ldr	r2, [pc, #20]	@ (8003a00 <_Z13angleOpenloopf+0x178>)
 80039ec:	6013      	str	r3, [r2, #0]
	return Uq;
 80039ee:	68fb      	ldr	r3, [r7, #12]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	a0b5ed8d 	.word	0xa0b5ed8d
 80039fc:	3eb0c6f7 	.word	0x3eb0c6f7
 8003a00:	200005a0 	.word	0x200005a0
 8003a04:	3a83126f 	.word	0x3a83126f
 8003a08:	20000450 	.word	0x20000450
 8003a0c:	20000598 	.word	0x20000598
 8003a10:	bf800000 	.word	0xbf800000
 8003a14:	20000458 	.word	0x20000458
 8003a18:	20000590 	.word	0x20000590
 8003a1c:	20000014 	.word	0x20000014

08003a20 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a24:	b672      	cpsid	i
}
 8003a26:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <Error_Handler+0x8>

08003a2c <_ZSt4fmodIfdEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    fmod(_Tp __x, _Up __y)
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	e9c7 2300 	strd	r2, r3, [r7]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return fmod(__type(__x), __type(__y));
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7fc fcf5 	bl	8000428 <__aeabi_f2d>
 8003a3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a42:	f004 f891 	bl	8007b68 <fmod>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
    }
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	3710      	adds	r7, #16
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8003a54:	b5b0      	push	{r4, r5, r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7fc fcd0 	bl	8000404 <__aeabi_i2d>
 8003a64:	4604      	mov	r4, r0
 8003a66:	460d      	mov	r5, r1
 8003a68:	6838      	ldr	r0, [r7, #0]
 8003a6a:	f7fc fccb 	bl	8000404 <__aeabi_i2d>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	460b      	mov	r3, r1
 8003a72:	4620      	mov	r0, r4
 8003a74:	4629      	mov	r1, r5
 8003a76:	f004 f89f 	bl	8007bb8 <pow>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	460b      	mov	r3, r1
    }
 8003a7e:	4610      	mov	r0, r2
 8003a80:	4619      	mov	r1, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bdb0      	pop	{r4, r5, r7, pc}

08003a88 <_Z41__static_initialization_and_destruction_0ii>:
	}
	/* USER CODE END Error_Handler_Debug */
}
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d107      	bne.n	8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d102      	bne.n	8003aa8 <_Z41__static_initialization_and_destruction_0ii+0x20>
HelloRunJ runx;
 8003aa2:	4809      	ldr	r0, [pc, #36]	@ (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003aa4:	f7fd fb34 	bl	8001110 <_ZN9HelloRunJC1Ev>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d107      	bne.n	8003abe <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d102      	bne.n	8003abe <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003ab8:	4803      	ldr	r0, [pc, #12]	@ (8003ac8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003aba:	f7fd fb3b 	bl	8001134 <_ZN9HelloRunJD1Ev>
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000224 	.word	0x20000224

08003acc <_GLOBAL__sub_I_runx>:
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	f7ff ffd7 	bl	8003a88 <_Z41__static_initialization_and_destruction_0ii>
 8003ada:	bd80      	pop	{r7, pc}

08003adc <_GLOBAL__sub_D_runx>:
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	f7ff ffcf 	bl	8003a88 <_Z41__static_initialization_and_destruction_0ii>
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003af2:	4b15      	ldr	r3, [pc, #84]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	4a14      	ldr	r2, [pc, #80]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003af8:	f043 0301 	orr.w	r3, r3, #1
 8003afc:	6193      	str	r3, [r2, #24]
 8003afe:	4b12      	ldr	r3, [pc, #72]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <HAL_MspInit+0x5c>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	607b      	str	r3, [r7, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003b22:	4b0a      	ldr	r3, [pc, #40]	@ (8003b4c <HAL_MspInit+0x60>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	4a04      	ldr	r2, [pc, #16]	@ (8003b4c <HAL_MspInit+0x60>)
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	3714      	adds	r7, #20
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bc80      	pop	{r7}
 8003b46:	4770      	bx	lr
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40010000 	.word	0x40010000

08003b50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b08a      	sub	sp, #40	@ 0x28
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	f107 0318 	add.w	r3, r7, #24
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	605a      	str	r2, [r3, #4]
 8003b62:	609a      	str	r2, [r3, #8]
 8003b64:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a33      	ldr	r2, [pc, #204]	@ (8003c38 <HAL_ADC_MspInit+0xe8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d15f      	bne.n	8003c30 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003b70:	4b32      	ldr	r3, [pc, #200]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	4a31      	ldr	r2, [pc, #196]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b7a:	6193      	str	r3, [r2, #24]
 8003b7c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b84:	617b      	str	r3, [r7, #20]
 8003b86:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b88:	4b2c      	ldr	r3, [pc, #176]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b8e:	f043 0304 	orr.w	r3, r3, #4
 8003b92:	6193      	str	r3, [r2, #24]
 8003b94:	4b29      	ldr	r3, [pc, #164]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	613b      	str	r3, [r7, #16]
 8003b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba0:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	4a25      	ldr	r2, [pc, #148]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	6193      	str	r3, [r2, #24]
 8003bac:	4b23      	ldr	r3, [pc, #140]	@ (8003c3c <HAL_ADC_MspInit+0xec>)
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	f003 0308 	and.w	r3, r3, #8
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = SOA_Pin;
 8003bb8:	2308      	movs	r3, #8
 8003bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(SOA_GPIO_Port, &GPIO_InitStruct);
 8003bc0:	f107 0318 	add.w	r3, r7, #24
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	481e      	ldr	r0, [pc, #120]	@ (8003c40 <HAL_ADC_MspInit+0xf0>)
 8003bc8:	f001 ff96 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SOB_Pin|SOC_Pin;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd4:	f107 0318 	add.w	r3, r7, #24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	481a      	ldr	r0, [pc, #104]	@ (8003c44 <HAL_ADC_MspInit+0xf4>)
 8003bdc:	f001 ff8c 	bl	8005af8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003be0:	4b19      	ldr	r3, [pc, #100]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003be2:	4a1a      	ldr	r2, [pc, #104]	@ (8003c4c <HAL_ADC_MspInit+0xfc>)
 8003be4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003be6:	4b18      	ldr	r3, [pc, #96]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bec:	4b16      	ldr	r3, [pc, #88]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003bf2:	4b15      	ldr	r3, [pc, #84]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003bf4:	2280      	movs	r2, #128	@ 0x80
 8003bf6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bf8:	4b13      	ldr	r3, [pc, #76]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003bfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bfe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003c00:	4b11      	ldr	r3, [pc, #68]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c06:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003c08:	4b0f      	ldr	r3, [pc, #60]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003c14:	480c      	ldr	r0, [pc, #48]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c16:	f001 fd81 	bl	800571c <HAL_DMA_Init>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8003c20:	f7ff fefe 	bl	8003a20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a08      	ldr	r2, [pc, #32]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c28:	621a      	str	r2, [r3, #32]
 8003c2a:	4a07      	ldr	r2, [pc, #28]	@ (8003c48 <HAL_ADC_MspInit+0xf8>)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003c30:	bf00      	nop
 8003c32:	3728      	adds	r7, #40	@ 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40012400 	.word	0x40012400
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	40010800 	.word	0x40010800
 8003c44:	40010c00 	.word	0x40010c00
 8003c48:	2000025c 	.word	0x2000025c
 8003c4c:	40020008 	.word	0x40020008

08003c50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b088      	sub	sp, #32
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c58:	f107 0310 	add.w	r3, r7, #16
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	605a      	str	r2, [r3, #4]
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d1c <HAL_CAN_MspInit+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d151      	bne.n	8003d14 <HAL_CAN_MspInit+0xc4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003c70:	4b2b      	ldr	r3, [pc, #172]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c72:	69db      	ldr	r3, [r3, #28]
 8003c74:	4a2a      	ldr	r2, [pc, #168]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c76:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003c7a:	61d3      	str	r3, [r2, #28]
 8003c7c:	4b28      	ldr	r3, [pc, #160]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c7e:	69db      	ldr	r3, [r3, #28]
 8003c80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c88:	4b25      	ldr	r3, [pc, #148]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	4a24      	ldr	r2, [pc, #144]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c8e:	f043 0304 	orr.w	r3, r3, #4
 8003c92:	6193      	str	r3, [r2, #24]
 8003c94:	4b22      	ldr	r3, [pc, #136]	@ (8003d20 <HAL_CAN_MspInit+0xd0>)
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	60bb      	str	r3, [r7, #8]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003ca0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003ca4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cae:	f107 0310 	add.w	r3, r7, #16
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	481b      	ldr	r0, [pc, #108]	@ (8003d24 <HAL_CAN_MspInit+0xd4>)
 8003cb6:	f001 ff1f 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003cba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cc8:	f107 0310 	add.w	r3, r7, #16
 8003ccc:	4619      	mov	r1, r3
 8003cce:	4815      	ldr	r0, [pc, #84]	@ (8003d24 <HAL_CAN_MspInit+0xd4>)
 8003cd0:	f001 ff12 	bl	8005af8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_HP_CAN1_TX_IRQn, 0, 0);
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	2013      	movs	r0, #19
 8003cda:	f001 fce8 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN1_TX_IRQn);
 8003cde:	2013      	movs	r0, #19
 8003ce0:	f001 fd01 	bl	80056e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	2014      	movs	r0, #20
 8003cea:	f001 fce0 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003cee:	2014      	movs	r0, #20
 8003cf0:	f001 fcf9 	bl	80056e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	2015      	movs	r0, #21
 8003cfa:	f001 fcd8 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003cfe:	2015      	movs	r0, #21
 8003d00:	f001 fcf1 	bl	80056e6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003d04:	2200      	movs	r2, #0
 8003d06:	2100      	movs	r1, #0
 8003d08:	2016      	movs	r0, #22
 8003d0a:	f001 fcd0 	bl	80056ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003d0e:	2016      	movs	r0, #22
 8003d10:	f001 fce9 	bl	80056e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003d14:	bf00      	nop
 8003d16:	3720      	adds	r7, #32
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40006400 	.word	0x40006400
 8003d20:	40021000 	.word	0x40021000
 8003d24:	40010800 	.word	0x40010800

08003d28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d30:	f107 0310 	add.w	r3, r7, #16
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	605a      	str	r2, [r3, #4]
 8003d3a:	609a      	str	r2, [r3, #8]
 8003d3c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1b      	ldr	r2, [pc, #108]	@ (8003db0 <HAL_SPI_MspInit+0x88>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d12f      	bne.n	8003da8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003d48:	4b1a      	ldr	r3, [pc, #104]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d4e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003d52:	6193      	str	r3, [r2, #24]
 8003d54:	4b17      	ldr	r3, [pc, #92]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d60:	4b14      	ldr	r3, [pc, #80]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	4a13      	ldr	r2, [pc, #76]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d66:	f043 0304 	orr.w	r3, r3, #4
 8003d6a:	6193      	str	r3, [r2, #24]
 8003d6c:	4b11      	ldr	r3, [pc, #68]	@ (8003db4 <HAL_SPI_MspInit+0x8c>)
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	60bb      	str	r3, [r7, #8]
 8003d76:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003d78:	23a0      	movs	r3, #160	@ 0xa0
 8003d7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d80:	2303      	movs	r3, #3
 8003d82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d84:	f107 0310 	add.w	r3, r7, #16
 8003d88:	4619      	mov	r1, r3
 8003d8a:	480b      	ldr	r0, [pc, #44]	@ (8003db8 <HAL_SPI_MspInit+0x90>)
 8003d8c:	f001 feb4 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003d90:	2340      	movs	r3, #64	@ 0x40
 8003d92:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d94:	2300      	movs	r3, #0
 8003d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d9c:	f107 0310 	add.w	r3, r7, #16
 8003da0:	4619      	mov	r1, r3
 8003da2:	4805      	ldr	r0, [pc, #20]	@ (8003db8 <HAL_SPI_MspInit+0x90>)
 8003da4:	f001 fea8 	bl	8005af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003da8:	bf00      	nop
 8003daa:	3720      	adds	r7, #32
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40013000 	.word	0x40013000
 8003db4:	40021000 	.word	0x40021000
 8003db8:	40010800 	.word	0x40010800

08003dbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dcc:	d10b      	bne.n	8003de6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <HAL_TIM_Base_MspInit+0x34>)
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4a07      	ldr	r2, [pc, #28]	@ (8003df0 <HAL_TIM_Base_MspInit+0x34>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	61d3      	str	r3, [r2, #28]
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_TIM_Base_MspInit+0x34>)
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	60fb      	str	r3, [r7, #12]
 8003de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003de6:	bf00      	nop
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40021000 	.word	0x40021000

08003df4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dfc:	f107 0310 	add.w	r3, r7, #16
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]
 8003e04:	605a      	str	r2, [r3, #4]
 8003e06:	609a      	str	r2, [r3, #8]
 8003e08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d117      	bne.n	8003e44 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e14:	4b0d      	ldr	r3, [pc, #52]	@ (8003e4c <HAL_TIM_MspPostInit+0x58>)
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	4a0c      	ldr	r2, [pc, #48]	@ (8003e4c <HAL_TIM_MspPostInit+0x58>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6193      	str	r3, [r2, #24]
 8003e20:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <HAL_TIM_MspPostInit+0x58>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin|PWMC_Pin;
 8003e2c:	2307      	movs	r3, #7
 8003e2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2302      	movs	r3, #2
 8003e36:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e38:	f107 0310 	add.w	r3, r7, #16
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4804      	ldr	r0, [pc, #16]	@ (8003e50 <HAL_TIM_MspPostInit+0x5c>)
 8003e40:	f001 fe5a 	bl	8005af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003e44:	bf00      	nop
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	40010800 	.word	0x40010800

08003e54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e5c:	f107 0310 	add.w	r3, r7, #16
 8003e60:	2200      	movs	r2, #0
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	609a      	str	r2, [r3, #8]
 8003e68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <HAL_UART_MspInit+0x8c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d131      	bne.n	8003ed8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e74:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e7e:	6193      	str	r3, [r2, #24]
 8003e80:	4b18      	ldr	r3, [pc, #96]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8c:	4b15      	ldr	r3, [pc, #84]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	4a14      	ldr	r2, [pc, #80]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6193      	str	r3, [r2, #24]
 8003e98:	4b12      	ldr	r3, [pc, #72]	@ (8003ee4 <HAL_UART_MspInit+0x90>)
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	60bb      	str	r3, [r7, #8]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003ea8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eaa:	2302      	movs	r3, #2
 8003eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eb2:	f107 0310 	add.w	r3, r7, #16
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	480b      	ldr	r0, [pc, #44]	@ (8003ee8 <HAL_UART_MspInit+0x94>)
 8003eba:	f001 fe1d 	bl	8005af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003ebe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ec2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ecc:	f107 0310 	add.w	r3, r7, #16
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	4805      	ldr	r0, [pc, #20]	@ (8003ee8 <HAL_UART_MspInit+0x94>)
 8003ed4:	f001 fe10 	bl	8005af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003ed8:	bf00      	nop
 8003eda:	3720      	adds	r7, #32
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40013800 	.word	0x40013800
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40010800 	.word	0x40010800

08003eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ef0:	bf00      	nop
 8003ef2:	e7fd      	b.n	8003ef0 <NMI_Handler+0x4>

08003ef4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ef8:	bf00      	nop
 8003efa:	e7fd      	b.n	8003ef8 <HardFault_Handler+0x4>

08003efc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <MemManage_Handler+0x4>

08003f04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f08:	bf00      	nop
 8003f0a:	e7fd      	b.n	8003f08 <BusFault_Handler+0x4>

08003f0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <UsageFault_Handler+0x4>

08003f14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f18:	bf00      	nop
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr

08003f20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f20:	b480      	push	{r7}
 8003f22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f24:	bf00      	nop
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr

08003f2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr

08003f38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f3c:	f000 f968 	bl	8004210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003f48:	4802      	ldr	r0, [pc, #8]	@ (8003f54 <DMA1_Channel1_IRQHandler+0x10>)
 8003f4a:	f001 fca1 	bl	8005890 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	2000025c 	.word	0x2000025c

08003f58 <USB_HP_CAN1_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN TX interrupts.
  */
void USB_HP_CAN1_TX_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f5c:	4802      	ldr	r0, [pc, #8]	@ (8003f68 <USB_HP_CAN1_TX_IRQHandler+0x10>)
 8003f5e:	f001 f8a0 	bl	80050a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN1_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN1_TX_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200002a0 	.word	0x200002a0

08003f6c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f70:	4802      	ldr	r0, [pc, #8]	@ (8003f7c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8003f72:	f001 f896 	bl	80050a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	200002a0 	.word	0x200002a0

08003f80 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f84:	4802      	ldr	r0, [pc, #8]	@ (8003f90 <CAN1_RX1_IRQHandler+0x10>)
 8003f86:	f001 f88c 	bl	80050a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003f8a:	bf00      	nop
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	200002a0 	.word	0x200002a0

08003f94 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8003f98:	4802      	ldr	r0, [pc, #8]	@ (8003fa4 <CAN1_SCE_IRQHandler+0x10>)
 8003f9a:	f001 f882 	bl	80050a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	200002a0 	.word	0x200002a0

08003fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
	return 1;
 8003fac:	2301      	movs	r3, #1
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr

08003fb6 <_kill>:

int _kill(int pid, int sig)
{
 8003fb6:	b580      	push	{r7, lr}
 8003fb8:	b082      	sub	sp, #8
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
 8003fbe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003fc0:	f005 fea8 	bl	8009d14 <__errno>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2216      	movs	r2, #22
 8003fc8:	601a      	str	r2, [r3, #0]
	return -1;
 8003fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3708      	adds	r7, #8
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <_exit>:

void _exit (int status)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003fde:	f04f 31ff 	mov.w	r1, #4294967295
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ffe7 	bl	8003fb6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003fe8:	bf00      	nop
 8003fea:	e7fd      	b.n	8003fe8 <_exit+0x12>

08003fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	617b      	str	r3, [r7, #20]
 8003ffc:	e00a      	b.n	8004014 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003ffe:	f3af 8000 	nop.w
 8004002:	4601      	mov	r1, r0
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	60ba      	str	r2, [r7, #8]
 800400a:	b2ca      	uxtb	r2, r1
 800400c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3301      	adds	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697a      	ldr	r2, [r7, #20]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	dbf0      	blt.n	8003ffe <_read+0x12>
	}

return len;
 800401c:	687b      	ldr	r3, [r7, #4]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3718      	adds	r7, #24
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b086      	sub	sp, #24
 800402a:	af00      	add	r7, sp, #0
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	60b9      	str	r1, [r7, #8]
 8004030:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e009      	b.n	800404c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	1c5a      	adds	r2, r3, #1
 800403c:	60ba      	str	r2, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	3301      	adds	r3, #1
 800404a:	617b      	str	r3, [r7, #20]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	dbf1      	blt.n	8004038 <_write+0x12>
	}
	return len;
 8004054:	687b      	ldr	r3, [r7, #4]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <_close>:

int _close(int file)
{
 800405e:	b480      	push	{r7}
 8004060:	b083      	sub	sp, #12
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
	return -1;
 8004066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800406a:	4618      	mov	r0, r3
 800406c:	370c      	adds	r7, #12
 800406e:	46bd      	mov	sp, r7
 8004070:	bc80      	pop	{r7}
 8004072:	4770      	bx	lr

08004074 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004084:	605a      	str	r2, [r3, #4]
	return 0;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	bc80      	pop	{r7}
 8004090:	4770      	bx	lr

08004092 <_isatty>:

int _isatty(int file)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
	return 1;
 800409a:	2301      	movs	r3, #1
}
 800409c:	4618      	mov	r0, r3
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr

080040a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80040a6:	b480      	push	{r7}
 80040a8:	b085      	sub	sp, #20
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	60f8      	str	r0, [r7, #12]
 80040ae:	60b9      	str	r1, [r7, #8]
 80040b0:	607a      	str	r2, [r7, #4]
	return 0;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bc80      	pop	{r7}
 80040bc:	4770      	bx	lr
	...

080040c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80040c8:	4a14      	ldr	r2, [pc, #80]	@ (800411c <_sbrk+0x5c>)
 80040ca:	4b15      	ldr	r3, [pc, #84]	@ (8004120 <_sbrk+0x60>)
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040d4:	4b13      	ldr	r3, [pc, #76]	@ (8004124 <_sbrk+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <_sbrk+0x64>)
 80040de:	4a12      	ldr	r2, [pc, #72]	@ (8004128 <_sbrk+0x68>)
 80040e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040e2:	4b10      	ldr	r3, [pc, #64]	@ (8004124 <_sbrk+0x64>)
 80040e4:	681a      	ldr	r2, [r3, #0]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4413      	add	r3, r2
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d207      	bcs.n	8004100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040f0:	f005 fe10 	bl	8009d14 <__errno>
 80040f4:	4603      	mov	r3, r0
 80040f6:	220c      	movs	r2, #12
 80040f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040fa:	f04f 33ff 	mov.w	r3, #4294967295
 80040fe:	e009      	b.n	8004114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004100:	4b08      	ldr	r3, [pc, #32]	@ (8004124 <_sbrk+0x64>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004106:	4b07      	ldr	r3, [pc, #28]	@ (8004124 <_sbrk+0x64>)
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4413      	add	r3, r2
 800410e:	4a05      	ldr	r2, [pc, #20]	@ (8004124 <_sbrk+0x64>)
 8004110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004112:	68fb      	ldr	r3, [r7, #12]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20005000 	.word	0x20005000
 8004120:	00000400 	.word	0x00000400
 8004124:	20000608 	.word	0x20000608
 8004128:	20000760 	.word	0x20000760

0800412c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800412c:	b480      	push	{r7}
 800412e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004130:	bf00      	nop
 8004132:	46bd      	mov	sp, r7
 8004134:	bc80      	pop	{r7}
 8004136:	4770      	bx	lr

08004138 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004138:	480c      	ldr	r0, [pc, #48]	@ (800416c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800413a:	490d      	ldr	r1, [pc, #52]	@ (8004170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800413c:	4a0d      	ldr	r2, [pc, #52]	@ (8004174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800413e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004140:	e002      	b.n	8004148 <LoopCopyDataInit>

08004142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004146:	3304      	adds	r3, #4

08004148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800414a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800414c:	d3f9      	bcc.n	8004142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414e:	4a0a      	ldr	r2, [pc, #40]	@ (8004178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004150:	4c0a      	ldr	r4, [pc, #40]	@ (800417c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004154:	e001      	b.n	800415a <LoopFillZerobss>

08004156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004158:	3204      	adds	r2, #4

0800415a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800415a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800415c:	d3fb      	bcc.n	8004156 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800415e:	f7ff ffe5 	bl	800412c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004162:	f005 fddd 	bl	8009d20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004166:	f7fd f897 	bl	8001298 <main>
  bx lr
 800416a:	4770      	bx	lr
  ldr r0, =_sdata
 800416c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004170:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8004174:	0800c0a8 	.word	0x0800c0a8
  ldr r2, =_sbss
 8004178:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800417c:	2000075c 	.word	0x2000075c

08004180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004180:	e7fe      	b.n	8004180 <ADC1_2_IRQHandler>
	...

08004184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_Init+0x28>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <HAL_Init+0x28>)
 800418e:	f043 0310 	orr.w	r3, r3, #16
 8004192:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004194:	2003      	movs	r0, #3
 8004196:	f001 fa7f 	bl	8005698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800419a:	200f      	movs	r0, #15
 800419c:	f000 f808 	bl	80041b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a0:	f7ff fca4 	bl	8003aec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40022000 	.word	0x40022000

080041b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <HAL_InitTick+0x54>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_InitTick+0x58>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 fa97 	bl	8005702 <HAL_SYSTICK_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00e      	b.n	80041fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d80a      	bhi.n	80041fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e4:	2200      	movs	r2, #0
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	f001 fa5f 	bl	80056ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f0:	4a06      	ldr	r2, [pc, #24]	@ (800420c <HAL_InitTick+0x5c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000020 	.word	0x20000020
 8004208:	20000028 	.word	0x20000028
 800420c:	20000024 	.word	0x20000024

08004210 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_IncTick+0x1c>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b05      	ldr	r3, [pc, #20]	@ (8004230 <HAL_IncTick+0x20>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	4a03      	ldr	r2, [pc, #12]	@ (8004230 <HAL_IncTick+0x20>)
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr
 800422c:	20000028 	.word	0x20000028
 8004230:	2000060c 	.word	0x2000060c

08004234 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return uwTick;
 8004238:	4b02      	ldr	r3, [pc, #8]	@ (8004244 <HAL_GetTick+0x10>)
 800423a:	681b      	ldr	r3, [r3, #0]
}
 800423c:	4618      	mov	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	2000060c 	.word	0x2000060c

08004248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004250:	f7ff fff0 	bl	8004234 <HAL_GetTick>
 8004254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004260:	d005      	beq.n	800426e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004262:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <HAL_Delay+0x44>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	461a      	mov	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4413      	add	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800426e:	bf00      	nop
 8004270:	f7ff ffe0 	bl	8004234 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	429a      	cmp	r2, r3
 800427e:	d8f7      	bhi.n	8004270 <HAL_Delay+0x28>
  {
  }
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	20000028 	.word	0x20000028

08004290 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b086      	sub	sp, #24
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004298:	2300      	movs	r3, #0
 800429a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e0be      	b.n	8004430 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f7ff fc3e 	bl	8003b50 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 faff 	bl	80048d8 <ADC_ConversionStop_Disable>
 80042da:	4603      	mov	r3, r0
 80042dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f040 8099 	bne.w	800441e <HAL_ADC_Init+0x18e>
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f040 8095 	bne.w	800441e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80042fc:	f023 0302 	bic.w	r3, r3, #2
 8004300:	f043 0202 	orr.w	r2, r3, #2
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004310:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7b1b      	ldrb	r3, [r3, #12]
 8004316:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004318:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	4313      	orrs	r3, r2
 800431e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004328:	d003      	beq.n	8004332 <HAL_ADC_Init+0xa2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d102      	bne.n	8004338 <HAL_ADC_Init+0xa8>
 8004332:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004336:	e000      	b.n	800433a <HAL_ADC_Init+0xaa>
 8004338:	2300      	movs	r3, #0
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	7d1b      	ldrb	r3, [r3, #20]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d119      	bne.n	800437c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	7b1b      	ldrb	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	3b01      	subs	r3, #1
 8004356:	035a      	lsls	r2, r3, #13
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004360:	613b      	str	r3, [r7, #16]
 8004362:	e00b      	b.n	800437c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004368:	f043 0220 	orr.w	r2, r3, #32
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004374:	f043 0201 	orr.w	r2, r3, #1
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	430a      	orrs	r2, r1
 800438e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	4b28      	ldr	r3, [pc, #160]	@ (8004438 <HAL_ADC_Init+0x1a8>)
 8004398:	4013      	ands	r3, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	430b      	orrs	r3, r1
 80043a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ac:	d003      	beq.n	80043b6 <HAL_ADC_Init+0x126>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d104      	bne.n	80043c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	051b      	lsls	r3, r3, #20
 80043be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	4b18      	ldr	r3, [pc, #96]	@ (800443c <HAL_ADC_Init+0x1ac>)
 80043dc:	4013      	ands	r3, r2
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d10b      	bne.n	80043fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	f023 0303 	bic.w	r3, r3, #3
 80043f2:	f043 0201 	orr.w	r2, r3, #1
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80043fa:	e018      	b.n	800442e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004400:	f023 0312 	bic.w	r3, r3, #18
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004410:	f043 0201 	orr.w	r2, r3, #1
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800441c:	e007      	b.n	800442e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800442e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	ffe1f7fd 	.word	0xffe1f7fd
 800443c:	ff1f0efe 	.word	0xff1f0efe

08004440 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a64      	ldr	r2, [pc, #400]	@ (80045e8 <HAL_ADC_Start_DMA+0x1a8>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d004      	beq.n	8004464 <HAL_ADC_Start_DMA+0x24>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a63      	ldr	r2, [pc, #396]	@ (80045ec <HAL_ADC_Start_DMA+0x1ac>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d106      	bne.n	8004472 <HAL_ADC_Start_DMA+0x32>
 8004464:	4b60      	ldr	r3, [pc, #384]	@ (80045e8 <HAL_ADC_Start_DMA+0x1a8>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 80b3 	bne.w	80045d8 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_ADC_Start_DMA+0x40>
 800447c:	2302      	movs	r3, #2
 800447e:	e0ae      	b.n	80045de <HAL_ADC_Start_DMA+0x19e>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f9cb 	bl	8004824 <ADC_Enable>
 800448e:	4603      	mov	r3, r0
 8004490:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004492:	7dfb      	ldrb	r3, [r7, #23]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f040 809a 	bne.w	80045ce <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800449e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a4e      	ldr	r2, [pc, #312]	@ (80045ec <HAL_ADC_Start_DMA+0x1ac>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d105      	bne.n	80044c4 <HAL_ADC_Start_DMA+0x84>
 80044b8:	4b4b      	ldr	r3, [pc, #300]	@ (80045e8 <HAL_ADC_Start_DMA+0x1a8>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d115      	bne.n	80044f0 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d026      	beq.n	800452c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80044e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80044ee:	e01d      	b.n	800452c <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a39      	ldr	r2, [pc, #228]	@ (80045e8 <HAL_ADC_Start_DMA+0x1a8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d004      	beq.n	8004510 <HAL_ADC_Start_DMA+0xd0>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a38      	ldr	r2, [pc, #224]	@ (80045ec <HAL_ADC_Start_DMA+0x1ac>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d10d      	bne.n	800452c <HAL_ADC_Start_DMA+0xec>
 8004510:	4b35      	ldr	r3, [pc, #212]	@ (80045e8 <HAL_ADC_Start_DMA+0x1a8>)
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004520:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8004524:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d006      	beq.n	8004546 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	f023 0206 	bic.w	r2, r3, #6
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004544:	e002      	b.n	800454c <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	4a25      	ldr	r2, [pc, #148]	@ (80045f0 <HAL_ADC_Start_DMA+0x1b0>)
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a24      	ldr	r2, [pc, #144]	@ (80045f4 <HAL_ADC_Start_DMA+0x1b4>)
 8004562:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	4a23      	ldr	r2, [pc, #140]	@ (80045f8 <HAL_ADC_Start_DMA+0x1b8>)
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0202 	mvn.w	r2, #2
 8004574:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	689a      	ldr	r2, [r3, #8]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004584:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	6a18      	ldr	r0, [r3, #32]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	334c      	adds	r3, #76	@ 0x4c
 8004590:	4619      	mov	r1, r3
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f001 f91b 	bl	80057d0 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80045a4:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80045a8:	d108      	bne.n	80045bc <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	689a      	ldr	r2, [r3, #8]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80045b8:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80045ba:	e00f      	b.n	80045dc <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80045ca:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 80045cc:	e006      	b.n	80045dc <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 80045d6:	e001      	b.n	80045dc <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40012400 	.word	0x40012400
 80045ec:	40012800 	.word	0x40012800
 80045f0:	0800495b 	.word	0x0800495b
 80045f4:	080049d7 	.word	0x080049d7
 80045f8:	080049f3 	.word	0x080049f3

080045fc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004604:	bf00      	nop
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	bc80      	pop	{r7}
 800460c:	4770      	bx	lr

0800460e <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004616:	bf00      	nop
 8004618:	370c      	adds	r7, #12
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
	...

08004634 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800464c:	2b01      	cmp	r3, #1
 800464e:	d101      	bne.n	8004654 <HAL_ADC_ConfigChannel+0x20>
 8004650:	2302      	movs	r3, #2
 8004652:	e0dc      	b.n	800480e <HAL_ADC_ConfigChannel+0x1da>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b06      	cmp	r3, #6
 8004662:	d81c      	bhi.n	800469e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	4613      	mov	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4413      	add	r3, r2
 8004674:	3b05      	subs	r3, #5
 8004676:	221f      	movs	r2, #31
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	4019      	ands	r1, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	3b05      	subs	r3, #5
 8004690:	fa00 f203 	lsl.w	r2, r0, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	635a      	str	r2, [r3, #52]	@ 0x34
 800469c:	e03c      	b.n	8004718 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b0c      	cmp	r3, #12
 80046a4:	d81c      	bhi.n	80046e0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	3b23      	subs	r3, #35	@ 0x23
 80046b8:	221f      	movs	r2, #31
 80046ba:	fa02 f303 	lsl.w	r3, r2, r3
 80046be:	43db      	mvns	r3, r3
 80046c0:	4019      	ands	r1, r3
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	6818      	ldr	r0, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	3b23      	subs	r3, #35	@ 0x23
 80046d2:	fa00 f203 	lsl.w	r2, r0, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80046de:	e01b      	b.n	8004718 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	3b41      	subs	r3, #65	@ 0x41
 80046f2:	221f      	movs	r2, #31
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	4019      	ands	r1, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	3b41      	subs	r3, #65	@ 0x41
 800470c:	fa00 f203 	lsl.w	r2, r0, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b09      	cmp	r3, #9
 800471e:	d91c      	bls.n	800475a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68d9      	ldr	r1, [r3, #12]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4613      	mov	r3, r2
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	4413      	add	r3, r2
 8004730:	3b1e      	subs	r3, #30
 8004732:	2207      	movs	r2, #7
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	4019      	ands	r1, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	6898      	ldr	r0, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	4413      	add	r3, r2
 800474a:	3b1e      	subs	r3, #30
 800474c:	fa00 f203 	lsl.w	r2, r0, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	60da      	str	r2, [r3, #12]
 8004758:	e019      	b.n	800478e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6919      	ldr	r1, [r3, #16]
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	4613      	mov	r3, r2
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	4413      	add	r3, r2
 800476a:	2207      	movs	r2, #7
 800476c:	fa02 f303 	lsl.w	r3, r2, r3
 8004770:	43db      	mvns	r3, r3
 8004772:	4019      	ands	r1, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	6898      	ldr	r0, [r3, #8]
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	fa00 f203 	lsl.w	r2, r0, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	430a      	orrs	r2, r1
 800478c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b10      	cmp	r3, #16
 8004794:	d003      	beq.n	800479e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800479a:	2b11      	cmp	r3, #17
 800479c:	d132      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004818 <HAL_ADC_ConfigChannel+0x1e4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d125      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d126      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80047c4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b10      	cmp	r3, #16
 80047cc:	d11a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047ce:	4b13      	ldr	r3, [pc, #76]	@ (800481c <HAL_ADC_ConfigChannel+0x1e8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a13      	ldr	r2, [pc, #76]	@ (8004820 <HAL_ADC_ConfigChannel+0x1ec>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	0c9a      	lsrs	r2, r3, #18
 80047da:	4613      	mov	r3, r2
 80047dc:	009b      	lsls	r3, r3, #2
 80047de:	4413      	add	r3, r2
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047e4:	e002      	b.n	80047ec <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	3b01      	subs	r3, #1
 80047ea:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f9      	bne.n	80047e6 <HAL_ADC_ConfigChannel+0x1b2>
 80047f2:	e007      	b.n	8004804 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	f043 0220 	orr.w	r2, r3, #32
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800480c:	7bfb      	ldrb	r3, [r7, #15]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012400 	.word	0x40012400
 800481c:	20000020 	.word	0x20000020
 8004820:	431bde83 	.word	0x431bde83

08004824 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b01      	cmp	r3, #1
 8004840:	d040      	beq.n	80048c4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0201 	orr.w	r2, r2, #1
 8004850:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004852:	4b1f      	ldr	r3, [pc, #124]	@ (80048d0 <ADC_Enable+0xac>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a1f      	ldr	r2, [pc, #124]	@ (80048d4 <ADC_Enable+0xb0>)
 8004858:	fba2 2303 	umull	r2, r3, r2, r3
 800485c:	0c9b      	lsrs	r3, r3, #18
 800485e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004860:	e002      	b.n	8004868 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	3b01      	subs	r3, #1
 8004866:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d1f9      	bne.n	8004862 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800486e:	f7ff fce1 	bl	8004234 <HAL_GetTick>
 8004872:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004874:	e01f      	b.n	80048b6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004876:	f7ff fcdd 	bl	8004234 <HAL_GetTick>
 800487a:	4602      	mov	r2, r0
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1ad3      	subs	r3, r2, r3
 8004880:	2b02      	cmp	r3, #2
 8004882:	d918      	bls.n	80048b6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	2b01      	cmp	r3, #1
 8004890:	d011      	beq.n	80048b6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004896:	f043 0210 	orr.w	r2, r3, #16
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e007      	b.n	80048c6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d1d8      	bne.n	8004876 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3710      	adds	r7, #16
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	20000020 	.word	0x20000020
 80048d4:	431bde83 	.word	0x431bde83

080048d8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80048e0:	2300      	movs	r3, #0
 80048e2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 0301 	and.w	r3, r3, #1
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d12e      	bne.n	8004950 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689a      	ldr	r2, [r3, #8]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f022 0201 	bic.w	r2, r2, #1
 8004900:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004902:	f7ff fc97 	bl	8004234 <HAL_GetTick>
 8004906:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004908:	e01b      	b.n	8004942 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800490a:	f7ff fc93 	bl	8004234 <HAL_GetTick>
 800490e:	4602      	mov	r2, r0
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1ad3      	subs	r3, r2, r3
 8004914:	2b02      	cmp	r3, #2
 8004916:	d914      	bls.n	8004942 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b01      	cmp	r3, #1
 8004924:	d10d      	bne.n	8004942 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	f043 0210 	orr.w	r2, r3, #16
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004936:	f043 0201 	orr.w	r2, r3, #1
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e007      	b.n	8004952 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b01      	cmp	r3, #1
 800494e:	d0dc      	beq.n	800490a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004966:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800496c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004970:	2b00      	cmp	r3, #0
 8004972:	d127      	bne.n	80049c4 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004978:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800498a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800498e:	d115      	bne.n	80049bc <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004994:	2b00      	cmp	r3, #0
 8004996:	d111      	bne.n	80049bc <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800499c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f043 0201 	orr.w	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fe1d 	bl	80045fc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80049c2:	e004      	b.n	80049ce <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	4798      	blx	r3
}
 80049ce:	bf00      	nop
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}

080049d6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b084      	sub	sp, #16
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e2:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fe12 	bl	800460e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049ea:	bf00      	nop
 80049ec:	3710      	adds	r7, #16
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fe:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a04:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff fe01 	bl	8004620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0ed      	b.n	8004c14 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff f903 	bl	8003c50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0201 	orr.w	r2, r2, #1
 8004a58:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a5a:	f7ff fbeb 	bl	8004234 <HAL_GetTick>
 8004a5e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a60:	e012      	b.n	8004a88 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004a62:	f7ff fbe7 	bl	8004234 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b0a      	cmp	r3, #10
 8004a6e:	d90b      	bls.n	8004a88 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2205      	movs	r2, #5
 8004a80:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0c5      	b.n	8004c14 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d0e5      	beq.n	8004a62 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f022 0202 	bic.w	r2, r2, #2
 8004aa4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004aa6:	f7ff fbc5 	bl	8004234 <HAL_GetTick>
 8004aaa:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004aac:	e012      	b.n	8004ad4 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004aae:	f7ff fbc1 	bl	8004234 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	2b0a      	cmp	r3, #10
 8004aba:	d90b      	bls.n	8004ad4 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2205      	movs	r2, #5
 8004acc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e09f      	b.n	8004c14 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f003 0302 	and.w	r3, r3, #2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	7e1b      	ldrb	r3, [r3, #24]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d108      	bne.n	8004afc <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e007      	b.n	8004b0c <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b0a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	7e5b      	ldrb	r3, [r3, #25]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d108      	bne.n	8004b26 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b22:	601a      	str	r2, [r3, #0]
 8004b24:	e007      	b.n	8004b36 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	7e9b      	ldrb	r3, [r3, #26]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d108      	bne.n	8004b50 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0220 	orr.w	r2, r2, #32
 8004b4c:	601a      	str	r2, [r3, #0]
 8004b4e:	e007      	b.n	8004b60 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0220 	bic.w	r2, r2, #32
 8004b5e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	7edb      	ldrb	r3, [r3, #27]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d108      	bne.n	8004b7a <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 0210 	bic.w	r2, r2, #16
 8004b76:	601a      	str	r2, [r3, #0]
 8004b78:	e007      	b.n	8004b8a <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0210 	orr.w	r2, r2, #16
 8004b88:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	7f1b      	ldrb	r3, [r3, #28]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d108      	bne.n	8004ba4 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0208 	orr.w	r2, r2, #8
 8004ba0:	601a      	str	r2, [r3, #0]
 8004ba2:	e007      	b.n	8004bb4 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f022 0208 	bic.w	r2, r2, #8
 8004bb2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	7f5b      	ldrb	r3, [r3, #29]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d108      	bne.n	8004bce <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0204 	orr.w	r2, r2, #4
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e007      	b.n	8004bde <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 0204 	bic.w	r2, r2, #4
 8004bdc:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689a      	ldr	r2, [r3, #8]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	ea42 0103 	orr.w	r1, r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	1e5a      	subs	r2, r3, #1
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	430a      	orrs	r2, r1
 8004c02:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004c32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004c34:	7cfb      	ldrb	r3, [r7, #19]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d003      	beq.n	8004c42 <HAL_CAN_ConfigFilter+0x26>
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	f040 80aa 	bne.w	8004d96 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004c48:	f043 0201 	orr.w	r2, r3, #1
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	f003 031f 	and.w	r3, r3, #31
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c60:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	43db      	mvns	r3, r3
 8004c6c:	401a      	ands	r2, r3
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d123      	bne.n	8004cc4 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	43db      	mvns	r3, r3
 8004c86:	401a      	ands	r2, r3
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004c9a:	683a      	ldr	r2, [r7, #0]
 8004c9c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004c9e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3248      	adds	r2, #72	@ 0x48
 8004ca4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cb8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	3348      	adds	r3, #72	@ 0x48
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	440b      	add	r3, r1
 8004cc2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d122      	bne.n	8004d12 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ce8:	683a      	ldr	r2, [r7, #0]
 8004cea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004cec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	3248      	adds	r2, #72	@ 0x48
 8004cf2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d06:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d08:	6979      	ldr	r1, [r7, #20]
 8004d0a:	3348      	adds	r3, #72	@ 0x48
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	440b      	add	r3, r1
 8004d10:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d109      	bne.n	8004d2e <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	43db      	mvns	r3, r3
 8004d24:	401a      	ands	r2, r3
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004d2c:	e007      	b.n	8004d3e <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	43db      	mvns	r3, r3
 8004d50:	401a      	ands	r2, r3
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004d58:	e007      	b.n	8004d6a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d88:	f023 0201 	bic.w	r2, r3, #1
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	e006      	b.n	8004da4 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
  }
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	371c      	adds	r7, #28
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bc80      	pop	{r7}
 8004dac:	4770      	bx	lr

08004dae <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b084      	sub	sp, #16
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d12e      	bne.n	8004e20 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0201 	bic.w	r2, r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dda:	f7ff fa2b 	bl	8004234 <HAL_GetTick>
 8004dde:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004de0:	e012      	b.n	8004e08 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004de2:	f7ff fa27 	bl	8004234 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b0a      	cmp	r3, #10
 8004dee:	d90b      	bls.n	8004e08 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2205      	movs	r2, #5
 8004e00:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e012      	b.n	8004e2e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1e5      	bne.n	8004de2 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	e006      	b.n	8004e2e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e24:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
  }
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004e36:	b480      	push	{r7}
 8004e38:	b087      	sub	sp, #28
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e4a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004e4c:	7dfb      	ldrb	r3, [r7, #23]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d003      	beq.n	8004e5a <HAL_CAN_GetRxMessage+0x24>
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	f040 80f3 	bne.w	8005040 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10e      	bne.n	8004e7e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d116      	bne.n	8004e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e0e7      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	691b      	ldr	r3, [r3, #16]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0d8      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	331b      	adds	r3, #27
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	4413      	add	r3, r2
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0204 	and.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10c      	bne.n	8004ed4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	331b      	adds	r3, #27
 8004ec2:	011b      	lsls	r3, r3, #4
 8004ec4:	4413      	add	r3, r2
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	0d5b      	lsrs	r3, r3, #21
 8004eca:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e00b      	b.n	8004eec <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	331b      	adds	r3, #27
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4413      	add	r3, r2
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	08db      	lsrs	r3, r3, #3
 8004ee4:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	331b      	adds	r3, #27
 8004ef4:	011b      	lsls	r3, r3, #4
 8004ef6:	4413      	add	r3, r2
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0202 	and.w	r2, r3, #2
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	331b      	adds	r3, #27
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	4413      	add	r3, r2
 8004f0e:	3304      	adds	r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 020f 	and.w	r2, r3, #15
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	331b      	adds	r3, #27
 8004f22:	011b      	lsls	r3, r3, #4
 8004f24:	4413      	add	r3, r2
 8004f26:	3304      	adds	r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	331b      	adds	r3, #27
 8004f3a:	011b      	lsls	r3, r3, #4
 8004f3c:	4413      	add	r3, r2
 8004f3e:	3304      	adds	r3, #4
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	0c1b      	lsrs	r3, r3, #16
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681a      	ldr	r2, [r3, #0]
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	b2da      	uxtb	r2, r3
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	011b      	lsls	r3, r3, #4
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	0a1a      	lsrs	r2, r3, #8
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	3301      	adds	r3, #1
 8004f76:	b2d2      	uxtb	r2, r2
 8004f78:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	0c1a      	lsrs	r2, r3, #16
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	3302      	adds	r3, #2
 8004f90:	b2d2      	uxtb	r2, r2
 8004f92:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	011b      	lsls	r3, r3, #4
 8004f9c:	4413      	add	r3, r2
 8004f9e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	0e1a      	lsrs	r2, r3, #24
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	3303      	adds	r3, #3
 8004faa:	b2d2      	uxtb	r2, r2
 8004fac:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	011b      	lsls	r3, r3, #4
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	0a1a      	lsrs	r2, r3, #8
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	3305      	adds	r3, #5
 8004fdc:	b2d2      	uxtb	r2, r2
 8004fde:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	0c1a      	lsrs	r2, r3, #16
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	3306      	adds	r3, #6
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	4413      	add	r3, r2
 8005004:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	0e1a      	lsrs	r2, r3, #24
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	3307      	adds	r3, #7
 8005010:	b2d2      	uxtb	r2, r2
 8005012:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d108      	bne.n	800502c <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0220 	orr.w	r2, r2, #32
 8005028:	60da      	str	r2, [r3, #12]
 800502a:	e007      	b.n	800503c <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0220 	orr.w	r2, r2, #32
 800503a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e006      	b.n	800504e <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
  }
}
 800504e:	4618      	mov	r0, r3
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	bc80      	pop	{r7}
 8005056:	4770      	bx	lr

08005058 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005068:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800506a:	7bfb      	ldrb	r3, [r7, #15]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d002      	beq.n	8005076 <HAL_CAN_ActivateNotification+0x1e>
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d109      	bne.n	800508a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6959      	ldr	r1, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005086:	2300      	movs	r3, #0
 8005088:	e006      	b.n	8005098 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
  }
}
 8005098:	4618      	mov	r0, r3
 800509a:	3714      	adds	r7, #20
 800509c:	46bd      	mov	sp, r7
 800509e:	bc80      	pop	{r7}
 80050a0:	4770      	bx	lr

080050a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b08a      	sub	sp, #40	@ 0x28
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	f003 0301 	and.w	r3, r3, #1
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d07c      	beq.n	80051e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d023      	beq.n	800513a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	2201      	movs	r2, #1
 80050f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d003      	beq.n	800510c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f000 f983 	bl	8005410 <HAL_CAN_TxMailbox0CompleteCallback>
 800510a:	e016      	b.n	800513a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800510c:	69bb      	ldr	r3, [r7, #24]
 800510e:	f003 0304 	and.w	r3, r3, #4
 8005112:	2b00      	cmp	r3, #0
 8005114:	d004      	beq.n	8005120 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005118:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800511c:	627b      	str	r3, [r7, #36]	@ 0x24
 800511e:	e00c      	b.n	800513a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005120:	69bb      	ldr	r3, [r7, #24]
 8005122:	f003 0308 	and.w	r3, r3, #8
 8005126:	2b00      	cmp	r3, #0
 8005128:	d004      	beq.n	8005134 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800512a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
 8005132:	e002      	b.n	800513a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f986 	bl	8005446 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005140:	2b00      	cmp	r3, #0
 8005142:	d024      	beq.n	800518e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800514c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 f962 	bl	8005422 <HAL_CAN_TxMailbox1CompleteCallback>
 800515e:	e016      	b.n	800518e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005166:	2b00      	cmp	r3, #0
 8005168:	d004      	beq.n	8005174 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
 8005172:	e00c      	b.n	800518e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800517a:	2b00      	cmp	r3, #0
 800517c:	d004      	beq.n	8005188 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005184:	627b      	str	r3, [r7, #36]	@ 0x24
 8005186:	e002      	b.n	800518e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f965 	bl	8005458 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d024      	beq.n	80051e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80051a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f000 f941 	bl	8005434 <HAL_CAN_TxMailbox2CompleteCallback>
 80051b2:	e016      	b.n	80051e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d004      	beq.n	80051c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80051c6:	e00c      	b.n	80051e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d004      	beq.n	80051dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051da:	e002      	b.n	80051e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f944 	bl	800546a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	f003 0308 	and.w	r3, r3, #8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00c      	beq.n	8005206 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2210      	movs	r2, #16
 8005204:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00b      	beq.n	8005228 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f003 0308 	and.w	r3, r3, #8
 8005216:	2b00      	cmp	r3, #0
 8005218:	d006      	beq.n	8005228 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2208      	movs	r2, #8
 8005220:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f933 	bl	800548e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d009      	beq.n	8005246 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f91b 	bl	800547c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2210      	movs	r2, #16
 8005268:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800526a:	6a3b      	ldr	r3, [r7, #32]
 800526c:	f003 0320 	and.w	r3, r3, #32
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00b      	beq.n	800528c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f003 0308 	and.w	r3, r3, #8
 800527a:	2b00      	cmp	r3, #0
 800527c:	d006      	beq.n	800528c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2208      	movs	r2, #8
 8005284:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f90a 	bl	80054a0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800528c:	6a3b      	ldr	r3, [r7, #32]
 800528e:	f003 0310 	and.w	r3, r3, #16
 8005292:	2b00      	cmp	r3, #0
 8005294:	d009      	beq.n	80052aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0303 	and.w	r3, r3, #3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d002      	beq.n	80052aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7fb ffa3 	bl	80011f0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00b      	beq.n	80052cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f003 0310 	and.w	r3, r3, #16
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d006      	beq.n	80052cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2210      	movs	r2, #16
 80052c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 f8f3 	bl	80054b2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d006      	beq.n	80052ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2208      	movs	r2, #8
 80052e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f8eb 	bl	80054c4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80052ee:	6a3b      	ldr	r3, [r7, #32]
 80052f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d07b      	beq.n	80053f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0304 	and.w	r3, r3, #4
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d072      	beq.n	80053e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d008      	beq.n	800531e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	f043 0301 	orr.w	r3, r3, #1
 800531c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005324:	2b00      	cmp	r3, #0
 8005326:	d008      	beq.n	800533a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	f043 0302 	orr.w	r3, r3, #2
 8005338:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800533a:	6a3b      	ldr	r3, [r7, #32]
 800533c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d008      	beq.n	8005356 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	f043 0304 	orr.w	r3, r3, #4
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800535c:	2b00      	cmp	r3, #0
 800535e:	d043      	beq.n	80053e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005366:	2b00      	cmp	r3, #0
 8005368:	d03e      	beq.n	80053e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005370:	2b60      	cmp	r3, #96	@ 0x60
 8005372:	d02b      	beq.n	80053cc <HAL_CAN_IRQHandler+0x32a>
 8005374:	2b60      	cmp	r3, #96	@ 0x60
 8005376:	d82e      	bhi.n	80053d6 <HAL_CAN_IRQHandler+0x334>
 8005378:	2b50      	cmp	r3, #80	@ 0x50
 800537a:	d022      	beq.n	80053c2 <HAL_CAN_IRQHandler+0x320>
 800537c:	2b50      	cmp	r3, #80	@ 0x50
 800537e:	d82a      	bhi.n	80053d6 <HAL_CAN_IRQHandler+0x334>
 8005380:	2b40      	cmp	r3, #64	@ 0x40
 8005382:	d019      	beq.n	80053b8 <HAL_CAN_IRQHandler+0x316>
 8005384:	2b40      	cmp	r3, #64	@ 0x40
 8005386:	d826      	bhi.n	80053d6 <HAL_CAN_IRQHandler+0x334>
 8005388:	2b30      	cmp	r3, #48	@ 0x30
 800538a:	d010      	beq.n	80053ae <HAL_CAN_IRQHandler+0x30c>
 800538c:	2b30      	cmp	r3, #48	@ 0x30
 800538e:	d822      	bhi.n	80053d6 <HAL_CAN_IRQHandler+0x334>
 8005390:	2b10      	cmp	r3, #16
 8005392:	d002      	beq.n	800539a <HAL_CAN_IRQHandler+0x2f8>
 8005394:	2b20      	cmp	r3, #32
 8005396:	d005      	beq.n	80053a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005398:	e01d      	b.n	80053d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	f043 0308 	orr.w	r3, r3, #8
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053a2:	e019      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80053a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a6:	f043 0310 	orr.w	r3, r3, #16
 80053aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053ac:	e014      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	f043 0320 	orr.w	r3, r3, #32
 80053b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053b6:	e00f      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80053b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053c0:	e00a      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053ca:	e005      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80053d4:	e000      	b.n	80053d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80053d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699a      	ldr	r2, [r3, #24]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80053e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2204      	movs	r2, #4
 80053ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d008      	beq.n	8005408 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fc:	431a      	orrs	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 f867 	bl	80054d6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005408:	bf00      	nop
 800540a:	3728      	adds	r7, #40	@ 0x28
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	bc80      	pop	{r7}
 8005420:	4770      	bx	lr

08005422 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005422:	b480      	push	{r7}
 8005424:	b083      	sub	sp, #12
 8005426:	af00      	add	r7, sp, #0
 8005428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr

08005434 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	bc80      	pop	{r7}
 8005444:	4770      	bx	lr

08005446 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005446:	b480      	push	{r7}
 8005448:	b083      	sub	sp, #12
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800544e:	bf00      	nop
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	bc80      	pop	{r7}
 8005468:	4770      	bx	lr

0800546a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800546a:	b480      	push	{r7}
 800546c:	b083      	sub	sp, #12
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005472:	bf00      	nop
 8005474:	370c      	adds	r7, #12
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr

0800547c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	bc80      	pop	{r7}
 800549e:	4770      	bx	lr

080054a0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b083      	sub	sp, #12
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80054a8:	bf00      	nop
 80054aa:	370c      	adds	r7, #12
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80054ba:	bf00      	nop
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	bc80      	pop	{r7}
 80054c2:	4770      	bx	lr

080054c4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bc80      	pop	{r7}
 80054d4:	4770      	bx	lr

080054d6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(CAN_HandleTypeDef *hcan)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
	...

08005500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005510:	4b0c      	ldr	r3, [pc, #48]	@ (8005544 <__NVIC_SetPriorityGrouping+0x44>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005516:	68ba      	ldr	r2, [r7, #8]
 8005518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800551c:	4013      	ands	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800552c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005532:	4a04      	ldr	r2, [pc, #16]	@ (8005544 <__NVIC_SetPriorityGrouping+0x44>)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	60d3      	str	r3, [r2, #12]
}
 8005538:	bf00      	nop
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr
 8005542:	bf00      	nop
 8005544:	e000ed00 	.word	0xe000ed00

08005548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800554c:	4b04      	ldr	r3, [pc, #16]	@ (8005560 <__NVIC_GetPriorityGrouping+0x18>)
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	0a1b      	lsrs	r3, r3, #8
 8005552:	f003 0307 	and.w	r3, r3, #7
}
 8005556:	4618      	mov	r0, r3
 8005558:	46bd      	mov	sp, r7
 800555a:	bc80      	pop	{r7}
 800555c:	4770      	bx	lr
 800555e:	bf00      	nop
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800556e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005572:	2b00      	cmp	r3, #0
 8005574:	db0b      	blt.n	800558e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005576:	79fb      	ldrb	r3, [r7, #7]
 8005578:	f003 021f 	and.w	r2, r3, #31
 800557c:	4906      	ldr	r1, [pc, #24]	@ (8005598 <__NVIC_EnableIRQ+0x34>)
 800557e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	2001      	movs	r0, #1
 8005586:	fa00 f202 	lsl.w	r2, r0, r2
 800558a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	bc80      	pop	{r7}
 8005596:	4770      	bx	lr
 8005598:	e000e100 	.word	0xe000e100

0800559c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	4603      	mov	r3, r0
 80055a4:	6039      	str	r1, [r7, #0]
 80055a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	db0a      	blt.n	80055c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	b2da      	uxtb	r2, r3
 80055b4:	490c      	ldr	r1, [pc, #48]	@ (80055e8 <__NVIC_SetPriority+0x4c>)
 80055b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ba:	0112      	lsls	r2, r2, #4
 80055bc:	b2d2      	uxtb	r2, r2
 80055be:	440b      	add	r3, r1
 80055c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055c4:	e00a      	b.n	80055dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4908      	ldr	r1, [pc, #32]	@ (80055ec <__NVIC_SetPriority+0x50>)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	3b04      	subs	r3, #4
 80055d4:	0112      	lsls	r2, r2, #4
 80055d6:	b2d2      	uxtb	r2, r2
 80055d8:	440b      	add	r3, r1
 80055da:	761a      	strb	r2, [r3, #24]
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bc80      	pop	{r7}
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	e000e100 	.word	0xe000e100
 80055ec:	e000ed00 	.word	0xe000ed00

080055f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	@ 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	f1c3 0307 	rsb	r3, r3, #7
 800560a:	2b04      	cmp	r3, #4
 800560c:	bf28      	it	cs
 800560e:	2304      	movcs	r3, #4
 8005610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	3304      	adds	r3, #4
 8005616:	2b06      	cmp	r3, #6
 8005618:	d902      	bls.n	8005620 <NVIC_EncodePriority+0x30>
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	3b03      	subs	r3, #3
 800561e:	e000      	b.n	8005622 <NVIC_EncodePriority+0x32>
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005624:	f04f 32ff 	mov.w	r2, #4294967295
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	fa02 f303 	lsl.w	r3, r2, r3
 800562e:	43da      	mvns	r2, r3
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	401a      	ands	r2, r3
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005638:	f04f 31ff 	mov.w	r1, #4294967295
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	fa01 f303 	lsl.w	r3, r1, r3
 8005642:	43d9      	mvns	r1, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	4313      	orrs	r3, r2
         );
}
 800564a:	4618      	mov	r0, r3
 800564c:	3724      	adds	r7, #36	@ 0x24
 800564e:	46bd      	mov	sp, r7
 8005650:	bc80      	pop	{r7}
 8005652:	4770      	bx	lr

08005654 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	3b01      	subs	r3, #1
 8005660:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005664:	d301      	bcc.n	800566a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005666:	2301      	movs	r3, #1
 8005668:	e00f      	b.n	800568a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800566a:	4a0a      	ldr	r2, [pc, #40]	@ (8005694 <SysTick_Config+0x40>)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	3b01      	subs	r3, #1
 8005670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005672:	210f      	movs	r1, #15
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	f7ff ff90 	bl	800559c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800567c:	4b05      	ldr	r3, [pc, #20]	@ (8005694 <SysTick_Config+0x40>)
 800567e:	2200      	movs	r2, #0
 8005680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005682:	4b04      	ldr	r3, [pc, #16]	@ (8005694 <SysTick_Config+0x40>)
 8005684:	2207      	movs	r2, #7
 8005686:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	e000e010 	.word	0xe000e010

08005698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7ff ff2d 	bl	8005500 <__NVIC_SetPriorityGrouping>
}
 80056a6:	bf00      	nop
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b086      	sub	sp, #24
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	4603      	mov	r3, r0
 80056b6:	60b9      	str	r1, [r7, #8]
 80056b8:	607a      	str	r2, [r7, #4]
 80056ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80056bc:	2300      	movs	r3, #0
 80056be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056c0:	f7ff ff42 	bl	8005548 <__NVIC_GetPriorityGrouping>
 80056c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	68b9      	ldr	r1, [r7, #8]
 80056ca:	6978      	ldr	r0, [r7, #20]
 80056cc:	f7ff ff90 	bl	80055f0 <NVIC_EncodePriority>
 80056d0:	4602      	mov	r2, r0
 80056d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056d6:	4611      	mov	r1, r2
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff ff5f 	bl	800559c <__NVIC_SetPriority>
}
 80056de:	bf00      	nop
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	4603      	mov	r3, r0
 80056ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff ff35 	bl	8005564 <__NVIC_EnableIRQ>
}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}

08005702 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005702:	b580      	push	{r7, lr}
 8005704:	b082      	sub	sp, #8
 8005706:	af00      	add	r7, sp, #0
 8005708:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff ffa2 	bl	8005654 <SysTick_Config>
 8005710:	4603      	mov	r3, r0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d101      	bne.n	8005732 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	e043      	b.n	80057ba <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	461a      	mov	r2, r3
 8005738:	4b22      	ldr	r3, [pc, #136]	@ (80057c4 <HAL_DMA_Init+0xa8>)
 800573a:	4413      	add	r3, r2
 800573c:	4a22      	ldr	r2, [pc, #136]	@ (80057c8 <HAL_DMA_Init+0xac>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	091b      	lsrs	r3, r3, #4
 8005744:	009a      	lsls	r2, r3, #2
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <HAL_DMA_Init+0xb0>)
 800574e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005766:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800576a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005774:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005780:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800578c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3714      	adds	r7, #20
 80057be:	46bd      	mov	sp, r7
 80057c0:	bc80      	pop	{r7}
 80057c2:	4770      	bx	lr
 80057c4:	bffdfff8 	.word	0xbffdfff8
 80057c8:	cccccccd 	.word	0xcccccccd
 80057cc:	40020000 	.word	0x40020000

080057d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057de:	2300      	movs	r3, #0
 80057e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_DMA_Start_IT+0x20>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e04a      	b.n	8005886 <HAL_DMA_Start_IT+0xb6>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d13a      	bne.n	8005878 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2200      	movs	r2, #0
 800580e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	687a      	ldr	r2, [r7, #4]
 8005824:	68b9      	ldr	r1, [r7, #8]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 f938 	bl	8005a9c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 020e 	orr.w	r2, r2, #14
 8005842:	601a      	str	r2, [r3, #0]
 8005844:	e00f      	b.n	8005866 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f022 0204 	bic.w	r2, r2, #4
 8005854:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681a      	ldr	r2, [r3, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f042 020a 	orr.w	r2, r2, #10
 8005864:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f042 0201 	orr.w	r2, r2, #1
 8005874:	601a      	str	r2, [r3, #0]
 8005876:	e005      	b.n	8005884 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8005880:	2302      	movs	r3, #2
 8005882:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8005884:	7dfb      	ldrb	r3, [r7, #23]
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
	...

08005890 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ac:	2204      	movs	r2, #4
 80058ae:	409a      	lsls	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4013      	ands	r3, r2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d04f      	beq.n	8005958 <HAL_DMA_IRQHandler+0xc8>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d04a      	beq.n	8005958 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0320 	and.w	r3, r3, #32
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d107      	bne.n	80058e0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0204 	bic.w	r2, r2, #4
 80058de:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a66      	ldr	r2, [pc, #408]	@ (8005a80 <HAL_DMA_IRQHandler+0x1f0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d029      	beq.n	800593e <HAL_DMA_IRQHandler+0xae>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a65      	ldr	r2, [pc, #404]	@ (8005a84 <HAL_DMA_IRQHandler+0x1f4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d022      	beq.n	800593a <HAL_DMA_IRQHandler+0xaa>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a63      	ldr	r2, [pc, #396]	@ (8005a88 <HAL_DMA_IRQHandler+0x1f8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d01a      	beq.n	8005934 <HAL_DMA_IRQHandler+0xa4>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a62      	ldr	r2, [pc, #392]	@ (8005a8c <HAL_DMA_IRQHandler+0x1fc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d012      	beq.n	800592e <HAL_DMA_IRQHandler+0x9e>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a60      	ldr	r2, [pc, #384]	@ (8005a90 <HAL_DMA_IRQHandler+0x200>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d00a      	beq.n	8005928 <HAL_DMA_IRQHandler+0x98>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a5f      	ldr	r2, [pc, #380]	@ (8005a94 <HAL_DMA_IRQHandler+0x204>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d102      	bne.n	8005922 <HAL_DMA_IRQHandler+0x92>
 800591c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005920:	e00e      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 8005922:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8005926:	e00b      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 8005928:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800592c:	e008      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 800592e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005932:	e005      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 8005934:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005938:	e002      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 800593a:	2340      	movs	r3, #64	@ 0x40
 800593c:	e000      	b.n	8005940 <HAL_DMA_IRQHandler+0xb0>
 800593e:	2304      	movs	r3, #4
 8005940:	4a55      	ldr	r2, [pc, #340]	@ (8005a98 <HAL_DMA_IRQHandler+0x208>)
 8005942:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 8094 	beq.w	8005a76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8005956:	e08e      	b.n	8005a76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595c:	2202      	movs	r2, #2
 800595e:	409a      	lsls	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4013      	ands	r3, r2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d056      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x186>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d051      	beq.n	8005a16 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0320 	and.w	r3, r3, #32
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 020a 	bic.w	r2, r2, #10
 800598e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a38      	ldr	r2, [pc, #224]	@ (8005a80 <HAL_DMA_IRQHandler+0x1f0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d029      	beq.n	80059f6 <HAL_DMA_IRQHandler+0x166>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a37      	ldr	r2, [pc, #220]	@ (8005a84 <HAL_DMA_IRQHandler+0x1f4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x162>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a35      	ldr	r2, [pc, #212]	@ (8005a88 <HAL_DMA_IRQHandler+0x1f8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01a      	beq.n	80059ec <HAL_DMA_IRQHandler+0x15c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a34      	ldr	r2, [pc, #208]	@ (8005a8c <HAL_DMA_IRQHandler+0x1fc>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d012      	beq.n	80059e6 <HAL_DMA_IRQHandler+0x156>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a32      	ldr	r2, [pc, #200]	@ (8005a90 <HAL_DMA_IRQHandler+0x200>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00a      	beq.n	80059e0 <HAL_DMA_IRQHandler+0x150>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a31      	ldr	r2, [pc, #196]	@ (8005a94 <HAL_DMA_IRQHandler+0x204>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d102      	bne.n	80059da <HAL_DMA_IRQHandler+0x14a>
 80059d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80059d8:	e00e      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80059de:	e00b      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80059e4:	e008      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059ea:	e005      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059ec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80059f0:	e002      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059f2:	2320      	movs	r3, #32
 80059f4:	e000      	b.n	80059f8 <HAL_DMA_IRQHandler+0x168>
 80059f6:	2302      	movs	r3, #2
 80059f8:	4a27      	ldr	r2, [pc, #156]	@ (8005a98 <HAL_DMA_IRQHandler+0x208>)
 80059fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d034      	beq.n	8005a76 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005a14:	e02f      	b.n	8005a76 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	2208      	movs	r2, #8
 8005a1c:	409a      	lsls	r2, r3
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	4013      	ands	r3, r2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d028      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x1e8>
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	f003 0308 	and.w	r3, r3, #8
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d023      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 020e 	bic.w	r2, r2, #14
 8005a3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a48:	2101      	movs	r1, #1
 8005a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d004      	beq.n	8005a78 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
    }
  }
  return;
 8005a76:	bf00      	nop
 8005a78:	bf00      	nop
}
 8005a7a:	3710      	adds	r7, #16
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40020008 	.word	0x40020008
 8005a84:	4002001c 	.word	0x4002001c
 8005a88:	40020030 	.word	0x40020030
 8005a8c:	40020044 	.word	0x40020044
 8005a90:	40020058 	.word	0x40020058
 8005a94:	4002006c 	.word	0x4002006c
 8005a98:	40020000 	.word	0x40020000

08005a9c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	2b10      	cmp	r3, #16
 8005ac8:	d108      	bne.n	8005adc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	687a      	ldr	r2, [r7, #4]
 8005ad0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ada:	e007      	b.n	8005aec <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bc80      	pop	{r7}
 8005af4:	4770      	bx	lr
	...

08005af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b08b      	sub	sp, #44	@ 0x2c
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005b02:	2300      	movs	r3, #0
 8005b04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005b06:	2300      	movs	r3, #0
 8005b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005b0a:	e169      	b.n	8005de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	69fa      	ldr	r2, [r7, #28]
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	f040 8158 	bne.w	8005dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	4a9a      	ldr	r2, [pc, #616]	@ (8005d98 <HAL_GPIO_Init+0x2a0>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d05e      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
 8005b34:	4a98      	ldr	r2, [pc, #608]	@ (8005d98 <HAL_GPIO_Init+0x2a0>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d875      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b3a:	4a98      	ldr	r2, [pc, #608]	@ (8005d9c <HAL_GPIO_Init+0x2a4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d058      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
 8005b40:	4a96      	ldr	r2, [pc, #600]	@ (8005d9c <HAL_GPIO_Init+0x2a4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d86f      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b46:	4a96      	ldr	r2, [pc, #600]	@ (8005da0 <HAL_GPIO_Init+0x2a8>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d052      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
 8005b4c:	4a94      	ldr	r2, [pc, #592]	@ (8005da0 <HAL_GPIO_Init+0x2a8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d869      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b52:	4a94      	ldr	r2, [pc, #592]	@ (8005da4 <HAL_GPIO_Init+0x2ac>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d04c      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
 8005b58:	4a92      	ldr	r2, [pc, #584]	@ (8005da4 <HAL_GPIO_Init+0x2ac>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d863      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b5e:	4a92      	ldr	r2, [pc, #584]	@ (8005da8 <HAL_GPIO_Init+0x2b0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d046      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
 8005b64:	4a90      	ldr	r2, [pc, #576]	@ (8005da8 <HAL_GPIO_Init+0x2b0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d85d      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b6a:	2b12      	cmp	r3, #18
 8005b6c:	d82a      	bhi.n	8005bc4 <HAL_GPIO_Init+0xcc>
 8005b6e:	2b12      	cmp	r3, #18
 8005b70:	d859      	bhi.n	8005c26 <HAL_GPIO_Init+0x12e>
 8005b72:	a201      	add	r2, pc, #4	@ (adr r2, 8005b78 <HAL_GPIO_Init+0x80>)
 8005b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b78:	08005bf3 	.word	0x08005bf3
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	08005bdf 	.word	0x08005bdf
 8005b84:	08005c21 	.word	0x08005c21
 8005b88:	08005c27 	.word	0x08005c27
 8005b8c:	08005c27 	.word	0x08005c27
 8005b90:	08005c27 	.word	0x08005c27
 8005b94:	08005c27 	.word	0x08005c27
 8005b98:	08005c27 	.word	0x08005c27
 8005b9c:	08005c27 	.word	0x08005c27
 8005ba0:	08005c27 	.word	0x08005c27
 8005ba4:	08005c27 	.word	0x08005c27
 8005ba8:	08005c27 	.word	0x08005c27
 8005bac:	08005c27 	.word	0x08005c27
 8005bb0:	08005c27 	.word	0x08005c27
 8005bb4:	08005c27 	.word	0x08005c27
 8005bb8:	08005c27 	.word	0x08005c27
 8005bbc:	08005bd5 	.word	0x08005bd5
 8005bc0:	08005be9 	.word	0x08005be9
 8005bc4:	4a79      	ldr	r2, [pc, #484]	@ (8005dac <HAL_GPIO_Init+0x2b4>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d013      	beq.n	8005bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005bca:	e02c      	b.n	8005c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	623b      	str	r3, [r7, #32]
          break;
 8005bd2:	e029      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	623b      	str	r3, [r7, #32]
          break;
 8005bdc:	e024      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	3308      	adds	r3, #8
 8005be4:	623b      	str	r3, [r7, #32]
          break;
 8005be6:	e01f      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	330c      	adds	r3, #12
 8005bee:	623b      	str	r3, [r7, #32]
          break;
 8005bf0:	e01a      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d102      	bne.n	8005c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	623b      	str	r3, [r7, #32]
          break;
 8005bfe:	e013      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d105      	bne.n	8005c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c08:	2308      	movs	r3, #8
 8005c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	611a      	str	r2, [r3, #16]
          break;
 8005c12:	e009      	b.n	8005c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005c14:	2308      	movs	r3, #8
 8005c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	69fa      	ldr	r2, [r7, #28]
 8005c1c:	615a      	str	r2, [r3, #20]
          break;
 8005c1e:	e003      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c20:	2300      	movs	r3, #0
 8005c22:	623b      	str	r3, [r7, #32]
          break;
 8005c24:	e000      	b.n	8005c28 <HAL_GPIO_Init+0x130>
          break;
 8005c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	2bff      	cmp	r3, #255	@ 0xff
 8005c2c:	d801      	bhi.n	8005c32 <HAL_GPIO_Init+0x13a>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	e001      	b.n	8005c36 <HAL_GPIO_Init+0x13e>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3304      	adds	r3, #4
 8005c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	2bff      	cmp	r3, #255	@ 0xff
 8005c3c:	d802      	bhi.n	8005c44 <HAL_GPIO_Init+0x14c>
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	e002      	b.n	8005c4a <HAL_GPIO_Init+0x152>
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	3b08      	subs	r3, #8
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	210f      	movs	r1, #15
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	fa01 f303 	lsl.w	r3, r1, r3
 8005c58:	43db      	mvns	r3, r3
 8005c5a:	401a      	ands	r2, r3
 8005c5c:	6a39      	ldr	r1, [r7, #32]
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	fa01 f303 	lsl.w	r3, r1, r3
 8005c64:	431a      	orrs	r2, r3
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f000 80b1 	beq.w	8005dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c78:	4b4d      	ldr	r3, [pc, #308]	@ (8005db0 <HAL_GPIO_Init+0x2b8>)
 8005c7a:	699b      	ldr	r3, [r3, #24]
 8005c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8005db0 <HAL_GPIO_Init+0x2b8>)
 8005c7e:	f043 0301 	orr.w	r3, r3, #1
 8005c82:	6193      	str	r3, [r2, #24]
 8005c84:	4b4a      	ldr	r3, [pc, #296]	@ (8005db0 <HAL_GPIO_Init+0x2b8>)
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	f003 0301 	and.w	r3, r3, #1
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c90:	4a48      	ldr	r2, [pc, #288]	@ (8005db4 <HAL_GPIO_Init+0x2bc>)
 8005c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c94:	089b      	lsrs	r3, r3, #2
 8005c96:	3302      	adds	r3, #2
 8005c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	220f      	movs	r2, #15
 8005ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cac:	43db      	mvns	r3, r3
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a40      	ldr	r2, [pc, #256]	@ (8005db8 <HAL_GPIO_Init+0x2c0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d013      	beq.n	8005ce4 <HAL_GPIO_Init+0x1ec>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8005dbc <HAL_GPIO_Init+0x2c4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00d      	beq.n	8005ce0 <HAL_GPIO_Init+0x1e8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8005dc0 <HAL_GPIO_Init+0x2c8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <HAL_GPIO_Init+0x1e4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a3d      	ldr	r2, [pc, #244]	@ (8005dc4 <HAL_GPIO_Init+0x2cc>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d101      	bne.n	8005cd8 <HAL_GPIO_Init+0x1e0>
 8005cd4:	2303      	movs	r3, #3
 8005cd6:	e006      	b.n	8005ce6 <HAL_GPIO_Init+0x1ee>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	e004      	b.n	8005ce6 <HAL_GPIO_Init+0x1ee>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e002      	b.n	8005ce6 <HAL_GPIO_Init+0x1ee>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <HAL_GPIO_Init+0x1ee>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce8:	f002 0203 	and.w	r2, r2, #3
 8005cec:	0092      	lsls	r2, r2, #2
 8005cee:	4093      	lsls	r3, r2
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005cf6:	492f      	ldr	r1, [pc, #188]	@ (8005db4 <HAL_GPIO_Init+0x2bc>)
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	089b      	lsrs	r3, r3, #2
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d006      	beq.n	8005d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d10:	4b2d      	ldr	r3, [pc, #180]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	492c      	ldr	r1, [pc, #176]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d16:	69bb      	ldr	r3, [r7, #24]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	600b      	str	r3, [r1, #0]
 8005d1c:	e006      	b.n	8005d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	43db      	mvns	r3, r3
 8005d26:	4928      	ldr	r1, [pc, #160]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d28:	4013      	ands	r3, r2
 8005d2a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d38:	4b23      	ldr	r3, [pc, #140]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d3a:	685a      	ldr	r2, [r3, #4]
 8005d3c:	4922      	ldr	r1, [pc, #136]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	604b      	str	r3, [r1, #4]
 8005d44:	e006      	b.n	8005d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d46:	4b20      	ldr	r3, [pc, #128]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d48:	685a      	ldr	r2, [r3, #4]
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	43db      	mvns	r3, r3
 8005d4e:	491e      	ldr	r1, [pc, #120]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d50:	4013      	ands	r3, r2
 8005d52:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d006      	beq.n	8005d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005d60:	4b19      	ldr	r3, [pc, #100]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d62:	689a      	ldr	r2, [r3, #8]
 8005d64:	4918      	ldr	r1, [pc, #96]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	608b      	str	r3, [r1, #8]
 8005d6c:	e006      	b.n	8005d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005d6e:	4b16      	ldr	r3, [pc, #88]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d70:	689a      	ldr	r2, [r3, #8]
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	43db      	mvns	r3, r3
 8005d76:	4914      	ldr	r1, [pc, #80]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d021      	beq.n	8005dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d88:	4b0f      	ldr	r3, [pc, #60]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	490e      	ldr	r1, [pc, #56]	@ (8005dc8 <HAL_GPIO_Init+0x2d0>)
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	60cb      	str	r3, [r1, #12]
 8005d94:	e021      	b.n	8005dda <HAL_GPIO_Init+0x2e2>
 8005d96:	bf00      	nop
 8005d98:	10320000 	.word	0x10320000
 8005d9c:	10310000 	.word	0x10310000
 8005da0:	10220000 	.word	0x10220000
 8005da4:	10210000 	.word	0x10210000
 8005da8:	10120000 	.word	0x10120000
 8005dac:	10110000 	.word	0x10110000
 8005db0:	40021000 	.word	0x40021000
 8005db4:	40010000 	.word	0x40010000
 8005db8:	40010800 	.word	0x40010800
 8005dbc:	40010c00 	.word	0x40010c00
 8005dc0:	40011000 	.word	0x40011000
 8005dc4:	40011400 	.word	0x40011400
 8005dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <HAL_GPIO_Init+0x304>)
 8005dce:	68da      	ldr	r2, [r3, #12]
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	43db      	mvns	r3, r3
 8005dd4:	4909      	ldr	r1, [pc, #36]	@ (8005dfc <HAL_GPIO_Init+0x304>)
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	3301      	adds	r3, #1
 8005dde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f47f ae8e 	bne.w	8005b0c <HAL_GPIO_Init+0x14>
  }
}
 8005df0:	bf00      	nop
 8005df2:	bf00      	nop
 8005df4:	372c      	adds	r7, #44	@ 0x2c
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bc80      	pop	{r7}
 8005dfa:	4770      	bx	lr
 8005dfc:	40010400 	.word	0x40010400

08005e00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	807b      	strh	r3, [r7, #2]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e10:	787b      	ldrb	r3, [r7, #1]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d003      	beq.n	8005e1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005e1c:	e003      	b.n	8005e26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005e1e:	887b      	ldrh	r3, [r7, #2]
 8005e20:	041a      	lsls	r2, r3, #16
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]
}
 8005e26:	bf00      	nop
 8005e28:	370c      	adds	r7, #12
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bc80      	pop	{r7}
 8005e2e:	4770      	bx	lr

08005e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b086      	sub	sp, #24
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e272      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 0301 	and.w	r3, r3, #1
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8087 	beq.w	8005f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e50:	4b92      	ldr	r3, [pc, #584]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f003 030c 	and.w	r3, r3, #12
 8005e58:	2b04      	cmp	r3, #4
 8005e5a:	d00c      	beq.n	8005e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 030c 	and.w	r3, r3, #12
 8005e64:	2b08      	cmp	r3, #8
 8005e66:	d112      	bne.n	8005e8e <HAL_RCC_OscConfig+0x5e>
 8005e68:	4b8c      	ldr	r3, [pc, #560]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e74:	d10b      	bne.n	8005e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e76:	4b89      	ldr	r3, [pc, #548]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d06c      	beq.n	8005f5c <HAL_RCC_OscConfig+0x12c>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d168      	bne.n	8005f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e24c      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x76>
 8005e98:	4b80      	ldr	r3, [pc, #512]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a7f      	ldr	r2, [pc, #508]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ea2:	6013      	str	r3, [r2, #0]
 8005ea4:	e02e      	b.n	8005f04 <HAL_RCC_OscConfig+0xd4>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x98>
 8005eae:	4b7b      	ldr	r3, [pc, #492]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a7a      	ldr	r2, [pc, #488]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	4b78      	ldr	r3, [pc, #480]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a77      	ldr	r2, [pc, #476]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e01d      	b.n	8005f04 <HAL_RCC_OscConfig+0xd4>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ed0:	d10c      	bne.n	8005eec <HAL_RCC_OscConfig+0xbc>
 8005ed2:	4b72      	ldr	r3, [pc, #456]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a71      	ldr	r2, [pc, #452]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005edc:	6013      	str	r3, [r2, #0]
 8005ede:	4b6f      	ldr	r3, [pc, #444]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee8:	6013      	str	r3, [r2, #0]
 8005eea:	e00b      	b.n	8005f04 <HAL_RCC_OscConfig+0xd4>
 8005eec:	4b6b      	ldr	r3, [pc, #428]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	4b68      	ldr	r3, [pc, #416]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a67      	ldr	r2, [pc, #412]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d013      	beq.n	8005f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f0c:	f7fe f992 	bl	8004234 <HAL_GetTick>
 8005f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f12:	e008      	b.n	8005f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f14:	f7fe f98e 	bl	8004234 <HAL_GetTick>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	1ad3      	subs	r3, r2, r3
 8005f1e:	2b64      	cmp	r3, #100	@ 0x64
 8005f20:	d901      	bls.n	8005f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e200      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f26:	4b5d      	ldr	r3, [pc, #372]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d0f0      	beq.n	8005f14 <HAL_RCC_OscConfig+0xe4>
 8005f32:	e014      	b.n	8005f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f34:	f7fe f97e 	bl	8004234 <HAL_GetTick>
 8005f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f3a:	e008      	b.n	8005f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f3c:	f7fe f97a 	bl	8004234 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b64      	cmp	r3, #100	@ 0x64
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e1ec      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f4e:	4b53      	ldr	r3, [pc, #332]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1f0      	bne.n	8005f3c <HAL_RCC_OscConfig+0x10c>
 8005f5a:	e000      	b.n	8005f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d063      	beq.n	8006032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f003 030c 	and.w	r3, r3, #12
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00b      	beq.n	8005f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005f76:	4b49      	ldr	r3, [pc, #292]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f003 030c 	and.w	r3, r3, #12
 8005f7e:	2b08      	cmp	r3, #8
 8005f80:	d11c      	bne.n	8005fbc <HAL_RCC_OscConfig+0x18c>
 8005f82:	4b46      	ldr	r3, [pc, #280]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d116      	bne.n	8005fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f8e:	4b43      	ldr	r3, [pc, #268]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x176>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d001      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e1c0      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4939      	ldr	r1, [pc, #228]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fba:	e03a      	b.n	8006032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d020      	beq.n	8006006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005fc4:	4b36      	ldr	r3, [pc, #216]	@ (80060a0 <HAL_RCC_OscConfig+0x270>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fca:	f7fe f933 	bl	8004234 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fd2:	f7fe f92f 	bl	8004234 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e1a1      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	00db      	lsls	r3, r3, #3
 8005ffe:	4927      	ldr	r1, [pc, #156]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8006000:	4313      	orrs	r3, r2
 8006002:	600b      	str	r3, [r1, #0]
 8006004:	e015      	b.n	8006032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006006:	4b26      	ldr	r3, [pc, #152]	@ (80060a0 <HAL_RCC_OscConfig+0x270>)
 8006008:	2200      	movs	r2, #0
 800600a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800600c:	f7fe f912 	bl	8004234 <HAL_GetTick>
 8006010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006012:	e008      	b.n	8006026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006014:	f7fe f90e 	bl	8004234 <HAL_GetTick>
 8006018:	4602      	mov	r2, r0
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	1ad3      	subs	r3, r2, r3
 800601e:	2b02      	cmp	r3, #2
 8006020:	d901      	bls.n	8006026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e180      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006026:	4b1d      	ldr	r3, [pc, #116]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0302 	and.w	r3, r3, #2
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1f0      	bne.n	8006014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f003 0308 	and.w	r3, r3, #8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d03a      	beq.n	80060b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d019      	beq.n	800607a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006046:	4b17      	ldr	r3, [pc, #92]	@ (80060a4 <HAL_RCC_OscConfig+0x274>)
 8006048:	2201      	movs	r2, #1
 800604a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800604c:	f7fe f8f2 	bl	8004234 <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006054:	f7fe f8ee 	bl	8004234 <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e160      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006066:	4b0d      	ldr	r3, [pc, #52]	@ (800609c <HAL_RCC_OscConfig+0x26c>)
 8006068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d0f0      	beq.n	8006054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006072:	2001      	movs	r0, #1
 8006074:	f000 fad8 	bl	8006628 <RCC_Delay>
 8006078:	e01c      	b.n	80060b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800607a:	4b0a      	ldr	r3, [pc, #40]	@ (80060a4 <HAL_RCC_OscConfig+0x274>)
 800607c:	2200      	movs	r2, #0
 800607e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006080:	f7fe f8d8 	bl	8004234 <HAL_GetTick>
 8006084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006086:	e00f      	b.n	80060a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006088:	f7fe f8d4 	bl	8004234 <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d908      	bls.n	80060a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e146      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000
 80060a0:	42420000 	.word	0x42420000
 80060a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060a8:	4b92      	ldr	r3, [pc, #584]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80060aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ac:	f003 0302 	and.w	r3, r3, #2
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d1e9      	bne.n	8006088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0304 	and.w	r3, r3, #4
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f000 80a6 	beq.w	800620e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060c2:	2300      	movs	r3, #0
 80060c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c6:	4b8b      	ldr	r3, [pc, #556]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10d      	bne.n	80060ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	4b88      	ldr	r3, [pc, #544]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	4a87      	ldr	r2, [pc, #540]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80060d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060dc:	61d3      	str	r3, [r2, #28]
 80060de:	4b85      	ldr	r3, [pc, #532]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80060e0:	69db      	ldr	r3, [r3, #28]
 80060e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ea:	2301      	movs	r3, #1
 80060ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060ee:	4b82      	ldr	r3, [pc, #520]	@ (80062f8 <HAL_RCC_OscConfig+0x4c8>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d118      	bne.n	800612c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80060fa:	4b7f      	ldr	r3, [pc, #508]	@ (80062f8 <HAL_RCC_OscConfig+0x4c8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a7e      	ldr	r2, [pc, #504]	@ (80062f8 <HAL_RCC_OscConfig+0x4c8>)
 8006100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006106:	f7fe f895 	bl	8004234 <HAL_GetTick>
 800610a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610e:	f7fe f891 	bl	8004234 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b64      	cmp	r3, #100	@ 0x64
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e103      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006120:	4b75      	ldr	r3, [pc, #468]	@ (80062f8 <HAL_RCC_OscConfig+0x4c8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d0f0      	beq.n	800610e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d106      	bne.n	8006142 <HAL_RCC_OscConfig+0x312>
 8006134:	4b6f      	ldr	r3, [pc, #444]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	4a6e      	ldr	r2, [pc, #440]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800613a:	f043 0301 	orr.w	r3, r3, #1
 800613e:	6213      	str	r3, [r2, #32]
 8006140:	e02d      	b.n	800619e <HAL_RCC_OscConfig+0x36e>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10c      	bne.n	8006164 <HAL_RCC_OscConfig+0x334>
 800614a:	4b6a      	ldr	r3, [pc, #424]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	4a69      	ldr	r2, [pc, #420]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006150:	f023 0301 	bic.w	r3, r3, #1
 8006154:	6213      	str	r3, [r2, #32]
 8006156:	4b67      	ldr	r3, [pc, #412]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	4a66      	ldr	r2, [pc, #408]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800615c:	f023 0304 	bic.w	r3, r3, #4
 8006160:	6213      	str	r3, [r2, #32]
 8006162:	e01c      	b.n	800619e <HAL_RCC_OscConfig+0x36e>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	2b05      	cmp	r3, #5
 800616a:	d10c      	bne.n	8006186 <HAL_RCC_OscConfig+0x356>
 800616c:	4b61      	ldr	r3, [pc, #388]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	4a60      	ldr	r2, [pc, #384]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006172:	f043 0304 	orr.w	r3, r3, #4
 8006176:	6213      	str	r3, [r2, #32]
 8006178:	4b5e      	ldr	r3, [pc, #376]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	4a5d      	ldr	r2, [pc, #372]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800617e:	f043 0301 	orr.w	r3, r3, #1
 8006182:	6213      	str	r3, [r2, #32]
 8006184:	e00b      	b.n	800619e <HAL_RCC_OscConfig+0x36e>
 8006186:	4b5b      	ldr	r3, [pc, #364]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	4a5a      	ldr	r2, [pc, #360]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800618c:	f023 0301 	bic.w	r3, r3, #1
 8006190:	6213      	str	r3, [r2, #32]
 8006192:	4b58      	ldr	r3, [pc, #352]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	4a57      	ldr	r2, [pc, #348]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006198:	f023 0304 	bic.w	r3, r3, #4
 800619c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d015      	beq.n	80061d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061a6:	f7fe f845 	bl	8004234 <HAL_GetTick>
 80061aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ac:	e00a      	b.n	80061c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061ae:	f7fe f841 	bl	8004234 <HAL_GetTick>
 80061b2:	4602      	mov	r2, r0
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061bc:	4293      	cmp	r3, r2
 80061be:	d901      	bls.n	80061c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80061c0:	2303      	movs	r3, #3
 80061c2:	e0b1      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c4:	4b4b      	ldr	r3, [pc, #300]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d0ee      	beq.n	80061ae <HAL_RCC_OscConfig+0x37e>
 80061d0:	e014      	b.n	80061fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061d2:	f7fe f82f 	bl	8004234 <HAL_GetTick>
 80061d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061d8:	e00a      	b.n	80061f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061da:	f7fe f82b 	bl	8004234 <HAL_GetTick>
 80061de:	4602      	mov	r2, r0
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d901      	bls.n	80061f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80061ec:	2303      	movs	r3, #3
 80061ee:	e09b      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f0:	4b40      	ldr	r3, [pc, #256]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d1ee      	bne.n	80061da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80061fc:	7dfb      	ldrb	r3, [r7, #23]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d105      	bne.n	800620e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006202:	4b3c      	ldr	r3, [pc, #240]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	4a3b      	ldr	r2, [pc, #236]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800620c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69db      	ldr	r3, [r3, #28]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 8087 	beq.w	8006326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006218:	4b36      	ldr	r3, [pc, #216]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	f003 030c 	and.w	r3, r3, #12
 8006220:	2b08      	cmp	r3, #8
 8006222:	d061      	beq.n	80062e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d146      	bne.n	80062ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622c:	4b33      	ldr	r3, [pc, #204]	@ (80062fc <HAL_RCC_OscConfig+0x4cc>)
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006232:	f7fd ffff 	bl	8004234 <HAL_GetTick>
 8006236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006238:	e008      	b.n	800624c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800623a:	f7fd fffb 	bl	8004234 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	2b02      	cmp	r3, #2
 8006246:	d901      	bls.n	800624c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e06d      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800624c:	4b29      	ldr	r3, [pc, #164]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f0      	bne.n	800623a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006260:	d108      	bne.n	8006274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006262:	4b24      	ldr	r3, [pc, #144]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	4921      	ldr	r1, [pc, #132]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006270:	4313      	orrs	r3, r2
 8006272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006274:	4b1f      	ldr	r3, [pc, #124]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a19      	ldr	r1, [r3, #32]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	430b      	orrs	r3, r1
 8006286:	491b      	ldr	r1, [pc, #108]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 8006288:	4313      	orrs	r3, r2
 800628a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800628c:	4b1b      	ldr	r3, [pc, #108]	@ (80062fc <HAL_RCC_OscConfig+0x4cc>)
 800628e:	2201      	movs	r2, #1
 8006290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006292:	f7fd ffcf 	bl	8004234 <HAL_GetTick>
 8006296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006298:	e008      	b.n	80062ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800629a:	f7fd ffcb 	bl	8004234 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	2b02      	cmp	r3, #2
 80062a6:	d901      	bls.n	80062ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e03d      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80062ac:	4b11      	ldr	r3, [pc, #68]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d0f0      	beq.n	800629a <HAL_RCC_OscConfig+0x46a>
 80062b8:	e035      	b.n	8006326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ba:	4b10      	ldr	r3, [pc, #64]	@ (80062fc <HAL_RCC_OscConfig+0x4cc>)
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062c0:	f7fd ffb8 	bl	8004234 <HAL_GetTick>
 80062c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062c8:	f7fd ffb4 	bl	8004234 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b02      	cmp	r3, #2
 80062d4:	d901      	bls.n	80062da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e026      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062da:	4b06      	ldr	r3, [pc, #24]	@ (80062f4 <HAL_RCC_OscConfig+0x4c4>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d1f0      	bne.n	80062c8 <HAL_RCC_OscConfig+0x498>
 80062e6:	e01e      	b.n	8006326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d107      	bne.n	8006300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e019      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
 80062f4:	40021000 	.word	0x40021000
 80062f8:	40007000 	.word	0x40007000
 80062fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006300:	4b0b      	ldr	r3, [pc, #44]	@ (8006330 <HAL_RCC_OscConfig+0x500>)
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a1b      	ldr	r3, [r3, #32]
 8006310:	429a      	cmp	r2, r3
 8006312:	d106      	bne.n	8006322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d001      	beq.n	8006326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}
 8006330:	40021000 	.word	0x40021000

08006334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b084      	sub	sp, #16
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006344:	2301      	movs	r3, #1
 8006346:	e0d0      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006348:	4b6a      	ldr	r3, [pc, #424]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	683a      	ldr	r2, [r7, #0]
 8006352:	429a      	cmp	r2, r3
 8006354:	d910      	bls.n	8006378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006356:	4b67      	ldr	r3, [pc, #412]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f023 0207 	bic.w	r2, r3, #7
 800635e:	4965      	ldr	r1, [pc, #404]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006366:	4b63      	ldr	r3, [pc, #396]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 0307 	and.w	r3, r3, #7
 800636e:	683a      	ldr	r2, [r7, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d001      	beq.n	8006378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0b8      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d020      	beq.n	80063c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f003 0304 	and.w	r3, r3, #4
 800638c:	2b00      	cmp	r3, #0
 800638e:	d005      	beq.n	800639c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006390:	4b59      	ldr	r3, [pc, #356]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	4a58      	ldr	r2, [pc, #352]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006396:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800639a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0308 	and.w	r3, r3, #8
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063a8:	4b53      	ldr	r3, [pc, #332]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a52      	ldr	r2, [pc, #328]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80063b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063b4:	4b50      	ldr	r3, [pc, #320]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	494d      	ldr	r1, [pc, #308]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063c2:	4313      	orrs	r3, r2
 80063c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d040      	beq.n	8006454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d107      	bne.n	80063ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063da:	4b47      	ldr	r3, [pc, #284]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d115      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	e07f      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d107      	bne.n	8006402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063f2:	4b41      	ldr	r3, [pc, #260]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d109      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063fe:	2301      	movs	r3, #1
 8006400:	e073      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006402:	4b3d      	ldr	r3, [pc, #244]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	e06b      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006412:	4b39      	ldr	r3, [pc, #228]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	f023 0203 	bic.w	r2, r3, #3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4936      	ldr	r1, [pc, #216]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006420:	4313      	orrs	r3, r2
 8006422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006424:	f7fd ff06 	bl	8004234 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800642a:	e00a      	b.n	8006442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800642c:	f7fd ff02 	bl	8004234 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800643a:	4293      	cmp	r3, r2
 800643c:	d901      	bls.n	8006442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800643e:	2303      	movs	r3, #3
 8006440:	e053      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006442:	4b2d      	ldr	r3, [pc, #180]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f003 020c 	and.w	r2, r3, #12
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	429a      	cmp	r2, r3
 8006452:	d1eb      	bne.n	800642c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006454:	4b27      	ldr	r3, [pc, #156]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0307 	and.w	r3, r3, #7
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d210      	bcs.n	8006484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006462:	4b24      	ldr	r3, [pc, #144]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f023 0207 	bic.w	r2, r3, #7
 800646a:	4922      	ldr	r1, [pc, #136]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	4313      	orrs	r3, r2
 8006470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006472:	4b20      	ldr	r3, [pc, #128]	@ (80064f4 <HAL_RCC_ClockConfig+0x1c0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0307 	and.w	r3, r3, #7
 800647a:	683a      	ldr	r2, [r7, #0]
 800647c:	429a      	cmp	r2, r3
 800647e:	d001      	beq.n	8006484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006480:	2301      	movs	r3, #1
 8006482:	e032      	b.n	80064ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006490:	4b19      	ldr	r3, [pc, #100]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	4916      	ldr	r1, [pc, #88]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 800649e:	4313      	orrs	r3, r2
 80064a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d009      	beq.n	80064c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80064ae:	4b12      	ldr	r3, [pc, #72]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	490e      	ldr	r1, [pc, #56]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80064c2:	f000 f821 	bl	8006508 <HAL_RCC_GetSysClockFreq>
 80064c6:	4602      	mov	r2, r0
 80064c8:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <HAL_RCC_ClockConfig+0x1c4>)
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	091b      	lsrs	r3, r3, #4
 80064ce:	f003 030f 	and.w	r3, r3, #15
 80064d2:	490a      	ldr	r1, [pc, #40]	@ (80064fc <HAL_RCC_ClockConfig+0x1c8>)
 80064d4:	5ccb      	ldrb	r3, [r1, r3]
 80064d6:	fa22 f303 	lsr.w	r3, r2, r3
 80064da:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <HAL_RCC_ClockConfig+0x1cc>)
 80064dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80064de:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <HAL_RCC_ClockConfig+0x1d0>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fd fe64 	bl	80041b0 <HAL_InitTick>

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	40022000 	.word	0x40022000
 80064f8:	40021000 	.word	0x40021000
 80064fc:	0800bc90 	.word	0x0800bc90
 8006500:	20000020 	.word	0x20000020
 8006504:	20000024 	.word	0x20000024

08006508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006508:	b490      	push	{r4, r7}
 800650a:	b08a      	sub	sp, #40	@ 0x28
 800650c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800650e:	4b29      	ldr	r3, [pc, #164]	@ (80065b4 <HAL_RCC_GetSysClockFreq+0xac>)
 8006510:	1d3c      	adds	r4, r7, #4
 8006512:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006514:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006518:	f240 2301 	movw	r3, #513	@ 0x201
 800651c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800651e:	2300      	movs	r3, #0
 8006520:	61fb      	str	r3, [r7, #28]
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
 8006526:	2300      	movs	r3, #0
 8006528:	627b      	str	r3, [r7, #36]	@ 0x24
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006532:	4b21      	ldr	r3, [pc, #132]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006538:	69fb      	ldr	r3, [r7, #28]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	2b04      	cmp	r3, #4
 8006540:	d002      	beq.n	8006548 <HAL_RCC_GetSysClockFreq+0x40>
 8006542:	2b08      	cmp	r3, #8
 8006544:	d003      	beq.n	800654e <HAL_RCC_GetSysClockFreq+0x46>
 8006546:	e02b      	b.n	80065a0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006548:	4b1c      	ldr	r3, [pc, #112]	@ (80065bc <HAL_RCC_GetSysClockFreq+0xb4>)
 800654a:	623b      	str	r3, [r7, #32]
      break;
 800654c:	e02b      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	0c9b      	lsrs	r3, r3, #18
 8006552:	f003 030f 	and.w	r3, r3, #15
 8006556:	3328      	adds	r3, #40	@ 0x28
 8006558:	443b      	add	r3, r7
 800655a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800655e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006566:	2b00      	cmp	r3, #0
 8006568:	d012      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800656a:	4b13      	ldr	r3, [pc, #76]	@ (80065b8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	0c5b      	lsrs	r3, r3, #17
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	3328      	adds	r3, #40	@ 0x28
 8006576:	443b      	add	r3, r7
 8006578:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800657c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	4a0e      	ldr	r2, [pc, #56]	@ (80065bc <HAL_RCC_GetSysClockFreq+0xb4>)
 8006582:	fb03 f202 	mul.w	r2, r3, r2
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	627b      	str	r3, [r7, #36]	@ 0x24
 800658e:	e004      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4a0b      	ldr	r2, [pc, #44]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006594:	fb02 f303 	mul.w	r3, r2, r3
 8006598:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      sysclockfreq = pllclk;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	623b      	str	r3, [r7, #32]
      break;
 800659e:	e002      	b.n	80065a6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80065a0:	4b06      	ldr	r3, [pc, #24]	@ (80065bc <HAL_RCC_GetSysClockFreq+0xb4>)
 80065a2:	623b      	str	r3, [r7, #32]
      break;
 80065a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065a6:	6a3b      	ldr	r3, [r7, #32]
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3728      	adds	r7, #40	@ 0x28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bc90      	pop	{r4, r7}
 80065b0:	4770      	bx	lr
 80065b2:	bf00      	nop
 80065b4:	0800b950 	.word	0x0800b950
 80065b8:	40021000 	.word	0x40021000
 80065bc:	007a1200 	.word	0x007a1200
 80065c0:	003d0900 	.word	0x003d0900

080065c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065c4:	b480      	push	{r7}
 80065c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065c8:	4b02      	ldr	r3, [pc, #8]	@ (80065d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80065ca:	681b      	ldr	r3, [r3, #0]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bc80      	pop	{r7}
 80065d2:	4770      	bx	lr
 80065d4:	20000020 	.word	0x20000020

080065d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065dc:	f7ff fff2 	bl	80065c4 <HAL_RCC_GetHCLKFreq>
 80065e0:	4602      	mov	r2, r0
 80065e2:	4b05      	ldr	r3, [pc, #20]	@ (80065f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	0a1b      	lsrs	r3, r3, #8
 80065e8:	f003 0307 	and.w	r3, r3, #7
 80065ec:	4903      	ldr	r1, [pc, #12]	@ (80065fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80065ee:	5ccb      	ldrb	r3, [r1, r3]
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40021000 	.word	0x40021000
 80065fc:	0800bca0 	.word	0x0800bca0

08006600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006604:	f7ff ffde 	bl	80065c4 <HAL_RCC_GetHCLKFreq>
 8006608:	4602      	mov	r2, r0
 800660a:	4b05      	ldr	r3, [pc, #20]	@ (8006620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	0adb      	lsrs	r3, r3, #11
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	4903      	ldr	r1, [pc, #12]	@ (8006624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006616:	5ccb      	ldrb	r3, [r1, r3]
 8006618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800661c:	4618      	mov	r0, r3
 800661e:	bd80      	pop	{r7, pc}
 8006620:	40021000 	.word	0x40021000
 8006624:	0800bca0 	.word	0x0800bca0

08006628 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006630:	4b0a      	ldr	r3, [pc, #40]	@ (800665c <RCC_Delay+0x34>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0a      	ldr	r2, [pc, #40]	@ (8006660 <RCC_Delay+0x38>)
 8006636:	fba2 2303 	umull	r2, r3, r2, r3
 800663a:	0a5b      	lsrs	r3, r3, #9
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	fb02 f303 	mul.w	r3, r2, r3
 8006642:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006644:	bf00      	nop
  }
  while (Delay --);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	1e5a      	subs	r2, r3, #1
 800664a:	60fa      	str	r2, [r7, #12]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1f9      	bne.n	8006644 <RCC_Delay+0x1c>
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr
 800665c:	20000020 	.word	0x20000020
 8006660:	10624dd3 	.word	0x10624dd3

08006664 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d07d      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006680:	2300      	movs	r3, #0
 8006682:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006684:	4b4f      	ldr	r3, [pc, #316]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006686:	69db      	ldr	r3, [r3, #28]
 8006688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d10d      	bne.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006690:	4b4c      	ldr	r3, [pc, #304]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	4a4b      	ldr	r2, [pc, #300]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800669a:	61d3      	str	r3, [r2, #28]
 800669c:	4b49      	ldr	r3, [pc, #292]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800669e:	69db      	ldr	r3, [r3, #28]
 80066a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80066a8:	2301      	movs	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ac:	4b46      	ldr	r3, [pc, #280]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d118      	bne.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80066b8:	4b43      	ldr	r3, [pc, #268]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a42      	ldr	r2, [pc, #264]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80066c4:	f7fd fdb6 	bl	8004234 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ca:	e008      	b.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80066cc:	f7fd fdb2 	bl	8004234 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b64      	cmp	r3, #100	@ 0x64
 80066d8:	d901      	bls.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e06d      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066de:	4b3a      	ldr	r3, [pc, #232]	@ (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d0f0      	beq.n	80066cc <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066ea:	4b36      	ldr	r3, [pc, #216]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80066ec:	6a1b      	ldr	r3, [r3, #32]
 80066ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066f2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d02e      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	429a      	cmp	r2, r3
 8006706:	d027      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006708:	4b2e      	ldr	r3, [pc, #184]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800670a:	6a1b      	ldr	r3, [r3, #32]
 800670c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006710:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006712:	4b2e      	ldr	r3, [pc, #184]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006718:	4b2c      	ldr	r3, [pc, #176]	@ (80067cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800671e:	4a29      	ldr	r2, [pc, #164]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d014      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672e:	f7fd fd81 	bl	8004234 <HAL_GetTick>
 8006732:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006734:	e00a      	b.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006736:	f7fd fd7d 	bl	8004234 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006744:	4293      	cmp	r3, r2
 8006746:	d901      	bls.n	800674c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e036      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800674c:	4b1d      	ldr	r3, [pc, #116]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800674e:	6a1b      	ldr	r3, [r3, #32]
 8006750:	f003 0302 	and.w	r3, r3, #2
 8006754:	2b00      	cmp	r3, #0
 8006756:	d0ee      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006758:	4b1a      	ldr	r3, [pc, #104]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	4917      	ldr	r1, [pc, #92]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006766:	4313      	orrs	r3, r2
 8006768:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b01      	cmp	r3, #1
 800676e:	d105      	bne.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006770:	4b14      	ldr	r3, [pc, #80]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006772:	69db      	ldr	r3, [r3, #28]
 8006774:	4a13      	ldr	r2, [pc, #76]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006776:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800677a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d008      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006788:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800678a:	685b      	ldr	r3, [r3, #4]
 800678c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	490b      	ldr	r1, [pc, #44]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006796:	4313      	orrs	r3, r2
 8006798:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d008      	beq.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a6:	4b07      	ldr	r3, [pc, #28]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	4904      	ldr	r1, [pc, #16]	@ (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	40021000 	.word	0x40021000
 80067c8:	40007000 	.word	0x40007000
 80067cc:	42420440 	.word	0x42420440

080067d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d101      	bne.n	80067e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e076      	b.n	80068d0 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d108      	bne.n	80067fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80067f2:	d009      	beq.n	8006808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	61da      	str	r2, [r3, #28]
 80067fa:	e005      	b.n	8006808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7fd fa80 	bl	8003d28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800683e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	68db      	ldr	r3, [r3, #12]
 8006856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800685a:	431a      	orrs	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	431a      	orrs	r2, r3
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	431a      	orrs	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	699b      	ldr	r3, [r3, #24]
 8006874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6a1b      	ldr	r3, [r3, #32]
 8006888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688c:	ea42 0103 	orr.w	r1, r2, r3
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	699b      	ldr	r3, [r3, #24]
 80068a4:	0c1a      	lsrs	r2, r3, #16
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f002 0204 	and.w	r2, r2, #4
 80068ae:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69da      	ldr	r2, [r3, #28]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80068be:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b08c      	sub	sp, #48	@ 0x30
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80068e6:	2301      	movs	r3, #1
 80068e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80068ea:	2300      	movs	r3, #0
 80068ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d101      	bne.n	80068fe <HAL_SPI_TransmitReceive+0x26>
 80068fa:	2302      	movs	r3, #2
 80068fc:	e18a      	b.n	8006c14 <HAL_SPI_TransmitReceive+0x33c>
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006906:	f7fd fc95 	bl	8004234 <HAL_GetTick>
 800690a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006912:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800691c:	887b      	ldrh	r3, [r7, #2]
 800691e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006920:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006924:	2b01      	cmp	r3, #1
 8006926:	d00f      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x70>
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800692e:	d107      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d103      	bne.n	8006940 <HAL_SPI_TransmitReceive+0x68>
 8006938:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800693c:	2b04      	cmp	r3, #4
 800693e:	d003      	beq.n	8006948 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006940:	2302      	movs	r3, #2
 8006942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006946:	e15b      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d005      	beq.n	800695a <HAL_SPI_TransmitReceive+0x82>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d002      	beq.n	800695a <HAL_SPI_TransmitReceive+0x82>
 8006954:	887b      	ldrh	r3, [r7, #2]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d103      	bne.n	8006962 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8006960:	e14e      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b04      	cmp	r3, #4
 800696c:	d003      	beq.n	8006976 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2205      	movs	r2, #5
 8006972:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	887a      	ldrh	r2, [r7, #2]
 8006986:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	887a      	ldrh	r2, [r7, #2]
 800698c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	887a      	ldrh	r2, [r7, #2]
 8006998:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	887a      	ldrh	r2, [r7, #2]
 800699e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b6:	2b40      	cmp	r3, #64	@ 0x40
 80069b8:	d007      	beq.n	80069ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d2:	d178      	bne.n	8006ac6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <HAL_SPI_TransmitReceive+0x10a>
 80069dc:	8b7b      	ldrh	r3, [r7, #26]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d166      	bne.n	8006ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e6:	881a      	ldrh	r2, [r3, #0]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f2:	1c9a      	adds	r2, r3, #2
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	3b01      	subs	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a06:	e053      	b.n	8006ab0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 0302 	and.w	r3, r3, #2
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d11b      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x176>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d016      	beq.n	8006a4e <HAL_SPI_TransmitReceive+0x176>
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d113      	bne.n	8006a4e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a2a:	881a      	ldrh	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a36:	1c9a      	adds	r2, r3, #2
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d119      	bne.n	8006a90 <HAL_SPI_TransmitReceive+0x1b8>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d014      	beq.n	8006a90 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a70:	b292      	uxth	r2, r2
 8006a72:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	1c9a      	adds	r2, r3, #2
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	3b01      	subs	r3, #1
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a90:	f7fd fbd0 	bl	8004234 <HAL_GetTick>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	1ad3      	subs	r3, r2, r3
 8006a9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d807      	bhi.n	8006ab0 <HAL_SPI_TransmitReceive+0x1d8>
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aa6:	d003      	beq.n	8006ab0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006aae:	e0a7      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1a6      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x130>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1a1      	bne.n	8006a08 <HAL_SPI_TransmitReceive+0x130>
 8006ac4:	e07c      	b.n	8006bc0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d002      	beq.n	8006ad4 <HAL_SPI_TransmitReceive+0x1fc>
 8006ace:	8b7b      	ldrh	r3, [r7, #26]
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d16b      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	330c      	adds	r3, #12
 8006ade:	7812      	ldrb	r2, [r2, #0]
 8006ae0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006afa:	e057      	b.n	8006bac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f003 0302 	and.w	r3, r3, #2
 8006b06:	2b02      	cmp	r3, #2
 8006b08:	d11c      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x26c>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d017      	beq.n	8006b44 <HAL_SPI_TransmitReceive+0x26c>
 8006b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d114      	bne.n	8006b44 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	7812      	ldrb	r2, [r2, #0]
 8006b26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b40:	2300      	movs	r3, #0
 8006b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d119      	bne.n	8006b86 <HAL_SPI_TransmitReceive+0x2ae>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d014      	beq.n	8006b86 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	68da      	ldr	r2, [r3, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b82:	2301      	movs	r3, #1
 8006b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b86:	f7fd fb55 	bl	8004234 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d803      	bhi.n	8006b9e <HAL_SPI_TransmitReceive+0x2c6>
 8006b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9c:	d102      	bne.n	8006ba4 <HAL_SPI_TransmitReceive+0x2cc>
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d103      	bne.n	8006bac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8006baa:	e029      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1a2      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x224>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d19d      	bne.n	8006afc <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f000 f8b1 	bl	8006d2c <SPI_EndRxTxTransaction>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d006      	beq.n	8006bde <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006bdc:	e010      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d10b      	bne.n	8006bfe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	617b      	str	r3, [r7, #20]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	617b      	str	r3, [r7, #20]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	e000      	b.n	8006c00 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006bfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8006c10:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3730      	adds	r7, #48	@ 0x30
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b088      	sub	sp, #32
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	603b      	str	r3, [r7, #0]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c2c:	f7fd fb02 	bl	8004234 <HAL_GetTick>
 8006c30:	4602      	mov	r2, r0
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	1a9b      	subs	r3, r3, r2
 8006c36:	683a      	ldr	r2, [r7, #0]
 8006c38:	4413      	add	r3, r2
 8006c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c3c:	f7fd fafa 	bl	8004234 <HAL_GetTick>
 8006c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c42:	4b39      	ldr	r3, [pc, #228]	@ (8006d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	015b      	lsls	r3, r3, #5
 8006c48:	0d1b      	lsrs	r3, r3, #20
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	fb02 f303 	mul.w	r3, r2, r3
 8006c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c52:	e054      	b.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d050      	beq.n	8006cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c5c:	f7fd faea 	bl	8004234 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	69fa      	ldr	r2, [r7, #28]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d902      	bls.n	8006c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d13d      	bne.n	8006cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	685a      	ldr	r2, [r3, #4]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d111      	bne.n	8006cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c94:	d004      	beq.n	8006ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c9e:	d107      	bne.n	8006cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cb8:	d10f      	bne.n	8006cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681a      	ldr	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cc8:	601a      	str	r2, [r3, #0]
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e017      	b.n	8006d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	3b01      	subs	r3, #1
 8006cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689a      	ldr	r2, [r3, #8]
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4013      	ands	r3, r2
 8006d08:	68ba      	ldr	r2, [r7, #8]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	bf0c      	ite	eq
 8006d0e:	2301      	moveq	r3, #1
 8006d10:	2300      	movne	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	461a      	mov	r2, r3
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d19b      	bne.n	8006c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d1c:	2300      	movs	r3, #0
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20000020 	.word	0x20000020

08006d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b086      	sub	sp, #24
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	2180      	movs	r1, #128	@ 0x80
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f7ff ff6a 	bl	8006c1c <SPI_WaitFlagStateUntilTimeout>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d007      	beq.n	8006d5e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d52:	f043 0220 	orr.w	r2, r3, #32
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d5a:	2303      	movs	r3, #3
 8006d5c:	e000      	b.n	8006d60 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d76:	2301      	movs	r3, #1
 8006d78:	e041      	b.n	8006dfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d106      	bne.n	8006d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f7fd f814 	bl	8003dbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2202      	movs	r2, #2
 8006d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3304      	adds	r3, #4
 8006da4:	4619      	mov	r1, r3
 8006da6:	4610      	mov	r0, r2
 8006da8:	f000 fafc 	bl	80073a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2201      	movs	r2, #1
 8006db0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2201      	movs	r2, #1
 8006de0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006dfc:	2300      	movs	r3, #0
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3708      	adds	r7, #8
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
	...

08006e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d001      	beq.n	8006e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	e03a      	b.n	8006e96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	68da      	ldr	r2, [r3, #12]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 0201 	orr.w	r2, r2, #1
 8006e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	@ (8006ea0 <HAL_TIM_Base_Start_IT+0x98>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00e      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x58>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4a:	d009      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x58>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a14      	ldr	r2, [pc, #80]	@ (8006ea4 <HAL_TIM_Base_Start_IT+0x9c>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d004      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x58>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a13      	ldr	r2, [pc, #76]	@ (8006ea8 <HAL_TIM_Base_Start_IT+0xa0>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d111      	bne.n	8006e84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0307 	and.w	r3, r3, #7
 8006e6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2b06      	cmp	r3, #6
 8006e70:	d010      	beq.n	8006e94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f042 0201 	orr.w	r2, r2, #1
 8006e80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e82:	e007      	b.n	8006e94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3714      	adds	r7, #20
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bc80      	pop	{r7}
 8006e9e:	4770      	bx	lr
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40000400 	.word	0x40000400
 8006ea8:	40000800 	.word	0x40000800

08006eac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e041      	b.n	8006f42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec4:	b2db      	uxtb	r3, r3
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d106      	bne.n	8006ed8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f839 	bl	8006f4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2202      	movs	r2, #2
 8006edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	3304      	adds	r3, #4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f000 fa5a 	bl	80073a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3708      	adds	r7, #8
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b083      	sub	sp, #12
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d109      	bne.n	8006f80 <HAL_TIM_PWM_Start+0x24>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f72:	b2db      	uxtb	r3, r3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	bf14      	ite	ne
 8006f78:	2301      	movne	r3, #1
 8006f7a:	2300      	moveq	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	e022      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x6a>
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d109      	bne.n	8006f9a <HAL_TIM_PWM_Start+0x3e>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	bf14      	ite	ne
 8006f92:	2301      	movne	r3, #1
 8006f94:	2300      	moveq	r3, #0
 8006f96:	b2db      	uxtb	r3, r3
 8006f98:	e015      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x6a>
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d109      	bne.n	8006fb4 <HAL_TIM_PWM_Start+0x58>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bf14      	ite	ne
 8006fac:	2301      	movne	r3, #1
 8006fae:	2300      	moveq	r3, #0
 8006fb0:	b2db      	uxtb	r3, r3
 8006fb2:	e008      	b.n	8006fc6 <HAL_TIM_PWM_Start+0x6a>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	bf14      	ite	ne
 8006fc0:	2301      	movne	r3, #1
 8006fc2:	2300      	moveq	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d001      	beq.n	8006fce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e05e      	b.n	800708c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d104      	bne.n	8006fde <HAL_TIM_PWM_Start+0x82>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2202      	movs	r2, #2
 8006fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006fdc:	e013      	b.n	8007006 <HAL_TIM_PWM_Start+0xaa>
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d104      	bne.n	8006fee <HAL_TIM_PWM_Start+0x92>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2202      	movs	r2, #2
 8006fe8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006fec:	e00b      	b.n	8007006 <HAL_TIM_PWM_Start+0xaa>
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b08      	cmp	r3, #8
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_PWM_Start+0xa2>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ffc:	e003      	b.n	8007006 <HAL_TIM_PWM_Start+0xaa>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2202      	movs	r2, #2
 8007002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2201      	movs	r2, #1
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	4618      	mov	r0, r3
 8007010:	f000 fc48 	bl	80078a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1e      	ldr	r2, [pc, #120]	@ (8007094 <HAL_TIM_PWM_Start+0x138>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d107      	bne.n	800702e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800702c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <HAL_TIM_PWM_Start+0x138>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIM_PWM_Start+0xfa>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007040:	d009      	beq.n	8007056 <HAL_TIM_PWM_Start+0xfa>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a14      	ldr	r2, [pc, #80]	@ (8007098 <HAL_TIM_PWM_Start+0x13c>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIM_PWM_Start+0xfa>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a12      	ldr	r2, [pc, #72]	@ (800709c <HAL_TIM_PWM_Start+0x140>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d111      	bne.n	800707a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b06      	cmp	r3, #6
 8007066:	d010      	beq.n	800708a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f042 0201 	orr.w	r2, r2, #1
 8007076:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007078:	e007      	b.n	800708a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0201 	orr.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40012c00 	.word	0x40012c00
 8007098:	40000400 	.word	0x40000400
 800709c:	40000800 	.word	0x40000800

080070a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e0ac      	b.n	8007214 <HAL_TIM_PWM_ConfigChannel+0x174>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	f200 809f 	bhi.w	8007208 <HAL_TIM_PWM_ConfigChannel+0x168>
 80070ca:	a201      	add	r2, pc, #4	@ (adr r2, 80070d0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80070cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d0:	08007105 	.word	0x08007105
 80070d4:	08007209 	.word	0x08007209
 80070d8:	08007209 	.word	0x08007209
 80070dc:	08007209 	.word	0x08007209
 80070e0:	08007145 	.word	0x08007145
 80070e4:	08007209 	.word	0x08007209
 80070e8:	08007209 	.word	0x08007209
 80070ec:	08007209 	.word	0x08007209
 80070f0:	08007187 	.word	0x08007187
 80070f4:	08007209 	.word	0x08007209
 80070f8:	08007209 	.word	0x08007209
 80070fc:	08007209 	.word	0x08007209
 8007100:	080071c7 	.word	0x080071c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68b9      	ldr	r1, [r7, #8]
 800710a:	4618      	mov	r0, r3
 800710c:	f000 f9ac 	bl	8007468 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699a      	ldr	r2, [r3, #24]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f042 0208 	orr.w	r2, r2, #8
 800711e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	699a      	ldr	r2, [r3, #24]
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 0204 	bic.w	r2, r2, #4
 800712e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	6999      	ldr	r1, [r3, #24]
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	430a      	orrs	r2, r1
 8007140:	619a      	str	r2, [r3, #24]
      break;
 8007142:	e062      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 f9f2 	bl	8007534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800715e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800716e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6999      	ldr	r1, [r3, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	021a      	lsls	r2, r3, #8
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	619a      	str	r2, [r3, #24]
      break;
 8007184:	e041      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68b9      	ldr	r1, [r7, #8]
 800718c:	4618      	mov	r0, r3
 800718e:	f000 fa3b 	bl	8007608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	69da      	ldr	r2, [r3, #28]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0208 	orr.w	r2, r2, #8
 80071a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0204 	bic.w	r2, r2, #4
 80071b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69d9      	ldr	r1, [r3, #28]
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	691a      	ldr	r2, [r3, #16]
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	61da      	str	r2, [r3, #28]
      break;
 80071c4:	e021      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa85 	bl	80076dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80071e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69d9      	ldr	r1, [r3, #28]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691b      	ldr	r3, [r3, #16]
 80071fc:	021a      	lsls	r2, r3, #8
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	430a      	orrs	r2, r1
 8007204:	61da      	str	r2, [r3, #28]
      break;
 8007206:	e000      	b.n	800720a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007212:	2300      	movs	r3, #0
}
 8007214:	4618      	mov	r0, r3
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_TIM_ConfigClockSource+0x18>
 8007230:	2302      	movs	r3, #2
 8007232:	e0b3      	b.n	800739c <HAL_TIM_ConfigClockSource+0x180>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007252:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800725a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800726c:	d03e      	beq.n	80072ec <HAL_TIM_ConfigClockSource+0xd0>
 800726e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007272:	f200 8087 	bhi.w	8007384 <HAL_TIM_ConfigClockSource+0x168>
 8007276:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800727a:	f000 8085 	beq.w	8007388 <HAL_TIM_ConfigClockSource+0x16c>
 800727e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007282:	d87f      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 8007284:	2b70      	cmp	r3, #112	@ 0x70
 8007286:	d01a      	beq.n	80072be <HAL_TIM_ConfigClockSource+0xa2>
 8007288:	2b70      	cmp	r3, #112	@ 0x70
 800728a:	d87b      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 800728c:	2b60      	cmp	r3, #96	@ 0x60
 800728e:	d050      	beq.n	8007332 <HAL_TIM_ConfigClockSource+0x116>
 8007290:	2b60      	cmp	r3, #96	@ 0x60
 8007292:	d877      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 8007294:	2b50      	cmp	r3, #80	@ 0x50
 8007296:	d03c      	beq.n	8007312 <HAL_TIM_ConfigClockSource+0xf6>
 8007298:	2b50      	cmp	r3, #80	@ 0x50
 800729a:	d873      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 800729c:	2b40      	cmp	r3, #64	@ 0x40
 800729e:	d058      	beq.n	8007352 <HAL_TIM_ConfigClockSource+0x136>
 80072a0:	2b40      	cmp	r3, #64	@ 0x40
 80072a2:	d86f      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 80072a4:	2b30      	cmp	r3, #48	@ 0x30
 80072a6:	d064      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x156>
 80072a8:	2b30      	cmp	r3, #48	@ 0x30
 80072aa:	d86b      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	d060      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x156>
 80072b0:	2b20      	cmp	r3, #32
 80072b2:	d867      	bhi.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d05c      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x156>
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	d05a      	beq.n	8007372 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80072bc:	e062      	b.n	8007384 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6818      	ldr	r0, [r3, #0]
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	6899      	ldr	r1, [r3, #8]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	f000 faca 	bl	8007866 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80072e0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	68fa      	ldr	r2, [r7, #12]
 80072e8:	609a      	str	r2, [r3, #8]
      break;
 80072ea:	e04e      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	6899      	ldr	r1, [r3, #8]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	685a      	ldr	r2, [r3, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	f000 fab3 	bl	8007866 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	689a      	ldr	r2, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800730e:	609a      	str	r2, [r3, #8]
      break;
 8007310:	e03b      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6818      	ldr	r0, [r3, #0]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6859      	ldr	r1, [r3, #4]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	461a      	mov	r2, r3
 8007320:	f000 fa2a 	bl	8007778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2150      	movs	r1, #80	@ 0x50
 800732a:	4618      	mov	r0, r3
 800732c:	f000 fa81 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8007330:	e02b      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6818      	ldr	r0, [r3, #0]
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	6859      	ldr	r1, [r3, #4]
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	461a      	mov	r2, r3
 8007340:	f000 fa48 	bl	80077d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2160      	movs	r1, #96	@ 0x60
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fa71 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8007350:	e01b      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6818      	ldr	r0, [r3, #0]
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	6859      	ldr	r1, [r3, #4]
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	461a      	mov	r2, r3
 8007360:	f000 fa0a 	bl	8007778 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2140      	movs	r1, #64	@ 0x40
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fa61 	bl	8007832 <TIM_ITRx_SetConfig>
      break;
 8007370:	e00b      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681a      	ldr	r2, [r3, #0]
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4619      	mov	r1, r3
 800737c:	4610      	mov	r0, r2
 800737e:	f000 fa58 	bl	8007832 <TIM_ITRx_SetConfig>
        break;
 8007382:	e002      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007384:	bf00      	nop
 8007386:	e000      	b.n	800738a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007388:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2201      	movs	r2, #1
 800738e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800739a:	2300      	movs	r3, #0
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b085      	sub	sp, #20
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a29      	ldr	r2, [pc, #164]	@ (800745c <TIM_Base_SetConfig+0xb8>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d00b      	beq.n	80073d4 <TIM_Base_SetConfig+0x30>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c2:	d007      	beq.n	80073d4 <TIM_Base_SetConfig+0x30>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a26      	ldr	r2, [pc, #152]	@ (8007460 <TIM_Base_SetConfig+0xbc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_Base_SetConfig+0x30>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a25      	ldr	r2, [pc, #148]	@ (8007464 <TIM_Base_SetConfig+0xc0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d108      	bne.n	80073e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1c      	ldr	r2, [pc, #112]	@ (800745c <TIM_Base_SetConfig+0xb8>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d00b      	beq.n	8007406 <TIM_Base_SetConfig+0x62>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073f4:	d007      	beq.n	8007406 <TIM_Base_SetConfig+0x62>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a19      	ldr	r2, [pc, #100]	@ (8007460 <TIM_Base_SetConfig+0xbc>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_Base_SetConfig+0x62>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a18      	ldr	r2, [pc, #96]	@ (8007464 <TIM_Base_SetConfig+0xc0>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d108      	bne.n	8007418 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800740c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	68fa      	ldr	r2, [r7, #12]
 8007414:	4313      	orrs	r3, r2
 8007416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a07      	ldr	r2, [pc, #28]	@ (800745c <TIM_Base_SetConfig+0xb8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d103      	bne.n	800744c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	691a      	ldr	r2, [r3, #16]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	615a      	str	r2, [r3, #20]
}
 8007452:	bf00      	nop
 8007454:	3714      	adds	r7, #20
 8007456:	46bd      	mov	sp, r7
 8007458:	bc80      	pop	{r7}
 800745a:	4770      	bx	lr
 800745c:	40012c00 	.word	0x40012c00
 8007460:	40000400 	.word	0x40000400
 8007464:	40000800 	.word	0x40000800

08007468 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007468:	b480      	push	{r7}
 800746a:	b087      	sub	sp, #28
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f023 0303 	bic.w	r3, r3, #3
 800749e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 0302 	bic.w	r3, r3, #2
 80074b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	689b      	ldr	r3, [r3, #8]
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a1c      	ldr	r2, [pc, #112]	@ (8007530 <TIM_OC1_SetConfig+0xc8>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d10c      	bne.n	80074de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f023 0308 	bic.w	r3, r3, #8
 80074ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	4313      	orrs	r3, r2
 80074d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	f023 0304 	bic.w	r3, r3, #4
 80074dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	4a13      	ldr	r2, [pc, #76]	@ (8007530 <TIM_OC1_SetConfig+0xc8>)
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d111      	bne.n	800750a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	693a      	ldr	r2, [r7, #16]
 8007506:	4313      	orrs	r3, r2
 8007508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	693a      	ldr	r2, [r7, #16]
 800750e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	621a      	str	r2, [r3, #32]
}
 8007524:	bf00      	nop
 8007526:	371c      	adds	r7, #28
 8007528:	46bd      	mov	sp, r7
 800752a:	bc80      	pop	{r7}
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	40012c00 	.word	0x40012c00

08007534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	f023 0210 	bic.w	r2, r3, #16
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	021b      	lsls	r3, r3, #8
 8007572:	68fa      	ldr	r2, [r7, #12]
 8007574:	4313      	orrs	r3, r2
 8007576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f023 0320 	bic.w	r3, r3, #32
 800757e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	011b      	lsls	r3, r3, #4
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4313      	orrs	r3, r2
 800758a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1d      	ldr	r2, [pc, #116]	@ (8007604 <TIM_OC2_SetConfig+0xd0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d10d      	bne.n	80075b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800759a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800759c:	683b      	ldr	r3, [r7, #0]
 800759e:	68db      	ldr	r3, [r3, #12]
 80075a0:	011b      	lsls	r3, r3, #4
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a14      	ldr	r2, [pc, #80]	@ (8007604 <TIM_OC2_SetConfig+0xd0>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d113      	bne.n	80075e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80075c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	695b      	ldr	r3, [r3, #20]
 80075cc:	009b      	lsls	r3, r3, #2
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	693a      	ldr	r2, [r7, #16]
 80075dc:	4313      	orrs	r3, r2
 80075de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	693a      	ldr	r2, [r7, #16]
 80075e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	bc80      	pop	{r7}
 8007602:	4770      	bx	lr
 8007604:	40012c00 	.word	0x40012c00

08007608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007608:	b480      	push	{r7}
 800760a:	b087      	sub	sp, #28
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	69db      	ldr	r3, [r3, #28]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0303 	bic.w	r3, r3, #3
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	689b      	ldr	r3, [r3, #8]
 8007656:	021b      	lsls	r3, r3, #8
 8007658:	697a      	ldr	r2, [r7, #20]
 800765a:	4313      	orrs	r3, r2
 800765c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <TIM_OC3_SetConfig+0xd0>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d10d      	bne.n	8007682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800766c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	021b      	lsls	r3, r3, #8
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a14      	ldr	r2, [pc, #80]	@ (80076d8 <TIM_OC3_SetConfig+0xd0>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d113      	bne.n	80076b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	695b      	ldr	r3, [r3, #20]
 800769e:	011b      	lsls	r3, r3, #4
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	4313      	orrs	r3, r2
 80076a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	685a      	ldr	r2, [r3, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	621a      	str	r2, [r3, #32]
}
 80076cc:	bf00      	nop
 80076ce:	371c      	adds	r7, #28
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bc80      	pop	{r7}
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40012c00 	.word	0x40012c00

080076dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	69db      	ldr	r3, [r3, #28]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800770a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4313      	orrs	r3, r2
 800771e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	031b      	lsls	r3, r3, #12
 800772e:	693a      	ldr	r2, [r7, #16]
 8007730:	4313      	orrs	r3, r2
 8007732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	4a0f      	ldr	r2, [pc, #60]	@ (8007774 <TIM_OC4_SetConfig+0x98>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d109      	bne.n	8007750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	019b      	lsls	r3, r3, #6
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	4313      	orrs	r3, r2
 800774e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	697a      	ldr	r2, [r7, #20]
 8007754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	621a      	str	r2, [r3, #32]
}
 800776a:	bf00      	nop
 800776c:	371c      	adds	r7, #28
 800776e:	46bd      	mov	sp, r7
 8007770:	bc80      	pop	{r7}
 8007772:	4770      	bx	lr
 8007774:	40012c00 	.word	0x40012c00

08007778 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007778:	b480      	push	{r7}
 800777a:	b087      	sub	sp, #28
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	f023 0201 	bic.w	r2, r3, #1
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	699b      	ldr	r3, [r3, #24]
 800779a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80077a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	011b      	lsls	r3, r3, #4
 80077a8:	693a      	ldr	r2, [r7, #16]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f023 030a 	bic.w	r3, r3, #10
 80077b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	693a      	ldr	r2, [r7, #16]
 80077c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bc80      	pop	{r7}
 80077d2:	4770      	bx	lr

080077d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	f023 0210 	bic.w	r2, r3, #16
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80077fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	031b      	lsls	r3, r3, #12
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	4313      	orrs	r3, r2
 8007808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	4313      	orrs	r3, r2
 800781a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	621a      	str	r2, [r3, #32]
}
 8007828:	bf00      	nop
 800782a:	371c      	adds	r7, #28
 800782c:	46bd      	mov	sp, r7
 800782e:	bc80      	pop	{r7}
 8007830:	4770      	bx	lr

08007832 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007832:	b480      	push	{r7}
 8007834:	b085      	sub	sp, #20
 8007836:	af00      	add	r7, sp, #0
 8007838:	6078      	str	r0, [r7, #4]
 800783a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007848:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	4313      	orrs	r3, r2
 8007850:	f043 0307 	orr.w	r3, r3, #7
 8007854:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	609a      	str	r2, [r3, #8]
}
 800785c:	bf00      	nop
 800785e:	3714      	adds	r7, #20
 8007860:	46bd      	mov	sp, r7
 8007862:	bc80      	pop	{r7}
 8007864:	4770      	bx	lr

08007866 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007866:	b480      	push	{r7}
 8007868:	b087      	sub	sp, #28
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	607a      	str	r2, [r7, #4]
 8007872:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	689b      	ldr	r3, [r3, #8]
 8007878:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007880:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	021a      	lsls	r2, r3, #8
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	431a      	orrs	r2, r3
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	4313      	orrs	r3, r2
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	4313      	orrs	r3, r2
 8007892:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	697a      	ldr	r2, [r7, #20]
 8007898:	609a      	str	r2, [r3, #8]
}
 800789a:	bf00      	nop
 800789c:	371c      	adds	r7, #28
 800789e:	46bd      	mov	sp, r7
 80078a0:	bc80      	pop	{r7}
 80078a2:	4770      	bx	lr

080078a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	f003 031f 	and.w	r3, r3, #31
 80078b6:	2201      	movs	r2, #1
 80078b8:	fa02 f303 	lsl.w	r3, r2, r3
 80078bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1a      	ldr	r2, [r3, #32]
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	43db      	mvns	r3, r3
 80078c6:	401a      	ands	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6a1a      	ldr	r2, [r3, #32]
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f003 031f 	and.w	r3, r3, #31
 80078d6:	6879      	ldr	r1, [r7, #4]
 80078d8:	fa01 f303 	lsl.w	r3, r1, r3
 80078dc:	431a      	orrs	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	621a      	str	r2, [r3, #32]
}
 80078e2:	bf00      	nop
 80078e4:	371c      	adds	r7, #28
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bc80      	pop	{r7}
 80078ea:	4770      	bx	lr

080078ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b085      	sub	sp, #20
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
 80078f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007900:	2302      	movs	r3, #2
 8007902:	e046      	b.n	8007992 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800792a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	4313      	orrs	r3, r2
 8007934:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a16      	ldr	r2, [pc, #88]	@ (800799c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d00e      	beq.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007950:	d009      	beq.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a12      	ldr	r2, [pc, #72]	@ (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d004      	beq.n	8007966 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4a10      	ldr	r2, [pc, #64]	@ (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d10c      	bne.n	8007980 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800796c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	4313      	orrs	r3, r2
 8007976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007990:	2300      	movs	r3, #0
}
 8007992:	4618      	mov	r0, r3
 8007994:	3714      	adds	r7, #20
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr
 800799c:	40012c00 	.word	0x40012c00
 80079a0:	40000400 	.word	0x40000400
 80079a4:	40000800 	.word	0x40000800

080079a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b082      	sub	sp, #8
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e03f      	b.n	8007a3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fc fa40 	bl	8003e54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2224      	movs	r2, #36	@ 0x24
 80079d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68da      	ldr	r2, [r3, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80079ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80079ec:	6878      	ldr	r0, [r7, #4]
 80079ee:	f000 f829 	bl	8007a44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	691a      	ldr	r2, [r3, #16]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695a      	ldr	r2, [r3, #20]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007a10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68da      	ldr	r2, [r3, #12]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2220      	movs	r2, #32
 8007a34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
	...

08007a44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	430a      	orrs	r2, r1
 8007a60:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	689a      	ldr	r2, [r3, #8]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	431a      	orrs	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8007a7e:	f023 030c 	bic.w	r3, r3, #12
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6812      	ldr	r2, [r2, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	430a      	orrs	r2, r1
 8007aa0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8007b58 <UART_SetConfig+0x114>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d103      	bne.n	8007ab4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007aac:	f7fe fda8 	bl	8006600 <HAL_RCC_GetPCLK2Freq>
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	e002      	b.n	8007aba <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007ab4:	f7fe fd90 	bl	80065d8 <HAL_RCC_GetPCLK1Freq>
 8007ab8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4613      	mov	r3, r2
 8007abe:	009b      	lsls	r3, r3, #2
 8007ac0:	4413      	add	r3, r2
 8007ac2:	009a      	lsls	r2, r3, #2
 8007ac4:	441a      	add	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ad0:	4a22      	ldr	r2, [pc, #136]	@ (8007b5c <UART_SetConfig+0x118>)
 8007ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	0119      	lsls	r1, r3, #4
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009a      	lsls	r2, r3, #2
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	009b      	lsls	r3, r3, #2
 8007aec:	fbb2 f2f3 	udiv	r2, r2, r3
 8007af0:	4b1a      	ldr	r3, [pc, #104]	@ (8007b5c <UART_SetConfig+0x118>)
 8007af2:	fba3 0302 	umull	r0, r3, r3, r2
 8007af6:	095b      	lsrs	r3, r3, #5
 8007af8:	2064      	movs	r0, #100	@ 0x64
 8007afa:	fb00 f303 	mul.w	r3, r0, r3
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	3332      	adds	r3, #50	@ 0x32
 8007b04:	4a15      	ldr	r2, [pc, #84]	@ (8007b5c <UART_SetConfig+0x118>)
 8007b06:	fba2 2303 	umull	r2, r3, r2, r3
 8007b0a:	095b      	lsrs	r3, r3, #5
 8007b0c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b10:	4419      	add	r1, r3
 8007b12:	68fa      	ldr	r2, [r7, #12]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009a      	lsls	r2, r3, #2
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	009b      	lsls	r3, r3, #2
 8007b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8007b28:	4b0c      	ldr	r3, [pc, #48]	@ (8007b5c <UART_SetConfig+0x118>)
 8007b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8007b2e:	095b      	lsrs	r3, r3, #5
 8007b30:	2064      	movs	r0, #100	@ 0x64
 8007b32:	fb00 f303 	mul.w	r3, r0, r3
 8007b36:	1ad3      	subs	r3, r2, r3
 8007b38:	011b      	lsls	r3, r3, #4
 8007b3a:	3332      	adds	r3, #50	@ 0x32
 8007b3c:	4a07      	ldr	r2, [pc, #28]	@ (8007b5c <UART_SetConfig+0x118>)
 8007b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b42:	095b      	lsrs	r3, r3, #5
 8007b44:	f003 020f 	and.w	r2, r3, #15
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007b50:	bf00      	nop
 8007b52:	3710      	adds	r7, #16
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	40013800 	.word	0x40013800
 8007b5c:	51eb851f 	.word	0x51eb851f

08007b60 <_ZdlPvj>:
 8007b60:	f000 b800 	b.w	8007b64 <_ZdlPv>

08007b64 <_ZdlPv>:
 8007b64:	f001 ba5c 	b.w	8009020 <free>

08007b68 <fmod>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	4680      	mov	r8, r0
 8007b6e:	4689      	mov	r9, r1
 8007b70:	4616      	mov	r6, r2
 8007b72:	461f      	mov	r7, r3
 8007b74:	f000 f910 	bl	8007d98 <__ieee754_fmod>
 8007b78:	4632      	mov	r2, r6
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	460d      	mov	r5, r1
 8007b7e:	463b      	mov	r3, r7
 8007b80:	4640      	mov	r0, r8
 8007b82:	4649      	mov	r1, r9
 8007b84:	f7f8 ff42 	bl	8000a0c <__aeabi_dcmpun>
 8007b88:	b990      	cbnz	r0, 8007bb0 <fmod+0x48>
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	4630      	mov	r0, r6
 8007b90:	4639      	mov	r1, r7
 8007b92:	f7f8 ff09 	bl	80009a8 <__aeabi_dcmpeq>
 8007b96:	b158      	cbz	r0, 8007bb0 <fmod+0x48>
 8007b98:	f002 f8bc 	bl	8009d14 <__errno>
 8007b9c:	2321      	movs	r3, #33	@ 0x21
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	6003      	str	r3, [r0, #0]
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	4610      	mov	r0, r2
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	f7f8 fdc0 	bl	800072c <__aeabi_ddiv>
 8007bac:	4604      	mov	r4, r0
 8007bae:	460d      	mov	r5, r1
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	4629      	mov	r1, r5
 8007bb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007bb8 <pow>:
 8007bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bbc:	4614      	mov	r4, r2
 8007bbe:	461d      	mov	r5, r3
 8007bc0:	4680      	mov	r8, r0
 8007bc2:	4689      	mov	r9, r1
 8007bc4:	f000 f9ec 	bl	8007fa0 <__ieee754_pow>
 8007bc8:	4622      	mov	r2, r4
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	462b      	mov	r3, r5
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	4629      	mov	r1, r5
 8007bd4:	f7f8 ff1a 	bl	8000a0c <__aeabi_dcmpun>
 8007bd8:	bbc8      	cbnz	r0, 8007c4e <pow+0x96>
 8007bda:	2200      	movs	r2, #0
 8007bdc:	2300      	movs	r3, #0
 8007bde:	4640      	mov	r0, r8
 8007be0:	4649      	mov	r1, r9
 8007be2:	f7f8 fee1 	bl	80009a8 <__aeabi_dcmpeq>
 8007be6:	b1b8      	cbz	r0, 8007c18 <pow+0x60>
 8007be8:	2200      	movs	r2, #0
 8007bea:	2300      	movs	r3, #0
 8007bec:	4620      	mov	r0, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	f7f8 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	d141      	bne.n	8007c7c <pow+0xc4>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	4629      	mov	r1, r5
 8007bfc:	f000 f846 	bl	8007c8c <finite>
 8007c00:	b328      	cbz	r0, 8007c4e <pow+0x96>
 8007c02:	2200      	movs	r2, #0
 8007c04:	2300      	movs	r3, #0
 8007c06:	4620      	mov	r0, r4
 8007c08:	4629      	mov	r1, r5
 8007c0a:	f7f8 fed7 	bl	80009bc <__aeabi_dcmplt>
 8007c0e:	b1f0      	cbz	r0, 8007c4e <pow+0x96>
 8007c10:	f002 f880 	bl	8009d14 <__errno>
 8007c14:	2322      	movs	r3, #34	@ 0x22
 8007c16:	e019      	b.n	8007c4c <pow+0x94>
 8007c18:	4630      	mov	r0, r6
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	f000 f836 	bl	8007c8c <finite>
 8007c20:	b9c8      	cbnz	r0, 8007c56 <pow+0x9e>
 8007c22:	4640      	mov	r0, r8
 8007c24:	4649      	mov	r1, r9
 8007c26:	f000 f831 	bl	8007c8c <finite>
 8007c2a:	b1a0      	cbz	r0, 8007c56 <pow+0x9e>
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f000 f82c 	bl	8007c8c <finite>
 8007c34:	b178      	cbz	r0, 8007c56 <pow+0x9e>
 8007c36:	4632      	mov	r2, r6
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 fee5 	bl	8000a0c <__aeabi_dcmpun>
 8007c42:	2800      	cmp	r0, #0
 8007c44:	d0e4      	beq.n	8007c10 <pow+0x58>
 8007c46:	f002 f865 	bl	8009d14 <__errno>
 8007c4a:	2321      	movs	r3, #33	@ 0x21
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	4630      	mov	r0, r6
 8007c50:	4639      	mov	r1, r7
 8007c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c56:	2200      	movs	r2, #0
 8007c58:	2300      	movs	r3, #0
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fea3 	bl	80009a8 <__aeabi_dcmpeq>
 8007c62:	2800      	cmp	r0, #0
 8007c64:	d0f3      	beq.n	8007c4e <pow+0x96>
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f000 f80f 	bl	8007c8c <finite>
 8007c6e:	2800      	cmp	r0, #0
 8007c70:	d0ed      	beq.n	8007c4e <pow+0x96>
 8007c72:	4620      	mov	r0, r4
 8007c74:	4629      	mov	r1, r5
 8007c76:	f000 f809 	bl	8007c8c <finite>
 8007c7a:	e7c8      	b.n	8007c0e <pow+0x56>
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	4f01      	ldr	r7, [pc, #4]	@ (8007c84 <pow+0xcc>)
 8007c80:	e7e5      	b.n	8007c4e <pow+0x96>
 8007c82:	bf00      	nop
 8007c84:	3ff00000 	.word	0x3ff00000

08007c88 <atan2f>:
 8007c88:	f000 beb6 	b.w	80089f8 <__ieee754_atan2f>

08007c8c <finite>:
 8007c8c:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 8007c90:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8007c94:	0fc0      	lsrs	r0, r0, #31
 8007c96:	4770      	bx	lr

08007c98 <floor>:
 8007c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007ca0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8007ca4:	2e13      	cmp	r6, #19
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	460b      	mov	r3, r1
 8007caa:	460c      	mov	r4, r1
 8007cac:	4605      	mov	r5, r0
 8007cae:	4680      	mov	r8, r0
 8007cb0:	dc35      	bgt.n	8007d1e <floor+0x86>
 8007cb2:	2e00      	cmp	r6, #0
 8007cb4:	da17      	bge.n	8007ce6 <floor+0x4e>
 8007cb6:	a334      	add	r3, pc, #208	@ (adr r3, 8007d88 <floor+0xf0>)
 8007cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cbc:	f7f8 fa56 	bl	800016c <__adddf3>
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	f7f8 fe98 	bl	80009f8 <__aeabi_dcmpgt>
 8007cc8:	b150      	cbz	r0, 8007ce0 <floor+0x48>
 8007cca:	2c00      	cmp	r4, #0
 8007ccc:	da57      	bge.n	8007d7e <floor+0xe6>
 8007cce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007cd2:	432c      	orrs	r4, r5
 8007cd4:	2500      	movs	r5, #0
 8007cd6:	42ac      	cmp	r4, r5
 8007cd8:	4c2d      	ldr	r4, [pc, #180]	@ (8007d90 <floor+0xf8>)
 8007cda:	bf08      	it	eq
 8007cdc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007ce0:	4623      	mov	r3, r4
 8007ce2:	462a      	mov	r2, r5
 8007ce4:	e024      	b.n	8007d30 <floor+0x98>
 8007ce6:	4f2b      	ldr	r7, [pc, #172]	@ (8007d94 <floor+0xfc>)
 8007ce8:	4137      	asrs	r7, r6
 8007cea:	ea01 0c07 	and.w	ip, r1, r7
 8007cee:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007cf2:	d01d      	beq.n	8007d30 <floor+0x98>
 8007cf4:	a324      	add	r3, pc, #144	@ (adr r3, 8007d88 <floor+0xf0>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fa37 	bl	800016c <__adddf3>
 8007cfe:	2200      	movs	r2, #0
 8007d00:	2300      	movs	r3, #0
 8007d02:	f7f8 fe79 	bl	80009f8 <__aeabi_dcmpgt>
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d0ea      	beq.n	8007ce0 <floor+0x48>
 8007d0a:	2c00      	cmp	r4, #0
 8007d0c:	bfbe      	ittt	lt
 8007d0e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007d12:	4133      	asrlt	r3, r6
 8007d14:	18e4      	addlt	r4, r4, r3
 8007d16:	2500      	movs	r5, #0
 8007d18:	ea24 0407 	bic.w	r4, r4, r7
 8007d1c:	e7e0      	b.n	8007ce0 <floor+0x48>
 8007d1e:	2e33      	cmp	r6, #51	@ 0x33
 8007d20:	dd0a      	ble.n	8007d38 <floor+0xa0>
 8007d22:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007d26:	d103      	bne.n	8007d30 <floor+0x98>
 8007d28:	f7f8 fa20 	bl	800016c <__adddf3>
 8007d2c:	4602      	mov	r2, r0
 8007d2e:	460b      	mov	r3, r1
 8007d30:	4610      	mov	r0, r2
 8007d32:	4619      	mov	r1, r3
 8007d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d38:	f04f 3cff 	mov.w	ip, #4294967295
 8007d3c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8007d40:	fa2c f707 	lsr.w	r7, ip, r7
 8007d44:	4207      	tst	r7, r0
 8007d46:	d0f3      	beq.n	8007d30 <floor+0x98>
 8007d48:	a30f      	add	r3, pc, #60	@ (adr r3, 8007d88 <floor+0xf0>)
 8007d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4e:	f7f8 fa0d 	bl	800016c <__adddf3>
 8007d52:	2200      	movs	r2, #0
 8007d54:	2300      	movs	r3, #0
 8007d56:	f7f8 fe4f 	bl	80009f8 <__aeabi_dcmpgt>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0c0      	beq.n	8007ce0 <floor+0x48>
 8007d5e:	2c00      	cmp	r4, #0
 8007d60:	da0a      	bge.n	8007d78 <floor+0xe0>
 8007d62:	2e14      	cmp	r6, #20
 8007d64:	d101      	bne.n	8007d6a <floor+0xd2>
 8007d66:	3401      	adds	r4, #1
 8007d68:	e006      	b.n	8007d78 <floor+0xe0>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007d70:	40b3      	lsls	r3, r6
 8007d72:	441d      	add	r5, r3
 8007d74:	4545      	cmp	r5, r8
 8007d76:	d3f6      	bcc.n	8007d66 <floor+0xce>
 8007d78:	ea25 0507 	bic.w	r5, r5, r7
 8007d7c:	e7b0      	b.n	8007ce0 <floor+0x48>
 8007d7e:	2500      	movs	r5, #0
 8007d80:	462c      	mov	r4, r5
 8007d82:	e7ad      	b.n	8007ce0 <floor+0x48>
 8007d84:	f3af 8000 	nop.w
 8007d88:	8800759c 	.word	0x8800759c
 8007d8c:	7e37e43c 	.word	0x7e37e43c
 8007d90:	bff00000 	.word	0xbff00000
 8007d94:	000fffff 	.word	0x000fffff

08007d98 <__ieee754_fmod>:
 8007d98:	f023 4c00 	bic.w	ip, r3, #2147483648	@ 0x80000000
 8007d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007da0:	ea52 040c 	orrs.w	r4, r2, ip
 8007da4:	461e      	mov	r6, r3
 8007da6:	4617      	mov	r7, r2
 8007da8:	4696      	mov	lr, r2
 8007daa:	d00c      	beq.n	8007dc6 <__ieee754_fmod+0x2e>
 8007dac:	4c76      	ldr	r4, [pc, #472]	@ (8007f88 <__ieee754_fmod+0x1f0>)
 8007dae:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8007db2:	45a0      	cmp	r8, r4
 8007db4:	4689      	mov	r9, r1
 8007db6:	d806      	bhi.n	8007dc6 <__ieee754_fmod+0x2e>
 8007db8:	4254      	negs	r4, r2
 8007dba:	4d74      	ldr	r5, [pc, #464]	@ (8007f8c <__ieee754_fmod+0x1f4>)
 8007dbc:	4314      	orrs	r4, r2
 8007dbe:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8007dc2:	42ac      	cmp	r4, r5
 8007dc4:	d907      	bls.n	8007dd6 <__ieee754_fmod+0x3e>
 8007dc6:	f7f8 fb87 	bl	80004d8 <__aeabi_dmul>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	460b      	mov	r3, r1
 8007dce:	f7f8 fcad 	bl	800072c <__aeabi_ddiv>
 8007dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd6:	45e0      	cmp	r8, ip
 8007dd8:	4682      	mov	sl, r0
 8007dda:	4604      	mov	r4, r0
 8007ddc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8007de0:	dc09      	bgt.n	8007df6 <__ieee754_fmod+0x5e>
 8007de2:	dbf6      	blt.n	8007dd2 <__ieee754_fmod+0x3a>
 8007de4:	4282      	cmp	r2, r0
 8007de6:	d8f4      	bhi.n	8007dd2 <__ieee754_fmod+0x3a>
 8007de8:	d105      	bne.n	8007df6 <__ieee754_fmod+0x5e>
 8007dea:	4b69      	ldr	r3, [pc, #420]	@ (8007f90 <__ieee754_fmod+0x1f8>)
 8007dec:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8007df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007df4:	e7ed      	b.n	8007dd2 <__ieee754_fmod+0x3a>
 8007df6:	4a65      	ldr	r2, [pc, #404]	@ (8007f8c <__ieee754_fmod+0x1f4>)
 8007df8:	ea19 0f02 	tst.w	r9, r2
 8007dfc:	d148      	bne.n	8007e90 <__ieee754_fmod+0xf8>
 8007dfe:	f1b8 0f00 	cmp.w	r8, #0
 8007e02:	d13d      	bne.n	8007e80 <__ieee754_fmod+0xe8>
 8007e04:	4653      	mov	r3, sl
 8007e06:	4963      	ldr	r1, [pc, #396]	@ (8007f94 <__ieee754_fmod+0x1fc>)
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	dc36      	bgt.n	8007e7a <__ieee754_fmod+0xe2>
 8007e0c:	4216      	tst	r6, r2
 8007e0e:	d14f      	bne.n	8007eb0 <__ieee754_fmod+0x118>
 8007e10:	f1bc 0f00 	cmp.w	ip, #0
 8007e14:	d144      	bne.n	8007ea0 <__ieee754_fmod+0x108>
 8007e16:	463b      	mov	r3, r7
 8007e18:	4a5e      	ldr	r2, [pc, #376]	@ (8007f94 <__ieee754_fmod+0x1fc>)
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	dc3d      	bgt.n	8007e9a <__ieee754_fmod+0x102>
 8007e1e:	485e      	ldr	r0, [pc, #376]	@ (8007f98 <__ieee754_fmod+0x200>)
 8007e20:	4281      	cmp	r1, r0
 8007e22:	db4a      	blt.n	8007eba <__ieee754_fmod+0x122>
 8007e24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e2c:	485a      	ldr	r0, [pc, #360]	@ (8007f98 <__ieee754_fmod+0x200>)
 8007e2e:	4282      	cmp	r2, r0
 8007e30:	db57      	blt.n	8007ee2 <__ieee754_fmod+0x14a>
 8007e32:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8007e36:	f446 1680 	orr.w	r6, r6, #1048576	@ 0x100000
 8007e3a:	1a89      	subs	r1, r1, r2
 8007e3c:	1b98      	subs	r0, r3, r6
 8007e3e:	eba4 070e 	sub.w	r7, r4, lr
 8007e42:	2900      	cmp	r1, #0
 8007e44:	d162      	bne.n	8007f0c <__ieee754_fmod+0x174>
 8007e46:	4574      	cmp	r4, lr
 8007e48:	bf38      	it	cc
 8007e4a:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	bfa4      	itt	ge
 8007e52:	463c      	movge	r4, r7
 8007e54:	4603      	movge	r3, r0
 8007e56:	ea53 0104 	orrs.w	r1, r3, r4
 8007e5a:	d0c6      	beq.n	8007dea <__ieee754_fmod+0x52>
 8007e5c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e60:	db69      	blt.n	8007f36 <__ieee754_fmod+0x19e>
 8007e62:	494d      	ldr	r1, [pc, #308]	@ (8007f98 <__ieee754_fmod+0x200>)
 8007e64:	428a      	cmp	r2, r1
 8007e66:	db6c      	blt.n	8007f42 <__ieee754_fmod+0x1aa>
 8007e68:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e6c:	432b      	orrs	r3, r5
 8007e6e:	f202 32ff 	addw	r2, r2, #1023	@ 0x3ff
 8007e72:	4620      	mov	r0, r4
 8007e74:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007e78:	e7ab      	b.n	8007dd2 <__ieee754_fmod+0x3a>
 8007e7a:	3901      	subs	r1, #1
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	e7c3      	b.n	8007e08 <__ieee754_fmod+0x70>
 8007e80:	4945      	ldr	r1, [pc, #276]	@ (8007f98 <__ieee754_fmod+0x200>)
 8007e82:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	ddc0      	ble.n	8007e0c <__ieee754_fmod+0x74>
 8007e8a:	3901      	subs	r1, #1
 8007e8c:	005b      	lsls	r3, r3, #1
 8007e8e:	e7fa      	b.n	8007e86 <__ieee754_fmod+0xee>
 8007e90:	ea4f 5128 	mov.w	r1, r8, asr #20
 8007e94:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8007e98:	e7b8      	b.n	8007e0c <__ieee754_fmod+0x74>
 8007e9a:	3a01      	subs	r2, #1
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	e7bc      	b.n	8007e1a <__ieee754_fmod+0x82>
 8007ea0:	4a3d      	ldr	r2, [pc, #244]	@ (8007f98 <__ieee754_fmod+0x200>)
 8007ea2:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	ddb9      	ble.n	8007e1e <__ieee754_fmod+0x86>
 8007eaa:	3a01      	subs	r2, #1
 8007eac:	005b      	lsls	r3, r3, #1
 8007eae:	e7fa      	b.n	8007ea6 <__ieee754_fmod+0x10e>
 8007eb0:	ea4f 522c 	mov.w	r2, ip, asr #20
 8007eb4:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007eb8:	e7b1      	b.n	8007e1e <__ieee754_fmod+0x86>
 8007eba:	1a40      	subs	r0, r0, r1
 8007ebc:	281f      	cmp	r0, #31
 8007ebe:	dc0a      	bgt.n	8007ed6 <__ieee754_fmod+0x13e>
 8007ec0:	f201 431e 	addw	r3, r1, #1054	@ 0x41e
 8007ec4:	fa08 f800 	lsl.w	r8, r8, r0
 8007ec8:	fa2a f303 	lsr.w	r3, sl, r3
 8007ecc:	ea43 0308 	orr.w	r3, r3, r8
 8007ed0:	fa0a f400 	lsl.w	r4, sl, r0
 8007ed4:	e7aa      	b.n	8007e2c <__ieee754_fmod+0x94>
 8007ed6:	4b31      	ldr	r3, [pc, #196]	@ (8007f9c <__ieee754_fmod+0x204>)
 8007ed8:	2400      	movs	r4, #0
 8007eda:	1a5b      	subs	r3, r3, r1
 8007edc:	fa0a f303 	lsl.w	r3, sl, r3
 8007ee0:	e7a4      	b.n	8007e2c <__ieee754_fmod+0x94>
 8007ee2:	1a80      	subs	r0, r0, r2
 8007ee4:	281f      	cmp	r0, #31
 8007ee6:	dc0a      	bgt.n	8007efe <__ieee754_fmod+0x166>
 8007ee8:	f202 461e 	addw	r6, r2, #1054	@ 0x41e
 8007eec:	fa0c fc00 	lsl.w	ip, ip, r0
 8007ef0:	fa27 f606 	lsr.w	r6, r7, r6
 8007ef4:	ea46 060c 	orr.w	r6, r6, ip
 8007ef8:	fa07 fe00 	lsl.w	lr, r7, r0
 8007efc:	e79d      	b.n	8007e3a <__ieee754_fmod+0xa2>
 8007efe:	4e27      	ldr	r6, [pc, #156]	@ (8007f9c <__ieee754_fmod+0x204>)
 8007f00:	f04f 0e00 	mov.w	lr, #0
 8007f04:	1ab6      	subs	r6, r6, r2
 8007f06:	fa07 f606 	lsl.w	r6, r7, r6
 8007f0a:	e796      	b.n	8007e3a <__ieee754_fmod+0xa2>
 8007f0c:	4574      	cmp	r4, lr
 8007f0e:	bf38      	it	cc
 8007f10:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8007f14:	2800      	cmp	r0, #0
 8007f16:	da05      	bge.n	8007f24 <__ieee754_fmod+0x18c>
 8007f18:	0fe0      	lsrs	r0, r4, #31
 8007f1a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8007f1e:	0064      	lsls	r4, r4, #1
 8007f20:	3901      	subs	r1, #1
 8007f22:	e78b      	b.n	8007e3c <__ieee754_fmod+0xa4>
 8007f24:	ea50 0307 	orrs.w	r3, r0, r7
 8007f28:	f43f af5f 	beq.w	8007dea <__ieee754_fmod+0x52>
 8007f2c:	0ffb      	lsrs	r3, r7, #31
 8007f2e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007f32:	007c      	lsls	r4, r7, #1
 8007f34:	e7f4      	b.n	8007f20 <__ieee754_fmod+0x188>
 8007f36:	0fe1      	lsrs	r1, r4, #31
 8007f38:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8007f3c:	0064      	lsls	r4, r4, #1
 8007f3e:	3a01      	subs	r2, #1
 8007f40:	e78c      	b.n	8007e5c <__ieee754_fmod+0xc4>
 8007f42:	1a89      	subs	r1, r1, r2
 8007f44:	2914      	cmp	r1, #20
 8007f46:	dc0a      	bgt.n	8007f5e <__ieee754_fmod+0x1c6>
 8007f48:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007f4c:	fa03 f202 	lsl.w	r2, r3, r2
 8007f50:	40cc      	lsrs	r4, r1
 8007f52:	4322      	orrs	r2, r4
 8007f54:	410b      	asrs	r3, r1
 8007f56:	4610      	mov	r0, r2
 8007f58:	ea43 0105 	orr.w	r1, r3, r5
 8007f5c:	e739      	b.n	8007dd2 <__ieee754_fmod+0x3a>
 8007f5e:	291f      	cmp	r1, #31
 8007f60:	dc07      	bgt.n	8007f72 <__ieee754_fmod+0x1da>
 8007f62:	f202 421e 	addw	r2, r2, #1054	@ 0x41e
 8007f66:	40cc      	lsrs	r4, r1
 8007f68:	fa03 f202 	lsl.w	r2, r3, r2
 8007f6c:	4322      	orrs	r2, r4
 8007f6e:	462b      	mov	r3, r5
 8007f70:	e7f1      	b.n	8007f56 <__ieee754_fmod+0x1be>
 8007f72:	f1c2 427f 	rsb	r2, r2, #4278190080	@ 0xff000000
 8007f76:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 8007f7a:	f502 427b 	add.w	r2, r2, #64256	@ 0xfb00
 8007f7e:	32e2      	adds	r2, #226	@ 0xe2
 8007f80:	fa43 f202 	asr.w	r2, r3, r2
 8007f84:	e7f3      	b.n	8007f6e <__ieee754_fmod+0x1d6>
 8007f86:	bf00      	nop
 8007f88:	7fefffff 	.word	0x7fefffff
 8007f8c:	7ff00000 	.word	0x7ff00000
 8007f90:	0800bca8 	.word	0x0800bca8
 8007f94:	fffffbed 	.word	0xfffffbed
 8007f98:	fffffc02 	.word	0xfffffc02
 8007f9c:	fffffbe2 	.word	0xfffffbe2

08007fa0 <__ieee754_pow>:
 8007fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa4:	b091      	sub	sp, #68	@ 0x44
 8007fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8007faa:	468b      	mov	fp, r1
 8007fac:	e9dd 1800 	ldrd	r1, r8, [sp]
 8007fb0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 8007fb4:	4682      	mov	sl, r0
 8007fb6:	ea57 0001 	orrs.w	r0, r7, r1
 8007fba:	d112      	bne.n	8007fe2 <__ieee754_pow+0x42>
 8007fbc:	4653      	mov	r3, sl
 8007fbe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007fc2:	18db      	adds	r3, r3, r3
 8007fc4:	4152      	adcs	r2, r2
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	4b91      	ldr	r3, [pc, #580]	@ (8008210 <__ieee754_pow+0x270>)
 8007fca:	4193      	sbcs	r3, r2
 8007fcc:	f080 84ce 	bcs.w	800896c <__ieee754_pow+0x9cc>
 8007fd0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	f7f8 f8c8 	bl	800016c <__adddf3>
 8007fdc:	b011      	add	sp, #68	@ 0x44
 8007fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe2:	4b8c      	ldr	r3, [pc, #560]	@ (8008214 <__ieee754_pow+0x274>)
 8007fe4:	f02b 4600 	bic.w	r6, fp, #2147483648	@ 0x80000000
 8007fe8:	429e      	cmp	r6, r3
 8007fea:	465d      	mov	r5, fp
 8007fec:	46d1      	mov	r9, sl
 8007fee:	d807      	bhi.n	8008000 <__ieee754_pow+0x60>
 8007ff0:	d102      	bne.n	8007ff8 <__ieee754_pow+0x58>
 8007ff2:	f1ba 0f00 	cmp.w	sl, #0
 8007ff6:	d1eb      	bne.n	8007fd0 <__ieee754_pow+0x30>
 8007ff8:	429f      	cmp	r7, r3
 8007ffa:	d801      	bhi.n	8008000 <__ieee754_pow+0x60>
 8007ffc:	d10f      	bne.n	800801e <__ieee754_pow+0x7e>
 8007ffe:	b171      	cbz	r1, 800801e <__ieee754_pow+0x7e>
 8008000:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008004:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008008:	ea55 0509 	orrs.w	r5, r5, r9
 800800c:	d1e0      	bne.n	8007fd0 <__ieee754_pow+0x30>
 800800e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008012:	18db      	adds	r3, r3, r3
 8008014:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008018:	4152      	adcs	r2, r2
 800801a:	429d      	cmp	r5, r3
 800801c:	e7d4      	b.n	8007fc8 <__ieee754_pow+0x28>
 800801e:	2d00      	cmp	r5, #0
 8008020:	4633      	mov	r3, r6
 8008022:	da39      	bge.n	8008098 <__ieee754_pow+0xf8>
 8008024:	4a7c      	ldr	r2, [pc, #496]	@ (8008218 <__ieee754_pow+0x278>)
 8008026:	4297      	cmp	r7, r2
 8008028:	d84e      	bhi.n	80080c8 <__ieee754_pow+0x128>
 800802a:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800802e:	4297      	cmp	r7, r2
 8008030:	f240 84ab 	bls.w	800898a <__ieee754_pow+0x9ea>
 8008034:	153a      	asrs	r2, r7, #20
 8008036:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800803a:	2a14      	cmp	r2, #20
 800803c:	dd0f      	ble.n	800805e <__ieee754_pow+0xbe>
 800803e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008042:	fa21 f402 	lsr.w	r4, r1, r2
 8008046:	fa04 f202 	lsl.w	r2, r4, r2
 800804a:	428a      	cmp	r2, r1
 800804c:	f040 849d 	bne.w	800898a <__ieee754_pow+0x9ea>
 8008050:	f004 0401 	and.w	r4, r4, #1
 8008054:	f1c4 0402 	rsb	r4, r4, #2
 8008058:	2900      	cmp	r1, #0
 800805a:	d15a      	bne.n	8008112 <__ieee754_pow+0x172>
 800805c:	e00e      	b.n	800807c <__ieee754_pow+0xdc>
 800805e:	2900      	cmp	r1, #0
 8008060:	d156      	bne.n	8008110 <__ieee754_pow+0x170>
 8008062:	f1c2 0214 	rsb	r2, r2, #20
 8008066:	fa47 f402 	asr.w	r4, r7, r2
 800806a:	fa04 f202 	lsl.w	r2, r4, r2
 800806e:	42ba      	cmp	r2, r7
 8008070:	f040 8488 	bne.w	8008984 <__ieee754_pow+0x9e4>
 8008074:	f004 0401 	and.w	r4, r4, #1
 8008078:	f1c4 0402 	rsb	r4, r4, #2
 800807c:	4a67      	ldr	r2, [pc, #412]	@ (800821c <__ieee754_pow+0x27c>)
 800807e:	4297      	cmp	r7, r2
 8008080:	d130      	bne.n	80080e4 <__ieee754_pow+0x144>
 8008082:	f1b8 0f00 	cmp.w	r8, #0
 8008086:	f280 8479 	bge.w	800897c <__ieee754_pow+0x9dc>
 800808a:	4652      	mov	r2, sl
 800808c:	465b      	mov	r3, fp
 800808e:	2000      	movs	r0, #0
 8008090:	4962      	ldr	r1, [pc, #392]	@ (800821c <__ieee754_pow+0x27c>)
 8008092:	f7f8 fb4b 	bl	800072c <__aeabi_ddiv>
 8008096:	e7a1      	b.n	8007fdc <__ieee754_pow+0x3c>
 8008098:	2400      	movs	r4, #0
 800809a:	2900      	cmp	r1, #0
 800809c:	d139      	bne.n	8008112 <__ieee754_pow+0x172>
 800809e:	4a5d      	ldr	r2, [pc, #372]	@ (8008214 <__ieee754_pow+0x274>)
 80080a0:	4297      	cmp	r7, r2
 80080a2:	d1eb      	bne.n	800807c <__ieee754_pow+0xdc>
 80080a4:	f106 4340 	add.w	r3, r6, #3221225472	@ 0xc0000000
 80080a8:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80080ac:	ea53 0309 	orrs.w	r3, r3, r9
 80080b0:	f000 845c 	beq.w	800896c <__ieee754_pow+0x9cc>
 80080b4:	4b5a      	ldr	r3, [pc, #360]	@ (8008220 <__ieee754_pow+0x280>)
 80080b6:	429e      	cmp	r6, r3
 80080b8:	d908      	bls.n	80080cc <__ieee754_pow+0x12c>
 80080ba:	f1b8 0f00 	cmp.w	r8, #0
 80080be:	f2c0 8459 	blt.w	8008974 <__ieee754_pow+0x9d4>
 80080c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80080c6:	e789      	b.n	8007fdc <__ieee754_pow+0x3c>
 80080c8:	2402      	movs	r4, #2
 80080ca:	e7e6      	b.n	800809a <__ieee754_pow+0xfa>
 80080cc:	f1b8 0f00 	cmp.w	r8, #0
 80080d0:	f04f 0000 	mov.w	r0, #0
 80080d4:	f04f 0100 	mov.w	r1, #0
 80080d8:	da80      	bge.n	8007fdc <__ieee754_pow+0x3c>
 80080da:	e9dd 0300 	ldrd	r0, r3, [sp]
 80080de:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80080e2:	e77b      	b.n	8007fdc <__ieee754_pow+0x3c>
 80080e4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80080e8:	d106      	bne.n	80080f8 <__ieee754_pow+0x158>
 80080ea:	4652      	mov	r2, sl
 80080ec:	465b      	mov	r3, fp
 80080ee:	4650      	mov	r0, sl
 80080f0:	4659      	mov	r1, fp
 80080f2:	f7f8 f9f1 	bl	80004d8 <__aeabi_dmul>
 80080f6:	e771      	b.n	8007fdc <__ieee754_pow+0x3c>
 80080f8:	4a4a      	ldr	r2, [pc, #296]	@ (8008224 <__ieee754_pow+0x284>)
 80080fa:	4590      	cmp	r8, r2
 80080fc:	d109      	bne.n	8008112 <__ieee754_pow+0x172>
 80080fe:	2d00      	cmp	r5, #0
 8008100:	db07      	blt.n	8008112 <__ieee754_pow+0x172>
 8008102:	4650      	mov	r0, sl
 8008104:	4659      	mov	r1, fp
 8008106:	b011      	add	sp, #68	@ 0x44
 8008108:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810c:	f000 beaa 	b.w	8008e64 <__ieee754_sqrt>
 8008110:	2400      	movs	r4, #0
 8008112:	4650      	mov	r0, sl
 8008114:	4659      	mov	r1, fp
 8008116:	9302      	str	r3, [sp, #8]
 8008118:	f000 fc6a 	bl	80089f0 <fabs>
 800811c:	9b02      	ldr	r3, [sp, #8]
 800811e:	f1b9 0f00 	cmp.w	r9, #0
 8008122:	d127      	bne.n	8008174 <__ieee754_pow+0x1d4>
 8008124:	4a3d      	ldr	r2, [pc, #244]	@ (800821c <__ieee754_pow+0x27c>)
 8008126:	f025 4c40 	bic.w	ip, r5, #3221225472	@ 0xc0000000
 800812a:	4594      	cmp	ip, r2
 800812c:	d000      	beq.n	8008130 <__ieee754_pow+0x190>
 800812e:	bb0e      	cbnz	r6, 8008174 <__ieee754_pow+0x1d4>
 8008130:	f1b8 0f00 	cmp.w	r8, #0
 8008134:	da05      	bge.n	8008142 <__ieee754_pow+0x1a2>
 8008136:	4602      	mov	r2, r0
 8008138:	460b      	mov	r3, r1
 800813a:	2000      	movs	r0, #0
 800813c:	4937      	ldr	r1, [pc, #220]	@ (800821c <__ieee754_pow+0x27c>)
 800813e:	f7f8 faf5 	bl	800072c <__aeabi_ddiv>
 8008142:	2d00      	cmp	r5, #0
 8008144:	f6bf af4a 	bge.w	8007fdc <__ieee754_pow+0x3c>
 8008148:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800814c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8008150:	4326      	orrs	r6, r4
 8008152:	d108      	bne.n	8008166 <__ieee754_pow+0x1c6>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4610      	mov	r0, r2
 800815a:	4619      	mov	r1, r3
 800815c:	f7f8 f804 	bl	8000168 <__aeabi_dsub>
 8008160:	4602      	mov	r2, r0
 8008162:	460b      	mov	r3, r1
 8008164:	e795      	b.n	8008092 <__ieee754_pow+0xf2>
 8008166:	2c01      	cmp	r4, #1
 8008168:	f47f af38 	bne.w	8007fdc <__ieee754_pow+0x3c>
 800816c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008170:	4619      	mov	r1, r3
 8008172:	e733      	b.n	8007fdc <__ieee754_pow+0x3c>
 8008174:	0fea      	lsrs	r2, r5, #31
 8008176:	3a01      	subs	r2, #1
 8008178:	ea52 0c04 	orrs.w	ip, r2, r4
 800817c:	d102      	bne.n	8008184 <__ieee754_pow+0x1e4>
 800817e:	4652      	mov	r2, sl
 8008180:	465b      	mov	r3, fp
 8008182:	e7e9      	b.n	8008158 <__ieee754_pow+0x1b8>
 8008184:	f04f 0900 	mov.w	r9, #0
 8008188:	3c01      	subs	r4, #1
 800818a:	4314      	orrs	r4, r2
 800818c:	bf14      	ite	ne
 800818e:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 800821c <__ieee754_pow+0x27c>
 8008192:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8008228 <__ieee754_pow+0x288>
 8008196:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 800819a:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 800819e:	f240 8107 	bls.w	80083b0 <__ieee754_pow+0x410>
 80081a2:	4b22      	ldr	r3, [pc, #136]	@ (800822c <__ieee754_pow+0x28c>)
 80081a4:	429f      	cmp	r7, r3
 80081a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008220 <__ieee754_pow+0x280>)
 80081a8:	d913      	bls.n	80081d2 <__ieee754_pow+0x232>
 80081aa:	429e      	cmp	r6, r3
 80081ac:	d808      	bhi.n	80081c0 <__ieee754_pow+0x220>
 80081ae:	f1b8 0f00 	cmp.w	r8, #0
 80081b2:	da08      	bge.n	80081c6 <__ieee754_pow+0x226>
 80081b4:	2000      	movs	r0, #0
 80081b6:	b011      	add	sp, #68	@ 0x44
 80081b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081bc:	f000 be4c 	b.w	8008e58 <__math_oflow>
 80081c0:	f1b8 0f00 	cmp.w	r8, #0
 80081c4:	dcf6      	bgt.n	80081b4 <__ieee754_pow+0x214>
 80081c6:	2000      	movs	r0, #0
 80081c8:	b011      	add	sp, #68	@ 0x44
 80081ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ce:	f000 be3e 	b.w	8008e4e <__math_uflow>
 80081d2:	429e      	cmp	r6, r3
 80081d4:	d20c      	bcs.n	80081f0 <__ieee754_pow+0x250>
 80081d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081da:	2200      	movs	r2, #0
 80081dc:	2300      	movs	r3, #0
 80081de:	f7f8 fbed 	bl	80009bc <__aeabi_dcmplt>
 80081e2:	3800      	subs	r0, #0
 80081e4:	bf18      	it	ne
 80081e6:	2001      	movne	r0, #1
 80081e8:	f1b8 0f00 	cmp.w	r8, #0
 80081ec:	daec      	bge.n	80081c8 <__ieee754_pow+0x228>
 80081ee:	e7e2      	b.n	80081b6 <__ieee754_pow+0x216>
 80081f0:	4b0a      	ldr	r3, [pc, #40]	@ (800821c <__ieee754_pow+0x27c>)
 80081f2:	2200      	movs	r2, #0
 80081f4:	429e      	cmp	r6, r3
 80081f6:	d91b      	bls.n	8008230 <__ieee754_pow+0x290>
 80081f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081fc:	2300      	movs	r3, #0
 80081fe:	f7f8 fbdd 	bl	80009bc <__aeabi_dcmplt>
 8008202:	3800      	subs	r0, #0
 8008204:	bf18      	it	ne
 8008206:	2001      	movne	r0, #1
 8008208:	f1b8 0f00 	cmp.w	r8, #0
 800820c:	dcd3      	bgt.n	80081b6 <__ieee754_pow+0x216>
 800820e:	e7db      	b.n	80081c8 <__ieee754_pow+0x228>
 8008210:	fff00000 	.word	0xfff00000
 8008214:	7ff00000 	.word	0x7ff00000
 8008218:	433fffff 	.word	0x433fffff
 800821c:	3ff00000 	.word	0x3ff00000
 8008220:	3fefffff 	.word	0x3fefffff
 8008224:	3fe00000 	.word	0x3fe00000
 8008228:	bff00000 	.word	0xbff00000
 800822c:	43f00000 	.word	0x43f00000
 8008230:	4b5b      	ldr	r3, [pc, #364]	@ (80083a0 <__ieee754_pow+0x400>)
 8008232:	f7f7 ff99 	bl	8000168 <__aeabi_dsub>
 8008236:	a352      	add	r3, pc, #328	@ (adr r3, 8008380 <__ieee754_pow+0x3e0>)
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	4604      	mov	r4, r0
 800823e:	460d      	mov	r5, r1
 8008240:	f7f8 f94a 	bl	80004d8 <__aeabi_dmul>
 8008244:	a350      	add	r3, pc, #320	@ (adr r3, 8008388 <__ieee754_pow+0x3e8>)
 8008246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800824a:	4606      	mov	r6, r0
 800824c:	460f      	mov	r7, r1
 800824e:	4620      	mov	r0, r4
 8008250:	4629      	mov	r1, r5
 8008252:	f7f8 f941 	bl	80004d8 <__aeabi_dmul>
 8008256:	2200      	movs	r2, #0
 8008258:	4682      	mov	sl, r0
 800825a:	468b      	mov	fp, r1
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	4b50      	ldr	r3, [pc, #320]	@ (80083a4 <__ieee754_pow+0x404>)
 8008262:	f7f8 f939 	bl	80004d8 <__aeabi_dmul>
 8008266:	4602      	mov	r2, r0
 8008268:	460b      	mov	r3, r1
 800826a:	a149      	add	r1, pc, #292	@ (adr r1, 8008390 <__ieee754_pow+0x3f0>)
 800826c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008270:	f7f7 ff7a 	bl	8000168 <__aeabi_dsub>
 8008274:	4622      	mov	r2, r4
 8008276:	462b      	mov	r3, r5
 8008278:	f7f8 f92e 	bl	80004d8 <__aeabi_dmul>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	2000      	movs	r0, #0
 8008282:	4949      	ldr	r1, [pc, #292]	@ (80083a8 <__ieee754_pow+0x408>)
 8008284:	f7f7 ff70 	bl	8000168 <__aeabi_dsub>
 8008288:	4622      	mov	r2, r4
 800828a:	4680      	mov	r8, r0
 800828c:	4689      	mov	r9, r1
 800828e:	462b      	mov	r3, r5
 8008290:	4620      	mov	r0, r4
 8008292:	4629      	mov	r1, r5
 8008294:	f7f8 f920 	bl	80004d8 <__aeabi_dmul>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 f91a 	bl	80004d8 <__aeabi_dmul>
 80082a4:	a33c      	add	r3, pc, #240	@ (adr r3, 8008398 <__ieee754_pow+0x3f8>)
 80082a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082aa:	f7f8 f915 	bl	80004d8 <__aeabi_dmul>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	4650      	mov	r0, sl
 80082b4:	4659      	mov	r1, fp
 80082b6:	f7f7 ff57 	bl	8000168 <__aeabi_dsub>
 80082ba:	2400      	movs	r4, #0
 80082bc:	4602      	mov	r2, r0
 80082be:	460b      	mov	r3, r1
 80082c0:	4680      	mov	r8, r0
 80082c2:	4689      	mov	r9, r1
 80082c4:	4630      	mov	r0, r6
 80082c6:	4639      	mov	r1, r7
 80082c8:	f7f7 ff50 	bl	800016c <__adddf3>
 80082cc:	4632      	mov	r2, r6
 80082ce:	463b      	mov	r3, r7
 80082d0:	4620      	mov	r0, r4
 80082d2:	460d      	mov	r5, r1
 80082d4:	f7f7 ff48 	bl	8000168 <__aeabi_dsub>
 80082d8:	4602      	mov	r2, r0
 80082da:	460b      	mov	r3, r1
 80082dc:	4640      	mov	r0, r8
 80082de:	4649      	mov	r1, r9
 80082e0:	f7f7 ff42 	bl	8000168 <__aeabi_dsub>
 80082e4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082ec:	2300      	movs	r3, #0
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80082f4:	4606      	mov	r6, r0
 80082f6:	460f      	mov	r7, r1
 80082f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082fc:	4652      	mov	r2, sl
 80082fe:	465b      	mov	r3, fp
 8008300:	f7f7 ff32 	bl	8000168 <__aeabi_dsub>
 8008304:	4622      	mov	r2, r4
 8008306:	462b      	mov	r3, r5
 8008308:	f7f8 f8e6 	bl	80004d8 <__aeabi_dmul>
 800830c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008310:	4680      	mov	r8, r0
 8008312:	4689      	mov	r9, r1
 8008314:	4630      	mov	r0, r6
 8008316:	4639      	mov	r1, r7
 8008318:	f7f8 f8de 	bl	80004d8 <__aeabi_dmul>
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4640      	mov	r0, r8
 8008322:	4649      	mov	r1, r9
 8008324:	f7f7 ff22 	bl	800016c <__adddf3>
 8008328:	4652      	mov	r2, sl
 800832a:	465b      	mov	r3, fp
 800832c:	4606      	mov	r6, r0
 800832e:	460f      	mov	r7, r1
 8008330:	4620      	mov	r0, r4
 8008332:	4629      	mov	r1, r5
 8008334:	f7f8 f8d0 	bl	80004d8 <__aeabi_dmul>
 8008338:	460b      	mov	r3, r1
 800833a:	4602      	mov	r2, r0
 800833c:	4680      	mov	r8, r0
 800833e:	4689      	mov	r9, r1
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f7 ff12 	bl	800016c <__adddf3>
 8008348:	4b18      	ldr	r3, [pc, #96]	@ (80083ac <__ieee754_pow+0x40c>)
 800834a:	4604      	mov	r4, r0
 800834c:	4299      	cmp	r1, r3
 800834e:	460d      	mov	r5, r1
 8008350:	468a      	mov	sl, r1
 8008352:	468b      	mov	fp, r1
 8008354:	f340 82e0 	ble.w	8008918 <__ieee754_pow+0x978>
 8008358:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800835c:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008360:	4303      	orrs	r3, r0
 8008362:	f000 81df 	beq.w	8008724 <__ieee754_pow+0x784>
 8008366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800836a:	2200      	movs	r2, #0
 800836c:	2300      	movs	r3, #0
 800836e:	f7f8 fb25 	bl	80009bc <__aeabi_dcmplt>
 8008372:	3800      	subs	r0, #0
 8008374:	bf18      	it	ne
 8008376:	2001      	movne	r0, #1
 8008378:	e71d      	b.n	80081b6 <__ieee754_pow+0x216>
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	60000000 	.word	0x60000000
 8008384:	3ff71547 	.word	0x3ff71547
 8008388:	f85ddf44 	.word	0xf85ddf44
 800838c:	3e54ae0b 	.word	0x3e54ae0b
 8008390:	55555555 	.word	0x55555555
 8008394:	3fd55555 	.word	0x3fd55555
 8008398:	652b82fe 	.word	0x652b82fe
 800839c:	3ff71547 	.word	0x3ff71547
 80083a0:	3ff00000 	.word	0x3ff00000
 80083a4:	3fd00000 	.word	0x3fd00000
 80083a8:	3fe00000 	.word	0x3fe00000
 80083ac:	408fffff 	.word	0x408fffff
 80083b0:	4ad3      	ldr	r2, [pc, #844]	@ (8008700 <__ieee754_pow+0x760>)
 80083b2:	402a      	ands	r2, r5
 80083b4:	2a00      	cmp	r2, #0
 80083b6:	f040 817a 	bne.w	80086ae <__ieee754_pow+0x70e>
 80083ba:	4bd2      	ldr	r3, [pc, #840]	@ (8008704 <__ieee754_pow+0x764>)
 80083bc:	2200      	movs	r2, #0
 80083be:	f7f8 f88b 	bl	80004d8 <__aeabi_dmul>
 80083c2:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 80083c6:	460b      	mov	r3, r1
 80083c8:	151a      	asrs	r2, r3, #20
 80083ca:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80083ce:	4422      	add	r2, r4
 80083d0:	920a      	str	r2, [sp, #40]	@ 0x28
 80083d2:	4acd      	ldr	r2, [pc, #820]	@ (8008708 <__ieee754_pow+0x768>)
 80083d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083d8:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 80083dc:	4293      	cmp	r3, r2
 80083de:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80083e2:	dd08      	ble.n	80083f6 <__ieee754_pow+0x456>
 80083e4:	4ac9      	ldr	r2, [pc, #804]	@ (800870c <__ieee754_pow+0x76c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	f340 8163 	ble.w	80086b2 <__ieee754_pow+0x712>
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80083f2:	3301      	adds	r3, #1
 80083f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f6:	2600      	movs	r6, #0
 80083f8:	00f3      	lsls	r3, r6, #3
 80083fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083fc:	4bc4      	ldr	r3, [pc, #784]	@ (8008710 <__ieee754_pow+0x770>)
 80083fe:	4629      	mov	r1, r5
 8008400:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008404:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008408:	461a      	mov	r2, r3
 800840a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800840e:	4623      	mov	r3, r4
 8008410:	4682      	mov	sl, r0
 8008412:	f7f7 fea9 	bl	8000168 <__aeabi_dsub>
 8008416:	4652      	mov	r2, sl
 8008418:	462b      	mov	r3, r5
 800841a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800841e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008422:	f7f7 fea3 	bl	800016c <__adddf3>
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	2000      	movs	r0, #0
 800842c:	49b9      	ldr	r1, [pc, #740]	@ (8008714 <__ieee754_pow+0x774>)
 800842e:	f7f8 f97d 	bl	800072c <__aeabi_ddiv>
 8008432:	4602      	mov	r2, r0
 8008434:	460b      	mov	r3, r1
 8008436:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800843a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800843e:	f7f8 f84b 	bl	80004d8 <__aeabi_dmul>
 8008442:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008446:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800844a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800844e:	2300      	movs	r3, #0
 8008450:	2200      	movs	r2, #0
 8008452:	46ab      	mov	fp, r5
 8008454:	106d      	asrs	r5, r5, #1
 8008456:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800845a:	9304      	str	r3, [sp, #16]
 800845c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008460:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008464:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8008468:	4640      	mov	r0, r8
 800846a:	4649      	mov	r1, r9
 800846c:	4614      	mov	r4, r2
 800846e:	461d      	mov	r5, r3
 8008470:	f7f8 f832 	bl	80004d8 <__aeabi_dmul>
 8008474:	4602      	mov	r2, r0
 8008476:	460b      	mov	r3, r1
 8008478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800847c:	f7f7 fe74 	bl	8000168 <__aeabi_dsub>
 8008480:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008484:	4606      	mov	r6, r0
 8008486:	460f      	mov	r7, r1
 8008488:	4620      	mov	r0, r4
 800848a:	4629      	mov	r1, r5
 800848c:	f7f7 fe6c 	bl	8000168 <__aeabi_dsub>
 8008490:	4602      	mov	r2, r0
 8008492:	460b      	mov	r3, r1
 8008494:	4650      	mov	r0, sl
 8008496:	4659      	mov	r1, fp
 8008498:	f7f7 fe66 	bl	8000168 <__aeabi_dsub>
 800849c:	4642      	mov	r2, r8
 800849e:	464b      	mov	r3, r9
 80084a0:	f7f8 f81a 	bl	80004d8 <__aeabi_dmul>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4630      	mov	r0, r6
 80084aa:	4639      	mov	r1, r7
 80084ac:	f7f7 fe5c 	bl	8000168 <__aeabi_dsub>
 80084b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80084b4:	f7f8 f810 	bl	80004d8 <__aeabi_dmul>
 80084b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084bc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80084c0:	4610      	mov	r0, r2
 80084c2:	4619      	mov	r1, r3
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	a37b      	add	r3, pc, #492	@ (adr r3, 80086b8 <__ieee754_pow+0x718>)
 80084ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ce:	4604      	mov	r4, r0
 80084d0:	460d      	mov	r5, r1
 80084d2:	f7f8 f801 	bl	80004d8 <__aeabi_dmul>
 80084d6:	a37a      	add	r3, pc, #488	@ (adr r3, 80086c0 <__ieee754_pow+0x720>)
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f7 fe46 	bl	800016c <__adddf3>
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	f7f7 fff8 	bl	80004d8 <__aeabi_dmul>
 80084e8:	a377      	add	r3, pc, #476	@ (adr r3, 80086c8 <__ieee754_pow+0x728>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f7 fe3d 	bl	800016c <__adddf3>
 80084f2:	4622      	mov	r2, r4
 80084f4:	462b      	mov	r3, r5
 80084f6:	f7f7 ffef 	bl	80004d8 <__aeabi_dmul>
 80084fa:	a375      	add	r3, pc, #468	@ (adr r3, 80086d0 <__ieee754_pow+0x730>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	f7f7 fe34 	bl	800016c <__adddf3>
 8008504:	4622      	mov	r2, r4
 8008506:	462b      	mov	r3, r5
 8008508:	f7f7 ffe6 	bl	80004d8 <__aeabi_dmul>
 800850c:	a372      	add	r3, pc, #456	@ (adr r3, 80086d8 <__ieee754_pow+0x738>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	f7f7 fe2b 	bl	800016c <__adddf3>
 8008516:	4622      	mov	r2, r4
 8008518:	462b      	mov	r3, r5
 800851a:	f7f7 ffdd 	bl	80004d8 <__aeabi_dmul>
 800851e:	a370      	add	r3, pc, #448	@ (adr r3, 80086e0 <__ieee754_pow+0x740>)
 8008520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008524:	f7f7 fe22 	bl	800016c <__adddf3>
 8008528:	4622      	mov	r2, r4
 800852a:	4606      	mov	r6, r0
 800852c:	460f      	mov	r7, r1
 800852e:	462b      	mov	r3, r5
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f7 ffd0 	bl	80004d8 <__aeabi_dmul>
 8008538:	4602      	mov	r2, r0
 800853a:	460b      	mov	r3, r1
 800853c:	4630      	mov	r0, r6
 800853e:	4639      	mov	r1, r7
 8008540:	f7f7 ffca 	bl	80004d8 <__aeabi_dmul>
 8008544:	4604      	mov	r4, r0
 8008546:	460d      	mov	r5, r1
 8008548:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	f7f7 fe0c 	bl	800016c <__adddf3>
 8008554:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008558:	f7f7 ffbe 	bl	80004d8 <__aeabi_dmul>
 800855c:	4622      	mov	r2, r4
 800855e:	462b      	mov	r3, r5
 8008560:	f7f7 fe04 	bl	800016c <__adddf3>
 8008564:	4642      	mov	r2, r8
 8008566:	4682      	mov	sl, r0
 8008568:	468b      	mov	fp, r1
 800856a:	464b      	mov	r3, r9
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f7 ffb2 	bl	80004d8 <__aeabi_dmul>
 8008574:	2200      	movs	r2, #0
 8008576:	4b68      	ldr	r3, [pc, #416]	@ (8008718 <__ieee754_pow+0x778>)
 8008578:	4606      	mov	r6, r0
 800857a:	460f      	mov	r7, r1
 800857c:	f7f7 fdf6 	bl	800016c <__adddf3>
 8008580:	4652      	mov	r2, sl
 8008582:	465b      	mov	r3, fp
 8008584:	f7f7 fdf2 	bl	800016c <__adddf3>
 8008588:	2400      	movs	r4, #0
 800858a:	460d      	mov	r5, r1
 800858c:	4622      	mov	r2, r4
 800858e:	460b      	mov	r3, r1
 8008590:	4640      	mov	r0, r8
 8008592:	4649      	mov	r1, r9
 8008594:	f7f7 ffa0 	bl	80004d8 <__aeabi_dmul>
 8008598:	2200      	movs	r2, #0
 800859a:	4680      	mov	r8, r0
 800859c:	4689      	mov	r9, r1
 800859e:	4620      	mov	r0, r4
 80085a0:	4629      	mov	r1, r5
 80085a2:	4b5d      	ldr	r3, [pc, #372]	@ (8008718 <__ieee754_pow+0x778>)
 80085a4:	f7f7 fde0 	bl	8000168 <__aeabi_dsub>
 80085a8:	4632      	mov	r2, r6
 80085aa:	463b      	mov	r3, r7
 80085ac:	f7f7 fddc 	bl	8000168 <__aeabi_dsub>
 80085b0:	4602      	mov	r2, r0
 80085b2:	460b      	mov	r3, r1
 80085b4:	4650      	mov	r0, sl
 80085b6:	4659      	mov	r1, fp
 80085b8:	f7f7 fdd6 	bl	8000168 <__aeabi_dsub>
 80085bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085c0:	f7f7 ff8a 	bl	80004d8 <__aeabi_dmul>
 80085c4:	4622      	mov	r2, r4
 80085c6:	4606      	mov	r6, r0
 80085c8:	460f      	mov	r7, r1
 80085ca:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085ce:	462b      	mov	r3, r5
 80085d0:	f7f7 ff82 	bl	80004d8 <__aeabi_dmul>
 80085d4:	4602      	mov	r2, r0
 80085d6:	460b      	mov	r3, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f7 fdc6 	bl	800016c <__adddf3>
 80085e0:	2400      	movs	r4, #0
 80085e2:	4606      	mov	r6, r0
 80085e4:	460f      	mov	r7, r1
 80085e6:	4602      	mov	r2, r0
 80085e8:	460b      	mov	r3, r1
 80085ea:	4640      	mov	r0, r8
 80085ec:	4649      	mov	r1, r9
 80085ee:	f7f7 fdbd 	bl	800016c <__adddf3>
 80085f2:	a33d      	add	r3, pc, #244	@ (adr r3, 80086e8 <__ieee754_pow+0x748>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	4620      	mov	r0, r4
 80085fa:	460d      	mov	r5, r1
 80085fc:	f7f7 ff6c 	bl	80004d8 <__aeabi_dmul>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008608:	4620      	mov	r0, r4
 800860a:	4629      	mov	r1, r5
 800860c:	f7f7 fdac 	bl	8000168 <__aeabi_dsub>
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	4630      	mov	r0, r6
 8008616:	4639      	mov	r1, r7
 8008618:	f7f7 fda6 	bl	8000168 <__aeabi_dsub>
 800861c:	a334      	add	r3, pc, #208	@ (adr r3, 80086f0 <__ieee754_pow+0x750>)
 800861e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008622:	f7f7 ff59 	bl	80004d8 <__aeabi_dmul>
 8008626:	a334      	add	r3, pc, #208	@ (adr r3, 80086f8 <__ieee754_pow+0x758>)
 8008628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800862c:	4606      	mov	r6, r0
 800862e:	460f      	mov	r7, r1
 8008630:	4620      	mov	r0, r4
 8008632:	4629      	mov	r1, r5
 8008634:	f7f7 ff50 	bl	80004d8 <__aeabi_dmul>
 8008638:	4602      	mov	r2, r0
 800863a:	460b      	mov	r3, r1
 800863c:	4630      	mov	r0, r6
 800863e:	4639      	mov	r1, r7
 8008640:	f7f7 fd94 	bl	800016c <__adddf3>
 8008644:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008646:	4b35      	ldr	r3, [pc, #212]	@ (800871c <__ieee754_pow+0x77c>)
 8008648:	2400      	movs	r4, #0
 800864a:	4413      	add	r3, r2
 800864c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008650:	f7f7 fd8c 	bl	800016c <__adddf3>
 8008654:	4682      	mov	sl, r0
 8008656:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008658:	468b      	mov	fp, r1
 800865a:	f7f7 fed3 	bl	8000404 <__aeabi_i2d>
 800865e:	4606      	mov	r6, r0
 8008660:	460f      	mov	r7, r1
 8008662:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008664:	4b2e      	ldr	r3, [pc, #184]	@ (8008720 <__ieee754_pow+0x780>)
 8008666:	4413      	add	r3, r2
 8008668:	e9d3 8900 	ldrd	r8, r9, [r3]
 800866c:	4652      	mov	r2, sl
 800866e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008672:	465b      	mov	r3, fp
 8008674:	f7f7 fd7a 	bl	800016c <__adddf3>
 8008678:	4642      	mov	r2, r8
 800867a:	464b      	mov	r3, r9
 800867c:	f7f7 fd76 	bl	800016c <__adddf3>
 8008680:	4632      	mov	r2, r6
 8008682:	463b      	mov	r3, r7
 8008684:	f7f7 fd72 	bl	800016c <__adddf3>
 8008688:	4632      	mov	r2, r6
 800868a:	463b      	mov	r3, r7
 800868c:	4620      	mov	r0, r4
 800868e:	460d      	mov	r5, r1
 8008690:	f7f7 fd6a 	bl	8000168 <__aeabi_dsub>
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	f7f7 fd66 	bl	8000168 <__aeabi_dsub>
 800869c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086a0:	f7f7 fd62 	bl	8000168 <__aeabi_dsub>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4650      	mov	r0, sl
 80086aa:	4659      	mov	r1, fp
 80086ac:	e618      	b.n	80082e0 <__ieee754_pow+0x340>
 80086ae:	2400      	movs	r4, #0
 80086b0:	e68a      	b.n	80083c8 <__ieee754_pow+0x428>
 80086b2:	2601      	movs	r6, #1
 80086b4:	e6a0      	b.n	80083f8 <__ieee754_pow+0x458>
 80086b6:	bf00      	nop
 80086b8:	4a454eef 	.word	0x4a454eef
 80086bc:	3fca7e28 	.word	0x3fca7e28
 80086c0:	93c9db65 	.word	0x93c9db65
 80086c4:	3fcd864a 	.word	0x3fcd864a
 80086c8:	a91d4101 	.word	0xa91d4101
 80086cc:	3fd17460 	.word	0x3fd17460
 80086d0:	518f264d 	.word	0x518f264d
 80086d4:	3fd55555 	.word	0x3fd55555
 80086d8:	db6fabff 	.word	0xdb6fabff
 80086dc:	3fdb6db6 	.word	0x3fdb6db6
 80086e0:	33333303 	.word	0x33333303
 80086e4:	3fe33333 	.word	0x3fe33333
 80086e8:	e0000000 	.word	0xe0000000
 80086ec:	3feec709 	.word	0x3feec709
 80086f0:	dc3a03fd 	.word	0xdc3a03fd
 80086f4:	3feec709 	.word	0x3feec709
 80086f8:	145b01f5 	.word	0x145b01f5
 80086fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008700:	7ff00000 	.word	0x7ff00000
 8008704:	43400000 	.word	0x43400000
 8008708:	0003988e 	.word	0x0003988e
 800870c:	000bb679 	.word	0x000bb679
 8008710:	0800bcd8 	.word	0x0800bcd8
 8008714:	3ff00000 	.word	0x3ff00000
 8008718:	40080000 	.word	0x40080000
 800871c:	0800bcb8 	.word	0x0800bcb8
 8008720:	0800bcc8 	.word	0x0800bcc8
 8008724:	a39a      	add	r3, pc, #616	@ (adr r3, 8008990 <__ieee754_pow+0x9f0>)
 8008726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800872a:	4630      	mov	r0, r6
 800872c:	4639      	mov	r1, r7
 800872e:	f7f7 fd1d 	bl	800016c <__adddf3>
 8008732:	4642      	mov	r2, r8
 8008734:	e9cd 0100 	strd	r0, r1, [sp]
 8008738:	464b      	mov	r3, r9
 800873a:	4620      	mov	r0, r4
 800873c:	4629      	mov	r1, r5
 800873e:	f7f7 fd13 	bl	8000168 <__aeabi_dsub>
 8008742:	4602      	mov	r2, r0
 8008744:	460b      	mov	r3, r1
 8008746:	e9dd 0100 	ldrd	r0, r1, [sp]
 800874a:	f7f8 f955 	bl	80009f8 <__aeabi_dcmpgt>
 800874e:	2800      	cmp	r0, #0
 8008750:	f47f ae09 	bne.w	8008366 <__ieee754_pow+0x3c6>
 8008754:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008758:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800875c:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008760:	fa43 fa0a 	asr.w	sl, r3, sl
 8008764:	44da      	add	sl, fp
 8008766:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800876a:	489b      	ldr	r0, [pc, #620]	@ (80089d8 <__ieee754_pow+0xa38>)
 800876c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008770:	4108      	asrs	r0, r1
 8008772:	ea00 030a 	and.w	r3, r0, sl
 8008776:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800877a:	f1c1 0114 	rsb	r1, r1, #20
 800877e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008782:	4640      	mov	r0, r8
 8008784:	fa4a fa01 	asr.w	sl, sl, r1
 8008788:	f1bb 0f00 	cmp.w	fp, #0
 800878c:	4649      	mov	r1, r9
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	bfb8      	it	lt
 8008794:	f1ca 0a00 	rsblt	sl, sl, #0
 8008798:	f7f7 fce6 	bl	8000168 <__aeabi_dsub>
 800879c:	4680      	mov	r8, r0
 800879e:	4689      	mov	r9, r1
 80087a0:	2400      	movs	r4, #0
 80087a2:	4632      	mov	r2, r6
 80087a4:	463b      	mov	r3, r7
 80087a6:	4640      	mov	r0, r8
 80087a8:	4649      	mov	r1, r9
 80087aa:	f7f7 fcdf 	bl	800016c <__adddf3>
 80087ae:	a37a      	add	r3, pc, #488	@ (adr r3, 8008998 <__ieee754_pow+0x9f8>)
 80087b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b4:	4620      	mov	r0, r4
 80087b6:	460d      	mov	r5, r1
 80087b8:	f7f7 fe8e 	bl	80004d8 <__aeabi_dmul>
 80087bc:	4642      	mov	r2, r8
 80087be:	464b      	mov	r3, r9
 80087c0:	e9cd 0100 	strd	r0, r1, [sp]
 80087c4:	4620      	mov	r0, r4
 80087c6:	4629      	mov	r1, r5
 80087c8:	f7f7 fcce 	bl	8000168 <__aeabi_dsub>
 80087cc:	4602      	mov	r2, r0
 80087ce:	460b      	mov	r3, r1
 80087d0:	4630      	mov	r0, r6
 80087d2:	4639      	mov	r1, r7
 80087d4:	f7f7 fcc8 	bl	8000168 <__aeabi_dsub>
 80087d8:	a371      	add	r3, pc, #452	@ (adr r3, 80089a0 <__ieee754_pow+0xa00>)
 80087da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087de:	f7f7 fe7b 	bl	80004d8 <__aeabi_dmul>
 80087e2:	a371      	add	r3, pc, #452	@ (adr r3, 80089a8 <__ieee754_pow+0xa08>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	4680      	mov	r8, r0
 80087ea:	4689      	mov	r9, r1
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	f7f7 fe72 	bl	80004d8 <__aeabi_dmul>
 80087f4:	4602      	mov	r2, r0
 80087f6:	460b      	mov	r3, r1
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f7 fcb6 	bl	800016c <__adddf3>
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	e9dd 0100 	ldrd	r0, r1, [sp]
 800880c:	f7f7 fcae 	bl	800016c <__adddf3>
 8008810:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008814:	4680      	mov	r8, r0
 8008816:	4689      	mov	r9, r1
 8008818:	f7f7 fca6 	bl	8000168 <__aeabi_dsub>
 800881c:	4602      	mov	r2, r0
 800881e:	460b      	mov	r3, r1
 8008820:	4620      	mov	r0, r4
 8008822:	4629      	mov	r1, r5
 8008824:	f7f7 fca0 	bl	8000168 <__aeabi_dsub>
 8008828:	4642      	mov	r2, r8
 800882a:	4606      	mov	r6, r0
 800882c:	460f      	mov	r7, r1
 800882e:	464b      	mov	r3, r9
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f7 fe50 	bl	80004d8 <__aeabi_dmul>
 8008838:	a35d      	add	r3, pc, #372	@ (adr r3, 80089b0 <__ieee754_pow+0xa10>)
 800883a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800883e:	4604      	mov	r4, r0
 8008840:	460d      	mov	r5, r1
 8008842:	f7f7 fe49 	bl	80004d8 <__aeabi_dmul>
 8008846:	a35c      	add	r3, pc, #368	@ (adr r3, 80089b8 <__ieee754_pow+0xa18>)
 8008848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800884c:	f7f7 fc8c 	bl	8000168 <__aeabi_dsub>
 8008850:	4622      	mov	r2, r4
 8008852:	462b      	mov	r3, r5
 8008854:	f7f7 fe40 	bl	80004d8 <__aeabi_dmul>
 8008858:	a359      	add	r3, pc, #356	@ (adr r3, 80089c0 <__ieee754_pow+0xa20>)
 800885a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800885e:	f7f7 fc85 	bl	800016c <__adddf3>
 8008862:	4622      	mov	r2, r4
 8008864:	462b      	mov	r3, r5
 8008866:	f7f7 fe37 	bl	80004d8 <__aeabi_dmul>
 800886a:	a357      	add	r3, pc, #348	@ (adr r3, 80089c8 <__ieee754_pow+0xa28>)
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	f7f7 fc7a 	bl	8000168 <__aeabi_dsub>
 8008874:	4622      	mov	r2, r4
 8008876:	462b      	mov	r3, r5
 8008878:	f7f7 fe2e 	bl	80004d8 <__aeabi_dmul>
 800887c:	a354      	add	r3, pc, #336	@ (adr r3, 80089d0 <__ieee754_pow+0xa30>)
 800887e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008882:	f7f7 fc73 	bl	800016c <__adddf3>
 8008886:	4622      	mov	r2, r4
 8008888:	462b      	mov	r3, r5
 800888a:	f7f7 fe25 	bl	80004d8 <__aeabi_dmul>
 800888e:	4602      	mov	r2, r0
 8008890:	460b      	mov	r3, r1
 8008892:	4640      	mov	r0, r8
 8008894:	4649      	mov	r1, r9
 8008896:	f7f7 fc67 	bl	8000168 <__aeabi_dsub>
 800889a:	4604      	mov	r4, r0
 800889c:	460d      	mov	r5, r1
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fe17 	bl	80004d8 <__aeabi_dmul>
 80088aa:	2200      	movs	r2, #0
 80088ac:	e9cd 0100 	strd	r0, r1, [sp]
 80088b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80088b4:	4620      	mov	r0, r4
 80088b6:	4629      	mov	r1, r5
 80088b8:	f7f7 fc56 	bl	8000168 <__aeabi_dsub>
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088c4:	f7f7 ff32 	bl	800072c <__aeabi_ddiv>
 80088c8:	4632      	mov	r2, r6
 80088ca:	4604      	mov	r4, r0
 80088cc:	460d      	mov	r5, r1
 80088ce:	463b      	mov	r3, r7
 80088d0:	4640      	mov	r0, r8
 80088d2:	4649      	mov	r1, r9
 80088d4:	f7f7 fe00 	bl	80004d8 <__aeabi_dmul>
 80088d8:	4632      	mov	r2, r6
 80088da:	463b      	mov	r3, r7
 80088dc:	f7f7 fc46 	bl	800016c <__adddf3>
 80088e0:	4602      	mov	r2, r0
 80088e2:	460b      	mov	r3, r1
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f7 fc3e 	bl	8000168 <__aeabi_dsub>
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	f7f7 fc3a 	bl	8000168 <__aeabi_dsub>
 80088f4:	4602      	mov	r2, r0
 80088f6:	460b      	mov	r3, r1
 80088f8:	2000      	movs	r0, #0
 80088fa:	4938      	ldr	r1, [pc, #224]	@ (80089dc <__ieee754_pow+0xa3c>)
 80088fc:	f7f7 fc34 	bl	8000168 <__aeabi_dsub>
 8008900:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008904:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8008908:	da2e      	bge.n	8008968 <__ieee754_pow+0x9c8>
 800890a:	4652      	mov	r2, sl
 800890c:	f000 fa0c 	bl	8008d28 <scalbn>
 8008910:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008914:	f7ff bbed 	b.w	80080f2 <__ieee754_pow+0x152>
 8008918:	4c31      	ldr	r4, [pc, #196]	@ (80089e0 <__ieee754_pow+0xa40>)
 800891a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800891e:	42a3      	cmp	r3, r4
 8008920:	d91a      	bls.n	8008958 <__ieee754_pow+0x9b8>
 8008922:	4b30      	ldr	r3, [pc, #192]	@ (80089e4 <__ieee754_pow+0xa44>)
 8008924:	440b      	add	r3, r1
 8008926:	4303      	orrs	r3, r0
 8008928:	d009      	beq.n	800893e <__ieee754_pow+0x99e>
 800892a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	f7f8 f843 	bl	80009bc <__aeabi_dcmplt>
 8008936:	3800      	subs	r0, #0
 8008938:	bf18      	it	ne
 800893a:	2001      	movne	r0, #1
 800893c:	e444      	b.n	80081c8 <__ieee754_pow+0x228>
 800893e:	4642      	mov	r2, r8
 8008940:	464b      	mov	r3, r9
 8008942:	f7f7 fc11 	bl	8000168 <__aeabi_dsub>
 8008946:	4632      	mov	r2, r6
 8008948:	463b      	mov	r3, r7
 800894a:	f7f8 f84b 	bl	80009e4 <__aeabi_dcmpge>
 800894e:	2800      	cmp	r0, #0
 8008950:	d1eb      	bne.n	800892a <__ieee754_pow+0x98a>
 8008952:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80089e8 <__ieee754_pow+0xa48>
 8008956:	e6fd      	b.n	8008754 <__ieee754_pow+0x7b4>
 8008958:	469a      	mov	sl, r3
 800895a:	4b24      	ldr	r3, [pc, #144]	@ (80089ec <__ieee754_pow+0xa4c>)
 800895c:	459a      	cmp	sl, r3
 800895e:	f63f aef9 	bhi.w	8008754 <__ieee754_pow+0x7b4>
 8008962:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008966:	e71b      	b.n	80087a0 <__ieee754_pow+0x800>
 8008968:	4621      	mov	r1, r4
 800896a:	e7d1      	b.n	8008910 <__ieee754_pow+0x970>
 800896c:	2000      	movs	r0, #0
 800896e:	491b      	ldr	r1, [pc, #108]	@ (80089dc <__ieee754_pow+0xa3c>)
 8008970:	f7ff bb34 	b.w	8007fdc <__ieee754_pow+0x3c>
 8008974:	2000      	movs	r0, #0
 8008976:	2100      	movs	r1, #0
 8008978:	f7ff bb30 	b.w	8007fdc <__ieee754_pow+0x3c>
 800897c:	4650      	mov	r0, sl
 800897e:	4659      	mov	r1, fp
 8008980:	f7ff bb2c 	b.w	8007fdc <__ieee754_pow+0x3c>
 8008984:	460c      	mov	r4, r1
 8008986:	f7ff bb79 	b.w	800807c <__ieee754_pow+0xdc>
 800898a:	2400      	movs	r4, #0
 800898c:	f7ff bb64 	b.w	8008058 <__ieee754_pow+0xb8>
 8008990:	652b82fe 	.word	0x652b82fe
 8008994:	3c971547 	.word	0x3c971547
 8008998:	00000000 	.word	0x00000000
 800899c:	3fe62e43 	.word	0x3fe62e43
 80089a0:	fefa39ef 	.word	0xfefa39ef
 80089a4:	3fe62e42 	.word	0x3fe62e42
 80089a8:	0ca86c39 	.word	0x0ca86c39
 80089ac:	be205c61 	.word	0xbe205c61
 80089b0:	72bea4d0 	.word	0x72bea4d0
 80089b4:	3e663769 	.word	0x3e663769
 80089b8:	c5d26bf1 	.word	0xc5d26bf1
 80089bc:	3ebbbd41 	.word	0x3ebbbd41
 80089c0:	af25de2c 	.word	0xaf25de2c
 80089c4:	3f11566a 	.word	0x3f11566a
 80089c8:	16bebd93 	.word	0x16bebd93
 80089cc:	3f66c16c 	.word	0x3f66c16c
 80089d0:	5555553e 	.word	0x5555553e
 80089d4:	3fc55555 	.word	0x3fc55555
 80089d8:	fff00000 	.word	0xfff00000
 80089dc:	3ff00000 	.word	0x3ff00000
 80089e0:	4090cbff 	.word	0x4090cbff
 80089e4:	3f6f3400 	.word	0x3f6f3400
 80089e8:	4090cc00 	.word	0x4090cc00
 80089ec:	3fe00000 	.word	0x3fe00000

080089f0 <fabs>:
 80089f0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80089f4:	4619      	mov	r1, r3
 80089f6:	4770      	bx	lr

080089f8 <__ieee754_atan2f>:
 80089f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089fa:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 80089fe:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008a02:	4603      	mov	r3, r0
 8008a04:	d805      	bhi.n	8008a12 <__ieee754_atan2f+0x1a>
 8008a06:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8008a0a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008a0e:	4607      	mov	r7, r0
 8008a10:	d904      	bls.n	8008a1c <__ieee754_atan2f+0x24>
 8008a12:	4618      	mov	r0, r3
 8008a14:	f7f8 f88e 	bl	8000b34 <__addsf3>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	e010      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008a1c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8008a20:	d103      	bne.n	8008a2a <__ieee754_atan2f+0x32>
 8008a22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008a26:	f000 b86f 	b.w	8008b08 <atanf>
 8008a2a:	178c      	asrs	r4, r1, #30
 8008a2c:	f004 0402 	and.w	r4, r4, #2
 8008a30:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8008a34:	b92a      	cbnz	r2, 8008a42 <__ieee754_atan2f+0x4a>
 8008a36:	2c02      	cmp	r4, #2
 8008a38:	d04b      	beq.n	8008ad2 <__ieee754_atan2f+0xda>
 8008a3a:	2c03      	cmp	r4, #3
 8008a3c:	d04b      	beq.n	8008ad6 <__ieee754_atan2f+0xde>
 8008a3e:	4618      	mov	r0, r3
 8008a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a42:	b91e      	cbnz	r6, 8008a4c <__ieee754_atan2f+0x54>
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	da4c      	bge.n	8008ae2 <__ieee754_atan2f+0xea>
 8008a48:	4b27      	ldr	r3, [pc, #156]	@ (8008ae8 <__ieee754_atan2f+0xf0>)
 8008a4a:	e7f8      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008a4c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8008a50:	d10e      	bne.n	8008a70 <__ieee754_atan2f+0x78>
 8008a52:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008a56:	f104 34ff 	add.w	r4, r4, #4294967295
 8008a5a:	d105      	bne.n	8008a68 <__ieee754_atan2f+0x70>
 8008a5c:	2c02      	cmp	r4, #2
 8008a5e:	d83c      	bhi.n	8008ada <__ieee754_atan2f+0xe2>
 8008a60:	4b22      	ldr	r3, [pc, #136]	@ (8008aec <__ieee754_atan2f+0xf4>)
 8008a62:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008a66:	e7ea      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008a68:	2c02      	cmp	r4, #2
 8008a6a:	d838      	bhi.n	8008ade <__ieee754_atan2f+0xe6>
 8008a6c:	4b20      	ldr	r3, [pc, #128]	@ (8008af0 <__ieee754_atan2f+0xf8>)
 8008a6e:	e7f8      	b.n	8008a62 <__ieee754_atan2f+0x6a>
 8008a70:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008a74:	d0e6      	beq.n	8008a44 <__ieee754_atan2f+0x4c>
 8008a76:	1b92      	subs	r2, r2, r6
 8008a78:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8008a7c:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8008a80:	da17      	bge.n	8008ab2 <__ieee754_atan2f+0xba>
 8008a82:	2900      	cmp	r1, #0
 8008a84:	da01      	bge.n	8008a8a <__ieee754_atan2f+0x92>
 8008a86:	303c      	adds	r0, #60	@ 0x3c
 8008a88:	db15      	blt.n	8008ab6 <__ieee754_atan2f+0xbe>
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7f8 fa0e 	bl	8000eac <__aeabi_fdiv>
 8008a90:	f000 f946 	bl	8008d20 <fabsf>
 8008a94:	f000 f838 	bl	8008b08 <atanf>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	2c01      	cmp	r4, #1
 8008a9c:	d00d      	beq.n	8008aba <__ieee754_atan2f+0xc2>
 8008a9e:	2c02      	cmp	r4, #2
 8008aa0:	d00e      	beq.n	8008ac0 <__ieee754_atan2f+0xc8>
 8008aa2:	2c00      	cmp	r4, #0
 8008aa4:	d0cb      	beq.n	8008a3e <__ieee754_atan2f+0x46>
 8008aa6:	4913      	ldr	r1, [pc, #76]	@ (8008af4 <__ieee754_atan2f+0xfc>)
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f7f8 f843 	bl	8000b34 <__addsf3>
 8008aae:	4912      	ldr	r1, [pc, #72]	@ (8008af8 <__ieee754_atan2f+0x100>)
 8008ab0:	e00c      	b.n	8008acc <__ieee754_atan2f+0xd4>
 8008ab2:	4b12      	ldr	r3, [pc, #72]	@ (8008afc <__ieee754_atan2f+0x104>)
 8008ab4:	e7f1      	b.n	8008a9a <__ieee754_atan2f+0xa2>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	e7ef      	b.n	8008a9a <__ieee754_atan2f+0xa2>
 8008aba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008abe:	e7be      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ac0:	490c      	ldr	r1, [pc, #48]	@ (8008af4 <__ieee754_atan2f+0xfc>)
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	f7f8 f836 	bl	8000b34 <__addsf3>
 8008ac8:	4601      	mov	r1, r0
 8008aca:	480b      	ldr	r0, [pc, #44]	@ (8008af8 <__ieee754_atan2f+0x100>)
 8008acc:	f7f8 f830 	bl	8000b30 <__aeabi_fsub>
 8008ad0:	e7a2      	b.n	8008a18 <__ieee754_atan2f+0x20>
 8008ad2:	4b09      	ldr	r3, [pc, #36]	@ (8008af8 <__ieee754_atan2f+0x100>)
 8008ad4:	e7b3      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8008b00 <__ieee754_atan2f+0x108>)
 8008ad8:	e7b1      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ada:	4b0a      	ldr	r3, [pc, #40]	@ (8008b04 <__ieee754_atan2f+0x10c>)
 8008adc:	e7af      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ade:	2300      	movs	r3, #0
 8008ae0:	e7ad      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ae2:	4b06      	ldr	r3, [pc, #24]	@ (8008afc <__ieee754_atan2f+0x104>)
 8008ae4:	e7ab      	b.n	8008a3e <__ieee754_atan2f+0x46>
 8008ae6:	bf00      	nop
 8008ae8:	bfc90fdb 	.word	0xbfc90fdb
 8008aec:	0800bcf4 	.word	0x0800bcf4
 8008af0:	0800bce8 	.word	0x0800bce8
 8008af4:	33bbbd2e 	.word	0x33bbbd2e
 8008af8:	40490fdb 	.word	0x40490fdb
 8008afc:	3fc90fdb 	.word	0x3fc90fdb
 8008b00:	c0490fdb 	.word	0xc0490fdb
 8008b04:	3f490fdb 	.word	0x3f490fdb

08008b08 <atanf>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8008b10:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8008b14:	4604      	mov	r4, r0
 8008b16:	4680      	mov	r8, r0
 8008b18:	d30e      	bcc.n	8008b38 <atanf+0x30>
 8008b1a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8008b1e:	d904      	bls.n	8008b2a <atanf+0x22>
 8008b20:	4601      	mov	r1, r0
 8008b22:	f7f8 f807 	bl	8000b34 <__addsf3>
 8008b26:	4604      	mov	r4, r0
 8008b28:	e003      	b.n	8008b32 <atanf+0x2a>
 8008b2a:	2800      	cmp	r0, #0
 8008b2c:	f340 80ce 	ble.w	8008ccc <atanf+0x1c4>
 8008b30:	4c67      	ldr	r4, [pc, #412]	@ (8008cd0 <atanf+0x1c8>)
 8008b32:	4620      	mov	r0, r4
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b38:	4b66      	ldr	r3, [pc, #408]	@ (8008cd4 <atanf+0x1cc>)
 8008b3a:	429d      	cmp	r5, r3
 8008b3c:	d80e      	bhi.n	8008b5c <atanf+0x54>
 8008b3e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8008b42:	d208      	bcs.n	8008b56 <atanf+0x4e>
 8008b44:	4964      	ldr	r1, [pc, #400]	@ (8008cd8 <atanf+0x1d0>)
 8008b46:	f7f7 fff5 	bl	8000b34 <__addsf3>
 8008b4a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b4e:	f7f8 fab5 	bl	80010bc <__aeabi_fcmpgt>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d1ed      	bne.n	8008b32 <atanf+0x2a>
 8008b56:	f04f 36ff 	mov.w	r6, #4294967295
 8008b5a:	e01c      	b.n	8008b96 <atanf+0x8e>
 8008b5c:	f000 f8e0 	bl	8008d20 <fabsf>
 8008b60:	4b5e      	ldr	r3, [pc, #376]	@ (8008cdc <atanf+0x1d4>)
 8008b62:	4604      	mov	r4, r0
 8008b64:	429d      	cmp	r5, r3
 8008b66:	d87c      	bhi.n	8008c62 <atanf+0x15a>
 8008b68:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8008b6c:	429d      	cmp	r5, r3
 8008b6e:	d867      	bhi.n	8008c40 <atanf+0x138>
 8008b70:	4601      	mov	r1, r0
 8008b72:	f7f7 ffdf 	bl	8000b34 <__addsf3>
 8008b76:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008b7a:	f7f7 ffd9 	bl	8000b30 <__aeabi_fsub>
 8008b7e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8008b82:	4605      	mov	r5, r0
 8008b84:	4620      	mov	r0, r4
 8008b86:	f7f7 ffd5 	bl	8000b34 <__addsf3>
 8008b8a:	4601      	mov	r1, r0
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f7f8 f98d 	bl	8000eac <__aeabi_fdiv>
 8008b92:	2600      	movs	r6, #0
 8008b94:	4604      	mov	r4, r0
 8008b96:	4621      	mov	r1, r4
 8008b98:	4620      	mov	r0, r4
 8008b9a:	f7f8 f8d3 	bl	8000d44 <__aeabi_fmul>
 8008b9e:	4601      	mov	r1, r0
 8008ba0:	4607      	mov	r7, r0
 8008ba2:	f7f8 f8cf 	bl	8000d44 <__aeabi_fmul>
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	494d      	ldr	r1, [pc, #308]	@ (8008ce0 <atanf+0x1d8>)
 8008baa:	f7f8 f8cb 	bl	8000d44 <__aeabi_fmul>
 8008bae:	494d      	ldr	r1, [pc, #308]	@ (8008ce4 <atanf+0x1dc>)
 8008bb0:	f7f7 ffc0 	bl	8000b34 <__addsf3>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7f8 f8c5 	bl	8000d44 <__aeabi_fmul>
 8008bba:	494b      	ldr	r1, [pc, #300]	@ (8008ce8 <atanf+0x1e0>)
 8008bbc:	f7f7 ffba 	bl	8000b34 <__addsf3>
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	f7f8 f8bf 	bl	8000d44 <__aeabi_fmul>
 8008bc6:	4949      	ldr	r1, [pc, #292]	@ (8008cec <atanf+0x1e4>)
 8008bc8:	f7f7 ffb4 	bl	8000b34 <__addsf3>
 8008bcc:	4629      	mov	r1, r5
 8008bce:	f7f8 f8b9 	bl	8000d44 <__aeabi_fmul>
 8008bd2:	4947      	ldr	r1, [pc, #284]	@ (8008cf0 <atanf+0x1e8>)
 8008bd4:	f7f7 ffae 	bl	8000b34 <__addsf3>
 8008bd8:	4629      	mov	r1, r5
 8008bda:	f7f8 f8b3 	bl	8000d44 <__aeabi_fmul>
 8008bde:	4945      	ldr	r1, [pc, #276]	@ (8008cf4 <atanf+0x1ec>)
 8008be0:	f7f7 ffa8 	bl	8000b34 <__addsf3>
 8008be4:	4639      	mov	r1, r7
 8008be6:	f7f8 f8ad 	bl	8000d44 <__aeabi_fmul>
 8008bea:	4943      	ldr	r1, [pc, #268]	@ (8008cf8 <atanf+0x1f0>)
 8008bec:	4607      	mov	r7, r0
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7f8 f8a8 	bl	8000d44 <__aeabi_fmul>
 8008bf4:	4941      	ldr	r1, [pc, #260]	@ (8008cfc <atanf+0x1f4>)
 8008bf6:	f7f7 ff9b 	bl	8000b30 <__aeabi_fsub>
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f8 f8a2 	bl	8000d44 <__aeabi_fmul>
 8008c00:	493f      	ldr	r1, [pc, #252]	@ (8008d00 <atanf+0x1f8>)
 8008c02:	f7f7 ff95 	bl	8000b30 <__aeabi_fsub>
 8008c06:	4629      	mov	r1, r5
 8008c08:	f7f8 f89c 	bl	8000d44 <__aeabi_fmul>
 8008c0c:	493d      	ldr	r1, [pc, #244]	@ (8008d04 <atanf+0x1fc>)
 8008c0e:	f7f7 ff8f 	bl	8000b30 <__aeabi_fsub>
 8008c12:	4629      	mov	r1, r5
 8008c14:	f7f8 f896 	bl	8000d44 <__aeabi_fmul>
 8008c18:	493b      	ldr	r1, [pc, #236]	@ (8008d08 <atanf+0x200>)
 8008c1a:	f7f7 ff89 	bl	8000b30 <__aeabi_fsub>
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f8 f890 	bl	8000d44 <__aeabi_fmul>
 8008c24:	4601      	mov	r1, r0
 8008c26:	4638      	mov	r0, r7
 8008c28:	f7f7 ff84 	bl	8000b34 <__addsf3>
 8008c2c:	4621      	mov	r1, r4
 8008c2e:	f7f8 f889 	bl	8000d44 <__aeabi_fmul>
 8008c32:	1c73      	adds	r3, r6, #1
 8008c34:	4601      	mov	r1, r0
 8008c36:	d133      	bne.n	8008ca0 <atanf+0x198>
 8008c38:	4620      	mov	r0, r4
 8008c3a:	f7f7 ff79 	bl	8000b30 <__aeabi_fsub>
 8008c3e:	e772      	b.n	8008b26 <atanf+0x1e>
 8008c40:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c44:	f7f7 ff74 	bl	8000b30 <__aeabi_fsub>
 8008c48:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c4c:	4605      	mov	r5, r0
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f7f7 ff70 	bl	8000b34 <__addsf3>
 8008c54:	4601      	mov	r1, r0
 8008c56:	4628      	mov	r0, r5
 8008c58:	f7f8 f928 	bl	8000eac <__aeabi_fdiv>
 8008c5c:	2601      	movs	r6, #1
 8008c5e:	4604      	mov	r4, r0
 8008c60:	e799      	b.n	8008b96 <atanf+0x8e>
 8008c62:	4b2a      	ldr	r3, [pc, #168]	@ (8008d0c <atanf+0x204>)
 8008c64:	429d      	cmp	r5, r3
 8008c66:	d814      	bhi.n	8008c92 <atanf+0x18a>
 8008c68:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008c6c:	f7f7 ff60 	bl	8000b30 <__aeabi_fsub>
 8008c70:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8008c74:	4605      	mov	r5, r0
 8008c76:	4620      	mov	r0, r4
 8008c78:	f7f8 f864 	bl	8000d44 <__aeabi_fmul>
 8008c7c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8008c80:	f7f7 ff58 	bl	8000b34 <__addsf3>
 8008c84:	4601      	mov	r1, r0
 8008c86:	4628      	mov	r0, r5
 8008c88:	f7f8 f910 	bl	8000eac <__aeabi_fdiv>
 8008c8c:	2602      	movs	r6, #2
 8008c8e:	4604      	mov	r4, r0
 8008c90:	e781      	b.n	8008b96 <atanf+0x8e>
 8008c92:	4601      	mov	r1, r0
 8008c94:	481e      	ldr	r0, [pc, #120]	@ (8008d10 <atanf+0x208>)
 8008c96:	f7f8 f909 	bl	8000eac <__aeabi_fdiv>
 8008c9a:	2603      	movs	r6, #3
 8008c9c:	4604      	mov	r4, r0
 8008c9e:	e77a      	b.n	8008b96 <atanf+0x8e>
 8008ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8008d14 <atanf+0x20c>)
 8008ca2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8008ca6:	f7f7 ff43 	bl	8000b30 <__aeabi_fsub>
 8008caa:	4621      	mov	r1, r4
 8008cac:	f7f7 ff40 	bl	8000b30 <__aeabi_fsub>
 8008cb0:	4b19      	ldr	r3, [pc, #100]	@ (8008d18 <atanf+0x210>)
 8008cb2:	4601      	mov	r1, r0
 8008cb4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008cb8:	f7f7 ff3a 	bl	8000b30 <__aeabi_fsub>
 8008cbc:	f1b8 0f00 	cmp.w	r8, #0
 8008cc0:	4604      	mov	r4, r0
 8008cc2:	f6bf af36 	bge.w	8008b32 <atanf+0x2a>
 8008cc6:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008cca:	e732      	b.n	8008b32 <atanf+0x2a>
 8008ccc:	4c13      	ldr	r4, [pc, #76]	@ (8008d1c <atanf+0x214>)
 8008cce:	e730      	b.n	8008b32 <atanf+0x2a>
 8008cd0:	3fc90fdb 	.word	0x3fc90fdb
 8008cd4:	3edfffff 	.word	0x3edfffff
 8008cd8:	7149f2ca 	.word	0x7149f2ca
 8008cdc:	3f97ffff 	.word	0x3f97ffff
 8008ce0:	3c8569d7 	.word	0x3c8569d7
 8008ce4:	3d4bda59 	.word	0x3d4bda59
 8008ce8:	3d886b35 	.word	0x3d886b35
 8008cec:	3dba2e6e 	.word	0x3dba2e6e
 8008cf0:	3e124925 	.word	0x3e124925
 8008cf4:	3eaaaaab 	.word	0x3eaaaaab
 8008cf8:	bd15a221 	.word	0xbd15a221
 8008cfc:	3d6ef16b 	.word	0x3d6ef16b
 8008d00:	3d9d8795 	.word	0x3d9d8795
 8008d04:	3de38e38 	.word	0x3de38e38
 8008d08:	3e4ccccd 	.word	0x3e4ccccd
 8008d0c:	401bffff 	.word	0x401bffff
 8008d10:	bf800000 	.word	0xbf800000
 8008d14:	0800bd00 	.word	0x0800bd00
 8008d18:	0800bd10 	.word	0x0800bd10
 8008d1c:	bfc90fdb 	.word	0xbfc90fdb

08008d20 <fabsf>:
 8008d20:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008d24:	4770      	bx	lr
	...

08008d28 <scalbn>:
 8008d28:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8008d2c:	4616      	mov	r6, r2
 8008d2e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d32:	4683      	mov	fp, r0
 8008d34:	468c      	mov	ip, r1
 8008d36:	460b      	mov	r3, r1
 8008d38:	b982      	cbnz	r2, 8008d5c <scalbn+0x34>
 8008d3a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d3e:	4303      	orrs	r3, r0
 8008d40:	d039      	beq.n	8008db6 <scalbn+0x8e>
 8008d42:	4b2f      	ldr	r3, [pc, #188]	@ (8008e00 <scalbn+0xd8>)
 8008d44:	2200      	movs	r2, #0
 8008d46:	f7f7 fbc7 	bl	80004d8 <__aeabi_dmul>
 8008d4a:	4b2e      	ldr	r3, [pc, #184]	@ (8008e04 <scalbn+0xdc>)
 8008d4c:	4683      	mov	fp, r0
 8008d4e:	429e      	cmp	r6, r3
 8008d50:	468c      	mov	ip, r1
 8008d52:	da0d      	bge.n	8008d70 <scalbn+0x48>
 8008d54:	a326      	add	r3, pc, #152	@ (adr r3, 8008df0 <scalbn+0xc8>)
 8008d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5a:	e01b      	b.n	8008d94 <scalbn+0x6c>
 8008d5c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8008d60:	42ba      	cmp	r2, r7
 8008d62:	d109      	bne.n	8008d78 <scalbn+0x50>
 8008d64:	4602      	mov	r2, r0
 8008d66:	f7f7 fa01 	bl	800016c <__adddf3>
 8008d6a:	4683      	mov	fp, r0
 8008d6c:	468c      	mov	ip, r1
 8008d6e:	e022      	b.n	8008db6 <scalbn+0x8e>
 8008d70:	460b      	mov	r3, r1
 8008d72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008d76:	3a36      	subs	r2, #54	@ 0x36
 8008d78:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008d7c:	428e      	cmp	r6, r1
 8008d7e:	dd0c      	ble.n	8008d9a <scalbn+0x72>
 8008d80:	a31d      	add	r3, pc, #116	@ (adr r3, 8008df8 <scalbn+0xd0>)
 8008d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d86:	461c      	mov	r4, r3
 8008d88:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8008d8c:	f361 74df 	bfi	r4, r1, #31, #1
 8008d90:	4621      	mov	r1, r4
 8008d92:	481d      	ldr	r0, [pc, #116]	@ (8008e08 <scalbn+0xe0>)
 8008d94:	f7f7 fba0 	bl	80004d8 <__aeabi_dmul>
 8008d98:	e7e7      	b.n	8008d6a <scalbn+0x42>
 8008d9a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008d9e:	4432      	add	r2, r6
 8008da0:	428a      	cmp	r2, r1
 8008da2:	dced      	bgt.n	8008d80 <scalbn+0x58>
 8008da4:	2a00      	cmp	r2, #0
 8008da6:	dd0a      	ble.n	8008dbe <scalbn+0x96>
 8008da8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008dac:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008db0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008db4:	46ac      	mov	ip, r5
 8008db6:	4658      	mov	r0, fp
 8008db8:	4661      	mov	r1, ip
 8008dba:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8008dbe:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008dc2:	da09      	bge.n	8008dd8 <scalbn+0xb0>
 8008dc4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8008dc8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8008dcc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8008dd0:	480e      	ldr	r0, [pc, #56]	@ (8008e0c <scalbn+0xe4>)
 8008dd2:	f041 011f 	orr.w	r1, r1, #31
 8008dd6:	e7bd      	b.n	8008d54 <scalbn+0x2c>
 8008dd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008ddc:	3236      	adds	r2, #54	@ 0x36
 8008dde:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008de2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008de6:	4658      	mov	r0, fp
 8008de8:	4629      	mov	r1, r5
 8008dea:	2200      	movs	r2, #0
 8008dec:	4b08      	ldr	r3, [pc, #32]	@ (8008e10 <scalbn+0xe8>)
 8008dee:	e7d1      	b.n	8008d94 <scalbn+0x6c>
 8008df0:	c2f8f359 	.word	0xc2f8f359
 8008df4:	01a56e1f 	.word	0x01a56e1f
 8008df8:	8800759c 	.word	0x8800759c
 8008dfc:	7e37e43c 	.word	0x7e37e43c
 8008e00:	43500000 	.word	0x43500000
 8008e04:	ffff3cb0 	.word	0xffff3cb0
 8008e08:	8800759c 	.word	0x8800759c
 8008e0c:	c2f8f359 	.word	0xc2f8f359
 8008e10:	3c900000 	.word	0x3c900000

08008e14 <with_errno>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4604      	mov	r4, r0
 8008e18:	460d      	mov	r5, r1
 8008e1a:	4616      	mov	r6, r2
 8008e1c:	f000 ff7a 	bl	8009d14 <__errno>
 8008e20:	4629      	mov	r1, r5
 8008e22:	6006      	str	r6, [r0, #0]
 8008e24:	4620      	mov	r0, r4
 8008e26:	bd70      	pop	{r4, r5, r6, pc}

08008e28 <xflow>:
 8008e28:	b513      	push	{r0, r1, r4, lr}
 8008e2a:	4604      	mov	r4, r0
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	b10c      	cbz	r4, 8008e36 <xflow+0xe>
 8008e32:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008e36:	e9cd 2300 	strd	r2, r3, [sp]
 8008e3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e3e:	f7f7 fb4b 	bl	80004d8 <__aeabi_dmul>
 8008e42:	2222      	movs	r2, #34	@ 0x22
 8008e44:	b002      	add	sp, #8
 8008e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e4a:	f7ff bfe3 	b.w	8008e14 <with_errno>

08008e4e <__math_uflow>:
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8008e54:	f7ff bfe8 	b.w	8008e28 <xflow>

08008e58 <__math_oflow>:
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8008e5e:	f7ff bfe3 	b.w	8008e28 <xflow>
	...

08008e64 <__ieee754_sqrt>:
 8008e64:	4a67      	ldr	r2, [pc, #412]	@ (8009004 <__ieee754_sqrt+0x1a0>)
 8008e66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	438a      	bics	r2, r1
 8008e6c:	4606      	mov	r6, r0
 8008e6e:	460f      	mov	r7, r1
 8008e70:	460b      	mov	r3, r1
 8008e72:	4604      	mov	r4, r0
 8008e74:	d10e      	bne.n	8008e94 <__ieee754_sqrt+0x30>
 8008e76:	4602      	mov	r2, r0
 8008e78:	f7f7 fb2e 	bl	80004d8 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4630      	mov	r0, r6
 8008e82:	4639      	mov	r1, r7
 8008e84:	f7f7 f972 	bl	800016c <__adddf3>
 8008e88:	4606      	mov	r6, r0
 8008e8a:	460f      	mov	r7, r1
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	4639      	mov	r1, r7
 8008e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e94:	2900      	cmp	r1, #0
 8008e96:	dc0c      	bgt.n	8008eb2 <__ieee754_sqrt+0x4e>
 8008e98:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8008e9c:	4302      	orrs	r2, r0
 8008e9e:	d0f5      	beq.n	8008e8c <__ieee754_sqrt+0x28>
 8008ea0:	b189      	cbz	r1, 8008ec6 <__ieee754_sqrt+0x62>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	f7f7 f960 	bl	8000168 <__aeabi_dsub>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	460b      	mov	r3, r1
 8008eac:	f7f7 fc3e 	bl	800072c <__aeabi_ddiv>
 8008eb0:	e7ea      	b.n	8008e88 <__ieee754_sqrt+0x24>
 8008eb2:	150a      	asrs	r2, r1, #20
 8008eb4:	d115      	bne.n	8008ee2 <__ieee754_sqrt+0x7e>
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	e009      	b.n	8008ece <__ieee754_sqrt+0x6a>
 8008eba:	0ae3      	lsrs	r3, r4, #11
 8008ebc:	3a15      	subs	r2, #21
 8008ebe:	0564      	lsls	r4, r4, #21
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d0fa      	beq.n	8008eba <__ieee754_sqrt+0x56>
 8008ec4:	e7f7      	b.n	8008eb6 <__ieee754_sqrt+0x52>
 8008ec6:	460a      	mov	r2, r1
 8008ec8:	e7fa      	b.n	8008ec0 <__ieee754_sqrt+0x5c>
 8008eca:	005b      	lsls	r3, r3, #1
 8008ecc:	3101      	adds	r1, #1
 8008ece:	02d8      	lsls	r0, r3, #11
 8008ed0:	d5fb      	bpl.n	8008eca <__ieee754_sqrt+0x66>
 8008ed2:	1e48      	subs	r0, r1, #1
 8008ed4:	1a12      	subs	r2, r2, r0
 8008ed6:	f1c1 0020 	rsb	r0, r1, #32
 8008eda:	fa24 f000 	lsr.w	r0, r4, r0
 8008ede:	4303      	orrs	r3, r0
 8008ee0:	408c      	lsls	r4, r1
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8008ee8:	2116      	movs	r1, #22
 8008eea:	07d2      	lsls	r2, r2, #31
 8008eec:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ef6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008efa:	bf5c      	itt	pl
 8008efc:	005b      	lslpl	r3, r3, #1
 8008efe:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8008f02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f06:	bf58      	it	pl
 8008f08:	0064      	lslpl	r4, r4, #1
 8008f0a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8008f0e:	107f      	asrs	r7, r7, #1
 8008f10:	0064      	lsls	r4, r4, #1
 8008f12:	1815      	adds	r5, r2, r0
 8008f14:	429d      	cmp	r5, r3
 8008f16:	bfde      	ittt	le
 8008f18:	182a      	addle	r2, r5, r0
 8008f1a:	1b5b      	suble	r3, r3, r5
 8008f1c:	1836      	addle	r6, r6, r0
 8008f1e:	0fe5      	lsrs	r5, r4, #31
 8008f20:	3901      	subs	r1, #1
 8008f22:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8008f26:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f2a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008f2e:	d1f0      	bne.n	8008f12 <__ieee754_sqrt+0xae>
 8008f30:	460d      	mov	r5, r1
 8008f32:	f04f 0a20 	mov.w	sl, #32
 8008f36:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008f3a:	429a      	cmp	r2, r3
 8008f3c:	eb01 0c00 	add.w	ip, r1, r0
 8008f40:	db02      	blt.n	8008f48 <__ieee754_sqrt+0xe4>
 8008f42:	d113      	bne.n	8008f6c <__ieee754_sqrt+0x108>
 8008f44:	45a4      	cmp	ip, r4
 8008f46:	d811      	bhi.n	8008f6c <__ieee754_sqrt+0x108>
 8008f48:	f1bc 0f00 	cmp.w	ip, #0
 8008f4c:	eb0c 0100 	add.w	r1, ip, r0
 8008f50:	da42      	bge.n	8008fd8 <__ieee754_sqrt+0x174>
 8008f52:	2900      	cmp	r1, #0
 8008f54:	db40      	blt.n	8008fd8 <__ieee754_sqrt+0x174>
 8008f56:	f102 0e01 	add.w	lr, r2, #1
 8008f5a:	1a9b      	subs	r3, r3, r2
 8008f5c:	4672      	mov	r2, lr
 8008f5e:	45a4      	cmp	ip, r4
 8008f60:	bf88      	it	hi
 8008f62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008f66:	eba4 040c 	sub.w	r4, r4, ip
 8008f6a:	4405      	add	r5, r0
 8008f6c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8008f70:	f1ba 0a01 	subs.w	sl, sl, #1
 8008f74:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8008f78:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8008f7c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8008f80:	d1db      	bne.n	8008f3a <__ieee754_sqrt+0xd6>
 8008f82:	431c      	orrs	r4, r3
 8008f84:	d01a      	beq.n	8008fbc <__ieee754_sqrt+0x158>
 8008f86:	4c20      	ldr	r4, [pc, #128]	@ (8009008 <__ieee754_sqrt+0x1a4>)
 8008f88:	f8df b080 	ldr.w	fp, [pc, #128]	@ 800900c <__ieee754_sqrt+0x1a8>
 8008f8c:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008f90:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f94:	f7f7 f8e8 	bl	8000168 <__aeabi_dsub>
 8008f98:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f9c:	4602      	mov	r2, r0
 8008f9e:	460b      	mov	r3, r1
 8008fa0:	4640      	mov	r0, r8
 8008fa2:	4649      	mov	r1, r9
 8008fa4:	f7f7 fd14 	bl	80009d0 <__aeabi_dcmple>
 8008fa8:	b140      	cbz	r0, 8008fbc <__ieee754_sqrt+0x158>
 8008faa:	e9d4 0100 	ldrd	r0, r1, [r4]
 8008fae:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fb2:	f1b5 3fff 	cmp.w	r5, #4294967295
 8008fb6:	d111      	bne.n	8008fdc <__ieee754_sqrt+0x178>
 8008fb8:	4655      	mov	r5, sl
 8008fba:	3601      	adds	r6, #1
 8008fbc:	1072      	asrs	r2, r6, #1
 8008fbe:	086b      	lsrs	r3, r5, #1
 8008fc0:	07f1      	lsls	r1, r6, #31
 8008fc2:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008fc6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008fca:	bf48      	it	mi
 8008fcc:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	eb02 5107 	add.w	r1, r2, r7, lsl #20
 8008fd6:	e757      	b.n	8008e88 <__ieee754_sqrt+0x24>
 8008fd8:	4696      	mov	lr, r2
 8008fda:	e7be      	b.n	8008f5a <__ieee754_sqrt+0xf6>
 8008fdc:	f7f7 f8c6 	bl	800016c <__adddf3>
 8008fe0:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4640      	mov	r0, r8
 8008fea:	4649      	mov	r1, r9
 8008fec:	f7f7 fce6 	bl	80009bc <__aeabi_dcmplt>
 8008ff0:	b120      	cbz	r0, 8008ffc <__ieee754_sqrt+0x198>
 8008ff2:	1ca8      	adds	r0, r5, #2
 8008ff4:	bf08      	it	eq
 8008ff6:	3601      	addeq	r6, #1
 8008ff8:	3502      	adds	r5, #2
 8008ffa:	e7df      	b.n	8008fbc <__ieee754_sqrt+0x158>
 8008ffc:	1c6b      	adds	r3, r5, #1
 8008ffe:	f023 0501 	bic.w	r5, r3, #1
 8009002:	e7db      	b.n	8008fbc <__ieee754_sqrt+0x158>
 8009004:	7ff00000 	.word	0x7ff00000
 8009008:	20000038 	.word	0x20000038
 800900c:	20000030 	.word	0x20000030

08009010 <malloc>:
 8009010:	4b02      	ldr	r3, [pc, #8]	@ (800901c <malloc+0xc>)
 8009012:	4601      	mov	r1, r0
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f000 b82d 	b.w	8009074 <_malloc_r>
 800901a:	bf00      	nop
 800901c:	2000004c 	.word	0x2000004c

08009020 <free>:
 8009020:	4b02      	ldr	r3, [pc, #8]	@ (800902c <free+0xc>)
 8009022:	4601      	mov	r1, r0
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	f001 bd03 	b.w	800aa30 <_free_r>
 800902a:	bf00      	nop
 800902c:	2000004c 	.word	0x2000004c

08009030 <sbrk_aligned>:
 8009030:	b570      	push	{r4, r5, r6, lr}
 8009032:	4e0f      	ldr	r6, [pc, #60]	@ (8009070 <sbrk_aligned+0x40>)
 8009034:	460c      	mov	r4, r1
 8009036:	6831      	ldr	r1, [r6, #0]
 8009038:	4605      	mov	r5, r0
 800903a:	b911      	cbnz	r1, 8009042 <sbrk_aligned+0x12>
 800903c:	f000 fe48 	bl	8009cd0 <_sbrk_r>
 8009040:	6030      	str	r0, [r6, #0]
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	f000 fe43 	bl	8009cd0 <_sbrk_r>
 800904a:	1c43      	adds	r3, r0, #1
 800904c:	d103      	bne.n	8009056 <sbrk_aligned+0x26>
 800904e:	f04f 34ff 	mov.w	r4, #4294967295
 8009052:	4620      	mov	r0, r4
 8009054:	bd70      	pop	{r4, r5, r6, pc}
 8009056:	1cc4      	adds	r4, r0, #3
 8009058:	f024 0403 	bic.w	r4, r4, #3
 800905c:	42a0      	cmp	r0, r4
 800905e:	d0f8      	beq.n	8009052 <sbrk_aligned+0x22>
 8009060:	1a21      	subs	r1, r4, r0
 8009062:	4628      	mov	r0, r5
 8009064:	f000 fe34 	bl	8009cd0 <_sbrk_r>
 8009068:	3001      	adds	r0, #1
 800906a:	d1f2      	bne.n	8009052 <sbrk_aligned+0x22>
 800906c:	e7ef      	b.n	800904e <sbrk_aligned+0x1e>
 800906e:	bf00      	nop
 8009070:	20000610 	.word	0x20000610

08009074 <_malloc_r>:
 8009074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009078:	1ccd      	adds	r5, r1, #3
 800907a:	f025 0503 	bic.w	r5, r5, #3
 800907e:	3508      	adds	r5, #8
 8009080:	2d0c      	cmp	r5, #12
 8009082:	bf38      	it	cc
 8009084:	250c      	movcc	r5, #12
 8009086:	2d00      	cmp	r5, #0
 8009088:	4606      	mov	r6, r0
 800908a:	db01      	blt.n	8009090 <_malloc_r+0x1c>
 800908c:	42a9      	cmp	r1, r5
 800908e:	d904      	bls.n	800909a <_malloc_r+0x26>
 8009090:	230c      	movs	r3, #12
 8009092:	6033      	str	r3, [r6, #0]
 8009094:	2000      	movs	r0, #0
 8009096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800909a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009170 <_malloc_r+0xfc>
 800909e:	f000 f869 	bl	8009174 <__malloc_lock>
 80090a2:	f8d8 3000 	ldr.w	r3, [r8]
 80090a6:	461c      	mov	r4, r3
 80090a8:	bb44      	cbnz	r4, 80090fc <_malloc_r+0x88>
 80090aa:	4629      	mov	r1, r5
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff ffbf 	bl	8009030 <sbrk_aligned>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	4604      	mov	r4, r0
 80090b6:	d158      	bne.n	800916a <_malloc_r+0xf6>
 80090b8:	f8d8 4000 	ldr.w	r4, [r8]
 80090bc:	4627      	mov	r7, r4
 80090be:	2f00      	cmp	r7, #0
 80090c0:	d143      	bne.n	800914a <_malloc_r+0xd6>
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	d04b      	beq.n	800915e <_malloc_r+0xea>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	4639      	mov	r1, r7
 80090ca:	4630      	mov	r0, r6
 80090cc:	eb04 0903 	add.w	r9, r4, r3
 80090d0:	f000 fdfe 	bl	8009cd0 <_sbrk_r>
 80090d4:	4581      	cmp	r9, r0
 80090d6:	d142      	bne.n	800915e <_malloc_r+0xea>
 80090d8:	6821      	ldr	r1, [r4, #0]
 80090da:	4630      	mov	r0, r6
 80090dc:	1a6d      	subs	r5, r5, r1
 80090de:	4629      	mov	r1, r5
 80090e0:	f7ff ffa6 	bl	8009030 <sbrk_aligned>
 80090e4:	3001      	adds	r0, #1
 80090e6:	d03a      	beq.n	800915e <_malloc_r+0xea>
 80090e8:	6823      	ldr	r3, [r4, #0]
 80090ea:	442b      	add	r3, r5
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	f8d8 3000 	ldr.w	r3, [r8]
 80090f2:	685a      	ldr	r2, [r3, #4]
 80090f4:	bb62      	cbnz	r2, 8009150 <_malloc_r+0xdc>
 80090f6:	f8c8 7000 	str.w	r7, [r8]
 80090fa:	e00f      	b.n	800911c <_malloc_r+0xa8>
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	1b52      	subs	r2, r2, r5
 8009100:	d420      	bmi.n	8009144 <_malloc_r+0xd0>
 8009102:	2a0b      	cmp	r2, #11
 8009104:	d917      	bls.n	8009136 <_malloc_r+0xc2>
 8009106:	1961      	adds	r1, r4, r5
 8009108:	42a3      	cmp	r3, r4
 800910a:	6025      	str	r5, [r4, #0]
 800910c:	bf18      	it	ne
 800910e:	6059      	strne	r1, [r3, #4]
 8009110:	6863      	ldr	r3, [r4, #4]
 8009112:	bf08      	it	eq
 8009114:	f8c8 1000 	streq.w	r1, [r8]
 8009118:	5162      	str	r2, [r4, r5]
 800911a:	604b      	str	r3, [r1, #4]
 800911c:	4630      	mov	r0, r6
 800911e:	f000 f82f 	bl	8009180 <__malloc_unlock>
 8009122:	f104 000b 	add.w	r0, r4, #11
 8009126:	1d23      	adds	r3, r4, #4
 8009128:	f020 0007 	bic.w	r0, r0, #7
 800912c:	1ac2      	subs	r2, r0, r3
 800912e:	bf1c      	itt	ne
 8009130:	1a1b      	subne	r3, r3, r0
 8009132:	50a3      	strne	r3, [r4, r2]
 8009134:	e7af      	b.n	8009096 <_malloc_r+0x22>
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	42a3      	cmp	r3, r4
 800913a:	bf0c      	ite	eq
 800913c:	f8c8 2000 	streq.w	r2, [r8]
 8009140:	605a      	strne	r2, [r3, #4]
 8009142:	e7eb      	b.n	800911c <_malloc_r+0xa8>
 8009144:	4623      	mov	r3, r4
 8009146:	6864      	ldr	r4, [r4, #4]
 8009148:	e7ae      	b.n	80090a8 <_malloc_r+0x34>
 800914a:	463c      	mov	r4, r7
 800914c:	687f      	ldr	r7, [r7, #4]
 800914e:	e7b6      	b.n	80090be <_malloc_r+0x4a>
 8009150:	461a      	mov	r2, r3
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	42a3      	cmp	r3, r4
 8009156:	d1fb      	bne.n	8009150 <_malloc_r+0xdc>
 8009158:	2300      	movs	r3, #0
 800915a:	6053      	str	r3, [r2, #4]
 800915c:	e7de      	b.n	800911c <_malloc_r+0xa8>
 800915e:	230c      	movs	r3, #12
 8009160:	4630      	mov	r0, r6
 8009162:	6033      	str	r3, [r6, #0]
 8009164:	f000 f80c 	bl	8009180 <__malloc_unlock>
 8009168:	e794      	b.n	8009094 <_malloc_r+0x20>
 800916a:	6005      	str	r5, [r0, #0]
 800916c:	e7d6      	b.n	800911c <_malloc_r+0xa8>
 800916e:	bf00      	nop
 8009170:	20000614 	.word	0x20000614

08009174 <__malloc_lock>:
 8009174:	4801      	ldr	r0, [pc, #4]	@ (800917c <__malloc_lock+0x8>)
 8009176:	f000 bdf8 	b.w	8009d6a <__retarget_lock_acquire_recursive>
 800917a:	bf00      	nop
 800917c:	20000758 	.word	0x20000758

08009180 <__malloc_unlock>:
 8009180:	4801      	ldr	r0, [pc, #4]	@ (8009188 <__malloc_unlock+0x8>)
 8009182:	f000 bdf3 	b.w	8009d6c <__retarget_lock_release_recursive>
 8009186:	bf00      	nop
 8009188:	20000758 	.word	0x20000758

0800918c <__cvt>:
 800918c:	2b00      	cmp	r3, #0
 800918e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009192:	461d      	mov	r5, r3
 8009194:	bfbb      	ittet	lt
 8009196:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800919a:	461d      	movlt	r5, r3
 800919c:	2300      	movge	r3, #0
 800919e:	232d      	movlt	r3, #45	@ 0x2d
 80091a0:	b088      	sub	sp, #32
 80091a2:	4614      	mov	r4, r2
 80091a4:	bfb8      	it	lt
 80091a6:	4614      	movlt	r4, r2
 80091a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80091aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80091ac:	7013      	strb	r3, [r2, #0]
 80091ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80091b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80091b4:	f023 0820 	bic.w	r8, r3, #32
 80091b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80091bc:	d005      	beq.n	80091ca <__cvt+0x3e>
 80091be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80091c2:	d100      	bne.n	80091c6 <__cvt+0x3a>
 80091c4:	3601      	adds	r6, #1
 80091c6:	2302      	movs	r3, #2
 80091c8:	e000      	b.n	80091cc <__cvt+0x40>
 80091ca:	2303      	movs	r3, #3
 80091cc:	aa07      	add	r2, sp, #28
 80091ce:	9204      	str	r2, [sp, #16]
 80091d0:	aa06      	add	r2, sp, #24
 80091d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80091d6:	e9cd 3600 	strd	r3, r6, [sp]
 80091da:	4622      	mov	r2, r4
 80091dc:	462b      	mov	r3, r5
 80091de:	f000 fe5f 	bl	8009ea0 <_dtoa_r>
 80091e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80091e6:	4607      	mov	r7, r0
 80091e8:	d119      	bne.n	800921e <__cvt+0x92>
 80091ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80091ec:	07db      	lsls	r3, r3, #31
 80091ee:	d50e      	bpl.n	800920e <__cvt+0x82>
 80091f0:	eb00 0906 	add.w	r9, r0, r6
 80091f4:	2200      	movs	r2, #0
 80091f6:	2300      	movs	r3, #0
 80091f8:	4620      	mov	r0, r4
 80091fa:	4629      	mov	r1, r5
 80091fc:	f7f7 fbd4 	bl	80009a8 <__aeabi_dcmpeq>
 8009200:	b108      	cbz	r0, 8009206 <__cvt+0x7a>
 8009202:	f8cd 901c 	str.w	r9, [sp, #28]
 8009206:	2230      	movs	r2, #48	@ 0x30
 8009208:	9b07      	ldr	r3, [sp, #28]
 800920a:	454b      	cmp	r3, r9
 800920c:	d31e      	bcc.n	800924c <__cvt+0xc0>
 800920e:	4638      	mov	r0, r7
 8009210:	9b07      	ldr	r3, [sp, #28]
 8009212:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009214:	1bdb      	subs	r3, r3, r7
 8009216:	6013      	str	r3, [r2, #0]
 8009218:	b008      	add	sp, #32
 800921a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800921e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009222:	eb00 0906 	add.w	r9, r0, r6
 8009226:	d1e5      	bne.n	80091f4 <__cvt+0x68>
 8009228:	7803      	ldrb	r3, [r0, #0]
 800922a:	2b30      	cmp	r3, #48	@ 0x30
 800922c:	d10a      	bne.n	8009244 <__cvt+0xb8>
 800922e:	2200      	movs	r2, #0
 8009230:	2300      	movs	r3, #0
 8009232:	4620      	mov	r0, r4
 8009234:	4629      	mov	r1, r5
 8009236:	f7f7 fbb7 	bl	80009a8 <__aeabi_dcmpeq>
 800923a:	b918      	cbnz	r0, 8009244 <__cvt+0xb8>
 800923c:	f1c6 0601 	rsb	r6, r6, #1
 8009240:	f8ca 6000 	str.w	r6, [sl]
 8009244:	f8da 3000 	ldr.w	r3, [sl]
 8009248:	4499      	add	r9, r3
 800924a:	e7d3      	b.n	80091f4 <__cvt+0x68>
 800924c:	1c59      	adds	r1, r3, #1
 800924e:	9107      	str	r1, [sp, #28]
 8009250:	701a      	strb	r2, [r3, #0]
 8009252:	e7d9      	b.n	8009208 <__cvt+0x7c>

08009254 <__exponent>:
 8009254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009256:	2900      	cmp	r1, #0
 8009258:	bfb6      	itet	lt
 800925a:	232d      	movlt	r3, #45	@ 0x2d
 800925c:	232b      	movge	r3, #43	@ 0x2b
 800925e:	4249      	neglt	r1, r1
 8009260:	2909      	cmp	r1, #9
 8009262:	7002      	strb	r2, [r0, #0]
 8009264:	7043      	strb	r3, [r0, #1]
 8009266:	dd29      	ble.n	80092bc <__exponent+0x68>
 8009268:	f10d 0307 	add.w	r3, sp, #7
 800926c:	461d      	mov	r5, r3
 800926e:	270a      	movs	r7, #10
 8009270:	fbb1 f6f7 	udiv	r6, r1, r7
 8009274:	461a      	mov	r2, r3
 8009276:	fb07 1416 	mls	r4, r7, r6, r1
 800927a:	3430      	adds	r4, #48	@ 0x30
 800927c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009280:	460c      	mov	r4, r1
 8009282:	2c63      	cmp	r4, #99	@ 0x63
 8009284:	4631      	mov	r1, r6
 8009286:	f103 33ff 	add.w	r3, r3, #4294967295
 800928a:	dcf1      	bgt.n	8009270 <__exponent+0x1c>
 800928c:	3130      	adds	r1, #48	@ 0x30
 800928e:	1e94      	subs	r4, r2, #2
 8009290:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009294:	4623      	mov	r3, r4
 8009296:	1c41      	adds	r1, r0, #1
 8009298:	42ab      	cmp	r3, r5
 800929a:	d30a      	bcc.n	80092b2 <__exponent+0x5e>
 800929c:	f10d 0309 	add.w	r3, sp, #9
 80092a0:	1a9b      	subs	r3, r3, r2
 80092a2:	42ac      	cmp	r4, r5
 80092a4:	bf88      	it	hi
 80092a6:	2300      	movhi	r3, #0
 80092a8:	3302      	adds	r3, #2
 80092aa:	4403      	add	r3, r0
 80092ac:	1a18      	subs	r0, r3, r0
 80092ae:	b003      	add	sp, #12
 80092b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80092b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80092ba:	e7ed      	b.n	8009298 <__exponent+0x44>
 80092bc:	2330      	movs	r3, #48	@ 0x30
 80092be:	3130      	adds	r1, #48	@ 0x30
 80092c0:	7083      	strb	r3, [r0, #2]
 80092c2:	70c1      	strb	r1, [r0, #3]
 80092c4:	1d03      	adds	r3, r0, #4
 80092c6:	e7f1      	b.n	80092ac <__exponent+0x58>

080092c8 <_printf_float>:
 80092c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	b091      	sub	sp, #68	@ 0x44
 80092ce:	460c      	mov	r4, r1
 80092d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80092d4:	4616      	mov	r6, r2
 80092d6:	461f      	mov	r7, r3
 80092d8:	4605      	mov	r5, r0
 80092da:	f000 fcc1 	bl	8009c60 <_localeconv_r>
 80092de:	6803      	ldr	r3, [r0, #0]
 80092e0:	4618      	mov	r0, r3
 80092e2:	9308      	str	r3, [sp, #32]
 80092e4:	f7f6 ff34 	bl	8000150 <strlen>
 80092e8:	2300      	movs	r3, #0
 80092ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80092ec:	f8d8 3000 	ldr.w	r3, [r8]
 80092f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80092f2:	3307      	adds	r3, #7
 80092f4:	f023 0307 	bic.w	r3, r3, #7
 80092f8:	f103 0208 	add.w	r2, r3, #8
 80092fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009300:	f8d4 b000 	ldr.w	fp, [r4]
 8009304:	f8c8 2000 	str.w	r2, [r8]
 8009308:	e9d3 8900 	ldrd	r8, r9, [r3]
 800930c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009310:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009312:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009316:	f04f 32ff 	mov.w	r2, #4294967295
 800931a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800931e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009322:	4b9c      	ldr	r3, [pc, #624]	@ (8009594 <_printf_float+0x2cc>)
 8009324:	f7f7 fb72 	bl	8000a0c <__aeabi_dcmpun>
 8009328:	bb70      	cbnz	r0, 8009388 <_printf_float+0xc0>
 800932a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800932e:	f04f 32ff 	mov.w	r2, #4294967295
 8009332:	4b98      	ldr	r3, [pc, #608]	@ (8009594 <_printf_float+0x2cc>)
 8009334:	f7f7 fb4c 	bl	80009d0 <__aeabi_dcmple>
 8009338:	bb30      	cbnz	r0, 8009388 <_printf_float+0xc0>
 800933a:	2200      	movs	r2, #0
 800933c:	2300      	movs	r3, #0
 800933e:	4640      	mov	r0, r8
 8009340:	4649      	mov	r1, r9
 8009342:	f7f7 fb3b 	bl	80009bc <__aeabi_dcmplt>
 8009346:	b110      	cbz	r0, 800934e <_printf_float+0x86>
 8009348:	232d      	movs	r3, #45	@ 0x2d
 800934a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800934e:	4a92      	ldr	r2, [pc, #584]	@ (8009598 <_printf_float+0x2d0>)
 8009350:	4b92      	ldr	r3, [pc, #584]	@ (800959c <_printf_float+0x2d4>)
 8009352:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009356:	bf94      	ite	ls
 8009358:	4690      	movls	r8, r2
 800935a:	4698      	movhi	r8, r3
 800935c:	2303      	movs	r3, #3
 800935e:	f04f 0900 	mov.w	r9, #0
 8009362:	6123      	str	r3, [r4, #16]
 8009364:	f02b 0304 	bic.w	r3, fp, #4
 8009368:	6023      	str	r3, [r4, #0]
 800936a:	4633      	mov	r3, r6
 800936c:	4621      	mov	r1, r4
 800936e:	4628      	mov	r0, r5
 8009370:	9700      	str	r7, [sp, #0]
 8009372:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009374:	f000 f9d4 	bl	8009720 <_printf_common>
 8009378:	3001      	adds	r0, #1
 800937a:	f040 8090 	bne.w	800949e <_printf_float+0x1d6>
 800937e:	f04f 30ff 	mov.w	r0, #4294967295
 8009382:	b011      	add	sp, #68	@ 0x44
 8009384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009388:	4642      	mov	r2, r8
 800938a:	464b      	mov	r3, r9
 800938c:	4640      	mov	r0, r8
 800938e:	4649      	mov	r1, r9
 8009390:	f7f7 fb3c 	bl	8000a0c <__aeabi_dcmpun>
 8009394:	b148      	cbz	r0, 80093aa <_printf_float+0xe2>
 8009396:	464b      	mov	r3, r9
 8009398:	2b00      	cmp	r3, #0
 800939a:	bfb8      	it	lt
 800939c:	232d      	movlt	r3, #45	@ 0x2d
 800939e:	4a80      	ldr	r2, [pc, #512]	@ (80095a0 <_printf_float+0x2d8>)
 80093a0:	bfb8      	it	lt
 80093a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80093a6:	4b7f      	ldr	r3, [pc, #508]	@ (80095a4 <_printf_float+0x2dc>)
 80093a8:	e7d3      	b.n	8009352 <_printf_float+0x8a>
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80093b0:	1c5a      	adds	r2, r3, #1
 80093b2:	d13f      	bne.n	8009434 <_printf_float+0x16c>
 80093b4:	2306      	movs	r3, #6
 80093b6:	6063      	str	r3, [r4, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80093be:	6023      	str	r3, [r4, #0]
 80093c0:	9206      	str	r2, [sp, #24]
 80093c2:	aa0e      	add	r2, sp, #56	@ 0x38
 80093c4:	e9cd a204 	strd	sl, r2, [sp, #16]
 80093c8:	aa0d      	add	r2, sp, #52	@ 0x34
 80093ca:	9203      	str	r2, [sp, #12]
 80093cc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80093d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80093d4:	6863      	ldr	r3, [r4, #4]
 80093d6:	4642      	mov	r2, r8
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	4628      	mov	r0, r5
 80093dc:	464b      	mov	r3, r9
 80093de:	910a      	str	r1, [sp, #40]	@ 0x28
 80093e0:	f7ff fed4 	bl	800918c <__cvt>
 80093e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093e6:	4680      	mov	r8, r0
 80093e8:	2947      	cmp	r1, #71	@ 0x47
 80093ea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80093ec:	d128      	bne.n	8009440 <_printf_float+0x178>
 80093ee:	1cc8      	adds	r0, r1, #3
 80093f0:	db02      	blt.n	80093f8 <_printf_float+0x130>
 80093f2:	6863      	ldr	r3, [r4, #4]
 80093f4:	4299      	cmp	r1, r3
 80093f6:	dd40      	ble.n	800947a <_printf_float+0x1b2>
 80093f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80093fc:	fa5f fa8a 	uxtb.w	sl, sl
 8009400:	4652      	mov	r2, sl
 8009402:	3901      	subs	r1, #1
 8009404:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009408:	910d      	str	r1, [sp, #52]	@ 0x34
 800940a:	f7ff ff23 	bl	8009254 <__exponent>
 800940e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009410:	4681      	mov	r9, r0
 8009412:	1813      	adds	r3, r2, r0
 8009414:	2a01      	cmp	r2, #1
 8009416:	6123      	str	r3, [r4, #16]
 8009418:	dc02      	bgt.n	8009420 <_printf_float+0x158>
 800941a:	6822      	ldr	r2, [r4, #0]
 800941c:	07d2      	lsls	r2, r2, #31
 800941e:	d501      	bpl.n	8009424 <_printf_float+0x15c>
 8009420:	3301      	adds	r3, #1
 8009422:	6123      	str	r3, [r4, #16]
 8009424:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009428:	2b00      	cmp	r3, #0
 800942a:	d09e      	beq.n	800936a <_printf_float+0xa2>
 800942c:	232d      	movs	r3, #45	@ 0x2d
 800942e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009432:	e79a      	b.n	800936a <_printf_float+0xa2>
 8009434:	2947      	cmp	r1, #71	@ 0x47
 8009436:	d1bf      	bne.n	80093b8 <_printf_float+0xf0>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1bd      	bne.n	80093b8 <_printf_float+0xf0>
 800943c:	2301      	movs	r3, #1
 800943e:	e7ba      	b.n	80093b6 <_printf_float+0xee>
 8009440:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009444:	d9dc      	bls.n	8009400 <_printf_float+0x138>
 8009446:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800944a:	d118      	bne.n	800947e <_printf_float+0x1b6>
 800944c:	2900      	cmp	r1, #0
 800944e:	6863      	ldr	r3, [r4, #4]
 8009450:	dd0b      	ble.n	800946a <_printf_float+0x1a2>
 8009452:	6121      	str	r1, [r4, #16]
 8009454:	b913      	cbnz	r3, 800945c <_printf_float+0x194>
 8009456:	6822      	ldr	r2, [r4, #0]
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d502      	bpl.n	8009462 <_printf_float+0x19a>
 800945c:	3301      	adds	r3, #1
 800945e:	440b      	add	r3, r1
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	f04f 0900 	mov.w	r9, #0
 8009466:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009468:	e7dc      	b.n	8009424 <_printf_float+0x15c>
 800946a:	b913      	cbnz	r3, 8009472 <_printf_float+0x1aa>
 800946c:	6822      	ldr	r2, [r4, #0]
 800946e:	07d2      	lsls	r2, r2, #31
 8009470:	d501      	bpl.n	8009476 <_printf_float+0x1ae>
 8009472:	3302      	adds	r3, #2
 8009474:	e7f4      	b.n	8009460 <_printf_float+0x198>
 8009476:	2301      	movs	r3, #1
 8009478:	e7f2      	b.n	8009460 <_printf_float+0x198>
 800947a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800947e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009480:	4299      	cmp	r1, r3
 8009482:	db05      	blt.n	8009490 <_printf_float+0x1c8>
 8009484:	6823      	ldr	r3, [r4, #0]
 8009486:	6121      	str	r1, [r4, #16]
 8009488:	07d8      	lsls	r0, r3, #31
 800948a:	d5ea      	bpl.n	8009462 <_printf_float+0x19a>
 800948c:	1c4b      	adds	r3, r1, #1
 800948e:	e7e7      	b.n	8009460 <_printf_float+0x198>
 8009490:	2900      	cmp	r1, #0
 8009492:	bfcc      	ite	gt
 8009494:	2201      	movgt	r2, #1
 8009496:	f1c1 0202 	rsble	r2, r1, #2
 800949a:	4413      	add	r3, r2
 800949c:	e7e0      	b.n	8009460 <_printf_float+0x198>
 800949e:	6823      	ldr	r3, [r4, #0]
 80094a0:	055a      	lsls	r2, r3, #21
 80094a2:	d407      	bmi.n	80094b4 <_printf_float+0x1ec>
 80094a4:	6923      	ldr	r3, [r4, #16]
 80094a6:	4642      	mov	r2, r8
 80094a8:	4631      	mov	r1, r6
 80094aa:	4628      	mov	r0, r5
 80094ac:	47b8      	blx	r7
 80094ae:	3001      	adds	r0, #1
 80094b0:	d12b      	bne.n	800950a <_printf_float+0x242>
 80094b2:	e764      	b.n	800937e <_printf_float+0xb6>
 80094b4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80094b8:	f240 80dc 	bls.w	8009674 <_printf_float+0x3ac>
 80094bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80094c0:	2200      	movs	r2, #0
 80094c2:	2300      	movs	r3, #0
 80094c4:	f7f7 fa70 	bl	80009a8 <__aeabi_dcmpeq>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d033      	beq.n	8009534 <_printf_float+0x26c>
 80094cc:	2301      	movs	r3, #1
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	4a35      	ldr	r2, [pc, #212]	@ (80095a8 <_printf_float+0x2e0>)
 80094d4:	47b8      	blx	r7
 80094d6:	3001      	adds	r0, #1
 80094d8:	f43f af51 	beq.w	800937e <_printf_float+0xb6>
 80094dc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80094e0:	4543      	cmp	r3, r8
 80094e2:	db02      	blt.n	80094ea <_printf_float+0x222>
 80094e4:	6823      	ldr	r3, [r4, #0]
 80094e6:	07d8      	lsls	r0, r3, #31
 80094e8:	d50f      	bpl.n	800950a <_printf_float+0x242>
 80094ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094ee:	4631      	mov	r1, r6
 80094f0:	4628      	mov	r0, r5
 80094f2:	47b8      	blx	r7
 80094f4:	3001      	adds	r0, #1
 80094f6:	f43f af42 	beq.w	800937e <_printf_float+0xb6>
 80094fa:	f04f 0900 	mov.w	r9, #0
 80094fe:	f108 38ff 	add.w	r8, r8, #4294967295
 8009502:	f104 0a1a 	add.w	sl, r4, #26
 8009506:	45c8      	cmp	r8, r9
 8009508:	dc09      	bgt.n	800951e <_printf_float+0x256>
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	079b      	lsls	r3, r3, #30
 800950e:	f100 8102 	bmi.w	8009716 <_printf_float+0x44e>
 8009512:	68e0      	ldr	r0, [r4, #12]
 8009514:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009516:	4298      	cmp	r0, r3
 8009518:	bfb8      	it	lt
 800951a:	4618      	movlt	r0, r3
 800951c:	e731      	b.n	8009382 <_printf_float+0xba>
 800951e:	2301      	movs	r3, #1
 8009520:	4652      	mov	r2, sl
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f af28 	beq.w	800937e <_printf_float+0xb6>
 800952e:	f109 0901 	add.w	r9, r9, #1
 8009532:	e7e8      	b.n	8009506 <_printf_float+0x23e>
 8009534:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009536:	2b00      	cmp	r3, #0
 8009538:	dc38      	bgt.n	80095ac <_printf_float+0x2e4>
 800953a:	2301      	movs	r3, #1
 800953c:	4631      	mov	r1, r6
 800953e:	4628      	mov	r0, r5
 8009540:	4a19      	ldr	r2, [pc, #100]	@ (80095a8 <_printf_float+0x2e0>)
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	f43f af1a 	beq.w	800937e <_printf_float+0xb6>
 800954a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800954e:	ea59 0303 	orrs.w	r3, r9, r3
 8009552:	d102      	bne.n	800955a <_printf_float+0x292>
 8009554:	6823      	ldr	r3, [r4, #0]
 8009556:	07d9      	lsls	r1, r3, #31
 8009558:	d5d7      	bpl.n	800950a <_printf_float+0x242>
 800955a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800955e:	4631      	mov	r1, r6
 8009560:	4628      	mov	r0, r5
 8009562:	47b8      	blx	r7
 8009564:	3001      	adds	r0, #1
 8009566:	f43f af0a 	beq.w	800937e <_printf_float+0xb6>
 800956a:	f04f 0a00 	mov.w	sl, #0
 800956e:	f104 0b1a 	add.w	fp, r4, #26
 8009572:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009574:	425b      	negs	r3, r3
 8009576:	4553      	cmp	r3, sl
 8009578:	dc01      	bgt.n	800957e <_printf_float+0x2b6>
 800957a:	464b      	mov	r3, r9
 800957c:	e793      	b.n	80094a6 <_printf_float+0x1de>
 800957e:	2301      	movs	r3, #1
 8009580:	465a      	mov	r2, fp
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f aef8 	beq.w	800937e <_printf_float+0xb6>
 800958e:	f10a 0a01 	add.w	sl, sl, #1
 8009592:	e7ee      	b.n	8009572 <_printf_float+0x2aa>
 8009594:	7fefffff 	.word	0x7fefffff
 8009598:	0800bd20 	.word	0x0800bd20
 800959c:	0800bd24 	.word	0x0800bd24
 80095a0:	0800bd28 	.word	0x0800bd28
 80095a4:	0800bd2c 	.word	0x0800bd2c
 80095a8:	0800bd30 	.word	0x0800bd30
 80095ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095ae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80095b2:	4553      	cmp	r3, sl
 80095b4:	bfa8      	it	ge
 80095b6:	4653      	movge	r3, sl
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	4699      	mov	r9, r3
 80095bc:	dc36      	bgt.n	800962c <_printf_float+0x364>
 80095be:	f04f 0b00 	mov.w	fp, #0
 80095c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80095c6:	f104 021a 	add.w	r2, r4, #26
 80095ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80095cc:	930a      	str	r3, [sp, #40]	@ 0x28
 80095ce:	eba3 0309 	sub.w	r3, r3, r9
 80095d2:	455b      	cmp	r3, fp
 80095d4:	dc31      	bgt.n	800963a <_printf_float+0x372>
 80095d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095d8:	459a      	cmp	sl, r3
 80095da:	dc3a      	bgt.n	8009652 <_printf_float+0x38a>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	07da      	lsls	r2, r3, #31
 80095e0:	d437      	bmi.n	8009652 <_printf_float+0x38a>
 80095e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095e4:	ebaa 0903 	sub.w	r9, sl, r3
 80095e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80095ea:	ebaa 0303 	sub.w	r3, sl, r3
 80095ee:	4599      	cmp	r9, r3
 80095f0:	bfa8      	it	ge
 80095f2:	4699      	movge	r9, r3
 80095f4:	f1b9 0f00 	cmp.w	r9, #0
 80095f8:	dc33      	bgt.n	8009662 <_printf_float+0x39a>
 80095fa:	f04f 0800 	mov.w	r8, #0
 80095fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009602:	f104 0b1a 	add.w	fp, r4, #26
 8009606:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009608:	ebaa 0303 	sub.w	r3, sl, r3
 800960c:	eba3 0309 	sub.w	r3, r3, r9
 8009610:	4543      	cmp	r3, r8
 8009612:	f77f af7a 	ble.w	800950a <_printf_float+0x242>
 8009616:	2301      	movs	r3, #1
 8009618:	465a      	mov	r2, fp
 800961a:	4631      	mov	r1, r6
 800961c:	4628      	mov	r0, r5
 800961e:	47b8      	blx	r7
 8009620:	3001      	adds	r0, #1
 8009622:	f43f aeac 	beq.w	800937e <_printf_float+0xb6>
 8009626:	f108 0801 	add.w	r8, r8, #1
 800962a:	e7ec      	b.n	8009606 <_printf_float+0x33e>
 800962c:	4642      	mov	r2, r8
 800962e:	4631      	mov	r1, r6
 8009630:	4628      	mov	r0, r5
 8009632:	47b8      	blx	r7
 8009634:	3001      	adds	r0, #1
 8009636:	d1c2      	bne.n	80095be <_printf_float+0x2f6>
 8009638:	e6a1      	b.n	800937e <_printf_float+0xb6>
 800963a:	2301      	movs	r3, #1
 800963c:	4631      	mov	r1, r6
 800963e:	4628      	mov	r0, r5
 8009640:	920a      	str	r2, [sp, #40]	@ 0x28
 8009642:	47b8      	blx	r7
 8009644:	3001      	adds	r0, #1
 8009646:	f43f ae9a 	beq.w	800937e <_printf_float+0xb6>
 800964a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800964c:	f10b 0b01 	add.w	fp, fp, #1
 8009650:	e7bb      	b.n	80095ca <_printf_float+0x302>
 8009652:	4631      	mov	r1, r6
 8009654:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009658:	4628      	mov	r0, r5
 800965a:	47b8      	blx	r7
 800965c:	3001      	adds	r0, #1
 800965e:	d1c0      	bne.n	80095e2 <_printf_float+0x31a>
 8009660:	e68d      	b.n	800937e <_printf_float+0xb6>
 8009662:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009664:	464b      	mov	r3, r9
 8009666:	4631      	mov	r1, r6
 8009668:	4628      	mov	r0, r5
 800966a:	4442      	add	r2, r8
 800966c:	47b8      	blx	r7
 800966e:	3001      	adds	r0, #1
 8009670:	d1c3      	bne.n	80095fa <_printf_float+0x332>
 8009672:	e684      	b.n	800937e <_printf_float+0xb6>
 8009674:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009678:	f1ba 0f01 	cmp.w	sl, #1
 800967c:	dc01      	bgt.n	8009682 <_printf_float+0x3ba>
 800967e:	07db      	lsls	r3, r3, #31
 8009680:	d536      	bpl.n	80096f0 <_printf_float+0x428>
 8009682:	2301      	movs	r3, #1
 8009684:	4642      	mov	r2, r8
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	f43f ae76 	beq.w	800937e <_printf_float+0xb6>
 8009692:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009696:	4631      	mov	r1, r6
 8009698:	4628      	mov	r0, r5
 800969a:	47b8      	blx	r7
 800969c:	3001      	adds	r0, #1
 800969e:	f43f ae6e 	beq.w	800937e <_printf_float+0xb6>
 80096a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80096a6:	2200      	movs	r2, #0
 80096a8:	2300      	movs	r3, #0
 80096aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096ae:	f7f7 f97b 	bl	80009a8 <__aeabi_dcmpeq>
 80096b2:	b9c0      	cbnz	r0, 80096e6 <_printf_float+0x41e>
 80096b4:	4653      	mov	r3, sl
 80096b6:	f108 0201 	add.w	r2, r8, #1
 80096ba:	4631      	mov	r1, r6
 80096bc:	4628      	mov	r0, r5
 80096be:	47b8      	blx	r7
 80096c0:	3001      	adds	r0, #1
 80096c2:	d10c      	bne.n	80096de <_printf_float+0x416>
 80096c4:	e65b      	b.n	800937e <_printf_float+0xb6>
 80096c6:	2301      	movs	r3, #1
 80096c8:	465a      	mov	r2, fp
 80096ca:	4631      	mov	r1, r6
 80096cc:	4628      	mov	r0, r5
 80096ce:	47b8      	blx	r7
 80096d0:	3001      	adds	r0, #1
 80096d2:	f43f ae54 	beq.w	800937e <_printf_float+0xb6>
 80096d6:	f108 0801 	add.w	r8, r8, #1
 80096da:	45d0      	cmp	r8, sl
 80096dc:	dbf3      	blt.n	80096c6 <_printf_float+0x3fe>
 80096de:	464b      	mov	r3, r9
 80096e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80096e4:	e6e0      	b.n	80094a8 <_printf_float+0x1e0>
 80096e6:	f04f 0800 	mov.w	r8, #0
 80096ea:	f104 0b1a 	add.w	fp, r4, #26
 80096ee:	e7f4      	b.n	80096da <_printf_float+0x412>
 80096f0:	2301      	movs	r3, #1
 80096f2:	4642      	mov	r2, r8
 80096f4:	e7e1      	b.n	80096ba <_printf_float+0x3f2>
 80096f6:	2301      	movs	r3, #1
 80096f8:	464a      	mov	r2, r9
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f ae3c 	beq.w	800937e <_printf_float+0xb6>
 8009706:	f108 0801 	add.w	r8, r8, #1
 800970a:	68e3      	ldr	r3, [r4, #12]
 800970c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800970e:	1a5b      	subs	r3, r3, r1
 8009710:	4543      	cmp	r3, r8
 8009712:	dcf0      	bgt.n	80096f6 <_printf_float+0x42e>
 8009714:	e6fd      	b.n	8009512 <_printf_float+0x24a>
 8009716:	f04f 0800 	mov.w	r8, #0
 800971a:	f104 0919 	add.w	r9, r4, #25
 800971e:	e7f4      	b.n	800970a <_printf_float+0x442>

08009720 <_printf_common>:
 8009720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009724:	4616      	mov	r6, r2
 8009726:	4698      	mov	r8, r3
 8009728:	688a      	ldr	r2, [r1, #8]
 800972a:	690b      	ldr	r3, [r1, #16]
 800972c:	4607      	mov	r7, r0
 800972e:	4293      	cmp	r3, r2
 8009730:	bfb8      	it	lt
 8009732:	4613      	movlt	r3, r2
 8009734:	6033      	str	r3, [r6, #0]
 8009736:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800973a:	460c      	mov	r4, r1
 800973c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009740:	b10a      	cbz	r2, 8009746 <_printf_common+0x26>
 8009742:	3301      	adds	r3, #1
 8009744:	6033      	str	r3, [r6, #0]
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	0699      	lsls	r1, r3, #26
 800974a:	bf42      	ittt	mi
 800974c:	6833      	ldrmi	r3, [r6, #0]
 800974e:	3302      	addmi	r3, #2
 8009750:	6033      	strmi	r3, [r6, #0]
 8009752:	6825      	ldr	r5, [r4, #0]
 8009754:	f015 0506 	ands.w	r5, r5, #6
 8009758:	d106      	bne.n	8009768 <_printf_common+0x48>
 800975a:	f104 0a19 	add.w	sl, r4, #25
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	6832      	ldr	r2, [r6, #0]
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	42ab      	cmp	r3, r5
 8009766:	dc2b      	bgt.n	80097c0 <_printf_common+0xa0>
 8009768:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800976c:	6822      	ldr	r2, [r4, #0]
 800976e:	3b00      	subs	r3, #0
 8009770:	bf18      	it	ne
 8009772:	2301      	movne	r3, #1
 8009774:	0692      	lsls	r2, r2, #26
 8009776:	d430      	bmi.n	80097da <_printf_common+0xba>
 8009778:	4641      	mov	r1, r8
 800977a:	4638      	mov	r0, r7
 800977c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009780:	47c8      	blx	r9
 8009782:	3001      	adds	r0, #1
 8009784:	d023      	beq.n	80097ce <_printf_common+0xae>
 8009786:	6823      	ldr	r3, [r4, #0]
 8009788:	6922      	ldr	r2, [r4, #16]
 800978a:	f003 0306 	and.w	r3, r3, #6
 800978e:	2b04      	cmp	r3, #4
 8009790:	bf14      	ite	ne
 8009792:	2500      	movne	r5, #0
 8009794:	6833      	ldreq	r3, [r6, #0]
 8009796:	f04f 0600 	mov.w	r6, #0
 800979a:	bf08      	it	eq
 800979c:	68e5      	ldreq	r5, [r4, #12]
 800979e:	f104 041a 	add.w	r4, r4, #26
 80097a2:	bf08      	it	eq
 80097a4:	1aed      	subeq	r5, r5, r3
 80097a6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80097aa:	bf08      	it	eq
 80097ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80097b0:	4293      	cmp	r3, r2
 80097b2:	bfc4      	itt	gt
 80097b4:	1a9b      	subgt	r3, r3, r2
 80097b6:	18ed      	addgt	r5, r5, r3
 80097b8:	42b5      	cmp	r5, r6
 80097ba:	d11a      	bne.n	80097f2 <_printf_common+0xd2>
 80097bc:	2000      	movs	r0, #0
 80097be:	e008      	b.n	80097d2 <_printf_common+0xb2>
 80097c0:	2301      	movs	r3, #1
 80097c2:	4652      	mov	r2, sl
 80097c4:	4641      	mov	r1, r8
 80097c6:	4638      	mov	r0, r7
 80097c8:	47c8      	blx	r9
 80097ca:	3001      	adds	r0, #1
 80097cc:	d103      	bne.n	80097d6 <_printf_common+0xb6>
 80097ce:	f04f 30ff 	mov.w	r0, #4294967295
 80097d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097d6:	3501      	adds	r5, #1
 80097d8:	e7c1      	b.n	800975e <_printf_common+0x3e>
 80097da:	2030      	movs	r0, #48	@ 0x30
 80097dc:	18e1      	adds	r1, r4, r3
 80097de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80097e2:	1c5a      	adds	r2, r3, #1
 80097e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80097e8:	4422      	add	r2, r4
 80097ea:	3302      	adds	r3, #2
 80097ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80097f0:	e7c2      	b.n	8009778 <_printf_common+0x58>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4622      	mov	r2, r4
 80097f6:	4641      	mov	r1, r8
 80097f8:	4638      	mov	r0, r7
 80097fa:	47c8      	blx	r9
 80097fc:	3001      	adds	r0, #1
 80097fe:	d0e6      	beq.n	80097ce <_printf_common+0xae>
 8009800:	3601      	adds	r6, #1
 8009802:	e7d9      	b.n	80097b8 <_printf_common+0x98>

08009804 <_printf_i>:
 8009804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009808:	7e0f      	ldrb	r7, [r1, #24]
 800980a:	4691      	mov	r9, r2
 800980c:	2f78      	cmp	r7, #120	@ 0x78
 800980e:	4680      	mov	r8, r0
 8009810:	460c      	mov	r4, r1
 8009812:	469a      	mov	sl, r3
 8009814:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800981a:	d807      	bhi.n	800982c <_printf_i+0x28>
 800981c:	2f62      	cmp	r7, #98	@ 0x62
 800981e:	d80a      	bhi.n	8009836 <_printf_i+0x32>
 8009820:	2f00      	cmp	r7, #0
 8009822:	f000 80d3 	beq.w	80099cc <_printf_i+0x1c8>
 8009826:	2f58      	cmp	r7, #88	@ 0x58
 8009828:	f000 80ba 	beq.w	80099a0 <_printf_i+0x19c>
 800982c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009834:	e03a      	b.n	80098ac <_printf_i+0xa8>
 8009836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800983a:	2b15      	cmp	r3, #21
 800983c:	d8f6      	bhi.n	800982c <_printf_i+0x28>
 800983e:	a101      	add	r1, pc, #4	@ (adr r1, 8009844 <_printf_i+0x40>)
 8009840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009844:	0800989d 	.word	0x0800989d
 8009848:	080098b1 	.word	0x080098b1
 800984c:	0800982d 	.word	0x0800982d
 8009850:	0800982d 	.word	0x0800982d
 8009854:	0800982d 	.word	0x0800982d
 8009858:	0800982d 	.word	0x0800982d
 800985c:	080098b1 	.word	0x080098b1
 8009860:	0800982d 	.word	0x0800982d
 8009864:	0800982d 	.word	0x0800982d
 8009868:	0800982d 	.word	0x0800982d
 800986c:	0800982d 	.word	0x0800982d
 8009870:	080099b3 	.word	0x080099b3
 8009874:	080098db 	.word	0x080098db
 8009878:	0800996d 	.word	0x0800996d
 800987c:	0800982d 	.word	0x0800982d
 8009880:	0800982d 	.word	0x0800982d
 8009884:	080099d5 	.word	0x080099d5
 8009888:	0800982d 	.word	0x0800982d
 800988c:	080098db 	.word	0x080098db
 8009890:	0800982d 	.word	0x0800982d
 8009894:	0800982d 	.word	0x0800982d
 8009898:	08009975 	.word	0x08009975
 800989c:	6833      	ldr	r3, [r6, #0]
 800989e:	1d1a      	adds	r2, r3, #4
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6032      	str	r2, [r6, #0]
 80098a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80098a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80098ac:	2301      	movs	r3, #1
 80098ae:	e09e      	b.n	80099ee <_printf_i+0x1ea>
 80098b0:	6833      	ldr	r3, [r6, #0]
 80098b2:	6820      	ldr	r0, [r4, #0]
 80098b4:	1d19      	adds	r1, r3, #4
 80098b6:	6031      	str	r1, [r6, #0]
 80098b8:	0606      	lsls	r6, r0, #24
 80098ba:	d501      	bpl.n	80098c0 <_printf_i+0xbc>
 80098bc:	681d      	ldr	r5, [r3, #0]
 80098be:	e003      	b.n	80098c8 <_printf_i+0xc4>
 80098c0:	0645      	lsls	r5, r0, #25
 80098c2:	d5fb      	bpl.n	80098bc <_printf_i+0xb8>
 80098c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	da03      	bge.n	80098d4 <_printf_i+0xd0>
 80098cc:	232d      	movs	r3, #45	@ 0x2d
 80098ce:	426d      	negs	r5, r5
 80098d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80098d4:	230a      	movs	r3, #10
 80098d6:	4859      	ldr	r0, [pc, #356]	@ (8009a3c <_printf_i+0x238>)
 80098d8:	e011      	b.n	80098fe <_printf_i+0xfa>
 80098da:	6821      	ldr	r1, [r4, #0]
 80098dc:	6833      	ldr	r3, [r6, #0]
 80098de:	0608      	lsls	r0, r1, #24
 80098e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80098e4:	d402      	bmi.n	80098ec <_printf_i+0xe8>
 80098e6:	0649      	lsls	r1, r1, #25
 80098e8:	bf48      	it	mi
 80098ea:	b2ad      	uxthmi	r5, r5
 80098ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80098ee:	6033      	str	r3, [r6, #0]
 80098f0:	bf14      	ite	ne
 80098f2:	230a      	movne	r3, #10
 80098f4:	2308      	moveq	r3, #8
 80098f6:	4851      	ldr	r0, [pc, #324]	@ (8009a3c <_printf_i+0x238>)
 80098f8:	2100      	movs	r1, #0
 80098fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80098fe:	6866      	ldr	r6, [r4, #4]
 8009900:	2e00      	cmp	r6, #0
 8009902:	bfa8      	it	ge
 8009904:	6821      	ldrge	r1, [r4, #0]
 8009906:	60a6      	str	r6, [r4, #8]
 8009908:	bfa4      	itt	ge
 800990a:	f021 0104 	bicge.w	r1, r1, #4
 800990e:	6021      	strge	r1, [r4, #0]
 8009910:	b90d      	cbnz	r5, 8009916 <_printf_i+0x112>
 8009912:	2e00      	cmp	r6, #0
 8009914:	d04b      	beq.n	80099ae <_printf_i+0x1aa>
 8009916:	4616      	mov	r6, r2
 8009918:	fbb5 f1f3 	udiv	r1, r5, r3
 800991c:	fb03 5711 	mls	r7, r3, r1, r5
 8009920:	5dc7      	ldrb	r7, [r0, r7]
 8009922:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009926:	462f      	mov	r7, r5
 8009928:	42bb      	cmp	r3, r7
 800992a:	460d      	mov	r5, r1
 800992c:	d9f4      	bls.n	8009918 <_printf_i+0x114>
 800992e:	2b08      	cmp	r3, #8
 8009930:	d10b      	bne.n	800994a <_printf_i+0x146>
 8009932:	6823      	ldr	r3, [r4, #0]
 8009934:	07df      	lsls	r7, r3, #31
 8009936:	d508      	bpl.n	800994a <_printf_i+0x146>
 8009938:	6923      	ldr	r3, [r4, #16]
 800993a:	6861      	ldr	r1, [r4, #4]
 800993c:	4299      	cmp	r1, r3
 800993e:	bfde      	ittt	le
 8009940:	2330      	movle	r3, #48	@ 0x30
 8009942:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009946:	f106 36ff 	addle.w	r6, r6, #4294967295
 800994a:	1b92      	subs	r2, r2, r6
 800994c:	6122      	str	r2, [r4, #16]
 800994e:	464b      	mov	r3, r9
 8009950:	4621      	mov	r1, r4
 8009952:	4640      	mov	r0, r8
 8009954:	f8cd a000 	str.w	sl, [sp]
 8009958:	aa03      	add	r2, sp, #12
 800995a:	f7ff fee1 	bl	8009720 <_printf_common>
 800995e:	3001      	adds	r0, #1
 8009960:	d14a      	bne.n	80099f8 <_printf_i+0x1f4>
 8009962:	f04f 30ff 	mov.w	r0, #4294967295
 8009966:	b004      	add	sp, #16
 8009968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996c:	6823      	ldr	r3, [r4, #0]
 800996e:	f043 0320 	orr.w	r3, r3, #32
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	2778      	movs	r7, #120	@ 0x78
 8009976:	4832      	ldr	r0, [pc, #200]	@ (8009a40 <_printf_i+0x23c>)
 8009978:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	6831      	ldr	r1, [r6, #0]
 8009980:	061f      	lsls	r7, r3, #24
 8009982:	f851 5b04 	ldr.w	r5, [r1], #4
 8009986:	d402      	bmi.n	800998e <_printf_i+0x18a>
 8009988:	065f      	lsls	r7, r3, #25
 800998a:	bf48      	it	mi
 800998c:	b2ad      	uxthmi	r5, r5
 800998e:	6031      	str	r1, [r6, #0]
 8009990:	07d9      	lsls	r1, r3, #31
 8009992:	bf44      	itt	mi
 8009994:	f043 0320 	orrmi.w	r3, r3, #32
 8009998:	6023      	strmi	r3, [r4, #0]
 800999a:	b11d      	cbz	r5, 80099a4 <_printf_i+0x1a0>
 800999c:	2310      	movs	r3, #16
 800999e:	e7ab      	b.n	80098f8 <_printf_i+0xf4>
 80099a0:	4826      	ldr	r0, [pc, #152]	@ (8009a3c <_printf_i+0x238>)
 80099a2:	e7e9      	b.n	8009978 <_printf_i+0x174>
 80099a4:	6823      	ldr	r3, [r4, #0]
 80099a6:	f023 0320 	bic.w	r3, r3, #32
 80099aa:	6023      	str	r3, [r4, #0]
 80099ac:	e7f6      	b.n	800999c <_printf_i+0x198>
 80099ae:	4616      	mov	r6, r2
 80099b0:	e7bd      	b.n	800992e <_printf_i+0x12a>
 80099b2:	6833      	ldr	r3, [r6, #0]
 80099b4:	6825      	ldr	r5, [r4, #0]
 80099b6:	1d18      	adds	r0, r3, #4
 80099b8:	6961      	ldr	r1, [r4, #20]
 80099ba:	6030      	str	r0, [r6, #0]
 80099bc:	062e      	lsls	r6, r5, #24
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	d501      	bpl.n	80099c6 <_printf_i+0x1c2>
 80099c2:	6019      	str	r1, [r3, #0]
 80099c4:	e002      	b.n	80099cc <_printf_i+0x1c8>
 80099c6:	0668      	lsls	r0, r5, #25
 80099c8:	d5fb      	bpl.n	80099c2 <_printf_i+0x1be>
 80099ca:	8019      	strh	r1, [r3, #0]
 80099cc:	2300      	movs	r3, #0
 80099ce:	4616      	mov	r6, r2
 80099d0:	6123      	str	r3, [r4, #16]
 80099d2:	e7bc      	b.n	800994e <_printf_i+0x14a>
 80099d4:	6833      	ldr	r3, [r6, #0]
 80099d6:	2100      	movs	r1, #0
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	6032      	str	r2, [r6, #0]
 80099dc:	681e      	ldr	r6, [r3, #0]
 80099de:	6862      	ldr	r2, [r4, #4]
 80099e0:	4630      	mov	r0, r6
 80099e2:	f000 f9c4 	bl	8009d6e <memchr>
 80099e6:	b108      	cbz	r0, 80099ec <_printf_i+0x1e8>
 80099e8:	1b80      	subs	r0, r0, r6
 80099ea:	6060      	str	r0, [r4, #4]
 80099ec:	6863      	ldr	r3, [r4, #4]
 80099ee:	6123      	str	r3, [r4, #16]
 80099f0:	2300      	movs	r3, #0
 80099f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80099f6:	e7aa      	b.n	800994e <_printf_i+0x14a>
 80099f8:	4632      	mov	r2, r6
 80099fa:	4649      	mov	r1, r9
 80099fc:	4640      	mov	r0, r8
 80099fe:	6923      	ldr	r3, [r4, #16]
 8009a00:	47d0      	blx	sl
 8009a02:	3001      	adds	r0, #1
 8009a04:	d0ad      	beq.n	8009962 <_printf_i+0x15e>
 8009a06:	6823      	ldr	r3, [r4, #0]
 8009a08:	079b      	lsls	r3, r3, #30
 8009a0a:	d413      	bmi.n	8009a34 <_printf_i+0x230>
 8009a0c:	68e0      	ldr	r0, [r4, #12]
 8009a0e:	9b03      	ldr	r3, [sp, #12]
 8009a10:	4298      	cmp	r0, r3
 8009a12:	bfb8      	it	lt
 8009a14:	4618      	movlt	r0, r3
 8009a16:	e7a6      	b.n	8009966 <_printf_i+0x162>
 8009a18:	2301      	movs	r3, #1
 8009a1a:	4632      	mov	r2, r6
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	4640      	mov	r0, r8
 8009a20:	47d0      	blx	sl
 8009a22:	3001      	adds	r0, #1
 8009a24:	d09d      	beq.n	8009962 <_printf_i+0x15e>
 8009a26:	3501      	adds	r5, #1
 8009a28:	68e3      	ldr	r3, [r4, #12]
 8009a2a:	9903      	ldr	r1, [sp, #12]
 8009a2c:	1a5b      	subs	r3, r3, r1
 8009a2e:	42ab      	cmp	r3, r5
 8009a30:	dcf2      	bgt.n	8009a18 <_printf_i+0x214>
 8009a32:	e7eb      	b.n	8009a0c <_printf_i+0x208>
 8009a34:	2500      	movs	r5, #0
 8009a36:	f104 0619 	add.w	r6, r4, #25
 8009a3a:	e7f5      	b.n	8009a28 <_printf_i+0x224>
 8009a3c:	0800bd32 	.word	0x0800bd32
 8009a40:	0800bd43 	.word	0x0800bd43

08009a44 <std>:
 8009a44:	2300      	movs	r3, #0
 8009a46:	b510      	push	{r4, lr}
 8009a48:	4604      	mov	r4, r0
 8009a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a52:	6083      	str	r3, [r0, #8]
 8009a54:	8181      	strh	r1, [r0, #12]
 8009a56:	6643      	str	r3, [r0, #100]	@ 0x64
 8009a58:	81c2      	strh	r2, [r0, #14]
 8009a5a:	6183      	str	r3, [r0, #24]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	2208      	movs	r2, #8
 8009a60:	305c      	adds	r0, #92	@ 0x5c
 8009a62:	f000 f8f4 	bl	8009c4e <memset>
 8009a66:	4b0d      	ldr	r3, [pc, #52]	@ (8009a9c <std+0x58>)
 8009a68:	6224      	str	r4, [r4, #32]
 8009a6a:	6263      	str	r3, [r4, #36]	@ 0x24
 8009a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa0 <std+0x5c>)
 8009a6e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009a70:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa4 <std+0x60>)
 8009a72:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009a74:	4b0c      	ldr	r3, [pc, #48]	@ (8009aa8 <std+0x64>)
 8009a76:	6323      	str	r3, [r4, #48]	@ 0x30
 8009a78:	4b0c      	ldr	r3, [pc, #48]	@ (8009aac <std+0x68>)
 8009a7a:	429c      	cmp	r4, r3
 8009a7c:	d006      	beq.n	8009a8c <std+0x48>
 8009a7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009a82:	4294      	cmp	r4, r2
 8009a84:	d002      	beq.n	8009a8c <std+0x48>
 8009a86:	33d0      	adds	r3, #208	@ 0xd0
 8009a88:	429c      	cmp	r4, r3
 8009a8a:	d105      	bne.n	8009a98 <std+0x54>
 8009a8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a94:	f000 b968 	b.w	8009d68 <__retarget_lock_init_recursive>
 8009a98:	bd10      	pop	{r4, pc}
 8009a9a:	bf00      	nop
 8009a9c:	08009bc9 	.word	0x08009bc9
 8009aa0:	08009beb 	.word	0x08009beb
 8009aa4:	08009c23 	.word	0x08009c23
 8009aa8:	08009c47 	.word	0x08009c47
 8009aac:	20000618 	.word	0x20000618

08009ab0 <stdio_exit_handler>:
 8009ab0:	4a02      	ldr	r2, [pc, #8]	@ (8009abc <stdio_exit_handler+0xc>)
 8009ab2:	4903      	ldr	r1, [pc, #12]	@ (8009ac0 <stdio_exit_handler+0x10>)
 8009ab4:	4803      	ldr	r0, [pc, #12]	@ (8009ac4 <stdio_exit_handler+0x14>)
 8009ab6:	f000 b869 	b.w	8009b8c <_fwalk_sglue>
 8009aba:	bf00      	nop
 8009abc:	20000040 	.word	0x20000040
 8009ac0:	0800b2c1 	.word	0x0800b2c1
 8009ac4:	20000050 	.word	0x20000050

08009ac8 <cleanup_stdio>:
 8009ac8:	6841      	ldr	r1, [r0, #4]
 8009aca:	4b0c      	ldr	r3, [pc, #48]	@ (8009afc <cleanup_stdio+0x34>)
 8009acc:	b510      	push	{r4, lr}
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	d001      	beq.n	8009ad8 <cleanup_stdio+0x10>
 8009ad4:	f001 fbf4 	bl	800b2c0 <_fflush_r>
 8009ad8:	68a1      	ldr	r1, [r4, #8]
 8009ada:	4b09      	ldr	r3, [pc, #36]	@ (8009b00 <cleanup_stdio+0x38>)
 8009adc:	4299      	cmp	r1, r3
 8009ade:	d002      	beq.n	8009ae6 <cleanup_stdio+0x1e>
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	f001 fbed 	bl	800b2c0 <_fflush_r>
 8009ae6:	68e1      	ldr	r1, [r4, #12]
 8009ae8:	4b06      	ldr	r3, [pc, #24]	@ (8009b04 <cleanup_stdio+0x3c>)
 8009aea:	4299      	cmp	r1, r3
 8009aec:	d004      	beq.n	8009af8 <cleanup_stdio+0x30>
 8009aee:	4620      	mov	r0, r4
 8009af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009af4:	f001 bbe4 	b.w	800b2c0 <_fflush_r>
 8009af8:	bd10      	pop	{r4, pc}
 8009afa:	bf00      	nop
 8009afc:	20000618 	.word	0x20000618
 8009b00:	20000680 	.word	0x20000680
 8009b04:	200006e8 	.word	0x200006e8

08009b08 <global_stdio_init.part.0>:
 8009b08:	b510      	push	{r4, lr}
 8009b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009b38 <global_stdio_init.part.0+0x30>)
 8009b0c:	4c0b      	ldr	r4, [pc, #44]	@ (8009b3c <global_stdio_init.part.0+0x34>)
 8009b0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009b40 <global_stdio_init.part.0+0x38>)
 8009b10:	4620      	mov	r0, r4
 8009b12:	601a      	str	r2, [r3, #0]
 8009b14:	2104      	movs	r1, #4
 8009b16:	2200      	movs	r2, #0
 8009b18:	f7ff ff94 	bl	8009a44 <std>
 8009b1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009b20:	2201      	movs	r2, #1
 8009b22:	2109      	movs	r1, #9
 8009b24:	f7ff ff8e 	bl	8009a44 <std>
 8009b28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b32:	2112      	movs	r1, #18
 8009b34:	f7ff bf86 	b.w	8009a44 <std>
 8009b38:	20000750 	.word	0x20000750
 8009b3c:	20000618 	.word	0x20000618
 8009b40:	08009ab1 	.word	0x08009ab1

08009b44 <__sfp_lock_acquire>:
 8009b44:	4801      	ldr	r0, [pc, #4]	@ (8009b4c <__sfp_lock_acquire+0x8>)
 8009b46:	f000 b910 	b.w	8009d6a <__retarget_lock_acquire_recursive>
 8009b4a:	bf00      	nop
 8009b4c:	20000759 	.word	0x20000759

08009b50 <__sfp_lock_release>:
 8009b50:	4801      	ldr	r0, [pc, #4]	@ (8009b58 <__sfp_lock_release+0x8>)
 8009b52:	f000 b90b 	b.w	8009d6c <__retarget_lock_release_recursive>
 8009b56:	bf00      	nop
 8009b58:	20000759 	.word	0x20000759

08009b5c <__sinit>:
 8009b5c:	b510      	push	{r4, lr}
 8009b5e:	4604      	mov	r4, r0
 8009b60:	f7ff fff0 	bl	8009b44 <__sfp_lock_acquire>
 8009b64:	6a23      	ldr	r3, [r4, #32]
 8009b66:	b11b      	cbz	r3, 8009b70 <__sinit+0x14>
 8009b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b6c:	f7ff bff0 	b.w	8009b50 <__sfp_lock_release>
 8009b70:	4b04      	ldr	r3, [pc, #16]	@ (8009b84 <__sinit+0x28>)
 8009b72:	6223      	str	r3, [r4, #32]
 8009b74:	4b04      	ldr	r3, [pc, #16]	@ (8009b88 <__sinit+0x2c>)
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d1f5      	bne.n	8009b68 <__sinit+0xc>
 8009b7c:	f7ff ffc4 	bl	8009b08 <global_stdio_init.part.0>
 8009b80:	e7f2      	b.n	8009b68 <__sinit+0xc>
 8009b82:	bf00      	nop
 8009b84:	08009ac9 	.word	0x08009ac9
 8009b88:	20000750 	.word	0x20000750

08009b8c <_fwalk_sglue>:
 8009b8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b90:	4607      	mov	r7, r0
 8009b92:	4688      	mov	r8, r1
 8009b94:	4614      	mov	r4, r2
 8009b96:	2600      	movs	r6, #0
 8009b98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b9c:	f1b9 0901 	subs.w	r9, r9, #1
 8009ba0:	d505      	bpl.n	8009bae <_fwalk_sglue+0x22>
 8009ba2:	6824      	ldr	r4, [r4, #0]
 8009ba4:	2c00      	cmp	r4, #0
 8009ba6:	d1f7      	bne.n	8009b98 <_fwalk_sglue+0xc>
 8009ba8:	4630      	mov	r0, r6
 8009baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bae:	89ab      	ldrh	r3, [r5, #12]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d907      	bls.n	8009bc4 <_fwalk_sglue+0x38>
 8009bb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bb8:	3301      	adds	r3, #1
 8009bba:	d003      	beq.n	8009bc4 <_fwalk_sglue+0x38>
 8009bbc:	4629      	mov	r1, r5
 8009bbe:	4638      	mov	r0, r7
 8009bc0:	47c0      	blx	r8
 8009bc2:	4306      	orrs	r6, r0
 8009bc4:	3568      	adds	r5, #104	@ 0x68
 8009bc6:	e7e9      	b.n	8009b9c <_fwalk_sglue+0x10>

08009bc8 <__sread>:
 8009bc8:	b510      	push	{r4, lr}
 8009bca:	460c      	mov	r4, r1
 8009bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bd0:	f000 f86c 	bl	8009cac <_read_r>
 8009bd4:	2800      	cmp	r0, #0
 8009bd6:	bfab      	itete	ge
 8009bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009bda:	89a3      	ldrhlt	r3, [r4, #12]
 8009bdc:	181b      	addge	r3, r3, r0
 8009bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009be2:	bfac      	ite	ge
 8009be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009be6:	81a3      	strhlt	r3, [r4, #12]
 8009be8:	bd10      	pop	{r4, pc}

08009bea <__swrite>:
 8009bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bee:	461f      	mov	r7, r3
 8009bf0:	898b      	ldrh	r3, [r1, #12]
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	05db      	lsls	r3, r3, #23
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	4616      	mov	r6, r2
 8009bfa:	d505      	bpl.n	8009c08 <__swrite+0x1e>
 8009bfc:	2302      	movs	r3, #2
 8009bfe:	2200      	movs	r2, #0
 8009c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c04:	f000 f840 	bl	8009c88 <_lseek_r>
 8009c08:	89a3      	ldrh	r3, [r4, #12]
 8009c0a:	4632      	mov	r2, r6
 8009c0c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c10:	81a3      	strh	r3, [r4, #12]
 8009c12:	4628      	mov	r0, r5
 8009c14:	463b      	mov	r3, r7
 8009c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c1e:	f000 b867 	b.w	8009cf0 <_write_r>

08009c22 <__sseek>:
 8009c22:	b510      	push	{r4, lr}
 8009c24:	460c      	mov	r4, r1
 8009c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c2a:	f000 f82d 	bl	8009c88 <_lseek_r>
 8009c2e:	1c43      	adds	r3, r0, #1
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	bf15      	itete	ne
 8009c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009c3e:	81a3      	strheq	r3, [r4, #12]
 8009c40:	bf18      	it	ne
 8009c42:	81a3      	strhne	r3, [r4, #12]
 8009c44:	bd10      	pop	{r4, pc}

08009c46 <__sclose>:
 8009c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c4a:	f000 b80d 	b.w	8009c68 <_close_r>

08009c4e <memset>:
 8009c4e:	4603      	mov	r3, r0
 8009c50:	4402      	add	r2, r0
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d100      	bne.n	8009c58 <memset+0xa>
 8009c56:	4770      	bx	lr
 8009c58:	f803 1b01 	strb.w	r1, [r3], #1
 8009c5c:	e7f9      	b.n	8009c52 <memset+0x4>
	...

08009c60 <_localeconv_r>:
 8009c60:	4800      	ldr	r0, [pc, #0]	@ (8009c64 <_localeconv_r+0x4>)
 8009c62:	4770      	bx	lr
 8009c64:	2000018c 	.word	0x2000018c

08009c68 <_close_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	4d05      	ldr	r5, [pc, #20]	@ (8009c84 <_close_r+0x1c>)
 8009c6e:	4604      	mov	r4, r0
 8009c70:	4608      	mov	r0, r1
 8009c72:	602b      	str	r3, [r5, #0]
 8009c74:	f7fa f9f3 	bl	800405e <_close>
 8009c78:	1c43      	adds	r3, r0, #1
 8009c7a:	d102      	bne.n	8009c82 <_close_r+0x1a>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	b103      	cbz	r3, 8009c82 <_close_r+0x1a>
 8009c80:	6023      	str	r3, [r4, #0]
 8009c82:	bd38      	pop	{r3, r4, r5, pc}
 8009c84:	20000754 	.word	0x20000754

08009c88 <_lseek_r>:
 8009c88:	b538      	push	{r3, r4, r5, lr}
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	2200      	movs	r2, #0
 8009c92:	4d05      	ldr	r5, [pc, #20]	@ (8009ca8 <_lseek_r+0x20>)
 8009c94:	602a      	str	r2, [r5, #0]
 8009c96:	461a      	mov	r2, r3
 8009c98:	f7fa fa05 	bl	80040a6 <_lseek>
 8009c9c:	1c43      	adds	r3, r0, #1
 8009c9e:	d102      	bne.n	8009ca6 <_lseek_r+0x1e>
 8009ca0:	682b      	ldr	r3, [r5, #0]
 8009ca2:	b103      	cbz	r3, 8009ca6 <_lseek_r+0x1e>
 8009ca4:	6023      	str	r3, [r4, #0]
 8009ca6:	bd38      	pop	{r3, r4, r5, pc}
 8009ca8:	20000754 	.word	0x20000754

08009cac <_read_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	4604      	mov	r4, r0
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4611      	mov	r1, r2
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	4d05      	ldr	r5, [pc, #20]	@ (8009ccc <_read_r+0x20>)
 8009cb8:	602a      	str	r2, [r5, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	f7fa f996 	bl	8003fec <_read>
 8009cc0:	1c43      	adds	r3, r0, #1
 8009cc2:	d102      	bne.n	8009cca <_read_r+0x1e>
 8009cc4:	682b      	ldr	r3, [r5, #0]
 8009cc6:	b103      	cbz	r3, 8009cca <_read_r+0x1e>
 8009cc8:	6023      	str	r3, [r4, #0]
 8009cca:	bd38      	pop	{r3, r4, r5, pc}
 8009ccc:	20000754 	.word	0x20000754

08009cd0 <_sbrk_r>:
 8009cd0:	b538      	push	{r3, r4, r5, lr}
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	4d05      	ldr	r5, [pc, #20]	@ (8009cec <_sbrk_r+0x1c>)
 8009cd6:	4604      	mov	r4, r0
 8009cd8:	4608      	mov	r0, r1
 8009cda:	602b      	str	r3, [r5, #0]
 8009cdc:	f7fa f9f0 	bl	80040c0 <_sbrk>
 8009ce0:	1c43      	adds	r3, r0, #1
 8009ce2:	d102      	bne.n	8009cea <_sbrk_r+0x1a>
 8009ce4:	682b      	ldr	r3, [r5, #0]
 8009ce6:	b103      	cbz	r3, 8009cea <_sbrk_r+0x1a>
 8009ce8:	6023      	str	r3, [r4, #0]
 8009cea:	bd38      	pop	{r3, r4, r5, pc}
 8009cec:	20000754 	.word	0x20000754

08009cf0 <_write_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	4d05      	ldr	r5, [pc, #20]	@ (8009d10 <_write_r+0x20>)
 8009cfc:	602a      	str	r2, [r5, #0]
 8009cfe:	461a      	mov	r2, r3
 8009d00:	f7fa f991 	bl	8004026 <_write>
 8009d04:	1c43      	adds	r3, r0, #1
 8009d06:	d102      	bne.n	8009d0e <_write_r+0x1e>
 8009d08:	682b      	ldr	r3, [r5, #0]
 8009d0a:	b103      	cbz	r3, 8009d0e <_write_r+0x1e>
 8009d0c:	6023      	str	r3, [r4, #0]
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	20000754 	.word	0x20000754

08009d14 <__errno>:
 8009d14:	4b01      	ldr	r3, [pc, #4]	@ (8009d1c <__errno+0x8>)
 8009d16:	6818      	ldr	r0, [r3, #0]
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	2000004c 	.word	0x2000004c

08009d20 <__libc_init_array>:
 8009d20:	b570      	push	{r4, r5, r6, lr}
 8009d22:	2600      	movs	r6, #0
 8009d24:	4d0c      	ldr	r5, [pc, #48]	@ (8009d58 <__libc_init_array+0x38>)
 8009d26:	4c0d      	ldr	r4, [pc, #52]	@ (8009d5c <__libc_init_array+0x3c>)
 8009d28:	1b64      	subs	r4, r4, r5
 8009d2a:	10a4      	asrs	r4, r4, #2
 8009d2c:	42a6      	cmp	r6, r4
 8009d2e:	d109      	bne.n	8009d44 <__libc_init_array+0x24>
 8009d30:	f001 fe02 	bl	800b938 <_init>
 8009d34:	2600      	movs	r6, #0
 8009d36:	4d0a      	ldr	r5, [pc, #40]	@ (8009d60 <__libc_init_array+0x40>)
 8009d38:	4c0a      	ldr	r4, [pc, #40]	@ (8009d64 <__libc_init_array+0x44>)
 8009d3a:	1b64      	subs	r4, r4, r5
 8009d3c:	10a4      	asrs	r4, r4, #2
 8009d3e:	42a6      	cmp	r6, r4
 8009d40:	d105      	bne.n	8009d4e <__libc_init_array+0x2e>
 8009d42:	bd70      	pop	{r4, r5, r6, pc}
 8009d44:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d48:	4798      	blx	r3
 8009d4a:	3601      	adds	r6, #1
 8009d4c:	e7ee      	b.n	8009d2c <__libc_init_array+0xc>
 8009d4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d52:	4798      	blx	r3
 8009d54:	3601      	adds	r6, #1
 8009d56:	e7f2      	b.n	8009d3e <__libc_init_array+0x1e>
 8009d58:	0800c098 	.word	0x0800c098
 8009d5c:	0800c098 	.word	0x0800c098
 8009d60:	0800c098 	.word	0x0800c098
 8009d64:	0800c0a0 	.word	0x0800c0a0

08009d68 <__retarget_lock_init_recursive>:
 8009d68:	4770      	bx	lr

08009d6a <__retarget_lock_acquire_recursive>:
 8009d6a:	4770      	bx	lr

08009d6c <__retarget_lock_release_recursive>:
 8009d6c:	4770      	bx	lr

08009d6e <memchr>:
 8009d6e:	4603      	mov	r3, r0
 8009d70:	b510      	push	{r4, lr}
 8009d72:	b2c9      	uxtb	r1, r1
 8009d74:	4402      	add	r2, r0
 8009d76:	4293      	cmp	r3, r2
 8009d78:	4618      	mov	r0, r3
 8009d7a:	d101      	bne.n	8009d80 <memchr+0x12>
 8009d7c:	2000      	movs	r0, #0
 8009d7e:	e003      	b.n	8009d88 <memchr+0x1a>
 8009d80:	7804      	ldrb	r4, [r0, #0]
 8009d82:	3301      	adds	r3, #1
 8009d84:	428c      	cmp	r4, r1
 8009d86:	d1f6      	bne.n	8009d76 <memchr+0x8>
 8009d88:	bd10      	pop	{r4, pc}

08009d8a <quorem>:
 8009d8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d8e:	6903      	ldr	r3, [r0, #16]
 8009d90:	690c      	ldr	r4, [r1, #16]
 8009d92:	4607      	mov	r7, r0
 8009d94:	42a3      	cmp	r3, r4
 8009d96:	db7e      	blt.n	8009e96 <quorem+0x10c>
 8009d98:	3c01      	subs	r4, #1
 8009d9a:	00a3      	lsls	r3, r4, #2
 8009d9c:	f100 0514 	add.w	r5, r0, #20
 8009da0:	f101 0814 	add.w	r8, r1, #20
 8009da4:	9300      	str	r3, [sp, #0]
 8009da6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009db0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009db4:	3301      	adds	r3, #1
 8009db6:	429a      	cmp	r2, r3
 8009db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009dbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009dc0:	d32e      	bcc.n	8009e20 <quorem+0x96>
 8009dc2:	f04f 0a00 	mov.w	sl, #0
 8009dc6:	46c4      	mov	ip, r8
 8009dc8:	46ae      	mov	lr, r5
 8009dca:	46d3      	mov	fp, sl
 8009dcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009dd0:	b298      	uxth	r0, r3
 8009dd2:	fb06 a000 	mla	r0, r6, r0, sl
 8009dd6:	0c1b      	lsrs	r3, r3, #16
 8009dd8:	0c02      	lsrs	r2, r0, #16
 8009dda:	fb06 2303 	mla	r3, r6, r3, r2
 8009dde:	f8de 2000 	ldr.w	r2, [lr]
 8009de2:	b280      	uxth	r0, r0
 8009de4:	b292      	uxth	r2, r2
 8009de6:	1a12      	subs	r2, r2, r0
 8009de8:	445a      	add	r2, fp
 8009dea:	f8de 0000 	ldr.w	r0, [lr]
 8009dee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009df8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009dfc:	b292      	uxth	r2, r2
 8009dfe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009e02:	45e1      	cmp	r9, ip
 8009e04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009e08:	f84e 2b04 	str.w	r2, [lr], #4
 8009e0c:	d2de      	bcs.n	8009dcc <quorem+0x42>
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	58eb      	ldr	r3, [r5, r3]
 8009e12:	b92b      	cbnz	r3, 8009e20 <quorem+0x96>
 8009e14:	9b01      	ldr	r3, [sp, #4]
 8009e16:	3b04      	subs	r3, #4
 8009e18:	429d      	cmp	r5, r3
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	d32f      	bcc.n	8009e7e <quorem+0xf4>
 8009e1e:	613c      	str	r4, [r7, #16]
 8009e20:	4638      	mov	r0, r7
 8009e22:	f001 f8c5 	bl	800afb0 <__mcmp>
 8009e26:	2800      	cmp	r0, #0
 8009e28:	db25      	blt.n	8009e76 <quorem+0xec>
 8009e2a:	4629      	mov	r1, r5
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009e32:	f8d1 c000 	ldr.w	ip, [r1]
 8009e36:	fa1f fe82 	uxth.w	lr, r2
 8009e3a:	fa1f f38c 	uxth.w	r3, ip
 8009e3e:	eba3 030e 	sub.w	r3, r3, lr
 8009e42:	4403      	add	r3, r0
 8009e44:	0c12      	lsrs	r2, r2, #16
 8009e46:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009e4a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009e4e:	b29b      	uxth	r3, r3
 8009e50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e54:	45c1      	cmp	r9, r8
 8009e56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009e5a:	f841 3b04 	str.w	r3, [r1], #4
 8009e5e:	d2e6      	bcs.n	8009e2e <quorem+0xa4>
 8009e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009e64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009e68:	b922      	cbnz	r2, 8009e74 <quorem+0xea>
 8009e6a:	3b04      	subs	r3, #4
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	461a      	mov	r2, r3
 8009e70:	d30b      	bcc.n	8009e8a <quorem+0x100>
 8009e72:	613c      	str	r4, [r7, #16]
 8009e74:	3601      	adds	r6, #1
 8009e76:	4630      	mov	r0, r6
 8009e78:	b003      	add	sp, #12
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	6812      	ldr	r2, [r2, #0]
 8009e80:	3b04      	subs	r3, #4
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	d1cb      	bne.n	8009e1e <quorem+0x94>
 8009e86:	3c01      	subs	r4, #1
 8009e88:	e7c6      	b.n	8009e18 <quorem+0x8e>
 8009e8a:	6812      	ldr	r2, [r2, #0]
 8009e8c:	3b04      	subs	r3, #4
 8009e8e:	2a00      	cmp	r2, #0
 8009e90:	d1ef      	bne.n	8009e72 <quorem+0xe8>
 8009e92:	3c01      	subs	r4, #1
 8009e94:	e7ea      	b.n	8009e6c <quorem+0xe2>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e7ee      	b.n	8009e78 <quorem+0xee>
 8009e9a:	0000      	movs	r0, r0
 8009e9c:	0000      	movs	r0, r0
	...

08009ea0 <_dtoa_r>:
 8009ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	69c7      	ldr	r7, [r0, #28]
 8009eaa:	b097      	sub	sp, #92	@ 0x5c
 8009eac:	4683      	mov	fp, r0
 8009eae:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009eb2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009eb4:	b97f      	cbnz	r7, 8009ed6 <_dtoa_r+0x36>
 8009eb6:	2010      	movs	r0, #16
 8009eb8:	f7ff f8aa 	bl	8009010 <malloc>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	f8cb 001c 	str.w	r0, [fp, #28]
 8009ec2:	b920      	cbnz	r0, 8009ece <_dtoa_r+0x2e>
 8009ec4:	21ef      	movs	r1, #239	@ 0xef
 8009ec6:	4ba8      	ldr	r3, [pc, #672]	@ (800a168 <_dtoa_r+0x2c8>)
 8009ec8:	48a8      	ldr	r0, [pc, #672]	@ (800a16c <_dtoa_r+0x2cc>)
 8009eca:	f001 fa2f 	bl	800b32c <__assert_func>
 8009ece:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009ed2:	6007      	str	r7, [r0, #0]
 8009ed4:	60c7      	str	r7, [r0, #12]
 8009ed6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009eda:	6819      	ldr	r1, [r3, #0]
 8009edc:	b159      	cbz	r1, 8009ef6 <_dtoa_r+0x56>
 8009ede:	685a      	ldr	r2, [r3, #4]
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4093      	lsls	r3, r2
 8009ee4:	604a      	str	r2, [r1, #4]
 8009ee6:	608b      	str	r3, [r1, #8]
 8009ee8:	4658      	mov	r0, fp
 8009eea:	f000 fe29 	bl	800ab40 <_Bfree>
 8009eee:	2200      	movs	r2, #0
 8009ef0:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009ef4:	601a      	str	r2, [r3, #0]
 8009ef6:	1e2b      	subs	r3, r5, #0
 8009ef8:	bfaf      	iteee	ge
 8009efa:	2300      	movge	r3, #0
 8009efc:	2201      	movlt	r2, #1
 8009efe:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009f02:	9303      	strlt	r3, [sp, #12]
 8009f04:	bfa8      	it	ge
 8009f06:	6033      	strge	r3, [r6, #0]
 8009f08:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009f0c:	4b98      	ldr	r3, [pc, #608]	@ (800a170 <_dtoa_r+0x2d0>)
 8009f0e:	bfb8      	it	lt
 8009f10:	6032      	strlt	r2, [r6, #0]
 8009f12:	ea33 0308 	bics.w	r3, r3, r8
 8009f16:	d112      	bne.n	8009f3e <_dtoa_r+0x9e>
 8009f18:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009f1c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009f24:	4323      	orrs	r3, r4
 8009f26:	f000 8550 	beq.w	800a9ca <_dtoa_r+0xb2a>
 8009f2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f2c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800a174 <_dtoa_r+0x2d4>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f000 8552 	beq.w	800a9da <_dtoa_r+0xb3a>
 8009f36:	f10a 0303 	add.w	r3, sl, #3
 8009f3a:	f000 bd4c 	b.w	800a9d6 <_dtoa_r+0xb36>
 8009f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f42:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009f46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f7f6 fd2b 	bl	80009a8 <__aeabi_dcmpeq>
 8009f52:	4607      	mov	r7, r0
 8009f54:	b158      	cbz	r0, 8009f6e <_dtoa_r+0xce>
 8009f56:	2301      	movs	r3, #1
 8009f58:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009f5e:	b113      	cbz	r3, 8009f66 <_dtoa_r+0xc6>
 8009f60:	4b85      	ldr	r3, [pc, #532]	@ (800a178 <_dtoa_r+0x2d8>)
 8009f62:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009f64:	6013      	str	r3, [r2, #0]
 8009f66:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800a17c <_dtoa_r+0x2dc>
 8009f6a:	f000 bd36 	b.w	800a9da <_dtoa_r+0xb3a>
 8009f6e:	ab14      	add	r3, sp, #80	@ 0x50
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	ab15      	add	r3, sp, #84	@ 0x54
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	4658      	mov	r0, fp
 8009f78:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009f7c:	f001 f8c8 	bl	800b110 <__d2b>
 8009f80:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8009f84:	4681      	mov	r9, r0
 8009f86:	2e00      	cmp	r6, #0
 8009f88:	d077      	beq.n	800a07a <_dtoa_r+0x1da>
 8009f8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009f8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f90:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009f94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009f98:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009f9c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009fa0:	9712      	str	r7, [sp, #72]	@ 0x48
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	4b76      	ldr	r3, [pc, #472]	@ (800a180 <_dtoa_r+0x2e0>)
 8009fa8:	f7f6 f8de 	bl	8000168 <__aeabi_dsub>
 8009fac:	a368      	add	r3, pc, #416	@ (adr r3, 800a150 <_dtoa_r+0x2b0>)
 8009fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb2:	f7f6 fa91 	bl	80004d8 <__aeabi_dmul>
 8009fb6:	a368      	add	r3, pc, #416	@ (adr r3, 800a158 <_dtoa_r+0x2b8>)
 8009fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fbc:	f7f6 f8d6 	bl	800016c <__adddf3>
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	f7f6 fa1d 	bl	8000404 <__aeabi_i2d>
 8009fca:	a365      	add	r3, pc, #404	@ (adr r3, 800a160 <_dtoa_r+0x2c0>)
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	f7f6 fa82 	bl	80004d8 <__aeabi_dmul>
 8009fd4:	4602      	mov	r2, r0
 8009fd6:	460b      	mov	r3, r1
 8009fd8:	4620      	mov	r0, r4
 8009fda:	4629      	mov	r1, r5
 8009fdc:	f7f6 f8c6 	bl	800016c <__adddf3>
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	460d      	mov	r5, r1
 8009fe4:	f7f6 fd28 	bl	8000a38 <__aeabi_d2iz>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	4607      	mov	r7, r0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fce3 	bl	80009bc <__aeabi_dcmplt>
 8009ff6:	b140      	cbz	r0, 800a00a <_dtoa_r+0x16a>
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f7f6 fa03 	bl	8000404 <__aeabi_i2d>
 8009ffe:	4622      	mov	r2, r4
 800a000:	462b      	mov	r3, r5
 800a002:	f7f6 fcd1 	bl	80009a8 <__aeabi_dcmpeq>
 800a006:	b900      	cbnz	r0, 800a00a <_dtoa_r+0x16a>
 800a008:	3f01      	subs	r7, #1
 800a00a:	2f16      	cmp	r7, #22
 800a00c:	d853      	bhi.n	800a0b6 <_dtoa_r+0x216>
 800a00e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a012:	4b5c      	ldr	r3, [pc, #368]	@ (800a184 <_dtoa_r+0x2e4>)
 800a014:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	f7f6 fcce 	bl	80009bc <__aeabi_dcmplt>
 800a020:	2800      	cmp	r0, #0
 800a022:	d04a      	beq.n	800a0ba <_dtoa_r+0x21a>
 800a024:	2300      	movs	r3, #0
 800a026:	3f01      	subs	r7, #1
 800a028:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a02a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a02c:	1b9b      	subs	r3, r3, r6
 800a02e:	1e5a      	subs	r2, r3, #1
 800a030:	bf46      	itte	mi
 800a032:	f1c3 0801 	rsbmi	r8, r3, #1
 800a036:	2300      	movmi	r3, #0
 800a038:	f04f 0800 	movpl.w	r8, #0
 800a03c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a03e:	bf48      	it	mi
 800a040:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a042:	2f00      	cmp	r7, #0
 800a044:	db3b      	blt.n	800a0be <_dtoa_r+0x21e>
 800a046:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a048:	970e      	str	r7, [sp, #56]	@ 0x38
 800a04a:	443b      	add	r3, r7
 800a04c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a04e:	2300      	movs	r3, #0
 800a050:	930a      	str	r3, [sp, #40]	@ 0x28
 800a052:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a054:	2b09      	cmp	r3, #9
 800a056:	d866      	bhi.n	800a126 <_dtoa_r+0x286>
 800a058:	2b05      	cmp	r3, #5
 800a05a:	bfc4      	itt	gt
 800a05c:	3b04      	subgt	r3, #4
 800a05e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a060:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a062:	bfc8      	it	gt
 800a064:	2400      	movgt	r4, #0
 800a066:	f1a3 0302 	sub.w	r3, r3, #2
 800a06a:	bfd8      	it	le
 800a06c:	2401      	movle	r4, #1
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d864      	bhi.n	800a13c <_dtoa_r+0x29c>
 800a072:	e8df f003 	tbb	[pc, r3]
 800a076:	382b      	.short	0x382b
 800a078:	5636      	.short	0x5636
 800a07a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a07e:	441e      	add	r6, r3
 800a080:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a084:	2b20      	cmp	r3, #32
 800a086:	bfc1      	itttt	gt
 800a088:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a08c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a090:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a094:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a098:	bfd6      	itet	le
 800a09a:	f1c3 0320 	rsble	r3, r3, #32
 800a09e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a0a2:	fa04 f003 	lslle.w	r0, r4, r3
 800a0a6:	f7f6 f99d 	bl	80003e4 <__aeabi_ui2d>
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a0b0:	3e01      	subs	r6, #1
 800a0b2:	9212      	str	r2, [sp, #72]	@ 0x48
 800a0b4:	e775      	b.n	8009fa2 <_dtoa_r+0x102>
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e7b6      	b.n	800a028 <_dtoa_r+0x188>
 800a0ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a0bc:	e7b5      	b.n	800a02a <_dtoa_r+0x18a>
 800a0be:	427b      	negs	r3, r7
 800a0c0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	eba8 0807 	sub.w	r8, r8, r7
 800a0c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800a0ca:	e7c2      	b.n	800a052 <_dtoa_r+0x1b2>
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dc35      	bgt.n	800a142 <_dtoa_r+0x2a2>
 800a0d6:	2301      	movs	r3, #1
 800a0d8:	461a      	mov	r2, r3
 800a0da:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a0de:	9221      	str	r2, [sp, #132]	@ 0x84
 800a0e0:	e00b      	b.n	800a0fa <_dtoa_r+0x25a>
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7f3      	b.n	800a0ce <_dtoa_r+0x22e>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a0ea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0ec:	18fb      	adds	r3, r7, r3
 800a0ee:	9308      	str	r3, [sp, #32]
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	2b01      	cmp	r3, #1
 800a0f4:	9307      	str	r3, [sp, #28]
 800a0f6:	bfb8      	it	lt
 800a0f8:	2301      	movlt	r3, #1
 800a0fa:	2100      	movs	r1, #0
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f8db 001c 	ldr.w	r0, [fp, #28]
 800a102:	f102 0514 	add.w	r5, r2, #20
 800a106:	429d      	cmp	r5, r3
 800a108:	d91f      	bls.n	800a14a <_dtoa_r+0x2aa>
 800a10a:	6041      	str	r1, [r0, #4]
 800a10c:	4658      	mov	r0, fp
 800a10e:	f000 fcd7 	bl	800aac0 <_Balloc>
 800a112:	4682      	mov	sl, r0
 800a114:	2800      	cmp	r0, #0
 800a116:	d139      	bne.n	800a18c <_dtoa_r+0x2ec>
 800a118:	4602      	mov	r2, r0
 800a11a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a11e:	4b1a      	ldr	r3, [pc, #104]	@ (800a188 <_dtoa_r+0x2e8>)
 800a120:	e6d2      	b.n	8009ec8 <_dtoa_r+0x28>
 800a122:	2301      	movs	r3, #1
 800a124:	e7e0      	b.n	800a0e8 <_dtoa_r+0x248>
 800a126:	2401      	movs	r4, #1
 800a128:	2300      	movs	r3, #0
 800a12a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800a12c:	9320      	str	r3, [sp, #128]	@ 0x80
 800a12e:	f04f 33ff 	mov.w	r3, #4294967295
 800a132:	2200      	movs	r2, #0
 800a134:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a138:	2312      	movs	r3, #18
 800a13a:	e7d0      	b.n	800a0de <_dtoa_r+0x23e>
 800a13c:	2301      	movs	r3, #1
 800a13e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a140:	e7f5      	b.n	800a12e <_dtoa_r+0x28e>
 800a142:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a144:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a148:	e7d7      	b.n	800a0fa <_dtoa_r+0x25a>
 800a14a:	3101      	adds	r1, #1
 800a14c:	0052      	lsls	r2, r2, #1
 800a14e:	e7d8      	b.n	800a102 <_dtoa_r+0x262>
 800a150:	636f4361 	.word	0x636f4361
 800a154:	3fd287a7 	.word	0x3fd287a7
 800a158:	8b60c8b3 	.word	0x8b60c8b3
 800a15c:	3fc68a28 	.word	0x3fc68a28
 800a160:	509f79fb 	.word	0x509f79fb
 800a164:	3fd34413 	.word	0x3fd34413
 800a168:	0800bd61 	.word	0x0800bd61
 800a16c:	0800bd78 	.word	0x0800bd78
 800a170:	7ff00000 	.word	0x7ff00000
 800a174:	0800bd5d 	.word	0x0800bd5d
 800a178:	0800bd31 	.word	0x0800bd31
 800a17c:	0800bd30 	.word	0x0800bd30
 800a180:	3ff80000 	.word	0x3ff80000
 800a184:	0800be70 	.word	0x0800be70
 800a188:	0800bdd0 	.word	0x0800bdd0
 800a18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a190:	6018      	str	r0, [r3, #0]
 800a192:	9b07      	ldr	r3, [sp, #28]
 800a194:	2b0e      	cmp	r3, #14
 800a196:	f200 80a4 	bhi.w	800a2e2 <_dtoa_r+0x442>
 800a19a:	2c00      	cmp	r4, #0
 800a19c:	f000 80a1 	beq.w	800a2e2 <_dtoa_r+0x442>
 800a1a0:	2f00      	cmp	r7, #0
 800a1a2:	dd33      	ble.n	800a20c <_dtoa_r+0x36c>
 800a1a4:	4b86      	ldr	r3, [pc, #536]	@ (800a3c0 <_dtoa_r+0x520>)
 800a1a6:	f007 020f 	and.w	r2, r7, #15
 800a1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ae:	05f8      	lsls	r0, r7, #23
 800a1b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a1b4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a1b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a1bc:	d516      	bpl.n	800a1ec <_dtoa_r+0x34c>
 800a1be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a1c2:	4b80      	ldr	r3, [pc, #512]	@ (800a3c4 <_dtoa_r+0x524>)
 800a1c4:	2603      	movs	r6, #3
 800a1c6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1ca:	f7f6 faaf 	bl	800072c <__aeabi_ddiv>
 800a1ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1d2:	f004 040f 	and.w	r4, r4, #15
 800a1d6:	4d7b      	ldr	r5, [pc, #492]	@ (800a3c4 <_dtoa_r+0x524>)
 800a1d8:	b954      	cbnz	r4, 800a1f0 <_dtoa_r+0x350>
 800a1da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a1de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a1e2:	f7f6 faa3 	bl	800072c <__aeabi_ddiv>
 800a1e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a1ea:	e028      	b.n	800a23e <_dtoa_r+0x39e>
 800a1ec:	2602      	movs	r6, #2
 800a1ee:	e7f2      	b.n	800a1d6 <_dtoa_r+0x336>
 800a1f0:	07e1      	lsls	r1, r4, #31
 800a1f2:	d508      	bpl.n	800a206 <_dtoa_r+0x366>
 800a1f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a1f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1fc:	f7f6 f96c 	bl	80004d8 <__aeabi_dmul>
 800a200:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a204:	3601      	adds	r6, #1
 800a206:	1064      	asrs	r4, r4, #1
 800a208:	3508      	adds	r5, #8
 800a20a:	e7e5      	b.n	800a1d8 <_dtoa_r+0x338>
 800a20c:	f000 80d2 	beq.w	800a3b4 <_dtoa_r+0x514>
 800a210:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a214:	427c      	negs	r4, r7
 800a216:	4b6a      	ldr	r3, [pc, #424]	@ (800a3c0 <_dtoa_r+0x520>)
 800a218:	f004 020f 	and.w	r2, r4, #15
 800a21c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a224:	f7f6 f958 	bl	80004d8 <__aeabi_dmul>
 800a228:	2602      	movs	r6, #2
 800a22a:	2300      	movs	r3, #0
 800a22c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a230:	4d64      	ldr	r5, [pc, #400]	@ (800a3c4 <_dtoa_r+0x524>)
 800a232:	1124      	asrs	r4, r4, #4
 800a234:	2c00      	cmp	r4, #0
 800a236:	f040 80b2 	bne.w	800a39e <_dtoa_r+0x4fe>
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1d3      	bne.n	800a1e6 <_dtoa_r+0x346>
 800a23e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a242:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a244:	2b00      	cmp	r3, #0
 800a246:	f000 80b7 	beq.w	800a3b8 <_dtoa_r+0x518>
 800a24a:	2200      	movs	r2, #0
 800a24c:	4620      	mov	r0, r4
 800a24e:	4629      	mov	r1, r5
 800a250:	4b5d      	ldr	r3, [pc, #372]	@ (800a3c8 <_dtoa_r+0x528>)
 800a252:	f7f6 fbb3 	bl	80009bc <__aeabi_dcmplt>
 800a256:	2800      	cmp	r0, #0
 800a258:	f000 80ae 	beq.w	800a3b8 <_dtoa_r+0x518>
 800a25c:	9b07      	ldr	r3, [sp, #28]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	f000 80aa 	beq.w	800a3b8 <_dtoa_r+0x518>
 800a264:	9b08      	ldr	r3, [sp, #32]
 800a266:	2b00      	cmp	r3, #0
 800a268:	dd37      	ble.n	800a2da <_dtoa_r+0x43a>
 800a26a:	1e7b      	subs	r3, r7, #1
 800a26c:	4620      	mov	r0, r4
 800a26e:	9304      	str	r3, [sp, #16]
 800a270:	2200      	movs	r2, #0
 800a272:	4629      	mov	r1, r5
 800a274:	4b55      	ldr	r3, [pc, #340]	@ (800a3cc <_dtoa_r+0x52c>)
 800a276:	f7f6 f92f 	bl	80004d8 <__aeabi_dmul>
 800a27a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a27e:	9c08      	ldr	r4, [sp, #32]
 800a280:	3601      	adds	r6, #1
 800a282:	4630      	mov	r0, r6
 800a284:	f7f6 f8be 	bl	8000404 <__aeabi_i2d>
 800a288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a28c:	f7f6 f924 	bl	80004d8 <__aeabi_dmul>
 800a290:	2200      	movs	r2, #0
 800a292:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d0 <_dtoa_r+0x530>)
 800a294:	f7f5 ff6a 	bl	800016c <__adddf3>
 800a298:	4605      	mov	r5, r0
 800a29a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a29e:	2c00      	cmp	r4, #0
 800a2a0:	f040 809a 	bne.w	800a3d8 <_dtoa_r+0x538>
 800a2a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	4b4a      	ldr	r3, [pc, #296]	@ (800a3d4 <_dtoa_r+0x534>)
 800a2ac:	f7f5 ff5c 	bl	8000168 <__aeabi_dsub>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4633      	mov	r3, r6
 800a2bc:	f7f6 fb9c 	bl	80009f8 <__aeabi_dcmpgt>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	f040 828e 	bne.w	800a7e2 <_dtoa_r+0x942>
 800a2c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a2ca:	462a      	mov	r2, r5
 800a2cc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a2d0:	f7f6 fb74 	bl	80009bc <__aeabi_dcmplt>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f040 8127 	bne.w	800a528 <_dtoa_r+0x688>
 800a2da:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800a2de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800a2e2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f2c0 8163 	blt.w	800a5b0 <_dtoa_r+0x710>
 800a2ea:	2f0e      	cmp	r7, #14
 800a2ec:	f300 8160 	bgt.w	800a5b0 <_dtoa_r+0x710>
 800a2f0:	4b33      	ldr	r3, [pc, #204]	@ (800a3c0 <_dtoa_r+0x520>)
 800a2f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a2f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2fa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a2fe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a300:	2b00      	cmp	r3, #0
 800a302:	da03      	bge.n	800a30c <_dtoa_r+0x46c>
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	f340 8100 	ble.w	800a50c <_dtoa_r+0x66c>
 800a30c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800a310:	4656      	mov	r6, sl
 800a312:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a316:	4620      	mov	r0, r4
 800a318:	4629      	mov	r1, r5
 800a31a:	f7f6 fa07 	bl	800072c <__aeabi_ddiv>
 800a31e:	f7f6 fb8b 	bl	8000a38 <__aeabi_d2iz>
 800a322:	4680      	mov	r8, r0
 800a324:	f7f6 f86e 	bl	8000404 <__aeabi_i2d>
 800a328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a32c:	f7f6 f8d4 	bl	80004d8 <__aeabi_dmul>
 800a330:	4602      	mov	r2, r0
 800a332:	460b      	mov	r3, r1
 800a334:	4620      	mov	r0, r4
 800a336:	4629      	mov	r1, r5
 800a338:	f7f5 ff16 	bl	8000168 <__aeabi_dsub>
 800a33c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800a340:	9d07      	ldr	r5, [sp, #28]
 800a342:	f806 4b01 	strb.w	r4, [r6], #1
 800a346:	eba6 040a 	sub.w	r4, r6, sl
 800a34a:	42a5      	cmp	r5, r4
 800a34c:	4602      	mov	r2, r0
 800a34e:	460b      	mov	r3, r1
 800a350:	f040 8116 	bne.w	800a580 <_dtoa_r+0x6e0>
 800a354:	f7f5 ff0a 	bl	800016c <__adddf3>
 800a358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a35c:	4604      	mov	r4, r0
 800a35e:	460d      	mov	r5, r1
 800a360:	f7f6 fb4a 	bl	80009f8 <__aeabi_dcmpgt>
 800a364:	2800      	cmp	r0, #0
 800a366:	f040 80f8 	bne.w	800a55a <_dtoa_r+0x6ba>
 800a36a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a36e:	4620      	mov	r0, r4
 800a370:	4629      	mov	r1, r5
 800a372:	f7f6 fb19 	bl	80009a8 <__aeabi_dcmpeq>
 800a376:	b118      	cbz	r0, 800a380 <_dtoa_r+0x4e0>
 800a378:	f018 0f01 	tst.w	r8, #1
 800a37c:	f040 80ed 	bne.w	800a55a <_dtoa_r+0x6ba>
 800a380:	4649      	mov	r1, r9
 800a382:	4658      	mov	r0, fp
 800a384:	f000 fbdc 	bl	800ab40 <_Bfree>
 800a388:	2300      	movs	r3, #0
 800a38a:	7033      	strb	r3, [r6, #0]
 800a38c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800a38e:	3701      	adds	r7, #1
 800a390:	601f      	str	r7, [r3, #0]
 800a392:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a394:	2b00      	cmp	r3, #0
 800a396:	f000 8320 	beq.w	800a9da <_dtoa_r+0xb3a>
 800a39a:	601e      	str	r6, [r3, #0]
 800a39c:	e31d      	b.n	800a9da <_dtoa_r+0xb3a>
 800a39e:	07e2      	lsls	r2, r4, #31
 800a3a0:	d505      	bpl.n	800a3ae <_dtoa_r+0x50e>
 800a3a2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a3a6:	f7f6 f897 	bl	80004d8 <__aeabi_dmul>
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	3601      	adds	r6, #1
 800a3ae:	1064      	asrs	r4, r4, #1
 800a3b0:	3508      	adds	r5, #8
 800a3b2:	e73f      	b.n	800a234 <_dtoa_r+0x394>
 800a3b4:	2602      	movs	r6, #2
 800a3b6:	e742      	b.n	800a23e <_dtoa_r+0x39e>
 800a3b8:	9c07      	ldr	r4, [sp, #28]
 800a3ba:	9704      	str	r7, [sp, #16]
 800a3bc:	e761      	b.n	800a282 <_dtoa_r+0x3e2>
 800a3be:	bf00      	nop
 800a3c0:	0800be70 	.word	0x0800be70
 800a3c4:	0800be48 	.word	0x0800be48
 800a3c8:	3ff00000 	.word	0x3ff00000
 800a3cc:	40240000 	.word	0x40240000
 800a3d0:	401c0000 	.word	0x401c0000
 800a3d4:	40140000 	.word	0x40140000
 800a3d8:	4b70      	ldr	r3, [pc, #448]	@ (800a59c <_dtoa_r+0x6fc>)
 800a3da:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a3dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a3e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a3e4:	4454      	add	r4, sl
 800a3e6:	2900      	cmp	r1, #0
 800a3e8:	d045      	beq.n	800a476 <_dtoa_r+0x5d6>
 800a3ea:	2000      	movs	r0, #0
 800a3ec:	496c      	ldr	r1, [pc, #432]	@ (800a5a0 <_dtoa_r+0x700>)
 800a3ee:	f7f6 f99d 	bl	800072c <__aeabi_ddiv>
 800a3f2:	4633      	mov	r3, r6
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	f7f5 feb7 	bl	8000168 <__aeabi_dsub>
 800a3fa:	4656      	mov	r6, sl
 800a3fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a404:	f7f6 fb18 	bl	8000a38 <__aeabi_d2iz>
 800a408:	4605      	mov	r5, r0
 800a40a:	f7f5 fffb 	bl	8000404 <__aeabi_i2d>
 800a40e:	4602      	mov	r2, r0
 800a410:	460b      	mov	r3, r1
 800a412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a416:	f7f5 fea7 	bl	8000168 <__aeabi_dsub>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	3530      	adds	r5, #48	@ 0x30
 800a420:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a424:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a428:	f806 5b01 	strb.w	r5, [r6], #1
 800a42c:	f7f6 fac6 	bl	80009bc <__aeabi_dcmplt>
 800a430:	2800      	cmp	r0, #0
 800a432:	d163      	bne.n	800a4fc <_dtoa_r+0x65c>
 800a434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a438:	2000      	movs	r0, #0
 800a43a:	495a      	ldr	r1, [pc, #360]	@ (800a5a4 <_dtoa_r+0x704>)
 800a43c:	f7f5 fe94 	bl	8000168 <__aeabi_dsub>
 800a440:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a444:	f7f6 faba 	bl	80009bc <__aeabi_dcmplt>
 800a448:	2800      	cmp	r0, #0
 800a44a:	f040 8087 	bne.w	800a55c <_dtoa_r+0x6bc>
 800a44e:	42a6      	cmp	r6, r4
 800a450:	f43f af43 	beq.w	800a2da <_dtoa_r+0x43a>
 800a454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a458:	2200      	movs	r2, #0
 800a45a:	4b53      	ldr	r3, [pc, #332]	@ (800a5a8 <_dtoa_r+0x708>)
 800a45c:	f7f6 f83c 	bl	80004d8 <__aeabi_dmul>
 800a460:	2200      	movs	r2, #0
 800a462:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a46a:	4b4f      	ldr	r3, [pc, #316]	@ (800a5a8 <_dtoa_r+0x708>)
 800a46c:	f7f6 f834 	bl	80004d8 <__aeabi_dmul>
 800a470:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a474:	e7c4      	b.n	800a400 <_dtoa_r+0x560>
 800a476:	4631      	mov	r1, r6
 800a478:	4628      	mov	r0, r5
 800a47a:	f7f6 f82d 	bl	80004d8 <__aeabi_dmul>
 800a47e:	4656      	mov	r6, sl
 800a480:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800a484:	9413      	str	r4, [sp, #76]	@ 0x4c
 800a486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a48a:	f7f6 fad5 	bl	8000a38 <__aeabi_d2iz>
 800a48e:	4605      	mov	r5, r0
 800a490:	f7f5 ffb8 	bl	8000404 <__aeabi_i2d>
 800a494:	4602      	mov	r2, r0
 800a496:	460b      	mov	r3, r1
 800a498:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a49c:	f7f5 fe64 	bl	8000168 <__aeabi_dsub>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	3530      	adds	r5, #48	@ 0x30
 800a4a6:	f806 5b01 	strb.w	r5, [r6], #1
 800a4aa:	42a6      	cmp	r6, r4
 800a4ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a4b0:	f04f 0200 	mov.w	r2, #0
 800a4b4:	d124      	bne.n	800a500 <_dtoa_r+0x660>
 800a4b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800a4ba:	4b39      	ldr	r3, [pc, #228]	@ (800a5a0 <_dtoa_r+0x700>)
 800a4bc:	f7f5 fe56 	bl	800016c <__adddf3>
 800a4c0:	4602      	mov	r2, r0
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c8:	f7f6 fa96 	bl	80009f8 <__aeabi_dcmpgt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d145      	bne.n	800a55c <_dtoa_r+0x6bc>
 800a4d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	4932      	ldr	r1, [pc, #200]	@ (800a5a0 <_dtoa_r+0x700>)
 800a4d8:	f7f5 fe46 	bl	8000168 <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4e4:	f7f6 fa6a 	bl	80009bc <__aeabi_dcmplt>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	f43f aef6 	beq.w	800a2da <_dtoa_r+0x43a>
 800a4ee:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800a4f0:	1e73      	subs	r3, r6, #1
 800a4f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a4f4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a4f8:	2b30      	cmp	r3, #48	@ 0x30
 800a4fa:	d0f8      	beq.n	800a4ee <_dtoa_r+0x64e>
 800a4fc:	9f04      	ldr	r7, [sp, #16]
 800a4fe:	e73f      	b.n	800a380 <_dtoa_r+0x4e0>
 800a500:	4b29      	ldr	r3, [pc, #164]	@ (800a5a8 <_dtoa_r+0x708>)
 800a502:	f7f5 ffe9 	bl	80004d8 <__aeabi_dmul>
 800a506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a50a:	e7bc      	b.n	800a486 <_dtoa_r+0x5e6>
 800a50c:	d10c      	bne.n	800a528 <_dtoa_r+0x688>
 800a50e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a512:	2200      	movs	r2, #0
 800a514:	4b25      	ldr	r3, [pc, #148]	@ (800a5ac <_dtoa_r+0x70c>)
 800a516:	f7f5 ffdf 	bl	80004d8 <__aeabi_dmul>
 800a51a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a51e:	f7f6 fa61 	bl	80009e4 <__aeabi_dcmpge>
 800a522:	2800      	cmp	r0, #0
 800a524:	f000 815b 	beq.w	800a7de <_dtoa_r+0x93e>
 800a528:	2400      	movs	r4, #0
 800a52a:	4625      	mov	r5, r4
 800a52c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a52e:	4656      	mov	r6, sl
 800a530:	43db      	mvns	r3, r3
 800a532:	9304      	str	r3, [sp, #16]
 800a534:	2700      	movs	r7, #0
 800a536:	4621      	mov	r1, r4
 800a538:	4658      	mov	r0, fp
 800a53a:	f000 fb01 	bl	800ab40 <_Bfree>
 800a53e:	2d00      	cmp	r5, #0
 800a540:	d0dc      	beq.n	800a4fc <_dtoa_r+0x65c>
 800a542:	b12f      	cbz	r7, 800a550 <_dtoa_r+0x6b0>
 800a544:	42af      	cmp	r7, r5
 800a546:	d003      	beq.n	800a550 <_dtoa_r+0x6b0>
 800a548:	4639      	mov	r1, r7
 800a54a:	4658      	mov	r0, fp
 800a54c:	f000 faf8 	bl	800ab40 <_Bfree>
 800a550:	4629      	mov	r1, r5
 800a552:	4658      	mov	r0, fp
 800a554:	f000 faf4 	bl	800ab40 <_Bfree>
 800a558:	e7d0      	b.n	800a4fc <_dtoa_r+0x65c>
 800a55a:	9704      	str	r7, [sp, #16]
 800a55c:	4633      	mov	r3, r6
 800a55e:	461e      	mov	r6, r3
 800a560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a564:	2a39      	cmp	r2, #57	@ 0x39
 800a566:	d107      	bne.n	800a578 <_dtoa_r+0x6d8>
 800a568:	459a      	cmp	sl, r3
 800a56a:	d1f8      	bne.n	800a55e <_dtoa_r+0x6be>
 800a56c:	9a04      	ldr	r2, [sp, #16]
 800a56e:	3201      	adds	r2, #1
 800a570:	9204      	str	r2, [sp, #16]
 800a572:	2230      	movs	r2, #48	@ 0x30
 800a574:	f88a 2000 	strb.w	r2, [sl]
 800a578:	781a      	ldrb	r2, [r3, #0]
 800a57a:	3201      	adds	r2, #1
 800a57c:	701a      	strb	r2, [r3, #0]
 800a57e:	e7bd      	b.n	800a4fc <_dtoa_r+0x65c>
 800a580:	2200      	movs	r2, #0
 800a582:	4b09      	ldr	r3, [pc, #36]	@ (800a5a8 <_dtoa_r+0x708>)
 800a584:	f7f5 ffa8 	bl	80004d8 <__aeabi_dmul>
 800a588:	2200      	movs	r2, #0
 800a58a:	2300      	movs	r3, #0
 800a58c:	4604      	mov	r4, r0
 800a58e:	460d      	mov	r5, r1
 800a590:	f7f6 fa0a 	bl	80009a8 <__aeabi_dcmpeq>
 800a594:	2800      	cmp	r0, #0
 800a596:	f43f aebc 	beq.w	800a312 <_dtoa_r+0x472>
 800a59a:	e6f1      	b.n	800a380 <_dtoa_r+0x4e0>
 800a59c:	0800be70 	.word	0x0800be70
 800a5a0:	3fe00000 	.word	0x3fe00000
 800a5a4:	3ff00000 	.word	0x3ff00000
 800a5a8:	40240000 	.word	0x40240000
 800a5ac:	40140000 	.word	0x40140000
 800a5b0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a5b2:	2a00      	cmp	r2, #0
 800a5b4:	f000 80db 	beq.w	800a76e <_dtoa_r+0x8ce>
 800a5b8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a5ba:	2a01      	cmp	r2, #1
 800a5bc:	f300 80bf 	bgt.w	800a73e <_dtoa_r+0x89e>
 800a5c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a5c2:	2a00      	cmp	r2, #0
 800a5c4:	f000 80b7 	beq.w	800a736 <_dtoa_r+0x896>
 800a5c8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a5cc:	4646      	mov	r6, r8
 800a5ce:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a5d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5d2:	2101      	movs	r1, #1
 800a5d4:	441a      	add	r2, r3
 800a5d6:	4658      	mov	r0, fp
 800a5d8:	4498      	add	r8, r3
 800a5da:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5dc:	f000 fb64 	bl	800aca8 <__i2b>
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	b15e      	cbz	r6, 800a5fc <_dtoa_r+0x75c>
 800a5e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	dd08      	ble.n	800a5fc <_dtoa_r+0x75c>
 800a5ea:	42b3      	cmp	r3, r6
 800a5ec:	bfa8      	it	ge
 800a5ee:	4633      	movge	r3, r6
 800a5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f2:	eba8 0803 	sub.w	r8, r8, r3
 800a5f6:	1af6      	subs	r6, r6, r3
 800a5f8:	1ad3      	subs	r3, r2, r3
 800a5fa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5fe:	b1f3      	cbz	r3, 800a63e <_dtoa_r+0x79e>
 800a600:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 80b7 	beq.w	800a776 <_dtoa_r+0x8d6>
 800a608:	b18c      	cbz	r4, 800a62e <_dtoa_r+0x78e>
 800a60a:	4629      	mov	r1, r5
 800a60c:	4622      	mov	r2, r4
 800a60e:	4658      	mov	r0, fp
 800a610:	f000 fc08 	bl	800ae24 <__pow5mult>
 800a614:	464a      	mov	r2, r9
 800a616:	4601      	mov	r1, r0
 800a618:	4605      	mov	r5, r0
 800a61a:	4658      	mov	r0, fp
 800a61c:	f000 fb5a 	bl	800acd4 <__multiply>
 800a620:	4649      	mov	r1, r9
 800a622:	9004      	str	r0, [sp, #16]
 800a624:	4658      	mov	r0, fp
 800a626:	f000 fa8b 	bl	800ab40 <_Bfree>
 800a62a:	9b04      	ldr	r3, [sp, #16]
 800a62c:	4699      	mov	r9, r3
 800a62e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a630:	1b1a      	subs	r2, r3, r4
 800a632:	d004      	beq.n	800a63e <_dtoa_r+0x79e>
 800a634:	4649      	mov	r1, r9
 800a636:	4658      	mov	r0, fp
 800a638:	f000 fbf4 	bl	800ae24 <__pow5mult>
 800a63c:	4681      	mov	r9, r0
 800a63e:	2101      	movs	r1, #1
 800a640:	4658      	mov	r0, fp
 800a642:	f000 fb31 	bl	800aca8 <__i2b>
 800a646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a648:	4604      	mov	r4, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 81c9 	beq.w	800a9e2 <_dtoa_r+0xb42>
 800a650:	461a      	mov	r2, r3
 800a652:	4601      	mov	r1, r0
 800a654:	4658      	mov	r0, fp
 800a656:	f000 fbe5 	bl	800ae24 <__pow5mult>
 800a65a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a65c:	4604      	mov	r4, r0
 800a65e:	2b01      	cmp	r3, #1
 800a660:	f300 808f 	bgt.w	800a782 <_dtoa_r+0x8e2>
 800a664:	9b02      	ldr	r3, [sp, #8]
 800a666:	2b00      	cmp	r3, #0
 800a668:	f040 8087 	bne.w	800a77a <_dtoa_r+0x8da>
 800a66c:	9b03      	ldr	r3, [sp, #12]
 800a66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a672:	2b00      	cmp	r3, #0
 800a674:	f040 8083 	bne.w	800a77e <_dtoa_r+0x8de>
 800a678:	9b03      	ldr	r3, [sp, #12]
 800a67a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a67e:	0d1b      	lsrs	r3, r3, #20
 800a680:	051b      	lsls	r3, r3, #20
 800a682:	b12b      	cbz	r3, 800a690 <_dtoa_r+0x7f0>
 800a684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a686:	f108 0801 	add.w	r8, r8, #1
 800a68a:	3301      	adds	r3, #1
 800a68c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a68e:	2301      	movs	r3, #1
 800a690:	930a      	str	r3, [sp, #40]	@ 0x28
 800a692:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a694:	2b00      	cmp	r3, #0
 800a696:	f000 81aa 	beq.w	800a9ee <_dtoa_r+0xb4e>
 800a69a:	6923      	ldr	r3, [r4, #16]
 800a69c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a6a0:	6918      	ldr	r0, [r3, #16]
 800a6a2:	f000 fab5 	bl	800ac10 <__hi0bits>
 800a6a6:	f1c0 0020 	rsb	r0, r0, #32
 800a6aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6ac:	4418      	add	r0, r3
 800a6ae:	f010 001f 	ands.w	r0, r0, #31
 800a6b2:	d071      	beq.n	800a798 <_dtoa_r+0x8f8>
 800a6b4:	f1c0 0320 	rsb	r3, r0, #32
 800a6b8:	2b04      	cmp	r3, #4
 800a6ba:	dd65      	ble.n	800a788 <_dtoa_r+0x8e8>
 800a6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6be:	f1c0 001c 	rsb	r0, r0, #28
 800a6c2:	4403      	add	r3, r0
 800a6c4:	4480      	add	r8, r0
 800a6c6:	4406      	add	r6, r0
 800a6c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ca:	f1b8 0f00 	cmp.w	r8, #0
 800a6ce:	dd05      	ble.n	800a6dc <_dtoa_r+0x83c>
 800a6d0:	4649      	mov	r1, r9
 800a6d2:	4642      	mov	r2, r8
 800a6d4:	4658      	mov	r0, fp
 800a6d6:	f000 fbff 	bl	800aed8 <__lshift>
 800a6da:	4681      	mov	r9, r0
 800a6dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	dd05      	ble.n	800a6ee <_dtoa_r+0x84e>
 800a6e2:	4621      	mov	r1, r4
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	4658      	mov	r0, fp
 800a6e8:	f000 fbf6 	bl	800aed8 <__lshift>
 800a6ec:	4604      	mov	r4, r0
 800a6ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d053      	beq.n	800a79c <_dtoa_r+0x8fc>
 800a6f4:	4621      	mov	r1, r4
 800a6f6:	4648      	mov	r0, r9
 800a6f8:	f000 fc5a 	bl	800afb0 <__mcmp>
 800a6fc:	2800      	cmp	r0, #0
 800a6fe:	da4d      	bge.n	800a79c <_dtoa_r+0x8fc>
 800a700:	1e7b      	subs	r3, r7, #1
 800a702:	4649      	mov	r1, r9
 800a704:	9304      	str	r3, [sp, #16]
 800a706:	220a      	movs	r2, #10
 800a708:	2300      	movs	r3, #0
 800a70a:	4658      	mov	r0, fp
 800a70c:	f000 fa3a 	bl	800ab84 <__multadd>
 800a710:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a712:	4681      	mov	r9, r0
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 816c 	beq.w	800a9f2 <_dtoa_r+0xb52>
 800a71a:	2300      	movs	r3, #0
 800a71c:	4629      	mov	r1, r5
 800a71e:	220a      	movs	r2, #10
 800a720:	4658      	mov	r0, fp
 800a722:	f000 fa2f 	bl	800ab84 <__multadd>
 800a726:	9b08      	ldr	r3, [sp, #32]
 800a728:	4605      	mov	r5, r0
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	dc61      	bgt.n	800a7f2 <_dtoa_r+0x952>
 800a72e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a730:	2b02      	cmp	r3, #2
 800a732:	dc3b      	bgt.n	800a7ac <_dtoa_r+0x90c>
 800a734:	e05d      	b.n	800a7f2 <_dtoa_r+0x952>
 800a736:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a738:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a73c:	e746      	b.n	800a5cc <_dtoa_r+0x72c>
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	1e5c      	subs	r4, r3, #1
 800a742:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a744:	42a3      	cmp	r3, r4
 800a746:	bfbf      	itttt	lt
 800a748:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a74a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a74c:	1ae3      	sublt	r3, r4, r3
 800a74e:	18d2      	addlt	r2, r2, r3
 800a750:	bfa8      	it	ge
 800a752:	1b1c      	subge	r4, r3, r4
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	bfbe      	ittt	lt
 800a758:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a75a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a75c:	2400      	movlt	r4, #0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	bfb5      	itete	lt
 800a762:	eba8 0603 	sublt.w	r6, r8, r3
 800a766:	4646      	movge	r6, r8
 800a768:	2300      	movlt	r3, #0
 800a76a:	9b07      	ldrge	r3, [sp, #28]
 800a76c:	e730      	b.n	800a5d0 <_dtoa_r+0x730>
 800a76e:	4646      	mov	r6, r8
 800a770:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a772:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a774:	e735      	b.n	800a5e2 <_dtoa_r+0x742>
 800a776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a778:	e75c      	b.n	800a634 <_dtoa_r+0x794>
 800a77a:	2300      	movs	r3, #0
 800a77c:	e788      	b.n	800a690 <_dtoa_r+0x7f0>
 800a77e:	9b02      	ldr	r3, [sp, #8]
 800a780:	e786      	b.n	800a690 <_dtoa_r+0x7f0>
 800a782:	2300      	movs	r3, #0
 800a784:	930a      	str	r3, [sp, #40]	@ 0x28
 800a786:	e788      	b.n	800a69a <_dtoa_r+0x7fa>
 800a788:	d09f      	beq.n	800a6ca <_dtoa_r+0x82a>
 800a78a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a78c:	331c      	adds	r3, #28
 800a78e:	441a      	add	r2, r3
 800a790:	4498      	add	r8, r3
 800a792:	441e      	add	r6, r3
 800a794:	9209      	str	r2, [sp, #36]	@ 0x24
 800a796:	e798      	b.n	800a6ca <_dtoa_r+0x82a>
 800a798:	4603      	mov	r3, r0
 800a79a:	e7f6      	b.n	800a78a <_dtoa_r+0x8ea>
 800a79c:	9b07      	ldr	r3, [sp, #28]
 800a79e:	9704      	str	r7, [sp, #16]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	dc20      	bgt.n	800a7e6 <_dtoa_r+0x946>
 800a7a4:	9308      	str	r3, [sp, #32]
 800a7a6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a7a8:	2b02      	cmp	r3, #2
 800a7aa:	dd1e      	ble.n	800a7ea <_dtoa_r+0x94a>
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f47f aebc 	bne.w	800a52c <_dtoa_r+0x68c>
 800a7b4:	4621      	mov	r1, r4
 800a7b6:	2205      	movs	r2, #5
 800a7b8:	4658      	mov	r0, fp
 800a7ba:	f000 f9e3 	bl	800ab84 <__multadd>
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4604      	mov	r4, r0
 800a7c2:	4648      	mov	r0, r9
 800a7c4:	f000 fbf4 	bl	800afb0 <__mcmp>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	f77f aeaf 	ble.w	800a52c <_dtoa_r+0x68c>
 800a7ce:	2331      	movs	r3, #49	@ 0x31
 800a7d0:	4656      	mov	r6, sl
 800a7d2:	f806 3b01 	strb.w	r3, [r6], #1
 800a7d6:	9b04      	ldr	r3, [sp, #16]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	9304      	str	r3, [sp, #16]
 800a7dc:	e6aa      	b.n	800a534 <_dtoa_r+0x694>
 800a7de:	9c07      	ldr	r4, [sp, #28]
 800a7e0:	9704      	str	r7, [sp, #16]
 800a7e2:	4625      	mov	r5, r4
 800a7e4:	e7f3      	b.n	800a7ce <_dtoa_r+0x92e>
 800a7e6:	9b07      	ldr	r3, [sp, #28]
 800a7e8:	9308      	str	r3, [sp, #32]
 800a7ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f000 8104 	beq.w	800a9fa <_dtoa_r+0xb5a>
 800a7f2:	2e00      	cmp	r6, #0
 800a7f4:	dd05      	ble.n	800a802 <_dtoa_r+0x962>
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	4658      	mov	r0, fp
 800a7fc:	f000 fb6c 	bl	800aed8 <__lshift>
 800a800:	4605      	mov	r5, r0
 800a802:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a804:	2b00      	cmp	r3, #0
 800a806:	d05a      	beq.n	800a8be <_dtoa_r+0xa1e>
 800a808:	4658      	mov	r0, fp
 800a80a:	6869      	ldr	r1, [r5, #4]
 800a80c:	f000 f958 	bl	800aac0 <_Balloc>
 800a810:	4606      	mov	r6, r0
 800a812:	b928      	cbnz	r0, 800a820 <_dtoa_r+0x980>
 800a814:	4602      	mov	r2, r0
 800a816:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a81a:	4b83      	ldr	r3, [pc, #524]	@ (800aa28 <_dtoa_r+0xb88>)
 800a81c:	f7ff bb54 	b.w	8009ec8 <_dtoa_r+0x28>
 800a820:	692a      	ldr	r2, [r5, #16]
 800a822:	f105 010c 	add.w	r1, r5, #12
 800a826:	3202      	adds	r2, #2
 800a828:	0092      	lsls	r2, r2, #2
 800a82a:	300c      	adds	r0, #12
 800a82c:	f000 fd70 	bl	800b310 <memcpy>
 800a830:	2201      	movs	r2, #1
 800a832:	4631      	mov	r1, r6
 800a834:	4658      	mov	r0, fp
 800a836:	f000 fb4f 	bl	800aed8 <__lshift>
 800a83a:	462f      	mov	r7, r5
 800a83c:	4605      	mov	r5, r0
 800a83e:	f10a 0301 	add.w	r3, sl, #1
 800a842:	9307      	str	r3, [sp, #28]
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	4453      	add	r3, sl
 800a848:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a84a:	9b02      	ldr	r3, [sp, #8]
 800a84c:	f003 0301 	and.w	r3, r3, #1
 800a850:	930a      	str	r3, [sp, #40]	@ 0x28
 800a852:	9b07      	ldr	r3, [sp, #28]
 800a854:	4621      	mov	r1, r4
 800a856:	3b01      	subs	r3, #1
 800a858:	4648      	mov	r0, r9
 800a85a:	9302      	str	r3, [sp, #8]
 800a85c:	f7ff fa95 	bl	8009d8a <quorem>
 800a860:	4639      	mov	r1, r7
 800a862:	9008      	str	r0, [sp, #32]
 800a864:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a868:	4648      	mov	r0, r9
 800a86a:	f000 fba1 	bl	800afb0 <__mcmp>
 800a86e:	462a      	mov	r2, r5
 800a870:	9009      	str	r0, [sp, #36]	@ 0x24
 800a872:	4621      	mov	r1, r4
 800a874:	4658      	mov	r0, fp
 800a876:	f000 fbb7 	bl	800afe8 <__mdiff>
 800a87a:	68c2      	ldr	r2, [r0, #12]
 800a87c:	4606      	mov	r6, r0
 800a87e:	bb02      	cbnz	r2, 800a8c2 <_dtoa_r+0xa22>
 800a880:	4601      	mov	r1, r0
 800a882:	4648      	mov	r0, r9
 800a884:	f000 fb94 	bl	800afb0 <__mcmp>
 800a888:	4602      	mov	r2, r0
 800a88a:	4631      	mov	r1, r6
 800a88c:	4658      	mov	r0, fp
 800a88e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a890:	f000 f956 	bl	800ab40 <_Bfree>
 800a894:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a896:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a898:	9e07      	ldr	r6, [sp, #28]
 800a89a:	ea43 0102 	orr.w	r1, r3, r2
 800a89e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a8a0:	4319      	orrs	r1, r3
 800a8a2:	d110      	bne.n	800a8c6 <_dtoa_r+0xa26>
 800a8a4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8a8:	d029      	beq.n	800a8fe <_dtoa_r+0xa5e>
 800a8aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	dd02      	ble.n	800a8b6 <_dtoa_r+0xa16>
 800a8b0:	9b08      	ldr	r3, [sp, #32]
 800a8b2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a8b6:	9b02      	ldr	r3, [sp, #8]
 800a8b8:	f883 8000 	strb.w	r8, [r3]
 800a8bc:	e63b      	b.n	800a536 <_dtoa_r+0x696>
 800a8be:	4628      	mov	r0, r5
 800a8c0:	e7bb      	b.n	800a83a <_dtoa_r+0x99a>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	e7e1      	b.n	800a88a <_dtoa_r+0x9ea>
 800a8c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	db04      	blt.n	800a8d6 <_dtoa_r+0xa36>
 800a8cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a8ce:	430b      	orrs	r3, r1
 800a8d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a8d2:	430b      	orrs	r3, r1
 800a8d4:	d120      	bne.n	800a918 <_dtoa_r+0xa78>
 800a8d6:	2a00      	cmp	r2, #0
 800a8d8:	dded      	ble.n	800a8b6 <_dtoa_r+0xa16>
 800a8da:	4649      	mov	r1, r9
 800a8dc:	2201      	movs	r2, #1
 800a8de:	4658      	mov	r0, fp
 800a8e0:	f000 fafa 	bl	800aed8 <__lshift>
 800a8e4:	4621      	mov	r1, r4
 800a8e6:	4681      	mov	r9, r0
 800a8e8:	f000 fb62 	bl	800afb0 <__mcmp>
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	dc03      	bgt.n	800a8f8 <_dtoa_r+0xa58>
 800a8f0:	d1e1      	bne.n	800a8b6 <_dtoa_r+0xa16>
 800a8f2:	f018 0f01 	tst.w	r8, #1
 800a8f6:	d0de      	beq.n	800a8b6 <_dtoa_r+0xa16>
 800a8f8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a8fc:	d1d8      	bne.n	800a8b0 <_dtoa_r+0xa10>
 800a8fe:	2339      	movs	r3, #57	@ 0x39
 800a900:	9a02      	ldr	r2, [sp, #8]
 800a902:	7013      	strb	r3, [r2, #0]
 800a904:	4633      	mov	r3, r6
 800a906:	461e      	mov	r6, r3
 800a908:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	2a39      	cmp	r2, #57	@ 0x39
 800a910:	d052      	beq.n	800a9b8 <_dtoa_r+0xb18>
 800a912:	3201      	adds	r2, #1
 800a914:	701a      	strb	r2, [r3, #0]
 800a916:	e60e      	b.n	800a536 <_dtoa_r+0x696>
 800a918:	2a00      	cmp	r2, #0
 800a91a:	dd07      	ble.n	800a92c <_dtoa_r+0xa8c>
 800a91c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a920:	d0ed      	beq.n	800a8fe <_dtoa_r+0xa5e>
 800a922:	9a02      	ldr	r2, [sp, #8]
 800a924:	f108 0301 	add.w	r3, r8, #1
 800a928:	7013      	strb	r3, [r2, #0]
 800a92a:	e604      	b.n	800a536 <_dtoa_r+0x696>
 800a92c:	9b07      	ldr	r3, [sp, #28]
 800a92e:	9a07      	ldr	r2, [sp, #28]
 800a930:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a934:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a936:	4293      	cmp	r3, r2
 800a938:	d028      	beq.n	800a98c <_dtoa_r+0xaec>
 800a93a:	4649      	mov	r1, r9
 800a93c:	2300      	movs	r3, #0
 800a93e:	220a      	movs	r2, #10
 800a940:	4658      	mov	r0, fp
 800a942:	f000 f91f 	bl	800ab84 <__multadd>
 800a946:	42af      	cmp	r7, r5
 800a948:	4681      	mov	r9, r0
 800a94a:	f04f 0300 	mov.w	r3, #0
 800a94e:	f04f 020a 	mov.w	r2, #10
 800a952:	4639      	mov	r1, r7
 800a954:	4658      	mov	r0, fp
 800a956:	d107      	bne.n	800a968 <_dtoa_r+0xac8>
 800a958:	f000 f914 	bl	800ab84 <__multadd>
 800a95c:	4607      	mov	r7, r0
 800a95e:	4605      	mov	r5, r0
 800a960:	9b07      	ldr	r3, [sp, #28]
 800a962:	3301      	adds	r3, #1
 800a964:	9307      	str	r3, [sp, #28]
 800a966:	e774      	b.n	800a852 <_dtoa_r+0x9b2>
 800a968:	f000 f90c 	bl	800ab84 <__multadd>
 800a96c:	4629      	mov	r1, r5
 800a96e:	4607      	mov	r7, r0
 800a970:	2300      	movs	r3, #0
 800a972:	220a      	movs	r2, #10
 800a974:	4658      	mov	r0, fp
 800a976:	f000 f905 	bl	800ab84 <__multadd>
 800a97a:	4605      	mov	r5, r0
 800a97c:	e7f0      	b.n	800a960 <_dtoa_r+0xac0>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	2700      	movs	r7, #0
 800a982:	2b00      	cmp	r3, #0
 800a984:	bfcc      	ite	gt
 800a986:	461e      	movgt	r6, r3
 800a988:	2601      	movle	r6, #1
 800a98a:	4456      	add	r6, sl
 800a98c:	4649      	mov	r1, r9
 800a98e:	2201      	movs	r2, #1
 800a990:	4658      	mov	r0, fp
 800a992:	f000 faa1 	bl	800aed8 <__lshift>
 800a996:	4621      	mov	r1, r4
 800a998:	4681      	mov	r9, r0
 800a99a:	f000 fb09 	bl	800afb0 <__mcmp>
 800a99e:	2800      	cmp	r0, #0
 800a9a0:	dcb0      	bgt.n	800a904 <_dtoa_r+0xa64>
 800a9a2:	d102      	bne.n	800a9aa <_dtoa_r+0xb0a>
 800a9a4:	f018 0f01 	tst.w	r8, #1
 800a9a8:	d1ac      	bne.n	800a904 <_dtoa_r+0xa64>
 800a9aa:	4633      	mov	r3, r6
 800a9ac:	461e      	mov	r6, r3
 800a9ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9b2:	2a30      	cmp	r2, #48	@ 0x30
 800a9b4:	d0fa      	beq.n	800a9ac <_dtoa_r+0xb0c>
 800a9b6:	e5be      	b.n	800a536 <_dtoa_r+0x696>
 800a9b8:	459a      	cmp	sl, r3
 800a9ba:	d1a4      	bne.n	800a906 <_dtoa_r+0xa66>
 800a9bc:	9b04      	ldr	r3, [sp, #16]
 800a9be:	3301      	adds	r3, #1
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	2331      	movs	r3, #49	@ 0x31
 800a9c4:	f88a 3000 	strb.w	r3, [sl]
 800a9c8:	e5b5      	b.n	800a536 <_dtoa_r+0x696>
 800a9ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a9cc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800aa2c <_dtoa_r+0xb8c>
 800a9d0:	b11b      	cbz	r3, 800a9da <_dtoa_r+0xb3a>
 800a9d2:	f10a 0308 	add.w	r3, sl, #8
 800a9d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a9d8:	6013      	str	r3, [r2, #0]
 800a9da:	4650      	mov	r0, sl
 800a9dc:	b017      	add	sp, #92	@ 0x5c
 800a9de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9e2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a9e4:	2b01      	cmp	r3, #1
 800a9e6:	f77f ae3d 	ble.w	800a664 <_dtoa_r+0x7c4>
 800a9ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	e65b      	b.n	800a6aa <_dtoa_r+0x80a>
 800a9f2:	9b08      	ldr	r3, [sp, #32]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	f77f aed6 	ble.w	800a7a6 <_dtoa_r+0x906>
 800a9fa:	4656      	mov	r6, sl
 800a9fc:	4621      	mov	r1, r4
 800a9fe:	4648      	mov	r0, r9
 800aa00:	f7ff f9c3 	bl	8009d8a <quorem>
 800aa04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800aa08:	9b08      	ldr	r3, [sp, #32]
 800aa0a:	f806 8b01 	strb.w	r8, [r6], #1
 800aa0e:	eba6 020a 	sub.w	r2, r6, sl
 800aa12:	4293      	cmp	r3, r2
 800aa14:	ddb3      	ble.n	800a97e <_dtoa_r+0xade>
 800aa16:	4649      	mov	r1, r9
 800aa18:	2300      	movs	r3, #0
 800aa1a:	220a      	movs	r2, #10
 800aa1c:	4658      	mov	r0, fp
 800aa1e:	f000 f8b1 	bl	800ab84 <__multadd>
 800aa22:	4681      	mov	r9, r0
 800aa24:	e7ea      	b.n	800a9fc <_dtoa_r+0xb5c>
 800aa26:	bf00      	nop
 800aa28:	0800bdd0 	.word	0x0800bdd0
 800aa2c:	0800bd54 	.word	0x0800bd54

0800aa30 <_free_r>:
 800aa30:	b538      	push	{r3, r4, r5, lr}
 800aa32:	4605      	mov	r5, r0
 800aa34:	2900      	cmp	r1, #0
 800aa36:	d040      	beq.n	800aaba <_free_r+0x8a>
 800aa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3c:	1f0c      	subs	r4, r1, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfb8      	it	lt
 800aa42:	18e4      	addlt	r4, r4, r3
 800aa44:	f7fe fb96 	bl	8009174 <__malloc_lock>
 800aa48:	4a1c      	ldr	r2, [pc, #112]	@ (800aabc <_free_r+0x8c>)
 800aa4a:	6813      	ldr	r3, [r2, #0]
 800aa4c:	b933      	cbnz	r3, 800aa5c <_free_r+0x2c>
 800aa4e:	6063      	str	r3, [r4, #4]
 800aa50:	6014      	str	r4, [r2, #0]
 800aa52:	4628      	mov	r0, r5
 800aa54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa58:	f7fe bb92 	b.w	8009180 <__malloc_unlock>
 800aa5c:	42a3      	cmp	r3, r4
 800aa5e:	d908      	bls.n	800aa72 <_free_r+0x42>
 800aa60:	6820      	ldr	r0, [r4, #0]
 800aa62:	1821      	adds	r1, r4, r0
 800aa64:	428b      	cmp	r3, r1
 800aa66:	bf01      	itttt	eq
 800aa68:	6819      	ldreq	r1, [r3, #0]
 800aa6a:	685b      	ldreq	r3, [r3, #4]
 800aa6c:	1809      	addeq	r1, r1, r0
 800aa6e:	6021      	streq	r1, [r4, #0]
 800aa70:	e7ed      	b.n	800aa4e <_free_r+0x1e>
 800aa72:	461a      	mov	r2, r3
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	b10b      	cbz	r3, 800aa7c <_free_r+0x4c>
 800aa78:	42a3      	cmp	r3, r4
 800aa7a:	d9fa      	bls.n	800aa72 <_free_r+0x42>
 800aa7c:	6811      	ldr	r1, [r2, #0]
 800aa7e:	1850      	adds	r0, r2, r1
 800aa80:	42a0      	cmp	r0, r4
 800aa82:	d10b      	bne.n	800aa9c <_free_r+0x6c>
 800aa84:	6820      	ldr	r0, [r4, #0]
 800aa86:	4401      	add	r1, r0
 800aa88:	1850      	adds	r0, r2, r1
 800aa8a:	4283      	cmp	r3, r0
 800aa8c:	6011      	str	r1, [r2, #0]
 800aa8e:	d1e0      	bne.n	800aa52 <_free_r+0x22>
 800aa90:	6818      	ldr	r0, [r3, #0]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	4408      	add	r0, r1
 800aa96:	6010      	str	r0, [r2, #0]
 800aa98:	6053      	str	r3, [r2, #4]
 800aa9a:	e7da      	b.n	800aa52 <_free_r+0x22>
 800aa9c:	d902      	bls.n	800aaa4 <_free_r+0x74>
 800aa9e:	230c      	movs	r3, #12
 800aaa0:	602b      	str	r3, [r5, #0]
 800aaa2:	e7d6      	b.n	800aa52 <_free_r+0x22>
 800aaa4:	6820      	ldr	r0, [r4, #0]
 800aaa6:	1821      	adds	r1, r4, r0
 800aaa8:	428b      	cmp	r3, r1
 800aaaa:	bf01      	itttt	eq
 800aaac:	6819      	ldreq	r1, [r3, #0]
 800aaae:	685b      	ldreq	r3, [r3, #4]
 800aab0:	1809      	addeq	r1, r1, r0
 800aab2:	6021      	streq	r1, [r4, #0]
 800aab4:	6063      	str	r3, [r4, #4]
 800aab6:	6054      	str	r4, [r2, #4]
 800aab8:	e7cb      	b.n	800aa52 <_free_r+0x22>
 800aaba:	bd38      	pop	{r3, r4, r5, pc}
 800aabc:	20000614 	.word	0x20000614

0800aac0 <_Balloc>:
 800aac0:	b570      	push	{r4, r5, r6, lr}
 800aac2:	69c6      	ldr	r6, [r0, #28]
 800aac4:	4604      	mov	r4, r0
 800aac6:	460d      	mov	r5, r1
 800aac8:	b976      	cbnz	r6, 800aae8 <_Balloc+0x28>
 800aaca:	2010      	movs	r0, #16
 800aacc:	f7fe faa0 	bl	8009010 <malloc>
 800aad0:	4602      	mov	r2, r0
 800aad2:	61e0      	str	r0, [r4, #28]
 800aad4:	b920      	cbnz	r0, 800aae0 <_Balloc+0x20>
 800aad6:	216b      	movs	r1, #107	@ 0x6b
 800aad8:	4b17      	ldr	r3, [pc, #92]	@ (800ab38 <_Balloc+0x78>)
 800aada:	4818      	ldr	r0, [pc, #96]	@ (800ab3c <_Balloc+0x7c>)
 800aadc:	f000 fc26 	bl	800b32c <__assert_func>
 800aae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aae4:	6006      	str	r6, [r0, #0]
 800aae6:	60c6      	str	r6, [r0, #12]
 800aae8:	69e6      	ldr	r6, [r4, #28]
 800aaea:	68f3      	ldr	r3, [r6, #12]
 800aaec:	b183      	cbz	r3, 800ab10 <_Balloc+0x50>
 800aaee:	69e3      	ldr	r3, [r4, #28]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aaf6:	b9b8      	cbnz	r0, 800ab28 <_Balloc+0x68>
 800aaf8:	2101      	movs	r1, #1
 800aafa:	fa01 f605 	lsl.w	r6, r1, r5
 800aafe:	1d72      	adds	r2, r6, #5
 800ab00:	4620      	mov	r0, r4
 800ab02:	0092      	lsls	r2, r2, #2
 800ab04:	f000 fc30 	bl	800b368 <_calloc_r>
 800ab08:	b160      	cbz	r0, 800ab24 <_Balloc+0x64>
 800ab0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab0e:	e00e      	b.n	800ab2e <_Balloc+0x6e>
 800ab10:	2221      	movs	r2, #33	@ 0x21
 800ab12:	2104      	movs	r1, #4
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fc27 	bl	800b368 <_calloc_r>
 800ab1a:	69e3      	ldr	r3, [r4, #28]
 800ab1c:	60f0      	str	r0, [r6, #12]
 800ab1e:	68db      	ldr	r3, [r3, #12]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d1e4      	bne.n	800aaee <_Balloc+0x2e>
 800ab24:	2000      	movs	r0, #0
 800ab26:	bd70      	pop	{r4, r5, r6, pc}
 800ab28:	6802      	ldr	r2, [r0, #0]
 800ab2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab34:	e7f7      	b.n	800ab26 <_Balloc+0x66>
 800ab36:	bf00      	nop
 800ab38:	0800bd61 	.word	0x0800bd61
 800ab3c:	0800bde1 	.word	0x0800bde1

0800ab40 <_Bfree>:
 800ab40:	b570      	push	{r4, r5, r6, lr}
 800ab42:	69c6      	ldr	r6, [r0, #28]
 800ab44:	4605      	mov	r5, r0
 800ab46:	460c      	mov	r4, r1
 800ab48:	b976      	cbnz	r6, 800ab68 <_Bfree+0x28>
 800ab4a:	2010      	movs	r0, #16
 800ab4c:	f7fe fa60 	bl	8009010 <malloc>
 800ab50:	4602      	mov	r2, r0
 800ab52:	61e8      	str	r0, [r5, #28]
 800ab54:	b920      	cbnz	r0, 800ab60 <_Bfree+0x20>
 800ab56:	218f      	movs	r1, #143	@ 0x8f
 800ab58:	4b08      	ldr	r3, [pc, #32]	@ (800ab7c <_Bfree+0x3c>)
 800ab5a:	4809      	ldr	r0, [pc, #36]	@ (800ab80 <_Bfree+0x40>)
 800ab5c:	f000 fbe6 	bl	800b32c <__assert_func>
 800ab60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab64:	6006      	str	r6, [r0, #0]
 800ab66:	60c6      	str	r6, [r0, #12]
 800ab68:	b13c      	cbz	r4, 800ab7a <_Bfree+0x3a>
 800ab6a:	69eb      	ldr	r3, [r5, #28]
 800ab6c:	6862      	ldr	r2, [r4, #4]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab74:	6021      	str	r1, [r4, #0]
 800ab76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ab7a:	bd70      	pop	{r4, r5, r6, pc}
 800ab7c:	0800bd61 	.word	0x0800bd61
 800ab80:	0800bde1 	.word	0x0800bde1

0800ab84 <__multadd>:
 800ab84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab88:	4607      	mov	r7, r0
 800ab8a:	460c      	mov	r4, r1
 800ab8c:	461e      	mov	r6, r3
 800ab8e:	2000      	movs	r0, #0
 800ab90:	690d      	ldr	r5, [r1, #16]
 800ab92:	f101 0c14 	add.w	ip, r1, #20
 800ab96:	f8dc 3000 	ldr.w	r3, [ip]
 800ab9a:	3001      	adds	r0, #1
 800ab9c:	b299      	uxth	r1, r3
 800ab9e:	fb02 6101 	mla	r1, r2, r1, r6
 800aba2:	0c1e      	lsrs	r6, r3, #16
 800aba4:	0c0b      	lsrs	r3, r1, #16
 800aba6:	fb02 3306 	mla	r3, r2, r6, r3
 800abaa:	b289      	uxth	r1, r1
 800abac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800abb0:	4285      	cmp	r5, r0
 800abb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800abb6:	f84c 1b04 	str.w	r1, [ip], #4
 800abba:	dcec      	bgt.n	800ab96 <__multadd+0x12>
 800abbc:	b30e      	cbz	r6, 800ac02 <__multadd+0x7e>
 800abbe:	68a3      	ldr	r3, [r4, #8]
 800abc0:	42ab      	cmp	r3, r5
 800abc2:	dc19      	bgt.n	800abf8 <__multadd+0x74>
 800abc4:	6861      	ldr	r1, [r4, #4]
 800abc6:	4638      	mov	r0, r7
 800abc8:	3101      	adds	r1, #1
 800abca:	f7ff ff79 	bl	800aac0 <_Balloc>
 800abce:	4680      	mov	r8, r0
 800abd0:	b928      	cbnz	r0, 800abde <__multadd+0x5a>
 800abd2:	4602      	mov	r2, r0
 800abd4:	21ba      	movs	r1, #186	@ 0xba
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <__multadd+0x84>)
 800abd8:	480c      	ldr	r0, [pc, #48]	@ (800ac0c <__multadd+0x88>)
 800abda:	f000 fba7 	bl	800b32c <__assert_func>
 800abde:	6922      	ldr	r2, [r4, #16]
 800abe0:	f104 010c 	add.w	r1, r4, #12
 800abe4:	3202      	adds	r2, #2
 800abe6:	0092      	lsls	r2, r2, #2
 800abe8:	300c      	adds	r0, #12
 800abea:	f000 fb91 	bl	800b310 <memcpy>
 800abee:	4621      	mov	r1, r4
 800abf0:	4638      	mov	r0, r7
 800abf2:	f7ff ffa5 	bl	800ab40 <_Bfree>
 800abf6:	4644      	mov	r4, r8
 800abf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800abfc:	3501      	adds	r5, #1
 800abfe:	615e      	str	r6, [r3, #20]
 800ac00:	6125      	str	r5, [r4, #16]
 800ac02:	4620      	mov	r0, r4
 800ac04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac08:	0800bdd0 	.word	0x0800bdd0
 800ac0c:	0800bde1 	.word	0x0800bde1

0800ac10 <__hi0bits>:
 800ac10:	4603      	mov	r3, r0
 800ac12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ac16:	bf3a      	itte	cc
 800ac18:	0403      	lslcc	r3, r0, #16
 800ac1a:	2010      	movcc	r0, #16
 800ac1c:	2000      	movcs	r0, #0
 800ac1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ac22:	bf3c      	itt	cc
 800ac24:	021b      	lslcc	r3, r3, #8
 800ac26:	3008      	addcc	r0, #8
 800ac28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac2c:	bf3c      	itt	cc
 800ac2e:	011b      	lslcc	r3, r3, #4
 800ac30:	3004      	addcc	r0, #4
 800ac32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac36:	bf3c      	itt	cc
 800ac38:	009b      	lslcc	r3, r3, #2
 800ac3a:	3002      	addcc	r0, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	db05      	blt.n	800ac4c <__hi0bits+0x3c>
 800ac40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ac44:	f100 0001 	add.w	r0, r0, #1
 800ac48:	bf08      	it	eq
 800ac4a:	2020      	moveq	r0, #32
 800ac4c:	4770      	bx	lr

0800ac4e <__lo0bits>:
 800ac4e:	6803      	ldr	r3, [r0, #0]
 800ac50:	4602      	mov	r2, r0
 800ac52:	f013 0007 	ands.w	r0, r3, #7
 800ac56:	d00b      	beq.n	800ac70 <__lo0bits+0x22>
 800ac58:	07d9      	lsls	r1, r3, #31
 800ac5a:	d421      	bmi.n	800aca0 <__lo0bits+0x52>
 800ac5c:	0798      	lsls	r0, r3, #30
 800ac5e:	bf49      	itett	mi
 800ac60:	085b      	lsrmi	r3, r3, #1
 800ac62:	089b      	lsrpl	r3, r3, #2
 800ac64:	2001      	movmi	r0, #1
 800ac66:	6013      	strmi	r3, [r2, #0]
 800ac68:	bf5c      	itt	pl
 800ac6a:	2002      	movpl	r0, #2
 800ac6c:	6013      	strpl	r3, [r2, #0]
 800ac6e:	4770      	bx	lr
 800ac70:	b299      	uxth	r1, r3
 800ac72:	b909      	cbnz	r1, 800ac78 <__lo0bits+0x2a>
 800ac74:	2010      	movs	r0, #16
 800ac76:	0c1b      	lsrs	r3, r3, #16
 800ac78:	b2d9      	uxtb	r1, r3
 800ac7a:	b909      	cbnz	r1, 800ac80 <__lo0bits+0x32>
 800ac7c:	3008      	adds	r0, #8
 800ac7e:	0a1b      	lsrs	r3, r3, #8
 800ac80:	0719      	lsls	r1, r3, #28
 800ac82:	bf04      	itt	eq
 800ac84:	091b      	lsreq	r3, r3, #4
 800ac86:	3004      	addeq	r0, #4
 800ac88:	0799      	lsls	r1, r3, #30
 800ac8a:	bf04      	itt	eq
 800ac8c:	089b      	lsreq	r3, r3, #2
 800ac8e:	3002      	addeq	r0, #2
 800ac90:	07d9      	lsls	r1, r3, #31
 800ac92:	d403      	bmi.n	800ac9c <__lo0bits+0x4e>
 800ac94:	085b      	lsrs	r3, r3, #1
 800ac96:	f100 0001 	add.w	r0, r0, #1
 800ac9a:	d003      	beq.n	800aca4 <__lo0bits+0x56>
 800ac9c:	6013      	str	r3, [r2, #0]
 800ac9e:	4770      	bx	lr
 800aca0:	2000      	movs	r0, #0
 800aca2:	4770      	bx	lr
 800aca4:	2020      	movs	r0, #32
 800aca6:	4770      	bx	lr

0800aca8 <__i2b>:
 800aca8:	b510      	push	{r4, lr}
 800acaa:	460c      	mov	r4, r1
 800acac:	2101      	movs	r1, #1
 800acae:	f7ff ff07 	bl	800aac0 <_Balloc>
 800acb2:	4602      	mov	r2, r0
 800acb4:	b928      	cbnz	r0, 800acc2 <__i2b+0x1a>
 800acb6:	f240 1145 	movw	r1, #325	@ 0x145
 800acba:	4b04      	ldr	r3, [pc, #16]	@ (800accc <__i2b+0x24>)
 800acbc:	4804      	ldr	r0, [pc, #16]	@ (800acd0 <__i2b+0x28>)
 800acbe:	f000 fb35 	bl	800b32c <__assert_func>
 800acc2:	2301      	movs	r3, #1
 800acc4:	6144      	str	r4, [r0, #20]
 800acc6:	6103      	str	r3, [r0, #16]
 800acc8:	bd10      	pop	{r4, pc}
 800acca:	bf00      	nop
 800accc:	0800bdd0 	.word	0x0800bdd0
 800acd0:	0800bde1 	.word	0x0800bde1

0800acd4 <__multiply>:
 800acd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acd8:	4614      	mov	r4, r2
 800acda:	690a      	ldr	r2, [r1, #16]
 800acdc:	6923      	ldr	r3, [r4, #16]
 800acde:	460f      	mov	r7, r1
 800ace0:	429a      	cmp	r2, r3
 800ace2:	bfa2      	ittt	ge
 800ace4:	4623      	movge	r3, r4
 800ace6:	460c      	movge	r4, r1
 800ace8:	461f      	movge	r7, r3
 800acea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800acee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800acf2:	68a3      	ldr	r3, [r4, #8]
 800acf4:	6861      	ldr	r1, [r4, #4]
 800acf6:	eb0a 0609 	add.w	r6, sl, r9
 800acfa:	42b3      	cmp	r3, r6
 800acfc:	b085      	sub	sp, #20
 800acfe:	bfb8      	it	lt
 800ad00:	3101      	addlt	r1, #1
 800ad02:	f7ff fedd 	bl	800aac0 <_Balloc>
 800ad06:	b930      	cbnz	r0, 800ad16 <__multiply+0x42>
 800ad08:	4602      	mov	r2, r0
 800ad0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ad0e:	4b43      	ldr	r3, [pc, #268]	@ (800ae1c <__multiply+0x148>)
 800ad10:	4843      	ldr	r0, [pc, #268]	@ (800ae20 <__multiply+0x14c>)
 800ad12:	f000 fb0b 	bl	800b32c <__assert_func>
 800ad16:	f100 0514 	add.w	r5, r0, #20
 800ad1a:	462b      	mov	r3, r5
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ad22:	4543      	cmp	r3, r8
 800ad24:	d321      	bcc.n	800ad6a <__multiply+0x96>
 800ad26:	f107 0114 	add.w	r1, r7, #20
 800ad2a:	f104 0214 	add.w	r2, r4, #20
 800ad2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ad32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ad36:	9302      	str	r3, [sp, #8]
 800ad38:	1b13      	subs	r3, r2, r4
 800ad3a:	3b15      	subs	r3, #21
 800ad3c:	f023 0303 	bic.w	r3, r3, #3
 800ad40:	3304      	adds	r3, #4
 800ad42:	f104 0715 	add.w	r7, r4, #21
 800ad46:	42ba      	cmp	r2, r7
 800ad48:	bf38      	it	cc
 800ad4a:	2304      	movcc	r3, #4
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	9b02      	ldr	r3, [sp, #8]
 800ad50:	9103      	str	r1, [sp, #12]
 800ad52:	428b      	cmp	r3, r1
 800ad54:	d80c      	bhi.n	800ad70 <__multiply+0x9c>
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	dd03      	ble.n	800ad62 <__multiply+0x8e>
 800ad5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d05a      	beq.n	800ae18 <__multiply+0x144>
 800ad62:	6106      	str	r6, [r0, #16]
 800ad64:	b005      	add	sp, #20
 800ad66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad6a:	f843 2b04 	str.w	r2, [r3], #4
 800ad6e:	e7d8      	b.n	800ad22 <__multiply+0x4e>
 800ad70:	f8b1 a000 	ldrh.w	sl, [r1]
 800ad74:	f1ba 0f00 	cmp.w	sl, #0
 800ad78:	d023      	beq.n	800adc2 <__multiply+0xee>
 800ad7a:	46a9      	mov	r9, r5
 800ad7c:	f04f 0c00 	mov.w	ip, #0
 800ad80:	f104 0e14 	add.w	lr, r4, #20
 800ad84:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad88:	f8d9 3000 	ldr.w	r3, [r9]
 800ad8c:	fa1f fb87 	uxth.w	fp, r7
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	fb0a 330b 	mla	r3, sl, fp, r3
 800ad96:	4463      	add	r3, ip
 800ad98:	f8d9 c000 	ldr.w	ip, [r9]
 800ad9c:	0c3f      	lsrs	r7, r7, #16
 800ad9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800ada2:	fb0a c707 	mla	r7, sl, r7, ip
 800ada6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800adaa:	b29b      	uxth	r3, r3
 800adac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adb0:	4572      	cmp	r2, lr
 800adb2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800adb6:	f849 3b04 	str.w	r3, [r9], #4
 800adba:	d8e3      	bhi.n	800ad84 <__multiply+0xb0>
 800adbc:	9b01      	ldr	r3, [sp, #4]
 800adbe:	f845 c003 	str.w	ip, [r5, r3]
 800adc2:	9b03      	ldr	r3, [sp, #12]
 800adc4:	3104      	adds	r1, #4
 800adc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800adca:	f1b9 0f00 	cmp.w	r9, #0
 800adce:	d021      	beq.n	800ae14 <__multiply+0x140>
 800add0:	46ae      	mov	lr, r5
 800add2:	f04f 0a00 	mov.w	sl, #0
 800add6:	682b      	ldr	r3, [r5, #0]
 800add8:	f104 0c14 	add.w	ip, r4, #20
 800addc:	f8bc b000 	ldrh.w	fp, [ip]
 800ade0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	fb09 770b 	mla	r7, r9, fp, r7
 800adea:	4457      	add	r7, sl
 800adec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800adf0:	f84e 3b04 	str.w	r3, [lr], #4
 800adf4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adf8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adfc:	f8be 3000 	ldrh.w	r3, [lr]
 800ae00:	4562      	cmp	r2, ip
 800ae02:	fb09 330a 	mla	r3, r9, sl, r3
 800ae06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ae0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae0e:	d8e5      	bhi.n	800addc <__multiply+0x108>
 800ae10:	9f01      	ldr	r7, [sp, #4]
 800ae12:	51eb      	str	r3, [r5, r7]
 800ae14:	3504      	adds	r5, #4
 800ae16:	e79a      	b.n	800ad4e <__multiply+0x7a>
 800ae18:	3e01      	subs	r6, #1
 800ae1a:	e79c      	b.n	800ad56 <__multiply+0x82>
 800ae1c:	0800bdd0 	.word	0x0800bdd0
 800ae20:	0800bde1 	.word	0x0800bde1

0800ae24 <__pow5mult>:
 800ae24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae28:	4615      	mov	r5, r2
 800ae2a:	f012 0203 	ands.w	r2, r2, #3
 800ae2e:	4607      	mov	r7, r0
 800ae30:	460e      	mov	r6, r1
 800ae32:	d007      	beq.n	800ae44 <__pow5mult+0x20>
 800ae34:	4c25      	ldr	r4, [pc, #148]	@ (800aecc <__pow5mult+0xa8>)
 800ae36:	3a01      	subs	r2, #1
 800ae38:	2300      	movs	r3, #0
 800ae3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ae3e:	f7ff fea1 	bl	800ab84 <__multadd>
 800ae42:	4606      	mov	r6, r0
 800ae44:	10ad      	asrs	r5, r5, #2
 800ae46:	d03d      	beq.n	800aec4 <__pow5mult+0xa0>
 800ae48:	69fc      	ldr	r4, [r7, #28]
 800ae4a:	b97c      	cbnz	r4, 800ae6c <__pow5mult+0x48>
 800ae4c:	2010      	movs	r0, #16
 800ae4e:	f7fe f8df 	bl	8009010 <malloc>
 800ae52:	4602      	mov	r2, r0
 800ae54:	61f8      	str	r0, [r7, #28]
 800ae56:	b928      	cbnz	r0, 800ae64 <__pow5mult+0x40>
 800ae58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ae5c:	4b1c      	ldr	r3, [pc, #112]	@ (800aed0 <__pow5mult+0xac>)
 800ae5e:	481d      	ldr	r0, [pc, #116]	@ (800aed4 <__pow5mult+0xb0>)
 800ae60:	f000 fa64 	bl	800b32c <__assert_func>
 800ae64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ae68:	6004      	str	r4, [r0, #0]
 800ae6a:	60c4      	str	r4, [r0, #12]
 800ae6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ae70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ae74:	b94c      	cbnz	r4, 800ae8a <__pow5mult+0x66>
 800ae76:	f240 2171 	movw	r1, #625	@ 0x271
 800ae7a:	4638      	mov	r0, r7
 800ae7c:	f7ff ff14 	bl	800aca8 <__i2b>
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae88:	6003      	str	r3, [r0, #0]
 800ae8a:	f04f 0900 	mov.w	r9, #0
 800ae8e:	07eb      	lsls	r3, r5, #31
 800ae90:	d50a      	bpl.n	800aea8 <__pow5mult+0x84>
 800ae92:	4631      	mov	r1, r6
 800ae94:	4622      	mov	r2, r4
 800ae96:	4638      	mov	r0, r7
 800ae98:	f7ff ff1c 	bl	800acd4 <__multiply>
 800ae9c:	4680      	mov	r8, r0
 800ae9e:	4631      	mov	r1, r6
 800aea0:	4638      	mov	r0, r7
 800aea2:	f7ff fe4d 	bl	800ab40 <_Bfree>
 800aea6:	4646      	mov	r6, r8
 800aea8:	106d      	asrs	r5, r5, #1
 800aeaa:	d00b      	beq.n	800aec4 <__pow5mult+0xa0>
 800aeac:	6820      	ldr	r0, [r4, #0]
 800aeae:	b938      	cbnz	r0, 800aec0 <__pow5mult+0x9c>
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	f7ff ff0d 	bl	800acd4 <__multiply>
 800aeba:	6020      	str	r0, [r4, #0]
 800aebc:	f8c0 9000 	str.w	r9, [r0]
 800aec0:	4604      	mov	r4, r0
 800aec2:	e7e4      	b.n	800ae8e <__pow5mult+0x6a>
 800aec4:	4630      	mov	r0, r6
 800aec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aeca:	bf00      	nop
 800aecc:	0800be3c 	.word	0x0800be3c
 800aed0:	0800bd61 	.word	0x0800bd61
 800aed4:	0800bde1 	.word	0x0800bde1

0800aed8 <__lshift>:
 800aed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	460c      	mov	r4, r1
 800aede:	4607      	mov	r7, r0
 800aee0:	4691      	mov	r9, r2
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	6849      	ldr	r1, [r1, #4]
 800aee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aeea:	68a3      	ldr	r3, [r4, #8]
 800aeec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aef0:	f108 0601 	add.w	r6, r8, #1
 800aef4:	42b3      	cmp	r3, r6
 800aef6:	db0b      	blt.n	800af10 <__lshift+0x38>
 800aef8:	4638      	mov	r0, r7
 800aefa:	f7ff fde1 	bl	800aac0 <_Balloc>
 800aefe:	4605      	mov	r5, r0
 800af00:	b948      	cbnz	r0, 800af16 <__lshift+0x3e>
 800af02:	4602      	mov	r2, r0
 800af04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800af08:	4b27      	ldr	r3, [pc, #156]	@ (800afa8 <__lshift+0xd0>)
 800af0a:	4828      	ldr	r0, [pc, #160]	@ (800afac <__lshift+0xd4>)
 800af0c:	f000 fa0e 	bl	800b32c <__assert_func>
 800af10:	3101      	adds	r1, #1
 800af12:	005b      	lsls	r3, r3, #1
 800af14:	e7ee      	b.n	800aef4 <__lshift+0x1c>
 800af16:	2300      	movs	r3, #0
 800af18:	f100 0114 	add.w	r1, r0, #20
 800af1c:	f100 0210 	add.w	r2, r0, #16
 800af20:	4618      	mov	r0, r3
 800af22:	4553      	cmp	r3, sl
 800af24:	db33      	blt.n	800af8e <__lshift+0xb6>
 800af26:	6920      	ldr	r0, [r4, #16]
 800af28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800af2c:	f104 0314 	add.w	r3, r4, #20
 800af30:	f019 091f 	ands.w	r9, r9, #31
 800af34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800af38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800af3c:	d02b      	beq.n	800af96 <__lshift+0xbe>
 800af3e:	468a      	mov	sl, r1
 800af40:	2200      	movs	r2, #0
 800af42:	f1c9 0e20 	rsb	lr, r9, #32
 800af46:	6818      	ldr	r0, [r3, #0]
 800af48:	fa00 f009 	lsl.w	r0, r0, r9
 800af4c:	4310      	orrs	r0, r2
 800af4e:	f84a 0b04 	str.w	r0, [sl], #4
 800af52:	f853 2b04 	ldr.w	r2, [r3], #4
 800af56:	459c      	cmp	ip, r3
 800af58:	fa22 f20e 	lsr.w	r2, r2, lr
 800af5c:	d8f3      	bhi.n	800af46 <__lshift+0x6e>
 800af5e:	ebac 0304 	sub.w	r3, ip, r4
 800af62:	3b15      	subs	r3, #21
 800af64:	f023 0303 	bic.w	r3, r3, #3
 800af68:	3304      	adds	r3, #4
 800af6a:	f104 0015 	add.w	r0, r4, #21
 800af6e:	4584      	cmp	ip, r0
 800af70:	bf38      	it	cc
 800af72:	2304      	movcc	r3, #4
 800af74:	50ca      	str	r2, [r1, r3]
 800af76:	b10a      	cbz	r2, 800af7c <__lshift+0xa4>
 800af78:	f108 0602 	add.w	r6, r8, #2
 800af7c:	3e01      	subs	r6, #1
 800af7e:	4638      	mov	r0, r7
 800af80:	4621      	mov	r1, r4
 800af82:	612e      	str	r6, [r5, #16]
 800af84:	f7ff fddc 	bl	800ab40 <_Bfree>
 800af88:	4628      	mov	r0, r5
 800af8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af92:	3301      	adds	r3, #1
 800af94:	e7c5      	b.n	800af22 <__lshift+0x4a>
 800af96:	3904      	subs	r1, #4
 800af98:	f853 2b04 	ldr.w	r2, [r3], #4
 800af9c:	459c      	cmp	ip, r3
 800af9e:	f841 2f04 	str.w	r2, [r1, #4]!
 800afa2:	d8f9      	bhi.n	800af98 <__lshift+0xc0>
 800afa4:	e7ea      	b.n	800af7c <__lshift+0xa4>
 800afa6:	bf00      	nop
 800afa8:	0800bdd0 	.word	0x0800bdd0
 800afac:	0800bde1 	.word	0x0800bde1

0800afb0 <__mcmp>:
 800afb0:	4603      	mov	r3, r0
 800afb2:	690a      	ldr	r2, [r1, #16]
 800afb4:	6900      	ldr	r0, [r0, #16]
 800afb6:	b530      	push	{r4, r5, lr}
 800afb8:	1a80      	subs	r0, r0, r2
 800afba:	d10e      	bne.n	800afda <__mcmp+0x2a>
 800afbc:	3314      	adds	r3, #20
 800afbe:	3114      	adds	r1, #20
 800afc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800afc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800afc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800afcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800afd0:	4295      	cmp	r5, r2
 800afd2:	d003      	beq.n	800afdc <__mcmp+0x2c>
 800afd4:	d205      	bcs.n	800afe2 <__mcmp+0x32>
 800afd6:	f04f 30ff 	mov.w	r0, #4294967295
 800afda:	bd30      	pop	{r4, r5, pc}
 800afdc:	42a3      	cmp	r3, r4
 800afde:	d3f3      	bcc.n	800afc8 <__mcmp+0x18>
 800afe0:	e7fb      	b.n	800afda <__mcmp+0x2a>
 800afe2:	2001      	movs	r0, #1
 800afe4:	e7f9      	b.n	800afda <__mcmp+0x2a>
	...

0800afe8 <__mdiff>:
 800afe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afec:	4689      	mov	r9, r1
 800afee:	4606      	mov	r6, r0
 800aff0:	4611      	mov	r1, r2
 800aff2:	4648      	mov	r0, r9
 800aff4:	4614      	mov	r4, r2
 800aff6:	f7ff ffdb 	bl	800afb0 <__mcmp>
 800affa:	1e05      	subs	r5, r0, #0
 800affc:	d112      	bne.n	800b024 <__mdiff+0x3c>
 800affe:	4629      	mov	r1, r5
 800b000:	4630      	mov	r0, r6
 800b002:	f7ff fd5d 	bl	800aac0 <_Balloc>
 800b006:	4602      	mov	r2, r0
 800b008:	b928      	cbnz	r0, 800b016 <__mdiff+0x2e>
 800b00a:	f240 2137 	movw	r1, #567	@ 0x237
 800b00e:	4b3e      	ldr	r3, [pc, #248]	@ (800b108 <__mdiff+0x120>)
 800b010:	483e      	ldr	r0, [pc, #248]	@ (800b10c <__mdiff+0x124>)
 800b012:	f000 f98b 	bl	800b32c <__assert_func>
 800b016:	2301      	movs	r3, #1
 800b018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b01c:	4610      	mov	r0, r2
 800b01e:	b003      	add	sp, #12
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b024:	bfbc      	itt	lt
 800b026:	464b      	movlt	r3, r9
 800b028:	46a1      	movlt	r9, r4
 800b02a:	4630      	mov	r0, r6
 800b02c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b030:	bfba      	itte	lt
 800b032:	461c      	movlt	r4, r3
 800b034:	2501      	movlt	r5, #1
 800b036:	2500      	movge	r5, #0
 800b038:	f7ff fd42 	bl	800aac0 <_Balloc>
 800b03c:	4602      	mov	r2, r0
 800b03e:	b918      	cbnz	r0, 800b048 <__mdiff+0x60>
 800b040:	f240 2145 	movw	r1, #581	@ 0x245
 800b044:	4b30      	ldr	r3, [pc, #192]	@ (800b108 <__mdiff+0x120>)
 800b046:	e7e3      	b.n	800b010 <__mdiff+0x28>
 800b048:	f100 0b14 	add.w	fp, r0, #20
 800b04c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b050:	f109 0310 	add.w	r3, r9, #16
 800b054:	60c5      	str	r5, [r0, #12]
 800b056:	f04f 0c00 	mov.w	ip, #0
 800b05a:	f109 0514 	add.w	r5, r9, #20
 800b05e:	46d9      	mov	r9, fp
 800b060:	6926      	ldr	r6, [r4, #16]
 800b062:	f104 0e14 	add.w	lr, r4, #20
 800b066:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b06a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b07a:	b281      	uxth	r1, r0
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	fa1f f38a 	uxth.w	r3, sl
 800b082:	1a5b      	subs	r3, r3, r1
 800b084:	0c00      	lsrs	r0, r0, #16
 800b086:	4463      	add	r3, ip
 800b088:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b08c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b090:	b29b      	uxth	r3, r3
 800b092:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b096:	4576      	cmp	r6, lr
 800b098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b09c:	f849 3b04 	str.w	r3, [r9], #4
 800b0a0:	d8e6      	bhi.n	800b070 <__mdiff+0x88>
 800b0a2:	1b33      	subs	r3, r6, r4
 800b0a4:	3b15      	subs	r3, #21
 800b0a6:	f023 0303 	bic.w	r3, r3, #3
 800b0aa:	3415      	adds	r4, #21
 800b0ac:	3304      	adds	r3, #4
 800b0ae:	42a6      	cmp	r6, r4
 800b0b0:	bf38      	it	cc
 800b0b2:	2304      	movcc	r3, #4
 800b0b4:	441d      	add	r5, r3
 800b0b6:	445b      	add	r3, fp
 800b0b8:	461e      	mov	r6, r3
 800b0ba:	462c      	mov	r4, r5
 800b0bc:	4544      	cmp	r4, r8
 800b0be:	d30e      	bcc.n	800b0de <__mdiff+0xf6>
 800b0c0:	f108 0103 	add.w	r1, r8, #3
 800b0c4:	1b49      	subs	r1, r1, r5
 800b0c6:	f021 0103 	bic.w	r1, r1, #3
 800b0ca:	3d03      	subs	r5, #3
 800b0cc:	45a8      	cmp	r8, r5
 800b0ce:	bf38      	it	cc
 800b0d0:	2100      	movcc	r1, #0
 800b0d2:	440b      	add	r3, r1
 800b0d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0d8:	b199      	cbz	r1, 800b102 <__mdiff+0x11a>
 800b0da:	6117      	str	r7, [r2, #16]
 800b0dc:	e79e      	b.n	800b01c <__mdiff+0x34>
 800b0de:	46e6      	mov	lr, ip
 800b0e0:	f854 1b04 	ldr.w	r1, [r4], #4
 800b0e4:	fa1f fc81 	uxth.w	ip, r1
 800b0e8:	44f4      	add	ip, lr
 800b0ea:	0c08      	lsrs	r0, r1, #16
 800b0ec:	4471      	add	r1, lr
 800b0ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b0f2:	b289      	uxth	r1, r1
 800b0f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b0f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b0fc:	f846 1b04 	str.w	r1, [r6], #4
 800b100:	e7dc      	b.n	800b0bc <__mdiff+0xd4>
 800b102:	3f01      	subs	r7, #1
 800b104:	e7e6      	b.n	800b0d4 <__mdiff+0xec>
 800b106:	bf00      	nop
 800b108:	0800bdd0 	.word	0x0800bdd0
 800b10c:	0800bde1 	.word	0x0800bde1

0800b110 <__d2b>:
 800b110:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800b114:	2101      	movs	r1, #1
 800b116:	4690      	mov	r8, r2
 800b118:	4699      	mov	r9, r3
 800b11a:	9e08      	ldr	r6, [sp, #32]
 800b11c:	f7ff fcd0 	bl	800aac0 <_Balloc>
 800b120:	4604      	mov	r4, r0
 800b122:	b930      	cbnz	r0, 800b132 <__d2b+0x22>
 800b124:	4602      	mov	r2, r0
 800b126:	f240 310f 	movw	r1, #783	@ 0x30f
 800b12a:	4b23      	ldr	r3, [pc, #140]	@ (800b1b8 <__d2b+0xa8>)
 800b12c:	4823      	ldr	r0, [pc, #140]	@ (800b1bc <__d2b+0xac>)
 800b12e:	f000 f8fd 	bl	800b32c <__assert_func>
 800b132:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b136:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b13a:	b10d      	cbz	r5, 800b140 <__d2b+0x30>
 800b13c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b140:	9301      	str	r3, [sp, #4]
 800b142:	f1b8 0300 	subs.w	r3, r8, #0
 800b146:	d024      	beq.n	800b192 <__d2b+0x82>
 800b148:	4668      	mov	r0, sp
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	f7ff fd7f 	bl	800ac4e <__lo0bits>
 800b150:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b154:	b1d8      	cbz	r0, 800b18e <__d2b+0x7e>
 800b156:	f1c0 0320 	rsb	r3, r0, #32
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	430b      	orrs	r3, r1
 800b160:	40c2      	lsrs	r2, r0
 800b162:	6163      	str	r3, [r4, #20]
 800b164:	9201      	str	r2, [sp, #4]
 800b166:	9b01      	ldr	r3, [sp, #4]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	bf0c      	ite	eq
 800b16c:	2201      	moveq	r2, #1
 800b16e:	2202      	movne	r2, #2
 800b170:	61a3      	str	r3, [r4, #24]
 800b172:	6122      	str	r2, [r4, #16]
 800b174:	b1ad      	cbz	r5, 800b1a2 <__d2b+0x92>
 800b176:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b17a:	4405      	add	r5, r0
 800b17c:	6035      	str	r5, [r6, #0]
 800b17e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b184:	6018      	str	r0, [r3, #0]
 800b186:	4620      	mov	r0, r4
 800b188:	b002      	add	sp, #8
 800b18a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800b18e:	6161      	str	r1, [r4, #20]
 800b190:	e7e9      	b.n	800b166 <__d2b+0x56>
 800b192:	a801      	add	r0, sp, #4
 800b194:	f7ff fd5b 	bl	800ac4e <__lo0bits>
 800b198:	9b01      	ldr	r3, [sp, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	6163      	str	r3, [r4, #20]
 800b19e:	3020      	adds	r0, #32
 800b1a0:	e7e7      	b.n	800b172 <__d2b+0x62>
 800b1a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b1a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b1aa:	6030      	str	r0, [r6, #0]
 800b1ac:	6918      	ldr	r0, [r3, #16]
 800b1ae:	f7ff fd2f 	bl	800ac10 <__hi0bits>
 800b1b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b1b6:	e7e4      	b.n	800b182 <__d2b+0x72>
 800b1b8:	0800bdd0 	.word	0x0800bdd0
 800b1bc:	0800bde1 	.word	0x0800bde1

0800b1c0 <__sflush_r>:
 800b1c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1c6:	0716      	lsls	r6, r2, #28
 800b1c8:	4605      	mov	r5, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	d454      	bmi.n	800b278 <__sflush_r+0xb8>
 800b1ce:	684b      	ldr	r3, [r1, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	dc02      	bgt.n	800b1da <__sflush_r+0x1a>
 800b1d4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd48      	ble.n	800b26c <__sflush_r+0xac>
 800b1da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b1dc:	2e00      	cmp	r6, #0
 800b1de:	d045      	beq.n	800b26c <__sflush_r+0xac>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b1e6:	682f      	ldr	r7, [r5, #0]
 800b1e8:	6a21      	ldr	r1, [r4, #32]
 800b1ea:	602b      	str	r3, [r5, #0]
 800b1ec:	d030      	beq.n	800b250 <__sflush_r+0x90>
 800b1ee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	0759      	lsls	r1, r3, #29
 800b1f4:	d505      	bpl.n	800b202 <__sflush_r+0x42>
 800b1f6:	6863      	ldr	r3, [r4, #4]
 800b1f8:	1ad2      	subs	r2, r2, r3
 800b1fa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b1fc:	b10b      	cbz	r3, 800b202 <__sflush_r+0x42>
 800b1fe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b200:	1ad2      	subs	r2, r2, r3
 800b202:	2300      	movs	r3, #0
 800b204:	4628      	mov	r0, r5
 800b206:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b208:	6a21      	ldr	r1, [r4, #32]
 800b20a:	47b0      	blx	r6
 800b20c:	1c43      	adds	r3, r0, #1
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	d106      	bne.n	800b220 <__sflush_r+0x60>
 800b212:	6829      	ldr	r1, [r5, #0]
 800b214:	291d      	cmp	r1, #29
 800b216:	d82b      	bhi.n	800b270 <__sflush_r+0xb0>
 800b218:	4a28      	ldr	r2, [pc, #160]	@ (800b2bc <__sflush_r+0xfc>)
 800b21a:	410a      	asrs	r2, r1
 800b21c:	07d6      	lsls	r6, r2, #31
 800b21e:	d427      	bmi.n	800b270 <__sflush_r+0xb0>
 800b220:	2200      	movs	r2, #0
 800b222:	6062      	str	r2, [r4, #4]
 800b224:	6922      	ldr	r2, [r4, #16]
 800b226:	04d9      	lsls	r1, r3, #19
 800b228:	6022      	str	r2, [r4, #0]
 800b22a:	d504      	bpl.n	800b236 <__sflush_r+0x76>
 800b22c:	1c42      	adds	r2, r0, #1
 800b22e:	d101      	bne.n	800b234 <__sflush_r+0x74>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b903      	cbnz	r3, 800b236 <__sflush_r+0x76>
 800b234:	6560      	str	r0, [r4, #84]	@ 0x54
 800b236:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b238:	602f      	str	r7, [r5, #0]
 800b23a:	b1b9      	cbz	r1, 800b26c <__sflush_r+0xac>
 800b23c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b240:	4299      	cmp	r1, r3
 800b242:	d002      	beq.n	800b24a <__sflush_r+0x8a>
 800b244:	4628      	mov	r0, r5
 800b246:	f7ff fbf3 	bl	800aa30 <_free_r>
 800b24a:	2300      	movs	r3, #0
 800b24c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b24e:	e00d      	b.n	800b26c <__sflush_r+0xac>
 800b250:	2301      	movs	r3, #1
 800b252:	4628      	mov	r0, r5
 800b254:	47b0      	blx	r6
 800b256:	4602      	mov	r2, r0
 800b258:	1c50      	adds	r0, r2, #1
 800b25a:	d1c9      	bne.n	800b1f0 <__sflush_r+0x30>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d0c6      	beq.n	800b1f0 <__sflush_r+0x30>
 800b262:	2b1d      	cmp	r3, #29
 800b264:	d001      	beq.n	800b26a <__sflush_r+0xaa>
 800b266:	2b16      	cmp	r3, #22
 800b268:	d11d      	bne.n	800b2a6 <__sflush_r+0xe6>
 800b26a:	602f      	str	r7, [r5, #0]
 800b26c:	2000      	movs	r0, #0
 800b26e:	e021      	b.n	800b2b4 <__sflush_r+0xf4>
 800b270:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b274:	b21b      	sxth	r3, r3
 800b276:	e01a      	b.n	800b2ae <__sflush_r+0xee>
 800b278:	690f      	ldr	r7, [r1, #16]
 800b27a:	2f00      	cmp	r7, #0
 800b27c:	d0f6      	beq.n	800b26c <__sflush_r+0xac>
 800b27e:	0793      	lsls	r3, r2, #30
 800b280:	bf18      	it	ne
 800b282:	2300      	movne	r3, #0
 800b284:	680e      	ldr	r6, [r1, #0]
 800b286:	bf08      	it	eq
 800b288:	694b      	ldreq	r3, [r1, #20]
 800b28a:	1bf6      	subs	r6, r6, r7
 800b28c:	600f      	str	r7, [r1, #0]
 800b28e:	608b      	str	r3, [r1, #8]
 800b290:	2e00      	cmp	r6, #0
 800b292:	ddeb      	ble.n	800b26c <__sflush_r+0xac>
 800b294:	4633      	mov	r3, r6
 800b296:	463a      	mov	r2, r7
 800b298:	4628      	mov	r0, r5
 800b29a:	6a21      	ldr	r1, [r4, #32]
 800b29c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800b2a0:	47e0      	blx	ip
 800b2a2:	2800      	cmp	r0, #0
 800b2a4:	dc07      	bgt.n	800b2b6 <__sflush_r+0xf6>
 800b2a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b2ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2b6:	4407      	add	r7, r0
 800b2b8:	1a36      	subs	r6, r6, r0
 800b2ba:	e7e9      	b.n	800b290 <__sflush_r+0xd0>
 800b2bc:	dfbffffe 	.word	0xdfbffffe

0800b2c0 <_fflush_r>:
 800b2c0:	b538      	push	{r3, r4, r5, lr}
 800b2c2:	690b      	ldr	r3, [r1, #16]
 800b2c4:	4605      	mov	r5, r0
 800b2c6:	460c      	mov	r4, r1
 800b2c8:	b913      	cbnz	r3, 800b2d0 <_fflush_r+0x10>
 800b2ca:	2500      	movs	r5, #0
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
 800b2d0:	b118      	cbz	r0, 800b2da <_fflush_r+0x1a>
 800b2d2:	6a03      	ldr	r3, [r0, #32]
 800b2d4:	b90b      	cbnz	r3, 800b2da <_fflush_r+0x1a>
 800b2d6:	f7fe fc41 	bl	8009b5c <__sinit>
 800b2da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d0f3      	beq.n	800b2ca <_fflush_r+0xa>
 800b2e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b2e4:	07d0      	lsls	r0, r2, #31
 800b2e6:	d404      	bmi.n	800b2f2 <_fflush_r+0x32>
 800b2e8:	0599      	lsls	r1, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_fflush_r+0x32>
 800b2ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b2ee:	f7fe fd3c 	bl	8009d6a <__retarget_lock_acquire_recursive>
 800b2f2:	4628      	mov	r0, r5
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	f7ff ff63 	bl	800b1c0 <__sflush_r>
 800b2fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	07da      	lsls	r2, r3, #31
 800b300:	d4e4      	bmi.n	800b2cc <_fflush_r+0xc>
 800b302:	89a3      	ldrh	r3, [r4, #12]
 800b304:	059b      	lsls	r3, r3, #22
 800b306:	d4e1      	bmi.n	800b2cc <_fflush_r+0xc>
 800b308:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b30a:	f7fe fd2f 	bl	8009d6c <__retarget_lock_release_recursive>
 800b30e:	e7dd      	b.n	800b2cc <_fflush_r+0xc>

0800b310 <memcpy>:
 800b310:	440a      	add	r2, r1
 800b312:	4291      	cmp	r1, r2
 800b314:	f100 33ff 	add.w	r3, r0, #4294967295
 800b318:	d100      	bne.n	800b31c <memcpy+0xc>
 800b31a:	4770      	bx	lr
 800b31c:	b510      	push	{r4, lr}
 800b31e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b322:	4291      	cmp	r1, r2
 800b324:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b328:	d1f9      	bne.n	800b31e <memcpy+0xe>
 800b32a:	bd10      	pop	{r4, pc}

0800b32c <__assert_func>:
 800b32c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b32e:	4614      	mov	r4, r2
 800b330:	461a      	mov	r2, r3
 800b332:	4b09      	ldr	r3, [pc, #36]	@ (800b358 <__assert_func+0x2c>)
 800b334:	4605      	mov	r5, r0
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	68d8      	ldr	r0, [r3, #12]
 800b33a:	b954      	cbnz	r4, 800b352 <__assert_func+0x26>
 800b33c:	4b07      	ldr	r3, [pc, #28]	@ (800b35c <__assert_func+0x30>)
 800b33e:	461c      	mov	r4, r3
 800b340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b344:	9100      	str	r1, [sp, #0]
 800b346:	462b      	mov	r3, r5
 800b348:	4905      	ldr	r1, [pc, #20]	@ (800b360 <__assert_func+0x34>)
 800b34a:	f000 f841 	bl	800b3d0 <fiprintf>
 800b34e:	f000 f851 	bl	800b3f4 <abort>
 800b352:	4b04      	ldr	r3, [pc, #16]	@ (800b364 <__assert_func+0x38>)
 800b354:	e7f4      	b.n	800b340 <__assert_func+0x14>
 800b356:	bf00      	nop
 800b358:	2000004c 	.word	0x2000004c
 800b35c:	0800bf7d 	.word	0x0800bf7d
 800b360:	0800bf4f 	.word	0x0800bf4f
 800b364:	0800bf42 	.word	0x0800bf42

0800b368 <_calloc_r>:
 800b368:	b570      	push	{r4, r5, r6, lr}
 800b36a:	fba1 5402 	umull	r5, r4, r1, r2
 800b36e:	b93c      	cbnz	r4, 800b380 <_calloc_r+0x18>
 800b370:	4629      	mov	r1, r5
 800b372:	f7fd fe7f 	bl	8009074 <_malloc_r>
 800b376:	4606      	mov	r6, r0
 800b378:	b928      	cbnz	r0, 800b386 <_calloc_r+0x1e>
 800b37a:	2600      	movs	r6, #0
 800b37c:	4630      	mov	r0, r6
 800b37e:	bd70      	pop	{r4, r5, r6, pc}
 800b380:	220c      	movs	r2, #12
 800b382:	6002      	str	r2, [r0, #0]
 800b384:	e7f9      	b.n	800b37a <_calloc_r+0x12>
 800b386:	462a      	mov	r2, r5
 800b388:	4621      	mov	r1, r4
 800b38a:	f7fe fc60 	bl	8009c4e <memset>
 800b38e:	e7f5      	b.n	800b37c <_calloc_r+0x14>

0800b390 <__ascii_mbtowc>:
 800b390:	b082      	sub	sp, #8
 800b392:	b901      	cbnz	r1, 800b396 <__ascii_mbtowc+0x6>
 800b394:	a901      	add	r1, sp, #4
 800b396:	b142      	cbz	r2, 800b3aa <__ascii_mbtowc+0x1a>
 800b398:	b14b      	cbz	r3, 800b3ae <__ascii_mbtowc+0x1e>
 800b39a:	7813      	ldrb	r3, [r2, #0]
 800b39c:	600b      	str	r3, [r1, #0]
 800b39e:	7812      	ldrb	r2, [r2, #0]
 800b3a0:	1e10      	subs	r0, r2, #0
 800b3a2:	bf18      	it	ne
 800b3a4:	2001      	movne	r0, #1
 800b3a6:	b002      	add	sp, #8
 800b3a8:	4770      	bx	lr
 800b3aa:	4610      	mov	r0, r2
 800b3ac:	e7fb      	b.n	800b3a6 <__ascii_mbtowc+0x16>
 800b3ae:	f06f 0001 	mvn.w	r0, #1
 800b3b2:	e7f8      	b.n	800b3a6 <__ascii_mbtowc+0x16>

0800b3b4 <__ascii_wctomb>:
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	4608      	mov	r0, r1
 800b3b8:	b141      	cbz	r1, 800b3cc <__ascii_wctomb+0x18>
 800b3ba:	2aff      	cmp	r2, #255	@ 0xff
 800b3bc:	d904      	bls.n	800b3c8 <__ascii_wctomb+0x14>
 800b3be:	228a      	movs	r2, #138	@ 0x8a
 800b3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3c4:	601a      	str	r2, [r3, #0]
 800b3c6:	4770      	bx	lr
 800b3c8:	2001      	movs	r0, #1
 800b3ca:	700a      	strb	r2, [r1, #0]
 800b3cc:	4770      	bx	lr
	...

0800b3d0 <fiprintf>:
 800b3d0:	b40e      	push	{r1, r2, r3}
 800b3d2:	b503      	push	{r0, r1, lr}
 800b3d4:	4601      	mov	r1, r0
 800b3d6:	ab03      	add	r3, sp, #12
 800b3d8:	4805      	ldr	r0, [pc, #20]	@ (800b3f0 <fiprintf+0x20>)
 800b3da:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3de:	6800      	ldr	r0, [r0, #0]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	f000 f835 	bl	800b450 <_vfiprintf_r>
 800b3e6:	b002      	add	sp, #8
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	2000004c 	.word	0x2000004c

0800b3f4 <abort>:
 800b3f4:	2006      	movs	r0, #6
 800b3f6:	b508      	push	{r3, lr}
 800b3f8:	f000 f9fe 	bl	800b7f8 <raise>
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	f7f8 fdea 	bl	8003fd6 <_exit>

0800b402 <__sfputc_r>:
 800b402:	6893      	ldr	r3, [r2, #8]
 800b404:	b410      	push	{r4}
 800b406:	3b01      	subs	r3, #1
 800b408:	2b00      	cmp	r3, #0
 800b40a:	6093      	str	r3, [r2, #8]
 800b40c:	da07      	bge.n	800b41e <__sfputc_r+0x1c>
 800b40e:	6994      	ldr	r4, [r2, #24]
 800b410:	42a3      	cmp	r3, r4
 800b412:	db01      	blt.n	800b418 <__sfputc_r+0x16>
 800b414:	290a      	cmp	r1, #10
 800b416:	d102      	bne.n	800b41e <__sfputc_r+0x1c>
 800b418:	bc10      	pop	{r4}
 800b41a:	f000 b931 	b.w	800b680 <__swbuf_r>
 800b41e:	6813      	ldr	r3, [r2, #0]
 800b420:	1c58      	adds	r0, r3, #1
 800b422:	6010      	str	r0, [r2, #0]
 800b424:	7019      	strb	r1, [r3, #0]
 800b426:	4608      	mov	r0, r1
 800b428:	bc10      	pop	{r4}
 800b42a:	4770      	bx	lr

0800b42c <__sfputs_r>:
 800b42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b42e:	4606      	mov	r6, r0
 800b430:	460f      	mov	r7, r1
 800b432:	4614      	mov	r4, r2
 800b434:	18d5      	adds	r5, r2, r3
 800b436:	42ac      	cmp	r4, r5
 800b438:	d101      	bne.n	800b43e <__sfputs_r+0x12>
 800b43a:	2000      	movs	r0, #0
 800b43c:	e007      	b.n	800b44e <__sfputs_r+0x22>
 800b43e:	463a      	mov	r2, r7
 800b440:	4630      	mov	r0, r6
 800b442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b446:	f7ff ffdc 	bl	800b402 <__sfputc_r>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	d1f3      	bne.n	800b436 <__sfputs_r+0xa>
 800b44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b450 <_vfiprintf_r>:
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	460d      	mov	r5, r1
 800b456:	4614      	mov	r4, r2
 800b458:	4698      	mov	r8, r3
 800b45a:	4606      	mov	r6, r0
 800b45c:	b09d      	sub	sp, #116	@ 0x74
 800b45e:	b118      	cbz	r0, 800b468 <_vfiprintf_r+0x18>
 800b460:	6a03      	ldr	r3, [r0, #32]
 800b462:	b90b      	cbnz	r3, 800b468 <_vfiprintf_r+0x18>
 800b464:	f7fe fb7a 	bl	8009b5c <__sinit>
 800b468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b46a:	07d9      	lsls	r1, r3, #31
 800b46c:	d405      	bmi.n	800b47a <_vfiprintf_r+0x2a>
 800b46e:	89ab      	ldrh	r3, [r5, #12]
 800b470:	059a      	lsls	r2, r3, #22
 800b472:	d402      	bmi.n	800b47a <_vfiprintf_r+0x2a>
 800b474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b476:	f7fe fc78 	bl	8009d6a <__retarget_lock_acquire_recursive>
 800b47a:	89ab      	ldrh	r3, [r5, #12]
 800b47c:	071b      	lsls	r3, r3, #28
 800b47e:	d501      	bpl.n	800b484 <_vfiprintf_r+0x34>
 800b480:	692b      	ldr	r3, [r5, #16]
 800b482:	b99b      	cbnz	r3, 800b4ac <_vfiprintf_r+0x5c>
 800b484:	4629      	mov	r1, r5
 800b486:	4630      	mov	r0, r6
 800b488:	f000 f938 	bl	800b6fc <__swsetup_r>
 800b48c:	b170      	cbz	r0, 800b4ac <_vfiprintf_r+0x5c>
 800b48e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b490:	07dc      	lsls	r4, r3, #31
 800b492:	d504      	bpl.n	800b49e <_vfiprintf_r+0x4e>
 800b494:	f04f 30ff 	mov.w	r0, #4294967295
 800b498:	b01d      	add	sp, #116	@ 0x74
 800b49a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b49e:	89ab      	ldrh	r3, [r5, #12]
 800b4a0:	0598      	lsls	r0, r3, #22
 800b4a2:	d4f7      	bmi.n	800b494 <_vfiprintf_r+0x44>
 800b4a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b4a6:	f7fe fc61 	bl	8009d6c <__retarget_lock_release_recursive>
 800b4aa:	e7f3      	b.n	800b494 <_vfiprintf_r+0x44>
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4b0:	2320      	movs	r3, #32
 800b4b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b4b6:	2330      	movs	r3, #48	@ 0x30
 800b4b8:	f04f 0901 	mov.w	r9, #1
 800b4bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b4c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800b66c <_vfiprintf_r+0x21c>
 800b4c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b4c8:	4623      	mov	r3, r4
 800b4ca:	469a      	mov	sl, r3
 800b4cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b4d0:	b10a      	cbz	r2, 800b4d6 <_vfiprintf_r+0x86>
 800b4d2:	2a25      	cmp	r2, #37	@ 0x25
 800b4d4:	d1f9      	bne.n	800b4ca <_vfiprintf_r+0x7a>
 800b4d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b4da:	d00b      	beq.n	800b4f4 <_vfiprintf_r+0xa4>
 800b4dc:	465b      	mov	r3, fp
 800b4de:	4622      	mov	r2, r4
 800b4e0:	4629      	mov	r1, r5
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7ff ffa2 	bl	800b42c <__sfputs_r>
 800b4e8:	3001      	adds	r0, #1
 800b4ea:	f000 80a7 	beq.w	800b63c <_vfiprintf_r+0x1ec>
 800b4ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4f0:	445a      	add	r2, fp
 800b4f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 809f 	beq.w	800b63c <_vfiprintf_r+0x1ec>
 800b4fe:	2300      	movs	r3, #0
 800b500:	f04f 32ff 	mov.w	r2, #4294967295
 800b504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b508:	f10a 0a01 	add.w	sl, sl, #1
 800b50c:	9304      	str	r3, [sp, #16]
 800b50e:	9307      	str	r3, [sp, #28]
 800b510:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b514:	931a      	str	r3, [sp, #104]	@ 0x68
 800b516:	4654      	mov	r4, sl
 800b518:	2205      	movs	r2, #5
 800b51a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b51e:	4853      	ldr	r0, [pc, #332]	@ (800b66c <_vfiprintf_r+0x21c>)
 800b520:	f7fe fc25 	bl	8009d6e <memchr>
 800b524:	9a04      	ldr	r2, [sp, #16]
 800b526:	b9d8      	cbnz	r0, 800b560 <_vfiprintf_r+0x110>
 800b528:	06d1      	lsls	r1, r2, #27
 800b52a:	bf44      	itt	mi
 800b52c:	2320      	movmi	r3, #32
 800b52e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b532:	0713      	lsls	r3, r2, #28
 800b534:	bf44      	itt	mi
 800b536:	232b      	movmi	r3, #43	@ 0x2b
 800b538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b53c:	f89a 3000 	ldrb.w	r3, [sl]
 800b540:	2b2a      	cmp	r3, #42	@ 0x2a
 800b542:	d015      	beq.n	800b570 <_vfiprintf_r+0x120>
 800b544:	4654      	mov	r4, sl
 800b546:	2000      	movs	r0, #0
 800b548:	f04f 0c0a 	mov.w	ip, #10
 800b54c:	9a07      	ldr	r2, [sp, #28]
 800b54e:	4621      	mov	r1, r4
 800b550:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b554:	3b30      	subs	r3, #48	@ 0x30
 800b556:	2b09      	cmp	r3, #9
 800b558:	d94b      	bls.n	800b5f2 <_vfiprintf_r+0x1a2>
 800b55a:	b1b0      	cbz	r0, 800b58a <_vfiprintf_r+0x13a>
 800b55c:	9207      	str	r2, [sp, #28]
 800b55e:	e014      	b.n	800b58a <_vfiprintf_r+0x13a>
 800b560:	eba0 0308 	sub.w	r3, r0, r8
 800b564:	fa09 f303 	lsl.w	r3, r9, r3
 800b568:	4313      	orrs	r3, r2
 800b56a:	46a2      	mov	sl, r4
 800b56c:	9304      	str	r3, [sp, #16]
 800b56e:	e7d2      	b.n	800b516 <_vfiprintf_r+0xc6>
 800b570:	9b03      	ldr	r3, [sp, #12]
 800b572:	1d19      	adds	r1, r3, #4
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	9103      	str	r1, [sp, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	bfbb      	ittet	lt
 800b57c:	425b      	neglt	r3, r3
 800b57e:	f042 0202 	orrlt.w	r2, r2, #2
 800b582:	9307      	strge	r3, [sp, #28]
 800b584:	9307      	strlt	r3, [sp, #28]
 800b586:	bfb8      	it	lt
 800b588:	9204      	strlt	r2, [sp, #16]
 800b58a:	7823      	ldrb	r3, [r4, #0]
 800b58c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b58e:	d10a      	bne.n	800b5a6 <_vfiprintf_r+0x156>
 800b590:	7863      	ldrb	r3, [r4, #1]
 800b592:	2b2a      	cmp	r3, #42	@ 0x2a
 800b594:	d132      	bne.n	800b5fc <_vfiprintf_r+0x1ac>
 800b596:	9b03      	ldr	r3, [sp, #12]
 800b598:	3402      	adds	r4, #2
 800b59a:	1d1a      	adds	r2, r3, #4
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	9203      	str	r2, [sp, #12]
 800b5a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800b670 <_vfiprintf_r+0x220>
 800b5aa:	2203      	movs	r2, #3
 800b5ac:	4650      	mov	r0, sl
 800b5ae:	7821      	ldrb	r1, [r4, #0]
 800b5b0:	f7fe fbdd 	bl	8009d6e <memchr>
 800b5b4:	b138      	cbz	r0, 800b5c6 <_vfiprintf_r+0x176>
 800b5b6:	2240      	movs	r2, #64	@ 0x40
 800b5b8:	9b04      	ldr	r3, [sp, #16]
 800b5ba:	eba0 000a 	sub.w	r0, r0, sl
 800b5be:	4082      	lsls	r2, r0
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	3401      	adds	r4, #1
 800b5c4:	9304      	str	r3, [sp, #16]
 800b5c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	4829      	ldr	r0, [pc, #164]	@ (800b674 <_vfiprintf_r+0x224>)
 800b5ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b5d2:	f7fe fbcc 	bl	8009d6e <memchr>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d03f      	beq.n	800b65a <_vfiprintf_r+0x20a>
 800b5da:	4b27      	ldr	r3, [pc, #156]	@ (800b678 <_vfiprintf_r+0x228>)
 800b5dc:	bb1b      	cbnz	r3, 800b626 <_vfiprintf_r+0x1d6>
 800b5de:	9b03      	ldr	r3, [sp, #12]
 800b5e0:	3307      	adds	r3, #7
 800b5e2:	f023 0307 	bic.w	r3, r3, #7
 800b5e6:	3308      	adds	r3, #8
 800b5e8:	9303      	str	r3, [sp, #12]
 800b5ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5ec:	443b      	add	r3, r7
 800b5ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5f0:	e76a      	b.n	800b4c8 <_vfiprintf_r+0x78>
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	2001      	movs	r0, #1
 800b5f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5fa:	e7a8      	b.n	800b54e <_vfiprintf_r+0xfe>
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	f04f 0c0a 	mov.w	ip, #10
 800b602:	4619      	mov	r1, r3
 800b604:	3401      	adds	r4, #1
 800b606:	9305      	str	r3, [sp, #20]
 800b608:	4620      	mov	r0, r4
 800b60a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b60e:	3a30      	subs	r2, #48	@ 0x30
 800b610:	2a09      	cmp	r2, #9
 800b612:	d903      	bls.n	800b61c <_vfiprintf_r+0x1cc>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d0c6      	beq.n	800b5a6 <_vfiprintf_r+0x156>
 800b618:	9105      	str	r1, [sp, #20]
 800b61a:	e7c4      	b.n	800b5a6 <_vfiprintf_r+0x156>
 800b61c:	4604      	mov	r4, r0
 800b61e:	2301      	movs	r3, #1
 800b620:	fb0c 2101 	mla	r1, ip, r1, r2
 800b624:	e7f0      	b.n	800b608 <_vfiprintf_r+0x1b8>
 800b626:	ab03      	add	r3, sp, #12
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	462a      	mov	r2, r5
 800b62c:	4630      	mov	r0, r6
 800b62e:	4b13      	ldr	r3, [pc, #76]	@ (800b67c <_vfiprintf_r+0x22c>)
 800b630:	a904      	add	r1, sp, #16
 800b632:	f7fd fe49 	bl	80092c8 <_printf_float>
 800b636:	4607      	mov	r7, r0
 800b638:	1c78      	adds	r0, r7, #1
 800b63a:	d1d6      	bne.n	800b5ea <_vfiprintf_r+0x19a>
 800b63c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b63e:	07d9      	lsls	r1, r3, #31
 800b640:	d405      	bmi.n	800b64e <_vfiprintf_r+0x1fe>
 800b642:	89ab      	ldrh	r3, [r5, #12]
 800b644:	059a      	lsls	r2, r3, #22
 800b646:	d402      	bmi.n	800b64e <_vfiprintf_r+0x1fe>
 800b648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b64a:	f7fe fb8f 	bl	8009d6c <__retarget_lock_release_recursive>
 800b64e:	89ab      	ldrh	r3, [r5, #12]
 800b650:	065b      	lsls	r3, r3, #25
 800b652:	f53f af1f 	bmi.w	800b494 <_vfiprintf_r+0x44>
 800b656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b658:	e71e      	b.n	800b498 <_vfiprintf_r+0x48>
 800b65a:	ab03      	add	r3, sp, #12
 800b65c:	9300      	str	r3, [sp, #0]
 800b65e:	462a      	mov	r2, r5
 800b660:	4630      	mov	r0, r6
 800b662:	4b06      	ldr	r3, [pc, #24]	@ (800b67c <_vfiprintf_r+0x22c>)
 800b664:	a904      	add	r1, sp, #16
 800b666:	f7fe f8cd 	bl	8009804 <_printf_i>
 800b66a:	e7e4      	b.n	800b636 <_vfiprintf_r+0x1e6>
 800b66c:	0800c07f 	.word	0x0800c07f
 800b670:	0800c085 	.word	0x0800c085
 800b674:	0800c089 	.word	0x0800c089
 800b678:	080092c9 	.word	0x080092c9
 800b67c:	0800b42d 	.word	0x0800b42d

0800b680 <__swbuf_r>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	460e      	mov	r6, r1
 800b684:	4614      	mov	r4, r2
 800b686:	4605      	mov	r5, r0
 800b688:	b118      	cbz	r0, 800b692 <__swbuf_r+0x12>
 800b68a:	6a03      	ldr	r3, [r0, #32]
 800b68c:	b90b      	cbnz	r3, 800b692 <__swbuf_r+0x12>
 800b68e:	f7fe fa65 	bl	8009b5c <__sinit>
 800b692:	69a3      	ldr	r3, [r4, #24]
 800b694:	60a3      	str	r3, [r4, #8]
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	071a      	lsls	r2, r3, #28
 800b69a:	d501      	bpl.n	800b6a0 <__swbuf_r+0x20>
 800b69c:	6923      	ldr	r3, [r4, #16]
 800b69e:	b943      	cbnz	r3, 800b6b2 <__swbuf_r+0x32>
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	f000 f82a 	bl	800b6fc <__swsetup_r>
 800b6a8:	b118      	cbz	r0, 800b6b2 <__swbuf_r+0x32>
 800b6aa:	f04f 37ff 	mov.w	r7, #4294967295
 800b6ae:	4638      	mov	r0, r7
 800b6b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b2:	6823      	ldr	r3, [r4, #0]
 800b6b4:	6922      	ldr	r2, [r4, #16]
 800b6b6:	b2f6      	uxtb	r6, r6
 800b6b8:	1a98      	subs	r0, r3, r2
 800b6ba:	6963      	ldr	r3, [r4, #20]
 800b6bc:	4637      	mov	r7, r6
 800b6be:	4283      	cmp	r3, r0
 800b6c0:	dc05      	bgt.n	800b6ce <__swbuf_r+0x4e>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff fdfb 	bl	800b2c0 <_fflush_r>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d1ed      	bne.n	800b6aa <__swbuf_r+0x2a>
 800b6ce:	68a3      	ldr	r3, [r4, #8]
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	60a3      	str	r3, [r4, #8]
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	6022      	str	r2, [r4, #0]
 800b6da:	701e      	strb	r6, [r3, #0]
 800b6dc:	6962      	ldr	r2, [r4, #20]
 800b6de:	1c43      	adds	r3, r0, #1
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d004      	beq.n	800b6ee <__swbuf_r+0x6e>
 800b6e4:	89a3      	ldrh	r3, [r4, #12]
 800b6e6:	07db      	lsls	r3, r3, #31
 800b6e8:	d5e1      	bpl.n	800b6ae <__swbuf_r+0x2e>
 800b6ea:	2e0a      	cmp	r6, #10
 800b6ec:	d1df      	bne.n	800b6ae <__swbuf_r+0x2e>
 800b6ee:	4621      	mov	r1, r4
 800b6f0:	4628      	mov	r0, r5
 800b6f2:	f7ff fde5 	bl	800b2c0 <_fflush_r>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d0d9      	beq.n	800b6ae <__swbuf_r+0x2e>
 800b6fa:	e7d6      	b.n	800b6aa <__swbuf_r+0x2a>

0800b6fc <__swsetup_r>:
 800b6fc:	b538      	push	{r3, r4, r5, lr}
 800b6fe:	4b29      	ldr	r3, [pc, #164]	@ (800b7a4 <__swsetup_r+0xa8>)
 800b700:	4605      	mov	r5, r0
 800b702:	6818      	ldr	r0, [r3, #0]
 800b704:	460c      	mov	r4, r1
 800b706:	b118      	cbz	r0, 800b710 <__swsetup_r+0x14>
 800b708:	6a03      	ldr	r3, [r0, #32]
 800b70a:	b90b      	cbnz	r3, 800b710 <__swsetup_r+0x14>
 800b70c:	f7fe fa26 	bl	8009b5c <__sinit>
 800b710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b714:	0719      	lsls	r1, r3, #28
 800b716:	d422      	bmi.n	800b75e <__swsetup_r+0x62>
 800b718:	06da      	lsls	r2, r3, #27
 800b71a:	d407      	bmi.n	800b72c <__swsetup_r+0x30>
 800b71c:	2209      	movs	r2, #9
 800b71e:	602a      	str	r2, [r5, #0]
 800b720:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b724:	f04f 30ff 	mov.w	r0, #4294967295
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	e033      	b.n	800b794 <__swsetup_r+0x98>
 800b72c:	0758      	lsls	r0, r3, #29
 800b72e:	d512      	bpl.n	800b756 <__swsetup_r+0x5a>
 800b730:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b732:	b141      	cbz	r1, 800b746 <__swsetup_r+0x4a>
 800b734:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b738:	4299      	cmp	r1, r3
 800b73a:	d002      	beq.n	800b742 <__swsetup_r+0x46>
 800b73c:	4628      	mov	r0, r5
 800b73e:	f7ff f977 	bl	800aa30 <_free_r>
 800b742:	2300      	movs	r3, #0
 800b744:	6363      	str	r3, [r4, #52]	@ 0x34
 800b746:	89a3      	ldrh	r3, [r4, #12]
 800b748:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b74c:	81a3      	strh	r3, [r4, #12]
 800b74e:	2300      	movs	r3, #0
 800b750:	6063      	str	r3, [r4, #4]
 800b752:	6923      	ldr	r3, [r4, #16]
 800b754:	6023      	str	r3, [r4, #0]
 800b756:	89a3      	ldrh	r3, [r4, #12]
 800b758:	f043 0308 	orr.w	r3, r3, #8
 800b75c:	81a3      	strh	r3, [r4, #12]
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	b94b      	cbnz	r3, 800b776 <__swsetup_r+0x7a>
 800b762:	89a3      	ldrh	r3, [r4, #12]
 800b764:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b768:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b76c:	d003      	beq.n	800b776 <__swsetup_r+0x7a>
 800b76e:	4621      	mov	r1, r4
 800b770:	4628      	mov	r0, r5
 800b772:	f000 f882 	bl	800b87a <__smakebuf_r>
 800b776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b77a:	f013 0201 	ands.w	r2, r3, #1
 800b77e:	d00a      	beq.n	800b796 <__swsetup_r+0x9a>
 800b780:	2200      	movs	r2, #0
 800b782:	60a2      	str	r2, [r4, #8]
 800b784:	6962      	ldr	r2, [r4, #20]
 800b786:	4252      	negs	r2, r2
 800b788:	61a2      	str	r2, [r4, #24]
 800b78a:	6922      	ldr	r2, [r4, #16]
 800b78c:	b942      	cbnz	r2, 800b7a0 <__swsetup_r+0xa4>
 800b78e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b792:	d1c5      	bne.n	800b720 <__swsetup_r+0x24>
 800b794:	bd38      	pop	{r3, r4, r5, pc}
 800b796:	0799      	lsls	r1, r3, #30
 800b798:	bf58      	it	pl
 800b79a:	6962      	ldrpl	r2, [r4, #20]
 800b79c:	60a2      	str	r2, [r4, #8]
 800b79e:	e7f4      	b.n	800b78a <__swsetup_r+0x8e>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	e7f7      	b.n	800b794 <__swsetup_r+0x98>
 800b7a4:	2000004c 	.word	0x2000004c

0800b7a8 <_raise_r>:
 800b7a8:	291f      	cmp	r1, #31
 800b7aa:	b538      	push	{r3, r4, r5, lr}
 800b7ac:	4605      	mov	r5, r0
 800b7ae:	460c      	mov	r4, r1
 800b7b0:	d904      	bls.n	800b7bc <_raise_r+0x14>
 800b7b2:	2316      	movs	r3, #22
 800b7b4:	6003      	str	r3, [r0, #0]
 800b7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ba:	bd38      	pop	{r3, r4, r5, pc}
 800b7bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b7be:	b112      	cbz	r2, 800b7c6 <_raise_r+0x1e>
 800b7c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b7c4:	b94b      	cbnz	r3, 800b7da <_raise_r+0x32>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	f000 f830 	bl	800b82c <_getpid_r>
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b7d6:	f000 b817 	b.w	800b808 <_kill_r>
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d00a      	beq.n	800b7f4 <_raise_r+0x4c>
 800b7de:	1c59      	adds	r1, r3, #1
 800b7e0:	d103      	bne.n	800b7ea <_raise_r+0x42>
 800b7e2:	2316      	movs	r3, #22
 800b7e4:	6003      	str	r3, [r0, #0]
 800b7e6:	2001      	movs	r0, #1
 800b7e8:	e7e7      	b.n	800b7ba <_raise_r+0x12>
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	4620      	mov	r0, r4
 800b7ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b7f2:	4798      	blx	r3
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	e7e0      	b.n	800b7ba <_raise_r+0x12>

0800b7f8 <raise>:
 800b7f8:	4b02      	ldr	r3, [pc, #8]	@ (800b804 <raise+0xc>)
 800b7fa:	4601      	mov	r1, r0
 800b7fc:	6818      	ldr	r0, [r3, #0]
 800b7fe:	f7ff bfd3 	b.w	800b7a8 <_raise_r>
 800b802:	bf00      	nop
 800b804:	2000004c 	.word	0x2000004c

0800b808 <_kill_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	2300      	movs	r3, #0
 800b80c:	4d06      	ldr	r5, [pc, #24]	@ (800b828 <_kill_r+0x20>)
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	4611      	mov	r1, r2
 800b814:	602b      	str	r3, [r5, #0]
 800b816:	f7f8 fbce 	bl	8003fb6 <_kill>
 800b81a:	1c43      	adds	r3, r0, #1
 800b81c:	d102      	bne.n	800b824 <_kill_r+0x1c>
 800b81e:	682b      	ldr	r3, [r5, #0]
 800b820:	b103      	cbz	r3, 800b824 <_kill_r+0x1c>
 800b822:	6023      	str	r3, [r4, #0]
 800b824:	bd38      	pop	{r3, r4, r5, pc}
 800b826:	bf00      	nop
 800b828:	20000754 	.word	0x20000754

0800b82c <_getpid_r>:
 800b82c:	f7f8 bbbc 	b.w	8003fa8 <_getpid>

0800b830 <__swhatbuf_r>:
 800b830:	b570      	push	{r4, r5, r6, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	4615      	mov	r5, r2
 800b83a:	2900      	cmp	r1, #0
 800b83c:	461e      	mov	r6, r3
 800b83e:	b096      	sub	sp, #88	@ 0x58
 800b840:	da0c      	bge.n	800b85c <__swhatbuf_r+0x2c>
 800b842:	89a3      	ldrh	r3, [r4, #12]
 800b844:	2100      	movs	r1, #0
 800b846:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b84a:	bf14      	ite	ne
 800b84c:	2340      	movne	r3, #64	@ 0x40
 800b84e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b852:	2000      	movs	r0, #0
 800b854:	6031      	str	r1, [r6, #0]
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	b016      	add	sp, #88	@ 0x58
 800b85a:	bd70      	pop	{r4, r5, r6, pc}
 800b85c:	466a      	mov	r2, sp
 800b85e:	f000 f849 	bl	800b8f4 <_fstat_r>
 800b862:	2800      	cmp	r0, #0
 800b864:	dbed      	blt.n	800b842 <__swhatbuf_r+0x12>
 800b866:	9901      	ldr	r1, [sp, #4]
 800b868:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b86c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b870:	4259      	negs	r1, r3
 800b872:	4159      	adcs	r1, r3
 800b874:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b878:	e7eb      	b.n	800b852 <__swhatbuf_r+0x22>

0800b87a <__smakebuf_r>:
 800b87a:	898b      	ldrh	r3, [r1, #12]
 800b87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b87e:	079d      	lsls	r5, r3, #30
 800b880:	4606      	mov	r6, r0
 800b882:	460c      	mov	r4, r1
 800b884:	d507      	bpl.n	800b896 <__smakebuf_r+0x1c>
 800b886:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	6123      	str	r3, [r4, #16]
 800b88e:	2301      	movs	r3, #1
 800b890:	6163      	str	r3, [r4, #20]
 800b892:	b003      	add	sp, #12
 800b894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b896:	466a      	mov	r2, sp
 800b898:	ab01      	add	r3, sp, #4
 800b89a:	f7ff ffc9 	bl	800b830 <__swhatbuf_r>
 800b89e:	9f00      	ldr	r7, [sp, #0]
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	4639      	mov	r1, r7
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	f7fd fbe5 	bl	8009074 <_malloc_r>
 800b8aa:	b948      	cbnz	r0, 800b8c0 <__smakebuf_r+0x46>
 800b8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b0:	059a      	lsls	r2, r3, #22
 800b8b2:	d4ee      	bmi.n	800b892 <__smakebuf_r+0x18>
 800b8b4:	f023 0303 	bic.w	r3, r3, #3
 800b8b8:	f043 0302 	orr.w	r3, r3, #2
 800b8bc:	81a3      	strh	r3, [r4, #12]
 800b8be:	e7e2      	b.n	800b886 <__smakebuf_r+0xc>
 800b8c0:	89a3      	ldrh	r3, [r4, #12]
 800b8c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	9b01      	ldr	r3, [sp, #4]
 800b8ce:	6020      	str	r0, [r4, #0]
 800b8d0:	b15b      	cbz	r3, 800b8ea <__smakebuf_r+0x70>
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8d8:	f000 f81e 	bl	800b918 <_isatty_r>
 800b8dc:	b128      	cbz	r0, 800b8ea <__smakebuf_r+0x70>
 800b8de:	89a3      	ldrh	r3, [r4, #12]
 800b8e0:	f023 0303 	bic.w	r3, r3, #3
 800b8e4:	f043 0301 	orr.w	r3, r3, #1
 800b8e8:	81a3      	strh	r3, [r4, #12]
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	431d      	orrs	r5, r3
 800b8ee:	81a5      	strh	r5, [r4, #12]
 800b8f0:	e7cf      	b.n	800b892 <__smakebuf_r+0x18>
	...

0800b8f4 <_fstat_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	4d06      	ldr	r5, [pc, #24]	@ (800b914 <_fstat_r+0x20>)
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	4611      	mov	r1, r2
 800b900:	602b      	str	r3, [r5, #0]
 800b902:	f7f8 fbb7 	bl	8004074 <_fstat>
 800b906:	1c43      	adds	r3, r0, #1
 800b908:	d102      	bne.n	800b910 <_fstat_r+0x1c>
 800b90a:	682b      	ldr	r3, [r5, #0]
 800b90c:	b103      	cbz	r3, 800b910 <_fstat_r+0x1c>
 800b90e:	6023      	str	r3, [r4, #0]
 800b910:	bd38      	pop	{r3, r4, r5, pc}
 800b912:	bf00      	nop
 800b914:	20000754 	.word	0x20000754

0800b918 <_isatty_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	2300      	movs	r3, #0
 800b91c:	4d05      	ldr	r5, [pc, #20]	@ (800b934 <_isatty_r+0x1c>)
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f8 fbb5 	bl	8004092 <_isatty>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_isatty_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_isatty_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20000754 	.word	0x20000754

0800b938 <_init>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	bf00      	nop
 800b93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b93e:	bc08      	pop	{r3}
 800b940:	469e      	mov	lr, r3
 800b942:	4770      	bx	lr

0800b944 <_fini>:
 800b944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b946:	bf00      	nop
 800b948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b94a:	bc08      	pop	{r3}
 800b94c:	469e      	mov	lr, r3
 800b94e:	4770      	bx	lr
