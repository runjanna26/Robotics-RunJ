
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f78  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009150  08009150  0000a150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091d0  080091d0  0000b090  2**0
                  CONTENTS
  4 .ARM          00000000  080091d0  080091d0  0000b090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080091d0  080091d0  0000b090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080091d0  080091d0  0000a1d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080091dc  080091dc  0000a1dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080091e4  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000090  08009274  0000b090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006e4  08009274  0000b6e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c04e  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005265  00000000  00000000  0003710e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b20  00000000  00000000  0003c378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cb  00000000  00000000  0003de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027d52  00000000  00000000  0003f363  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002407d  00000000  00000000  000670b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee9a6  00000000  00000000  0008b132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00179ad8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c20  00000000  00000000  00179b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0018173c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000090 	.word	0x20000090
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009138 	.word	0x08009138

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000094 	.word	0x20000094
 8000214:	08009138 	.word	0x08009138

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <_ZN17AS5048A_interfaceC1Ev+0x88>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <_ZN17AS5048A_interfaceC1Ev+0x8c>)
 8000c02:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <_ZN17AS5048A_interfaceC1Ev+0x90>)
 8000c08:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	220e      	movs	r2, #14
 8000c0e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	334c      	adds	r3, #76	@ 0x4c
 8000c14:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000c44 <_ZN17AS5048A_interfaceC1Ev+0x94>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fb63 	bl	80012e4 <_ZN13LowPassFilterC1Ef>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3358      	adds	r3, #88	@ 0x58
 8000c22:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000c48 <_ZN17AS5048A_interfaceC1Ev+0x98>
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fb5c 	bl	80012e4 <_ZN13LowPassFilterC1Ef>
	// TODO Auto-generated constructor stub

}
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	08009158 	.word	0x08009158
 8000c3c:	c640e400 	.word	0xc640e400
 8000c40:	ffffcfc7 	.word	0xffffcfc7
 8000c44:	3c23d70a 	.word	0x3c23d70a
 8000c48:	3e4ccccd 	.word	0x3e4ccccd

08000c4c <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <_ZN17AS5048A_interfaceD1Ev+0x1c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	08009158 	.word	0x08009158

08000c6c <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
}
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe9 	bl	8000c4c <_ZN17AS5048A_interfaceD1Ev>
 8000c7a:	2164      	movs	r1, #100	@ 0x64
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f007 fa65 	bl	800814c <_ZdlPvj>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000c96:	f107 040c 	add.w	r4, r7, #12
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	e001      	b.n	8000cb2 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cae:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 fa09 	bl	80010d2 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000cc0:	ec53 2b10 	vmov	r2, r3, d0
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff ff12 	bl	8000af0 <__aeabi_d2f>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2110      	movs	r1, #16
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f004 fa9f 	bl	8005234 <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000

08000d04 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f8d9 	bl	8000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f8d6 	bl	8000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d18:	eef0 7a40 	vmov.f32	s15, s0
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d22:	f000 f94d 	bl	8000fc0 <_ZN17AS5048A_interface6microsEv>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f001 fd1c 	bl	800276c <HAL_Delay>
	getSensorAngle();
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f8c5 	bl	8000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f8c2 	bl	8000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d4a:	f000 f939 	bl	8000fc0 <_ZN17AS5048A_interface6microsEv>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	621a      	str	r2, [r3, #32]
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e00d      	b.n	8000d90 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	73bb      	strb	r3, [r7, #14]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d9ee      	bls.n	8000d74 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0) {
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dd0b      	ble.n	8000ddc <_ZN17AS5048A_interface4readEt+0x30>
		command = angle_register | (1 << command_rw_bit);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0) {
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd11      	ble.n	8000e08 <_ZN17AS5048A_interface4readEt+0x5c>
		//Add a parity bit on the the MSB
		command |=
				((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffb8 	bl	8000d5e <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
		command |=
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	897b      	ldrh	r3, [r7, #10]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e10:	f004 fa10 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 010a 	add.w	r1, r7, #10
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	481f      	ldr	r0, [pc, #124]	@ (8000ea0 <_ZN17AS5048A_interface4readEt+0xf4>)
 8000e24:	f005 faaf 	bl	8006386 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f004 fa00 	bl	8005234 <HAL_GPIO_WritePin>

	command = 0x0000;
 8000e34:	2300      	movs	r3, #0
 8000e36:	817b      	strh	r3, [r7, #10]
	//Now read the response (NO_OPERATION_COMMAND = 0x0000)
	//  uint16_t register_value = spi->transfer16(0x00);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e40:	f004 f9f8 	bl	8005234 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command,
 8000e44:	f107 020c 	add.w	r2, r7, #12
 8000e48:	f107 010a 	add.w	r1, r7, #10
 8000e4c:	2364      	movs	r3, #100	@ 0x64
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2301      	movs	r3, #1
 8000e52:	4813      	ldr	r0, [pc, #76]	@ (8000ea0 <_ZN17AS5048A_interface4readEt+0xf4>)
 8000e54:	f005 fa97 	bl	8006386 <HAL_SPI_TransmitReceive>
			(uint8_t*) &register_value,
			sizeof(register_value) / sizeof(uint16_t), 100);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e58:	2201      	movs	r2, #1
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e60:	f004 f9e8 	bl	8005234 <HAL_GPIO_WritePin>

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e64:	89bb      	ldrh	r3, [r7, #12]
 8000e66:	4619      	mov	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	1c5a      	adds	r2, r3, #1
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	fa41 f303 	asr.w	r3, r1, r3
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f1c3 0310 	rsb	r3, r3, #16
 8000e84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e88:	fa42 f303 	asr.w	r3, r2, r3
 8000e8c:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000e8e:	89ba      	ldrh	r2, [r7, #12]
 8000e90:	89fb      	ldrh	r3, [r7, #14]
 8000e92:	4013      	ands	r3, r2
 8000e94:	b29b      	uxth	r3, r3
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3710      	adds	r7, #16
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	200004d8 	.word	0x200004d8

08000ea4 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff79 	bl	8000dac <_ZN17AS5048A_interface4readEt>
 8000eba:	4603      	mov	r3, r0
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000ecc:	6878      	ldr	r0, [r7, #4]
 8000ece:	f7ff ffe9 	bl	8000ea4 <_ZN17AS5048A_interface11getRawCountEv>
 8000ed2:	ee07 0a90 	vmov	s15, r0
 8000ed6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000ee0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000ef8 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000eec:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40c90fdb 	.word	0x40c90fdb
 8000efc:	00000000 	.word	0x00000000

08000f00 <_ZN17AS5048A_interface17getSensorVelocityEv>:
 * @brief Get angular velocity from angular position
 * 
 * @return angular velocity [radians/second]
*/
float AS5048A_interface::getSensorVelocity() 
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = (angle_prev_ts - vel_angle_prev_ts) * 1e-6;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a1a      	ldr	r2, [r3, #32]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fad2 	bl	80004bc <__aeabi_i2d>
 8000f18:	a327      	add	r3, pc, #156	@ (adr r3, 8000fb8 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb8>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb37 	bl	8000590 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4610      	mov	r0, r2
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f7ff fde1 	bl	8000af0 <__aeabi_d2f>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	60fb      	str	r3, [r7, #12]
	// quick fix for strange cases (micros overflow)
	if (Ts <= 0)
 8000f32:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f3e:	d801      	bhi.n	8000f44 <_ZN17AS5048A_interface17getSensorVelocityEv+0x44>
		Ts = 1e-3f;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb0 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb0>)
 8000f42:	60fb      	str	r3, [r7, #12]
	// velocity calculation
	vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	ee07 3a90 	vmov	s15, r3
 8000f52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f56:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000fb4 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb4>
 8000f5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	edd3 6a07 	vldr	s13, [r3, #28]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000f6a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000f6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000f72:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	// save variables for future pass
	vel_angle_prev = angle_prev;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	69da      	ldr	r2, [r3, #28]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	639a      	str	r2, [r3, #56]	@ 0x38
	vel_angle_prev_ts = angle_prev_ts;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a1a      	ldr	r2, [r3, #32]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	629a      	str	r2, [r3, #40]	@ 0x28
	return vel_prev;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f9c:	ee07 3a90 	vmov	s15, r3
}
 8000fa0:	eeb0 0a67 	vmov.f32	s0, s15
 8000fa4:	3710      	adds	r7, #16
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	f3af 8000 	nop.w
 8000fb0:	3a83126f 	.word	0x3a83126f
 8000fb4:	40c90fdb 	.word	0x40c90fdb
 8000fb8:	a0b5ed8d 	.word	0xa0b5ed8d
 8000fbc:	3eb0c6f7 	.word	0x3eb0c6f7

08000fc0 <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000fc4:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <_ZN17AS5048A_interface6microsEv+0x24>)
 8000fc6:	685a      	ldr	r2, [r3, #4]
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <_ZN17AS5048A_interface6microsEv+0x28>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4907      	ldr	r1, [pc, #28]	@ (8000fec <_ZN17AS5048A_interface6microsEv+0x2c>)
 8000fce:	fba1 1303 	umull	r1, r3, r1, r3
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e0001000 	.word	0xe0001000
 8000fe8:	20000020 	.word	0x20000020
 8000fec:	431bde83 	.word	0x431bde83

08000ff0 <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff63 	bl	8000ec4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000ffe:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 8001002:	f7ff ffdd 	bl	8000fc0 <_ZN17AS5048A_interface6microsEv>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	edd3 7a07 	vldr	s15, [r3, #28]
 8001014:	ed97 7a03 	vldr	s14, [r7, #12]
 8001018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800101c:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 8001020:	ed97 0a02 	vldr	s0, [r7, #8]
 8001024:	f7ff fdb4 	bl	8000b90 <_ZSt3absf>
 8001028:	eef0 7a40 	vmov.f32	s15, s0
 800102c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001078 <_ZN17AS5048A_interface12updateSensorEv+0x88>
 8001030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	bfcc      	ite	gt
 800103a:	2301      	movgt	r3, #1
 800103c:	2300      	movle	r3, #0
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00f      	beq.n	8001064 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001048:	edd7 7a02 	vldr	s15, [r7, #8]
 800104c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	dd02      	ble.n	800105c <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 8001056:	f04f 32ff 	mov.w	r2, #4294967295
 800105a:	e000      	b.n	800105e <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 800105c:	2201      	movs	r2, #1
 800105e:	441a      	add	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	635a      	str	r2, [r3, #52]	@ 0x34
	angle_prev = angle_current;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	61da      	str	r2, [r3, #28]

	getShaftVelocity();
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 f806 	bl	800107c <_ZN17AS5048A_interface16getShaftVelocityEv>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40a0d97c 	.word	0x40a0d97c

0800107c <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	ed2d 8b02 	vpush	{d8}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
	vel_prev_LPF = sensor_direction * LPF_velocity(getSensorVelocity());
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ff30 	bl	8000f00 <_ZN17AS5048A_interface17getSensorVelocityEv>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	eeb0 0a67 	vmov.f32	s0, s15
 80010a8:	4620      	mov	r0, r4
 80010aa:	f000 f933 	bl	8001314 <_ZN13LowPassFilterclEf>
 80010ae:	eef0 7a40 	vmov.f32	s15, s0
 80010b2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	return vel_prev_LPF;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c0:	ee07 3a90 	vmov	s15, r3
}
 80010c4:	eeb0 0a67 	vmov.f32	s0, s15
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	ecbd 8b02 	vpop	{d8}
 80010d0:	bd90      	pop	{r4, r7, pc}

080010d2 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80010d2:	b5b0      	push	{r4, r5, r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
 80010da:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff f9ed 	bl	80004bc <__aeabi_i2d>
 80010e2:	4604      	mov	r4, r0
 80010e4:	460d      	mov	r5, r1
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	f7ff f9e8 	bl	80004bc <__aeabi_i2d>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	ec43 2b11 	vmov	d1, r2, r3
 80010f4:	ec45 4b10 	vmov	d0, r4, r5
 80010f8:	f007 f82c 	bl	8008154 <pow>
 80010fc:	eeb0 7a40 	vmov.f32	s14, s0
 8001100:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001104:	eeb0 0a47 	vmov.f32	s0, s14
 8001108:	eef0 0a67 	vmov.f32	s1, s15
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001114 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	4a07      	ldr	r2, [pc, #28]	@ (800113c <_ZN12CurrentSenseC1Ev+0x28>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2203      	movs	r2, #3
 8001126:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2200      	movs	r2, #0
 800112c:	641a      	str	r2, [r3, #64]	@ 0x40
{
	
}
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	08009168 	.word	0x08009168

08001140 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 8001140:	b480      	push	{r7}
 8001142:	b083      	sub	sp, #12
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	4a04      	ldr	r2, [pc, #16]	@ (800115c <_ZN12CurrentSenseD1Ev+0x1c>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	08009168 	.word	0x08009168

08001160 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
}
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff ffe9 	bl	8001140 <_ZN12CurrentSenseD1Ev>
 800116e:	2148      	movs	r1, #72	@ 0x48
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f006 ffeb 	bl	800814c <_ZdlPvj>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	3708      	adds	r7, #8
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	ed87 0a02 	vstr	s0, [r7, #8]
 800118c:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA, 3);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3330      	adds	r3, #48	@ 0x30
 8001194:	2203      	movs	r2, #3
 8001196:	4619      	mov	r1, r3
 8001198:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <_ZN12CurrentSense16initCurrentsenseEff+0x40>)
 800119a:	f001 fed5 	bl	8002f48 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_a = _gain;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	621a      	str	r2, [r3, #32]
	gain_b = _gain;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	625a      	str	r2, [r3, #36]	@ 0x24
	gain_c = _gain;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000258 	.word	0x20000258

080011c4 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 80011cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011d0:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 0200 	mov.w	r2, #0
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = 0;
 80011e0:	6879      	ldr	r1, [r7, #4]
 80011e2:	f04f 0200 	mov.w	r2, #0
 80011e6:	f04f 0300 	mov.w	r3, #0
 80011ea:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = 0;
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	e03e      	b.n	8001280 <_ZN12CurrentSense16calibrateOffsetsEv+0xbc>
	{
		offset_ia += adcResultDMA[0];
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f945 	bl	800049c <__aeabi_ui2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7ff f803 	bl	8000224 <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	e9c1 2302 	strd	r2, r3, [r1, #8]
		offset_ib += adcResultDMA[1];
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f932 	bl	800049c <__aeabi_ui2d>
 8001238:	4602      	mov	r2, r0
 800123a:	460b      	mov	r3, r1
 800123c:	4620      	mov	r0, r4
 800123e:	4629      	mov	r1, r5
 8001240:	f7fe fff0 	bl	8000224 <__adddf3>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	e9c1 2304 	strd	r2, r3, [r1, #16]
		offset_ic += adcResultDMA[2];
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff f91f 	bl	800049c <__aeabi_ui2d>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7fe ffdd 	bl	8000224 <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	6879      	ldr	r1, [r7, #4]
 8001270:	e9c1 2306 	strd	r2, r3, [r1, #24]
		HAL_Delay(1);
 8001274:	2001      	movs	r0, #1
 8001276:	f001 fa79 	bl	800276c <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3301      	adds	r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001286:	dbbc      	blt.n	8001202 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 8001294:	f7ff faa6 	bl	80007e4 <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = offset_ib / calibration_rounds;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 80012ae:	f7ff fa99 	bl	80007e4 <__aeabi_ddiv>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = offset_ic / calibration_rounds;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <_ZN12CurrentSense16calibrateOffsetsEv+0x11c>)
 80012c8:	f7ff fa8c 	bl	80007e4 <__aeabi_ddiv>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	6879      	ldr	r1, [r7, #4]
 80012d2:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bdb0      	pop	{r4, r5, r7, pc}
 80012de:	bf00      	nop
 80012e0:	408f4000 	.word	0x408f4000

080012e4 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 80012fe:	f000 f873 	bl	80013e8 <_ZN13LowPassFilter6microsEv>
 8001302:	4602      	mov	r2, r0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	605a      	str	r2, [r3, #4]
}
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8001320:	f000 f862 	bl	80013e8 <_ZN13LowPassFilter6microsEv>
 8001324:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001336:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80013dc <_ZN13LowPassFilterclEf+0xc8>
 800133a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800133e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8001342:	edd7 7a05 	vldr	s15, [r7, #20]
 8001346:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	d502      	bpl.n	8001356 <_ZN13LowPassFilterclEf+0x42>
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <_ZN13LowPassFilterclEf+0xcc>)
 8001352:	617b      	str	r3, [r7, #20]
 8001354:	e010      	b.n	8001378 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 8001356:	edd7 7a05 	vldr	s15, [r7, #20]
 800135a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80013e4 <_ZN13LowPassFilterclEf+0xd0>
 800135e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	dd07      	ble.n	8001378 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	605a      	str	r2, [r3, #4]
        return x;
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	e029      	b.n	80013cc <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	edd3 6a00 	vldr	s13, [r3]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	edd7 7a05 	vldr	s15, [r7, #20]
 8001388:	ee37 7a27 	vadd.f32	s14, s14, s15
 800138c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001390:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	ed93 7a02 	vldr	s14, [r3, #8]
 800139a:	edd7 7a03 	vldr	s15, [r7, #12]
 800139e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80013a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80013aa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013ae:	edd7 7a00 	vldr	s15, [r7]
 80013b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013ba:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	68ba      	ldr	r2, [r7, #8]
 80013c2:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	605a      	str	r2, [r3, #4]
    return y;
 80013ca:	68bb      	ldr	r3, [r7, #8]
}
 80013cc:	ee07 3a90 	vmov	s15, r3
 80013d0:	eeb0 0a67 	vmov.f32	s0, s15
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	358637bd 	.word	0x358637bd
 80013e0:	3a83126f 	.word	0x3a83126f
 80013e4:	3e99999a 	.word	0x3e99999a

080013e8 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <_ZN13LowPassFilter6microsEv+0x24>)
 80013ee:	685a      	ldr	r2, [r3, #4]
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_ZN13LowPassFilter6microsEv+0x28>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4907      	ldr	r1, [pc, #28]	@ (8001414 <_ZN13LowPassFilter6microsEv+0x2c>)
 80013f6:	fba1 1303 	umull	r1, r3, r1, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e0001000 	.word	0xe0001000
 8001410:	20000020 	.word	0x20000020
 8001414:	431bde83 	.word	0x431bde83

08001418 <_Z41__static_initialization_and_destruction_0ii>:
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
	PIDController PID_velocity  {0.5, 55.0, 0.0, 1000.0, current_limit};
	PIDController PID_position  {20.0, 0.0, 1.0, 0, velocity_limit};

	LowPassFilter LPF_current_q	{0.001};
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d14e      	bne.n	80014c6 <_Z41__static_initialization_and_destruction_0ii+0xae>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800142e:	4293      	cmp	r3, r2
 8001430:	d149      	bne.n	80014c6 <_Z41__static_initialization_and_destruction_0ii+0xae>
	PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8001432:	4b27      	ldr	r3, [pc, #156]	@ (80014d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001434:	edd3 7a00 	vldr	s15, [r3]
 8001438:	eeb0 2a67 	vmov.f32	s4, s15
 800143c:	eddf 1a25 	vldr	s3, [pc, #148]	@ 80014d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8001440:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001444:	eddf 0a24 	vldr	s1, [pc, #144]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001448:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800144c:	4823      	ldr	r0, [pc, #140]	@ (80014dc <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800144e:	f000 f861 	bl	8001514 <_ZN13PIDControllerC1Efffff>
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8001452:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eeb0 2a67 	vmov.f32	s4, s15
 800145c:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 80014d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8001460:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001464:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001468:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800146c:	481c      	ldr	r0, [pc, #112]	@ (80014e0 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 800146e:	f000 f851 	bl	8001514 <_ZN13PIDControllerC1Efffff>
	PIDController PID_velocity  {0.5, 55.0, 0.0, 1000.0, current_limit};
 8001472:	4b1c      	ldr	r3, [pc, #112]	@ (80014e4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb0 2a67 	vmov.f32	s4, s15
 800147c:	eddf 1a15 	vldr	s3, [pc, #84]	@ 80014d4 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8001480:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001484:	eddf 0a18 	vldr	s1, [pc, #96]	@ 80014e8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8001488:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800148c:	4817      	ldr	r0, [pc, #92]	@ (80014ec <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 800148e:	f000 f841 	bl	8001514 <_ZN13PIDControllerC1Efffff>
	PIDController PID_position  {20.0, 0.0, 1.0, 0, velocity_limit};
 8001492:	4b17      	ldr	r3, [pc, #92]	@ (80014f0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	eeb0 2a67 	vmov.f32	s4, s15
 800149c:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80014a0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 80014a4:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 80014d8 <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80014a8:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 80014ae:	f000 f831 	bl	8001514 <_ZN13PIDControllerC1Efffff>
	LowPassFilter LPF_current_q	{0.001};
 80014b2:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 80014f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80014b6:	4811      	ldr	r0, [pc, #68]	@ (80014fc <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80014b8:	f7ff ff14 	bl	80012e4 <_ZN13LowPassFilterC1Ef>
 80014bc:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 80014f8 <_Z41__static_initialization_and_destruction_0ii+0xe0>
 80014c0:	480f      	ldr	r0, [pc, #60]	@ (8001500 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80014c2:	f7ff ff0f 	bl	80012e4 <_ZN13LowPassFilterC1Ef>
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000014 	.word	0x20000014
 80014d4:	447a0000 	.word	0x447a0000
 80014d8:	00000000 	.word	0x00000000
 80014dc:	200000ac 	.word	0x200000ac
 80014e0:	200000d0 	.word	0x200000d0
 80014e4:	20000018 	.word	0x20000018
 80014e8:	425c0000 	.word	0x425c0000
 80014ec:	200000f4 	.word	0x200000f4
 80014f0:	2000001c 	.word	0x2000001c
 80014f4:	20000118 	.word	0x20000118
 80014f8:	3a83126f 	.word	0x3a83126f
 80014fc:	2000013c 	.word	0x2000013c
 8001500:	20000148 	.word	0x20000148

08001504 <_GLOBAL__sub_I_phase_resistance>:
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
 8001508:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800150c:	2001      	movs	r0, #1
 800150e:	f7ff ff83 	bl	8001418 <_Z41__static_initialization_and_destruction_0ii>
 8001512:	bd80      	pop	{r7, pc}

08001514 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6178      	str	r0, [r7, #20]
 800151c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001520:	edc7 0a03 	vstr	s1, [r7, #12]
 8001524:	ed87 1a02 	vstr	s2, [r7, #8]
 8001528:	edc7 1a01 	vstr	s3, [r7, #4]
 800152c:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	601a      	str	r2, [r3, #0]
    , I(I)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	605a      	str	r2, [r3, #4]
    , D(D)
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	68ba      	ldr	r2, [r7, #8]
 8001540:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8001566:	f000 f809 	bl	800157c <_ZN13PIDController6microsEv>
 800156a:	4602      	mov	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	621a      	str	r2, [r3, #32]
}
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001580:	4b07      	ldr	r3, [pc, #28]	@ (80015a0 <_ZN13PIDController6microsEv+0x24>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	4b07      	ldr	r3, [pc, #28]	@ (80015a4 <_ZN13PIDController6microsEv+0x28>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4907      	ldr	r1, [pc, #28]	@ (80015a8 <_ZN13PIDController6microsEv+0x2c>)
 800158a:	fba1 1303 	umull	r1, r3, r1, r3
 800158e:	0c9b      	lsrs	r3, r3, #18
 8001590:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e0001000 	.word	0xe0001000
 80015a4:	20000020 	.word	0x20000020
 80015a8:	431bde83 	.word	0x431bde83

080015ac <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <_ZN11pwm_driversC1Ev+0x1c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4618      	mov	r0, r3
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	08009178 	.word	0x08009178

080015cc <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	4a04      	ldr	r2, [pc, #16]	@ (80015e8 <_ZN11pwm_driversD1Ev+0x1c>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4618      	mov	r0, r3
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	08009178 	.word	0x08009178

080015ec <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
}
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	f7ff ffe9 	bl	80015cc <_ZN11pwm_driversD1Ev>
 80015fa:	2110      	movs	r1, #16
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f006 fda5 	bl	800814c <_ZdlPvj>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <_ZN9simpleFOCC1Ev+0x48>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3304      	adds	r3, #4
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fac6 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	3368      	adds	r3, #104	@ 0x68
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fd73 	bl	8001114 <_ZN12CurrentSenseC1Ev>
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	33b0      	adds	r3, #176	@ 0xb0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffba 	bl	80015ac <_ZN11pwm_driversC1Ev>
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <_ZN9simpleFOCC1Ev+0x4c>)
 800163c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <_ZN9simpleFOCC1Ev+0x4c>)
 8001644:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
{

}
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	08009188 	.word	0x08009188
 8001658:	40400000 	.word	0x40400000

0800165c <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	4a0b      	ldr	r2, [pc, #44]	@ (8001694 <_ZN9simpleFOCD1Ev+0x38>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	33b0      	adds	r3, #176	@ 0xb0
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ffac 	bl	80015cc <_ZN11pwm_driversD1Ev>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3368      	adds	r3, #104	@ 0x68
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd61 	bl	8001140 <_ZN12CurrentSenseD1Ev>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	3304      	adds	r3, #4
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fae2 	bl	8000c4c <_ZN17AS5048A_interfaceD1Ev>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	08009188 	.word	0x08009188

08001698 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
}
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	f7ff ffdb 	bl	800165c <_ZN9simpleFOCD1Ev>
 80016a6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 fd4e 	bl	800814c <_ZdlPvj>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4618      	mov	r0, r3
 80016b4:	3708      	adds	r7, #8
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
	Encoder.MagneticSensorSPI_init();
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	3304      	adds	r3, #4
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fadf 	bl	8000c8c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3304      	adds	r3, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fb16 	bl	8000d04 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3368      	adds	r3, #104	@ 0x68
 80016dc:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80016e0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 80016fc <_ZN9simpleFOC11initSensorsEv+0x40>
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fd4b 	bl	8001180 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3368      	adds	r3, #104	@ 0x68
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7ff fd68 	bl	80011c4 <_ZN12CurrentSense16calibrateOffsetsEv>
	// Encoder.zero_electric_angle = 100.0;
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	3dcccccd 	.word	0x3dcccccd

08001700 <_ZN9simpleFOC15readEncoderOnlyEv>:
uint32_t simpleFOC::micros(void) 
{
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

void simpleFOC::readEncoderOnly(){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3304      	adds	r3, #4
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fc6f 	bl	8000ff0 <_ZN17AS5048A_interface12updateSensorEv>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	0000      	movs	r0, r0
 800171c:	0000      	movs	r0, r0
	...

08001720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001724:	f000 ffb1 	bl	800268a <HAL_Init>

  /* USER CODE BEGIN Init */

  //Delay SETUP
  	DWT_Init();
 8001728:	f000 fc2c 	bl	8001f84 <_ZL8DWT_Initv>
  	//Timer Interrupt tim2,tim4
//  	HAL_TIM_Base_Start_IT(&htim4);

  	//SPI SETUP
  	simpleFOC.initSensors();
 800172c:	4832      	ldr	r0, [pc, #200]	@ (80017f8 <main+0xd8>)
 800172e:	f7ff ffc5 	bl	80016bc <_ZN9simpleFOC11initSensorsEv>

  	//PWM SETUP
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8001732:	2100      	movs	r1, #0
 8001734:	4831      	ldr	r0, [pc, #196]	@ (80017fc <main+0xdc>)
 8001736:	f005 fa65 	bl	8006c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 800173a:	2104      	movs	r1, #4
 800173c:	482f      	ldr	r0, [pc, #188]	@ (80017fc <main+0xdc>)
 800173e:	f005 fa61 	bl	8006c04 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8001742:	2108      	movs	r1, #8
 8001744:	482d      	ldr	r0, [pc, #180]	@ (80017fc <main+0xdc>)
 8001746:	f005 fa5d 	bl	8006c04 <HAL_TIM_PWM_Start>

  	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 800174a:	2201      	movs	r2, #1
 800174c:	2101      	movs	r1, #1
 800174e:	482c      	ldr	r0, [pc, #176]	@ (8001800 <main+0xe0>)
 8001750:	f003 fd70 	bl	8005234 <HAL_GPIO_WritePin>
  //	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable


  	t2 = micros();
 8001754:	f000 fc2e 	bl	8001fb4 <_ZL6microsv>
 8001758:	4603      	mov	r3, r0
 800175a:	4a2a      	ldr	r2, [pc, #168]	@ (8001804 <main+0xe4>)
 800175c:	6013      	str	r3, [r2, #0]
  //	simpleFOC.initFOC(NOT_SET, UNKNOWN); 		//Not yet calibrate find the best init value

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800175e:	f000 f85d 	bl	800181c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001762:	f000 fbaf 	bl	8001ec4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8001766:	f000 fb7b 	bl	8001e60 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 800176a:	f000 fa47 	bl	8001bfc <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 800176e:	f000 f8ab 	bl	80018c8 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8001772:	f000 f9df 	bl	8001b34 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8001776:	f000 fa83 	bl	8001c80 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 800177a:	f000 f92b 	bl	80019d4 <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 800177e:	f000 f999 	bl	8001ab4 <_ZL14MX_CORDIC_Initv>
  MX_CRC_Init();
 8001782:	f000 f9af 	bl	8001ae4 <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8001786:	f000 fa21 	bl	8001bcc <_ZL12MX_FMAC_Initv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  simpleFOC.readEncoderOnly();
 800178a:	481b      	ldr	r0, [pc, #108]	@ (80017f8 <main+0xd8>)
 800178c:	f7ff ffb8 	bl	8001700 <_ZN9simpleFOC15readEncoderOnlyEv>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t1++;
 8001790:	4b1d      	ldr	r3, [pc, #116]	@ (8001808 <main+0xe8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <main+0xe8>)
 8001798:	6013      	str	r3, [r2, #0]
//	  HAL_Delay(1000);
	  t5 = micros() - t4;
 800179a:	f000 fc0b 	bl	8001fb4 <_ZL6microsv>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <main+0xec>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001810 <main+0xf0>)
 80017a8:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 80017aa:	f000 fc03 	bl	8001fb4 <_ZL6microsv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a16      	ldr	r2, [pc, #88]	@ (800180c <main+0xec>)
 80017b2:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 80017b4:	4b16      	ldr	r3, [pc, #88]	@ (8001810 <main+0xf0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fe6f 	bl	800049c <__aeabi_ui2d>
 80017be:	a30c      	add	r3, pc, #48	@ (adr r3, 80017f0 <main+0xd0>)
 80017c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c4:	f7fe fee4 	bl	8000590 <__aeabi_dmul>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	4910      	ldr	r1, [pc, #64]	@ (8001814 <main+0xf4>)
 80017d2:	f7ff f807 	bl	80007e4 <__aeabi_ddiv>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff f987 	bl	8000af0 <__aeabi_d2f>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001818 <main+0xf8>)
 80017e6:	6013      	str	r3, [r2, #0]
	  simpleFOC.readEncoderOnly();
 80017e8:	bf00      	nop
 80017ea:	e7ce      	b.n	800178a <main+0x6a>
 80017ec:	f3af 8000 	nop.w
 80017f0:	a0b5ed8d 	.word	0xa0b5ed8d
 80017f4:	3eb0c6f7 	.word	0x3eb0c6f7
 80017f8:	20000158 	.word	0x20000158
 80017fc:	2000053c 	.word	0x2000053c
 8001800:	48000400 	.word	0x48000400
 8001804:	2000058c 	.word	0x2000058c
 8001808:	20000588 	.word	0x20000588
 800180c:	20000590 	.word	0x20000590
 8001810:	20000594 	.word	0x20000594
 8001814:	3ff00000 	.word	0x3ff00000
 8001818:	20000598 	.word	0x20000598

0800181c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001822:	f107 0318 	add.w	r3, r7, #24
 8001826:	2238      	movs	r2, #56	@ 0x38
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f007 fc06 	bl	800903c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001830:	1d3b      	adds	r3, r7, #4
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800183e:	2000      	movs	r0, #0
 8001840:	f003 fd10 	bl	8005264 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001848:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800184e:	2340      	movs	r3, #64	@ 0x40
 8001850:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001852:	2302      	movs	r3, #2
 8001854:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001856:	2302      	movs	r3, #2
 8001858:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800185a:	2304      	movs	r3, #4
 800185c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800185e:	2355      	movs	r3, #85	@ 0x55
 8001860:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001862:	2302      	movs	r3, #2
 8001864:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001866:	2302      	movs	r3, #2
 8001868:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800186a:	2302      	movs	r3, #2
 800186c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800186e:	f107 0318 	add.w	r3, r7, #24
 8001872:	4618      	mov	r0, r3
 8001874:	f003 fdaa 	bl	80053cc <HAL_RCC_OscConfig>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	bf14      	ite	ne
 800187e:	2301      	movne	r3, #1
 8001880:	2300      	moveq	r3, #0
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001888:	f000 fbac 	bl	8001fe4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800188c:	230f      	movs	r3, #15
 800188e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001890:	2303      	movs	r3, #3
 8001892:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	2104      	movs	r1, #4
 80018a4:	4618      	mov	r0, r3
 80018a6:	f004 f8a3 	bl	80059f0 <HAL_RCC_ClockConfig>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf14      	ite	ne
 80018b0:	2301      	movne	r3, #1
 80018b2:	2300      	moveq	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80018ba:	f000 fb93 	bl	8001fe4 <Error_Handler>
  }
}
 80018be:	bf00      	nop
 80018c0:	3750      	adds	r7, #80	@ 0x50
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08c      	sub	sp, #48	@ 0x30
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80018ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2220      	movs	r2, #32
 80018de:	2100      	movs	r1, #0
 80018e0:	4618      	mov	r0, r3
 80018e2:	f007 fbab 	bl	800903c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80018e6:	4b39      	ldr	r3, [pc, #228]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 80018e8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80018ec:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018ee:	4b37      	ldr	r3, [pc, #220]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 80018f0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80018f4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018fc:	4b33      	ldr	r3, [pc, #204]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 80018fe:	2200      	movs	r2, #0
 8001900:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001902:	4b32      	ldr	r3, [pc, #200]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001908:	4b30      	ldr	r3, [pc, #192]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190e:	4b2f      	ldr	r3, [pc, #188]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001910:	2204      	movs	r2, #4
 8001912:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001914:	4b2d      	ldr	r3, [pc, #180]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001916:	2200      	movs	r2, #0
 8001918:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800191a:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 800191c:	2201      	movs	r2, #1
 800191e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001920:	4b2a      	ldr	r3, [pc, #168]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001922:	2201      	movs	r2, #1
 8001924:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001926:	4b29      	ldr	r3, [pc, #164]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001928:	2200      	movs	r2, #0
 800192a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192e:	4b27      	ldr	r3, [pc, #156]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001930:	2200      	movs	r2, #0
 8001932:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001934:	4b25      	ldr	r3, [pc, #148]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001936:	2200      	movs	r2, #0
 8001938:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800193a:	4b24      	ldr	r3, [pc, #144]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001942:	4b22      	ldr	r3, [pc, #136]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001944:	2200      	movs	r2, #0
 8001946:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001948:	4b20      	ldr	r3, [pc, #128]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001950:	481e      	ldr	r0, [pc, #120]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001952:	f001 f94b 	bl	8002bec <HAL_ADC_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8001966:	f000 fb3d 	bl	8001fe4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800196e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001972:	4619      	mov	r1, r3
 8001974:	4815      	ldr	r0, [pc, #84]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 8001976:	f002 f94b 	bl	8003c10 <HAL_ADCEx_MultiModeConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800198a:	f000 fb2b 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <_ZL12MX_ADC1_Initv+0x108>)
 8001990:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001992:	2306      	movs	r3, #6
 8001994:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001996:	2307      	movs	r3, #7
 8001998:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800199a:	237f      	movs	r3, #127	@ 0x7f
 800199c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800199e:	2304      	movs	r3, #4
 80019a0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a6:	1d3b      	adds	r3, r7, #4
 80019a8:	4619      	mov	r1, r3
 80019aa:	4808      	ldr	r0, [pc, #32]	@ (80019cc <_ZL12MX_ADC1_Initv+0x104>)
 80019ac:	f001 fbb4 	bl	8003118 <HAL_ADC_ConfigChannel>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	bf14      	ite	ne
 80019b6:	2301      	movne	r3, #1
 80019b8:	2300      	moveq	r3, #0
 80019ba:	b2db      	uxtb	r3, r3
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 80019c0:	f000 fb10 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	3730      	adds	r7, #48	@ 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000258 	.word	0x20000258
 80019d0:	04300002 	.word	0x04300002

080019d4 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b088      	sub	sp, #32
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80019da:	463b      	mov	r3, r7
 80019dc:	2220      	movs	r2, #32
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 fb2b 	bl	800903c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80019e6:	4b30      	ldr	r3, [pc, #192]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 80019e8:	4a30      	ldr	r2, [pc, #192]	@ (8001aac <_ZL12MX_ADC2_Initv+0xd8>)
 80019ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019ec:	4b2e      	ldr	r3, [pc, #184]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 80019ee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80019f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019fa:	4b2b      	ldr	r3, [pc, #172]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001a00:	4b29      	ldr	r3, [pc, #164]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001a06:	4b28      	ldr	r3, [pc, #160]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a0c:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a0e:	2204      	movs	r2, #4
 8001a10:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a12:	4b25      	ldr	r3, [pc, #148]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a20:	2201      	movs	r2, #1
 8001a22:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a24:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a40:	4b19      	ldr	r3, [pc, #100]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a4e:	4816      	ldr	r0, [pc, #88]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a50:	f001 f8cc 	bl	8002bec <HAL_ADC_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	bf14      	ite	ne
 8001a5a:	2301      	movne	r3, #1
 8001a5c:	2300      	moveq	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8001a64:	f000 fabe 	bl	8001fe4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001a68:	4b11      	ldr	r3, [pc, #68]	@ (8001ab0 <_ZL12MX_ADC2_Initv+0xdc>)
 8001a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001a70:	2307      	movs	r3, #7
 8001a72:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a74:	237f      	movs	r3, #127	@ 0x7f
 8001a76:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a80:	463b      	mov	r3, r7
 8001a82:	4619      	mov	r1, r3
 8001a84:	4808      	ldr	r0, [pc, #32]	@ (8001aa8 <_ZL12MX_ADC2_Initv+0xd4>)
 8001a86:	f001 fb47 	bl	8003118 <HAL_ADC_ConfigChannel>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	bf14      	ite	ne
 8001a90:	2301      	movne	r3, #1
 8001a92:	2300      	moveq	r3, #0
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8001a9a:	f000 faa3 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002c4 	.word	0x200002c4
 8001aac:	50000100 	.word	0x50000100
 8001ab0:	08600004 	.word	0x08600004

08001ab4 <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	@ (8001adc <_ZL14MX_CORDIC_Initv+0x28>)
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <_ZL14MX_CORDIC_Initv+0x2c>)
 8001abc:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001abe:	4807      	ldr	r0, [pc, #28]	@ (8001adc <_ZL14MX_CORDIC_Initv+0x28>)
 8001ac0:	f002 f98e 	bl	8003de0 <HAL_CORDIC_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 8001ad4:	f000 fa86 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200003f0 	.word	0x200003f0
 8001ae0:	40020c00 	.word	0x40020c00

08001ae4 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001ae8:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001aea:	4a11      	ldr	r2, [pc, #68]	@ (8001b30 <_ZL11MX_CRC_Initv+0x4c>)
 8001aec:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001aee:	4b0f      	ldr	r3, [pc, #60]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8001af4:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001afa:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001b00:	4b0a      	ldr	r3, [pc, #40]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001b0c:	4807      	ldr	r0, [pc, #28]	@ (8001b2c <_ZL11MX_CRC_Initv+0x48>)
 8001b0e:	f002 faa9 	bl	8004064 <HAL_CRC_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf14      	ite	ne
 8001b18:	2301      	movne	r3, #1
 8001b1a:	2300      	moveq	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8001b22:	f000 fa5f 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	20000418 	.word	0x20000418
 8001b30:	40023000 	.word	0x40023000

08001b34 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001b38:	4b22      	ldr	r3, [pc, #136]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b3a:	4a23      	ldr	r2, [pc, #140]	@ (8001bc8 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001b3c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001b3e:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b44:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001b4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001b50:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001b56:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001b5c:	4b19      	ldr	r3, [pc, #100]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 8001b62:	4b18      	ldr	r3, [pc, #96]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8001b68:	4b16      	ldr	r3, [pc, #88]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b6a:	220b      	movs	r2, #11
 8001b6c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 8001b6e:	4b15      	ldr	r3, [pc, #84]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b70:	2249      	movs	r2, #73	@ 0x49
 8001b72:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b76:	220b      	movs	r2, #11
 8001b78:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 8001b7a:	4b12      	ldr	r3, [pc, #72]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b7c:	2205      	movs	r2, #5
 8001b7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8001b80:	4b10      	ldr	r3, [pc, #64]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b82:	220f      	movs	r2, #15
 8001b84:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8001b86:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b88:	2212      	movs	r2, #18
 8001b8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 8001b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b8e:	220f      	movs	r2, #15
 8001b90:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 8001b92:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b94:	220a      	movs	r2, #10
 8001b96:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001b9e:	4b09      	ldr	r3, [pc, #36]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001ba4:	4807      	ldr	r0, [pc, #28]	@ (8001bc4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ba6:	f002 fdc1 	bl	800472c <HAL_FDCAN_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	bf14      	ite	ne
 8001bb0:	2301      	movne	r3, #1
 8001bb2:	2300      	moveq	r3, #0
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001bba:	f000 fa13 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	2000043c 	.word	0x2000043c
 8001bc8:	40006400 	.word	0x40006400

08001bcc <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8001bd0:	4b08      	ldr	r3, [pc, #32]	@ (8001bf4 <_ZL12MX_FMAC_Initv+0x28>)
 8001bd2:	4a09      	ldr	r2, [pc, #36]	@ (8001bf8 <_ZL12MX_FMAC_Initv+0x2c>)
 8001bd4:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8001bd6:	4807      	ldr	r0, [pc, #28]	@ (8001bf4 <_ZL12MX_FMAC_Initv+0x28>)
 8001bd8:	f003 f8fe 	bl	8004dd8 <HAL_FMAC_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bf14      	ite	ne
 8001be2:	2301      	movne	r3, #1
 8001be4:	2300      	moveq	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8001bec:	f000 f9fa 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	200004a0 	.word	0x200004a0
 8001bf8:	40021400 	.word	0x40021400

08001bfc <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c02:	4a1e      	ldr	r2, [pc, #120]	@ (8001c7c <_ZL12MX_SPI1_Initv+0x80>)
 8001c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c06:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c14:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c16:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8001c1a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c24:	2201      	movs	r2, #1
 8001c26:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c2e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001c30:	4b11      	ldr	r3, [pc, #68]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c32:	2228      	movs	r2, #40	@ 0x28
 8001c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c36:	4b10      	ldr	r3, [pc, #64]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c42:	4b0d      	ldr	r3, [pc, #52]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c48:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c4a:	2207      	movs	r2, #7
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001c54:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c5a:	4807      	ldr	r0, [pc, #28]	@ (8001c78 <_ZL12MX_SPI1_Initv+0x7c>)
 8001c5c:	f004 fae8 	bl	8006230 <HAL_SPI_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf14      	ite	ne
 8001c66:	2301      	movne	r3, #1
 8001c68:	2300      	moveq	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8001c70:	f000 f9b8 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c74:	bf00      	nop
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	200004d8 	.word	0x200004d8
 8001c7c:	40013000 	.word	0x40013000

08001c80 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b09c      	sub	sp, #112	@ 0x70
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c86:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
 8001c92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ca0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
 8001cb0:	615a      	str	r2, [r3, #20]
 8001cb2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cb4:	1d3b      	adds	r3, r7, #4
 8001cb6:	2234      	movs	r2, #52	@ 0x34
 8001cb8:	2100      	movs	r1, #0
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f007 f9be 	bl	800903c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001cc0:	4b65      	ldr	r3, [pc, #404]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cc2:	4a66      	ldr	r2, [pc, #408]	@ (8001e5c <_ZL12MX_TIM1_Initv+0x1dc>)
 8001cc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001cc6:	4b64      	ldr	r3, [pc, #400]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001ccc:	4b62      	ldr	r3, [pc, #392]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cce:	2220      	movs	r2, #32
 8001cd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8001cd2:	4b61      	ldr	r3, [pc, #388]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cd4:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8001cd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cda:	4b5f      	ldr	r3, [pc, #380]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001ce8:	2280      	movs	r2, #128	@ 0x80
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001cec:	485a      	ldr	r0, [pc, #360]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001cee:	f004 fed1 	bl	8006a94 <HAL_TIM_Base_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8001d02:	f000 f96f 	bl	8001fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d0a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d0c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001d10:	4619      	mov	r1, r3
 8001d12:	4851      	ldr	r0, [pc, #324]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001d14:	f005 fae6 	bl	80072e4 <HAL_TIM_ConfigClockSource>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	bf14      	ite	ne
 8001d1e:	2301      	movne	r3, #1
 8001d20:	2300      	moveq	r3, #0
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001d28:	f000 f95c 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001d2c:	484a      	ldr	r0, [pc, #296]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001d2e:	f004 ff08 	bl	8006b42 <HAL_TIM_PWM_Init>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bf14      	ite	ne
 8001d38:	2301      	movne	r3, #1
 8001d3a:	2300      	moveq	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001d42:	f000 f94f 	bl	8001fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d46:	2300      	movs	r3, #0
 8001d48:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d56:	4619      	mov	r1, r3
 8001d58:	483f      	ldr	r0, [pc, #252]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001d5a:	f006 f88f 	bl	8007e7c <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001d6e:	f000 f939 	bl	8001fe4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d72:	2360      	movs	r3, #96	@ 0x60
 8001d74:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001d7a:	2302      	movs	r3, #2
 8001d7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001d82:	2304      	movs	r3, #4
 8001d84:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d8e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001d92:	2200      	movs	r2, #0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4830      	ldr	r0, [pc, #192]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001d98:	f005 f990 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	bf14      	ite	ne
 8001da2:	2301      	movne	r3, #1
 8001da4:	2300      	moveq	r3, #0
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8001dac:	f000 f91a 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001db4:	2204      	movs	r2, #4
 8001db6:	4619      	mov	r1, r3
 8001db8:	4827      	ldr	r0, [pc, #156]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001dba:	f005 f97f 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8001dce:	f000 f909 	bl	8001fe4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	4619      	mov	r1, r3
 8001dda:	481f      	ldr	r0, [pc, #124]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001ddc:	f005 f96e 	bl	80070bc <HAL_TIM_PWM_ConfigChannel>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	bf14      	ite	ne
 8001de6:	2301      	movne	r3, #1
 8001de8:	2300      	moveq	r3, #0
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8001df0:	f000 f8f8 	bl	8001fe4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001e0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e12:	2300      	movs	r3, #0
 8001e14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e1a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e20:	2300      	movs	r3, #0
 8001e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e24:	2300      	movs	r3, #0
 8001e26:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4809      	ldr	r0, [pc, #36]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001e32:	f006 f8b1 	bl	8007f98 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	bf14      	ite	ne
 8001e3c:	2301      	movne	r3, #1
 8001e3e:	2300      	moveq	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <_ZL12MX_TIM1_Initv+0x1ca>
  {
    Error_Handler();
 8001e46:	f000 f8cd 	bl	8001fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e4a:	4803      	ldr	r0, [pc, #12]	@ (8001e58 <_ZL12MX_TIM1_Initv+0x1d8>)
 8001e4c:	f000 fb52 	bl	80024f4 <HAL_TIM_MspPostInit>

}
 8001e50:	bf00      	nop
 8001e52:	3770      	adds	r7, #112	@ 0x70
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	2000053c 	.word	0x2000053c
 8001e5c:	40012c00 	.word	0x40012c00

08001e60 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001e66:	4b16      	ldr	r3, [pc, #88]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6a:	4a15      	ldr	r2, [pc, #84]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e6c:	f043 0304 	orr.w	r3, r3, #4
 8001e70:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e72:	4b13      	ldr	r3, [pc, #76]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	607b      	str	r3, [r7, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6493      	str	r3, [r2, #72]	@ 0x48
 8001e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec0 <_ZL11MX_DMA_Initv+0x60>)
 8001e8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	200b      	movs	r0, #11
 8001e9c:	f002 f8ad 	bl	8003ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ea0:	200b      	movs	r0, #11
 8001ea2:	f002 f8c4 	bl	800402e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	200c      	movs	r0, #12
 8001eac:	f002 f8a5 	bl	8003ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001eb0:	200c      	movs	r0, #12
 8001eb2:	f002 f8bc 	bl	800402e <HAL_NVIC_EnableIRQ>

}
 8001eb6:	bf00      	nop
 8001eb8:	3708      	adds	r7, #8
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eca:	f107 030c 	add.w	r3, r7, #12
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ede:	4a27      	ldr	r2, [pc, #156]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ee6:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001ee8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	60bb      	str	r3, [r7, #8]
 8001ef0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001ef4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef6:	4a21      	ldr	r2, [pc, #132]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efe:	4b1f      	ldr	r3, [pc, #124]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	607b      	str	r3, [r7, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001f0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f16:	4b19      	ldr	r3, [pc, #100]	@ (8001f7c <_ZL12MX_GPIO_Initv+0xb8>)
 8001f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2110      	movs	r1, #16
 8001f26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f2a:	f003 f983 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2101      	movs	r1, #1
 8001f32:	4813      	ldr	r0, [pc, #76]	@ (8001f80 <_ZL12MX_GPIO_Initv+0xbc>)
 8001f34:	f003 f97e 	bl	8005234 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8001f38:	2310      	movs	r3, #16
 8001f3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 030c 	add.w	r3, r7, #12
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f52:	f002 ffed 	bl	8004f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8001f56:	2301      	movs	r3, #1
 8001f58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001f66:	f107 030c 	add.w	r3, r7, #12
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4804      	ldr	r0, [pc, #16]	@ (8001f80 <_ZL12MX_GPIO_Initv+0xbc>)
 8001f6e:	f002 ffdf 	bl	8004f30 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f72:	bf00      	nop
 8001f74:	3720      	adds	r7, #32
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	48000400 	.word	0x48000400

08001f84 <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001f88:	4b08      	ldr	r3, [pc, #32]	@ (8001fac <_ZL8DWT_Initv+0x28>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <_ZL8DWT_Initv+0x28>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8001f94:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <_ZL8DWT_Initv+0x2c>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a05      	ldr	r2, [pc, #20]	@ (8001fb0 <_ZL8DWT_Initv+0x2c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6013      	str	r3, [r2, #0]
}
 8001fa0:	bf00      	nop
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000edf0 	.word	0xe000edf0
 8001fb0:	e0001000 	.word	0xe0001000

08001fb4 <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001fb8:	4b07      	ldr	r3, [pc, #28]	@ (8001fd8 <_ZL6microsv+0x24>)
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	4b07      	ldr	r3, [pc, #28]	@ (8001fdc <_ZL6microsv+0x28>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4907      	ldr	r1, [pc, #28]	@ (8001fe0 <_ZL6microsv+0x2c>)
 8001fc2:	fba1 1303 	umull	r1, r3, r1, r3
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	e0001000 	.word	0xe0001000
 8001fdc:	20000020 	.word	0x20000020
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe8:	b672      	cpsid	i
}
 8001fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <Error_Handler+0x8>

08001ff0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d107      	bne.n	8002010 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002006:	4293      	cmp	r3, r2
 8002008:	d102      	bne.n	8002010 <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 800200a:	4809      	ldr	r0, [pc, #36]	@ (8002030 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800200c:	f7ff fafe 	bl	800160c <_ZN9simpleFOCC1Ev>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d107      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800201c:	4293      	cmp	r3, r2
 800201e:	d102      	bne.n	8002026 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8002020:	4803      	ldr	r0, [pc, #12]	@ (8002030 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8002022:	f7ff fb1b 	bl	800165c <_ZN9simpleFOCD1Ev>
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000158 	.word	0x20000158

08002034 <_GLOBAL__sub_I_simpleFOC>:
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
 8002038:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800203c:	2001      	movs	r0, #1
 800203e:	f7ff ffd7 	bl	8001ff0 <_Z41__static_initialization_and_destruction_0ii>
 8002042:	bd80      	pop	{r7, pc}

08002044 <_GLOBAL__sub_D_simpleFOC>:
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
 8002048:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800204c:	2000      	movs	r0, #0
 800204e:	f7ff ffcf 	bl	8001ff0 <_Z41__static_initialization_and_destruction_0ii>
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <HAL_MspInit+0x44>)
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	4a0e      	ldr	r2, [pc, #56]	@ (8002098 <HAL_MspInit+0x44>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	6613      	str	r3, [r2, #96]	@ 0x60
 8002066:	4b0c      	ldr	r3, [pc, #48]	@ (8002098 <HAL_MspInit+0x44>)
 8002068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206a:	f003 0301 	and.w	r3, r3, #1
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	4b09      	ldr	r3, [pc, #36]	@ (8002098 <HAL_MspInit+0x44>)
 8002074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002076:	4a08      	ldr	r2, [pc, #32]	@ (8002098 <HAL_MspInit+0x44>)
 8002078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800207c:	6593      	str	r3, [r2, #88]	@ 0x58
 800207e:	4b06      	ldr	r3, [pc, #24]	@ (8002098 <HAL_MspInit+0x44>)
 8002080:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002086:	603b      	str	r3, [r7, #0]
 8002088:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800208a:	f003 f98f 	bl	80053ac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40021000 	.word	0x40021000

0800209c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0a0      	sub	sp, #128	@ 0x80
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	f107 031c 	add.w	r3, r7, #28
 80020b8:	2250      	movs	r2, #80	@ 0x50
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f006 ffbd 	bl	800903c <memset>
  if(hadc->Instance==ADC1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020ca:	d169      	bne.n	80021a0 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80020d0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80020d2:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80020d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fe6b 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020e8:	f7ff ff7c 	bl	8001fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020ec:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	3301      	adds	r3, #1
 80020f2:	4a64      	ldr	r2, [pc, #400]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80020f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020f6:	4b63      	ldr	r3, [pc, #396]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d10b      	bne.n	8002116 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020fe:	4b62      	ldr	r3, [pc, #392]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	4a61      	ldr	r2, [pc, #388]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 8002104:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002108:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800210a:	4b5f      	ldr	r3, [pc, #380]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 800210c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800210e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002112:	61bb      	str	r3, [r7, #24]
 8002114:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	4b5c      	ldr	r3, [pc, #368]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 8002118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211a:	4a5b      	ldr	r2, [pc, #364]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002122:	4b59      	ldr	r3, [pc, #356]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	617b      	str	r3, [r7, #20]
 800212c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 800212e:	2301      	movs	r3, #1
 8002130:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002132:	2303      	movs	r3, #3
 8002134:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800213e:	4619      	mov	r1, r3
 8002140:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002144:	f002 fef4 	bl	8004f30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002148:	4b50      	ldr	r3, [pc, #320]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 800214a:	4a51      	ldr	r2, [pc, #324]	@ (8002290 <HAL_ADC_MspInit+0x1f4>)
 800214c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800214e:	4b4f      	ldr	r3, [pc, #316]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002150:	2205      	movs	r2, #5
 8002152:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002154:	4b4d      	ldr	r3, [pc, #308]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002156:	2200      	movs	r2, #0
 8002158:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800215a:	4b4c      	ldr	r3, [pc, #304]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 800215c:	2200      	movs	r2, #0
 800215e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002160:	4b4a      	ldr	r3, [pc, #296]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002162:	2280      	movs	r2, #128	@ 0x80
 8002164:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002166:	4b49      	ldr	r3, [pc, #292]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002168:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800216c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216e:	4b47      	ldr	r3, [pc, #284]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002170:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002174:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002176:	4b45      	ldr	r3, [pc, #276]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002178:	2220      	movs	r2, #32
 800217a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800217c:	4b43      	ldr	r3, [pc, #268]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 800217e:	2200      	movs	r2, #0
 8002180:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002182:	4842      	ldr	r0, [pc, #264]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002184:	f002 f860 	bl	8004248 <HAL_DMA_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800218e:	f7ff ff29 	bl	8001fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a3d      	ldr	r2, [pc, #244]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
 8002198:	4a3c      	ldr	r2, [pc, #240]	@ (800228c <HAL_ADC_MspInit+0x1f0>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800219e:	e06d      	b.n	800227c <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a3b      	ldr	r2, [pc, #236]	@ (8002294 <HAL_ADC_MspInit+0x1f8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d168      	bne.n	800227c <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021ae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80021b0:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80021b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fdfc 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 80021c6:	f7ff ff0d 	bl	8001fe4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021ca:	4b2e      	ldr	r3, [pc, #184]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	3301      	adds	r3, #1
 80021d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80021d2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_ADC_MspInit+0x1e8>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d10b      	bne.n	80021f4 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 80021e2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80021e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e8:	4b27      	ldr	r3, [pc, #156]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f4:	4b24      	ldr	r3, [pc, #144]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 80021f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021f8:	4a23      	ldr	r2, [pc, #140]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002200:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_ADC_MspInit+0x1ec>)
 8002202:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 800220c:	2302      	movs	r3, #2
 800220e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002210:	2303      	movs	r3, #3
 8002212:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002214:	2300      	movs	r3, #0
 8002216:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8002218:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800221c:	4619      	mov	r1, r3
 800221e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002222:	f002 fe85 	bl	8004f30 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002226:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002228:	4a1c      	ldr	r2, [pc, #112]	@ (800229c <HAL_ADC_MspInit+0x200>)
 800222a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 800222c:	4b1a      	ldr	r3, [pc, #104]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 800222e:	2224      	movs	r2, #36	@ 0x24
 8002230:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002232:	4b19      	ldr	r3, [pc, #100]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002234:	2200      	movs	r2, #0
 8002236:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002238:	4b17      	ldr	r3, [pc, #92]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 800223a:	2200      	movs	r2, #0
 800223c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800223e:	4b16      	ldr	r3, [pc, #88]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002240:	2280      	movs	r2, #128	@ 0x80
 8002242:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002244:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002246:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800224a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800224c:	4b12      	ldr	r3, [pc, #72]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 800224e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002252:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002254:	4b10      	ldr	r3, [pc, #64]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002256:	2220      	movs	r2, #32
 8002258:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800225a:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8002260:	480d      	ldr	r0, [pc, #52]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002262:	f001 fff1 	bl	8004248 <HAL_DMA_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 800226c:	f7ff feba 	bl	8001fe4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4a09      	ldr	r2, [pc, #36]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002274:	655a      	str	r2, [r3, #84]	@ 0x54
 8002276:	4a08      	ldr	r2, [pc, #32]	@ (8002298 <HAL_ADC_MspInit+0x1fc>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800227c:	bf00      	nop
 800227e:	3780      	adds	r7, #128	@ 0x80
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	2000059c 	.word	0x2000059c
 8002288:	40021000 	.word	0x40021000
 800228c:	20000330 	.word	0x20000330
 8002290:	40020008 	.word	0x40020008
 8002294:	50000100 	.word	0x50000100
 8002298:	20000390 	.word	0x20000390
 800229c:	4002001c 	.word	0x4002001c

080022a0 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	@ (80022d8 <HAL_CORDIC_MspInit+0x38>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d10b      	bne.n	80022ca <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80022b2:	4b0a      	ldr	r3, [pc, #40]	@ (80022dc <HAL_CORDIC_MspInit+0x3c>)
 80022b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b6:	4a09      	ldr	r2, [pc, #36]	@ (80022dc <HAL_CORDIC_MspInit+0x3c>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80022be:	4b07      	ldr	r3, [pc, #28]	@ (80022dc <HAL_CORDIC_MspInit+0x3c>)
 80022c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80022ca:	bf00      	nop
 80022cc:	3714      	adds	r7, #20
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000

080022e0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <HAL_CRC_MspInit+0x38>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d10b      	bne.n	800230a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <HAL_CRC_MspInit+0x3c>)
 80022f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022f6:	4a09      	ldr	r2, [pc, #36]	@ (800231c <HAL_CRC_MspInit+0x3c>)
 80022f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80022fe:	4b07      	ldr	r3, [pc, #28]	@ (800231c <HAL_CRC_MspInit+0x3c>)
 8002300:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40023000 	.word	0x40023000
 800231c:	40021000 	.word	0x40021000

08002320 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b09e      	sub	sp, #120	@ 0x78
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	2250      	movs	r2, #80	@ 0x50
 800233e:	2100      	movs	r1, #0
 8002340:	4618      	mov	r0, r3
 8002342:	f006 fe7b 	bl	800903c <memset>
  if(hfdcan->Instance==FDCAN1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a24      	ldr	r2, [pc, #144]	@ (80023dc <HAL_FDCAN_MspInit+0xbc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d141      	bne.n	80023d4 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002350:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002354:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8002356:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800235a:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	f107 0314 	add.w	r3, r7, #20
 8002360:	4618      	mov	r0, r3
 8002362:	f003 fd29 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 800236c:	f7ff fe3a 	bl	8001fe4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002374:	4a1a      	ldr	r2, [pc, #104]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 8002376:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800237a:	6593      	str	r3, [r2, #88]	@ 0x58
 800237c:	4b18      	ldr	r3, [pc, #96]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002380:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	4b15      	ldr	r3, [pc, #84]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800238c:	4a14      	ldr	r2, [pc, #80]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002394:	4b12      	ldr	r3, [pc, #72]	@ (80023e0 <HAL_FDCAN_MspInit+0xc0>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80023a0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80023a4:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ae:	2300      	movs	r3, #0
 80023b0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80023b2:	2309      	movs	r3, #9
 80023b4:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80023ba:	4619      	mov	r1, r3
 80023bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023c0:	f002 fdb6 	bl	8004f30 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80023c4:	2200      	movs	r2, #0
 80023c6:	2100      	movs	r1, #0
 80023c8:	2015      	movs	r0, #21
 80023ca:	f001 fe16 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80023ce:	2015      	movs	r0, #21
 80023d0:	f001 fe2d 	bl	800402e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3778      	adds	r7, #120	@ 0x78
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40006400 	.word	0x40006400
 80023e0:	40021000 	.word	0x40021000

080023e4 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	@ (800241c <HAL_FMAC_MspInit+0x38>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d10b      	bne.n	800240e <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80023f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002420 <HAL_FMAC_MspInit+0x3c>)
 80023f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023fa:	4a09      	ldr	r2, [pc, #36]	@ (8002420 <HAL_FMAC_MspInit+0x3c>)
 80023fc:	f043 0310 	orr.w	r3, r3, #16
 8002400:	6493      	str	r3, [r2, #72]	@ 0x48
 8002402:	4b07      	ldr	r3, [pc, #28]	@ (8002420 <HAL_FMAC_MspInit+0x3c>)
 8002404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002406:	f003 0310 	and.w	r3, r3, #16
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021400 	.word	0x40021400
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	@ 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a17      	ldr	r2, [pc, #92]	@ (80024a0 <HAL_SPI_MspInit+0x7c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d128      	bne.n	8002498 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002446:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800244a:	4a16      	ldr	r2, [pc, #88]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 800244c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002450:	6613      	str	r3, [r2, #96]	@ 0x60
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 8002454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002456:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800245e:	4b11      	ldr	r3, [pc, #68]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 8002460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002462:	4a10      	ldr	r2, [pc, #64]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 8002464:	f043 0301 	orr.w	r3, r3, #1
 8002468:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_SPI_MspInit+0x80>)
 800246c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002476:	23e0      	movs	r3, #224	@ 0xe0
 8002478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247a:	2302      	movs	r3, #2
 800247c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002486:	2305      	movs	r3, #5
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248a:	f107 0314 	add.w	r3, r7, #20
 800248e:	4619      	mov	r1, r3
 8002490:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002494:	f002 fd4c 	bl	8004f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002498:	bf00      	nop
 800249a:	3728      	adds	r7, #40	@ 0x28
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40013000 	.word	0x40013000
 80024a4:	40021000 	.word	0x40021000

080024a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_TIM_Base_MspInit+0x44>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d113      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ba:	4b0d      	ldr	r3, [pc, #52]	@ (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024be:	4a0c      	ldr	r2, [pc, #48]	@ (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80024c6:	4b0a      	ldr	r3, [pc, #40]	@ (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	2019      	movs	r0, #25
 80024d8:	f001 fd8f 	bl	8003ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024dc:	2019      	movs	r0, #25
 80024de:	f001 fda6 	bl	800402e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40012c00 	.word	0x40012c00
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 030c 	add.w	r3, r7, #12
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a12      	ldr	r2, [pc, #72]	@ (800255c <HAL_TIM_MspPostInit+0x68>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d11d      	bne.n	8002552 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800251a:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002522:	4b0f      	ldr	r3, [pc, #60]	@ (8002560 <HAL_TIM_MspPostInit+0x6c>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 800252e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8002532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002540:	2306      	movs	r3, #6
 8002542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 030c 	add.w	r3, r7, #12
 8002548:	4619      	mov	r1, r3
 800254a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800254e:	f002 fcef 	bl	8004f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002552:	bf00      	nop
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40012c00 	.word	0x40012c00
 8002560:	40021000 	.word	0x40021000

08002564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <NMI_Handler+0x4>

0800256c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002570:	bf00      	nop
 8002572:	e7fd      	b.n	8002570 <HardFault_Handler+0x4>

08002574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002578:	bf00      	nop
 800257a:	e7fd      	b.n	8002578 <MemManage_Handler+0x4>

0800257c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002580:	bf00      	nop
 8002582:	e7fd      	b.n	8002580 <BusFault_Handler+0x4>

08002584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002588:	bf00      	nop
 800258a:	e7fd      	b.n	8002588 <UsageFault_Handler+0x4>

0800258c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800259a:	b480      	push	{r7}
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800259e:	bf00      	nop
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ba:	f000 f8b9 	bl	8002730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025c8:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <DMA1_Channel1_IRQHandler+0x10>)
 80025ca:	f001 ff60 	bl	800448e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000330 	.word	0x20000330

080025d8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80025dc:	4802      	ldr	r0, [pc, #8]	@ (80025e8 <DMA1_Channel2_IRQHandler+0x10>)
 80025de:	f001 ff56 	bl	800448e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000390 	.word	0x20000390

080025ec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80025f0:	4802      	ldr	r0, [pc, #8]	@ (80025fc <FDCAN1_IT0_IRQHandler+0x10>)
 80025f2:	f002 f9f5 	bl	80049e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	2000043c 	.word	0x2000043c

08002600 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002604:	4802      	ldr	r0, [pc, #8]	@ (8002610 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002606:	f004 fc09 	bl	8006e1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	2000053c 	.word	0x2000053c

08002614 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002618:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <SystemInit+0x20>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261e:	4a05      	ldr	r2, [pc, #20]	@ (8002634 <SystemInit+0x20>)
 8002620:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002624:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002628:	bf00      	nop
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002638:	480d      	ldr	r0, [pc, #52]	@ (8002670 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800263a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800263c:	f7ff ffea 	bl	8002614 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002640:	480c      	ldr	r0, [pc, #48]	@ (8002674 <LoopForever+0x6>)
  ldr r1, =_edata
 8002642:	490d      	ldr	r1, [pc, #52]	@ (8002678 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <LoopForever+0xe>)
  movs r3, #0
 8002646:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002648:	e002      	b.n	8002650 <LoopCopyDataInit>

0800264a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800264a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800264c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264e:	3304      	adds	r3, #4

08002650 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002650:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002652:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002654:	d3f9      	bcc.n	800264a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002656:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002658:	4c0a      	ldr	r4, [pc, #40]	@ (8002684 <LoopForever+0x16>)
  movs r3, #0
 800265a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800265c:	e001      	b.n	8002662 <LoopFillZerobss>

0800265e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002660:	3204      	adds	r2, #4

08002662 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002662:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002664:	d3fb      	bcc.n	800265e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002666:	f006 fcf7 	bl	8009058 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800266a:	f7ff f859 	bl	8001720 <main>

0800266e <LoopForever>:

LoopForever:
    b LoopForever
 800266e:	e7fe      	b.n	800266e <LoopForever>
  ldr   r0, =_estack
 8002670:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8002674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002678:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800267c:	080091e4 	.word	0x080091e4
  ldr r2, =_sbss
 8002680:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002684:	200006e4 	.word	0x200006e4

08002688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002688:	e7fe      	b.n	8002688 <ADC1_2_IRQHandler>

0800268a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	b082      	sub	sp, #8
 800268e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002694:	2003      	movs	r0, #3
 8002696:	f001 fca5 	bl	8003fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800269a:	200f      	movs	r0, #15
 800269c:	f000 f80e 	bl	80026bc <HAL_InitTick>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	e001      	b.n	80026b0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026ac:	f7ff fcd2 	bl	8002054 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026b0:	79fb      	ldrb	r3, [r7, #7]

}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026c4:	2300      	movs	r3, #0
 80026c6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026c8:	4b16      	ldr	r3, [pc, #88]	@ (8002724 <HAL_InitTick+0x68>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d022      	beq.n	8002716 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026d0:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_InitTick+0x6c>)
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	4b13      	ldr	r3, [pc, #76]	@ (8002724 <HAL_InitTick+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80026dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80026e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fcb0 	bl	800404a <HAL_SYSTICK_Config>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10f      	bne.n	8002710 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d809      	bhi.n	800270a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026f6:	2200      	movs	r2, #0
 80026f8:	6879      	ldr	r1, [r7, #4]
 80026fa:	f04f 30ff 	mov.w	r0, #4294967295
 80026fe:	f001 fc7c 	bl	8003ffa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002702:	4a0a      	ldr	r2, [pc, #40]	@ (800272c <HAL_InitTick+0x70>)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	e007      	b.n	800271a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	e004      	b.n	800271a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	73fb      	strb	r3, [r7, #15]
 8002714:	e001      	b.n	800271a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800271a:	7bfb      	ldrb	r3, [r7, #15]
}
 800271c:	4618      	mov	r0, r3
 800271e:	3710      	adds	r7, #16
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000028 	.word	0x20000028
 8002728:	20000020 	.word	0x20000020
 800272c:	20000024 	.word	0x20000024

08002730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002734:	4b05      	ldr	r3, [pc, #20]	@ (800274c <HAL_IncTick+0x1c>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_IncTick+0x20>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4413      	add	r3, r2
 800273e:	4a03      	ldr	r2, [pc, #12]	@ (800274c <HAL_IncTick+0x1c>)
 8002740:	6013      	str	r3, [r2, #0]
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	200005a0 	.word	0x200005a0
 8002750:	20000028 	.word	0x20000028

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	@ (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200005a0 	.word	0x200005a0

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d004      	beq.n	8002790 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_Delay+0x40>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002790:	bf00      	nop
 8002792:	f7ff ffdf 	bl	8002754 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d8f7      	bhi.n	8002792 <HAL_Delay+0x26>
  {
  }
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	20000028 	.word	0x20000028

080027b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	431a      	orrs	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	609a      	str	r2, [r3, #8]
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	609a      	str	r2, [r3, #8]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002818:	b480      	push	{r7}
 800281a:	b087      	sub	sp, #28
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	3360      	adds	r3, #96	@ 0x60
 800282a:	461a      	mov	r2, r3
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b08      	ldr	r3, [pc, #32]	@ (800285c <LL_ADC_SetOffset+0x44>)
 800283a:	4013      	ands	r3, r2
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	4313      	orrs	r3, r2
 8002848:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002850:	bf00      	nop
 8002852:	371c      	adds	r7, #28
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	03fff000 	.word	0x03fff000

08002860 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	3360      	adds	r3, #96	@ 0x60
 800286e:	461a      	mov	r2, r3
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	4413      	add	r3, r2
 8002876:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr

0800288c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3360      	adds	r3, #96	@ 0x60
 800289c:	461a      	mov	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028b6:	bf00      	nop
 80028b8:	371c      	adds	r7, #28
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b087      	sub	sp, #28
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3360      	adds	r3, #96	@ 0x60
 80028d2:	461a      	mov	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80028ec:	bf00      	nop
 80028ee:	371c      	adds	r7, #28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b087      	sub	sp, #28
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	3360      	adds	r3, #96	@ 0x60
 8002908:	461a      	mov	r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
 8002936:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	695b      	ldr	r3, [r3, #20]
 800293c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	615a      	str	r2, [r3, #20]
}
 8002948:	bf00      	nop
 800294a:	370c      	adds	r7, #12
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr

08002954 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	3330      	adds	r3, #48	@ 0x30
 800298a:	461a      	mov	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	4413      	add	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	f003 031f 	and.w	r3, r3, #31
 80029a4:	211f      	movs	r1, #31
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	0e9b      	lsrs	r3, r3, #26
 80029b2:	f003 011f 	and.w	r1, r3, #31
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f003 031f 	and.w	r3, r3, #31
 80029bc:	fa01 f303 	lsl.w	r3, r1, r3
 80029c0:	431a      	orrs	r2, r3
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029c6:	bf00      	nop
 80029c8:	371c      	adds	r7, #28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b087      	sub	sp, #28
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3314      	adds	r3, #20
 80029e2:	461a      	mov	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	0e5b      	lsrs	r3, r3, #25
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	4413      	add	r3, r2
 80029f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	0d1b      	lsrs	r3, r3, #20
 80029fa:	f003 031f 	and.w	r3, r3, #31
 80029fe:	2107      	movs	r1, #7
 8002a00:	fa01 f303 	lsl.w	r3, r1, r3
 8002a04:	43db      	mvns	r3, r3
 8002a06:	401a      	ands	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	0d1b      	lsrs	r3, r3, #20
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	6879      	ldr	r1, [r7, #4]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	431a      	orrs	r2, r3
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a40:	43db      	mvns	r3, r3
 8002a42:	401a      	ands	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0318 	and.w	r3, r3, #24
 8002a4a:	4908      	ldr	r1, [pc, #32]	@ (8002a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a4c:	40d9      	lsrs	r1, r3
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	400b      	ands	r3, r1
 8002a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a56:	431a      	orrs	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a5e:	bf00      	nop
 8002a60:	3714      	adds	r7, #20
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	0007ffff 	.word	0x0007ffff

08002a70 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a9c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6093      	str	r3, [r2, #8]
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ac0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ac4:	d101      	bne.n	8002aca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002aca:	2300      	movs	r3, #0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002ae8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002aec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b14:	d101      	bne.n	8002b1a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b3c:	f043 0201 	orr.w	r2, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f003 0301 	and.w	r3, r3, #1
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <LL_ADC_IsEnabled+0x18>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <LL_ADC_IsEnabled+0x1a>
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr

08002b76 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b8a:	f043 0204 	orr.w	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr

08002b9e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d101      	bne.n	8002bb6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b08      	cmp	r3, #8
 8002bd6:	d101      	bne.n	8002bdc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	b089      	sub	sp, #36	@ 0x24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e19b      	b.n	8002f3e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d109      	bne.n	8002c28 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f7ff fa41 	bl	800209c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff ff3f 	bl	8002ab0 <LL_ADC_IsDeepPowerDownEnabled>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d004      	beq.n	8002c42 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f7ff ff25 	bl	8002a8c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff ff5a 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d115      	bne.n	8002c7e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff ff3e 	bl	8002ad8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c5c:	4b97      	ldr	r3, [pc, #604]	@ (8002ebc <HAL_ADC_Init+0x2d0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	099b      	lsrs	r3, r3, #6
 8002c62:	4a97      	ldr	r2, [pc, #604]	@ (8002ec0 <HAL_ADC_Init+0x2d4>)
 8002c64:	fba2 2303 	umull	r2, r3, r2, r3
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c70:	e002      	b.n	8002c78 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f9      	bne.n	8002c72 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7ff ff3c 	bl	8002b00 <LL_ADC_IsInternalRegulatorEnabled>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10d      	bne.n	8002caa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c92:	f043 0210 	orr.w	r2, r3, #16
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c9e:	f043 0201 	orr.w	r2, r3, #1
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff75 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	f003 0310 	and.w	r3, r3, #16
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f040 8134 	bne.w	8002f2c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 8130 	bne.w	8002f2c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002cd4:	f043 0202 	orr.w	r2, r3, #2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff35 	bl	8002b50 <LL_ADC_IsEnabled>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d137      	bne.n	8002d5c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cf4:	d004      	beq.n	8002d00 <HAL_ADC_Init+0x114>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a72      	ldr	r2, [pc, #456]	@ (8002ec4 <HAL_ADC_Init+0x2d8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10f      	bne.n	8002d20 <HAL_ADC_Init+0x134>
 8002d00:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d04:	f7ff ff24 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d08:	4604      	mov	r4, r0
 8002d0a:	486e      	ldr	r0, [pc, #440]	@ (8002ec4 <HAL_ADC_Init+0x2d8>)
 8002d0c:	f7ff ff20 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d10:	4603      	mov	r3, r0
 8002d12:	4323      	orrs	r3, r4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf0c      	ite	eq
 8002d18:	2301      	moveq	r3, #1
 8002d1a:	2300      	movne	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	e008      	b.n	8002d32 <HAL_ADC_Init+0x146>
 8002d20:	4869      	ldr	r0, [pc, #420]	@ (8002ec8 <HAL_ADC_Init+0x2dc>)
 8002d22:	f7ff ff15 	bl	8002b50 <LL_ADC_IsEnabled>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf0c      	ite	eq
 8002d2c:	2301      	moveq	r3, #1
 8002d2e:	2300      	movne	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d012      	beq.n	8002d5c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d3e:	d004      	beq.n	8002d4a <HAL_ADC_Init+0x15e>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a5f      	ldr	r2, [pc, #380]	@ (8002ec4 <HAL_ADC_Init+0x2d8>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_ADC_Init+0x162>
 8002d4a:	4a60      	ldr	r2, [pc, #384]	@ (8002ecc <HAL_ADC_Init+0x2e0>)
 8002d4c:	e000      	b.n	8002d50 <HAL_ADC_Init+0x164>
 8002d4e:	4a60      	ldr	r2, [pc, #384]	@ (8002ed0 <HAL_ADC_Init+0x2e4>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	4619      	mov	r1, r3
 8002d56:	4610      	mov	r0, r2
 8002d58:	f7ff fd2a 	bl	80027b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7f5b      	ldrb	r3, [r3, #29]
 8002d60:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d66:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002d6c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002d72:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d7a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d106      	bne.n	8002d98 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	045b      	lsls	r3, r3, #17
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d009      	beq.n	8002db4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dac:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	4b46      	ldr	r3, [pc, #280]	@ (8002ed4 <HAL_ADC_Init+0x2e8>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	69b9      	ldr	r1, [r7, #24]
 8002dc4:	430b      	orrs	r3, r1
 8002dc6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff feee 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 8002de8:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d17b      	bne.n	8002ee8 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d178      	bne.n	8002ee8 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002dfa:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e02:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e12:	f023 0302 	bic.w	r3, r3, #2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	69b9      	ldr	r1, [r7, #24]
 8002e1c:	430b      	orrs	r3, r1
 8002e1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d017      	beq.n	8002e58 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002e36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e40:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e44:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6911      	ldr	r1, [r2, #16]
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002e56:	e013      	b.n	8002e80 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691a      	ldr	r2, [r3, #16]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002e66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002e78:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002e7c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d126      	bne.n	8002ed8 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002e94:	f023 0304 	bic.w	r3, r3, #4
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ea0:	4311      	orrs	r1, r2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002eac:	430a      	orrs	r2, r1
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	611a      	str	r2, [r3, #16]
 8002eba:	e015      	b.n	8002ee8 <HAL_ADC_Init+0x2fc>
 8002ebc:	20000020 	.word	0x20000020
 8002ec0:	053e2d63 	.word	0x053e2d63
 8002ec4:	50000100 	.word	0x50000100
 8002ec8:	50000400 	.word	0x50000400
 8002ecc:	50000300 	.word	0x50000300
 8002ed0:	50000700 	.word	0x50000700
 8002ed4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	691a      	ldr	r2, [r3, #16]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 0201 	bic.w	r2, r2, #1
 8002ee6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d10c      	bne.n	8002f0a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef6:	f023 010f 	bic.w	r1, r3, #15
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	1e5a      	subs	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	430a      	orrs	r2, r1
 8002f06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f08:	e007      	b.n	8002f1a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 020f 	bic.w	r2, r2, #15
 8002f18:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f1e:	f023 0303 	bic.w	r3, r3, #3
 8002f22:	f043 0201 	orr.w	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002f2a:	e007      	b.n	8002f3c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f30:	f043 0210 	orr.w	r2, r3, #16
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f3c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3724      	adds	r7, #36	@ 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd90      	pop	{r4, r7, pc}
 8002f46:	bf00      	nop

08002f48 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f5c:	d004      	beq.n	8002f68 <HAL_ADC_Start_DMA+0x20>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a57      	ldr	r2, [pc, #348]	@ (80030c0 <HAL_ADC_Start_DMA+0x178>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_ADC_Start_DMA+0x24>
 8002f68:	4b56      	ldr	r3, [pc, #344]	@ (80030c4 <HAL_ADC_Start_DMA+0x17c>)
 8002f6a:	e000      	b.n	8002f6e <HAL_ADC_Start_DMA+0x26>
 8002f6c:	4b56      	ldr	r3, [pc, #344]	@ (80030c8 <HAL_ADC_Start_DMA+0x180>)
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fd7e 	bl	8002a70 <LL_ADC_GetMultimode>
 8002f74:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fe0f 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f040 8094 	bne.w	80030b0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Start_DMA+0x4e>
 8002f92:	2302      	movs	r3, #2
 8002f94:	e08f      	b.n	80030b6 <HAL_ADC_Start_DMA+0x16e>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a4a      	ldr	r2, [pc, #296]	@ (80030cc <HAL_ADC_Start_DMA+0x184>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d008      	beq.n	8002fba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d005      	beq.n	8002fba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b05      	cmp	r3, #5
 8002fb2:	d002      	beq.n	8002fba <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	d173      	bne.n	80030a2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 fcd8 	bl	8003970 <ADC_Enable>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d166      	bne.n	8003098 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a37      	ldr	r2, [pc, #220]	@ (80030c0 <HAL_ADC_Start_DMA+0x178>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d002      	beq.n	8002fee <HAL_ADC_Start_DMA+0xa6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	e001      	b.n	8002ff2 <HAL_ADC_Start_DMA+0xaa>
 8002fee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d002      	beq.n	8003000 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d105      	bne.n	800300c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003004:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301c:	f023 0206 	bic.w	r2, r3, #6
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	661a      	str	r2, [r3, #96]	@ 0x60
 8003024:	e002      	b.n	800302c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <HAL_ADC_Start_DMA+0x188>)
 8003032:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	4a26      	ldr	r2, [pc, #152]	@ (80030d4 <HAL_ADC_Start_DMA+0x18c>)
 800303a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003040:	4a25      	ldr	r2, [pc, #148]	@ (80030d8 <HAL_ADC_Start_DMA+0x190>)
 8003042:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	221c      	movs	r2, #28
 800304a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0210 	orr.w	r2, r2, #16
 8003062:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	3340      	adds	r3, #64	@ 0x40
 800307e:	4619      	mov	r1, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f001 f988 	bl	8004398 <HAL_DMA_Start_IT>
 8003088:	4603      	mov	r3, r0
 800308a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fd70 	bl	8002b76 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003096:	e00d      	b.n	80030b4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80030a0:	e008      	b.n	80030b4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80030ae:	e001      	b.n	80030b4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
 80030b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	50000100 	.word	0x50000100
 80030c4:	50000300 	.word	0x50000300
 80030c8:	50000700 	.word	0x50000700
 80030cc:	50000400 	.word	0x50000400
 80030d0:	08003a9d 	.word	0x08003a9d
 80030d4:	08003b75 	.word	0x08003b75
 80030d8:	08003b91 	.word	0x08003b91

080030dc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0b6      	sub	sp, #216	@ 0xd8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <HAL_ADC_ConfigChannel+0x24>
 8003136:	2302      	movs	r3, #2
 8003138:	f000 bc04 	b.w	8003944 <HAL_ADC_ConfigChannel+0x82c>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4618      	mov	r0, r3
 800314a:	f7ff fd28 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	f040 83e8 	bne.w	8003926 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6818      	ldr	r0, [r3, #0]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	6859      	ldr	r1, [r3, #4]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	461a      	mov	r2, r3
 8003164:	f7ff fc09 	bl	800297a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fd16 	bl	8002b9e <LL_ADC_REG_IsConversionOngoing>
 8003172:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7ff fd22 	bl	8002bc4 <LL_ADC_INJ_IsConversionOngoing>
 8003180:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003188:	2b00      	cmp	r3, #0
 800318a:	f040 81d9 	bne.w	8003540 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800318e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003192:	2b00      	cmp	r3, #0
 8003194:	f040 81d4 	bne.w	8003540 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80031a0:	d10f      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2200      	movs	r2, #0
 80031ac:	4619      	mov	r1, r3
 80031ae:	f7ff fc10 	bl	80029d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff fbb7 	bl	800292e <LL_ADC_SetSamplingTimeCommonConfig>
 80031c0:	e00e      	b.n	80031e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6818      	ldr	r0, [r3, #0]
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	6819      	ldr	r1, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	461a      	mov	r2, r3
 80031d0:	f7ff fbff 	bl	80029d2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2100      	movs	r1, #0
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fba7 	bl	800292e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	695a      	ldr	r2, [r3, #20]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	08db      	lsrs	r3, r3, #3
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d022      	beq.n	8003248 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6818      	ldr	r0, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	6919      	ldr	r1, [r3, #16]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003212:	f7ff fb01 	bl	8002818 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6919      	ldr	r1, [r3, #16]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	461a      	mov	r2, r3
 8003224:	f7ff fb4d 	bl	80028c2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6818      	ldr	r0, [r3, #0]
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_ADC_ConfigChannel+0x126>
 8003238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800323c:	e000      	b.n	8003240 <HAL_ADC_ConfigChannel+0x128>
 800323e:	2300      	movs	r3, #0
 8003240:	461a      	mov	r2, r3
 8003242:	f7ff fb59 	bl	80028f8 <LL_ADC_SetOffsetSaturation>
 8003246:	e17b      	b.n	8003540 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fb06 	bl	8002860 <LL_ADC_GetOffsetChannel>
 8003254:	4603      	mov	r3, r0
 8003256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10a      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x15c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2100      	movs	r1, #0
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fafb 	bl	8002860 <LL_ADC_GetOffsetChannel>
 800326a:	4603      	mov	r3, r0
 800326c:	0e9b      	lsrs	r3, r3, #26
 800326e:	f003 021f 	and.w	r2, r3, #31
 8003272:	e01e      	b.n	80032b2 <HAL_ADC_ConfigChannel+0x19a>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff faf0 	bl	8002860 <LL_ADC_GetOffsetChannel>
 8003280:	4603      	mov	r3, r0
 8003282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800329a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032a2:	2320      	movs	r3, #32
 80032a4:	e004      	b.n	80032b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80032aa:	fab3 f383 	clz	r3, r3
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x1b2>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	0e9b      	lsrs	r3, r3, #26
 80032c4:	f003 031f 	and.w	r3, r3, #31
 80032c8:	e018      	b.n	80032fc <HAL_ADC_ConfigChannel+0x1e4>
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80032d6:	fa93 f3a3 	rbit	r3, r3
 80032da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80032de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80032e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80032e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80032ee:	2320      	movs	r3, #32
 80032f0:	e004      	b.n	80032fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80032f6:	fab3 f383 	clz	r3, r3
 80032fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d106      	bne.n	800330e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff fabf 	bl	800288c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2101      	movs	r1, #1
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff faa3 	bl	8002860 <LL_ADC_GetOffsetChannel>
 800331a:	4603      	mov	r3, r0
 800331c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10a      	bne.n	800333a <HAL_ADC_ConfigChannel+0x222>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2101      	movs	r1, #1
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff fa98 	bl	8002860 <LL_ADC_GetOffsetChannel>
 8003330:	4603      	mov	r3, r0
 8003332:	0e9b      	lsrs	r3, r3, #26
 8003334:	f003 021f 	and.w	r2, r3, #31
 8003338:	e01e      	b.n	8003378 <HAL_ADC_ConfigChannel+0x260>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fa8d 	bl	8002860 <LL_ADC_GetOffsetChannel>
 8003346:	4603      	mov	r3, r0
 8003348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003350:	fa93 f3a3 	rbit	r3, r3
 8003354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800335c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e004      	b.n	8003376 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800336c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x278>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	0e9b      	lsrs	r3, r3, #26
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	e018      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x2aa>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800339c:	fa93 f3a3 	rbit	r3, r3
 80033a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80033a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80033a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80033ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d101      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033b4:	2320      	movs	r3, #32
 80033b6:	e004      	b.n	80033c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80033b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033bc:	fab3 f383 	clz	r3, r3
 80033c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d106      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2200      	movs	r2, #0
 80033cc:	2101      	movs	r1, #1
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff fa5c 	bl	800288c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2102      	movs	r1, #2
 80033da:	4618      	mov	r0, r3
 80033dc:	f7ff fa40 	bl	8002860 <LL_ADC_GetOffsetChannel>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10a      	bne.n	8003400 <HAL_ADC_ConfigChannel+0x2e8>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2102      	movs	r1, #2
 80033f0:	4618      	mov	r0, r3
 80033f2:	f7ff fa35 	bl	8002860 <LL_ADC_GetOffsetChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	0e9b      	lsrs	r3, r3, #26
 80033fa:	f003 021f 	and.w	r2, r3, #31
 80033fe:	e01e      	b.n	800343e <HAL_ADC_ConfigChannel+0x326>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff fa2a 	bl	8002860 <LL_ADC_GetOffsetChannel>
 800340c:	4603      	mov	r3, r0
 800340e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003416:	fa93 f3a3 	rbit	r3, r3
 800341a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800341e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800342e:	2320      	movs	r3, #32
 8003430:	e004      	b.n	800343c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003436:	fab3 f383 	clz	r3, r3
 800343a:	b2db      	uxtb	r3, r3
 800343c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_ADC_ConfigChannel+0x33e>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	0e9b      	lsrs	r3, r3, #26
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	e016      	b.n	8003484 <HAL_ADC_ConfigChannel+0x36c>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800346a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800346e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003472:	2b00      	cmp	r3, #0
 8003474:	d101      	bne.n	800347a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003476:	2320      	movs	r3, #32
 8003478:	e004      	b.n	8003484 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800347a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800347e:	fab3 f383 	clz	r3, r3
 8003482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003484:	429a      	cmp	r2, r3
 8003486:	d106      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	2102      	movs	r1, #2
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff f9fb 	bl	800288c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2103      	movs	r1, #3
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff f9df 	bl	8002860 <LL_ADC_GetOffsetChannel>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10a      	bne.n	80034c2 <HAL_ADC_ConfigChannel+0x3aa>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2103      	movs	r1, #3
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff f9d4 	bl	8002860 <LL_ADC_GetOffsetChannel>
 80034b8:	4603      	mov	r3, r0
 80034ba:	0e9b      	lsrs	r3, r3, #26
 80034bc:	f003 021f 	and.w	r2, r3, #31
 80034c0:	e017      	b.n	80034f2 <HAL_ADC_ConfigChannel+0x3da>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2103      	movs	r1, #3
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7ff f9c9 	bl	8002860 <LL_ADC_GetOffsetChannel>
 80034ce:	4603      	mov	r3, r0
 80034d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034d4:	fa93 f3a3 	rbit	r3, r3
 80034d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80034da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80034de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034e4:	2320      	movs	r3, #32
 80034e6:	e003      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034ea:	fab3 f383 	clz	r3, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_ADC_ConfigChannel+0x3f2>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	0e9b      	lsrs	r3, r3, #26
 8003504:	f003 031f 	and.w	r3, r3, #31
 8003508:	e011      	b.n	800352e <HAL_ADC_ConfigChannel+0x416>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003512:	fa93 f3a3 	rbit	r3, r3
 8003516:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800351a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800351c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003522:	2320      	movs	r3, #32
 8003524:	e003      	b.n	800352e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003528:	fab3 f383 	clz	r3, r3
 800352c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800352e:	429a      	cmp	r2, r3
 8003530:	d106      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2200      	movs	r2, #0
 8003538:	2103      	movs	r1, #3
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff f9a6 	bl	800288c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fb03 	bl	8002b50 <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	f040 813d 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	461a      	mov	r2, r3
 8003560:	f7ff fa62 	bl	8002a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4aa2      	ldr	r2, [pc, #648]	@ (80037f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	f040 812e 	bne.w	80037cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10b      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x480>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	0e9b      	lsrs	r3, r3, #26
 8003586:	3301      	adds	r3, #1
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	2b09      	cmp	r3, #9
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	e019      	b.n	80035cc <HAL_ADC_ConfigChannel+0x4b4>
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80035a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80035a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80035aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f003 031f 	and.w	r3, r3, #31
 80035c2:	2b09      	cmp	r3, #9
 80035c4:	bf94      	ite	ls
 80035c6:	2301      	movls	r3, #1
 80035c8:	2300      	movhi	r3, #0
 80035ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d079      	beq.n	80036c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d107      	bne.n	80035ec <HAL_ADC_ConfigChannel+0x4d4>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	0e9b      	lsrs	r3, r3, #26
 80035e2:	3301      	adds	r3, #1
 80035e4:	069b      	lsls	r3, r3, #26
 80035e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80035ea:	e015      	b.n	8003618 <HAL_ADC_ConfigChannel+0x500>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f4:	fa93 f3a3 	rbit	r3, r3
 80035f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80035fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80035fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	2b00      	cmp	r3, #0
 8003602:	d101      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003604:	2320      	movs	r3, #32
 8003606:	e003      	b.n	8003610 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	3301      	adds	r3, #1
 8003612:	069b      	lsls	r3, r3, #26
 8003614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003620:	2b00      	cmp	r3, #0
 8003622:	d109      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x520>
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	0e9b      	lsrs	r3, r3, #26
 800362a:	3301      	adds	r3, #1
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2101      	movs	r1, #1
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	e017      	b.n	8003668 <HAL_ADC_ConfigChannel+0x550>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003640:	fa93 f3a3 	rbit	r3, r3
 8003644:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8003646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003648:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800364a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800364c:	2b00      	cmp	r3, #0
 800364e:	d101      	bne.n	8003654 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	e003      	b.n	800365c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	f003 031f 	and.w	r3, r3, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f303 	lsl.w	r3, r1, r3
 8003668:	ea42 0103 	orr.w	r1, r2, r3
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003674:	2b00      	cmp	r3, #0
 8003676:	d10a      	bne.n	800368e <HAL_ADC_ConfigChannel+0x576>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	0e9b      	lsrs	r3, r3, #26
 800367e:	3301      	adds	r3, #1
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4613      	mov	r3, r2
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	4413      	add	r3, r2
 800368a:	051b      	lsls	r3, r3, #20
 800368c:	e018      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x5a8>
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003696:	fa93 f3a3 	rbit	r3, r3
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80036a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036a6:	2320      	movs	r3, #32
 80036a8:	e003      	b.n	80036b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ac:	fab3 f383 	clz	r3, r3
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	3301      	adds	r3, #1
 80036b4:	f003 021f 	and.w	r2, r3, #31
 80036b8:	4613      	mov	r3, r2
 80036ba:	005b      	lsls	r3, r3, #1
 80036bc:	4413      	add	r3, r2
 80036be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c0:	430b      	orrs	r3, r1
 80036c2:	e07e      	b.n	80037c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d107      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x5c8>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	3301      	adds	r3, #1
 80036d8:	069b      	lsls	r3, r3, #26
 80036da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036de:	e015      	b.n	800370c <HAL_ADC_ConfigChannel+0x5f4>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80036ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	069b      	lsls	r3, r3, #26
 8003708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003714:	2b00      	cmp	r3, #0
 8003716:	d109      	bne.n	800372c <HAL_ADC_ConfigChannel+0x614>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	0e9b      	lsrs	r3, r3, #26
 800371e:	3301      	adds	r3, #1
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2101      	movs	r1, #1
 8003726:	fa01 f303 	lsl.w	r3, r1, r3
 800372a:	e017      	b.n	800375c <HAL_ADC_ConfigChannel+0x644>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003732:	6a3b      	ldr	r3, [r7, #32]
 8003734:	fa93 f3a3 	rbit	r3, r3
 8003738:	61fb      	str	r3, [r7, #28]
  return result;
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800373e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e003      	b.n	8003750 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	fab3 f383 	clz	r3, r3
 800374e:	b2db      	uxtb	r3, r3
 8003750:	3301      	adds	r3, #1
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f303 	lsl.w	r3, r1, r3
 800375c:	ea42 0103 	orr.w	r1, r2, r3
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x670>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	3301      	adds	r3, #1
 8003774:	f003 021f 	and.w	r2, r3, #31
 8003778:	4613      	mov	r3, r2
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	4413      	add	r3, r2
 800377e:	3b1e      	subs	r3, #30
 8003780:	051b      	lsls	r3, r3, #20
 8003782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003786:	e01b      	b.n	80037c0 <HAL_ADC_ConfigChannel+0x6a8>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	613b      	str	r3, [r7, #16]
  return result;
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f003 021f 	and.w	r2, r3, #31
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	3b1e      	subs	r3, #30
 80037ba:	051b      	lsls	r3, r3, #20
 80037bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c6:	4619      	mov	r1, r3
 80037c8:	f7ff f903 	bl	80029d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	4b09      	ldr	r3, [pc, #36]	@ (80037f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 80af 	beq.w	8003938 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037e2:	d004      	beq.n	80037ee <HAL_ADC_ConfigChannel+0x6d6>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a04      	ldr	r2, [pc, #16]	@ (80037fc <HAL_ADC_ConfigChannel+0x6e4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10a      	bne.n	8003804 <HAL_ADC_ConfigChannel+0x6ec>
 80037ee:	4b04      	ldr	r3, [pc, #16]	@ (8003800 <HAL_ADC_ConfigChannel+0x6e8>)
 80037f0:	e009      	b.n	8003806 <HAL_ADC_ConfigChannel+0x6ee>
 80037f2:	bf00      	nop
 80037f4:	407f0000 	.word	0x407f0000
 80037f8:	80080000 	.word	0x80080000
 80037fc:	50000100 	.word	0x50000100
 8003800:	50000300 	.word	0x50000300
 8003804:	4b51      	ldr	r3, [pc, #324]	@ (800394c <HAL_ADC_ConfigChannel+0x834>)
 8003806:	4618      	mov	r0, r3
 8003808:	f7fe fff8 	bl	80027fc <LL_ADC_GetCommonPathInternalCh>
 800380c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a4e      	ldr	r2, [pc, #312]	@ (8003950 <HAL_ADC_ConfigChannel+0x838>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d004      	beq.n	8003824 <HAL_ADC_ConfigChannel+0x70c>
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a4d      	ldr	r2, [pc, #308]	@ (8003954 <HAL_ADC_ConfigChannel+0x83c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d134      	bne.n	800388e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d12e      	bne.n	800388e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003838:	d17e      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003842:	d004      	beq.n	800384e <HAL_ADC_ConfigChannel+0x736>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a43      	ldr	r2, [pc, #268]	@ (8003958 <HAL_ADC_ConfigChannel+0x840>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d101      	bne.n	8003852 <HAL_ADC_ConfigChannel+0x73a>
 800384e:	4a43      	ldr	r2, [pc, #268]	@ (800395c <HAL_ADC_ConfigChannel+0x844>)
 8003850:	e000      	b.n	8003854 <HAL_ADC_ConfigChannel+0x73c>
 8003852:	4a3e      	ldr	r2, [pc, #248]	@ (800394c <HAL_ADC_ConfigChannel+0x834>)
 8003854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f7fe ffb9 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003864:	4b3e      	ldr	r3, [pc, #248]	@ (8003960 <HAL_ADC_ConfigChannel+0x848>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	099b      	lsrs	r3, r3, #6
 800386a:	4a3e      	ldr	r2, [pc, #248]	@ (8003964 <HAL_ADC_ConfigChannel+0x84c>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	4613      	mov	r3, r2
 8003876:	005b      	lsls	r3, r3, #1
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800387e:	e002      	b.n	8003886 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3b01      	subs	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1f9      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800388c:	e054      	b.n	8003938 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a35      	ldr	r2, [pc, #212]	@ (8003968 <HAL_ADC_ConfigChannel+0x850>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d120      	bne.n	80038da <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800389c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d11a      	bne.n	80038da <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038ac:	d144      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038b6:	d004      	beq.n	80038c2 <HAL_ADC_ConfigChannel+0x7aa>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a26      	ldr	r2, [pc, #152]	@ (8003958 <HAL_ADC_ConfigChannel+0x840>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d101      	bne.n	80038c6 <HAL_ADC_ConfigChannel+0x7ae>
 80038c2:	4a26      	ldr	r2, [pc, #152]	@ (800395c <HAL_ADC_ConfigChannel+0x844>)
 80038c4:	e000      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x7b0>
 80038c6:	4a21      	ldr	r2, [pc, #132]	@ (800394c <HAL_ADC_ConfigChannel+0x834>)
 80038c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d0:	4619      	mov	r1, r3
 80038d2:	4610      	mov	r0, r2
 80038d4:	f7fe ff7f 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038d8:	e02e      	b.n	8003938 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a23      	ldr	r2, [pc, #140]	@ (800396c <HAL_ADC_ConfigChannel+0x854>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d129      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d123      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <HAL_ADC_ConfigChannel+0x840>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01e      	beq.n	8003938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003902:	d004      	beq.n	800390e <HAL_ADC_ConfigChannel+0x7f6>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a13      	ldr	r2, [pc, #76]	@ (8003958 <HAL_ADC_ConfigChannel+0x840>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d101      	bne.n	8003912 <HAL_ADC_ConfigChannel+0x7fa>
 800390e:	4a13      	ldr	r2, [pc, #76]	@ (800395c <HAL_ADC_ConfigChannel+0x844>)
 8003910:	e000      	b.n	8003914 <HAL_ADC_ConfigChannel+0x7fc>
 8003912:	4a0e      	ldr	r2, [pc, #56]	@ (800394c <HAL_ADC_ConfigChannel+0x834>)
 8003914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003918:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800391c:	4619      	mov	r1, r3
 800391e:	4610      	mov	r0, r2
 8003920:	f7fe ff59 	bl	80027d6 <LL_ADC_SetCommonPathInternalCh>
 8003924:	e008      	b.n	8003938 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392a:	f043 0220 	orr.w	r2, r3, #32
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003940:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003944:	4618      	mov	r0, r3
 8003946:	37d8      	adds	r7, #216	@ 0xd8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	50000700 	.word	0x50000700
 8003950:	c3210000 	.word	0xc3210000
 8003954:	90c00010 	.word	0x90c00010
 8003958:	50000100 	.word	0x50000100
 800395c:	50000300 	.word	0x50000300
 8003960:	20000020 	.word	0x20000020
 8003964:	053e2d63 	.word	0x053e2d63
 8003968:	c7520000 	.word	0xc7520000
 800396c:	cb840000 	.word	0xcb840000

08003970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003978:	2300      	movs	r3, #0
 800397a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff f8e5 	bl	8002b50 <LL_ADC_IsEnabled>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d176      	bne.n	8003a7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	689a      	ldr	r2, [r3, #8]
 8003992:	4b3c      	ldr	r3, [pc, #240]	@ (8003a84 <ADC_Enable+0x114>)
 8003994:	4013      	ands	r3, r2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00d      	beq.n	80039b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399e:	f043 0210 	orr.w	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039aa:	f043 0201 	orr.w	r2, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e062      	b.n	8003a7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f7ff f8b4 	bl	8002b28 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c8:	d004      	beq.n	80039d4 <ADC_Enable+0x64>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2e      	ldr	r2, [pc, #184]	@ (8003a88 <ADC_Enable+0x118>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <ADC_Enable+0x68>
 80039d4:	4b2d      	ldr	r3, [pc, #180]	@ (8003a8c <ADC_Enable+0x11c>)
 80039d6:	e000      	b.n	80039da <ADC_Enable+0x6a>
 80039d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003a90 <ADC_Enable+0x120>)
 80039da:	4618      	mov	r0, r3
 80039dc:	f7fe ff0e 	bl	80027fc <LL_ADC_GetCommonPathInternalCh>
 80039e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80039e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d013      	beq.n	8003a12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ea:	4b2a      	ldr	r3, [pc, #168]	@ (8003a94 <ADC_Enable+0x124>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	4a29      	ldr	r2, [pc, #164]	@ (8003a98 <ADC_Enable+0x128>)
 80039f2:	fba2 2303 	umull	r2, r3, r2, r3
 80039f6:	099b      	lsrs	r3, r3, #6
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	4613      	mov	r3, r2
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a04:	e002      	b.n	8003a0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f9      	bne.n	8003a06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003a12:	f7fe fe9f 	bl	8002754 <HAL_GetTick>
 8003a16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a18:	e028      	b.n	8003a6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7ff f896 	bl	8002b50 <LL_ADC_IsEnabled>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d104      	bne.n	8003a34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7ff f87a 	bl	8002b28 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a34:	f7fe fe8e 	bl	8002754 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d914      	bls.n	8003a6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d00d      	beq.n	8003a6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a54:	f043 0210 	orr.w	r2, r3, #16
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a60:	f043 0201 	orr.w	r2, r3, #1
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e007      	b.n	8003a7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d1cf      	bne.n	8003a1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	8000003f 	.word	0x8000003f
 8003a88:	50000100 	.word	0x50000100
 8003a8c:	50000300 	.word	0x50000300
 8003a90:	50000700 	.word	0x50000700
 8003a94:	20000020 	.word	0x20000020
 8003a98:	053e2d63 	.word	0x053e2d63

08003a9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d14b      	bne.n	8003b4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0308 	and.w	r3, r3, #8
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d021      	beq.n	8003b14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe ff3d 	bl	8002954 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d032      	beq.n	8003b46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d12b      	bne.n	8003b46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d11f      	bne.n	8003b46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b12:	e018      	b.n	8003b46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f003 0302 	and.w	r3, r3, #2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d111      	bne.n	8003b46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b3e:	f043 0201 	orr.w	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff fac8 	bl	80030dc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b4c:	e00e      	b.n	8003b6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f003 0310 	and.w	r3, r3, #16
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003b5a:	68f8      	ldr	r0, [r7, #12]
 8003b5c:	f7ff fad2 	bl	8003104 <HAL_ADC_ErrorCallback>
}
 8003b60:	e004      	b.n	8003b6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4798      	blx	r3
}
 8003b6c:	bf00      	nop
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f7ff fab4 	bl	80030f0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bae:	f043 0204 	orr.w	r2, r3, #4
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff faa4 	bl	8003104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <LL_ADC_IsEnabled>:
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f003 0301 	and.w	r3, r3, #1
 8003bd4:	2b01      	cmp	r3, #1
 8003bd6:	d101      	bne.n	8003bdc <LL_ADC_IsEnabled+0x18>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <LL_ADC_IsEnabled+0x1a>
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_ADC_REG_IsConversionOngoing>:
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0304 	and.w	r3, r3, #4
 8003bfa:	2b04      	cmp	r3, #4
 8003bfc:	d101      	bne.n	8003c02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003c10:	b590      	push	{r4, r7, lr}
 8003c12:	b0a1      	sub	sp, #132	@ 0x84
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e0cb      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003c36:	2300      	movs	r3, #0
 8003c38:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c46:	d102      	bne.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c48:	4b61      	ldr	r3, [pc, #388]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	e001      	b.n	8003c52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10b      	bne.n	8003c70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c5c:	f043 0220 	orr.w	r2, r3, #32
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e0aa      	b.n	8003dc6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff ffb9 	bl	8003bea <LL_ADC_REG_IsConversionOngoing>
 8003c78:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff ffb3 	bl	8003bea <LL_ADC_REG_IsConversionOngoing>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f040 808c 	bne.w	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003c8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 8088 	bne.w	8003da4 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c9c:	d004      	beq.n	8003ca8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a4b      	ldr	r2, [pc, #300]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8003ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8003caa:	e000      	b.n	8003cae <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8003cac:	4b4a      	ldr	r3, [pc, #296]	@ (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8003cae:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d041      	beq.n	8003d3c <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003cb8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	6859      	ldr	r1, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003cca:	035b      	lsls	r3, r3, #13
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003cd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cdc:	d004      	beq.n	8003ce8 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d10f      	bne.n	8003d08 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8003ce8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003cec:	f7ff ff6a 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003cf0:	4604      	mov	r4, r0
 8003cf2:	4837      	ldr	r0, [pc, #220]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003cf4:	f7ff ff66 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	4323      	orrs	r3, r4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	bf0c      	ite	eq
 8003d00:	2301      	moveq	r3, #1
 8003d02:	2300      	movne	r3, #0
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	e008      	b.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8003d08:	4834      	ldr	r0, [pc, #208]	@ (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d0a:	f7ff ff5b 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf0c      	ite	eq
 8003d14:	2301      	moveq	r3, #1
 8003d16:	2300      	movne	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d04c      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d1e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d26:	f023 030f 	bic.w	r3, r3, #15
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	6811      	ldr	r1, [r2, #0]
 8003d2e:	683a      	ldr	r2, [r7, #0]
 8003d30:	6892      	ldr	r2, [r2, #8]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	431a      	orrs	r2, r3
 8003d36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d38:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003d3a:	e03d      	b.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003d3c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003d44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d46:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d50:	d004      	beq.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1e      	ldr	r2, [pc, #120]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d10f      	bne.n	8003d7c <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8003d5c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003d60:	f7ff ff30 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003d64:	4604      	mov	r4, r0
 8003d66:	481a      	ldr	r0, [pc, #104]	@ (8003dd0 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8003d68:	f7ff ff2c 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	4323      	orrs	r3, r4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e008      	b.n	8003d8e <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8003d7c:	4817      	ldr	r0, [pc, #92]	@ (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8003d7e:	f7ff ff21 	bl	8003bc4 <LL_ADC_IsEnabled>
 8003d82:	4603      	mov	r3, r0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d92:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003d9a:	f023 030f 	bic.w	r3, r3, #15
 8003d9e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003da0:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003da2:	e009      	b.n	8003db8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da8:	f043 0220 	orr.w	r2, r3, #32
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003db6:	e000      	b.n	8003dba <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003dc2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3784      	adds	r7, #132	@ 0x84
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	50000100 	.word	0x50000100
 8003dd4:	50000300 	.word	0x50000300
 8003dd8:	50000700 	.word	0x50000700
 8003ddc:	50000400 	.word	0x50000400

08003de0 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e023      	b.n	8003e3a <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d106      	bne.n	8003e0c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f7fe fa4a 	bl	80022a0 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2200      	movs	r2, #0
 8003e16:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3708      	adds	r7, #8
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
	...

08003e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	f003 0307 	and.w	r3, r3, #7
 8003e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e54:	4b0c      	ldr	r3, [pc, #48]	@ (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e60:	4013      	ands	r3, r2
 8003e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e76:	4a04      	ldr	r2, [pc, #16]	@ (8003e88 <__NVIC_SetPriorityGrouping+0x44>)
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	60d3      	str	r3, [r2, #12]
}
 8003e7c:	bf00      	nop
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	e000ed00 	.word	0xe000ed00

08003e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	0a1b      	lsrs	r3, r3, #8
 8003e96:	f003 0307 	and.w	r3, r3, #7
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	db0b      	blt.n	8003ed2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eba:	79fb      	ldrb	r3, [r7, #7]
 8003ebc:	f003 021f 	and.w	r2, r3, #31
 8003ec0:	4907      	ldr	r1, [pc, #28]	@ (8003ee0 <__NVIC_EnableIRQ+0x38>)
 8003ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2001      	movs	r0, #1
 8003eca:	fa00 f202 	lsl.w	r2, r0, r2
 8003ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ed2:	bf00      	nop
 8003ed4:	370c      	adds	r7, #12
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	e000e100 	.word	0xe000e100

08003ee4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	4603      	mov	r3, r0
 8003eec:	6039      	str	r1, [r7, #0]
 8003eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	db0a      	blt.n	8003f0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	490c      	ldr	r1, [pc, #48]	@ (8003f30 <__NVIC_SetPriority+0x4c>)
 8003efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f02:	0112      	lsls	r2, r2, #4
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	440b      	add	r3, r1
 8003f08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f0c:	e00a      	b.n	8003f24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4908      	ldr	r1, [pc, #32]	@ (8003f34 <__NVIC_SetPriority+0x50>)
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	3b04      	subs	r3, #4
 8003f1c:	0112      	lsls	r2, r2, #4
 8003f1e:	b2d2      	uxtb	r2, r2
 8003f20:	440b      	add	r3, r1
 8003f22:	761a      	strb	r2, [r3, #24]
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	e000e100 	.word	0xe000e100
 8003f34:	e000ed00 	.word	0xe000ed00

08003f38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b089      	sub	sp, #36	@ 0x24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 0307 	and.w	r3, r3, #7
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	f1c3 0307 	rsb	r3, r3, #7
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf28      	it	cs
 8003f56:	2304      	movcs	r3, #4
 8003f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	2b06      	cmp	r3, #6
 8003f60:	d902      	bls.n	8003f68 <NVIC_EncodePriority+0x30>
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	3b03      	subs	r3, #3
 8003f66:	e000      	b.n	8003f6a <NVIC_EncodePriority+0x32>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	43da      	mvns	r2, r3
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	401a      	ands	r2, r3
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f80:	f04f 31ff 	mov.w	r1, #4294967295
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	fa01 f303 	lsl.w	r3, r1, r3
 8003f8a:	43d9      	mvns	r1, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f90:	4313      	orrs	r3, r2
         );
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3724      	adds	r7, #36	@ 0x24
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb0:	d301      	bcc.n	8003fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e00f      	b.n	8003fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fbe:	210f      	movs	r1, #15
 8003fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fc4:	f7ff ff8e 	bl	8003ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fc8:	4b05      	ldr	r3, [pc, #20]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fce:	4b04      	ldr	r3, [pc, #16]	@ (8003fe0 <SysTick_Config+0x40>)
 8003fd0:	2207      	movs	r2, #7
 8003fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	e000e010 	.word	0xe000e010

08003fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f7ff ff29 	bl	8003e44 <__NVIC_SetPriorityGrouping>
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b086      	sub	sp, #24
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	4603      	mov	r3, r0
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004008:	f7ff ff40 	bl	8003e8c <__NVIC_GetPriorityGrouping>
 800400c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	6978      	ldr	r0, [r7, #20]
 8004014:	f7ff ff90 	bl	8003f38 <NVIC_EncodePriority>
 8004018:	4602      	mov	r2, r0
 800401a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800401e:	4611      	mov	r1, r2
 8004020:	4618      	mov	r0, r3
 8004022:	f7ff ff5f 	bl	8003ee4 <__NVIC_SetPriority>
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b082      	sub	sp, #8
 8004032:	af00      	add	r7, sp, #0
 8004034:	4603      	mov	r3, r0
 8004036:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff ff33 	bl	8003ea8 <__NVIC_EnableIRQ>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f7ff ffa4 	bl	8003fa0 <SysTick_Config>
 8004058:	4603      	mov	r3, r0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
	...

08004064 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e054      	b.n	8004120 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	7f5b      	ldrb	r3, [r3, #29]
 800407a:	b2db      	uxtb	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d105      	bne.n	800408c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7fe f92a 	bl	80022e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	791b      	ldrb	r3, [r3, #4]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10c      	bne.n	80040b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a22      	ldr	r2, [pc, #136]	@ (8004128 <HAL_CRC_Init+0xc4>)
 80040a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0218 	bic.w	r2, r2, #24
 80040b0:	609a      	str	r2, [r3, #8]
 80040b2:	e00c      	b.n	80040ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6899      	ldr	r1, [r3, #8]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	461a      	mov	r2, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f834 	bl	800412c <HAL_CRCEx_Polynomial_Set>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e028      	b.n	8004120 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	795b      	ldrb	r3, [r3, #5]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d105      	bne.n	80040e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f04f 32ff 	mov.w	r2, #4294967295
 80040de:	611a      	str	r2, [r3, #16]
 80040e0:	e004      	b.n	80040ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6912      	ldr	r2, [r2, #16]
 80040ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	699a      	ldr	r2, [r3, #24]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}
 8004128:	04c11db7 	.word	0x04c11db7

0800412c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800413c:	231f      	movs	r3, #31
 800413e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b00      	cmp	r3, #0
 8004148:	d102      	bne.n	8004150 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
 800414e:	e063      	b.n	8004218 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004150:	bf00      	nop
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1e5a      	subs	r2, r3, #1
 8004156:	613a      	str	r2, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <HAL_CRCEx_Polynomial_Set+0x44>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0f0      	beq.n	8004152 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b18      	cmp	r3, #24
 8004174:	d846      	bhi.n	8004204 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004176:	a201      	add	r2, pc, #4	@ (adr r2, 800417c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	0800420b 	.word	0x0800420b
 8004180:	08004205 	.word	0x08004205
 8004184:	08004205 	.word	0x08004205
 8004188:	08004205 	.word	0x08004205
 800418c:	08004205 	.word	0x08004205
 8004190:	08004205 	.word	0x08004205
 8004194:	08004205 	.word	0x08004205
 8004198:	08004205 	.word	0x08004205
 800419c:	080041f9 	.word	0x080041f9
 80041a0:	08004205 	.word	0x08004205
 80041a4:	08004205 	.word	0x08004205
 80041a8:	08004205 	.word	0x08004205
 80041ac:	08004205 	.word	0x08004205
 80041b0:	08004205 	.word	0x08004205
 80041b4:	08004205 	.word	0x08004205
 80041b8:	08004205 	.word	0x08004205
 80041bc:	080041ed 	.word	0x080041ed
 80041c0:	08004205 	.word	0x08004205
 80041c4:	08004205 	.word	0x08004205
 80041c8:	08004205 	.word	0x08004205
 80041cc:	08004205 	.word	0x08004205
 80041d0:	08004205 	.word	0x08004205
 80041d4:	08004205 	.word	0x08004205
 80041d8:	08004205 	.word	0x08004205
 80041dc:	080041e1 	.word	0x080041e1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	2b06      	cmp	r3, #6
 80041e4:	d913      	bls.n	800420e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041ea:	e010      	b.n	800420e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	2b07      	cmp	r3, #7
 80041f0:	d90f      	bls.n	8004212 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041f6:	e00c      	b.n	8004212 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b0f      	cmp	r3, #15
 80041fc:	d90b      	bls.n	8004216 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8004202:	e008      	b.n	8004216 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	75fb      	strb	r3, [r7, #23]
        break;
 8004208:	e006      	b.n	8004218 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8004216:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8004218:	7dfb      	ldrb	r3, [r7, #23]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d10d      	bne.n	800423a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68ba      	ldr	r2, [r7, #8]
 8004224:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f023 0118 	bic.w	r1, r3, #24
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	430a      	orrs	r2, r1
 8004238:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800423a:	7dfb      	ldrb	r3, [r7, #23]
}
 800423c:	4618      	mov	r0, r3
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e08d      	b.n	8004376 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <HAL_DMA_Init+0x138>)
 8004262:	429a      	cmp	r2, r3
 8004264:	d80f      	bhi.n	8004286 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b45      	ldr	r3, [pc, #276]	@ (8004384 <HAL_DMA_Init+0x13c>)
 800426e:	4413      	add	r3, r2
 8004270:	4a45      	ldr	r2, [pc, #276]	@ (8004388 <HAL_DMA_Init+0x140>)
 8004272:	fba2 2303 	umull	r2, r3, r2, r3
 8004276:	091b      	lsrs	r3, r3, #4
 8004278:	009a      	lsls	r2, r3, #2
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a42      	ldr	r2, [pc, #264]	@ (800438c <HAL_DMA_Init+0x144>)
 8004282:	641a      	str	r2, [r3, #64]	@ 0x40
 8004284:	e00e      	b.n	80042a4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	461a      	mov	r2, r3
 800428c:	4b40      	ldr	r3, [pc, #256]	@ (8004390 <HAL_DMA_Init+0x148>)
 800428e:	4413      	add	r3, r2
 8004290:	4a3d      	ldr	r2, [pc, #244]	@ (8004388 <HAL_DMA_Init+0x140>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	091b      	lsrs	r3, r3, #4
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a3c      	ldr	r2, [pc, #240]	@ (8004394 <HAL_DMA_Init+0x14c>)
 80042a2:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80042ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80042c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80042d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80042e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f9b6 	bl	8004668 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004304:	d102      	bne.n	800430c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004320:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d010      	beq.n	800434c <HAL_DMA_Init+0x104>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b04      	cmp	r3, #4
 8004330:	d80c      	bhi.n	800434c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 f9d6 	bl	80046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	2200      	movs	r2, #0
 800433e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004348:	605a      	str	r2, [r3, #4]
 800434a:	e008      	b.n	800435e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40020407 	.word	0x40020407
 8004384:	bffdfff8 	.word	0xbffdfff8
 8004388:	cccccccd 	.word	0xcccccccd
 800438c:	40020000 	.word	0x40020000
 8004390:	bffdfbf8 	.word	0xbffdfbf8
 8004394:	40020400 	.word	0x40020400

08004398 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
 80043a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043a6:	2300      	movs	r3, #0
 80043a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_DMA_Start_IT+0x20>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e066      	b.n	8004486 <HAL_DMA_Start_IT+0xee>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d155      	bne.n	8004478 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f022 0201 	bic.w	r2, r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f8fb 	bl	80045ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f042 020e 	orr.w	r2, r2, #14
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	e00f      	b.n	8004430 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0204 	bic.w	r2, r2, #4
 800441e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f042 020a 	orr.w	r2, r2, #10
 800442e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d007      	beq.n	800444e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800444c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004464:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f042 0201 	orr.w	r2, r2, #1
 8004474:	601a      	str	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004480:	2302      	movs	r3, #2
 8004482:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004484:	7dfb      	ldrb	r3, [r7, #23]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	f003 031f 	and.w	r3, r3, #31
 80044ae:	2204      	movs	r2, #4
 80044b0:	409a      	lsls	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4013      	ands	r3, r2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d026      	beq.n	8004508 <HAL_DMA_IRQHandler+0x7a>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d021      	beq.n	8004508 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0320 	and.w	r3, r3, #32
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d107      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0204 	bic.w	r2, r2, #4
 80044e0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f003 021f 	and.w	r2, r3, #31
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2104      	movs	r1, #4
 80044f0:	fa01 f202 	lsl.w	r2, r1, r2
 80044f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d071      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004506:	e06c      	b.n	80045e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450c:	f003 031f 	and.w	r3, r3, #31
 8004510:	2202      	movs	r2, #2
 8004512:	409a      	lsls	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d02e      	beq.n	800457a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d029      	beq.n	800457a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 020a 	bic.w	r2, r2, #10
 8004542:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004550:	f003 021f 	and.w	r2, r3, #31
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004558:	2102      	movs	r1, #2
 800455a:	fa01 f202 	lsl.w	r2, r1, r2
 800455e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	2b00      	cmp	r3, #0
 800456e:	d038      	beq.n	80045e2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004578:	e033      	b.n	80045e2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800457e:	f003 031f 	and.w	r3, r3, #31
 8004582:	2208      	movs	r2, #8
 8004584:	409a      	lsls	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4013      	ands	r3, r2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d02a      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d025      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f022 020e 	bic.w	r2, r2, #14
 80045a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	f003 021f 	and.w	r2, r3, #31
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045b4:	2101      	movs	r1, #1
 80045b6:	fa01 f202 	lsl.w	r2, r1, r2
 80045ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d004      	beq.n	80045e4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80045e2:	bf00      	nop
 80045e4:	bf00      	nop
}
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004602:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	2b00      	cmp	r3, #0
 800460a:	d004      	beq.n	8004616 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004614:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461a:	f003 021f 	and.w	r2, r3, #31
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2101      	movs	r1, #1
 8004624:	fa01 f202 	lsl.w	r2, r1, r2
 8004628:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b10      	cmp	r3, #16
 8004638:	d108      	bne.n	800464c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68ba      	ldr	r2, [r7, #8]
 8004648:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800464a:	e007      	b.n	800465c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]
}
 800465c:	bf00      	nop
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004666:	4770      	bx	lr

08004668 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	461a      	mov	r2, r3
 8004676:	4b16      	ldr	r3, [pc, #88]	@ (80046d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004678:	429a      	cmp	r2, r3
 800467a:	d802      	bhi.n	8004682 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800467c:	4b15      	ldr	r3, [pc, #84]	@ (80046d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800467e:	617b      	str	r3, [r7, #20]
 8004680:	e001      	b.n	8004686 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004682:	4b15      	ldr	r3, [pc, #84]	@ (80046d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004684:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b2db      	uxtb	r3, r3
 8004690:	3b08      	subs	r3, #8
 8004692:	4a12      	ldr	r2, [pc, #72]	@ (80046dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004694:	fba2 2303 	umull	r2, r3, r2, r3
 8004698:	091b      	lsrs	r3, r3, #4
 800469a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	009a      	lsls	r2, r3, #2
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	4413      	add	r3, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a0b      	ldr	r2, [pc, #44]	@ (80046e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80046b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	2201      	movs	r2, #1
 80046bc:	409a      	lsls	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80046c2:	bf00      	nop
 80046c4:	371c      	adds	r7, #28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr
 80046ce:	bf00      	nop
 80046d0:	40020407 	.word	0x40020407
 80046d4:	40020800 	.word	0x40020800
 80046d8:	40020820 	.word	0x40020820
 80046dc:	cccccccd 	.word	0xcccccccd
 80046e0:	40020880 	.word	0x40020880

080046e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b085      	sub	sp, #20
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80046f8:	4413      	add	r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a08      	ldr	r2, [pc, #32]	@ (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004706:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	3b01      	subs	r3, #1
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	2201      	movs	r2, #1
 8004712:	409a      	lsls	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004718:	bf00      	nop
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	1000823f 	.word	0x1000823f
 8004728:	40020940 	.word	0x40020940

0800472c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e147      	b.n	80049ce <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fd fde4 	bl	8002320 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 0210 	bic.w	r2, r2, #16
 8004766:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004768:	f7fd fff4 	bl	8002754 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800476e:	e012      	b.n	8004796 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004770:	f7fd fff0 	bl	8002754 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b0a      	cmp	r3, #10
 800477c:	d90b      	bls.n	8004796 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004782:	f043 0201 	orr.w	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e11b      	b.n	80049ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b08      	cmp	r3, #8
 80047a2:	d0e5      	beq.n	8004770 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699a      	ldr	r2, [r3, #24]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f042 0201 	orr.w	r2, r2, #1
 80047b2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047b4:	f7fd ffce 	bl	8002754 <HAL_GetTick>
 80047b8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047ba:	e012      	b.n	80047e2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80047bc:	f7fd ffca 	bl	8002754 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b0a      	cmp	r3, #10
 80047c8:	d90b      	bls.n	80047e2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047ce:	f043 0201 	orr.w	r2, r3, #1
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2203      	movs	r2, #3
 80047da:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e0f5      	b.n	80049ce <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0301 	and.w	r3, r3, #1
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d0e5      	beq.n	80047bc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	699a      	ldr	r2, [r3, #24]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0202 	orr.w	r2, r2, #2
 80047fe:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a74      	ldr	r2, [pc, #464]	@ (80049d8 <HAL_FDCAN_Init+0x2ac>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d103      	bne.n	8004812 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800480a:	4a74      	ldr	r2, [pc, #464]	@ (80049dc <HAL_FDCAN_Init+0x2b0>)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	7c1b      	ldrb	r3, [r3, #16]
 8004816:	2b01      	cmp	r3, #1
 8004818:	d108      	bne.n	800482c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	699a      	ldr	r2, [r3, #24]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004828:	619a      	str	r2, [r3, #24]
 800482a:	e007      	b.n	800483c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800483a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7c5b      	ldrb	r3, [r3, #17]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d108      	bne.n	8004856 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	699a      	ldr	r2, [r3, #24]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004852:	619a      	str	r2, [r3, #24]
 8004854:	e007      	b.n	8004866 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699a      	ldr	r2, [r3, #24]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004864:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7c9b      	ldrb	r3, [r3, #18]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d108      	bne.n	8004880 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699a      	ldr	r2, [r3, #24]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800487c:	619a      	str	r2, [r3, #24]
 800487e:	e007      	b.n	8004890 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800488e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	699a      	ldr	r2, [r3, #24]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80048b4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	691a      	ldr	r2, [r3, #16]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0210 	bic.w	r2, r2, #16
 80048c4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	68db      	ldr	r3, [r3, #12]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d108      	bne.n	80048e0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	699a      	ldr	r2, [r3, #24]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f042 0204 	orr.w	r2, r2, #4
 80048dc:	619a      	str	r2, [r3, #24]
 80048de:	e02c      	b.n	800493a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d028      	beq.n	800493a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d01c      	beq.n	800492a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	699a      	ldr	r2, [r3, #24]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80048fe:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691a      	ldr	r2, [r3, #16]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0210 	orr.w	r2, r2, #16
 800490e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d110      	bne.n	800493a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699a      	ldr	r2, [r3, #24]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0220 	orr.w	r2, r2, #32
 8004926:	619a      	str	r2, [r3, #24]
 8004928:	e007      	b.n	800493a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f042 0220 	orr.w	r2, r2, #32
 8004938:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	3b01      	subs	r3, #1
 8004940:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	3b01      	subs	r3, #1
 8004948:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800494a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004952:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	3b01      	subs	r3, #1
 800495c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004962:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004964:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800496e:	d115      	bne.n	800499c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004974:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	3b01      	subs	r3, #1
 800497c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800497e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	3b01      	subs	r3, #1
 8004986:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004988:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	3b01      	subs	r3, #1
 8004992:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004998:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800499a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f9ae 	bl	8004d14 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3710      	adds	r7, #16
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	40006400 	.word	0x40006400
 80049dc:	40006500 	.word	0x40006500

080049e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08c      	sub	sp, #48	@ 0x30
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ee:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049fc:	4013      	ands	r3, r2
 80049fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a14:	4013      	ands	r3, r2
 8004a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a22:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a36:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8004a3a:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a42:	6a3a      	ldr	r2, [r7, #32]
 8004a44:	4013      	ands	r3, r2
 8004a46:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a4e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8004a52:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a66:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a6e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d00b      	beq.n	8004a92 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d006      	beq.n	8004a92 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2240      	movs	r2, #64	@ 0x40
 8004a8a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 f921 	bl	8004cd4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d019      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8004a9c:	69bb      	ldr	r3, [r7, #24]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d014      	beq.n	8004ad0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004aae:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	4013      	ands	r3, r2
 8004abc:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004ac6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004ac8:	6939      	ldr	r1, [r7, #16]
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 f8e3 	bl	8004c96 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004adc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004ade:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f8a2 	bl	8004c2a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d007      	beq.n	8004afc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004af2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004af4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f8a2 	bl	8004c40 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d007      	beq.n	8004b12 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b08:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004b0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f8a2 	bl	8004c56 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00c      	beq.n	8004b36 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8004b1c:	69bb      	ldr	r3, [r7, #24]
 8004b1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d007      	beq.n	8004b36 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b2e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f89b 	bl	8004c6c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d018      	beq.n	8004b72 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d013      	beq.n	8004b72 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8004b52:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2280      	movs	r2, #128	@ 0x80
 8004b68:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004b6a:	68f9      	ldr	r1, [r7, #12]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 f887 	bl	8004c80 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00c      	beq.n	8004b96 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d007      	beq.n	8004b96 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004b8e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f88b 	bl	8004cac <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00c      	beq.n	8004bba <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004bb2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f883 	bl	8004cc0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00f      	beq.n	8004be4 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004bd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bdc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004be4:	69fb      	ldr	r3, [r7, #28]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d007      	beq.n	8004bfa <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69fa      	ldr	r2, [r7, #28]
 8004bf0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004bf2:	69f9      	ldr	r1, [r7, #28]
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f881 	bl	8004cfc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d009      	beq.n	8004c14 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6a3a      	ldr	r2, [r7, #32]
 8004c06:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004c0c:	6a3b      	ldr	r3, [r7, #32]
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f863 	bl	8004ce8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004c22:	bf00      	nop
 8004c24:	3730      	adds	r7, #48	@ 0x30
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004c4a:	bf00      	nop
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004c74:	bf00      	nop
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8004dd0 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8004d1e:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a2b      	ldr	r2, [pc, #172]	@ (8004dd4 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d103      	bne.n	8004d32 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004d30:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68ba      	ldr	r2, [r7, #8]
 8004d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d40:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d48:	041a      	lsls	r2, r3, #16
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d66:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d6e:	061a      	lsls	r2, r3, #24
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	60fb      	str	r3, [r7, #12]
 8004da6:	e005      	b.n	8004db4 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3304      	adds	r3, #4
 8004db2:	60fb      	str	r3, [r7, #12]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d3f3      	bcc.n	8004da8 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	4000a400 	.word	0x4000a400
 8004dd4:	40006800 	.word	0x40006800

08004dd8 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d101      	bne.n	8004dea <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e033      	b.n	8004e52 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fd faf0 	bl	80023e4 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f854 	bl	8004eb8 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 f822 	bl	8004e5a <FMAC_Reset>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d10c      	bne.n	8004e36 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e20:	f043 0210 	orr.w	r2, r3, #16
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	22a0      	movs	r2, #160	@ 0xa0
 8004e2c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	73fb      	strb	r3, [r7, #15]
 8004e34:	e008      	b.n	8004e48 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8004e44:	2300      	movs	r3, #0
 8004e46:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e62:	f7fd fc77 	bl	8002754 <HAL_GetTick>
 8004e66:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691a      	ldr	r2, [r3, #16]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e76:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004e78:	e00f      	b.n	8004e9a <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8004e7a:	f7fd fc6b 	bl	8002754 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004e88:	d907      	bls.n	8004e9a <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e00a      	b.n	8004eb0 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e8      	bne.n	8004e7a <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3710      	adds	r7, #16
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f807 	bl	8004ed4 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f81b 	bl	8004f02 <FMAC_ResetOutputStateAndDataPointers>
}
 8004ecc:	bf00      	nop
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8004ef6:	bf00      	nop
 8004ef8:	370c      	adds	r7, #12
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b083      	sub	sp, #12
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004f3e:	e15a      	b.n	80051f6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	2101      	movs	r1, #1
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 814c 	beq.w	80051f0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	f003 0303 	and.w	r3, r3, #3
 8004f60:	2b01      	cmp	r3, #1
 8004f62:	d005      	beq.n	8004f70 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d130      	bne.n	8004fd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	2203      	movs	r2, #3
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	43db      	mvns	r3, r3
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	4013      	ands	r3, r2
 8004f86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	005b      	lsls	r3, r3, #1
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	091b      	lsrs	r3, r3, #4
 8004fbc:	f003 0201 	and.w	r2, r3, #1
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc6:	693a      	ldr	r2, [r7, #16]
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 0303 	and.w	r3, r3, #3
 8004fda:	2b03      	cmp	r3, #3
 8004fdc:	d017      	beq.n	800500e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	005b      	lsls	r3, r3, #1
 8004fe8:	2203      	movs	r2, #3
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	4313      	orrs	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d123      	bne.n	8005062 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	08da      	lsrs	r2, r3, #3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	3208      	adds	r2, #8
 8005022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005026:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4013      	ands	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	691a      	ldr	r2, [r3, #16]
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	08da      	lsrs	r2, r3, #3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3208      	adds	r2, #8
 800505c:	6939      	ldr	r1, [r7, #16]
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	2203      	movs	r2, #3
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	693a      	ldr	r2, [r7, #16]
 8005076:	4013      	ands	r3, r2
 8005078:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	f003 0203 	and.w	r2, r3, #3
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	4313      	orrs	r3, r2
 800508e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	693a      	ldr	r2, [r7, #16]
 8005094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80a6 	beq.w	80051f0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050a4:	4b5b      	ldr	r3, [pc, #364]	@ (8005214 <HAL_GPIO_Init+0x2e4>)
 80050a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050a8:	4a5a      	ldr	r2, [pc, #360]	@ (8005214 <HAL_GPIO_Init+0x2e4>)
 80050aa:	f043 0301 	orr.w	r3, r3, #1
 80050ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80050b0:	4b58      	ldr	r3, [pc, #352]	@ (8005214 <HAL_GPIO_Init+0x2e4>)
 80050b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80050bc:	4a56      	ldr	r2, [pc, #344]	@ (8005218 <HAL_GPIO_Init+0x2e8>)
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	089b      	lsrs	r3, r3, #2
 80050c2:	3302      	adds	r3, #2
 80050c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	220f      	movs	r2, #15
 80050d4:	fa02 f303 	lsl.w	r3, r2, r3
 80050d8:	43db      	mvns	r3, r3
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	4013      	ands	r3, r2
 80050de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80050e6:	d01f      	beq.n	8005128 <HAL_GPIO_Init+0x1f8>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a4c      	ldr	r2, [pc, #304]	@ (800521c <HAL_GPIO_Init+0x2ec>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d019      	beq.n	8005124 <HAL_GPIO_Init+0x1f4>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a4b      	ldr	r2, [pc, #300]	@ (8005220 <HAL_GPIO_Init+0x2f0>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d013      	beq.n	8005120 <HAL_GPIO_Init+0x1f0>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005224 <HAL_GPIO_Init+0x2f4>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d00d      	beq.n	800511c <HAL_GPIO_Init+0x1ec>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4a49      	ldr	r2, [pc, #292]	@ (8005228 <HAL_GPIO_Init+0x2f8>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d007      	beq.n	8005118 <HAL_GPIO_Init+0x1e8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	4a48      	ldr	r2, [pc, #288]	@ (800522c <HAL_GPIO_Init+0x2fc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d101      	bne.n	8005114 <HAL_GPIO_Init+0x1e4>
 8005110:	2305      	movs	r3, #5
 8005112:	e00a      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 8005114:	2306      	movs	r3, #6
 8005116:	e008      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 8005118:	2304      	movs	r3, #4
 800511a:	e006      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 800511c:	2303      	movs	r3, #3
 800511e:	e004      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 8005120:	2302      	movs	r3, #2
 8005122:	e002      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 8005124:	2301      	movs	r3, #1
 8005126:	e000      	b.n	800512a <HAL_GPIO_Init+0x1fa>
 8005128:	2300      	movs	r3, #0
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	f002 0203 	and.w	r2, r2, #3
 8005130:	0092      	lsls	r2, r2, #2
 8005132:	4093      	lsls	r3, r2
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800513a:	4937      	ldr	r1, [pc, #220]	@ (8005218 <HAL_GPIO_Init+0x2e8>)
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	089b      	lsrs	r3, r3, #2
 8005140:	3302      	adds	r3, #2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005148:	4b39      	ldr	r3, [pc, #228]	@ (8005230 <HAL_GPIO_Init+0x300>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	43db      	mvns	r3, r3
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4013      	ands	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800516c:	4a30      	ldr	r2, [pc, #192]	@ (8005230 <HAL_GPIO_Init+0x300>)
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005172:	4b2f      	ldr	r3, [pc, #188]	@ (8005230 <HAL_GPIO_Init+0x300>)
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	43db      	mvns	r3, r3
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	4013      	ands	r3, r2
 8005180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d003      	beq.n	8005196 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005196:	4a26      	ldr	r2, [pc, #152]	@ (8005230 <HAL_GPIO_Init+0x300>)
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800519c:	4b24      	ldr	r3, [pc, #144]	@ (8005230 <HAL_GPIO_Init+0x300>)
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	43db      	mvns	r3, r3
 80051a6:	693a      	ldr	r2, [r7, #16]
 80051a8:	4013      	ands	r3, r2
 80051aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80051c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005230 <HAL_GPIO_Init+0x300>)
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80051c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005230 <HAL_GPIO_Init+0x300>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	43db      	mvns	r3, r3
 80051d0:	693a      	ldr	r2, [r7, #16]
 80051d2:	4013      	ands	r3, r2
 80051d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80051ea:	4a11      	ldr	r2, [pc, #68]	@ (8005230 <HAL_GPIO_Init+0x300>)
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3301      	adds	r3, #1
 80051f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	f47f ae9d 	bne.w	8004f40 <HAL_GPIO_Init+0x10>
  }
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	371c      	adds	r7, #28
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	40021000 	.word	0x40021000
 8005218:	40010000 	.word	0x40010000
 800521c:	48000400 	.word	0x48000400
 8005220:	48000800 	.word	0x48000800
 8005224:	48000c00 	.word	0x48000c00
 8005228:	48001000 	.word	0x48001000
 800522c:	48001400 	.word	0x48001400
 8005230:	40010400 	.word	0x40010400

08005234 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	460b      	mov	r3, r1
 800523e:	807b      	strh	r3, [r7, #2]
 8005240:	4613      	mov	r3, r2
 8005242:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005244:	787b      	ldrb	r3, [r7, #1]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800524a:	887a      	ldrh	r2, [r7, #2]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005250:	e002      	b.n	8005258 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005252:	887a      	ldrh	r2, [r7, #2]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d141      	bne.n	80052f6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005272:	4b4b      	ldr	r3, [pc, #300]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800527a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800527e:	d131      	bne.n	80052e4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005280:	4b47      	ldr	r3, [pc, #284]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005286:	4a46      	ldr	r2, [pc, #280]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800528c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005290:	4b43      	ldr	r3, [pc, #268]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005298:	4a41      	ldr	r2, [pc, #260]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800529e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052a0:	4b40      	ldr	r3, [pc, #256]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2232      	movs	r2, #50	@ 0x32
 80052a6:	fb02 f303 	mul.w	r3, r2, r3
 80052aa:	4a3f      	ldr	r2, [pc, #252]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80052ac:	fba2 2303 	umull	r2, r3, r2, r3
 80052b0:	0c9b      	lsrs	r3, r3, #18
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052b6:	e002      	b.n	80052be <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3b01      	subs	r3, #1
 80052bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80052be:	4b38      	ldr	r3, [pc, #224]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052ca:	d102      	bne.n	80052d2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f2      	bne.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052d2:	4b33      	ldr	r3, [pc, #204]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052de:	d158      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e057      	b.n	8005394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e4:	4b2e      	ldr	r3, [pc, #184]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052ea:	4a2d      	ldr	r2, [pc, #180]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80052f4:	e04d      	b.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052fc:	d141      	bne.n	8005382 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052fe:	4b28      	ldr	r3, [pc, #160]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800530a:	d131      	bne.n	8005370 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800530c:	4b24      	ldr	r3, [pc, #144]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	4a23      	ldr	r2, [pc, #140]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005318:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800531c:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005324:	4a1e      	ldr	r2, [pc, #120]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005326:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800532a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2232      	movs	r2, #50	@ 0x32
 8005332:	fb02 f303 	mul.w	r3, r2, r3
 8005336:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005338:	fba2 2303 	umull	r2, r3, r2, r3
 800533c:	0c9b      	lsrs	r3, r3, #18
 800533e:	3301      	adds	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005342:	e002      	b.n	800534a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800534a:	4b15      	ldr	r3, [pc, #84]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005352:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005356:	d102      	bne.n	800535e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d1f2      	bne.n	8005344 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800535e:	4b10      	ldr	r3, [pc, #64]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005366:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800536a:	d112      	bne.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e011      	b.n	8005394 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005376:	4a0a      	ldr	r2, [pc, #40]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800537c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005380:	e007      	b.n	8005392 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005382:	4b07      	ldr	r3, [pc, #28]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800538a:	4a05      	ldr	r2, [pc, #20]	@ (80053a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005390:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	40007000 	.word	0x40007000
 80053a4:	20000020 	.word	0x20000020
 80053a8:	431bde83 	.word	0x431bde83

080053ac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80053ac:	b480      	push	{r7}
 80053ae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a04      	ldr	r2, [pc, #16]	@ (80053c8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80053b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80053ba:	6093      	str	r3, [r2, #8]
}
 80053bc:	bf00      	nop
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	40007000 	.word	0x40007000

080053cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b088      	sub	sp, #32
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d101      	bne.n	80053de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	e2fe      	b.n	80059dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d075      	beq.n	80054d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053ea:	4b97      	ldr	r3, [pc, #604]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f003 030c 	and.w	r3, r3, #12
 80053f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053f4:	4b94      	ldr	r3, [pc, #592]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b0c      	cmp	r3, #12
 8005402:	d102      	bne.n	800540a <HAL_RCC_OscConfig+0x3e>
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b03      	cmp	r3, #3
 8005408:	d002      	beq.n	8005410 <HAL_RCC_OscConfig+0x44>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b08      	cmp	r3, #8
 800540e:	d10b      	bne.n	8005428 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005410:	4b8d      	ldr	r3, [pc, #564]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005418:	2b00      	cmp	r3, #0
 800541a:	d05b      	beq.n	80054d4 <HAL_RCC_OscConfig+0x108>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d157      	bne.n	80054d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e2d9      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	d106      	bne.n	8005440 <HAL_RCC_OscConfig+0x74>
 8005432:	4b85      	ldr	r3, [pc, #532]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a84      	ldr	r2, [pc, #528]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e01d      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005448:	d10c      	bne.n	8005464 <HAL_RCC_OscConfig+0x98>
 800544a:	4b7f      	ldr	r3, [pc, #508]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a7e      	ldr	r2, [pc, #504]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005450:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005454:	6013      	str	r3, [r2, #0]
 8005456:	4b7c      	ldr	r3, [pc, #496]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a7b      	ldr	r2, [pc, #492]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e00b      	b.n	800547c <HAL_RCC_OscConfig+0xb0>
 8005464:	4b78      	ldr	r3, [pc, #480]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a77      	ldr	r2, [pc, #476]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800546a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	4b75      	ldr	r3, [pc, #468]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a74      	ldr	r2, [pc, #464]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005476:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800547a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d013      	beq.n	80054ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd f966 	bl	8002754 <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd f962 	bl	8002754 <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	@ 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e29e      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800549e:	4b6a      	ldr	r3, [pc, #424]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0f0      	beq.n	800548c <HAL_RCC_OscConfig+0xc0>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ac:	f7fd f952 	bl	8002754 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054b2:	e008      	b.n	80054c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054b4:	f7fd f94e 	bl	8002754 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	2b64      	cmp	r3, #100	@ 0x64
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e28a      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80054c6:	4b60      	ldr	r3, [pc, #384]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d1f0      	bne.n	80054b4 <HAL_RCC_OscConfig+0xe8>
 80054d2:	e000      	b.n	80054d6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d075      	beq.n	80055ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054e2:	4b59      	ldr	r3, [pc, #356]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 030c 	and.w	r3, r3, #12
 80054ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054ec:	4b56      	ldr	r3, [pc, #344]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	2b0c      	cmp	r3, #12
 80054fa:	d102      	bne.n	8005502 <HAL_RCC_OscConfig+0x136>
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d002      	beq.n	8005508 <HAL_RCC_OscConfig+0x13c>
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	2b04      	cmp	r3, #4
 8005506:	d11f      	bne.n	8005548 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005508:	4b4f      	ldr	r3, [pc, #316]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d005      	beq.n	8005520 <HAL_RCC_OscConfig+0x154>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d101      	bne.n	8005520 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e25d      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005520:	4b49      	ldr	r3, [pc, #292]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691b      	ldr	r3, [r3, #16]
 800552c:	061b      	lsls	r3, r3, #24
 800552e:	4946      	ldr	r1, [pc, #280]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005530:	4313      	orrs	r3, r2
 8005532:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005534:	4b45      	ldr	r3, [pc, #276]	@ (800564c <HAL_RCC_OscConfig+0x280>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4618      	mov	r0, r3
 800553a:	f7fd f8bf 	bl	80026bc <HAL_InitTick>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d043      	beq.n	80055cc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e249      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d023      	beq.n	8005598 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b3d      	ldr	r3, [pc, #244]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a3c      	ldr	r2, [pc, #240]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005556:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800555a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd f8fa 	bl	8002754 <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005564:	f7fd f8f6 	bl	8002754 <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e232      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005576:	4b34      	ldr	r3, [pc, #208]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0f0      	beq.n	8005564 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005582:	4b31      	ldr	r3, [pc, #196]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	492d      	ldr	r1, [pc, #180]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005592:	4313      	orrs	r3, r2
 8005594:	604b      	str	r3, [r1, #4]
 8005596:	e01a      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005598:	4b2b      	ldr	r3, [pc, #172]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a2a      	ldr	r2, [pc, #168]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800559e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a4:	f7fd f8d6 	bl	8002754 <HAL_GetTick>
 80055a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055aa:	e008      	b.n	80055be <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055ac:	f7fd f8d2 	bl	8002754 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d901      	bls.n	80055be <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80055ba:	2303      	movs	r3, #3
 80055bc:	e20e      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055be:	4b22      	ldr	r3, [pc, #136]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f0      	bne.n	80055ac <HAL_RCC_OscConfig+0x1e0>
 80055ca:	e000      	b.n	80055ce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d041      	beq.n	800565e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d01c      	beq.n	800561c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b19      	ldr	r3, [pc, #100]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80055e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055e8:	4a17      	ldr	r2, [pc, #92]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 80055ea:	f043 0301 	orr.w	r3, r3, #1
 80055ee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f2:	f7fd f8af 	bl	8002754 <HAL_GetTick>
 80055f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055f8:	e008      	b.n	800560c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055fa:	f7fd f8ab 	bl	8002754 <HAL_GetTick>
 80055fe:	4602      	mov	r2, r0
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	2b02      	cmp	r3, #2
 8005606:	d901      	bls.n	800560c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e1e7      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800560c:	4b0e      	ldr	r3, [pc, #56]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800560e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d0ef      	beq.n	80055fa <HAL_RCC_OscConfig+0x22e>
 800561a:	e020      	b.n	800565e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 800561e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005622:	4a09      	ldr	r2, [pc, #36]	@ (8005648 <HAL_RCC_OscConfig+0x27c>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562c:	f7fd f892 	bl	8002754 <HAL_GetTick>
 8005630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005632:	e00d      	b.n	8005650 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005634:	f7fd f88e 	bl	8002754 <HAL_GetTick>
 8005638:	4602      	mov	r2, r0
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	2b02      	cmp	r3, #2
 8005640:	d906      	bls.n	8005650 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	e1ca      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000
 800564c:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005650:	4b8c      	ldr	r3, [pc, #560]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1ea      	bne.n	8005634 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0304 	and.w	r3, r3, #4
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80a6 	beq.w	80057b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005670:	4b84      	ldr	r3, [pc, #528]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <HAL_RCC_OscConfig+0x2b4>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_RCC_OscConfig+0x2b6>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d00d      	beq.n	80056a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005686:	4b7f      	ldr	r3, [pc, #508]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800568a:	4a7e      	ldr	r2, [pc, #504]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005690:	6593      	str	r3, [r2, #88]	@ 0x58
 8005692:	4b7c      	ldr	r3, [pc, #496]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800569e:	2301      	movs	r3, #1
 80056a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056a2:	4b79      	ldr	r3, [pc, #484]	@ (8005888 <HAL_RCC_OscConfig+0x4bc>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d118      	bne.n	80056e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056ae:	4b76      	ldr	r3, [pc, #472]	@ (8005888 <HAL_RCC_OscConfig+0x4bc>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a75      	ldr	r2, [pc, #468]	@ (8005888 <HAL_RCC_OscConfig+0x4bc>)
 80056b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056ba:	f7fd f84b 	bl	8002754 <HAL_GetTick>
 80056be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056c2:	f7fd f847 	bl	8002754 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e183      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005888 <HAL_RCC_OscConfig+0x4bc>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d108      	bne.n	80056fa <HAL_RCC_OscConfig+0x32e>
 80056e8:	4b66      	ldr	r3, [pc, #408]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056ee:	4a65      	ldr	r2, [pc, #404]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80056f0:	f043 0301 	orr.w	r3, r3, #1
 80056f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80056f8:	e024      	b.n	8005744 <HAL_RCC_OscConfig+0x378>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d110      	bne.n	8005724 <HAL_RCC_OscConfig+0x358>
 8005702:	4b60      	ldr	r3, [pc, #384]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005708:	4a5e      	ldr	r2, [pc, #376]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800570a:	f043 0304 	orr.w	r3, r3, #4
 800570e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005712:	4b5c      	ldr	r3, [pc, #368]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005718:	4a5a      	ldr	r2, [pc, #360]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800571a:	f043 0301 	orr.w	r3, r3, #1
 800571e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005722:	e00f      	b.n	8005744 <HAL_RCC_OscConfig+0x378>
 8005724:	4b57      	ldr	r3, [pc, #348]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800572a:	4a56      	ldr	r2, [pc, #344]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800572c:	f023 0301 	bic.w	r3, r3, #1
 8005730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005734:	4b53      	ldr	r3, [pc, #332]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800573a:	4a52      	ldr	r2, [pc, #328]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800573c:	f023 0304 	bic.w	r3, r3, #4
 8005740:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d016      	beq.n	800577a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fd f802 	bl	8002754 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005752:	e00a      	b.n	800576a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005754:	f7fc fffe 	bl	8002754 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005762:	4293      	cmp	r3, r2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e138      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800576a:	4b46      	ldr	r3, [pc, #280]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800576c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ed      	beq.n	8005754 <HAL_RCC_OscConfig+0x388>
 8005778:	e015      	b.n	80057a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577a:	f7fc ffeb 	bl	8002754 <HAL_GetTick>
 800577e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005782:	f7fc ffe7 	bl	8002754 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005790:	4293      	cmp	r3, r2
 8005792:	d901      	bls.n	8005798 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e121      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005798:	4b3a      	ldr	r3, [pc, #232]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800579a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1ed      	bne.n	8005782 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80057a6:	7ffb      	ldrb	r3, [r7, #31]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d105      	bne.n	80057b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057ac:	4b35      	ldr	r3, [pc, #212]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80057ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b0:	4a34      	ldr	r2, [pc, #208]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80057b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80057b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03c      	beq.n	800583e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	699b      	ldr	r3, [r3, #24]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01c      	beq.n	8005806 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057cc:	4b2d      	ldr	r3, [pc, #180]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80057ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80057d4:	f043 0301 	orr.w	r3, r3, #1
 80057d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057dc:	f7fc ffba 	bl	8002754 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057e4:	f7fc ffb6 	bl	8002754 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e0f2      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057f6:	4b23      	ldr	r3, [pc, #140]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 80057f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80057fc:	f003 0302 	and.w	r3, r3, #2
 8005800:	2b00      	cmp	r3, #0
 8005802:	d0ef      	beq.n	80057e4 <HAL_RCC_OscConfig+0x418>
 8005804:	e01b      	b.n	800583e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005806:	4b1f      	ldr	r3, [pc, #124]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005808:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800580c:	4a1d      	ldr	r2, [pc, #116]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005816:	f7fc ff9d 	bl	8002754 <HAL_GetTick>
 800581a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800581c:	e008      	b.n	8005830 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800581e:	f7fc ff99 	bl	8002754 <HAL_GetTick>
 8005822:	4602      	mov	r2, r0
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	2b02      	cmp	r3, #2
 800582a:	d901      	bls.n	8005830 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e0d5      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005830:	4b14      	ldr	r3, [pc, #80]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005836:	f003 0302 	and.w	r3, r3, #2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1ef      	bne.n	800581e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	69db      	ldr	r3, [r3, #28]
 8005842:	2b00      	cmp	r3, #0
 8005844:	f000 80c9 	beq.w	80059da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005848:	4b0e      	ldr	r3, [pc, #56]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	f003 030c 	and.w	r3, r3, #12
 8005850:	2b0c      	cmp	r3, #12
 8005852:	f000 8083 	beq.w	800595c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d15e      	bne.n	800591c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b09      	ldr	r3, [pc, #36]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a08      	ldr	r2, [pc, #32]	@ (8005884 <HAL_RCC_OscConfig+0x4b8>)
 8005864:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800586a:	f7fc ff73 	bl	8002754 <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005870:	e00c      	b.n	800588c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005872:	f7fc ff6f 	bl	8002754 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b02      	cmp	r3, #2
 800587e:	d905      	bls.n	800588c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e0ab      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
 8005884:	40021000 	.word	0x40021000
 8005888:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800588c:	4b55      	ldr	r3, [pc, #340]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1ec      	bne.n	8005872 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005898:	4b52      	ldr	r3, [pc, #328]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 800589a:	68da      	ldr	r2, [r3, #12]
 800589c:	4b52      	ldr	r3, [pc, #328]	@ (80059e8 <HAL_RCC_OscConfig+0x61c>)
 800589e:	4013      	ands	r3, r2
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	6a11      	ldr	r1, [r2, #32]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80058a8:	3a01      	subs	r2, #1
 80058aa:	0112      	lsls	r2, r2, #4
 80058ac:	4311      	orrs	r1, r2
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80058b2:	0212      	lsls	r2, r2, #8
 80058b4:	4311      	orrs	r1, r2
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80058ba:	0852      	lsrs	r2, r2, #1
 80058bc:	3a01      	subs	r2, #1
 80058be:	0552      	lsls	r2, r2, #21
 80058c0:	4311      	orrs	r1, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80058c6:	0852      	lsrs	r2, r2, #1
 80058c8:	3a01      	subs	r2, #1
 80058ca:	0652      	lsls	r2, r2, #25
 80058cc:	4311      	orrs	r1, r2
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058d2:	06d2      	lsls	r2, r2, #27
 80058d4:	430a      	orrs	r2, r1
 80058d6:	4943      	ldr	r1, [pc, #268]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058dc:	4b41      	ldr	r3, [pc, #260]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a40      	ldr	r2, [pc, #256]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 80058e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058e8:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	4a3d      	ldr	r2, [pc, #244]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 80058ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058f4:	f7fc ff2e 	bl	8002754 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058fc:	f7fc ff2a 	bl	8002754 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e066      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800590e:	4b35      	ldr	r3, [pc, #212]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d0f0      	beq.n	80058fc <HAL_RCC_OscConfig+0x530>
 800591a:	e05e      	b.n	80059da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800591c:	4b31      	ldr	r3, [pc, #196]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a30      	ldr	r2, [pc, #192]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 8005922:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005928:	f7fc ff14 	bl	8002754 <HAL_GetTick>
 800592c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800592e:	e008      	b.n	8005942 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005930:	f7fc ff10 	bl	8002754 <HAL_GetTick>
 8005934:	4602      	mov	r2, r0
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b02      	cmp	r3, #2
 800593c:	d901      	bls.n	8005942 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800593e:	2303      	movs	r3, #3
 8005940:	e04c      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005942:	4b28      	ldr	r3, [pc, #160]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d1f0      	bne.n	8005930 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800594e:	4b25      	ldr	r3, [pc, #148]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	4924      	ldr	r1, [pc, #144]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 8005954:	4b25      	ldr	r3, [pc, #148]	@ (80059ec <HAL_RCC_OscConfig+0x620>)
 8005956:	4013      	ands	r3, r2
 8005958:	60cb      	str	r3, [r1, #12]
 800595a:	e03e      	b.n	80059da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	69db      	ldr	r3, [r3, #28]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e039      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005968:	4b1e      	ldr	r3, [pc, #120]	@ (80059e4 <HAL_RCC_OscConfig+0x618>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f003 0203 	and.w	r2, r3, #3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	429a      	cmp	r2, r3
 800597a:	d12c      	bne.n	80059d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005986:	3b01      	subs	r3, #1
 8005988:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598a:	429a      	cmp	r2, r3
 800598c:	d123      	bne.n	80059d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800599a:	429a      	cmp	r2, r3
 800599c:	d11b      	bne.n	80059d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d113      	bne.n	80059d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	3b01      	subs	r3, #1
 80059bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d109      	bne.n	80059d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059cc:	085b      	lsrs	r3, r3, #1
 80059ce:	3b01      	subs	r3, #1
 80059d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d001      	beq.n	80059da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e000      	b.n	80059dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3720      	adds	r7, #32
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40021000 	.word	0x40021000
 80059e8:	019f800c 	.word	0x019f800c
 80059ec:	feeefffc 	.word	0xfeeefffc

080059f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b086      	sub	sp, #24
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e11e      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a08:	4b91      	ldr	r3, [pc, #580]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 030f 	and.w	r3, r3, #15
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d910      	bls.n	8005a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a16:	4b8e      	ldr	r3, [pc, #568]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f023 020f 	bic.w	r2, r3, #15
 8005a1e:	498c      	ldr	r1, [pc, #560]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a26:	4b8a      	ldr	r3, [pc, #552]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	683a      	ldr	r2, [r7, #0]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d001      	beq.n	8005a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e106      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d073      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d129      	bne.n	8005aa0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a4c:	4b81      	ldr	r3, [pc, #516]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0f4      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a5c:	f000 f966 	bl	8005d2c <RCC_GetSysClockFreqFromPLLSource>
 8005a60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	4a7c      	ldr	r2, [pc, #496]	@ (8005c58 <HAL_RCC_ClockConfig+0x268>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d93f      	bls.n	8005aea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d009      	beq.n	8005a8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d033      	beq.n	8005aea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d12f      	bne.n	8005aea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a8a:	4b72      	ldr	r3, [pc, #456]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a92:	4a70      	ldr	r2, [pc, #448]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a9a:	2380      	movs	r3, #128	@ 0x80
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	e024      	b.n	8005aea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d109      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e0c6      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab8:	4b66      	ldr	r3, [pc, #408]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	e0be      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005ac8:	f000 f8ce 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005acc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	4a61      	ldr	r2, [pc, #388]	@ (8005c58 <HAL_RCC_ClockConfig+0x268>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d909      	bls.n	8005aea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ade:	4a5d      	ldr	r2, [pc, #372]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005ae0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ae4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ae6:	2380      	movs	r3, #128	@ 0x80
 8005ae8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005aea:	4b5a      	ldr	r3, [pc, #360]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f023 0203 	bic.w	r2, r3, #3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4957      	ldr	r1, [pc, #348]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005afc:	f7fc fe2a 	bl	8002754 <HAL_GetTick>
 8005b00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b04:	f7fc fe26 	bl	8002754 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e095      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	f003 020c 	and.w	r2, r3, #12
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d1eb      	bne.n	8005b04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0302 	and.w	r3, r3, #2
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d023      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d005      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b44:	4b43      	ldr	r3, [pc, #268]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	4a42      	ldr	r2, [pc, #264]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d007      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b5c:	4b3d      	ldr	r3, [pc, #244]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b64:	4a3b      	ldr	r2, [pc, #236]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005b6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b6c:	4b39      	ldr	r3, [pc, #228]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4936      	ldr	r1, [pc, #216]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	608b      	str	r3, [r1, #8]
 8005b7e:	e008      	b.n	8005b92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b80      	cmp	r3, #128	@ 0x80
 8005b84:	d105      	bne.n	8005b92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b86:	4b33      	ldr	r3, [pc, #204]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	4a32      	ldr	r2, [pc, #200]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005b8c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b92:	4b2f      	ldr	r3, [pc, #188]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	683a      	ldr	r2, [r7, #0]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d21d      	bcs.n	8005bdc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f023 020f 	bic.w	r2, r3, #15
 8005ba8:	4929      	ldr	r1, [pc, #164]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005bb0:	f7fc fdd0 	bl	8002754 <HAL_GetTick>
 8005bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	e00a      	b.n	8005bce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005bb8:	f7fc fdcc 	bl	8002754 <HAL_GetTick>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	1ad3      	subs	r3, r2, r3
 8005bc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e03b      	b.n	8005c46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bce:	4b20      	ldr	r3, [pc, #128]	@ (8005c50 <HAL_RCC_ClockConfig+0x260>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	683a      	ldr	r2, [r7, #0]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d1ed      	bne.n	8005bb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 0304 	and.w	r3, r3, #4
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005be8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4917      	ldr	r1, [pc, #92]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d009      	beq.n	8005c1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c06:	4b13      	ldr	r3, [pc, #76]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	00db      	lsls	r3, r3, #3
 8005c14:	490f      	ldr	r1, [pc, #60]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c1a:	f000 f825 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	4b0c      	ldr	r3, [pc, #48]	@ (8005c54 <HAL_RCC_ClockConfig+0x264>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	091b      	lsrs	r3, r3, #4
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	490c      	ldr	r1, [pc, #48]	@ (8005c5c <HAL_RCC_ClockConfig+0x26c>)
 8005c2c:	5ccb      	ldrb	r3, [r1, r3]
 8005c2e:	f003 031f 	and.w	r3, r3, #31
 8005c32:	fa22 f303 	lsr.w	r3, r2, r3
 8005c36:	4a0a      	ldr	r2, [pc, #40]	@ (8005c60 <HAL_RCC_ClockConfig+0x270>)
 8005c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <HAL_RCC_ClockConfig+0x274>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7fc fd3c 	bl	80026bc <HAL_InitTick>
 8005c44:	4603      	mov	r3, r0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	40022000 	.word	0x40022000
 8005c54:	40021000 	.word	0x40021000
 8005c58:	04c4b400 	.word	0x04c4b400
 8005c5c:	08009190 	.word	0x08009190
 8005c60:	20000020 	.word	0x20000020
 8005c64:	20000024 	.word	0x20000024

08005c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c6e:	4b2c      	ldr	r3, [pc, #176]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c70:	689b      	ldr	r3, [r3, #8]
 8005c72:	f003 030c 	and.w	r3, r3, #12
 8005c76:	2b04      	cmp	r3, #4
 8005c78:	d102      	bne.n	8005c80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e047      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c80:	4b27      	ldr	r3, [pc, #156]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f003 030c 	and.w	r3, r3, #12
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d102      	bne.n	8005c92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c8c:	4b26      	ldr	r3, [pc, #152]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c8e:	613b      	str	r3, [r7, #16]
 8005c90:	e03e      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c92:	4b23      	ldr	r3, [pc, #140]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 030c 	and.w	r3, r3, #12
 8005c9a:	2b0c      	cmp	r3, #12
 8005c9c:	d136      	bne.n	8005d0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c9e:	4b20      	ldr	r3, [pc, #128]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	091b      	lsrs	r3, r3, #4
 8005cae:	f003 030f 	and.w	r3, r3, #15
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2b03      	cmp	r3, #3
 8005cba:	d10c      	bne.n	8005cd6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d28 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc4:	4a16      	ldr	r2, [pc, #88]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc6:	68d2      	ldr	r2, [r2, #12]
 8005cc8:	0a12      	lsrs	r2, r2, #8
 8005cca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cce:	fb02 f303 	mul.w	r3, r2, r3
 8005cd2:	617b      	str	r3, [r7, #20]
      break;
 8005cd4:	e00c      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cd6:	4a13      	ldr	r2, [pc, #76]	@ (8005d24 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cde:	4a10      	ldr	r2, [pc, #64]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ce0:	68d2      	ldr	r2, [r2, #12]
 8005ce2:	0a12      	lsrs	r2, r2, #8
 8005ce4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ce8:	fb02 f303 	mul.w	r3, r2, r3
 8005cec:	617b      	str	r3, [r7, #20]
      break;
 8005cee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005d20 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	0e5b      	lsrs	r3, r3, #25
 8005cf6:	f003 0303 	and.w	r3, r3, #3
 8005cfa:	3301      	adds	r3, #1
 8005cfc:	005b      	lsls	r3, r3, #1
 8005cfe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005d00:	697a      	ldr	r2, [r7, #20]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	e001      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005d10:	693b      	ldr	r3, [r7, #16]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40021000 	.word	0x40021000
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	007a1200 	.word	0x007a1200

08005d2c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d32:	4b1e      	ldr	r3, [pc, #120]	@ (8005dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f003 0303 	and.w	r3, r3, #3
 8005d3a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	091b      	lsrs	r3, r3, #4
 8005d42:	f003 030f 	and.w	r3, r3, #15
 8005d46:	3301      	adds	r3, #1
 8005d48:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b03      	cmp	r3, #3
 8005d4e:	d10c      	bne.n	8005d6a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d50:	4a17      	ldr	r2, [pc, #92]	@ (8005db0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	4a14      	ldr	r2, [pc, #80]	@ (8005dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d5a:	68d2      	ldr	r2, [r2, #12]
 8005d5c:	0a12      	lsrs	r2, r2, #8
 8005d5e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d62:	fb02 f303 	mul.w	r3, r2, r3
 8005d66:	617b      	str	r3, [r7, #20]
    break;
 8005d68:	e00c      	b.n	8005d84 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d6a:	4a12      	ldr	r2, [pc, #72]	@ (8005db4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d72:	4a0e      	ldr	r2, [pc, #56]	@ (8005dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d74:	68d2      	ldr	r2, [r2, #12]
 8005d76:	0a12      	lsrs	r2, r2, #8
 8005d78:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	617b      	str	r3, [r7, #20]
    break;
 8005d82:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d84:	4b09      	ldr	r3, [pc, #36]	@ (8005dac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	0e5b      	lsrs	r3, r3, #25
 8005d8a:	f003 0303 	and.w	r3, r3, #3
 8005d8e:	3301      	adds	r3, #1
 8005d90:	005b      	lsls	r3, r3, #1
 8005d92:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d9c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d9e:	687b      	ldr	r3, [r7, #4]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	371c      	adds	r7, #28
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	40021000 	.word	0x40021000
 8005db0:	007a1200 	.word	0x007a1200
 8005db4:	00f42400 	.word	0x00f42400

08005db8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 8098 	beq.w	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dda:	4b43      	ldr	r3, [pc, #268]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10d      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	4b40      	ldr	r3, [pc, #256]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dea:	4a3f      	ldr	r2, [pc, #252]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005df2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e02:	4b3a      	ldr	r3, [pc, #232]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a39      	ldr	r2, [pc, #228]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e0c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e0e:	f7fc fca1 	bl	8002754 <HAL_GetTick>
 8005e12:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e14:	e009      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e16:	f7fc fc9d 	bl	8002754 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d902      	bls.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	74fb      	strb	r3, [r7, #19]
        break;
 8005e28:	e005      	b.n	8005e36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e2a:	4b30      	ldr	r3, [pc, #192]	@ (8005eec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0ef      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e36:	7cfb      	ldrb	r3, [r7, #19]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d159      	bne.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e3c:	4b2a      	ldr	r3, [pc, #168]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e46:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d01e      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d019      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e58:	4b23      	ldr	r3, [pc, #140]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e62:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e64:	4b20      	ldr	r3, [pc, #128]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e6a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e74:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e7a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e84:	4a18      	ldr	r2, [pc, #96]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d016      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fc fc5d 	bl	8002754 <HAL_GetTick>
 8005e9a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9c:	e00b      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e9e:	f7fc fc59 	bl	8002754 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d902      	bls.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005eb0:	2303      	movs	r3, #3
 8005eb2:	74fb      	strb	r3, [r7, #19]
            break;
 8005eb4:	e006      	b.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eb6:	4b0c      	ldr	r3, [pc, #48]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebc:	f003 0302 	and.w	r3, r3, #2
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0ec      	beq.n	8005e9e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ec4:	7cfb      	ldrb	r3, [r7, #19]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eca:	4b07      	ldr	r3, [pc, #28]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ed0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ed8:	4903      	ldr	r1, [pc, #12]	@ (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ee2:	7cfb      	ldrb	r3, [r7, #19]
 8005ee4:	74bb      	strb	r3, [r7, #18]
 8005ee6:	e005      	b.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ef0:	7cfb      	ldrb	r3, [r7, #19]
 8005ef2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ef4:	7c7b      	ldrb	r3, [r7, #17]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d105      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005efa:	4ba7      	ldr	r3, [pc, #668]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005efe:	4aa6      	ldr	r2, [pc, #664]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 0301 	and.w	r3, r3, #1
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00a      	beq.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f12:	4ba1      	ldr	r3, [pc, #644]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f18:	f023 0203 	bic.w	r2, r3, #3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	499d      	ldr	r1, [pc, #628]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	4313      	orrs	r3, r2
 8005f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 0302 	and.w	r3, r3, #2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00a      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f34:	4b98      	ldr	r3, [pc, #608]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3a:	f023 020c 	bic.w	r2, r3, #12
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	4995      	ldr	r1, [pc, #596]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f003 0304 	and.w	r3, r3, #4
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00a      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f56:	4b90      	ldr	r3, [pc, #576]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	498c      	ldr	r1, [pc, #560]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00a      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f78:	4b87      	ldr	r3, [pc, #540]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f7e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	691b      	ldr	r3, [r3, #16]
 8005f86:	4984      	ldr	r1, [pc, #528]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 0310 	and.w	r3, r3, #16
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fa0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	497b      	ldr	r1, [pc, #492]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d00a      	beq.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fbc:	4b76      	ldr	r3, [pc, #472]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fc2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	4973      	ldr	r1, [pc, #460]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d00a      	beq.n	8005ff4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fde:	4b6e      	ldr	r3, [pc, #440]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	69db      	ldr	r3, [r3, #28]
 8005fec:	496a      	ldr	r1, [pc, #424]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d00a      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006000:	4b65      	ldr	r3, [pc, #404]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006006:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	4962      	ldr	r1, [pc, #392]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006010:	4313      	orrs	r3, r2
 8006012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006022:	4b5d      	ldr	r3, [pc, #372]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006030:	4959      	ldr	r1, [pc, #356]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006044:	4b54      	ldr	r3, [pc, #336]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800604a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006052:	4951      	ldr	r1, [pc, #324]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006054:	4313      	orrs	r3, r2
 8006056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006062:	2b00      	cmp	r3, #0
 8006064:	d015      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006066:	4b4c      	ldr	r3, [pc, #304]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800606c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	4948      	ldr	r1, [pc, #288]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	4313      	orrs	r3, r2
 8006078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006080:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006084:	d105      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006086:	4b44      	ldr	r3, [pc, #272]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	4a43      	ldr	r2, [pc, #268]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006090:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800609a:	2b00      	cmp	r3, #0
 800609c:	d015      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800609e:	4b3e      	ldr	r3, [pc, #248]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060ac:	493a      	ldr	r1, [pc, #232]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060bc:	d105      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060be:	4b36      	ldr	r3, [pc, #216]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4a35      	ldr	r2, [pc, #212]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c8:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d015      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060d6:	4b30      	ldr	r3, [pc, #192]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060dc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060e4:	492c      	ldr	r1, [pc, #176]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80060f4:	d105      	bne.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f6:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	4a27      	ldr	r2, [pc, #156]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006100:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800610a:	2b00      	cmp	r3, #0
 800610c:	d015      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800610e:	4b22      	ldr	r3, [pc, #136]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006114:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611c:	491e      	ldr	r1, [pc, #120]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006128:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800612c:	d105      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612e:	4b1a      	ldr	r3, [pc, #104]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	4a19      	ldr	r2, [pc, #100]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006134:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006138:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006142:	2b00      	cmp	r3, #0
 8006144:	d015      	beq.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006146:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006154:	4910      	ldr	r1, [pc, #64]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006160:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006164:	d105      	bne.n	8006172 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006166:	4b0c      	ldr	r3, [pc, #48]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	4a0b      	ldr	r2, [pc, #44]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800616c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006170:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d018      	beq.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800617e:	4b06      	ldr	r3, [pc, #24]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006184:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	4902      	ldr	r1, [pc, #8]	@ (8006198 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800618e:	4313      	orrs	r3, r2
 8006190:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	e001      	b.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006198:	40021000 	.word	0x40021000
 800619c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061a2:	d105      	bne.n	80061b0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061a4:	4b21      	ldr	r3, [pc, #132]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	4a20      	ldr	r2, [pc, #128]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d015      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80061bc:	4b1b      	ldr	r3, [pc, #108]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061ca:	4918      	ldr	r1, [pc, #96]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061da:	d105      	bne.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80061dc:	4b13      	ldr	r3, [pc, #76]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061de:	68db      	ldr	r3, [r3, #12]
 80061e0:	4a12      	ldr	r2, [pc, #72]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d015      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061f4:	4b0d      	ldr	r3, [pc, #52]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80061f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006202:	490a      	ldr	r1, [pc, #40]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006204:	4313      	orrs	r3, r2
 8006206:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800620e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006212:	d105      	bne.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006214:	4b05      	ldr	r3, [pc, #20]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	4a04      	ldr	r2, [pc, #16]	@ (800622c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800621a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800621e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006220:	7cbb      	ldrb	r3, [r7, #18]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40021000 	.word	0x40021000

08006230 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	e09d      	b.n	800637e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	2b00      	cmp	r3, #0
 8006248:	d108      	bne.n	800625c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006252:	d009      	beq.n	8006268 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	61da      	str	r2, [r3, #28]
 800625a:	e005      	b.n	8006268 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006274:	b2db      	uxtb	r3, r3
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7fc f8ce 	bl	8002424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800629e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062a8:	d902      	bls.n	80062b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80062aa:	2300      	movs	r3, #0
 80062ac:	60fb      	str	r3, [r7, #12]
 80062ae:	e002      	b.n	80062b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80062b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80062b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80062be:	d007      	beq.n	80062d0 <HAL_SPI_Init+0xa0>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80062c8:	d002      	beq.n	80062d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80062e0:	431a      	orrs	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	431a      	orrs	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0301 	and.w	r3, r3, #1
 80062f4:	431a      	orrs	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80062fe:	431a      	orrs	r2, r3
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	69db      	ldr	r3, [r3, #28]
 8006304:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006308:	431a      	orrs	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006312:	ea42 0103 	orr.w	r1, r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800631a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	430a      	orrs	r2, r1
 8006324:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	699b      	ldr	r3, [r3, #24]
 800632a:	0c1b      	lsrs	r3, r3, #16
 800632c:	f003 0204 	and.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006334:	f003 0310 	and.w	r3, r3, #16
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633e:	f003 0308 	and.w	r3, r3, #8
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800634c:	ea42 0103 	orr.w	r1, r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69da      	ldr	r2, [r3, #28]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800636c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b08a      	sub	sp, #40	@ 0x28
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	607a      	str	r2, [r7, #4]
 8006392:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006394:	2301      	movs	r3, #1
 8006396:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006398:	2300      	movs	r3, #0
 800639a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80063a4:	2b01      	cmp	r3, #1
 80063a6:	d101      	bne.n	80063ac <HAL_SPI_TransmitReceive+0x26>
 80063a8:	2302      	movs	r3, #2
 80063aa:	e20a      	b.n	80067c2 <HAL_SPI_TransmitReceive+0x43c>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063b4:	f7fc f9ce 	bl	8002754 <HAL_GetTick>
 80063b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80063c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80063c8:	887b      	ldrh	r3, [r7, #2]
 80063ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80063cc:	887b      	ldrh	r3, [r7, #2]
 80063ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80063d0:	7efb      	ldrb	r3, [r7, #27]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d00e      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x6e>
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063dc:	d106      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d102      	bne.n	80063ec <HAL_SPI_TransmitReceive+0x66>
 80063e6:	7efb      	ldrb	r3, [r7, #27]
 80063e8:	2b04      	cmp	r3, #4
 80063ea:	d003      	beq.n	80063f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80063ec:	2302      	movs	r3, #2
 80063ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 80063f2:	e1e0      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d005      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x80>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <HAL_SPI_TransmitReceive+0x80>
 8006400:	887b      	ldrh	r3, [r7, #2]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d103      	bne.n	800640e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800640c:	e1d3      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b04      	cmp	r3, #4
 8006418:	d003      	beq.n	8006422 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2205      	movs	r2, #5
 800641e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	887a      	ldrh	r2, [r7, #2]
 8006432:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	887a      	ldrh	r2, [r7, #2]
 800643a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	887a      	ldrh	r2, [r7, #2]
 800644e:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006464:	d802      	bhi.n	800646c <HAL_SPI_TransmitReceive+0xe6>
 8006466:	8a3b      	ldrh	r3, [r7, #16]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d908      	bls.n	800647e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685a      	ldr	r2, [r3, #4]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800647a:	605a      	str	r2, [r3, #4]
 800647c:	e007      	b.n	800648e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800648c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006498:	2b40      	cmp	r3, #64	@ 0x40
 800649a:	d007      	beq.n	80064ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80064aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80064b4:	f240 8081 	bls.w	80065ba <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <HAL_SPI_TransmitReceive+0x140>
 80064c0:	8a7b      	ldrh	r3, [r7, #18]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d16d      	bne.n	80065a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ca:	881a      	ldrh	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d6:	1c9a      	adds	r2, r3, #2
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064e0:	b29b      	uxth	r3, r3
 80064e2:	3b01      	subs	r3, #1
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064ea:	e05a      	b.n	80065a2 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	689b      	ldr	r3, [r3, #8]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d11b      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x1ac>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064fe:	b29b      	uxth	r3, r3
 8006500:	2b00      	cmp	r3, #0
 8006502:	d016      	beq.n	8006532 <HAL_SPI_TransmitReceive+0x1ac>
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	2b01      	cmp	r3, #1
 8006508:	d113      	bne.n	8006532 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650e:	881a      	ldrh	r2, [r3, #0]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651a:	1c9a      	adds	r2, r3, #2
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006524:	b29b      	uxth	r3, r3
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b01      	cmp	r3, #1
 800653e:	d11c      	bne.n	800657a <HAL_SPI_TransmitReceive+0x1f4>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006546:	b29b      	uxth	r3, r3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d016      	beq.n	800657a <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68da      	ldr	r2, [r3, #12]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	b292      	uxth	r2, r2
 8006558:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800655e:	1c9a      	adds	r2, r3, #2
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006576:	2301      	movs	r3, #1
 8006578:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800657a:	f7fc f8eb 	bl	8002754 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006586:	429a      	cmp	r2, r3
 8006588:	d80b      	bhi.n	80065a2 <HAL_SPI_TransmitReceive+0x21c>
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006590:	d007      	beq.n	80065a2 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2201      	movs	r2, #1
 800659c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80065a0:	e109      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d19f      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x166>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d199      	bne.n	80064ec <HAL_SPI_TransmitReceive+0x166>
 80065b8:	e0e3      	b.n	8006782 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_SPI_TransmitReceive+0x244>
 80065c2:	8a7b      	ldrh	r3, [r7, #18]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	f040 80cf 	bne.w	8006768 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ce:	b29b      	uxth	r3, r3
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d912      	bls.n	80065fa <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	881a      	ldrh	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	1c9a      	adds	r2, r3, #2
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3b02      	subs	r3, #2
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065f8:	e0b6      	b.n	8006768 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	330c      	adds	r3, #12
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006620:	e0a2      	b.n	8006768 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	f003 0302 	and.w	r3, r3, #2
 800662c:	2b02      	cmp	r3, #2
 800662e:	d134      	bne.n	800669a <HAL_SPI_TransmitReceive+0x314>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006634:	b29b      	uxth	r3, r3
 8006636:	2b00      	cmp	r3, #0
 8006638:	d02f      	beq.n	800669a <HAL_SPI_TransmitReceive+0x314>
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d12c      	bne.n	800669a <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b01      	cmp	r3, #1
 8006648:	d912      	bls.n	8006670 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b02      	subs	r3, #2
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800666e:	e012      	b.n	8006696 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	330c      	adds	r3, #12
 800667a:	7812      	ldrb	r2, [r2, #0]
 800667c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	1c5a      	adds	r2, r3, #1
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800668c:	b29b      	uxth	r3, r3
 800668e:	3b01      	subs	r3, #1
 8006690:	b29a      	uxth	r2, r3
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006696:	2300      	movs	r3, #0
 8006698:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d148      	bne.n	800673a <HAL_SPI_TransmitReceive+0x3b4>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d042      	beq.n	800673a <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d923      	bls.n	8006708 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	68da      	ldr	r2, [r3, #12]
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066ca:	b292      	uxth	r2, r2
 80066cc:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d2:	1c9a      	adds	r2, r3, #2
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066de:	b29b      	uxth	r3, r3
 80066e0:	3b02      	subs	r3, #2
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d81f      	bhi.n	8006736 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	685a      	ldr	r2, [r3, #4]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006704:	605a      	str	r2, [r3, #4]
 8006706:	e016      	b.n	8006736 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f103 020c 	add.w	r2, r3, #12
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671e:	1c5a      	adds	r2, r3, #1
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800672a:	b29b      	uxth	r3, r3
 800672c:	3b01      	subs	r3, #1
 800672e:	b29a      	uxth	r2, r3
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006736:	2301      	movs	r3, #1
 8006738:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800673a:	f7fc f80b 	bl	8002754 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	429a      	cmp	r2, r3
 8006748:	d803      	bhi.n	8006752 <HAL_SPI_TransmitReceive+0x3cc>
 800674a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d102      	bne.n	8006758 <HAL_SPI_TransmitReceive+0x3d2>
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	2b00      	cmp	r3, #0
 8006756:	d107      	bne.n	8006768 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8006766:	e026      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b00      	cmp	r3, #0
 8006770:	f47f af57 	bne.w	8006622 <HAL_SPI_TransmitReceive+0x29c>
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800677a:	b29b      	uxth	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	f47f af50 	bne.w	8006622 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 f93e 	bl	8006a08 <SPI_EndRxTxTransaction>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d005      	beq.n	800679e <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2220      	movs	r2, #32
 800679c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d003      	beq.n	80067ae <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ac:	e003      	b.n	80067b6 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 80067be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3728      	adds	r7, #40	@ 0x28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b088      	sub	sp, #32
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	603b      	str	r3, [r7, #0]
 80067d8:	4613      	mov	r3, r2
 80067da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067dc:	f7fb ffba 	bl	8002754 <HAL_GetTick>
 80067e0:	4602      	mov	r2, r0
 80067e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	4413      	add	r3, r2
 80067ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067ec:	f7fb ffb2 	bl	8002754 <HAL_GetTick>
 80067f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067f2:	4b39      	ldr	r3, [pc, #228]	@ (80068d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	015b      	lsls	r3, r3, #5
 80067f8:	0d1b      	lsrs	r3, r3, #20
 80067fa:	69fa      	ldr	r2, [r7, #28]
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006802:	e054      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680a:	d050      	beq.n	80068ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800680c:	f7fb ffa2 	bl	8002754 <HAL_GetTick>
 8006810:	4602      	mov	r2, r0
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	1ad3      	subs	r3, r2, r3
 8006816:	69fa      	ldr	r2, [r7, #28]
 8006818:	429a      	cmp	r2, r3
 800681a:	d902      	bls.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x56>
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d13d      	bne.n	800689e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	685a      	ldr	r2, [r3, #4]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006830:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800683a:	d111      	bne.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x94>
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	689b      	ldr	r3, [r3, #8]
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006844:	d004      	beq.n	8006850 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800684e:	d107      	bne.n	8006860 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800685e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006864:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006868:	d10f      	bne.n	800688a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006878:	601a      	str	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006888:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e017      	b.n	80068ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80068a4:	2300      	movs	r3, #0
 80068a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3b01      	subs	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	4013      	ands	r3, r2
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	bf0c      	ite	eq
 80068be:	2301      	moveq	r3, #1
 80068c0:	2300      	movne	r3, #0
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	461a      	mov	r2, r3
 80068c6:	79fb      	ldrb	r3, [r7, #7]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d19b      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3720      	adds	r7, #32
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	20000020 	.word	0x20000020

080068dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	@ 0x28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068ee:	f7fb ff31 	bl	8002754 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	683a      	ldr	r2, [r7, #0]
 80068fa:	4413      	add	r3, r2
 80068fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80068fe:	f7fb ff29 	bl	8002754 <HAL_GetTick>
 8006902:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	330c      	adds	r3, #12
 800690a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800690c:	4b3d      	ldr	r3, [pc, #244]	@ (8006a04 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	00da      	lsls	r2, r3, #3
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	0d1b      	lsrs	r3, r3, #20
 800691c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006924:	e060      	b.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800692c:	d107      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0x62>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800693c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d050      	beq.n	80069e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006946:	f7fb ff05 	bl	8002754 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006952:	429a      	cmp	r2, r3
 8006954:	d902      	bls.n	800695c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006958:	2b00      	cmp	r3, #0
 800695a:	d13d      	bne.n	80069d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685a      	ldr	r2, [r3, #4]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800696a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006974:	d111      	bne.n	800699a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800697e:	d004      	beq.n	800698a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006988:	d107      	bne.n	800699a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	681a      	ldr	r2, [r3, #0]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006998:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800699e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069a2:	d10f      	bne.n	80069c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	2201      	movs	r2, #1
 80069c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	2200      	movs	r2, #0
 80069d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e010      	b.n	80069fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d101      	bne.n	80069e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069de:	2300      	movs	r3, #0
 80069e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d196      	bne.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069f8:	2300      	movs	r3, #0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3728      	adds	r7, #40	@ 0x28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	bf00      	nop
 8006a04:	20000020 	.word	0x20000020

08006a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f7ff ff5b 	bl	80068dc <SPI_WaitFifoStateUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a30:	f043 0220 	orr.w	r2, r3, #32
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e027      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2200      	movs	r2, #0
 8006a44:	2180      	movs	r1, #128	@ 0x80
 8006a46:	68f8      	ldr	r0, [r7, #12]
 8006a48:	f7ff fec0 	bl	80067cc <SPI_WaitFlagStateUntilTimeout>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a56:	f043 0220 	orr.w	r2, r3, #32
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e014      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8006a6e:	68f8      	ldr	r0, [r7, #12]
 8006a70:	f7ff ff34 	bl	80068dc <SPI_WaitFifoStateUntilTimeout>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a7e:	f043 0220 	orr.w	r2, r3, #32
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e000      	b.n	8006a8c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b082      	sub	sp, #8
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e049      	b.n	8006b3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d106      	bne.n	8006ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7fb fcf4 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	4610      	mov	r0, r2
 8006ad4:	f000 fd3c 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e049      	b.n	8006be8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d106      	bne.n	8006b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f841 	bl	8006bf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4619      	mov	r1, r3
 8006b80:	4610      	mov	r0, r2
 8006b82:	f000 fce5 	bl	8007550 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2201      	movs	r2, #1
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2201      	movs	r2, #1
 8006bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006be6:	2300      	movs	r3, #0
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}

08006bf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
 8006c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <HAL_TIM_PWM_Start+0x24>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	bf14      	ite	ne
 8006c20:	2301      	movne	r3, #1
 8006c22:	2300      	moveq	r3, #0
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	e03c      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x9e>
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d109      	bne.n	8006c42 <HAL_TIM_PWM_Start+0x3e>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	bf14      	ite	ne
 8006c3a:	2301      	movne	r3, #1
 8006c3c:	2300      	moveq	r3, #0
 8006c3e:	b2db      	uxtb	r3, r3
 8006c40:	e02f      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x9e>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	2b08      	cmp	r3, #8
 8006c46:	d109      	bne.n	8006c5c <HAL_TIM_PWM_Start+0x58>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	bf14      	ite	ne
 8006c54:	2301      	movne	r3, #1
 8006c56:	2300      	moveq	r3, #0
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	e022      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x9e>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	2b0c      	cmp	r3, #12
 8006c60:	d109      	bne.n	8006c76 <HAL_TIM_PWM_Start+0x72>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c68:	b2db      	uxtb	r3, r3
 8006c6a:	2b01      	cmp	r3, #1
 8006c6c:	bf14      	ite	ne
 8006c6e:	2301      	movne	r3, #1
 8006c70:	2300      	moveq	r3, #0
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	e015      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x9e>
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	2b10      	cmp	r3, #16
 8006c7a:	d109      	bne.n	8006c90 <HAL_TIM_PWM_Start+0x8c>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	bf14      	ite	ne
 8006c88:	2301      	movne	r3, #1
 8006c8a:	2300      	moveq	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	e008      	b.n	8006ca2 <HAL_TIM_PWM_Start+0x9e>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	bf14      	ite	ne
 8006c9c:	2301      	movne	r3, #1
 8006c9e:	2300      	moveq	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e0a1      	b.n	8006dee <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start+0xb6>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cb8:	e023      	b.n	8006d02 <HAL_TIM_PWM_Start+0xfe>
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d104      	bne.n	8006cca <HAL_TIM_PWM_Start+0xc6>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cc8:	e01b      	b.n	8006d02 <HAL_TIM_PWM_Start+0xfe>
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d104      	bne.n	8006cda <HAL_TIM_PWM_Start+0xd6>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cd8:	e013      	b.n	8006d02 <HAL_TIM_PWM_Start+0xfe>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	d104      	bne.n	8006cea <HAL_TIM_PWM_Start+0xe6>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006ce8:	e00b      	b.n	8006d02 <HAL_TIM_PWM_Start+0xfe>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b10      	cmp	r3, #16
 8006cee:	d104      	bne.n	8006cfa <HAL_TIM_PWM_Start+0xf6>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cf8:	e003      	b.n	8006d02 <HAL_TIM_PWM_Start+0xfe>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2201      	movs	r2, #1
 8006d08:	6839      	ldr	r1, [r7, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f001 f890 	bl	8007e30 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a38      	ldr	r2, [pc, #224]	@ (8006df8 <HAL_TIM_PWM_Start+0x1f4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d018      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x148>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a37      	ldr	r2, [pc, #220]	@ (8006dfc <HAL_TIM_PWM_Start+0x1f8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x148>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a35      	ldr	r2, [pc, #212]	@ (8006e00 <HAL_TIM_PWM_Start+0x1fc>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00e      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x148>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a34      	ldr	r2, [pc, #208]	@ (8006e04 <HAL_TIM_PWM_Start+0x200>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d009      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x148>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a32      	ldr	r2, [pc, #200]	@ (8006e08 <HAL_TIM_PWM_Start+0x204>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <HAL_TIM_PWM_Start+0x148>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a31      	ldr	r2, [pc, #196]	@ (8006e0c <HAL_TIM_PWM_Start+0x208>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <HAL_TIM_PWM_Start+0x14c>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <HAL_TIM_PWM_Start+0x14e>
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006d64:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a23      	ldr	r2, [pc, #140]	@ (8006df8 <HAL_TIM_PWM_Start+0x1f4>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d01d      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d78:	d018      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a24      	ldr	r2, [pc, #144]	@ (8006e10 <HAL_TIM_PWM_Start+0x20c>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d013      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a22      	ldr	r2, [pc, #136]	@ (8006e14 <HAL_TIM_PWM_Start+0x210>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00e      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1a      	ldr	r2, [pc, #104]	@ (8006dfc <HAL_TIM_PWM_Start+0x1f8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d009      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a18      	ldr	r2, [pc, #96]	@ (8006e00 <HAL_TIM_PWM_Start+0x1fc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <HAL_TIM_PWM_Start+0x1a8>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a19      	ldr	r2, [pc, #100]	@ (8006e0c <HAL_TIM_PWM_Start+0x208>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d115      	bne.n	8006dd8 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	4b19      	ldr	r3, [pc, #100]	@ (8006e18 <HAL_TIM_PWM_Start+0x214>)
 8006db4:	4013      	ands	r3, r2
 8006db6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2b06      	cmp	r3, #6
 8006dbc:	d015      	beq.n	8006dea <HAL_TIM_PWM_Start+0x1e6>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006dc4:	d011      	beq.n	8006dea <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f042 0201 	orr.w	r2, r2, #1
 8006dd4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd6:	e008      	b.n	8006dea <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f042 0201 	orr.w	r2, r2, #1
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e000      	b.n	8006dec <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3710      	adds	r7, #16
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	40012c00 	.word	0x40012c00
 8006dfc:	40013400 	.word	0x40013400
 8006e00:	40014000 	.word	0x40014000
 8006e04:	40014400 	.word	0x40014400
 8006e08:	40014800 	.word	0x40014800
 8006e0c:	40015000 	.word	0x40015000
 8006e10:	40000400 	.word	0x40000400
 8006e14:	40000800 	.word	0x40000800
 8006e18:	00010007 	.word	0x00010007

08006e1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	691b      	ldr	r3, [r3, #16]
 8006e32:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d020      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	f003 0302 	and.w	r3, r3, #2
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f06f 0202 	mvn.w	r2, #2
 8006e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2201      	movs	r2, #1
 8006e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	699b      	ldr	r3, [r3, #24]
 8006e5e:	f003 0303 	and.w	r3, r3, #3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d003      	beq.n	8006e6e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fb54 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006e6c:	e005      	b.n	8006e7a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 fb46 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f000 fb57 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	f003 0304 	and.w	r3, r3, #4
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d020      	beq.n	8006ecc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f003 0304 	and.w	r3, r3, #4
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d01b      	beq.n	8006ecc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f06f 0204 	mvn.w	r2, #4
 8006e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2202      	movs	r2, #2
 8006ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f000 fb2e 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006eb8:	e005      	b.n	8006ec6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb20 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 fb31 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d020      	beq.n	8006f18 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d01b      	beq.n	8006f18 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f06f 0208 	mvn.w	r2, #8
 8006ee8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2204      	movs	r2, #4
 8006eee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	69db      	ldr	r3, [r3, #28]
 8006ef6:	f003 0303 	and.w	r3, r3, #3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d003      	beq.n	8006f06 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fb08 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006f04:	e005      	b.n	8006f12 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fafa 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fb0b 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2200      	movs	r2, #0
 8006f16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	f003 0310 	and.w	r3, r3, #16
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d020      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	f003 0310 	and.w	r3, r3, #16
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d01b      	beq.n	8006f64 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f06f 0210 	mvn.w	r2, #16
 8006f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2208      	movs	r2, #8
 8006f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69db      	ldr	r3, [r3, #28]
 8006f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d003      	beq.n	8006f52 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fae2 	bl	8007514 <HAL_TIM_IC_CaptureCallback>
 8006f50:	e005      	b.n	8006f5e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fad4 	bl	8007500 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 fae5 	bl	8007528 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d00c      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d007      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f06f 0201 	mvn.w	r2, #1
 8006f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 fab2 	bl	80074ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d104      	bne.n	8006f9c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d00c      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d007      	beq.n	8006fb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f001 f88f 	bl	80080d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00c      	beq.n	8006fda <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f887 	bl	80080e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d007      	beq.n	8006ffe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fa9f 	bl	800753c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f003 0320 	and.w	r3, r3, #32
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f06f 0220 	mvn.w	r2, #32
 800701a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f001 f84f 	bl	80080c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00c      	beq.n	8007046 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007032:	2b00      	cmp	r3, #0
 8007034:	d007      	beq.n	8007046 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f001 f85b 	bl	80080fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00c      	beq.n	800706a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d007      	beq.n	800706a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8007062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 f853 	bl	8008110 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00c      	beq.n	800708e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d007      	beq.n	800708e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f001 f84b 	bl	8008124 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00c      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d007      	beq.n	80070b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80070aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 f843 	bl	8008138 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070c8:	2300      	movs	r3, #0
 80070ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d101      	bne.n	80070da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80070d6:	2302      	movs	r3, #2
 80070d8:	e0ff      	b.n	80072da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2b14      	cmp	r3, #20
 80070e6:	f200 80f0 	bhi.w	80072ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80070ea:	a201      	add	r2, pc, #4	@ (adr r2, 80070f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80070ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f0:	08007145 	.word	0x08007145
 80070f4:	080072cb 	.word	0x080072cb
 80070f8:	080072cb 	.word	0x080072cb
 80070fc:	080072cb 	.word	0x080072cb
 8007100:	08007185 	.word	0x08007185
 8007104:	080072cb 	.word	0x080072cb
 8007108:	080072cb 	.word	0x080072cb
 800710c:	080072cb 	.word	0x080072cb
 8007110:	080071c7 	.word	0x080071c7
 8007114:	080072cb 	.word	0x080072cb
 8007118:	080072cb 	.word	0x080072cb
 800711c:	080072cb 	.word	0x080072cb
 8007120:	08007207 	.word	0x08007207
 8007124:	080072cb 	.word	0x080072cb
 8007128:	080072cb 	.word	0x080072cb
 800712c:	080072cb 	.word	0x080072cb
 8007130:	08007249 	.word	0x08007249
 8007134:	080072cb 	.word	0x080072cb
 8007138:	080072cb 	.word	0x080072cb
 800713c:	080072cb 	.word	0x080072cb
 8007140:	08007289 	.word	0x08007289
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68b9      	ldr	r1, [r7, #8]
 800714a:	4618      	mov	r0, r3
 800714c:	f000 faaa 	bl	80076a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	699a      	ldr	r2, [r3, #24]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0208 	orr.w	r2, r2, #8
 800715e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f022 0204 	bic.w	r2, r2, #4
 800716e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6999      	ldr	r1, [r3, #24]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	691a      	ldr	r2, [r3, #16]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	430a      	orrs	r2, r1
 8007180:	619a      	str	r2, [r3, #24]
      break;
 8007182:	e0a5      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68b9      	ldr	r1, [r7, #8]
 800718a:	4618      	mov	r0, r3
 800718c:	f000 fb24 	bl	80077d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	699a      	ldr	r2, [r3, #24]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800719e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	699a      	ldr	r2, [r3, #24]
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80071ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	6999      	ldr	r1, [r3, #24]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	021a      	lsls	r2, r3, #8
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	619a      	str	r2, [r3, #24]
      break;
 80071c4:	e084      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68b9      	ldr	r1, [r7, #8]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fb97 	bl	8007900 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	69da      	ldr	r2, [r3, #28]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f042 0208 	orr.w	r2, r2, #8
 80071e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69da      	ldr	r2, [r3, #28]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0204 	bic.w	r2, r2, #4
 80071f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69d9      	ldr	r1, [r3, #28]
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	61da      	str	r2, [r3, #28]
      break;
 8007204:	e064      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	4618      	mov	r0, r3
 800720e:	f000 fc09 	bl	8007a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	69da      	ldr	r2, [r3, #28]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69d9      	ldr	r1, [r3, #28]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	021a      	lsls	r2, r3, #8
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	61da      	str	r2, [r3, #28]
      break;
 8007246:	e043      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fc7c 	bl	8007b4c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f042 0208 	orr.w	r2, r2, #8
 8007262:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0204 	bic.w	r2, r2, #4
 8007272:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	691a      	ldr	r2, [r3, #16]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	430a      	orrs	r2, r1
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007286:	e023      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68b9      	ldr	r1, [r7, #8]
 800728e:	4618      	mov	r0, r3
 8007290:	f000 fcc6 	bl	8007c20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80072a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072b2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	021a      	lsls	r2, r3, #8
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	430a      	orrs	r2, r1
 80072c6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80072c8:	e002      	b.n	80072d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	75fb      	strb	r3, [r7, #23]
      break;
 80072ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80072d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3718      	adds	r7, #24
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop

080072e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d101      	bne.n	8007300 <HAL_TIM_ConfigClockSource+0x1c>
 80072fc:	2302      	movs	r3, #2
 80072fe:	e0e6      	b.n	80074ce <HAL_TIM_ConfigClockSource+0x1ea>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800731e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800732a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a67      	ldr	r2, [pc, #412]	@ (80074d8 <HAL_TIM_ConfigClockSource+0x1f4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	f000 80b1 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007340:	4a65      	ldr	r2, [pc, #404]	@ (80074d8 <HAL_TIM_ConfigClockSource+0x1f4>)
 8007342:	4293      	cmp	r3, r2
 8007344:	f200 80b6 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007348:	4a64      	ldr	r2, [pc, #400]	@ (80074dc <HAL_TIM_ConfigClockSource+0x1f8>)
 800734a:	4293      	cmp	r3, r2
 800734c:	f000 80a9 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007350:	4a62      	ldr	r2, [pc, #392]	@ (80074dc <HAL_TIM_ConfigClockSource+0x1f8>)
 8007352:	4293      	cmp	r3, r2
 8007354:	f200 80ae 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007358:	4a61      	ldr	r2, [pc, #388]	@ (80074e0 <HAL_TIM_ConfigClockSource+0x1fc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	f000 80a1 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007360:	4a5f      	ldr	r2, [pc, #380]	@ (80074e0 <HAL_TIM_ConfigClockSource+0x1fc>)
 8007362:	4293      	cmp	r3, r2
 8007364:	f200 80a6 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007368:	4a5e      	ldr	r2, [pc, #376]	@ (80074e4 <HAL_TIM_ConfigClockSource+0x200>)
 800736a:	4293      	cmp	r3, r2
 800736c:	f000 8099 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007370:	4a5c      	ldr	r2, [pc, #368]	@ (80074e4 <HAL_TIM_ConfigClockSource+0x200>)
 8007372:	4293      	cmp	r3, r2
 8007374:	f200 809e 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007378:	4a5b      	ldr	r2, [pc, #364]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x204>)
 800737a:	4293      	cmp	r3, r2
 800737c:	f000 8091 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007380:	4a59      	ldr	r2, [pc, #356]	@ (80074e8 <HAL_TIM_ConfigClockSource+0x204>)
 8007382:	4293      	cmp	r3, r2
 8007384:	f200 8096 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007388:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800738c:	f000 8089 	beq.w	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 8007390:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007394:	f200 808e 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 8007398:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800739c:	d03e      	beq.n	800741c <HAL_TIM_ConfigClockSource+0x138>
 800739e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073a2:	f200 8087 	bhi.w	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073aa:	f000 8086 	beq.w	80074ba <HAL_TIM_ConfigClockSource+0x1d6>
 80073ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073b2:	d87f      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073b4:	2b70      	cmp	r3, #112	@ 0x70
 80073b6:	d01a      	beq.n	80073ee <HAL_TIM_ConfigClockSource+0x10a>
 80073b8:	2b70      	cmp	r3, #112	@ 0x70
 80073ba:	d87b      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073bc:	2b60      	cmp	r3, #96	@ 0x60
 80073be:	d050      	beq.n	8007462 <HAL_TIM_ConfigClockSource+0x17e>
 80073c0:	2b60      	cmp	r3, #96	@ 0x60
 80073c2:	d877      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073c4:	2b50      	cmp	r3, #80	@ 0x50
 80073c6:	d03c      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x15e>
 80073c8:	2b50      	cmp	r3, #80	@ 0x50
 80073ca:	d873      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073cc:	2b40      	cmp	r3, #64	@ 0x40
 80073ce:	d058      	beq.n	8007482 <HAL_TIM_ConfigClockSource+0x19e>
 80073d0:	2b40      	cmp	r3, #64	@ 0x40
 80073d2:	d86f      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073d4:	2b30      	cmp	r3, #48	@ 0x30
 80073d6:	d064      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 80073d8:	2b30      	cmp	r3, #48	@ 0x30
 80073da:	d86b      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073dc:	2b20      	cmp	r3, #32
 80073de:	d060      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 80073e0:	2b20      	cmp	r3, #32
 80073e2:	d867      	bhi.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d05c      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 80073e8:	2b10      	cmp	r3, #16
 80073ea:	d05a      	beq.n	80074a2 <HAL_TIM_ConfigClockSource+0x1be>
 80073ec:	e062      	b.n	80074b4 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073fe:	f000 fcf7 	bl	8007df0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007410:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	609a      	str	r2, [r3, #8]
      break;
 800741a:	e04f      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800742c:	f000 fce0 	bl	8007df0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	689a      	ldr	r2, [r3, #8]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800743e:	609a      	str	r2, [r3, #8]
      break;
 8007440:	e03c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800744e:	461a      	mov	r2, r3
 8007450:	f000 fc52 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2150      	movs	r1, #80	@ 0x50
 800745a:	4618      	mov	r0, r3
 800745c:	f000 fcab 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007460:	e02c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800746e:	461a      	mov	r2, r3
 8007470:	f000 fc71 	bl	8007d56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2160      	movs	r1, #96	@ 0x60
 800747a:	4618      	mov	r0, r3
 800747c:	f000 fc9b 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 8007480:	e01c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800748e:	461a      	mov	r2, r3
 8007490:	f000 fc32 	bl	8007cf8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2140      	movs	r1, #64	@ 0x40
 800749a:	4618      	mov	r0, r3
 800749c:	f000 fc8b 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 80074a0:	e00c      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4619      	mov	r1, r3
 80074ac:	4610      	mov	r0, r2
 80074ae:	f000 fc82 	bl	8007db6 <TIM_ITRx_SetConfig>
      break;
 80074b2:	e003      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      break;
 80074b8:	e000      	b.n	80074bc <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 80074ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	00100070 	.word	0x00100070
 80074dc:	00100050 	.word	0x00100050
 80074e0:	00100040 	.word	0x00100040
 80074e4:	00100030 	.word	0x00100030
 80074e8:	00100020 	.word	0x00100020

080074ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80074f4:	bf00      	nop
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a48      	ldr	r2, [pc, #288]	@ (8007684 <TIM_Base_SetConfig+0x134>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d013      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800756e:	d00f      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4a45      	ldr	r2, [pc, #276]	@ (8007688 <TIM_Base_SetConfig+0x138>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d00b      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	4a44      	ldr	r2, [pc, #272]	@ (800768c <TIM_Base_SetConfig+0x13c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d007      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a43      	ldr	r2, [pc, #268]	@ (8007690 <TIM_Base_SetConfig+0x140>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d003      	beq.n	8007590 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a42      	ldr	r2, [pc, #264]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d108      	bne.n	80075a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007596:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	685b      	ldr	r3, [r3, #4]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	4313      	orrs	r3, r2
 80075a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a37      	ldr	r2, [pc, #220]	@ (8007684 <TIM_Base_SetConfig+0x134>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d01f      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b0:	d01b      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4a34      	ldr	r2, [pc, #208]	@ (8007688 <TIM_Base_SetConfig+0x138>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d017      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	4a33      	ldr	r2, [pc, #204]	@ (800768c <TIM_Base_SetConfig+0x13c>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a32      	ldr	r2, [pc, #200]	@ (8007690 <TIM_Base_SetConfig+0x140>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d00f      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a32      	ldr	r2, [pc, #200]	@ (8007698 <TIM_Base_SetConfig+0x148>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d00b      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a31      	ldr	r2, [pc, #196]	@ (800769c <TIM_Base_SetConfig+0x14c>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d007      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a30      	ldr	r2, [pc, #192]	@ (80076a0 <TIM_Base_SetConfig+0x150>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d003      	beq.n	80075ea <TIM_Base_SetConfig+0x9a>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d108      	bne.n	80075fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	68fa      	ldr	r2, [r7, #12]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a18      	ldr	r2, [pc, #96]	@ (8007684 <TIM_Base_SetConfig+0x134>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d013      	beq.n	8007650 <TIM_Base_SetConfig+0x100>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a19      	ldr	r2, [pc, #100]	@ (8007690 <TIM_Base_SetConfig+0x140>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d00f      	beq.n	8007650 <TIM_Base_SetConfig+0x100>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a19      	ldr	r2, [pc, #100]	@ (8007698 <TIM_Base_SetConfig+0x148>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00b      	beq.n	8007650 <TIM_Base_SetConfig+0x100>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a18      	ldr	r2, [pc, #96]	@ (800769c <TIM_Base_SetConfig+0x14c>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d007      	beq.n	8007650 <TIM_Base_SetConfig+0x100>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	4a17      	ldr	r2, [pc, #92]	@ (80076a0 <TIM_Base_SetConfig+0x150>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d003      	beq.n	8007650 <TIM_Base_SetConfig+0x100>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a12      	ldr	r2, [pc, #72]	@ (8007694 <TIM_Base_SetConfig+0x144>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d103      	bne.n	8007658 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	691a      	ldr	r2, [r3, #16]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	f003 0301 	and.w	r3, r3, #1
 8007666:	2b01      	cmp	r3, #1
 8007668:	d105      	bne.n	8007676 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	f023 0201 	bic.w	r2, r3, #1
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	611a      	str	r2, [r3, #16]
  }
}
 8007676:	bf00      	nop
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40012c00 	.word	0x40012c00
 8007688:	40000400 	.word	0x40000400
 800768c:	40000800 	.word	0x40000800
 8007690:	40013400 	.word	0x40013400
 8007694:	40015000 	.word	0x40015000
 8007698:	40014000 	.word	0x40014000
 800769c:	40014400 	.word	0x40014400
 80076a0:	40014800 	.word	0x40014800

080076a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b087      	sub	sp, #28
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
 80076ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	f023 0201 	bic.w	r2, r3, #1
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f023 0303 	bic.w	r3, r3, #3
 80076de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	f023 0302 	bic.w	r3, r3, #2
 80076f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	4313      	orrs	r3, r2
 80076fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a30      	ldr	r2, [pc, #192]	@ (80077c0 <TIM_OC1_SetConfig+0x11c>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d013      	beq.n	800772c <TIM_OC1_SetConfig+0x88>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a2f      	ldr	r2, [pc, #188]	@ (80077c4 <TIM_OC1_SetConfig+0x120>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00f      	beq.n	800772c <TIM_OC1_SetConfig+0x88>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a2e      	ldr	r2, [pc, #184]	@ (80077c8 <TIM_OC1_SetConfig+0x124>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d00b      	beq.n	800772c <TIM_OC1_SetConfig+0x88>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a2d      	ldr	r2, [pc, #180]	@ (80077cc <TIM_OC1_SetConfig+0x128>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d007      	beq.n	800772c <TIM_OC1_SetConfig+0x88>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a2c      	ldr	r2, [pc, #176]	@ (80077d0 <TIM_OC1_SetConfig+0x12c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d003      	beq.n	800772c <TIM_OC1_SetConfig+0x88>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4a2b      	ldr	r2, [pc, #172]	@ (80077d4 <TIM_OC1_SetConfig+0x130>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d10c      	bne.n	8007746 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	f023 0308 	bic.w	r3, r3, #8
 8007732:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007734:	683b      	ldr	r3, [r7, #0]
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4313      	orrs	r3, r2
 800773c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	f023 0304 	bic.w	r3, r3, #4
 8007744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a1d      	ldr	r2, [pc, #116]	@ (80077c0 <TIM_OC1_SetConfig+0x11c>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <TIM_OC1_SetConfig+0xd2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a1c      	ldr	r2, [pc, #112]	@ (80077c4 <TIM_OC1_SetConfig+0x120>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00f      	beq.n	8007776 <TIM_OC1_SetConfig+0xd2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a1b      	ldr	r2, [pc, #108]	@ (80077c8 <TIM_OC1_SetConfig+0x124>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d00b      	beq.n	8007776 <TIM_OC1_SetConfig+0xd2>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a1a      	ldr	r2, [pc, #104]	@ (80077cc <TIM_OC1_SetConfig+0x128>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d007      	beq.n	8007776 <TIM_OC1_SetConfig+0xd2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a19      	ldr	r2, [pc, #100]	@ (80077d0 <TIM_OC1_SetConfig+0x12c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d003      	beq.n	8007776 <TIM_OC1_SetConfig+0xd2>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a18      	ldr	r2, [pc, #96]	@ (80077d4 <TIM_OC1_SetConfig+0x130>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d111      	bne.n	800779a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800777c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	695b      	ldr	r3, [r3, #20]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	4313      	orrs	r3, r2
 800778e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	693a      	ldr	r2, [r7, #16]
 8007796:	4313      	orrs	r3, r2
 8007798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	621a      	str	r2, [r3, #32]
}
 80077b4:	bf00      	nop
 80077b6:	371c      	adds	r7, #28
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	40012c00 	.word	0x40012c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800
 80077d4:	40015000 	.word	0x40015000

080077d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
 80077e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a1b      	ldr	r3, [r3, #32]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	f023 0210 	bic.w	r2, r3, #16
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	699b      	ldr	r3, [r3, #24]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007806:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800780a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007812:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	021b      	lsls	r3, r3, #8
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4313      	orrs	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	f023 0320 	bic.w	r3, r3, #32
 8007826:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	011b      	lsls	r3, r3, #4
 800782e:	697a      	ldr	r2, [r7, #20]
 8007830:	4313      	orrs	r3, r2
 8007832:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4a2c      	ldr	r2, [pc, #176]	@ (80078e8 <TIM_OC2_SetConfig+0x110>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d007      	beq.n	800784c <TIM_OC2_SetConfig+0x74>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a2b      	ldr	r2, [pc, #172]	@ (80078ec <TIM_OC2_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d003      	beq.n	800784c <TIM_OC2_SetConfig+0x74>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	4a2a      	ldr	r2, [pc, #168]	@ (80078f0 <TIM_OC2_SetConfig+0x118>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d10d      	bne.n	8007868 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	011b      	lsls	r3, r3, #4
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	4313      	orrs	r3, r2
 800785e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007866:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4a1f      	ldr	r2, [pc, #124]	@ (80078e8 <TIM_OC2_SetConfig+0x110>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <TIM_OC2_SetConfig+0xc0>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a1e      	ldr	r2, [pc, #120]	@ (80078ec <TIM_OC2_SetConfig+0x114>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00f      	beq.n	8007898 <TIM_OC2_SetConfig+0xc0>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a1e      	ldr	r2, [pc, #120]	@ (80078f4 <TIM_OC2_SetConfig+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00b      	beq.n	8007898 <TIM_OC2_SetConfig+0xc0>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a1d      	ldr	r2, [pc, #116]	@ (80078f8 <TIM_OC2_SetConfig+0x120>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d007      	beq.n	8007898 <TIM_OC2_SetConfig+0xc0>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a1c      	ldr	r2, [pc, #112]	@ (80078fc <TIM_OC2_SetConfig+0x124>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d003      	beq.n	8007898 <TIM_OC2_SetConfig+0xc0>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a17      	ldr	r2, [pc, #92]	@ (80078f0 <TIM_OC2_SetConfig+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d113      	bne.n	80078c0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007898:	693b      	ldr	r3, [r7, #16]
 800789a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800789e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80078a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	693a      	ldr	r2, [r7, #16]
 80078b0:	4313      	orrs	r3, r2
 80078b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	699b      	ldr	r3, [r3, #24]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	693a      	ldr	r2, [r7, #16]
 80078bc:	4313      	orrs	r3, r2
 80078be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	685a      	ldr	r2, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	697a      	ldr	r2, [r7, #20]
 80078d8:	621a      	str	r2, [r3, #32]
}
 80078da:	bf00      	nop
 80078dc:	371c      	adds	r7, #28
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	40012c00 	.word	0x40012c00
 80078ec:	40013400 	.word	0x40013400
 80078f0:	40015000 	.word	0x40015000
 80078f4:	40014000 	.word	0x40014000
 80078f8:	40014400 	.word	0x40014400
 80078fc:	40014800 	.word	0x40014800

08007900 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007900:	b480      	push	{r7}
 8007902:	b087      	sub	sp, #28
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
 8007908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a1b      	ldr	r3, [r3, #32]
 800790e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1b      	ldr	r3, [r3, #32]
 8007914:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	69db      	ldr	r3, [r3, #28]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800792e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007932:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f023 0303 	bic.w	r3, r3, #3
 800793a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68fa      	ldr	r2, [r7, #12]
 8007942:	4313      	orrs	r3, r2
 8007944:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800794c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	021b      	lsls	r3, r3, #8
 8007954:	697a      	ldr	r2, [r7, #20]
 8007956:	4313      	orrs	r3, r2
 8007958:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	4a2b      	ldr	r2, [pc, #172]	@ (8007a0c <TIM_OC3_SetConfig+0x10c>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d007      	beq.n	8007972 <TIM_OC3_SetConfig+0x72>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2a      	ldr	r2, [pc, #168]	@ (8007a10 <TIM_OC3_SetConfig+0x110>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d003      	beq.n	8007972 <TIM_OC3_SetConfig+0x72>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a29      	ldr	r2, [pc, #164]	@ (8007a14 <TIM_OC3_SetConfig+0x114>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d10d      	bne.n	800798e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007978:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	68db      	ldr	r3, [r3, #12]
 800797e:	021b      	lsls	r3, r3, #8
 8007980:	697a      	ldr	r2, [r7, #20]
 8007982:	4313      	orrs	r3, r2
 8007984:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007986:	697b      	ldr	r3, [r7, #20]
 8007988:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800798c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	4a1e      	ldr	r2, [pc, #120]	@ (8007a0c <TIM_OC3_SetConfig+0x10c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d013      	beq.n	80079be <TIM_OC3_SetConfig+0xbe>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	4a1d      	ldr	r2, [pc, #116]	@ (8007a10 <TIM_OC3_SetConfig+0x110>)
 800799a:	4293      	cmp	r3, r2
 800799c:	d00f      	beq.n	80079be <TIM_OC3_SetConfig+0xbe>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a18 <TIM_OC3_SetConfig+0x118>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	d00b      	beq.n	80079be <TIM_OC3_SetConfig+0xbe>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	4a1c      	ldr	r2, [pc, #112]	@ (8007a1c <TIM_OC3_SetConfig+0x11c>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d007      	beq.n	80079be <TIM_OC3_SetConfig+0xbe>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a20 <TIM_OC3_SetConfig+0x120>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d003      	beq.n	80079be <TIM_OC3_SetConfig+0xbe>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	4a16      	ldr	r2, [pc, #88]	@ (8007a14 <TIM_OC3_SetConfig+0x114>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d113      	bne.n	80079e6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	695b      	ldr	r3, [r3, #20]
 80079d2:	011b      	lsls	r3, r3, #4
 80079d4:	693a      	ldr	r2, [r7, #16]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	011b      	lsls	r3, r3, #4
 80079e0:	693a      	ldr	r2, [r7, #16]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	68fa      	ldr	r2, [r7, #12]
 80079f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	621a      	str	r2, [r3, #32]
}
 8007a00:	bf00      	nop
 8007a02:	371c      	adds	r7, #28
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr
 8007a0c:	40012c00 	.word	0x40012c00
 8007a10:	40013400 	.word	0x40013400
 8007a14:	40015000 	.word	0x40015000
 8007a18:	40014000 	.word	0x40014000
 8007a1c:	40014400 	.word	0x40014400
 8007a20:	40014800 	.word	0x40014800

08007a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	685b      	ldr	r3, [r3, #4]
 8007a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007a52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	021b      	lsls	r3, r3, #8
 8007a66:	68fa      	ldr	r2, [r7, #12]
 8007a68:	4313      	orrs	r3, r2
 8007a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	031b      	lsls	r3, r3, #12
 8007a7a:	697a      	ldr	r2, [r7, #20]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	4a2c      	ldr	r2, [pc, #176]	@ (8007b34 <TIM_OC4_SetConfig+0x110>)
 8007a84:	4293      	cmp	r3, r2
 8007a86:	d007      	beq.n	8007a98 <TIM_OC4_SetConfig+0x74>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	4a2b      	ldr	r2, [pc, #172]	@ (8007b38 <TIM_OC4_SetConfig+0x114>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d003      	beq.n	8007a98 <TIM_OC4_SetConfig+0x74>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	4a2a      	ldr	r2, [pc, #168]	@ (8007b3c <TIM_OC4_SetConfig+0x118>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d10d      	bne.n	8007ab4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	031b      	lsls	r3, r3, #12
 8007aa6:	697a      	ldr	r2, [r7, #20]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ab2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8007b34 <TIM_OC4_SetConfig+0x110>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d013      	beq.n	8007ae4 <TIM_OC4_SetConfig+0xc0>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	4a1e      	ldr	r2, [pc, #120]	@ (8007b38 <TIM_OC4_SetConfig+0x114>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00f      	beq.n	8007ae4 <TIM_OC4_SetConfig+0xc0>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8007b40 <TIM_OC4_SetConfig+0x11c>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00b      	beq.n	8007ae4 <TIM_OC4_SetConfig+0xc0>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a1d      	ldr	r2, [pc, #116]	@ (8007b44 <TIM_OC4_SetConfig+0x120>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_OC4_SetConfig+0xc0>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a1c      	ldr	r2, [pc, #112]	@ (8007b48 <TIM_OC4_SetConfig+0x124>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC4_SetConfig+0xc0>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a17      	ldr	r2, [pc, #92]	@ (8007b3c <TIM_OC4_SetConfig+0x118>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d113      	bne.n	8007b0c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007af2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	019b      	lsls	r3, r3, #6
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	4313      	orrs	r3, r2
 8007afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	019b      	lsls	r3, r3, #6
 8007b06:	693a      	ldr	r2, [r7, #16]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68fa      	ldr	r2, [r7, #12]
 8007b16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	697a      	ldr	r2, [r7, #20]
 8007b24:	621a      	str	r2, [r3, #32]
}
 8007b26:	bf00      	nop
 8007b28:	371c      	adds	r7, #28
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	40012c00 	.word	0x40012c00
 8007b38:	40013400 	.word	0x40013400
 8007b3c:	40015000 	.word	0x40015000
 8007b40:	40014000 	.word	0x40014000
 8007b44:	40014400 	.word	0x40014400
 8007b48:	40014800 	.word	0x40014800

08007b4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6a1b      	ldr	r3, [r3, #32]
 8007b60:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68fa      	ldr	r2, [r7, #12]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007b90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	041b      	lsls	r3, r3, #16
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4a19      	ldr	r2, [pc, #100]	@ (8007c08 <TIM_OC5_SetConfig+0xbc>)
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d013      	beq.n	8007bce <TIM_OC5_SetConfig+0x82>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4a18      	ldr	r2, [pc, #96]	@ (8007c0c <TIM_OC5_SetConfig+0xc0>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00f      	beq.n	8007bce <TIM_OC5_SetConfig+0x82>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	4a17      	ldr	r2, [pc, #92]	@ (8007c10 <TIM_OC5_SetConfig+0xc4>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d00b      	beq.n	8007bce <TIM_OC5_SetConfig+0x82>
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	4a16      	ldr	r2, [pc, #88]	@ (8007c14 <TIM_OC5_SetConfig+0xc8>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d007      	beq.n	8007bce <TIM_OC5_SetConfig+0x82>
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a15      	ldr	r2, [pc, #84]	@ (8007c18 <TIM_OC5_SetConfig+0xcc>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d003      	beq.n	8007bce <TIM_OC5_SetConfig+0x82>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a14      	ldr	r2, [pc, #80]	@ (8007c1c <TIM_OC5_SetConfig+0xd0>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d109      	bne.n	8007be2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007bce:	697b      	ldr	r3, [r7, #20]
 8007bd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	695b      	ldr	r3, [r3, #20]
 8007bda:	021b      	lsls	r3, r3, #8
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	4313      	orrs	r3, r2
 8007be0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	685a      	ldr	r2, [r3, #4]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	693a      	ldr	r2, [r7, #16]
 8007bfa:	621a      	str	r2, [r3, #32]
}
 8007bfc:	bf00      	nop
 8007bfe:	371c      	adds	r7, #28
 8007c00:	46bd      	mov	sp, r7
 8007c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c06:	4770      	bx	lr
 8007c08:	40012c00 	.word	0x40012c00
 8007c0c:	40013400 	.word	0x40013400
 8007c10:	40014000 	.word	0x40014000
 8007c14:	40014400 	.word	0x40014400
 8007c18:	40014800 	.word	0x40014800
 8007c1c:	40015000 	.word	0x40015000

08007c20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b087      	sub	sp, #28
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a1b      	ldr	r3, [r3, #32]
 8007c2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007c4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	021b      	lsls	r3, r3, #8
 8007c5a:	68fa      	ldr	r2, [r7, #12]
 8007c5c:	4313      	orrs	r3, r2
 8007c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007c66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	689b      	ldr	r3, [r3, #8]
 8007c6c:	051b      	lsls	r3, r3, #20
 8007c6e:	693a      	ldr	r2, [r7, #16]
 8007c70:	4313      	orrs	r3, r2
 8007c72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a1a      	ldr	r2, [pc, #104]	@ (8007ce0 <TIM_OC6_SetConfig+0xc0>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d013      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x84>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a19      	ldr	r2, [pc, #100]	@ (8007ce4 <TIM_OC6_SetConfig+0xc4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00f      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x84>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	4a18      	ldr	r2, [pc, #96]	@ (8007ce8 <TIM_OC6_SetConfig+0xc8>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x84>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a17      	ldr	r2, [pc, #92]	@ (8007cec <TIM_OC6_SetConfig+0xcc>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x84>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a16      	ldr	r2, [pc, #88]	@ (8007cf0 <TIM_OC6_SetConfig+0xd0>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_OC6_SetConfig+0x84>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a15      	ldr	r2, [pc, #84]	@ (8007cf4 <TIM_OC6_SetConfig+0xd4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d109      	bne.n	8007cb8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007caa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	029b      	lsls	r3, r3, #10
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	68fa      	ldr	r2, [r7, #12]
 8007cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	693a      	ldr	r2, [r7, #16]
 8007cd0:	621a      	str	r2, [r3, #32]
}
 8007cd2:	bf00      	nop
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr
 8007cde:	bf00      	nop
 8007ce0:	40012c00 	.word	0x40012c00
 8007ce4:	40013400 	.word	0x40013400
 8007ce8:	40014000 	.word	0x40014000
 8007cec:	40014400 	.word	0x40014400
 8007cf0:	40014800 	.word	0x40014800
 8007cf4:	40015000 	.word	0x40015000

08007cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b087      	sub	sp, #28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	6a1b      	ldr	r3, [r3, #32]
 8007d0e:	f023 0201 	bic.w	r2, r3, #1
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f023 030a 	bic.w	r3, r3, #10
 8007d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	621a      	str	r2, [r3, #32]
}
 8007d4a:	bf00      	nop
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr

08007d56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b087      	sub	sp, #28
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	60f8      	str	r0, [r7, #12]
 8007d5e:	60b9      	str	r1, [r7, #8]
 8007d60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6a1b      	ldr	r3, [r3, #32]
 8007d66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6a1b      	ldr	r3, [r3, #32]
 8007d6c:	f023 0210 	bic.w	r2, r3, #16
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	031b      	lsls	r3, r3, #12
 8007d86:	693a      	ldr	r2, [r7, #16]
 8007d88:	4313      	orrs	r3, r2
 8007d8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007d92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	011b      	lsls	r3, r3, #4
 8007d98:	697a      	ldr	r2, [r7, #20]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	693a      	ldr	r2, [r7, #16]
 8007da2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	621a      	str	r2, [r3, #32]
}
 8007daa:	bf00      	nop
 8007dac:	371c      	adds	r7, #28
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr

08007db6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007db6:	b480      	push	{r7}
 8007db8:	b085      	sub	sp, #20
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
 8007dbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007dcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dd0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007dd2:	683a      	ldr	r2, [r7, #0]
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f043 0307 	orr.w	r3, r3, #7
 8007ddc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	609a      	str	r2, [r3, #8]
}
 8007de4:	bf00      	nop
 8007de6:	3714      	adds	r7, #20
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	60b9      	str	r1, [r7, #8]
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	689b      	ldr	r3, [r3, #8]
 8007e02:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007e0a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	021a      	lsls	r2, r3, #8
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	431a      	orrs	r2, r3
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	4313      	orrs	r3, r2
 8007e18:	697a      	ldr	r2, [r7, #20]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	697a      	ldr	r2, [r7, #20]
 8007e22:	609a      	str	r2, [r3, #8]
}
 8007e24:	bf00      	nop
 8007e26:	371c      	adds	r7, #28
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b087      	sub	sp, #28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	2201      	movs	r2, #1
 8007e44:	fa02 f303 	lsl.w	r3, r2, r3
 8007e48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1a      	ldr	r2, [r3, #32]
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a1a      	ldr	r2, [r3, #32]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f003 031f 	and.w	r3, r3, #31
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	fa01 f303 	lsl.w	r3, r1, r3
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	621a      	str	r2, [r3, #32]
}
 8007e6e:	bf00      	nop
 8007e70:	371c      	adds	r7, #28
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b085      	sub	sp, #20
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d101      	bne.n	8007e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e06f      	b.n	8007f74 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2201      	movs	r2, #1
 8007e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	689b      	ldr	r3, [r3, #8]
 8007eb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4a31      	ldr	r2, [pc, #196]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d009      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4a30      	ldr	r2, [pc, #192]	@ (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d004      	beq.n	8007ed2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	d108      	bne.n	8007ee4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007ed8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	68fa      	ldr	r2, [r7, #12]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a1e      	ldr	r2, [pc, #120]	@ (8007f80 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d01d      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f14:	d018      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a1c      	ldr	r2, [pc, #112]	@ (8007f8c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d013      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a1a      	ldr	r2, [pc, #104]	@ (8007f90 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d00e      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a15      	ldr	r2, [pc, #84]	@ (8007f84 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d009      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a16      	ldr	r2, [pc, #88]	@ (8007f94 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d004      	beq.n	8007f48 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a11      	ldr	r2, [pc, #68]	@ (8007f88 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d10c      	bne.n	8007f62 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007f4e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2201      	movs	r2, #1
 8007f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007f72:	2300      	movs	r3, #0
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	40012c00 	.word	0x40012c00
 8007f84:	40013400 	.word	0x40013400
 8007f88:	40015000 	.word	0x40015000
 8007f8c:	40000400 	.word	0x40000400
 8007f90:	40000800 	.word	0x40000800
 8007f94:	40014000 	.word	0x40014000

08007f98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e078      	b.n	80080a6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	695b      	ldr	r3, [r3, #20]
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800801a:	4313      	orrs	r3, r2
 800801c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	699b      	ldr	r3, [r3, #24]
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	69db      	ldr	r3, [r3, #28]
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a1c      	ldr	r2, [pc, #112]	@ (80080b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d009      	beq.n	800805a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a1b      	ldr	r2, [pc, #108]	@ (80080b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d004      	beq.n	800805a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a19      	ldr	r2, [pc, #100]	@ (80080bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d11c      	bne.n	8008094 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008064:	051b      	lsls	r3, r3, #20
 8008066:	4313      	orrs	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80080a4:	2300      	movs	r3, #0
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	40012c00 	.word	0x40012c00
 80080b8:	40013400 	.word	0x40013400
 80080bc:	40015000 	.word	0x40015000

080080c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b083      	sub	sp, #12
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080c8:	bf00      	nop
 80080ca:	370c      	adds	r7, #12
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080dc:	bf00      	nop
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b083      	sub	sp, #12
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b083      	sub	sp, #12
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008104:	bf00      	nop
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008110:	b480      	push	{r7}
 8008112:	b083      	sub	sp, #12
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008118:	bf00      	nop
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008138:	b480      	push	{r7}
 800813a:	b083      	sub	sp, #12
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <_ZdlPvj>:
 800814c:	f000 b800 	b.w	8008150 <_ZdlPv>

08008150 <_ZdlPv>:
 8008150:	f000 bf60 	b.w	8009014 <free>

08008154 <pow>:
 8008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008156:	ed2d 8b02 	vpush	{d8}
 800815a:	eeb0 8a40 	vmov.f32	s16, s0
 800815e:	eef0 8a60 	vmov.f32	s17, s1
 8008162:	ec55 4b11 	vmov	r4, r5, d1
 8008166:	f000 f873 	bl	8008250 <__ieee754_pow>
 800816a:	4622      	mov	r2, r4
 800816c:	462b      	mov	r3, r5
 800816e:	4620      	mov	r0, r4
 8008170:	4629      	mov	r1, r5
 8008172:	ec57 6b10 	vmov	r6, r7, d0
 8008176:	f7f8 fca5 	bl	8000ac4 <__aeabi_dcmpun>
 800817a:	2800      	cmp	r0, #0
 800817c:	d13b      	bne.n	80081f6 <pow+0xa2>
 800817e:	ec51 0b18 	vmov	r0, r1, d8
 8008182:	2200      	movs	r2, #0
 8008184:	2300      	movs	r3, #0
 8008186:	f7f8 fc6b 	bl	8000a60 <__aeabi_dcmpeq>
 800818a:	b1b8      	cbz	r0, 80081bc <pow+0x68>
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	4620      	mov	r0, r4
 8008192:	4629      	mov	r1, r5
 8008194:	f7f8 fc64 	bl	8000a60 <__aeabi_dcmpeq>
 8008198:	2800      	cmp	r0, #0
 800819a:	d146      	bne.n	800822a <pow+0xd6>
 800819c:	ec45 4b10 	vmov	d0, r4, r5
 80081a0:	f000 f848 	bl	8008234 <finite>
 80081a4:	b338      	cbz	r0, 80081f6 <pow+0xa2>
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	4620      	mov	r0, r4
 80081ac:	4629      	mov	r1, r5
 80081ae:	f7f8 fc61 	bl	8000a74 <__aeabi_dcmplt>
 80081b2:	b300      	cbz	r0, 80081f6 <pow+0xa2>
 80081b4:	f000 ff4a 	bl	800904c <__errno>
 80081b8:	2322      	movs	r3, #34	@ 0x22
 80081ba:	e01b      	b.n	80081f4 <pow+0xa0>
 80081bc:	ec47 6b10 	vmov	d0, r6, r7
 80081c0:	f000 f838 	bl	8008234 <finite>
 80081c4:	b9e0      	cbnz	r0, 8008200 <pow+0xac>
 80081c6:	eeb0 0a48 	vmov.f32	s0, s16
 80081ca:	eef0 0a68 	vmov.f32	s1, s17
 80081ce:	f000 f831 	bl	8008234 <finite>
 80081d2:	b1a8      	cbz	r0, 8008200 <pow+0xac>
 80081d4:	ec45 4b10 	vmov	d0, r4, r5
 80081d8:	f000 f82c 	bl	8008234 <finite>
 80081dc:	b180      	cbz	r0, 8008200 <pow+0xac>
 80081de:	4632      	mov	r2, r6
 80081e0:	463b      	mov	r3, r7
 80081e2:	4630      	mov	r0, r6
 80081e4:	4639      	mov	r1, r7
 80081e6:	f7f8 fc6d 	bl	8000ac4 <__aeabi_dcmpun>
 80081ea:	2800      	cmp	r0, #0
 80081ec:	d0e2      	beq.n	80081b4 <pow+0x60>
 80081ee:	f000 ff2d 	bl	800904c <__errno>
 80081f2:	2321      	movs	r3, #33	@ 0x21
 80081f4:	6003      	str	r3, [r0, #0]
 80081f6:	ecbd 8b02 	vpop	{d8}
 80081fa:	ec47 6b10 	vmov	d0, r6, r7
 80081fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008200:	2200      	movs	r2, #0
 8008202:	2300      	movs	r3, #0
 8008204:	4630      	mov	r0, r6
 8008206:	4639      	mov	r1, r7
 8008208:	f7f8 fc2a 	bl	8000a60 <__aeabi_dcmpeq>
 800820c:	2800      	cmp	r0, #0
 800820e:	d0f2      	beq.n	80081f6 <pow+0xa2>
 8008210:	eeb0 0a48 	vmov.f32	s0, s16
 8008214:	eef0 0a68 	vmov.f32	s1, s17
 8008218:	f000 f80c 	bl	8008234 <finite>
 800821c:	2800      	cmp	r0, #0
 800821e:	d0ea      	beq.n	80081f6 <pow+0xa2>
 8008220:	ec45 4b10 	vmov	d0, r4, r5
 8008224:	f000 f806 	bl	8008234 <finite>
 8008228:	e7c3      	b.n	80081b2 <pow+0x5e>
 800822a:	4f01      	ldr	r7, [pc, #4]	@ (8008230 <pow+0xdc>)
 800822c:	2600      	movs	r6, #0
 800822e:	e7e2      	b.n	80081f6 <pow+0xa2>
 8008230:	3ff00000 	.word	0x3ff00000

08008234 <finite>:
 8008234:	b082      	sub	sp, #8
 8008236:	ed8d 0b00 	vstr	d0, [sp]
 800823a:	9801      	ldr	r0, [sp, #4]
 800823c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008240:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008244:	0fc0      	lsrs	r0, r0, #31
 8008246:	b002      	add	sp, #8
 8008248:	4770      	bx	lr
 800824a:	0000      	movs	r0, r0
 800824c:	0000      	movs	r0, r0
	...

08008250 <__ieee754_pow>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	b091      	sub	sp, #68	@ 0x44
 8008256:	ed8d 1b00 	vstr	d1, [sp]
 800825a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800825e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008262:	ea5a 0001 	orrs.w	r0, sl, r1
 8008266:	ec57 6b10 	vmov	r6, r7, d0
 800826a:	d113      	bne.n	8008294 <__ieee754_pow+0x44>
 800826c:	19b3      	adds	r3, r6, r6
 800826e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008272:	4152      	adcs	r2, r2
 8008274:	4298      	cmp	r0, r3
 8008276:	4b98      	ldr	r3, [pc, #608]	@ (80084d8 <__ieee754_pow+0x288>)
 8008278:	4193      	sbcs	r3, r2
 800827a:	f080 84ea 	bcs.w	8008c52 <__ieee754_pow+0xa02>
 800827e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008282:	4630      	mov	r0, r6
 8008284:	4639      	mov	r1, r7
 8008286:	f7f7 ffcd 	bl	8000224 <__adddf3>
 800828a:	ec41 0b10 	vmov	d0, r0, r1
 800828e:	b011      	add	sp, #68	@ 0x44
 8008290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008294:	4a91      	ldr	r2, [pc, #580]	@ (80084dc <__ieee754_pow+0x28c>)
 8008296:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800829a:	4590      	cmp	r8, r2
 800829c:	463d      	mov	r5, r7
 800829e:	4633      	mov	r3, r6
 80082a0:	d806      	bhi.n	80082b0 <__ieee754_pow+0x60>
 80082a2:	d101      	bne.n	80082a8 <__ieee754_pow+0x58>
 80082a4:	2e00      	cmp	r6, #0
 80082a6:	d1ea      	bne.n	800827e <__ieee754_pow+0x2e>
 80082a8:	4592      	cmp	sl, r2
 80082aa:	d801      	bhi.n	80082b0 <__ieee754_pow+0x60>
 80082ac:	d10e      	bne.n	80082cc <__ieee754_pow+0x7c>
 80082ae:	b169      	cbz	r1, 80082cc <__ieee754_pow+0x7c>
 80082b0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80082b4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80082b8:	431d      	orrs	r5, r3
 80082ba:	d1e0      	bne.n	800827e <__ieee754_pow+0x2e>
 80082bc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80082c0:	18db      	adds	r3, r3, r3
 80082c2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80082c6:	4152      	adcs	r2, r2
 80082c8:	429d      	cmp	r5, r3
 80082ca:	e7d4      	b.n	8008276 <__ieee754_pow+0x26>
 80082cc:	2d00      	cmp	r5, #0
 80082ce:	46c3      	mov	fp, r8
 80082d0:	da3a      	bge.n	8008348 <__ieee754_pow+0xf8>
 80082d2:	4a83      	ldr	r2, [pc, #524]	@ (80084e0 <__ieee754_pow+0x290>)
 80082d4:	4592      	cmp	sl, r2
 80082d6:	d84d      	bhi.n	8008374 <__ieee754_pow+0x124>
 80082d8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80082dc:	4592      	cmp	sl, r2
 80082de:	f240 84c7 	bls.w	8008c70 <__ieee754_pow+0xa20>
 80082e2:	ea4f 522a 	mov.w	r2, sl, asr #20
 80082e6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80082ea:	2a14      	cmp	r2, #20
 80082ec:	dd0f      	ble.n	800830e <__ieee754_pow+0xbe>
 80082ee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80082f2:	fa21 f402 	lsr.w	r4, r1, r2
 80082f6:	fa04 f202 	lsl.w	r2, r4, r2
 80082fa:	428a      	cmp	r2, r1
 80082fc:	f040 84b8 	bne.w	8008c70 <__ieee754_pow+0xa20>
 8008300:	f004 0401 	and.w	r4, r4, #1
 8008304:	f1c4 0402 	rsb	r4, r4, #2
 8008308:	2900      	cmp	r1, #0
 800830a:	d158      	bne.n	80083be <__ieee754_pow+0x16e>
 800830c:	e00e      	b.n	800832c <__ieee754_pow+0xdc>
 800830e:	2900      	cmp	r1, #0
 8008310:	d154      	bne.n	80083bc <__ieee754_pow+0x16c>
 8008312:	f1c2 0214 	rsb	r2, r2, #20
 8008316:	fa4a f402 	asr.w	r4, sl, r2
 800831a:	fa04 f202 	lsl.w	r2, r4, r2
 800831e:	4552      	cmp	r2, sl
 8008320:	f040 84a3 	bne.w	8008c6a <__ieee754_pow+0xa1a>
 8008324:	f004 0401 	and.w	r4, r4, #1
 8008328:	f1c4 0402 	rsb	r4, r4, #2
 800832c:	4a6d      	ldr	r2, [pc, #436]	@ (80084e4 <__ieee754_pow+0x294>)
 800832e:	4592      	cmp	sl, r2
 8008330:	d12e      	bne.n	8008390 <__ieee754_pow+0x140>
 8008332:	f1b9 0f00 	cmp.w	r9, #0
 8008336:	f280 8494 	bge.w	8008c62 <__ieee754_pow+0xa12>
 800833a:	496a      	ldr	r1, [pc, #424]	@ (80084e4 <__ieee754_pow+0x294>)
 800833c:	4632      	mov	r2, r6
 800833e:	463b      	mov	r3, r7
 8008340:	2000      	movs	r0, #0
 8008342:	f7f8 fa4f 	bl	80007e4 <__aeabi_ddiv>
 8008346:	e7a0      	b.n	800828a <__ieee754_pow+0x3a>
 8008348:	2400      	movs	r4, #0
 800834a:	bbc1      	cbnz	r1, 80083be <__ieee754_pow+0x16e>
 800834c:	4a63      	ldr	r2, [pc, #396]	@ (80084dc <__ieee754_pow+0x28c>)
 800834e:	4592      	cmp	sl, r2
 8008350:	d1ec      	bne.n	800832c <__ieee754_pow+0xdc>
 8008352:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8008356:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800835a:	431a      	orrs	r2, r3
 800835c:	f000 8479 	beq.w	8008c52 <__ieee754_pow+0xa02>
 8008360:	4b61      	ldr	r3, [pc, #388]	@ (80084e8 <__ieee754_pow+0x298>)
 8008362:	4598      	cmp	r8, r3
 8008364:	d908      	bls.n	8008378 <__ieee754_pow+0x128>
 8008366:	f1b9 0f00 	cmp.w	r9, #0
 800836a:	f2c0 8476 	blt.w	8008c5a <__ieee754_pow+0xa0a>
 800836e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008372:	e78a      	b.n	800828a <__ieee754_pow+0x3a>
 8008374:	2402      	movs	r4, #2
 8008376:	e7e8      	b.n	800834a <__ieee754_pow+0xfa>
 8008378:	f1b9 0f00 	cmp.w	r9, #0
 800837c:	f04f 0000 	mov.w	r0, #0
 8008380:	f04f 0100 	mov.w	r1, #0
 8008384:	da81      	bge.n	800828a <__ieee754_pow+0x3a>
 8008386:	e9dd 0300 	ldrd	r0, r3, [sp]
 800838a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800838e:	e77c      	b.n	800828a <__ieee754_pow+0x3a>
 8008390:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8008394:	d106      	bne.n	80083a4 <__ieee754_pow+0x154>
 8008396:	4632      	mov	r2, r6
 8008398:	463b      	mov	r3, r7
 800839a:	4630      	mov	r0, r6
 800839c:	4639      	mov	r1, r7
 800839e:	f7f8 f8f7 	bl	8000590 <__aeabi_dmul>
 80083a2:	e772      	b.n	800828a <__ieee754_pow+0x3a>
 80083a4:	4a51      	ldr	r2, [pc, #324]	@ (80084ec <__ieee754_pow+0x29c>)
 80083a6:	4591      	cmp	r9, r2
 80083a8:	d109      	bne.n	80083be <__ieee754_pow+0x16e>
 80083aa:	2d00      	cmp	r5, #0
 80083ac:	db07      	blt.n	80083be <__ieee754_pow+0x16e>
 80083ae:	ec47 6b10 	vmov	d0, r6, r7
 80083b2:	b011      	add	sp, #68	@ 0x44
 80083b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b8:	f000 bd52 	b.w	8008e60 <__ieee754_sqrt>
 80083bc:	2400      	movs	r4, #0
 80083be:	ec47 6b10 	vmov	d0, r6, r7
 80083c2:	9302      	str	r3, [sp, #8]
 80083c4:	f000 fc88 	bl	8008cd8 <fabs>
 80083c8:	9b02      	ldr	r3, [sp, #8]
 80083ca:	ec51 0b10 	vmov	r0, r1, d0
 80083ce:	bb53      	cbnz	r3, 8008426 <__ieee754_pow+0x1d6>
 80083d0:	4b44      	ldr	r3, [pc, #272]	@ (80084e4 <__ieee754_pow+0x294>)
 80083d2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d002      	beq.n	80083e0 <__ieee754_pow+0x190>
 80083da:	f1b8 0f00 	cmp.w	r8, #0
 80083de:	d122      	bne.n	8008426 <__ieee754_pow+0x1d6>
 80083e0:	f1b9 0f00 	cmp.w	r9, #0
 80083e4:	da05      	bge.n	80083f2 <__ieee754_pow+0x1a2>
 80083e6:	4602      	mov	r2, r0
 80083e8:	460b      	mov	r3, r1
 80083ea:	2000      	movs	r0, #0
 80083ec:	493d      	ldr	r1, [pc, #244]	@ (80084e4 <__ieee754_pow+0x294>)
 80083ee:	f7f8 f9f9 	bl	80007e4 <__aeabi_ddiv>
 80083f2:	2d00      	cmp	r5, #0
 80083f4:	f6bf af49 	bge.w	800828a <__ieee754_pow+0x3a>
 80083f8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80083fc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008400:	ea58 0804 	orrs.w	r8, r8, r4
 8008404:	d108      	bne.n	8008418 <__ieee754_pow+0x1c8>
 8008406:	4602      	mov	r2, r0
 8008408:	460b      	mov	r3, r1
 800840a:	4610      	mov	r0, r2
 800840c:	4619      	mov	r1, r3
 800840e:	f7f7 ff07 	bl	8000220 <__aeabi_dsub>
 8008412:	4602      	mov	r2, r0
 8008414:	460b      	mov	r3, r1
 8008416:	e794      	b.n	8008342 <__ieee754_pow+0xf2>
 8008418:	2c01      	cmp	r4, #1
 800841a:	f47f af36 	bne.w	800828a <__ieee754_pow+0x3a>
 800841e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008422:	4619      	mov	r1, r3
 8008424:	e731      	b.n	800828a <__ieee754_pow+0x3a>
 8008426:	0feb      	lsrs	r3, r5, #31
 8008428:	3b01      	subs	r3, #1
 800842a:	ea53 0204 	orrs.w	r2, r3, r4
 800842e:	d102      	bne.n	8008436 <__ieee754_pow+0x1e6>
 8008430:	4632      	mov	r2, r6
 8008432:	463b      	mov	r3, r7
 8008434:	e7e9      	b.n	800840a <__ieee754_pow+0x1ba>
 8008436:	3c01      	subs	r4, #1
 8008438:	431c      	orrs	r4, r3
 800843a:	d016      	beq.n	800846a <__ieee754_pow+0x21a>
 800843c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80084c8 <__ieee754_pow+0x278>
 8008440:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8008444:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008448:	f240 8112 	bls.w	8008670 <__ieee754_pow+0x420>
 800844c:	4b28      	ldr	r3, [pc, #160]	@ (80084f0 <__ieee754_pow+0x2a0>)
 800844e:	459a      	cmp	sl, r3
 8008450:	4b25      	ldr	r3, [pc, #148]	@ (80084e8 <__ieee754_pow+0x298>)
 8008452:	d916      	bls.n	8008482 <__ieee754_pow+0x232>
 8008454:	4598      	cmp	r8, r3
 8008456:	d80b      	bhi.n	8008470 <__ieee754_pow+0x220>
 8008458:	f1b9 0f00 	cmp.w	r9, #0
 800845c:	da0b      	bge.n	8008476 <__ieee754_pow+0x226>
 800845e:	2000      	movs	r0, #0
 8008460:	b011      	add	sp, #68	@ 0x44
 8008462:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008466:	f000 bcf3 	b.w	8008e50 <__math_oflow>
 800846a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80084d0 <__ieee754_pow+0x280>
 800846e:	e7e7      	b.n	8008440 <__ieee754_pow+0x1f0>
 8008470:	f1b9 0f00 	cmp.w	r9, #0
 8008474:	dcf3      	bgt.n	800845e <__ieee754_pow+0x20e>
 8008476:	2000      	movs	r0, #0
 8008478:	b011      	add	sp, #68	@ 0x44
 800847a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800847e:	f000 bcdf 	b.w	8008e40 <__math_uflow>
 8008482:	4598      	cmp	r8, r3
 8008484:	d20c      	bcs.n	80084a0 <__ieee754_pow+0x250>
 8008486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800848a:	2200      	movs	r2, #0
 800848c:	2300      	movs	r3, #0
 800848e:	f7f8 faf1 	bl	8000a74 <__aeabi_dcmplt>
 8008492:	3800      	subs	r0, #0
 8008494:	bf18      	it	ne
 8008496:	2001      	movne	r0, #1
 8008498:	f1b9 0f00 	cmp.w	r9, #0
 800849c:	daec      	bge.n	8008478 <__ieee754_pow+0x228>
 800849e:	e7df      	b.n	8008460 <__ieee754_pow+0x210>
 80084a0:	4b10      	ldr	r3, [pc, #64]	@ (80084e4 <__ieee754_pow+0x294>)
 80084a2:	4598      	cmp	r8, r3
 80084a4:	f04f 0200 	mov.w	r2, #0
 80084a8:	d924      	bls.n	80084f4 <__ieee754_pow+0x2a4>
 80084aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ae:	2300      	movs	r3, #0
 80084b0:	f7f8 fae0 	bl	8000a74 <__aeabi_dcmplt>
 80084b4:	3800      	subs	r0, #0
 80084b6:	bf18      	it	ne
 80084b8:	2001      	movne	r0, #1
 80084ba:	f1b9 0f00 	cmp.w	r9, #0
 80084be:	dccf      	bgt.n	8008460 <__ieee754_pow+0x210>
 80084c0:	e7da      	b.n	8008478 <__ieee754_pow+0x228>
 80084c2:	bf00      	nop
 80084c4:	f3af 8000 	nop.w
 80084c8:	00000000 	.word	0x00000000
 80084cc:	3ff00000 	.word	0x3ff00000
 80084d0:	00000000 	.word	0x00000000
 80084d4:	bff00000 	.word	0xbff00000
 80084d8:	fff00000 	.word	0xfff00000
 80084dc:	7ff00000 	.word	0x7ff00000
 80084e0:	433fffff 	.word	0x433fffff
 80084e4:	3ff00000 	.word	0x3ff00000
 80084e8:	3fefffff 	.word	0x3fefffff
 80084ec:	3fe00000 	.word	0x3fe00000
 80084f0:	43f00000 	.word	0x43f00000
 80084f4:	4b5a      	ldr	r3, [pc, #360]	@ (8008660 <__ieee754_pow+0x410>)
 80084f6:	f7f7 fe93 	bl	8000220 <__aeabi_dsub>
 80084fa:	a351      	add	r3, pc, #324	@ (adr r3, 8008640 <__ieee754_pow+0x3f0>)
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	4604      	mov	r4, r0
 8008502:	460d      	mov	r5, r1
 8008504:	f7f8 f844 	bl	8000590 <__aeabi_dmul>
 8008508:	a34f      	add	r3, pc, #316	@ (adr r3, 8008648 <__ieee754_pow+0x3f8>)
 800850a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850e:	4606      	mov	r6, r0
 8008510:	460f      	mov	r7, r1
 8008512:	4620      	mov	r0, r4
 8008514:	4629      	mov	r1, r5
 8008516:	f7f8 f83b 	bl	8000590 <__aeabi_dmul>
 800851a:	4b52      	ldr	r3, [pc, #328]	@ (8008664 <__ieee754_pow+0x414>)
 800851c:	4682      	mov	sl, r0
 800851e:	468b      	mov	fp, r1
 8008520:	2200      	movs	r2, #0
 8008522:	4620      	mov	r0, r4
 8008524:	4629      	mov	r1, r5
 8008526:	f7f8 f833 	bl	8000590 <__aeabi_dmul>
 800852a:	4602      	mov	r2, r0
 800852c:	460b      	mov	r3, r1
 800852e:	a148      	add	r1, pc, #288	@ (adr r1, 8008650 <__ieee754_pow+0x400>)
 8008530:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008534:	f7f7 fe74 	bl	8000220 <__aeabi_dsub>
 8008538:	4622      	mov	r2, r4
 800853a:	462b      	mov	r3, r5
 800853c:	f7f8 f828 	bl	8000590 <__aeabi_dmul>
 8008540:	4602      	mov	r2, r0
 8008542:	460b      	mov	r3, r1
 8008544:	2000      	movs	r0, #0
 8008546:	4948      	ldr	r1, [pc, #288]	@ (8008668 <__ieee754_pow+0x418>)
 8008548:	f7f7 fe6a 	bl	8000220 <__aeabi_dsub>
 800854c:	4622      	mov	r2, r4
 800854e:	4680      	mov	r8, r0
 8008550:	4689      	mov	r9, r1
 8008552:	462b      	mov	r3, r5
 8008554:	4620      	mov	r0, r4
 8008556:	4629      	mov	r1, r5
 8008558:	f7f8 f81a 	bl	8000590 <__aeabi_dmul>
 800855c:	4602      	mov	r2, r0
 800855e:	460b      	mov	r3, r1
 8008560:	4640      	mov	r0, r8
 8008562:	4649      	mov	r1, r9
 8008564:	f7f8 f814 	bl	8000590 <__aeabi_dmul>
 8008568:	a33b      	add	r3, pc, #236	@ (adr r3, 8008658 <__ieee754_pow+0x408>)
 800856a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800856e:	f7f8 f80f 	bl	8000590 <__aeabi_dmul>
 8008572:	4602      	mov	r2, r0
 8008574:	460b      	mov	r3, r1
 8008576:	4650      	mov	r0, sl
 8008578:	4659      	mov	r1, fp
 800857a:	f7f7 fe51 	bl	8000220 <__aeabi_dsub>
 800857e:	4602      	mov	r2, r0
 8008580:	460b      	mov	r3, r1
 8008582:	4680      	mov	r8, r0
 8008584:	4689      	mov	r9, r1
 8008586:	4630      	mov	r0, r6
 8008588:	4639      	mov	r1, r7
 800858a:	f7f7 fe4b 	bl	8000224 <__adddf3>
 800858e:	2400      	movs	r4, #0
 8008590:	4632      	mov	r2, r6
 8008592:	463b      	mov	r3, r7
 8008594:	4620      	mov	r0, r4
 8008596:	460d      	mov	r5, r1
 8008598:	f7f7 fe42 	bl	8000220 <__aeabi_dsub>
 800859c:	4602      	mov	r2, r0
 800859e:	460b      	mov	r3, r1
 80085a0:	4640      	mov	r0, r8
 80085a2:	4649      	mov	r1, r9
 80085a4:	f7f7 fe3c 	bl	8000220 <__aeabi_dsub>
 80085a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80085b0:	2300      	movs	r3, #0
 80085b2:	9304      	str	r3, [sp, #16]
 80085b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80085b8:	4606      	mov	r6, r0
 80085ba:	460f      	mov	r7, r1
 80085bc:	4652      	mov	r2, sl
 80085be:	465b      	mov	r3, fp
 80085c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085c4:	f7f7 fe2c 	bl	8000220 <__aeabi_dsub>
 80085c8:	4622      	mov	r2, r4
 80085ca:	462b      	mov	r3, r5
 80085cc:	f7f7 ffe0 	bl	8000590 <__aeabi_dmul>
 80085d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d4:	4680      	mov	r8, r0
 80085d6:	4689      	mov	r9, r1
 80085d8:	4630      	mov	r0, r6
 80085da:	4639      	mov	r1, r7
 80085dc:	f7f7 ffd8 	bl	8000590 <__aeabi_dmul>
 80085e0:	4602      	mov	r2, r0
 80085e2:	460b      	mov	r3, r1
 80085e4:	4640      	mov	r0, r8
 80085e6:	4649      	mov	r1, r9
 80085e8:	f7f7 fe1c 	bl	8000224 <__adddf3>
 80085ec:	4652      	mov	r2, sl
 80085ee:	465b      	mov	r3, fp
 80085f0:	4606      	mov	r6, r0
 80085f2:	460f      	mov	r7, r1
 80085f4:	4620      	mov	r0, r4
 80085f6:	4629      	mov	r1, r5
 80085f8:	f7f7 ffca 	bl	8000590 <__aeabi_dmul>
 80085fc:	460b      	mov	r3, r1
 80085fe:	4602      	mov	r2, r0
 8008600:	4680      	mov	r8, r0
 8008602:	4689      	mov	r9, r1
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f7 fe0c 	bl	8000224 <__adddf3>
 800860c:	4b17      	ldr	r3, [pc, #92]	@ (800866c <__ieee754_pow+0x41c>)
 800860e:	4299      	cmp	r1, r3
 8008610:	4604      	mov	r4, r0
 8008612:	460d      	mov	r5, r1
 8008614:	468a      	mov	sl, r1
 8008616:	468b      	mov	fp, r1
 8008618:	f340 82ef 	ble.w	8008bfa <__ieee754_pow+0x9aa>
 800861c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008620:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008624:	4303      	orrs	r3, r0
 8008626:	f000 81e8 	beq.w	80089fa <__ieee754_pow+0x7aa>
 800862a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800862e:	2200      	movs	r2, #0
 8008630:	2300      	movs	r3, #0
 8008632:	f7f8 fa1f 	bl	8000a74 <__aeabi_dcmplt>
 8008636:	3800      	subs	r0, #0
 8008638:	bf18      	it	ne
 800863a:	2001      	movne	r0, #1
 800863c:	e710      	b.n	8008460 <__ieee754_pow+0x210>
 800863e:	bf00      	nop
 8008640:	60000000 	.word	0x60000000
 8008644:	3ff71547 	.word	0x3ff71547
 8008648:	f85ddf44 	.word	0xf85ddf44
 800864c:	3e54ae0b 	.word	0x3e54ae0b
 8008650:	55555555 	.word	0x55555555
 8008654:	3fd55555 	.word	0x3fd55555
 8008658:	652b82fe 	.word	0x652b82fe
 800865c:	3ff71547 	.word	0x3ff71547
 8008660:	3ff00000 	.word	0x3ff00000
 8008664:	3fd00000 	.word	0x3fd00000
 8008668:	3fe00000 	.word	0x3fe00000
 800866c:	408fffff 	.word	0x408fffff
 8008670:	4bd5      	ldr	r3, [pc, #852]	@ (80089c8 <__ieee754_pow+0x778>)
 8008672:	402b      	ands	r3, r5
 8008674:	2200      	movs	r2, #0
 8008676:	b92b      	cbnz	r3, 8008684 <__ieee754_pow+0x434>
 8008678:	4bd4      	ldr	r3, [pc, #848]	@ (80089cc <__ieee754_pow+0x77c>)
 800867a:	f7f7 ff89 	bl	8000590 <__aeabi_dmul>
 800867e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008682:	468b      	mov	fp, r1
 8008684:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008688:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800868c:	4413      	add	r3, r2
 800868e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008690:	4bcf      	ldr	r3, [pc, #828]	@ (80089d0 <__ieee754_pow+0x780>)
 8008692:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008696:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800869a:	459b      	cmp	fp, r3
 800869c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80086a0:	dd08      	ble.n	80086b4 <__ieee754_pow+0x464>
 80086a2:	4bcc      	ldr	r3, [pc, #816]	@ (80089d4 <__ieee754_pow+0x784>)
 80086a4:	459b      	cmp	fp, r3
 80086a6:	f340 81a5 	ble.w	80089f4 <__ieee754_pow+0x7a4>
 80086aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ac:	3301      	adds	r3, #1
 80086ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80086b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80086b4:	f04f 0a00 	mov.w	sl, #0
 80086b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80086bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086be:	4bc6      	ldr	r3, [pc, #792]	@ (80089d8 <__ieee754_pow+0x788>)
 80086c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80086c4:	ed93 7b00 	vldr	d7, [r3]
 80086c8:	4629      	mov	r1, r5
 80086ca:	ec53 2b17 	vmov	r2, r3, d7
 80086ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 80086d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80086d6:	f7f7 fda3 	bl	8000220 <__aeabi_dsub>
 80086da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80086de:	4606      	mov	r6, r0
 80086e0:	460f      	mov	r7, r1
 80086e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80086e6:	f7f7 fd9d 	bl	8000224 <__adddf3>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	2000      	movs	r0, #0
 80086f0:	49ba      	ldr	r1, [pc, #744]	@ (80089dc <__ieee754_pow+0x78c>)
 80086f2:	f7f8 f877 	bl	80007e4 <__aeabi_ddiv>
 80086f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	4630      	mov	r0, r6
 8008700:	4639      	mov	r1, r7
 8008702:	f7f7 ff45 	bl	8000590 <__aeabi_dmul>
 8008706:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800870a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800870e:	106d      	asrs	r5, r5, #1
 8008710:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008714:	f04f 0b00 	mov.w	fp, #0
 8008718:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800871c:	4661      	mov	r1, ip
 800871e:	2200      	movs	r2, #0
 8008720:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008724:	4658      	mov	r0, fp
 8008726:	46e1      	mov	r9, ip
 8008728:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800872c:	4614      	mov	r4, r2
 800872e:	461d      	mov	r5, r3
 8008730:	f7f7 ff2e 	bl	8000590 <__aeabi_dmul>
 8008734:	4602      	mov	r2, r0
 8008736:	460b      	mov	r3, r1
 8008738:	4630      	mov	r0, r6
 800873a:	4639      	mov	r1, r7
 800873c:	f7f7 fd70 	bl	8000220 <__aeabi_dsub>
 8008740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008744:	4606      	mov	r6, r0
 8008746:	460f      	mov	r7, r1
 8008748:	4620      	mov	r0, r4
 800874a:	4629      	mov	r1, r5
 800874c:	f7f7 fd68 	bl	8000220 <__aeabi_dsub>
 8008750:	4602      	mov	r2, r0
 8008752:	460b      	mov	r3, r1
 8008754:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008758:	f7f7 fd62 	bl	8000220 <__aeabi_dsub>
 800875c:	465a      	mov	r2, fp
 800875e:	464b      	mov	r3, r9
 8008760:	f7f7 ff16 	bl	8000590 <__aeabi_dmul>
 8008764:	4602      	mov	r2, r0
 8008766:	460b      	mov	r3, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 fd58 	bl	8000220 <__aeabi_dsub>
 8008770:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008774:	f7f7 ff0c 	bl	8000590 <__aeabi_dmul>
 8008778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008780:	4610      	mov	r0, r2
 8008782:	4619      	mov	r1, r3
 8008784:	f7f7 ff04 	bl	8000590 <__aeabi_dmul>
 8008788:	a37d      	add	r3, pc, #500	@ (adr r3, 8008980 <__ieee754_pow+0x730>)
 800878a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800878e:	4604      	mov	r4, r0
 8008790:	460d      	mov	r5, r1
 8008792:	f7f7 fefd 	bl	8000590 <__aeabi_dmul>
 8008796:	a37c      	add	r3, pc, #496	@ (adr r3, 8008988 <__ieee754_pow+0x738>)
 8008798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879c:	f7f7 fd42 	bl	8000224 <__adddf3>
 80087a0:	4622      	mov	r2, r4
 80087a2:	462b      	mov	r3, r5
 80087a4:	f7f7 fef4 	bl	8000590 <__aeabi_dmul>
 80087a8:	a379      	add	r3, pc, #484	@ (adr r3, 8008990 <__ieee754_pow+0x740>)
 80087aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ae:	f7f7 fd39 	bl	8000224 <__adddf3>
 80087b2:	4622      	mov	r2, r4
 80087b4:	462b      	mov	r3, r5
 80087b6:	f7f7 feeb 	bl	8000590 <__aeabi_dmul>
 80087ba:	a377      	add	r3, pc, #476	@ (adr r3, 8008998 <__ieee754_pow+0x748>)
 80087bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c0:	f7f7 fd30 	bl	8000224 <__adddf3>
 80087c4:	4622      	mov	r2, r4
 80087c6:	462b      	mov	r3, r5
 80087c8:	f7f7 fee2 	bl	8000590 <__aeabi_dmul>
 80087cc:	a374      	add	r3, pc, #464	@ (adr r3, 80089a0 <__ieee754_pow+0x750>)
 80087ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d2:	f7f7 fd27 	bl	8000224 <__adddf3>
 80087d6:	4622      	mov	r2, r4
 80087d8:	462b      	mov	r3, r5
 80087da:	f7f7 fed9 	bl	8000590 <__aeabi_dmul>
 80087de:	a372      	add	r3, pc, #456	@ (adr r3, 80089a8 <__ieee754_pow+0x758>)
 80087e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e4:	f7f7 fd1e 	bl	8000224 <__adddf3>
 80087e8:	4622      	mov	r2, r4
 80087ea:	4606      	mov	r6, r0
 80087ec:	460f      	mov	r7, r1
 80087ee:	462b      	mov	r3, r5
 80087f0:	4620      	mov	r0, r4
 80087f2:	4629      	mov	r1, r5
 80087f4:	f7f7 fecc 	bl	8000590 <__aeabi_dmul>
 80087f8:	4602      	mov	r2, r0
 80087fa:	460b      	mov	r3, r1
 80087fc:	4630      	mov	r0, r6
 80087fe:	4639      	mov	r1, r7
 8008800:	f7f7 fec6 	bl	8000590 <__aeabi_dmul>
 8008804:	465a      	mov	r2, fp
 8008806:	4604      	mov	r4, r0
 8008808:	460d      	mov	r5, r1
 800880a:	464b      	mov	r3, r9
 800880c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008810:	f7f7 fd08 	bl	8000224 <__adddf3>
 8008814:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008818:	f7f7 feba 	bl	8000590 <__aeabi_dmul>
 800881c:	4622      	mov	r2, r4
 800881e:	462b      	mov	r3, r5
 8008820:	f7f7 fd00 	bl	8000224 <__adddf3>
 8008824:	465a      	mov	r2, fp
 8008826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800882a:	464b      	mov	r3, r9
 800882c:	4658      	mov	r0, fp
 800882e:	4649      	mov	r1, r9
 8008830:	f7f7 feae 	bl	8000590 <__aeabi_dmul>
 8008834:	4b6a      	ldr	r3, [pc, #424]	@ (80089e0 <__ieee754_pow+0x790>)
 8008836:	2200      	movs	r2, #0
 8008838:	4606      	mov	r6, r0
 800883a:	460f      	mov	r7, r1
 800883c:	f7f7 fcf2 	bl	8000224 <__adddf3>
 8008840:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008844:	f7f7 fcee 	bl	8000224 <__adddf3>
 8008848:	46d8      	mov	r8, fp
 800884a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800884e:	460d      	mov	r5, r1
 8008850:	465a      	mov	r2, fp
 8008852:	460b      	mov	r3, r1
 8008854:	4640      	mov	r0, r8
 8008856:	4649      	mov	r1, r9
 8008858:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800885c:	f7f7 fe98 	bl	8000590 <__aeabi_dmul>
 8008860:	465c      	mov	r4, fp
 8008862:	4680      	mov	r8, r0
 8008864:	4689      	mov	r9, r1
 8008866:	4b5e      	ldr	r3, [pc, #376]	@ (80089e0 <__ieee754_pow+0x790>)
 8008868:	2200      	movs	r2, #0
 800886a:	4620      	mov	r0, r4
 800886c:	4629      	mov	r1, r5
 800886e:	f7f7 fcd7 	bl	8000220 <__aeabi_dsub>
 8008872:	4632      	mov	r2, r6
 8008874:	463b      	mov	r3, r7
 8008876:	f7f7 fcd3 	bl	8000220 <__aeabi_dsub>
 800887a:	4602      	mov	r2, r0
 800887c:	460b      	mov	r3, r1
 800887e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008882:	f7f7 fccd 	bl	8000220 <__aeabi_dsub>
 8008886:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800888a:	f7f7 fe81 	bl	8000590 <__aeabi_dmul>
 800888e:	4622      	mov	r2, r4
 8008890:	4606      	mov	r6, r0
 8008892:	460f      	mov	r7, r1
 8008894:	462b      	mov	r3, r5
 8008896:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800889a:	f7f7 fe79 	bl	8000590 <__aeabi_dmul>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4630      	mov	r0, r6
 80088a4:	4639      	mov	r1, r7
 80088a6:	f7f7 fcbd 	bl	8000224 <__adddf3>
 80088aa:	4606      	mov	r6, r0
 80088ac:	460f      	mov	r7, r1
 80088ae:	4602      	mov	r2, r0
 80088b0:	460b      	mov	r3, r1
 80088b2:	4640      	mov	r0, r8
 80088b4:	4649      	mov	r1, r9
 80088b6:	f7f7 fcb5 	bl	8000224 <__adddf3>
 80088ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 80088be:	a33c      	add	r3, pc, #240	@ (adr r3, 80089b0 <__ieee754_pow+0x760>)
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	4658      	mov	r0, fp
 80088c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80088ca:	460d      	mov	r5, r1
 80088cc:	f7f7 fe60 	bl	8000590 <__aeabi_dmul>
 80088d0:	465c      	mov	r4, fp
 80088d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d6:	4642      	mov	r2, r8
 80088d8:	464b      	mov	r3, r9
 80088da:	4620      	mov	r0, r4
 80088dc:	4629      	mov	r1, r5
 80088de:	f7f7 fc9f 	bl	8000220 <__aeabi_dsub>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4630      	mov	r0, r6
 80088e8:	4639      	mov	r1, r7
 80088ea:	f7f7 fc99 	bl	8000220 <__aeabi_dsub>
 80088ee:	a332      	add	r3, pc, #200	@ (adr r3, 80089b8 <__ieee754_pow+0x768>)
 80088f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f4:	f7f7 fe4c 	bl	8000590 <__aeabi_dmul>
 80088f8:	a331      	add	r3, pc, #196	@ (adr r3, 80089c0 <__ieee754_pow+0x770>)
 80088fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088fe:	4606      	mov	r6, r0
 8008900:	460f      	mov	r7, r1
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f7 fe43 	bl	8000590 <__aeabi_dmul>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 fc87 	bl	8000224 <__adddf3>
 8008916:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008918:	4b32      	ldr	r3, [pc, #200]	@ (80089e4 <__ieee754_pow+0x794>)
 800891a:	4413      	add	r3, r2
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fc80 	bl	8000224 <__adddf3>
 8008924:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008928:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800892a:	f7f7 fdc7 	bl	80004bc <__aeabi_i2d>
 800892e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008930:	4b2d      	ldr	r3, [pc, #180]	@ (80089e8 <__ieee754_pow+0x798>)
 8008932:	4413      	add	r3, r2
 8008934:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008938:	4606      	mov	r6, r0
 800893a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800893e:	460f      	mov	r7, r1
 8008940:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008944:	f7f7 fc6e 	bl	8000224 <__adddf3>
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	f7f7 fc6a 	bl	8000224 <__adddf3>
 8008950:	4632      	mov	r2, r6
 8008952:	463b      	mov	r3, r7
 8008954:	f7f7 fc66 	bl	8000224 <__adddf3>
 8008958:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800895c:	4632      	mov	r2, r6
 800895e:	463b      	mov	r3, r7
 8008960:	4658      	mov	r0, fp
 8008962:	460d      	mov	r5, r1
 8008964:	f7f7 fc5c 	bl	8000220 <__aeabi_dsub>
 8008968:	4642      	mov	r2, r8
 800896a:	464b      	mov	r3, r9
 800896c:	f7f7 fc58 	bl	8000220 <__aeabi_dsub>
 8008970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008974:	f7f7 fc54 	bl	8000220 <__aeabi_dsub>
 8008978:	465c      	mov	r4, fp
 800897a:	4602      	mov	r2, r0
 800897c:	e036      	b.n	80089ec <__ieee754_pow+0x79c>
 800897e:	bf00      	nop
 8008980:	4a454eef 	.word	0x4a454eef
 8008984:	3fca7e28 	.word	0x3fca7e28
 8008988:	93c9db65 	.word	0x93c9db65
 800898c:	3fcd864a 	.word	0x3fcd864a
 8008990:	a91d4101 	.word	0xa91d4101
 8008994:	3fd17460 	.word	0x3fd17460
 8008998:	518f264d 	.word	0x518f264d
 800899c:	3fd55555 	.word	0x3fd55555
 80089a0:	db6fabff 	.word	0xdb6fabff
 80089a4:	3fdb6db6 	.word	0x3fdb6db6
 80089a8:	33333303 	.word	0x33333303
 80089ac:	3fe33333 	.word	0x3fe33333
 80089b0:	e0000000 	.word	0xe0000000
 80089b4:	3feec709 	.word	0x3feec709
 80089b8:	dc3a03fd 	.word	0xdc3a03fd
 80089bc:	3feec709 	.word	0x3feec709
 80089c0:	145b01f5 	.word	0x145b01f5
 80089c4:	be3e2fe0 	.word	0xbe3e2fe0
 80089c8:	7ff00000 	.word	0x7ff00000
 80089cc:	43400000 	.word	0x43400000
 80089d0:	0003988e 	.word	0x0003988e
 80089d4:	000bb679 	.word	0x000bb679
 80089d8:	080091c0 	.word	0x080091c0
 80089dc:	3ff00000 	.word	0x3ff00000
 80089e0:	40080000 	.word	0x40080000
 80089e4:	080091a0 	.word	0x080091a0
 80089e8:	080091b0 	.word	0x080091b0
 80089ec:	460b      	mov	r3, r1
 80089ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089f2:	e5d7      	b.n	80085a4 <__ieee754_pow+0x354>
 80089f4:	f04f 0a01 	mov.w	sl, #1
 80089f8:	e65e      	b.n	80086b8 <__ieee754_pow+0x468>
 80089fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008ccc <__ieee754_pow+0xa7c>)
 80089fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fc0e 	bl	8000224 <__adddf3>
 8008a08:	4642      	mov	r2, r8
 8008a0a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a0e:	464b      	mov	r3, r9
 8008a10:	4620      	mov	r0, r4
 8008a12:	4629      	mov	r1, r5
 8008a14:	f7f7 fc04 	bl	8000220 <__aeabi_dsub>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a20:	f7f8 f846 	bl	8000ab0 <__aeabi_dcmpgt>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	f47f ae00 	bne.w	800862a <__ieee754_pow+0x3da>
 8008a2a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008a2e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008a32:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008a36:	fa43 fa0a 	asr.w	sl, r3, sl
 8008a3a:	44da      	add	sl, fp
 8008a3c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008a40:	489d      	ldr	r0, [pc, #628]	@ (8008cb8 <__ieee754_pow+0xa68>)
 8008a42:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008a46:	4108      	asrs	r0, r1
 8008a48:	ea00 030a 	and.w	r3, r0, sl
 8008a4c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008a50:	f1c1 0114 	rsb	r1, r1, #20
 8008a54:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008a58:	fa4a fa01 	asr.w	sl, sl, r1
 8008a5c:	f1bb 0f00 	cmp.w	fp, #0
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f04f 0200 	mov.w	r2, #0
 8008a68:	bfb8      	it	lt
 8008a6a:	f1ca 0a00 	rsblt	sl, sl, #0
 8008a6e:	f7f7 fbd7 	bl	8000220 <__aeabi_dsub>
 8008a72:	4680      	mov	r8, r0
 8008a74:	4689      	mov	r9, r1
 8008a76:	4632      	mov	r2, r6
 8008a78:	463b      	mov	r3, r7
 8008a7a:	4640      	mov	r0, r8
 8008a7c:	4649      	mov	r1, r9
 8008a7e:	f7f7 fbd1 	bl	8000224 <__adddf3>
 8008a82:	2400      	movs	r4, #0
 8008a84:	a37c      	add	r3, pc, #496	@ (adr r3, 8008c78 <__ieee754_pow+0xa28>)
 8008a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	460d      	mov	r5, r1
 8008a8e:	f7f7 fd7f 	bl	8000590 <__aeabi_dmul>
 8008a92:	4642      	mov	r2, r8
 8008a94:	e9cd 0100 	strd	r0, r1, [sp]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	f7f7 fbbf 	bl	8000220 <__aeabi_dsub>
 8008aa2:	4602      	mov	r2, r0
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	4630      	mov	r0, r6
 8008aa8:	4639      	mov	r1, r7
 8008aaa:	f7f7 fbb9 	bl	8000220 <__aeabi_dsub>
 8008aae:	a374      	add	r3, pc, #464	@ (adr r3, 8008c80 <__ieee754_pow+0xa30>)
 8008ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab4:	f7f7 fd6c 	bl	8000590 <__aeabi_dmul>
 8008ab8:	a373      	add	r3, pc, #460	@ (adr r3, 8008c88 <__ieee754_pow+0xa38>)
 8008aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008abe:	4680      	mov	r8, r0
 8008ac0:	4689      	mov	r9, r1
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	4629      	mov	r1, r5
 8008ac6:	f7f7 fd63 	bl	8000590 <__aeabi_dmul>
 8008aca:	4602      	mov	r2, r0
 8008acc:	460b      	mov	r3, r1
 8008ace:	4640      	mov	r0, r8
 8008ad0:	4649      	mov	r1, r9
 8008ad2:	f7f7 fba7 	bl	8000224 <__adddf3>
 8008ad6:	4604      	mov	r4, r0
 8008ad8:	460d      	mov	r5, r1
 8008ada:	4602      	mov	r2, r0
 8008adc:	460b      	mov	r3, r1
 8008ade:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ae2:	f7f7 fb9f 	bl	8000224 <__adddf3>
 8008ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008aea:	4680      	mov	r8, r0
 8008aec:	4689      	mov	r9, r1
 8008aee:	f7f7 fb97 	bl	8000220 <__aeabi_dsub>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fb91 	bl	8000220 <__aeabi_dsub>
 8008afe:	4642      	mov	r2, r8
 8008b00:	4606      	mov	r6, r0
 8008b02:	460f      	mov	r7, r1
 8008b04:	464b      	mov	r3, r9
 8008b06:	4640      	mov	r0, r8
 8008b08:	4649      	mov	r1, r9
 8008b0a:	f7f7 fd41 	bl	8000590 <__aeabi_dmul>
 8008b0e:	a360      	add	r3, pc, #384	@ (adr r3, 8008c90 <__ieee754_pow+0xa40>)
 8008b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	f7f7 fd3a 	bl	8000590 <__aeabi_dmul>
 8008b1c:	a35e      	add	r3, pc, #376	@ (adr r3, 8008c98 <__ieee754_pow+0xa48>)
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	f7f7 fb7d 	bl	8000220 <__aeabi_dsub>
 8008b26:	4622      	mov	r2, r4
 8008b28:	462b      	mov	r3, r5
 8008b2a:	f7f7 fd31 	bl	8000590 <__aeabi_dmul>
 8008b2e:	a35c      	add	r3, pc, #368	@ (adr r3, 8008ca0 <__ieee754_pow+0xa50>)
 8008b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b34:	f7f7 fb76 	bl	8000224 <__adddf3>
 8008b38:	4622      	mov	r2, r4
 8008b3a:	462b      	mov	r3, r5
 8008b3c:	f7f7 fd28 	bl	8000590 <__aeabi_dmul>
 8008b40:	a359      	add	r3, pc, #356	@ (adr r3, 8008ca8 <__ieee754_pow+0xa58>)
 8008b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b46:	f7f7 fb6b 	bl	8000220 <__aeabi_dsub>
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	462b      	mov	r3, r5
 8008b4e:	f7f7 fd1f 	bl	8000590 <__aeabi_dmul>
 8008b52:	a357      	add	r3, pc, #348	@ (adr r3, 8008cb0 <__ieee754_pow+0xa60>)
 8008b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b58:	f7f7 fb64 	bl	8000224 <__adddf3>
 8008b5c:	4622      	mov	r2, r4
 8008b5e:	462b      	mov	r3, r5
 8008b60:	f7f7 fd16 	bl	8000590 <__aeabi_dmul>
 8008b64:	4602      	mov	r2, r0
 8008b66:	460b      	mov	r3, r1
 8008b68:	4640      	mov	r0, r8
 8008b6a:	4649      	mov	r1, r9
 8008b6c:	f7f7 fb58 	bl	8000220 <__aeabi_dsub>
 8008b70:	4604      	mov	r4, r0
 8008b72:	460d      	mov	r5, r1
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	4640      	mov	r0, r8
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	f7f7 fd08 	bl	8000590 <__aeabi_dmul>
 8008b80:	2200      	movs	r2, #0
 8008b82:	e9cd 0100 	strd	r0, r1, [sp]
 8008b86:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008b8a:	4620      	mov	r0, r4
 8008b8c:	4629      	mov	r1, r5
 8008b8e:	f7f7 fb47 	bl	8000220 <__aeabi_dsub>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b9a:	f7f7 fe23 	bl	80007e4 <__aeabi_ddiv>
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	4604      	mov	r4, r0
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	463b      	mov	r3, r7
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f7f7 fcf1 	bl	8000590 <__aeabi_dmul>
 8008bae:	4632      	mov	r2, r6
 8008bb0:	463b      	mov	r3, r7
 8008bb2:	f7f7 fb37 	bl	8000224 <__adddf3>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4620      	mov	r0, r4
 8008bbc:	4629      	mov	r1, r5
 8008bbe:	f7f7 fb2f 	bl	8000220 <__aeabi_dsub>
 8008bc2:	4642      	mov	r2, r8
 8008bc4:	464b      	mov	r3, r9
 8008bc6:	f7f7 fb2b 	bl	8000220 <__aeabi_dsub>
 8008bca:	460b      	mov	r3, r1
 8008bcc:	4602      	mov	r2, r0
 8008bce:	493b      	ldr	r1, [pc, #236]	@ (8008cbc <__ieee754_pow+0xa6c>)
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	f7f7 fb25 	bl	8000220 <__aeabi_dsub>
 8008bd6:	ec41 0b10 	vmov	d0, r0, r1
 8008bda:	ee10 3a90 	vmov	r3, s1
 8008bde:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008be2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008be6:	da30      	bge.n	8008c4a <__ieee754_pow+0x9fa>
 8008be8:	4650      	mov	r0, sl
 8008bea:	f000 f87d 	bl	8008ce8 <scalbn>
 8008bee:	ec51 0b10 	vmov	r0, r1, d0
 8008bf2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bf6:	f7ff bbd2 	b.w	800839e <__ieee754_pow+0x14e>
 8008bfa:	4c31      	ldr	r4, [pc, #196]	@ (8008cc0 <__ieee754_pow+0xa70>)
 8008bfc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d91a      	bls.n	8008c3a <__ieee754_pow+0x9ea>
 8008c04:	4b2f      	ldr	r3, [pc, #188]	@ (8008cc4 <__ieee754_pow+0xa74>)
 8008c06:	440b      	add	r3, r1
 8008c08:	4303      	orrs	r3, r0
 8008c0a:	d009      	beq.n	8008c20 <__ieee754_pow+0x9d0>
 8008c0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	2300      	movs	r3, #0
 8008c14:	f7f7 ff2e 	bl	8000a74 <__aeabi_dcmplt>
 8008c18:	3800      	subs	r0, #0
 8008c1a:	bf18      	it	ne
 8008c1c:	2001      	movne	r0, #1
 8008c1e:	e42b      	b.n	8008478 <__ieee754_pow+0x228>
 8008c20:	4642      	mov	r2, r8
 8008c22:	464b      	mov	r3, r9
 8008c24:	f7f7 fafc 	bl	8000220 <__aeabi_dsub>
 8008c28:	4632      	mov	r2, r6
 8008c2a:	463b      	mov	r3, r7
 8008c2c:	f7f7 ff36 	bl	8000a9c <__aeabi_dcmpge>
 8008c30:	2800      	cmp	r0, #0
 8008c32:	d1eb      	bne.n	8008c0c <__ieee754_pow+0x9bc>
 8008c34:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008cd4 <__ieee754_pow+0xa84>
 8008c38:	e6f7      	b.n	8008a2a <__ieee754_pow+0x7da>
 8008c3a:	469a      	mov	sl, r3
 8008c3c:	4b22      	ldr	r3, [pc, #136]	@ (8008cc8 <__ieee754_pow+0xa78>)
 8008c3e:	459a      	cmp	sl, r3
 8008c40:	f63f aef3 	bhi.w	8008a2a <__ieee754_pow+0x7da>
 8008c44:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008c48:	e715      	b.n	8008a76 <__ieee754_pow+0x826>
 8008c4a:	ec51 0b10 	vmov	r0, r1, d0
 8008c4e:	4619      	mov	r1, r3
 8008c50:	e7cf      	b.n	8008bf2 <__ieee754_pow+0x9a2>
 8008c52:	491a      	ldr	r1, [pc, #104]	@ (8008cbc <__ieee754_pow+0xa6c>)
 8008c54:	2000      	movs	r0, #0
 8008c56:	f7ff bb18 	b.w	800828a <__ieee754_pow+0x3a>
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f7ff bb14 	b.w	800828a <__ieee754_pow+0x3a>
 8008c62:	4630      	mov	r0, r6
 8008c64:	4639      	mov	r1, r7
 8008c66:	f7ff bb10 	b.w	800828a <__ieee754_pow+0x3a>
 8008c6a:	460c      	mov	r4, r1
 8008c6c:	f7ff bb5e 	b.w	800832c <__ieee754_pow+0xdc>
 8008c70:	2400      	movs	r4, #0
 8008c72:	f7ff bb49 	b.w	8008308 <__ieee754_pow+0xb8>
 8008c76:	bf00      	nop
 8008c78:	00000000 	.word	0x00000000
 8008c7c:	3fe62e43 	.word	0x3fe62e43
 8008c80:	fefa39ef 	.word	0xfefa39ef
 8008c84:	3fe62e42 	.word	0x3fe62e42
 8008c88:	0ca86c39 	.word	0x0ca86c39
 8008c8c:	be205c61 	.word	0xbe205c61
 8008c90:	72bea4d0 	.word	0x72bea4d0
 8008c94:	3e663769 	.word	0x3e663769
 8008c98:	c5d26bf1 	.word	0xc5d26bf1
 8008c9c:	3ebbbd41 	.word	0x3ebbbd41
 8008ca0:	af25de2c 	.word	0xaf25de2c
 8008ca4:	3f11566a 	.word	0x3f11566a
 8008ca8:	16bebd93 	.word	0x16bebd93
 8008cac:	3f66c16c 	.word	0x3f66c16c
 8008cb0:	5555553e 	.word	0x5555553e
 8008cb4:	3fc55555 	.word	0x3fc55555
 8008cb8:	fff00000 	.word	0xfff00000
 8008cbc:	3ff00000 	.word	0x3ff00000
 8008cc0:	4090cbff 	.word	0x4090cbff
 8008cc4:	3f6f3400 	.word	0x3f6f3400
 8008cc8:	3fe00000 	.word	0x3fe00000
 8008ccc:	652b82fe 	.word	0x652b82fe
 8008cd0:	3c971547 	.word	0x3c971547
 8008cd4:	4090cc00 	.word	0x4090cc00

08008cd8 <fabs>:
 8008cd8:	ec51 0b10 	vmov	r0, r1, d0
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008ce2:	ec43 2b10 	vmov	d0, r2, r3
 8008ce6:	4770      	bx	lr

08008ce8 <scalbn>:
 8008ce8:	b570      	push	{r4, r5, r6, lr}
 8008cea:	ec55 4b10 	vmov	r4, r5, d0
 8008cee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008cf2:	4606      	mov	r6, r0
 8008cf4:	462b      	mov	r3, r5
 8008cf6:	b991      	cbnz	r1, 8008d1e <scalbn+0x36>
 8008cf8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008cfc:	4323      	orrs	r3, r4
 8008cfe:	d03d      	beq.n	8008d7c <scalbn+0x94>
 8008d00:	4b35      	ldr	r3, [pc, #212]	@ (8008dd8 <scalbn+0xf0>)
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	2200      	movs	r2, #0
 8008d08:	f7f7 fc42 	bl	8000590 <__aeabi_dmul>
 8008d0c:	4b33      	ldr	r3, [pc, #204]	@ (8008ddc <scalbn+0xf4>)
 8008d0e:	429e      	cmp	r6, r3
 8008d10:	4604      	mov	r4, r0
 8008d12:	460d      	mov	r5, r1
 8008d14:	da0f      	bge.n	8008d36 <scalbn+0x4e>
 8008d16:	a328      	add	r3, pc, #160	@ (adr r3, 8008db8 <scalbn+0xd0>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	e01e      	b.n	8008d5c <scalbn+0x74>
 8008d1e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008d22:	4291      	cmp	r1, r2
 8008d24:	d10b      	bne.n	8008d3e <scalbn+0x56>
 8008d26:	4622      	mov	r2, r4
 8008d28:	4620      	mov	r0, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	f7f7 fa7a 	bl	8000224 <__adddf3>
 8008d30:	4604      	mov	r4, r0
 8008d32:	460d      	mov	r5, r1
 8008d34:	e022      	b.n	8008d7c <scalbn+0x94>
 8008d36:	460b      	mov	r3, r1
 8008d38:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008d3c:	3936      	subs	r1, #54	@ 0x36
 8008d3e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008d42:	4296      	cmp	r6, r2
 8008d44:	dd0d      	ble.n	8008d62 <scalbn+0x7a>
 8008d46:	2d00      	cmp	r5, #0
 8008d48:	a11d      	add	r1, pc, #116	@ (adr r1, 8008dc0 <scalbn+0xd8>)
 8008d4a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d4e:	da02      	bge.n	8008d56 <scalbn+0x6e>
 8008d50:	a11d      	add	r1, pc, #116	@ (adr r1, 8008dc8 <scalbn+0xe0>)
 8008d52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d56:	a31a      	add	r3, pc, #104	@ (adr r3, 8008dc0 <scalbn+0xd8>)
 8008d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d5c:	f7f7 fc18 	bl	8000590 <__aeabi_dmul>
 8008d60:	e7e6      	b.n	8008d30 <scalbn+0x48>
 8008d62:	1872      	adds	r2, r6, r1
 8008d64:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008d68:	428a      	cmp	r2, r1
 8008d6a:	dcec      	bgt.n	8008d46 <scalbn+0x5e>
 8008d6c:	2a00      	cmp	r2, #0
 8008d6e:	dd08      	ble.n	8008d82 <scalbn+0x9a>
 8008d70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008d74:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008d78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d7c:	ec45 4b10 	vmov	d0, r4, r5
 8008d80:	bd70      	pop	{r4, r5, r6, pc}
 8008d82:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008d86:	da08      	bge.n	8008d9a <scalbn+0xb2>
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	a10b      	add	r1, pc, #44	@ (adr r1, 8008db8 <scalbn+0xd0>)
 8008d8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d90:	dac1      	bge.n	8008d16 <scalbn+0x2e>
 8008d92:	a10f      	add	r1, pc, #60	@ (adr r1, 8008dd0 <scalbn+0xe8>)
 8008d94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d98:	e7bd      	b.n	8008d16 <scalbn+0x2e>
 8008d9a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008d9e:	3236      	adds	r2, #54	@ 0x36
 8008da0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008da4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008da8:	4620      	mov	r0, r4
 8008daa:	4b0d      	ldr	r3, [pc, #52]	@ (8008de0 <scalbn+0xf8>)
 8008dac:	4629      	mov	r1, r5
 8008dae:	2200      	movs	r2, #0
 8008db0:	e7d4      	b.n	8008d5c <scalbn+0x74>
 8008db2:	bf00      	nop
 8008db4:	f3af 8000 	nop.w
 8008db8:	c2f8f359 	.word	0xc2f8f359
 8008dbc:	01a56e1f 	.word	0x01a56e1f
 8008dc0:	8800759c 	.word	0x8800759c
 8008dc4:	7e37e43c 	.word	0x7e37e43c
 8008dc8:	8800759c 	.word	0x8800759c
 8008dcc:	fe37e43c 	.word	0xfe37e43c
 8008dd0:	c2f8f359 	.word	0xc2f8f359
 8008dd4:	81a56e1f 	.word	0x81a56e1f
 8008dd8:	43500000 	.word	0x43500000
 8008ddc:	ffff3cb0 	.word	0xffff3cb0
 8008de0:	3c900000 	.word	0x3c900000

08008de4 <with_errno>:
 8008de4:	b510      	push	{r4, lr}
 8008de6:	ed2d 8b02 	vpush	{d8}
 8008dea:	eeb0 8a40 	vmov.f32	s16, s0
 8008dee:	eef0 8a60 	vmov.f32	s17, s1
 8008df2:	4604      	mov	r4, r0
 8008df4:	f000 f92a 	bl	800904c <__errno>
 8008df8:	eeb0 0a48 	vmov.f32	s0, s16
 8008dfc:	eef0 0a68 	vmov.f32	s1, s17
 8008e00:	ecbd 8b02 	vpop	{d8}
 8008e04:	6004      	str	r4, [r0, #0]
 8008e06:	bd10      	pop	{r4, pc}

08008e08 <xflow>:
 8008e08:	4603      	mov	r3, r0
 8008e0a:	b507      	push	{r0, r1, r2, lr}
 8008e0c:	ec51 0b10 	vmov	r0, r1, d0
 8008e10:	b183      	cbz	r3, 8008e34 <xflow+0x2c>
 8008e12:	4602      	mov	r2, r0
 8008e14:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008e18:	e9cd 2300 	strd	r2, r3, [sp]
 8008e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e20:	f7f7 fbb6 	bl	8000590 <__aeabi_dmul>
 8008e24:	ec41 0b10 	vmov	d0, r0, r1
 8008e28:	2022      	movs	r0, #34	@ 0x22
 8008e2a:	b003      	add	sp, #12
 8008e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e30:	f7ff bfd8 	b.w	8008de4 <with_errno>
 8008e34:	4602      	mov	r2, r0
 8008e36:	460b      	mov	r3, r1
 8008e38:	e7ee      	b.n	8008e18 <xflow+0x10>
 8008e3a:	0000      	movs	r0, r0
 8008e3c:	0000      	movs	r0, r0
	...

08008e40 <__math_uflow>:
 8008e40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e48 <__math_uflow+0x8>
 8008e44:	f7ff bfe0 	b.w	8008e08 <xflow>
 8008e48:	00000000 	.word	0x00000000
 8008e4c:	10000000 	.word	0x10000000

08008e50 <__math_oflow>:
 8008e50:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e58 <__math_oflow+0x8>
 8008e54:	f7ff bfd8 	b.w	8008e08 <xflow>
 8008e58:	00000000 	.word	0x00000000
 8008e5c:	70000000 	.word	0x70000000

08008e60 <__ieee754_sqrt>:
 8008e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4a68      	ldr	r2, [pc, #416]	@ (8009008 <__ieee754_sqrt+0x1a8>)
 8008e66:	ec55 4b10 	vmov	r4, r5, d0
 8008e6a:	43aa      	bics	r2, r5
 8008e6c:	462b      	mov	r3, r5
 8008e6e:	4621      	mov	r1, r4
 8008e70:	d110      	bne.n	8008e94 <__ieee754_sqrt+0x34>
 8008e72:	4622      	mov	r2, r4
 8008e74:	4620      	mov	r0, r4
 8008e76:	4629      	mov	r1, r5
 8008e78:	f7f7 fb8a 	bl	8000590 <__aeabi_dmul>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	460b      	mov	r3, r1
 8008e80:	4620      	mov	r0, r4
 8008e82:	4629      	mov	r1, r5
 8008e84:	f7f7 f9ce 	bl	8000224 <__adddf3>
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	ec45 4b10 	vmov	d0, r4, r5
 8008e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e94:	2d00      	cmp	r5, #0
 8008e96:	dc0e      	bgt.n	8008eb6 <__ieee754_sqrt+0x56>
 8008e98:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008e9c:	4322      	orrs	r2, r4
 8008e9e:	d0f5      	beq.n	8008e8c <__ieee754_sqrt+0x2c>
 8008ea0:	b19d      	cbz	r5, 8008eca <__ieee754_sqrt+0x6a>
 8008ea2:	4622      	mov	r2, r4
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	4629      	mov	r1, r5
 8008ea8:	f7f7 f9ba 	bl	8000220 <__aeabi_dsub>
 8008eac:	4602      	mov	r2, r0
 8008eae:	460b      	mov	r3, r1
 8008eb0:	f7f7 fc98 	bl	80007e4 <__aeabi_ddiv>
 8008eb4:	e7e8      	b.n	8008e88 <__ieee754_sqrt+0x28>
 8008eb6:	152a      	asrs	r2, r5, #20
 8008eb8:	d115      	bne.n	8008ee6 <__ieee754_sqrt+0x86>
 8008eba:	2000      	movs	r0, #0
 8008ebc:	e009      	b.n	8008ed2 <__ieee754_sqrt+0x72>
 8008ebe:	0acb      	lsrs	r3, r1, #11
 8008ec0:	3a15      	subs	r2, #21
 8008ec2:	0549      	lsls	r1, r1, #21
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0fa      	beq.n	8008ebe <__ieee754_sqrt+0x5e>
 8008ec8:	e7f7      	b.n	8008eba <__ieee754_sqrt+0x5a>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	e7fa      	b.n	8008ec4 <__ieee754_sqrt+0x64>
 8008ece:	005b      	lsls	r3, r3, #1
 8008ed0:	3001      	adds	r0, #1
 8008ed2:	02dc      	lsls	r4, r3, #11
 8008ed4:	d5fb      	bpl.n	8008ece <__ieee754_sqrt+0x6e>
 8008ed6:	1e44      	subs	r4, r0, #1
 8008ed8:	1b12      	subs	r2, r2, r4
 8008eda:	f1c0 0420 	rsb	r4, r0, #32
 8008ede:	fa21 f404 	lsr.w	r4, r1, r4
 8008ee2:	4323      	orrs	r3, r4
 8008ee4:	4081      	lsls	r1, r0
 8008ee6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eea:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8008eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008ef2:	07d2      	lsls	r2, r2, #31
 8008ef4:	bf5c      	itt	pl
 8008ef6:	005b      	lslpl	r3, r3, #1
 8008ef8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8008efc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f00:	bf58      	it	pl
 8008f02:	0049      	lslpl	r1, r1, #1
 8008f04:	2600      	movs	r6, #0
 8008f06:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8008f0a:	106d      	asrs	r5, r5, #1
 8008f0c:	0049      	lsls	r1, r1, #1
 8008f0e:	2016      	movs	r0, #22
 8008f10:	4632      	mov	r2, r6
 8008f12:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8008f16:	1917      	adds	r7, r2, r4
 8008f18:	429f      	cmp	r7, r3
 8008f1a:	bfde      	ittt	le
 8008f1c:	193a      	addle	r2, r7, r4
 8008f1e:	1bdb      	suble	r3, r3, r7
 8008f20:	1936      	addle	r6, r6, r4
 8008f22:	0fcf      	lsrs	r7, r1, #31
 8008f24:	3801      	subs	r0, #1
 8008f26:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8008f2a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f2e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008f32:	d1f0      	bne.n	8008f16 <__ieee754_sqrt+0xb6>
 8008f34:	4604      	mov	r4, r0
 8008f36:	2720      	movs	r7, #32
 8008f38:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	eb00 0e0c 	add.w	lr, r0, ip
 8008f42:	db02      	blt.n	8008f4a <__ieee754_sqrt+0xea>
 8008f44:	d113      	bne.n	8008f6e <__ieee754_sqrt+0x10e>
 8008f46:	458e      	cmp	lr, r1
 8008f48:	d811      	bhi.n	8008f6e <__ieee754_sqrt+0x10e>
 8008f4a:	f1be 0f00 	cmp.w	lr, #0
 8008f4e:	eb0e 000c 	add.w	r0, lr, ip
 8008f52:	da42      	bge.n	8008fda <__ieee754_sqrt+0x17a>
 8008f54:	2800      	cmp	r0, #0
 8008f56:	db40      	blt.n	8008fda <__ieee754_sqrt+0x17a>
 8008f58:	f102 0801 	add.w	r8, r2, #1
 8008f5c:	1a9b      	subs	r3, r3, r2
 8008f5e:	458e      	cmp	lr, r1
 8008f60:	bf88      	it	hi
 8008f62:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8008f66:	eba1 010e 	sub.w	r1, r1, lr
 8008f6a:	4464      	add	r4, ip
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8008f72:	3f01      	subs	r7, #1
 8008f74:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8008f78:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008f7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8008f80:	d1dc      	bne.n	8008f3c <__ieee754_sqrt+0xdc>
 8008f82:	4319      	orrs	r1, r3
 8008f84:	d01b      	beq.n	8008fbe <__ieee754_sqrt+0x15e>
 8008f86:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800900c <__ieee754_sqrt+0x1ac>
 8008f8a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009010 <__ieee754_sqrt+0x1b0>
 8008f8e:	e9da 0100 	ldrd	r0, r1, [sl]
 8008f92:	e9db 2300 	ldrd	r2, r3, [fp]
 8008f96:	f7f7 f943 	bl	8000220 <__aeabi_dsub>
 8008f9a:	e9da 8900 	ldrd	r8, r9, [sl]
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 fd6f 	bl	8000a88 <__aeabi_dcmple>
 8008faa:	b140      	cbz	r0, 8008fbe <__ieee754_sqrt+0x15e>
 8008fac:	f1b4 3fff 	cmp.w	r4, #4294967295
 8008fb0:	e9da 0100 	ldrd	r0, r1, [sl]
 8008fb4:	e9db 2300 	ldrd	r2, r3, [fp]
 8008fb8:	d111      	bne.n	8008fde <__ieee754_sqrt+0x17e>
 8008fba:	3601      	adds	r6, #1
 8008fbc:	463c      	mov	r4, r7
 8008fbe:	1072      	asrs	r2, r6, #1
 8008fc0:	0863      	lsrs	r3, r4, #1
 8008fc2:	07f1      	lsls	r1, r6, #31
 8008fc4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8008fc8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8008fcc:	bf48      	it	mi
 8008fce:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8008fd2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	e756      	b.n	8008e88 <__ieee754_sqrt+0x28>
 8008fda:	4690      	mov	r8, r2
 8008fdc:	e7be      	b.n	8008f5c <__ieee754_sqrt+0xfc>
 8008fde:	f7f7 f921 	bl	8000224 <__adddf3>
 8008fe2:	e9da 8900 	ldrd	r8, r9, [sl]
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 fd41 	bl	8000a74 <__aeabi_dcmplt>
 8008ff2:	b120      	cbz	r0, 8008ffe <__ieee754_sqrt+0x19e>
 8008ff4:	1ca0      	adds	r0, r4, #2
 8008ff6:	bf08      	it	eq
 8008ff8:	3601      	addeq	r6, #1
 8008ffa:	3402      	adds	r4, #2
 8008ffc:	e7df      	b.n	8008fbe <__ieee754_sqrt+0x15e>
 8008ffe:	1c63      	adds	r3, r4, #1
 8009000:	f023 0401 	bic.w	r4, r3, #1
 8009004:	e7db      	b.n	8008fbe <__ieee754_sqrt+0x15e>
 8009006:	bf00      	nop
 8009008:	7ff00000 	.word	0x7ff00000
 800900c:	20000038 	.word	0x20000038
 8009010:	20000030 	.word	0x20000030

08009014 <free>:
 8009014:	4b02      	ldr	r3, [pc, #8]	@ (8009020 <free+0xc>)
 8009016:	4601      	mov	r1, r0
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	f000 b843 	b.w	80090a4 <_free_r>
 800901e:	bf00      	nop
 8009020:	20000040 	.word	0x20000040

08009024 <__malloc_lock>:
 8009024:	4801      	ldr	r0, [pc, #4]	@ (800902c <__malloc_lock+0x8>)
 8009026:	f000 b83b 	b.w	80090a0 <__retarget_lock_acquire_recursive>
 800902a:	bf00      	nop
 800902c:	200006e0 	.word	0x200006e0

08009030 <__malloc_unlock>:
 8009030:	4801      	ldr	r0, [pc, #4]	@ (8009038 <__malloc_unlock+0x8>)
 8009032:	f000 b836 	b.w	80090a2 <__retarget_lock_release_recursive>
 8009036:	bf00      	nop
 8009038:	200006e0 	.word	0x200006e0

0800903c <memset>:
 800903c:	4402      	add	r2, r0
 800903e:	4603      	mov	r3, r0
 8009040:	4293      	cmp	r3, r2
 8009042:	d100      	bne.n	8009046 <memset+0xa>
 8009044:	4770      	bx	lr
 8009046:	f803 1b01 	strb.w	r1, [r3], #1
 800904a:	e7f9      	b.n	8009040 <memset+0x4>

0800904c <__errno>:
 800904c:	4b01      	ldr	r3, [pc, #4]	@ (8009054 <__errno+0x8>)
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	4770      	bx	lr
 8009052:	bf00      	nop
 8009054:	20000040 	.word	0x20000040

08009058 <__libc_init_array>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	4d0d      	ldr	r5, [pc, #52]	@ (8009090 <__libc_init_array+0x38>)
 800905c:	4c0d      	ldr	r4, [pc, #52]	@ (8009094 <__libc_init_array+0x3c>)
 800905e:	1b64      	subs	r4, r4, r5
 8009060:	10a4      	asrs	r4, r4, #2
 8009062:	2600      	movs	r6, #0
 8009064:	42a6      	cmp	r6, r4
 8009066:	d109      	bne.n	800907c <__libc_init_array+0x24>
 8009068:	4d0b      	ldr	r5, [pc, #44]	@ (8009098 <__libc_init_array+0x40>)
 800906a:	4c0c      	ldr	r4, [pc, #48]	@ (800909c <__libc_init_array+0x44>)
 800906c:	f000 f864 	bl	8009138 <_init>
 8009070:	1b64      	subs	r4, r4, r5
 8009072:	10a4      	asrs	r4, r4, #2
 8009074:	2600      	movs	r6, #0
 8009076:	42a6      	cmp	r6, r4
 8009078:	d105      	bne.n	8009086 <__libc_init_array+0x2e>
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009080:	4798      	blx	r3
 8009082:	3601      	adds	r6, #1
 8009084:	e7ee      	b.n	8009064 <__libc_init_array+0xc>
 8009086:	f855 3b04 	ldr.w	r3, [r5], #4
 800908a:	4798      	blx	r3
 800908c:	3601      	adds	r6, #1
 800908e:	e7f2      	b.n	8009076 <__libc_init_array+0x1e>
 8009090:	080091d0 	.word	0x080091d0
 8009094:	080091d0 	.word	0x080091d0
 8009098:	080091d0 	.word	0x080091d0
 800909c:	080091dc 	.word	0x080091dc

080090a0 <__retarget_lock_acquire_recursive>:
 80090a0:	4770      	bx	lr

080090a2 <__retarget_lock_release_recursive>:
 80090a2:	4770      	bx	lr

080090a4 <_free_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4605      	mov	r5, r0
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d041      	beq.n	8009130 <_free_r+0x8c>
 80090ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b0:	1f0c      	subs	r4, r1, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfb8      	it	lt
 80090b6:	18e4      	addlt	r4, r4, r3
 80090b8:	f7ff ffb4 	bl	8009024 <__malloc_lock>
 80090bc:	4a1d      	ldr	r2, [pc, #116]	@ (8009134 <_free_r+0x90>)
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	b933      	cbnz	r3, 80090d0 <_free_r+0x2c>
 80090c2:	6063      	str	r3, [r4, #4]
 80090c4:	6014      	str	r4, [r2, #0]
 80090c6:	4628      	mov	r0, r5
 80090c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090cc:	f7ff bfb0 	b.w	8009030 <__malloc_unlock>
 80090d0:	42a3      	cmp	r3, r4
 80090d2:	d908      	bls.n	80090e6 <_free_r+0x42>
 80090d4:	6820      	ldr	r0, [r4, #0]
 80090d6:	1821      	adds	r1, r4, r0
 80090d8:	428b      	cmp	r3, r1
 80090da:	bf01      	itttt	eq
 80090dc:	6819      	ldreq	r1, [r3, #0]
 80090de:	685b      	ldreq	r3, [r3, #4]
 80090e0:	1809      	addeq	r1, r1, r0
 80090e2:	6021      	streq	r1, [r4, #0]
 80090e4:	e7ed      	b.n	80090c2 <_free_r+0x1e>
 80090e6:	461a      	mov	r2, r3
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	b10b      	cbz	r3, 80090f0 <_free_r+0x4c>
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	d9fa      	bls.n	80090e6 <_free_r+0x42>
 80090f0:	6811      	ldr	r1, [r2, #0]
 80090f2:	1850      	adds	r0, r2, r1
 80090f4:	42a0      	cmp	r0, r4
 80090f6:	d10b      	bne.n	8009110 <_free_r+0x6c>
 80090f8:	6820      	ldr	r0, [r4, #0]
 80090fa:	4401      	add	r1, r0
 80090fc:	1850      	adds	r0, r2, r1
 80090fe:	4283      	cmp	r3, r0
 8009100:	6011      	str	r1, [r2, #0]
 8009102:	d1e0      	bne.n	80090c6 <_free_r+0x22>
 8009104:	6818      	ldr	r0, [r3, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	6053      	str	r3, [r2, #4]
 800910a:	4408      	add	r0, r1
 800910c:	6010      	str	r0, [r2, #0]
 800910e:	e7da      	b.n	80090c6 <_free_r+0x22>
 8009110:	d902      	bls.n	8009118 <_free_r+0x74>
 8009112:	230c      	movs	r3, #12
 8009114:	602b      	str	r3, [r5, #0]
 8009116:	e7d6      	b.n	80090c6 <_free_r+0x22>
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	1821      	adds	r1, r4, r0
 800911c:	428b      	cmp	r3, r1
 800911e:	bf04      	itt	eq
 8009120:	6819      	ldreq	r1, [r3, #0]
 8009122:	685b      	ldreq	r3, [r3, #4]
 8009124:	6063      	str	r3, [r4, #4]
 8009126:	bf04      	itt	eq
 8009128:	1809      	addeq	r1, r1, r0
 800912a:	6021      	streq	r1, [r4, #0]
 800912c:	6054      	str	r4, [r2, #4]
 800912e:	e7ca      	b.n	80090c6 <_free_r+0x22>
 8009130:	bd38      	pop	{r3, r4, r5, pc}
 8009132:	bf00      	nop
 8009134:	200005a4 	.word	0x200005a4

08009138 <_init>:
 8009138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800913a:	bf00      	nop
 800913c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913e:	bc08      	pop	{r3}
 8009140:	469e      	mov	lr, r3
 8009142:	4770      	bx	lr

08009144 <_fini>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	bf00      	nop
 8009148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800914a:	bc08      	pop	{r3}
 800914c:	469e      	mov	lr, r3
 800914e:	4770      	bx	lr
