#include "ekf.h"
#include <algorithm>

// Define the utility functions

void EKF::_mulmat(const _float_t* A, const _float_t* B, _float_t* C, int m, int p, int n) {
    std::fill(C, C + m * n, 0);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            for (int k = 0; k < p; ++k) {
                C[i * n + j] += A[i * p + k] * B[k * n + j];
            }
        }
    }
}

void EKF::_transpose(const _float_t* A, _float_t* At, int m, int n) {
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            At[j * m + i] = A[i * n + j];
        }
    }
}

void EKF::_addmat(const _float_t* A, const _float_t* B, _float_t* C, int m, int n) {
    for (int i = 0; i < m * n; ++i) {
        C[i] = A[i] + B[i];
    }
}

bool EKF::invert(const _float_t* A, _float_t* Ainv) {
    // Assume a 1x1 matrix for simplicity
    if (A[0] == 0) return false;
    Ainv[0] = 1 / A[0];
    return true;
}

void EKF::_sub(const _float_t* A, const _float_t* B, _float_t* C, int m) {
    for (int i = 0; i < m; ++i) {
        C[i] = A[i] - B[i];
    }
}

void EKF::_mulvec(const _float_t* A, const _float_t* x, _float_t* Ax, int m, int n) {
    std::fill(Ax, Ax + m, 0);
    for (int i = 0; i < m; ++i) {
        for (int j = 0; j < n; ++j) {
            Ax[i] += A[i * n + j] * x[j];
        }
    }
}

void EKF::_addvec(const _float_t* A, const _float_t* B, _float_t* C, int m) {
    for (int i = 0; i < m; ++i) {
        C[i] = A[i] + B[i];
    }
}

void EKF::_negate(_float_t* A, int m, int n) {
    for (int i = 0; i < m * n; ++i) {
        A[i] = -A[i];
    }
}

void EKF::_addeye(_float_t* A, int m) {
    for (int i = 0; i < m; ++i) {
        A[i * m + i] += 1;
    }
}
