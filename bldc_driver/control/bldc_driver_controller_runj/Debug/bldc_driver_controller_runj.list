
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c5e0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800c7b8  0800c7b8  0000d7b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8d0  0800c8d0  0000e128  2**0
                  CONTENTS
  4 .ARM          00000000  0800c8d0  0800c8d0  0000e128  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c8d0  0800c8d0  0000e128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800c8d0  0800c8d0  0000d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800c8dc  0800c8dc  0000d8dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000128  20000000  0800c8e4  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000128  0800ca0c  0000e128  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800ca0c  0000e924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032246  00000000  00000000  0000e158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005feb  00000000  00000000  0004039e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d78  00000000  00000000  00046390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001689  00000000  00000000  00048108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bcc  00000000  00000000  00049791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028439  00000000  00000000  0007335d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1245  00000000  00000000  0009b796  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018c9db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000887c  00000000  00000000  0018ca20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  0019529c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000128 	.word	0x20000128
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c7a0 	.word	0x0800c7a0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000012c 	.word	0x2000012c
 8000214:	0800c7a0 	.word	0x0800c7a0

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 8000c10:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	334c      	adds	r3, #76	@ 0x4c
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fd8e 	bl	800173c <_ZN3EKFC1Eii>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8000c24:	3360      	adds	r3, #96	@ 0x60
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 8000c32:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8000c36:	4613      	mov	r3, r2
 8000c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 8000c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8000c4a:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8000c4e:	4613      	mov	r3, r2
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	0800c83c 	.word	0x0800c83c
 8000c78:	c640e400 	.word	0xc640e400
 8000c7c:	ffffcfc7 	.word	0xffffcfc7
 8000c80:	0800c7b8 	.word	0x0800c7b8
 8000c84:	0800c7c0 	.word	0x0800c7c0
 8000c88:	3089705f 	.word	0x3089705f
 8000c8c:	0800c7d0 	.word	0x0800c7d0

08000c90 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <_ZN17AS5048A_interfaceD1Ev+0x24>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	334c      	adds	r3, #76	@ 0x4c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fd62 	bl	800176c <_ZN3EKFD1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800c83c 	.word	0x0800c83c

08000cb8 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
}
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe5 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 8000cc6:	21ac      	movs	r1, #172	@ 0xac
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f00a fb39 	bl	800b340 <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000ce2:	f107 040c 	add.w	r4, r7, #12
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	e001      	b.n	8000cfe <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cfa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 fa76 	bl	80011f8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d0c:	ec53 2b10 	vmov	r2, r3, d0
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff feec 	bl	8000af0 <__aeabi_d2f>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f007 faab 	bl	8008298 <HAL_GPIO_WritePin>
}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8cb 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8c8 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d64:	eef0 7a40 	vmov.f32	s15, s0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d6e:	f000 f935 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f004 fa90 	bl	80052a0 <HAL_Delay>
	getSensorAngle();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b7 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8b4 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d96:	f000 f921 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	@ 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	f000 fcfa 	bl	80017ac <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]
 8000dd4:	e00d      	b.n	8000df2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d9ee      	bls.n	8000dd6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd11      	ble.n	8000e68 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffb9 	bl	8000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f007 fa12 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	f107 010a 	add.w	r1, r7, #10
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000e84:	f008 fab1 	bl	80093ea <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f007 fa02 	bl	8008298 <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	fa41 f303 	asr.w	r3, r1, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f1c3 0310 	rsb	r3, r3, #16
 8000eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb8:	fa42 f303 	asr.w	r3, r2, r3
 8000ebc:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000ebe:	89ba      	ldrh	r2, [r7, #12]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200006c0 	.word	0x200006c0

08000ed4 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff91 	bl	8000e0c <_ZN17AS5048A_interface4readEt>
 8000eea:	4603      	mov	r3, r0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe9 	bl	8000ed4 <_ZN17AS5048A_interface11getRawCountEv>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f14:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000f28 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40c90fdb 	.word	0x40c90fdb

08000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f60 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40c90fdb 	.word	0x40c90fdb

08000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	ed2d 8b02 	vpush	{d8}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffdd 	bl	8000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc0:	f001 fd12 	bl	80029e8 <_Z15_normalizeAnglef>
 8000fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	ecbd 8b02 	vpop	{d8}
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a8 	.word	0x200000a8

08000fdc <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_ZN17AS5048A_interface6microsEv+0x24>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_ZN17AS5048A_interface6microsEv+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8000fea:	fba1 1303 	umull	r1, r3, r1, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e0001000 	.word	0xe0001000
 8001004:	200000bc 	.word	0x200000bc
 8001008:	431bde83 	.word	0x431bde83

0800100c <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff6d 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 800101a:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800101e:	f7ff ffdd 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001030:	ed97 7a03 	vldr	s14, [r7, #12]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 800103c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001040:	f7ff fda6 	bl	8000b90 <_ZSt3absf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001090 <_ZN17AS5048A_interface12updateSensorEv+0x84>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00f      	beq.n	8001080 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd02      	ble.n	8001078 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	e000      	b.n	800107a <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001078:	2201      	movs	r2, #1
 800107a:	441a      	add	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40a0d97c 	.word	0x40a0d97c

08001094 <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 800109e:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff43 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   // Angle update
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	3304      	adds	r3, #4
 80010bc:	edd3 6a00 	vldr	s13, [r3]
 80010c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    // Velocity remains the same
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3380      	adds	r3, #128	@ 0x80
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	f000 fbc0 	bl	800187a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	33a4      	adds	r3, #164	@ 0xa4
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3290      	adds	r2, #144	@ 0x90
 8001116:	f107 0508 	add.w	r5, r7, #8
 800111a:	f107 0418 	add.w	r4, r7, #24
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	462b      	mov	r3, r5
 8001124:	4622      	mov	r2, r4
 8001126:	f000 fcb4 	bl	8001a92 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	3304      	adds	r3, #4
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 800113a:	f001 fcdb 	bl	8002af4 <_ZN13LowPassFilterclEf>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80011a4 <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 800115e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a07 	vldr	s13, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	3a83126f 	.word	0x3a83126f
 80011a0:	200001f8 	.word	0x200001f8
 80011a4:	40c90fdb 	.word	0x40c90fdb

080011a8 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	ed2d 8b02 	vpush	{d8}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feb3 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 80011d0:	f001 fc90 	bl	8002af4 <_ZN13LowPassFilterclEf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	ecbd 8b02 	vpop	{d8}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001ec 	.word	0x200001ec

080011f8 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff f95a 	bl	80004bc <__aeabi_i2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff f955 	bl	80004bc <__aeabi_i2d>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	ec43 2b11 	vmov	d1, r2, r3
 800121a:	ec45 4b10 	vmov	d0, r4, r5
 800121e:	f00a f8b1 	bl	800b384 <pow>
 8001222:	eeb0 7a40 	vmov.f32	s14, s0
 8001226:	eef0 7a60 	vmov.f32	s15, s1
    }
 800122a:	eeb0 0a47 	vmov.f32	s0, s14
 800122e:	eef0 0a67 	vmov.f32	s1, s15
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bdb0      	pop	{r4, r5, r7, pc}

08001238 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001238:	b5b0      	push	{r4, r5, r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	4a4d      	ldr	r2, [pc, #308]	@ (8001378 <_ZN12CurrentSenseC1Ev+0x140>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	334c      	adds	r3, #76	@ 0x4c
 800124a:	2201      	movs	r2, #1
 800124c:	2102      	movs	r1, #2
 800124e:	4618      	mov	r0, r3
 8001250:	f000 fa74 	bl	800173c <_ZN3EKFC1Eii>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a49      	ldr	r2, [pc, #292]	@ (800137c <_ZN12CurrentSenseC1Ev+0x144>)
 8001258:	3360      	adds	r3, #96	@ 0x60
 800125a:	ca07      	ldmia	r2, {r0, r1, r2}
 800125c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <_ZN12CurrentSenseC1Ev+0x148>)
 8001264:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 8001268:	4615      	mov	r5, r2
 800126a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800126c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800126e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	6023      	str	r3, [r4, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a41      	ldr	r2, [pc, #260]	@ (8001380 <_ZN12CurrentSenseC1Ev+0x148>)
 800127a:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800127e:	4615      	mov	r5, r2
 8001280:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001288:	682b      	ldr	r3, [r5, #0]
 800128a:	6023      	str	r3, [r4, #0]
 800128c:	4b3d      	ldr	r3, [pc, #244]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 800128e:	ed93 7a00 	vldr	s14, [r3]
 8001292:	4b3d      	ldr	r3, [pc, #244]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 8001294:	edd3 7a00 	vldr	s15, [r3]
 8001298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800129c:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 80012a0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 80012a6:	ed93 7a00 	vldr	s14, [r3]
 80012aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f04f 0200 	mov.w	r2, #0
 80012c2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80012da:	4b2a      	ldr	r3, [pc, #168]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012dc:	ed93 7a00 	vldr	s14, [r3]
 80012e0:	4b29      	ldr	r3, [pc, #164]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012ea:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 80012ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012f2:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 80012f4:	ed93 7a00 	vldr	s14, [r3]
 80012f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001328:	4b16      	ldr	r3, [pc, #88]	@ (8001384 <_ZN12CurrentSenseC1Ev+0x14c>)
 800132a:	ed93 7a00 	vldr	s14, [r3]
 800132e:	4b16      	ldr	r3, [pc, #88]	@ (8001388 <_ZN12CurrentSenseC1Ev+0x150>)
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001338:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800138c <_ZN12CurrentSenseC1Ev+0x154>
 800133c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001340:	4b13      	ldr	r3, [pc, #76]	@ (8001390 <_ZN12CurrentSenseC1Ev+0x158>)
 8001342:	ed93 7a00 	vldr	s14, [r3]
 8001346:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800134a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <_ZN12CurrentSenseC1Ev+0x15c>)
 800135c:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8001360:	4615      	mov	r5, r2
 8001362:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001366:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001368:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800136a:	682b      	ldr	r3, [r5, #0]
 800136c:	6023      	str	r3, [r4, #0]
{
	
}
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bdb0      	pop	{r4, r5, r7, pc}
 8001378:	0800c84c 	.word	0x0800c84c
 800137c:	0800c7e0 	.word	0x0800c7e0
 8001380:	0800c7ec 	.word	0x0800c7ec
 8001384:	20000098 	.word	0x20000098
 8001388:	200000a0 	.word	0x200000a0
 800138c:	3a83126f 	.word	0x3a83126f
 8001390:	200000a4 	.word	0x200000a4
 8001394:	0800c810 	.word	0x0800c810

08001398 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	4a06      	ldr	r2, [pc, #24]	@ (80013bc <_ZN12CurrentSenseD1Ev+0x24>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	334c      	adds	r3, #76	@ 0x4c
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 f9de 	bl	800176c <_ZN3EKFD1Ev>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800c84c 	.word	0x0800c84c

080013c0 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
}
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff ffe5 	bl	8001398 <_ZN12CurrentSenseD1Ev>
 80013ce:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f009 ffb4 	bl	800b340 <_ZdlPvj>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4618      	mov	r0, r3
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80013f0:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3304      	adds	r3, #4
 80013f8:	2201      	movs	r2, #1
 80013fa:	4619      	mov	r1, r3
 80013fc:	480c      	ldr	r0, [pc, #48]	@ (8001430 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 80013fe:	f004 fb5f 	bl	8005ac0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3308      	adds	r3, #8
 8001406:	2201      	movs	r2, #1
 8001408:	4619      	mov	r1, r3
 800140a:	480a      	ldr	r0, [pc, #40]	@ (8001434 <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 800140c:	f004 fb58 	bl	8005ac0 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	635a      	str	r2, [r3, #52]	@ 0x34
	gain_a = _gain;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	629a      	str	r2, [r3, #40]	@ 0x28
	gain_b = _gain;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_c = _gain;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	687a      	ldr	r2, [r7, #4]
 8001426:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000440 	.word	0x20000440
 8001434:	200004ac 	.word	0x200004ac

08001438 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001440:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001444:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 8001446:	6879      	ldr	r1, [r7, #4]
 8001448:	f04f 0200 	mov.w	r2, #0
 800144c:	f04f 0300 	mov.w	r3, #0
 8001450:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ib = 0;
 8001454:	6879      	ldr	r1, [r7, #4]
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	offset_ic = 0;
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	f04f 0200 	mov.w	r2, #0
 8001468:	f04f 0300 	mov.w	r3, #0
 800146c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 8001470:	2300      	movs	r3, #0
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e02b      	b.n	80014ce <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f80b 	bl	800049c <__aeabi_ui2d>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4620      	mov	r0, r4
 800148c:	4629      	mov	r1, r5
 800148e:	f7fe fec9 	bl	8000224 <__adddf3>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	e9c1 2304 	strd	r2, r3, [r1, #16]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fff8 	bl	800049c <__aeabi_ui2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4620      	mov	r0, r4
 80014b2:	4629      	mov	r1, r5
 80014b4:	f7fe feb6 	bl	8000224 <__adddf3>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	6879      	ldr	r1, [r7, #4]
 80014be:	e9c1 2308 	strd	r2, r3, [r1, #32]
		HAL_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f003 feec 	bl	80052a0 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014d4:	dbcf      	blt.n	8001476 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 80014e2:	f7ff f97f 	bl	80007e4 <__aeabi_ddiv>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	e9c1 2304 	strd	r2, r3, [r1, #16]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 80014fc:	f7ff f972 	bl	80007e4 <__aeabi_ddiv>
 8001500:	4602      	mov	r2, r0
 8001502:	460b      	mov	r3, r1
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bdb0      	pop	{r4, r5, r7, pc}
 8001512:	bf00      	nop
 8001514:	408f4000 	.word	0x408f4000

08001518 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b08a      	sub	sp, #40	@ 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffb6 	bl	800049c <__aeabi_ui2d>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fe72 	bl	8000220 <__aeabi_dsub>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	a33a      	add	r3, pc, #232	@ (adr r3, 8001630 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154a:	f7ff f821 	bl	8000590 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001562:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001566:	ee17 0a90 	vmov	r0, s15
 800156a:	f7fe ffb9 	bl	80004e0 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4620      	mov	r0, r4
 8001574:	4629      	mov	r1, r5
 8001576:	f7ff f935 	bl	80007e4 <__aeabi_ddiv>
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4610      	mov	r0, r2
 8001580:	4619      	mov	r1, r3
 8001582:	f7ff fab5 	bl	8000af0 <__aeabi_d2f>
 8001586:	4602      	mov	r2, r0
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	639a      	str	r2, [r3, #56]	@ 0x38
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ff80 	bl	800049c <__aeabi_ui2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4620      	mov	r0, r4
 80015a2:	4629      	mov	r1, r5
 80015a4:	f7fe fe3c 	bl	8000220 <__aeabi_dsub>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001630 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 80015b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b6:	f7fe ffeb 	bl	8000590 <__aeabi_dmul>
 80015ba:	4602      	mov	r2, r0
 80015bc:	460b      	mov	r3, r1
 80015be:	4614      	mov	r4, r2
 80015c0:	461d      	mov	r5, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80015ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015d2:	ee17 0a90 	vmov	r0, s15
 80015d6:	f7fe ff83 	bl	80004e0 <__aeabi_f2d>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4620      	mov	r0, r4
 80015e0:	4629      	mov	r1, r5
 80015e2:	f7ff f8ff 	bl	80007e4 <__aeabi_ddiv>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	4610      	mov	r0, r2
 80015ec:	4619      	mov	r1, r3
 80015ee:	f7ff fa7f 	bl	8000af0 <__aeabi_d2f>
 80015f2:	4602      	mov	r2, r0
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	641a      	str	r2, [r3, #64]	@ 0x40
//    current.b = - current.a  - current.c; // --(1)
	return current;
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	f107 031c 	add.w	r3, r7, #28
 80015fe:	3238      	adds	r2, #56	@ 0x38
 8001600:	ca07      	ldmia	r2, {r0, r1, r2}
 8001602:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001606:	69f9      	ldr	r1, [r7, #28]
 8001608:	6a3a      	ldr	r2, [r7, #32]
 800160a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160c:	ee06 1a90 	vmov	s13, r1
 8001610:	ee07 2a10 	vmov	s14, r2
 8001614:	ee07 3a90 	vmov	s15, r3
}
 8001618:	eeb0 0a66 	vmov.f32	s0, s13
 800161c:	eef0 0a47 	vmov.f32	s1, s14
 8001620:	eeb0 1a67 	vmov.f32	s2, s15
 8001624:	3728      	adds	r7, #40	@ 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	66666666 	.word	0x66666666
 8001634:	3f4a6666 	.word	0x3f4a6666

08001638 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001638:	b590      	push	{r4, r7, lr}
 800163a:	b08b      	sub	sp, #44	@ 0x2c
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 8001644:	68fc      	ldr	r4, [r7, #12]
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ff66 	bl	8001518 <_ZN12CurrentSense16getPhaseCurrentsEv>
 800164c:	eef0 6a40 	vmov.f32	s13, s0
 8001650:	eeb0 7a60 	vmov.f32	s14, s1
 8001654:	eef0 7a41 	vmov.f32	s15, s2
 8001658:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
 800165c:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
 8001660:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001668:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001670:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001714 <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 8001674:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800167e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001718 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 8001682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001686:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168a:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 800168e:	ed97 0a02 	vldr	s0, [r7, #8]
 8001692:	f001 f8c9 	bl	8002828 <_Z4_cosf>
 8001696:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 800169a:	ed97 0a02 	vldr	s0, [r7, #8]
 800169e:	f001 f84b 	bl	8002738 <_Z4_sinf>
 80016a2:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 80016a6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016b2:	edd7 6a08 	vldr	s13, [r7, #32]
 80016b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	dq_current.q = i_beta  * ct - i_alpha * st;
 80016c8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80016d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	return dq_current;
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	3244      	adds	r2, #68	@ 0x44
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	ee07 2a10 	vmov	s14, r2
 8001702:	ee07 3a90 	vmov	s15, r3
}
 8001706:	eeb0 0a47 	vmov.f32	s0, s14
 800170a:	eef0 0a67 	vmov.f32	s1, s15
 800170e:	372c      	adds	r7, #44	@ 0x2c
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	bf13cd3a 	.word	0xbf13cd3a
 8001718:	bf93cd3a 	.word	0xbf93cd3a

0800171c <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	ed87 0a01 	vstr	s0, [r7, #4]
 8001726:	ed97 0a01 	vldr	s0, [r7, #4]
 800172a:	f009 febb 	bl	800b4a4 <sqrtf>
 800172e:	eef0 7a40 	vmov.f32	s15, s0
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m){}
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <_ZN3EKFC1Eii+0x2c>)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	68ba      	ldr	r2, [r7, #8]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	4618      	mov	r0, r3
 800175e:	3714      	adds	r7, #20
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	0800c85c 	.word	0x0800c85c

0800176c <_ZN3EKFD1Ev>:

EKF::~EKF(){}
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <_ZN3EKFD1Ev+0x1c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4618      	mov	r0, r3
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	0800c85c 	.word	0x0800c85c

0800178c <_ZN3EKFD0Ev>:
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff ffe9 	bl	800176c <_ZN3EKFD1Ev>
 800179a:	210c      	movs	r1, #12
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f009 fdcf 	bl	800b340 <_ZdlPvj>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4618      	mov	r0, r3
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) 
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d201      	bcs.n	80017c8 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	e001      	b.n	80017cc <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295
 80017cc:	4618      	mov	r0, r3
 80017ce:	f009 fdbb 	bl	800b348 <_Znaj>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	6852      	ldr	r2, [r2, #4]
 80017e2:	fb02 f303 	mul.w	r3, r2, r3
 80017e6:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d201      	bcs.n	80017f2 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	e001      	b.n	80017f6 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	4618      	mov	r0, r3
 80017f8:	f009 fda6 	bl	800b348 <_Znaj>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) 
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e02d      	b.n	8001866 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
    {
        for (int j = 0; j < EKF_N; ++j) 
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	e01a      	b.n	8001846 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
        {
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	429a      	cmp	r2, r3
 8001816:	d105      	bne.n	8001824 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	e001      	b.n	8001828 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	6851      	ldr	r1, [r2, #4]
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	6852      	ldr	r2, [r2, #4]
 8001830:	6978      	ldr	r0, [r7, #20]
 8001832:	fb02 f000 	mul.w	r0, r2, r0
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4402      	add	r2, r0
 800183a:	0092      	lsls	r2, r2, #2
 800183c:	440a      	add	r2, r1
 800183e:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) 
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3301      	adds	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	dbdf      	blt.n	8001810 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) 
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	3301      	adds	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	697a      	ldr	r2, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	dbcc      	blt.n	800180a <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3718      	adds	r7, #24
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:
  * @param F Jacobian of state-transition function
  * @param Q process noise matrix
  *
  */
void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) 
{
 800187a:	b590      	push	{r4, r7, lr}
 800187c:	b08d      	sub	sp, #52	@ 0x34
 800187e:	af04      	add	r7, sp, #16
 8001880:	60f8      	str	r0, [r7, #12]
 8001882:	60b9      	str	r1, [r7, #8]
 8001884:	607a      	str	r2, [r7, #4]
 8001886:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	461a      	mov	r2, r3
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	f00a ff2b 	bl	800c6f0 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
    _float_t* FP = new _float_t[EKF_N * EKF_N]();
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	6852      	ldr	r2, [r2, #4]
 80018a2:	fb02 f303 	mul.w	r3, r2, r3
 80018a6:	461c      	mov	r4, r3
 80018a8:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80018ac:	429c      	cmp	r4, r3
 80018ae:	d201      	bcs.n	80018b4 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3a>
 80018b0:	00a3      	lsls	r3, r4, #2
 80018b2:	e001      	b.n	80018b8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3e>
 80018b4:	f04f 33ff 	mov.w	r3, #4294967295
 80018b8:	4618      	mov	r0, r3
 80018ba:	f009 fd45 	bl	800b348 <_Znaj>
 80018be:	4603      	mov	r3, r0
 80018c0:	4618      	mov	r0, r3
 80018c2:	4602      	mov	r2, r0
 80018c4:	1e63      	subs	r3, r4, #1
 80018c6:	e004      	b.n	80018d2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x58>
 80018c8:	f04f 0100 	mov.w	r1, #0
 80018cc:	6011      	str	r1, [r2, #0]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	3204      	adds	r2, #4
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	daf8      	bge.n	80018c8 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x4e>
 80018d6:	61f8      	str	r0, [r7, #28]
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	6858      	ldr	r0, [r3, #4]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	6852      	ldr	r2, [r2, #4]
 80018e4:	68f9      	ldr	r1, [r7, #12]
 80018e6:	6849      	ldr	r1, [r1, #4]
 80018e8:	9102      	str	r1, [sp, #8]
 80018ea:	9201      	str	r2, [sp, #4]
 80018ec:	9300      	str	r3, [sp, #0]
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	4602      	mov	r2, r0
 80018f2:	6839      	ldr	r1, [r7, #0]
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f000 fa8d 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _float_t* Ft = new _float_t[EKF_N * EKF_N]();
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	6852      	ldr	r2, [r2, #4]
 8001902:	fb02 f303 	mul.w	r3, r2, r3
 8001906:	461c      	mov	r4, r3
 8001908:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 800190c:	429c      	cmp	r4, r3
 800190e:	d201      	bcs.n	8001914 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9a>
 8001910:	00a3      	lsls	r3, r4, #2
 8001912:	e001      	b.n	8001918 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9e>
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	4618      	mov	r0, r3
 800191a:	f009 fd15 	bl	800b348 <_Znaj>
 800191e:	4603      	mov	r3, r0
 8001920:	4618      	mov	r0, r3
 8001922:	4602      	mov	r2, r0
 8001924:	1e63      	subs	r3, r4, #1
 8001926:	e004      	b.n	8001932 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xb8>
 8001928:	f04f 0100 	mov.w	r1, #0
 800192c:	6011      	str	r1, [r2, #0]
 800192e:	3b01      	subs	r3, #1
 8001930:	3204      	adds	r2, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	daf8      	bge.n	8001928 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xae>
 8001936:	61b8      	str	r0, [r7, #24]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4613      	mov	r3, r2
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fb15 	bl	8001f78 <_ZN3EKF10_transposeEPKfPfii>

    _float_t* FPFt = new _float_t[EKF_N * EKF_N]();
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	6852      	ldr	r2, [r2, #4]
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	461c      	mov	r4, r3
 800195c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001960:	429c      	cmp	r4, r3
 8001962:	d201      	bcs.n	8001968 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xee>
 8001964:	00a3      	lsls	r3, r4, #2
 8001966:	e001      	b.n	800196c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xf2>
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	4618      	mov	r0, r3
 800196e:	f009 fceb 	bl	800b348 <_Znaj>
 8001972:	4603      	mov	r3, r0
 8001974:	4618      	mov	r0, r3
 8001976:	4602      	mov	r2, r0
 8001978:	1e63      	subs	r3, r4, #1
 800197a:	e004      	b.n	8001986 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x10c>
 800197c:	f04f 0100 	mov.w	r1, #0
 8001980:	6011      	str	r1, [r2, #0]
 8001982:	3b01      	subs	r3, #1
 8001984:	3204      	adds	r2, #4
 8001986:	2b00      	cmp	r3, #0
 8001988:	daf8      	bge.n	800197c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x102>
 800198a:	6178      	str	r0, [r7, #20]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	6852      	ldr	r2, [r2, #4]
 8001994:	68f9      	ldr	r1, [r7, #12]
 8001996:	6849      	ldr	r1, [r1, #4]
 8001998:	9102      	str	r1, [sp, #8]
 800199a:	9201      	str	r2, [sp, #4]
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	69f9      	ldr	r1, [r7, #28]
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f000 fa35 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	68fa      	ldr	r2, [r7, #12]
 80019b4:	6852      	ldr	r2, [r2, #4]
 80019b6:	9201      	str	r2, [sp, #4]
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	460b      	mov	r3, r1
 80019bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80019be:	6979      	ldr	r1, [r7, #20]
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	f000 fb0f 	bl	8001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>

    delete[] FP;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x158>
 80019cc:	69f8      	ldr	r0, [r7, #28]
 80019ce:	f009 fcb9 	bl	800b344 <_ZdaPv>
    delete[] Ft;
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x164>
 80019d8:	69b8      	ldr	r0, [r7, #24]
 80019da:	f009 fcb3 	bl	800b344 <_ZdaPv>
    delete[] FPFt;
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d002      	beq.n	80019ea <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x170>
 80019e4:	6978      	ldr	r0, [r7, #20]
 80019e6:	f009 fcad 	bl	800b344 <_ZdaPv>
}
 80019ea:	bf00      	nop
 80019ec:	3724      	adds	r7, #36	@ 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd90      	pop	{r4, r7, pc}

080019f2 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:



void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) 
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	@ 0x28
 80019f6:	af04      	add	r7, sp, #16
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
    _negate(GH, EKF_N, EKF_N);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f000 fb30 	bl	800206e <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	461a      	mov	r2, r3
 8001a14:	6879      	ldr	r1, [r7, #4]
 8001a16:	68f8      	ldr	r0, [r7, #12]
 8001a18:	f000 fb63 	bl	80020e2 <_ZN3EKF7_addeyeEPfi>
    _float_t* GHP = new _float_t[EKF_N * EKF_N];
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6852      	ldr	r2, [r2, #4]
 8001a24:	fb02 f303 	mul.w	r3, r2, r3
 8001a28:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d201      	bcs.n	8001a34 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x42>
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	e001      	b.n	8001a38 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x46>
 8001a34:	f04f 33ff 	mov.w	r3, #4294967295
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f009 fc85 	bl	800b348 <_Znaj>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	617b      	str	r3, [r7, #20]
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	6858      	ldr	r0, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	6852      	ldr	r2, [r2, #4]
 8001a4e:	68f9      	ldr	r1, [r7, #12]
 8001a50:	6849      	ldr	r1, [r1, #4]
 8001a52:	9102      	str	r1, [sp, #8]
 8001a54:	9201      	str	r2, [sp, #4]
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 f9d8 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	6858      	ldr	r0, [r3, #4]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	6852      	ldr	r2, [r2, #4]
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	461a      	mov	r2, r3
 8001a78:	6979      	ldr	r1, [r7, #20]
 8001a7a:	f00a fe39 	bl	800c6f0 <memcpy>
    delete[] GHP;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x98>
 8001a84:	6978      	ldr	r0, [r7, #20]
 8001a86:	f009 fc5d 	bl	800b344 <_ZdaPv>
}
 8001a8a:	bf00      	nop
 8001a8c:	3718      	adds	r7, #24
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:
  * @param H sensor-function Jacobian matrix
  * @param R measurement-noise matrix
  *
  */
bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) 
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b092      	sub	sp, #72	@ 0x48
 8001a96:	af04      	add	r7, sp, #16
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
     // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t* G = new _float_t[EKF_N * EKF_M];
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	6892      	ldr	r2, [r2, #8]
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d201      	bcs.n	8001ab8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x26>
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	e001      	b.n	8001abc <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a>
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	4618      	mov	r0, r3
 8001abe:	f009 fc43 	bl	800b348 <_Znaj>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	637b      	str	r3, [r7, #52]	@ 0x34
    _float_t* Ht = new _float_t[EKF_N * EKF_M];
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	6892      	ldr	r2, [r2, #8]
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d201      	bcs.n	8001ade <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4c>
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	e001      	b.n	8001ae2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x50>
 8001ade:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f009 fc30 	bl	800b348 <_Znaj>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	633b      	str	r3, [r7, #48]	@ 0x30
    _transpose(H, Ht, EKF_M, EKF_N);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4613      	mov	r3, r2
 8001af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001afa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001afc:	68f8      	ldr	r0, [r7, #12]
 8001afe:	f000 fa3b 	bl	8001f78 <_ZN3EKF10_transposeEPKfPfii>
    _float_t* PHt = new _float_t[EKF_N * EKF_M];
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	6892      	ldr	r2, [r2, #8]
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d201      	bcs.n	8001b1a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x88>
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	e001      	b.n	8001b1e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x8c>
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f009 fc12 	bl	800b348 <_Znaj>
 8001b24:	4603      	mov	r3, r0
 8001b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	6858      	ldr	r0, [r3, #4]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	68fa      	ldr	r2, [r7, #12]
 8001b32:	6852      	ldr	r2, [r2, #4]
 8001b34:	68f9      	ldr	r1, [r7, #12]
 8001b36:	6889      	ldr	r1, [r1, #8]
 8001b38:	9102      	str	r1, [sp, #8]
 8001b3a:	9201      	str	r2, [sp, #4]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001b42:	4601      	mov	r1, r0
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f965 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HP = new _float_t[EKF_M * EKF_N];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	68fa      	ldr	r2, [r7, #12]
 8001b50:	6852      	ldr	r2, [r2, #4]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d201      	bcs.n	8001b62 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd0>
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	e001      	b.n	8001b66 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd4>
 8001b62:	f04f 33ff 	mov.w	r3, #4294967295
 8001b66:	4618      	mov	r0, r3
 8001b68:	f009 fbee 	bl	800b348 <_Znaj>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6858      	ldr	r0, [r3, #4]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	68fa      	ldr	r2, [r7, #12]
 8001b7a:	6852      	ldr	r2, [r2, #4]
 8001b7c:	68f9      	ldr	r1, [r7, #12]
 8001b7e:	6849      	ldr	r1, [r1, #4]
 8001b80:	9102      	str	r1, [sp, #8]
 8001b82:	9201      	str	r2, [sp, #4]
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b88:	4602      	mov	r2, r0
 8001b8a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001b8c:	68f8      	ldr	r0, [r7, #12]
 8001b8e:	f000 f941 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHt = new _float_t[EKF_M * EKF_M];
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	6892      	ldr	r2, [r2, #8]
 8001b9a:	fb02 f303 	mul.w	r3, r2, r3
 8001b9e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d201      	bcs.n	8001baa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x118>
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	e001      	b.n	8001bae <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x11c>
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f009 fbca 	bl	800b348 <_Znaj>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	6852      	ldr	r2, [r2, #4]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	6889      	ldr	r1, [r1, #8]
 8001bc4:	9102      	str	r1, [sp, #8]
 8001bc6:	9201      	str	r2, [sp, #4]
 8001bc8:	9300      	str	r3, [sp, #0]
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f000 f91f 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHtR = new _float_t[EKF_M * EKF_M];
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	6892      	ldr	r2, [r2, #8]
 8001bde:	fb02 f303 	mul.w	r3, r2, r3
 8001be2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d201      	bcs.n	8001bee <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x15c>
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	e001      	b.n	8001bf2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x160>
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f009 fba8 	bl	800b348 <_Znaj>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	623b      	str	r3, [r7, #32]
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	68fa      	ldr	r2, [r7, #12]
 8001c02:	6892      	ldr	r2, [r2, #8]
 8001c04:	9201      	str	r2, [sp, #4]
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001c0e:	68f8      	ldr	r0, [r7, #12]
 8001c10:	f000 f9e8 	bl	8001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t* HPHtRinv = new _float_t[EKF_M * EKF_M];
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	68fa      	ldr	r2, [r7, #12]
 8001c1a:	6892      	ldr	r2, [r2, #8]
 8001c1c:	fb02 f303 	mul.w	r3, r2, r3
 8001c20:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d201      	bcs.n	8001c2c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19a>
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	e001      	b.n	8001c30 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19e>
 8001c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001c30:	4618      	mov	r0, r3
 8001c32:	f009 fb89 	bl	800b348 <_Znaj>
 8001c36:	4603      	mov	r3, r0
 8001c38:	61fb      	str	r3, [r7, #28]
    if (!invert(HpHtR, HPHtRinv)) {
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f000 fd1d 	bl	800267e <_ZN3EKF6invertEPKfPf>
 8001c44:	4603      	mov	r3, r0
 8001c46:	f083 0301 	eor.w	r3, r3, #1
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d02b      	beq.n	8001ca8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x216>
        delete[] G;
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d002      	beq.n	8001c5c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ca>
 8001c56:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001c58:	f009 fb74 	bl	800b344 <_ZdaPv>
        delete[] Ht;
 8001c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d6>
 8001c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001c64:	f009 fb6e 	bl	800b344 <_ZdaPv>
        delete[] PHt;
 8001c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8001c6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001c70:	f009 fb68 	bl	800b344 <_ZdaPv>
        delete[] HP;
 8001c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ee>
 8001c7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001c7c:	f009 fb62 	bl	800b344 <_ZdaPv>
        delete[] HpHt;
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1fa>
 8001c86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c88:	f009 fb5c 	bl	800b344 <_ZdaPv>
        delete[] HpHtR;
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x206>
 8001c92:	6a38      	ldr	r0, [r7, #32]
 8001c94:	f009 fb56 	bl	800b344 <_ZdaPv>
        delete[] HPHtRinv;
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x212>
 8001c9e:	69f8      	ldr	r0, [r7, #28]
 8001ca0:	f009 fb50 	bl	800b344 <_ZdaPv>
        return false;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	e0b1      	b.n	8001e0c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x37a>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	6892      	ldr	r2, [r2, #8]
 8001cb0:	68f9      	ldr	r1, [r7, #12]
 8001cb2:	6889      	ldr	r1, [r1, #8]
 8001cb4:	9102      	str	r1, [sp, #8]
 8001cb6:	9201      	str	r2, [sp, #4]
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cbc:	69fa      	ldr	r2, [r7, #28]
 8001cbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001cc0:	68f8      	ldr	r0, [r7, #12]
 8001cc2:	f000 f8a7 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t* z_hx = new _float_t[EKF_M];
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d201      	bcs.n	8001cd6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x244>
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	e001      	b.n	8001cda <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x248>
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f009 fb34 	bl	800b348 <_Znaj>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	61bb      	str	r3, [r7, #24]
    _sub(z, hx, z_hx, EKF_M);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6879      	ldr	r1, [r7, #4]
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f000 fc98 	bl	8002626 <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t* Gz_hx = new _float_t[EKF_N];
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d201      	bcs.n	8001d06 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x274>
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	e001      	b.n	8001d0a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x278>
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f009 fb1c 	bl	800b348 <_Znaj>
 8001d10:	4603      	mov	r3, r0
 8001d12:	617b      	str	r3, [r7, #20]
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6892      	ldr	r2, [r2, #8]
 8001d1c:	9201      	str	r2, [sp, #4]
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f8dc 	bl	8001ee4 <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	6819      	ldr	r1, [r3, #0]
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fc45 	bl	80025ce <_ZN3EKF7_addvecEPKfS1_Pfi>

    // P_k = (I - G_k H_k) P_k
    _float_t* GH = new _float_t[EKF_N * EKF_N];
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	68fa      	ldr	r2, [r7, #12]
 8001d4a:	6852      	ldr	r2, [r2, #4]
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d201      	bcs.n	8001d5c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ca>
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	e001      	b.n	8001d60 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ce>
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d60:	4618      	mov	r0, r3
 8001d62:	f009 faf1 	bl	800b348 <_Znaj>
 8001d66:	4603      	mov	r3, r0
 8001d68:	613b      	str	r3, [r7, #16]
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	6892      	ldr	r2, [r2, #8]
 8001d72:	68f9      	ldr	r1, [r7, #12]
 8001d74:	6849      	ldr	r1, [r1, #4]
 8001d76:	9102      	str	r1, [sp, #8]
 8001d78:	9201      	str	r2, [sp, #4]
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001d80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f000 f846 	bl	8001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	68b9      	ldr	r1, [r7, #8]
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff fe30 	bl	80019f2 <_ZN3EKF16ekf_update_step3EP5ekf_tPf>

    delete[] G;
 8001d92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x30c>
 8001d98:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d9a:	f009 fad3 	bl	800b344 <_ZdaPv>
    delete[] Ht;
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d002      	beq.n	8001daa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x318>
 8001da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001da6:	f009 facd 	bl	800b344 <_ZdaPv>
    delete[] PHt;
 8001daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x324>
 8001db0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001db2:	f009 fac7 	bl	800b344 <_ZdaPv>
    delete[] HP;
 8001db6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x330>
 8001dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001dbe:	f009 fac1 	bl	800b344 <_ZdaPv>
    delete[] HpHt;
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d002      	beq.n	8001dce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x33c>
 8001dc8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001dca:	f009 fabb 	bl	800b344 <_ZdaPv>
    delete[] HpHtR;
 8001dce:	6a3b      	ldr	r3, [r7, #32]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x348>
 8001dd4:	6a38      	ldr	r0, [r7, #32]
 8001dd6:	f009 fab5 	bl	800b344 <_ZdaPv>
    delete[] HPHtRinv;
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x354>
 8001de0:	69f8      	ldr	r0, [r7, #28]
 8001de2:	f009 faaf 	bl	800b344 <_ZdaPv>
    delete[] z_hx;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
 8001dec:	69b8      	ldr	r0, [r7, #24]
 8001dee:	f009 faa9 	bl	800b344 <_ZdaPv>
    delete[] Gz_hx;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36c>
 8001df8:	6978      	ldr	r0, [r7, #20]
 8001dfa:	f009 faa3 	bl	800b344 <_ZdaPv>
    delete[] GH;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d002      	beq.n	8001e0a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x378>
 8001e04:	6938      	ldr	r0, [r7, #16]
 8001e06:	f009 fa9d 	bl	800b344 <_ZdaPv>

    // success
    return true;
 8001e0a:	2301      	movs	r3, #1
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3738      	adds	r7, #56	@ 0x38
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <_ZN3EKF7_mulmatEPKfS1_Pfiii>:
        const _float_t * b,
        _float_t * c,
        const int arows,
        const int acols,
        const int bcols)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	@ 0x24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	607a      	str	r2, [r7, #4]
 8001e20:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	e052      	b.n	8001ece <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j=0; j<bcols; ++j) {
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
 8001e2c:	e048      	b.n	8001ec0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i*bcols+j] = 0;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e32:	fb03 f202 	mul.w	r2, r3, r2
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	683a      	ldr	r2, [r7, #0]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e032      	b.n	8001eb2 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e50:	fb03 f202 	mul.w	r2, r3, r2
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	4413      	add	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	683a      	ldr	r2, [r7, #0]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e66:	fb03 f202 	mul.w	r2, r3, r2
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	68ba      	ldr	r2, [r7, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	edd3 6a00 	vldr	s13, [r3]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e7c:	fb03 f202 	mul.w	r2, r3, r2
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	4413      	add	r3, r2
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e96:	fb03 f202 	mul.w	r2, r3, r2
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	617b      	str	r3, [r7, #20]
 8001eb2:	697a      	ldr	r2, [r7, #20]
 8001eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dbc8      	blt.n	8001e4c <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j=0; j<bcols; ++j) {
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	61bb      	str	r3, [r7, #24]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	dbb2      	blt.n	8001e2e <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i=0; i<arows; ++i) {
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	dba8      	blt.n	8001e28 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	3724      	adds	r7, #36	@ 0x24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN3EKF7_mulvecEPKfS1_Pfii>:
        const _float_t * a,
        const _float_t * x,
        _float_t * y,
        const int m,
        const int n)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
 8001ef0:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e034      	b.n	8001f62 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	f04f 0200 	mov.w	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e023      	b.n	8001f54 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i*n+j];
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	4413      	add	r3, r2
 8001f14:	ed93 7a00 	vldr	s14, [r3]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	edd3 6a00 	vldr	s13, [r3]
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f28:	fb03 f202 	mul.w	r2, r3, r2
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	4413      	add	r3, r2
 8001f36:	edd3 7a00 	vldr	s15, [r3]
 8001f3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4413      	add	r3, r2
 8001f46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f4a:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	3301      	adds	r3, #1
 8001f52:	613b      	str	r3, [r7, #16]
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	dbd7      	blt.n	8001f0c <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i=0; i<m; ++i) {
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	3301      	adds	r3, #1
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697a      	ldr	r2, [r7, #20]
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	dbc6      	blt.n	8001ef8 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
    }
}
 8001f6a:	bf00      	nop
 8001f6c:	bf00      	nop
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_ZN3EKF10_transposeEPKfPfii>:

/// @private
 void EKF::_transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b087      	sub	sp, #28
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e020      	b.n	8001fce <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j=0; j<n; ++j) {
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e016      	b.n	8001fc0 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j*m+i] = a[i*n+j];
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	6a3a      	ldr	r2, [r7, #32]
 8001f96:	fb03 f202 	mul.w	r2, r3, r2
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	441a      	add	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6839      	ldr	r1, [r7, #0]
 8001fa8:	fb03 f101 	mul.w	r1, r3, r1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	440b      	add	r3, r1
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	440b      	add	r3, r1
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	dbe4      	blt.n	8001f92 <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i=0; i<m; ++i)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dbda      	blt.n	8001f8c <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
}
 8001fd6:	bf00      	nop
 8001fd8:	bf00      	nop
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
 void EKF::_addmat(
        const _float_t * a, const _float_t * b, _float_t * c,
        const int m, const int n)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b087      	sub	sp, #28
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
 8001ff0:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
 8001ff6:	e02f      	b.n	8002058 <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j=0; j<n; ++j) {
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	e025      	b.n	800204a <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002002:	fb03 f202 	mul.w	r2, r3, r2
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	68ba      	ldr	r2, [r7, #8]
 800200e:	4413      	add	r3, r2
 8002010:	ed93 7a00 	vldr	s14, [r3]
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002018:	fb03 f202 	mul.w	r2, r3, r2
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	683a      	ldr	r2, [r7, #0]
 800203a:	4413      	add	r3, r2
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	3301      	adds	r3, #1
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	693a      	ldr	r2, [r7, #16]
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	429a      	cmp	r2, r3
 8002050:	dbd5      	blt.n	8001ffe <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i=0; i<m; ++i) {
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbcb      	blt.n	8001ff8 <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	371c      	adds	r7, #28
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_ZN3EKF7_negateEPfii>:

/// @private
 void EKF::_negate(_float_t * a, const int m, const int n)
{
 800206e:	b480      	push	{r7}
 8002070:	b087      	sub	sp, #28
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
 800207a:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e024      	b.n	80020cc <_ZN3EKF7_negateEPfii+0x5e>
        for (int j=0; j<n; ++j) {
 8002082:	2300      	movs	r3, #0
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	e01a      	b.n	80020be <_ZN3EKF7_negateEPfii+0x50>
            a[i*n+j] = -a[i*n+j];
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	fb03 f202 	mul.w	r2, r3, r2
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	4413      	add	r3, r2
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	fb03 f202 	mul.w	r2, r3, r2
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	68ba      	ldr	r2, [r7, #8]
 80020ae:	4413      	add	r3, r2
 80020b0:	eef1 7a67 	vneg.f32	s15, s15
 80020b4:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	3301      	adds	r3, #1
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	dbe0      	blt.n	8002088 <_ZN3EKF7_negateEPfii+0x1a>
    for (int i=0; i<m; ++i) {
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbd6      	blt.n	8002082 <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	371c      	adds	r7, #28
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <_ZN3EKF7_addeyeEPfi>:

/// @private
 void EKF::_addeye(_float_t * a, const int n)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b087      	sub	sp, #28
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	60f8      	str	r0, [r7, #12]
 80020ea:	60b9      	str	r1, [r7, #8]
 80020ec:	607a      	str	r2, [r7, #4]
    for (int i=0; i<n; ++i) {
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e01c      	b.n	800212e <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i*n+i] += 1;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	fb03 f202 	mul.w	r2, r3, r2
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	4413      	add	r3, r2
 8002106:	edd3 7a00 	vldr	s15, [r3]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	fb03 f202 	mul.w	r2, r3, r2
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	4413      	add	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	68ba      	ldr	r2, [r7, #8]
 800211a:	4413      	add	r3, r2
 800211c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002120:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002124:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	3301      	adds	r3, #1
 800212c:	617b      	str	r3, [r7, #20]
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	429a      	cmp	r2, r3
 8002134:	dbde      	blt.n	80020f4 <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 8002136:	bf00      	nop
 8002138:	bf00      	nop
 800213a:	371c      	adds	r7, #28
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b089      	sub	sp, #36	@ 0x24
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	e06e      	b.n	8002236 <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	61bb      	str	r3, [r7, #24]
 800215c:	e064      	b.n	8002228 <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	fb03 f202 	mul.w	r2, r3, r2
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	4413      	add	r3, r2
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	e020      	b.n	80021be <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	fb03 f202 	mul.w	r2, r3, r2
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	68ba      	ldr	r2, [r7, #8]
 800218c:	4413      	add	r3, r2
 800218e:	ed93 7a00 	vldr	s14, [r3]
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	fb03 f202 	mul.w	r2, r3, r2
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	68ba      	ldr	r2, [r7, #8]
 80021a2:	4413      	add	r3, r2
 80021a4:	edd3 7a00 	vldr	s15, [r3]
 80021a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80021b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021b4:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	dadb      	bge.n	800217c <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d115      	bne.n	80021f8 <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 80021cc:	edd7 7a05 	vldr	s15, [r7, #20]
 80021d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d8:	d801      	bhi.n	80021de <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 80021da:	2301      	movs	r3, #1
 80021dc:	e030      	b.n	8002240 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	18d4      	adds	r4, r2, r3
 80021e6:	ed97 0a05 	vldr	s0, [r7, #20]
 80021ea:	f7ff fa97 	bl	800171c <_ZSt4sqrtf>
 80021ee:	eef0 7a40 	vmov.f32	s15, s0
 80021f2:	edc4 7a00 	vstr	s15, [r4]
 80021f6:	e014      	b.n	8002222 <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	4413      	add	r3, r2
 8002200:	ed93 7a00 	vldr	s14, [r3]
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	fb03 f202 	mul.w	r2, r3, r2
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	4413      	add	r3, r2
 8002216:	edd7 6a05 	vldr	s13, [r7, #20]
 800221a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800221e:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	3301      	adds	r3, #1
 8002226:	61bb      	str	r3, [r7, #24]
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	db96      	blt.n	800215e <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	3301      	adds	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
 8002236:	69fa      	ldr	r2, [r7, #28]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	429a      	cmp	r2, r3
 800223c:	db8c      	blt.n	8002158 <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3724      	adds	r7, #36	@ 0x24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}

08002248 <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b08a      	sub	sp, #40	@ 0x28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	627b      	str	r3, [r7, #36]	@ 0x24
 800225a:	e020      	b.n	800229e <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 800225c:	2300      	movs	r3, #0
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	e016      	b.n	8002290 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 8002262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002264:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002266:	fb03 f202 	mul.w	r2, r3, r2
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	4413      	add	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	441a      	add	r2, r3
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002278:	fb03 f101 	mul.w	r1, r3, r1
 800227c:	6a3b      	ldr	r3, [r7, #32]
 800227e:	440b      	add	r3, r1
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	440b      	add	r3, r1
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	3301      	adds	r3, #1
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	6a3a      	ldr	r2, [r7, #32]
 8002292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002294:	429a      	cmp	r2, r3
 8002296:	dbe4      	blt.n	8002262 <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229a:	3301      	adds	r3, #1
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
 800229e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbda      	blt.n	800225c <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 80022a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f7ff ff49 	bl	8002144 <_ZN3EKF8_choldc1EPfS0_i>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	bf14      	ite	ne
 80022b8:	2301      	movne	r3, #1
 80022ba:	2300      	moveq	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e06a      	b.n	800239c <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e062      	b.n	8002392 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	ed93 7a00 	vldr	s14, [r3]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022dc:	fb03 f202 	mul.w	r2, r3, r2
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	4413      	add	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	4413      	add	r3, r2
 80022ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022f2:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	3301      	adds	r3, #1
 80022fa:	61bb      	str	r3, [r7, #24]
 80022fc:	e042      	b.n	8002384 <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 80022fe:	f04f 0300 	mov.w	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	e020      	b.n	800234c <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4413      	add	r3, r2
 800231c:	ed93 7a00 	vldr	s14, [r3]
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002324:	fb03 f202 	mul.w	r2, r3, r2
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800233a:	ed97 7a05 	vldr	s14, [r7, #20]
 800233e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002342:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	3301      	adds	r3, #1
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693a      	ldr	r2, [r7, #16]
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	429a      	cmp	r2, r3
 8002352:	dbda      	blt.n	800230a <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	4413      	add	r3, r2
 800235c:	ed93 7a00 	vldr	s14, [r3]
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002364:	fb03 f202 	mul.w	r2, r3, r2
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	edd7 6a05 	vldr	s13, [r7, #20]
 8002376:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800237a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	3301      	adds	r3, #1
 8002382:	61bb      	str	r3, [r7, #24]
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002388:	429a      	cmp	r2, r3
 800238a:	dbb8      	blt.n	80022fe <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	3301      	adds	r3, #1
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	69fa      	ldr	r2, [r7, #28]
 8002394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002396:	429a      	cmp	r2, r3
 8002398:	db98      	blt.n	80022cc <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3728      	adds	r7, #40	@ 0x28
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08e      	sub	sp, #56	@ 0x38
 80023a8:	af02      	add	r7, sp, #8
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 80023b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f7ff ff43 	bl	8002248 <_ZN3EKF9_choldcslEPKfPfS2_i>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	bf14      	ite	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	2300      	moveq	r3, #0
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e0f7      	b.n	80025c6 <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 80023d6:	2300      	movs	r3, #0
 80023d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023da:	e019      	b.n	8002410 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023de:	3301      	adds	r3, #1
 80023e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e2:	e00e      	b.n	8002402 <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 80023e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023e8:	fb03 f202 	mul.w	r2, r3, r2
 80023ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ee:	4413      	add	r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	4413      	add	r3, r2
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	3301      	adds	r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002402:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002406:	429a      	cmp	r2, r3
 8002408:	dbec      	blt.n	80023e4 <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 800240a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800240c:	3301      	adds	r3, #1
 800240e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002410:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002414:	429a      	cmp	r2, r3
 8002416:	dbe1      	blt.n	80023dc <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 8002418:	2300      	movs	r3, #0
 800241a:	627b      	str	r3, [r7, #36]	@ 0x24
 800241c:	e0a5      	b.n	800256a <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002428:	4413      	add	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	4413      	add	r3, r2
 8002430:	ed93 7a00 	vldr	s14, [r3]
 8002434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002436:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002438:	fb03 f202 	mul.w	r2, r3, r2
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	4413      	add	r3, r2
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800244c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800244e:	fb03 f202 	mul.w	r2, r3, r2
 8002452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002454:	4413      	add	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	4413      	add	r3, r2
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8002464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002466:	3301      	adds	r3, #1
 8002468:	623b      	str	r3, [r7, #32]
 800246a:	e032      	b.n	80024d2 <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800246c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002470:	fb03 f202 	mul.w	r2, r3, r2
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	4413      	add	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	4413      	add	r3, r2
 800247e:	ed93 7a00 	vldr	s14, [r3]
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002486:	fb03 f202 	mul.w	r2, r3, r2
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	4413      	add	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	4413      	add	r3, r2
 8002494:	edd3 6a00 	vldr	s13, [r3]
 8002498:	6a3b      	ldr	r3, [r7, #32]
 800249a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800249c:	fb03 f202 	mul.w	r2, r3, r2
 80024a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a2:	4413      	add	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	4413      	add	r3, r2
 80024aa:	edd3 7a00 	vldr	s15, [r3]
 80024ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b6:	fb03 f202 	mul.w	r2, r3, r2
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	687a      	ldr	r2, [r7, #4]
 80024c2:	4413      	add	r3, r2
 80024c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c8:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 80024cc:	6a3b      	ldr	r3, [r7, #32]
 80024ce:	3301      	adds	r3, #1
 80024d0:	623b      	str	r3, [r7, #32]
 80024d2:	6a3a      	ldr	r2, [r7, #32]
 80024d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d6:	429a      	cmp	r2, r3
 80024d8:	dbc8      	blt.n	800246c <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	e03c      	b.n	800255c <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	e032      	b.n	800254e <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024ec:	fb03 f202 	mul.w	r2, r3, r2
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	ed93 7a00 	vldr	s14, [r3]
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002502:	fb03 f202 	mul.w	r2, r3, r2
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	4413      	add	r3, r2
 8002510:	edd3 6a00 	vldr	s13, [r3]
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002518:	fb03 f202 	mul.w	r2, r3, r2
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	edd3 7a00 	vldr	s15, [r3]
 800252a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800252e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002530:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002532:	fb03 f202 	mul.w	r2, r3, r2
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	4413      	add	r3, r2
 8002540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002544:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	3301      	adds	r3, #1
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002552:	429a      	cmp	r2, r3
 8002554:	dbc8      	blt.n	80024e8 <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	3301      	adds	r3, #1
 800255a:	61fb      	str	r3, [r7, #28]
 800255c:	69fa      	ldr	r2, [r7, #28]
 800255e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002560:	429a      	cmp	r2, r3
 8002562:	dbbe      	blt.n	80024e2 <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	3301      	adds	r3, #1
 8002568:	627b      	str	r3, [r7, #36]	@ 0x24
 800256a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800256e:	429a      	cmp	r2, r3
 8002570:	f6ff af55 	blt.w	800241e <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]
 8002578:	e020      	b.n	80025bc <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e016      	b.n	80025ae <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002584:	fb03 f202 	mul.w	r2, r3, r2
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	441a      	add	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002596:	fb03 f101 	mul.w	r1, r3, r1
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	440b      	add	r3, r1
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	6879      	ldr	r1, [r7, #4]
 80025a2:	440b      	add	r3, r1
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	3301      	adds	r3, #1
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbe4      	blt.n	8002580 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3301      	adds	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025c0:	429a      	cmp	r2, r3
 80025c2:	dbda      	blt.n	800257a <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3730      	adds	r7, #48	@ 0x30
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZN3EKF7_addvecEPKfS1_Pfi>:

/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b087      	sub	sp, #28
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	60b9      	str	r1, [r7, #8]
 80025d8:	607a      	str	r2, [r7, #4]
 80025da:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
 80025e0:	e016      	b.n	8002610 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	4413      	add	r3, r2
 80025ea:	ed93 7a00 	vldr	s14, [r3]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	4413      	add	r3, r2
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	4413      	add	r3, r2
 8002602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002606:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3301      	adds	r3, #1
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbe4      	blt.n	80025e2 <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr

08002626 <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8002626:	b480      	push	{r7}
 8002628:	b087      	sub	sp, #28
 800262a:	af00      	add	r7, sp, #0
 800262c:	60f8      	str	r0, [r7, #12]
 800262e:	60b9      	str	r1, [r7, #8]
 8002630:	607a      	str	r2, [r7, #4]
 8002632:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	e016      	b.n	8002668 <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	68ba      	ldr	r2, [r7, #8]
 8002640:	4413      	add	r3, r2
 8002642:	ed93 7a00 	vldr	s14, [r3]
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	edd3 7a00 	vldr	s15, [r3]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	683a      	ldr	r2, [r7, #0]
 8002658:	4413      	add	r3, r2
 800265a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800265e:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3301      	adds	r3, #1
 8002666:	617b      	str	r3, [r7, #20]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	429a      	cmp	r2, r3
 800266e:	dbe4      	blt.n	800263a <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	371c      	adds	r7, #28
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <_ZN3EKF6invertEPKfPf>:

/// @private
 bool EKF::invert(const _float_t * a, _float_t * ainv)
{
 800267e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002682:	b089      	sub	sp, #36	@ 0x24
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 800268c:	466b      	mov	r3, sp
 800268e:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	1e4b      	subs	r3, r1, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	460a      	mov	r2, r1
 800269a:	2300      	movs	r3, #0
 800269c:	4690      	mov	r8, r2
 800269e:	4699      	mov	r9, r3
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80026ac:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80026b0:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80026b4:	460a      	mov	r2, r1
 80026b6:	2300      	movs	r3, #0
 80026b8:	4614      	mov	r4, r2
 80026ba:	461d      	mov	r5, r3
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	f04f 0300 	mov.w	r3, #0
 80026c4:	016b      	lsls	r3, r5, #5
 80026c6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80026ca:	0162      	lsls	r2, r4, #5
 80026cc:	460b      	mov	r3, r1
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	3307      	adds	r3, #7
 80026d2:	08db      	lsrs	r3, r3, #3
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	ebad 0d03 	sub.w	sp, sp, r3
 80026da:	ab02      	add	r3, sp, #8
 80026dc:	3303      	adds	r3, #3
 80026de:	089b      	lsrs	r3, r3, #2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f7ff fe57 	bl	80023a4 <_ZN3EKF7_cholslEPKfPfS2_i>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	bf0c      	ite	eq
 80026fc:	2301      	moveq	r3, #1
 80026fe:	2300      	movne	r3, #0
 8002700:	b2db      	uxtb	r3, r3
 8002702:	46b5      	mov	sp, r6
}
 8002704:	4618      	mov	r0, r3
 8002706:	371c      	adds	r7, #28
 8002708:	46bd      	mov	sp, r7
 800270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800270e <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	ed87 0a01 	vstr	s0, [r7, #4]
 8002718:	edc7 0a00 	vstr	s1, [r7]
 800271c:	edd7 0a00 	vldr	s1, [r7]
 8002720:	ed97 0a01 	vldr	s0, [r7, #4]
 8002724:	f008 fe9e 	bl	800b464 <fmodf>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	eeb0 0a67 	vmov.f32	s0, s15
 8002730:	3708      	adds	r7, #8
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8002742:	edd7 7a01 	vldr	s15, [r7, #4]
 8002746:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800281c <_Z4_sinf+0xe4>
 800274a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800274e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002752:	ee17 3a90 	vmov	r3, s15
 8002756:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0a1b      	lsrs	r3, r3, #8
 8002762:	b2db      	uxtb	r3, r3
 8002764:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2b3f      	cmp	r3, #63	@ 0x3f
 800276a:	d80b      	bhi.n	8002784 <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 800276c:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <_Z4_sinf+0xe8>)
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002774:	617b      	str	r3, [r7, #20]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	3301      	adds	r3, #1
 800277a:	4a29      	ldr	r2, [pc, #164]	@ (8002820 <_Z4_sinf+0xe8>)
 800277c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	e033      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2b7f      	cmp	r3, #127	@ 0x7f
 8002788:	d80e      	bhi.n	80027a8 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002790:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <_Z4_sinf+0xe8>)
 8002792:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002796:	617b      	str	r3, [r7, #20]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800279e:	4a20      	ldr	r2, [pc, #128]	@ (8002820 <_Z4_sinf+0xe8>)
 80027a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027a4:	613b      	str	r3, [r7, #16]
 80027a6:	e021      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2bbf      	cmp	r3, #191	@ 0xbf
 80027ac:	d80e      	bhi.n	80027cc <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3b80      	subs	r3, #128	@ 0x80
 80027b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002820 <_Z4_sinf+0xe8>)
 80027b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027b8:	425b      	negs	r3, r3
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	3b7f      	subs	r3, #127	@ 0x7f
 80027c0:	4a17      	ldr	r2, [pc, #92]	@ (8002820 <_Z4_sinf+0xe8>)
 80027c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027c6:	425b      	negs	r3, r3
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	e00f      	b.n	80027ec <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80027d2:	4a13      	ldr	r2, [pc, #76]	@ (8002820 <_Z4_sinf+0xe8>)
 80027d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027d8:	425b      	negs	r3, r3
 80027da:	617b      	str	r3, [r7, #20]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80027e2:	4a0f      	ldr	r2, [pc, #60]	@ (8002820 <_Z4_sinf+0xe8>)
 80027e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027e8:	425b      	negs	r3, r3
 80027ea:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	fb02 f303 	mul.w	r3, r2, r3
 80027f8:	121a      	asrs	r2, r3, #8
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	4413      	add	r3, r2
 80027fe:	ee07 3a90 	vmov	s15, r3
 8002802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002806:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8002824 <_Z4_sinf+0xec>
 800280a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800280e:	eeb0 0a67 	vmov.f32	s0, s15
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	4622f983 	.word	0x4622f983
 8002820:	20000014 	.word	0x20000014
 8002824:	38000000 	.word	0x38000000

08002828 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8002832:	edd7 7a01 	vldr	s15, [r7, #4]
 8002836:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002880 <_Z4_cosf+0x58>
 800283a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800283e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8002842:	edd7 7a03 	vldr	s15, [r7, #12]
 8002846:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002884 <_Z4_cosf+0x5c>
 800284a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002852:	dd06      	ble.n	8002862 <_Z4_cosf+0x3a>
 8002854:	edd7 7a03 	vldr	s15, [r7, #12]
 8002858:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002884 <_Z4_cosf+0x5c>
 800285c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002860:	e001      	b.n	8002866 <_Z4_cosf+0x3e>
 8002862:	edd7 7a03 	vldr	s15, [r7, #12]
 8002866:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800286a:	ed97 0a03 	vldr	s0, [r7, #12]
 800286e:	f7ff ff63 	bl	8002738 <_Z4_sinf>
 8002872:	eef0 7a40 	vmov.f32	s15, s0
}
 8002876:	eeb0 0a67 	vmov.f32	s0, s15
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	3fc90fdb 	.word	0x3fc90fdb
 8002884:	40c90fdb 	.word	0x40c90fdb

08002888 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a6:	d501      	bpl.n	80028ac <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	e000      	b.n	80028ae <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80028ac:	687b      	ldr	r3, [r7, #4]
    }
 80028ae:	4618      	mov	r0, r3
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <_Z6_atan2ff>:
// Via Odrive project
// https://github.com/odriverobotics/ODrive/blob/master/Firmware/MotorControl/utils.cpp
// This function is MIT licenced, copyright Oskar Weigl/Odrive Robotics
// The origin for Odrive atan2 is public domain. Thanks to Odrive for making
// it easy to borrow.
__attribute__((weak)) float _atan2(float y, float x) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	ed2d 8b02 	vpush	{d8}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028ca:	edc7 0a00 	vstr	s1, [r7]
    // a := min (|x|, |y|) / max (|x|, |y|)
    float abs_y = fabsf(y);
 80028ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80028d2:	eef0 7ae7 	vabs.f32	s15, s15
 80028d6:	edc7 7a04 	vstr	s15, [r7, #16]
    float abs_x = fabsf(x);
 80028da:	edd7 7a00 	vldr	s15, [r7]
 80028de:	eef0 7ae7 	vabs.f32	s15, s15
 80028e2:	edc7 7a03 	vstr	s15, [r7, #12]
    // inject FLT_MIN in denominator to avoid division by zero
    float a = min(abs_x, abs_y) / (max(abs_x, abs_y));
 80028e6:	f107 0210 	add.w	r2, r7, #16
 80028ea:	f107 030c 	add.w	r3, r7, #12
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffc9 	bl	8002888 <_ZSt3minIfERKT_S2_S2_>
 80028f6:	4603      	mov	r3, r0
 80028f8:	ed93 8a00 	vldr	s16, [r3]
 80028fc:	f107 0210 	add.w	r2, r7, #16
 8002900:	f107 030c 	add.w	r3, r7, #12
 8002904:	4611      	mov	r1, r2
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f8c4 	bl	8002a94 <_ZSt3maxIfERKT_S2_S2_>
 800290c:	4603      	mov	r3, r0
 800290e:	ed93 7a00 	vldr	s14, [r3]
 8002912:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002916:	edc7 7a06 	vstr	s15, [r7, #24]
    // s := a * a
    float s = a * a;
 800291a:	edd7 7a06 	vldr	s15, [r7, #24]
 800291e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002922:	edc7 7a05 	vstr	s15, [r7, #20]
    // r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a
    float r =
        ((-0.0464964749f * s + 0.15931422f) * s - 0.327622764f) * s * a + a;
 8002926:	edd7 7a05 	vldr	s15, [r7, #20]
 800292a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80029d4 <_Z6_atan2ff+0x118>
 800292e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002932:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80029d8 <_Z6_atan2ff+0x11c>
 8002936:	ee37 7a87 	vadd.f32	s14, s15, s14
 800293a:	edd7 7a05 	vldr	s15, [r7, #20]
 800293e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002942:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80029dc <_Z6_atan2ff+0x120>
 8002946:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800294a:	edd7 7a05 	vldr	s15, [r7, #20]
 800294e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002952:	edd7 7a06 	vldr	s15, [r7, #24]
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
    float r =
 800295a:	ed97 7a06 	vldr	s14, [r7, #24]
 800295e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002962:	edc7 7a07 	vstr	s15, [r7, #28]
    // if |y| > |x| then r := 1.57079637 - r
    if (abs_y > abs_x) r = 1.57079637f - r;
 8002966:	ed97 7a04 	vldr	s14, [r7, #16]
 800296a:	edd7 7a03 	vldr	s15, [r7, #12]
 800296e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002976:	dd07      	ble.n	8002988 <_Z6_atan2ff+0xcc>
 8002978:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80029e0 <_Z6_atan2ff+0x124>
 800297c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002980:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002984:	edc7 7a07 	vstr	s15, [r7, #28]
    // if x < 0 then r := 3.14159274 - r
    if (x < 0.0f) r = 3.14159274f - r;
 8002988:	edd7 7a00 	vldr	s15, [r7]
 800298c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002994:	d507      	bpl.n	80029a6 <_Z6_atan2ff+0xea>
 8002996:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80029e4 <_Z6_atan2ff+0x128>
 800299a:	edd7 7a07 	vldr	s15, [r7, #28]
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	edc7 7a07 	vstr	s15, [r7, #28]
    // if y < 0 then r := -r
    if (y < 0.0f) r = -r;
 80029a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80029aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b2:	d505      	bpl.n	80029c0 <_Z6_atan2ff+0x104>
 80029b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80029b8:	eef1 7a67 	vneg.f32	s15, s15
 80029bc:	edc7 7a07 	vstr	s15, [r7, #28]

    return r;
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	ee07 3a90 	vmov	s15, r3
  }
 80029c6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	ecbd 8b02 	vpop	{d8}
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	bd3e7316 	.word	0xbd3e7316
 80029d8:	3e232344 	.word	0x3e232344
 80029dc:	3ea7be2c 	.word	0x3ea7be2c
 80029e0:	3fc90fdb 	.word	0x3fc90fdb
 80029e4:	40490fdb 	.word	0x40490fdb

080029e8 <_Z15_normalizeAnglef>:


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 80029f2:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002a2c <_Z15_normalizeAnglef+0x44>
 80029f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80029fa:	f7ff fe88 	bl	800270e <_ZSt4fmodff>
 80029fe:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8002a02:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0e:	db02      	blt.n	8002a16 <_Z15_normalizeAnglef+0x2e>
 8002a10:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a14:	e005      	b.n	8002a22 <_Z15_normalizeAnglef+0x3a>
 8002a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a1a:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002a2c <_Z15_normalizeAnglef+0x44>
 8002a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002a22:	eeb0 0a67 	vmov.f32	s0, s15
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40c90fdb 	.word	0x40c90fdb

08002a30 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a3a:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a46:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	085a      	lsrs	r2, r3, #1
 8002a6e:	4b08      	ldr	r3, [pc, #32]	@ (8002a90 <_Z11_sqrtApproxf+0x34>)
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8002a74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a78:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002a80:	eeb0 0a67 	vmov.f32	s0, s15
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	5f375a86 	.word	0x5f375a86

08002a94 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	ed93 7a00 	vldr	s14, [r3]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab2:	d501      	bpl.n	8002ab8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	e000      	b.n	8002aba <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002ab8:	687b      	ldr	r3, [r7, #4]
    }
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 8002ae0:	f000 f872 	bl	8002bc8 <_ZN13LowPassFilter6microsEv>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	605a      	str	r2, [r3, #4]
}
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8002b00:	f000 f862 	bl	8002bc8 <_ZN13LowPassFilter6microsEv>
 8002b04:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	ee07 3a90 	vmov	s15, r3
 8002b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b16:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002bbc <_ZN13LowPassFilterclEf+0xc8>
 8002b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1e:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8002b22:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b26:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2e:	d502      	bpl.n	8002b36 <_ZN13LowPassFilterclEf+0x42>
 8002b30:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <_ZN13LowPassFilterclEf+0xcc>)
 8002b32:	617b      	str	r3, [r7, #20]
 8002b34:	e010      	b.n	8002b58 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 8002b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b3a:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002bc4 <_ZN13LowPassFilterclEf+0xd0>
 8002b3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b46:	dd07      	ble.n	8002b58 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	693a      	ldr	r2, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]
        return x;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	e029      	b.n	8002bac <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	edd3 6a00 	vldr	s13, [r3]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	ed93 7a00 	vldr	s14, [r3]
 8002b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b70:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b7a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b86:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b8a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b8e:	edd7 7a00 	vldr	s15, [r7]
 8002b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9a:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68ba      	ldr	r2, [r7, #8]
 8002ba2:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]
    return y;
 8002baa:	68bb      	ldr	r3, [r7, #8]
}
 8002bac:	ee07 3a90 	vmov	s15, r3
 8002bb0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	358637bd 	.word	0x358637bd
 8002bc0:	3a83126f 	.word	0x3a83126f
 8002bc4:	3e99999a 	.word	0x3e99999a

08002bc8 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002bcc:	4b07      	ldr	r3, [pc, #28]	@ (8002bec <_ZN13LowPassFilter6microsEv+0x24>)
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	4b07      	ldr	r3, [pc, #28]	@ (8002bf0 <_ZN13LowPassFilter6microsEv+0x28>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4907      	ldr	r1, [pc, #28]	@ (8002bf4 <_ZN13LowPassFilter6microsEv+0x2c>)
 8002bd6:	fba1 1303 	umull	r1, r3, r1, r3
 8002bda:	0c9b      	lsrs	r3, r3, #18
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	e0001000 	.word	0xe0001000
 8002bf0:	200000bc 	.word	0x200000bc
 8002bf4:	431bde83 	.word	0x431bde83

08002bf8 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};

LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
LowPassFilter LPF_position	{0.01}; // 1 is very slow
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d158      	bne.n	8002cba <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d153      	bne.n	8002cba <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8002c12:	4b2c      	ldr	r3, [pc, #176]	@ (8002cc4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002c14:	edd3 7a00 	vldr	s15, [r3]
 8002c18:	eeb0 2a67 	vmov.f32	s4, s15
 8002c1c:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8002cc8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002c20:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002c24:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002c28:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c2c:	4828      	ldr	r0, [pc, #160]	@ (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002c2e:	f000 f871 	bl	8002d14 <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1.0, 1.0, 0.0, 1000.0, voltage_limit};
 8002c32:	4b24      	ldr	r3, [pc, #144]	@ (8002cc4 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	eeb0 2a67 	vmov.f32	s4, s15
 8002c3c:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8002cc8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002c40:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002c44:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002c48:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c4c:	4821      	ldr	r0, [pc, #132]	@ (8002cd4 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002c4e:	f000 f861 	bl	8002d14 <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {1.0, 0.1, 0.1, 1000.0, current_limit};
 8002c52:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	eeb0 2a67 	vmov.f32	s4, s15
 8002c5c:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8002cc8 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002c60:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8002cdc <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002c64:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002cdc <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002c68:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002c6c:	481c      	ldr	r0, [pc, #112]	@ (8002ce0 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002c6e:	f000 f851 	bl	8002d14 <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};
 8002c72:	4b1c      	ldr	r3, [pc, #112]	@ (8002ce4 <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002c74:	edd3 7a00 	vldr	s15, [r3]
 8002c78:	eeb0 2a67 	vmov.f32	s4, s15
 8002c7c:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002c80:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002ce8 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002c84:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002c88:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002c8c:	4817      	ldr	r0, [pc, #92]	@ (8002cec <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002c8e:	f000 f841 	bl	8002d14 <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 8002c92:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002cdc <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002c96:	4816      	ldr	r0, [pc, #88]	@ (8002cf0 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002c98:	f7ff ff15 	bl	8002ac6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 8002c9c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8002cdc <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002ca0:	4814      	ldr	r0, [pc, #80]	@ (8002cf4 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002ca2:	f7ff ff10 	bl	8002ac6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.01}; // 1 is very slow
 8002ca6:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002cf8 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8002caa:	4814      	ldr	r0, [pc, #80]	@ (8002cfc <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002cac:	f7ff ff0b 	bl	8002ac6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002cb0:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002ccc <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002cb4:	4812      	ldr	r0, [pc, #72]	@ (8002d00 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002cb6:	f7ff ff06 	bl	8002ac6 <_ZN13LowPassFilterC1Ef>
 8002cba:	bf00      	nop
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200000b0 	.word	0x200000b0
 8002cc8:	447a0000 	.word	0x447a0000
 8002ccc:	00000000 	.word	0x00000000
 8002cd0:	20000144 	.word	0x20000144
 8002cd4:	20000168 	.word	0x20000168
 8002cd8:	200000b4 	.word	0x200000b4
 8002cdc:	3dcccccd 	.word	0x3dcccccd
 8002ce0:	2000018c 	.word	0x2000018c
 8002ce4:	200000b8 	.word	0x200000b8
 8002ce8:	3e4ccccd 	.word	0x3e4ccccd
 8002cec:	200001b0 	.word	0x200001b0
 8002cf0:	200001d4 	.word	0x200001d4
 8002cf4:	200001e0 	.word	0x200001e0
 8002cf8:	3c23d70a 	.word	0x3c23d70a
 8002cfc:	200001ec 	.word	0x200001ec
 8002d00:	200001f8 	.word	0x200001f8

08002d04 <_GLOBAL__sub_I_CurrentSense_resistance>:
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002d0c:	2001      	movs	r0, #1
 8002d0e:	f7ff ff73 	bl	8002bf8 <_Z41__static_initialization_and_destruction_0ii>
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6178      	str	r0, [r7, #20]
 8002d1c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002d20:	edc7 0a03 	vstr	s1, [r7, #12]
 8002d24:	ed87 1a02 	vstr	s2, [r7, #8]
 8002d28:	edc7 1a01 	vstr	s3, [r7, #4]
 8002d2c:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	601a      	str	r2, [r3, #0]
    , I(I)
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	605a      	str	r2, [r3, #4]
    , D(D)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	68ba      	ldr	r2, [r7, #8]
 8002d40:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002d66:	f000 f91d 	bl	8002fa4 <_ZN13PIDController6microsEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	4618      	mov	r0, r3
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002d88:	f000 f90c 	bl	8002fa4 <_ZN13PIDController6microsEv>
 8002d8c:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	69fa      	ldr	r2, [r7, #28]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	ee07 3a90 	vmov	s15, r3
 8002d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d9e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002f9c <_ZN13PIDControllerclEf+0x220>
 8002da2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002daa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002db6:	d908      	bls.n	8002dca <_ZN13PIDControllerclEf+0x4e>
 8002db8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002dbc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dc8:	dd01      	ble.n	8002dce <_ZN13PIDControllerclEf+0x52>
 8002dca:	4b75      	ldr	r3, [pc, #468]	@ (8002fa0 <_ZN13PIDControllerclEf+0x224>)
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	edd3 7a00 	vldr	s15, [r3]
 8002dd4:	ed97 7a00 	vldr	s14, [r7]
 8002dd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ddc:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	ed93 7a07 	vldr	s14, [r3, #28]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	edd3 6a01 	vldr	s13, [r3, #4]
 8002dec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002df0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002df8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	ed93 6a05 	vldr	s12, [r3, #20]
 8002e02:	edd7 7a00 	vldr	s15, [r7]
 8002e06:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002e0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e1c:	eef1 7a67 	vneg.f32	s15, s15
 8002e20:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2c:	d505      	bpl.n	8002e3a <_ZN13PIDControllerclEf+0xbe>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e34:	eef1 7a67 	vneg.f32	s15, s15
 8002e38:	e00f      	b.n	8002e5a <_ZN13PIDControllerclEf+0xde>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e40:	ed97 7a05 	vldr	s14, [r7, #20]
 8002e44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e4c:	dd03      	ble.n	8002e56 <_ZN13PIDControllerclEf+0xda>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	edd3 7a04 	vldr	s15, [r3, #16]
 8002e54:	e001      	b.n	8002e5a <_ZN13PIDControllerclEf+0xde>
 8002e56:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e5a:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	edd3 7a05 	vldr	s15, [r3, #20]
 8002e6a:	edd7 6a00 	vldr	s13, [r7]
 8002e6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e76:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002e7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002e82:	ed97 7a06 	vldr	s14, [r7, #24]
 8002e86:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e8e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e96:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ea0:	eef1 7a67 	vneg.f32	s15, s15
 8002ea4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ea8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb0:	d505      	bpl.n	8002ebe <_ZN13PIDControllerclEf+0x142>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002eb8:	eef1 7a67 	vneg.f32	s15, s15
 8002ebc:	e00f      	b.n	8002ede <_ZN13PIDControllerclEf+0x162>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ec4:	ed97 7a08 	vldr	s14, [r7, #32]
 8002ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed0:	dd03      	ble.n	8002eda <_ZN13PIDControllerclEf+0x15e>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ed8:	e001      	b.n	8002ede <_ZN13PIDControllerclEf+0x162>
 8002eda:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ede:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ee8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef0:	dd3f      	ble.n	8002f72 <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	edd3 7a06 	vldr	s15, [r3, #24]
 8002ef8:	ed97 7a08 	vldr	s14, [r7, #32]
 8002efc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002f00:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f08:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f12:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f1e:	dd0e      	ble.n	8002f3e <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f2c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f38:	edc7 7a08 	vstr	s15, [r7, #32]
 8002f3c:	e019      	b.n	8002f72 <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f44:	eef1 7a67 	vneg.f32	s15, s15
 8002f48:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f54:	d50d      	bpl.n	8002f72 <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	ed93 7a06 	vldr	s14, [r3, #24]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002f62:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f66:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6e:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a3a      	ldr	r2, [r7, #32]
 8002f7c:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	69fa      	ldr	r2, [r7, #28]
 8002f88:	621a      	str	r2, [r3, #32]
    return output;
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	ee07 3a90 	vmov	s15, r3
}
 8002f90:	eeb0 0a67 	vmov.f32	s0, s15
 8002f94:	3728      	adds	r7, #40	@ 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	358637bd 	.word	0x358637bd
 8002fa0:	3a83126f 	.word	0x3a83126f

08002fa4 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002fa8:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <_ZN13PIDController6microsEv+0x24>)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4b07      	ldr	r3, [pc, #28]	@ (8002fcc <_ZN13PIDController6microsEv+0x28>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4907      	ldr	r1, [pc, #28]	@ (8002fd0 <_ZN13PIDController6microsEv+0x2c>)
 8002fb2:	fba1 1303 	umull	r1, r3, r1, r3
 8002fb6:	0c9b      	lsrs	r3, r3, #18
 8002fb8:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e0001000 	.word	0xe0001000
 8002fcc:	200000bc 	.word	0x200000bc
 8002fd0:	431bde83 	.word	0x431bde83

08002fd4 <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	ed87 0a01 	vstr	s0, [r7, #4]
 8002fde:	ed97 0a01 	vldr	s0, [r7, #4]
 8002fe2:	f008 fb0b 	bl	800b5fc <floorf>
 8002fe6:	eef0 7a40 	vmov.f32	s15, s0
 8002fea:	eeb0 0a67 	vmov.f32	s0, s15
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <_ZN11pwm_driversC1Ev+0x1c>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4618      	mov	r0, r3
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	0800c86c 	.word	0x0800c86c

08003014 <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	4a04      	ldr	r2, [pc, #16]	@ (8003030 <_ZN11pwm_driversD1Ev+0x1c>)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4618      	mov	r0, r3
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr
 8003030:	0800c86c 	.word	0x0800c86c

08003034 <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
}
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f7ff ffe9 	bl	8003014 <_ZN11pwm_driversD1Ev>
 8003042:	2110      	movs	r1, #16
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f008 f97b 	bl	800b340 <_ZdlPvj>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <_ZN11pwm_drivers10initDriverEv>:

void pwm_drivers::initDriver()
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b082      	sub	sp, #8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 800305c:	2100      	movs	r1, #0
 800305e:	4807      	ldr	r0, [pc, #28]	@ (800307c <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003060:	f006 fed4 	bl	8009e0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8003064:	2104      	movs	r1, #4
 8003066:	4805      	ldr	r0, [pc, #20]	@ (800307c <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003068:	f006 fed0 	bl	8009e0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 800306c:	2108      	movs	r1, #8
 800306e:	4803      	ldr	r0, [pc, #12]	@ (800307c <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003070:	f006 fecc 	bl	8009e0c <HAL_TIM_PWM_Start>
}
 8003074:	bf00      	nop
 8003076:	3708      	adds	r7, #8
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	20000724 	.word	0x20000724

08003080 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	ed87 0a02 	vstr	s0, [r7, #8]
 800308c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003090:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 8003094:	edd7 7a02 	vldr	s15, [r7, #8]
 8003098:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80030f0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 800309c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030a0:	4b14      	ldr	r3, [pc, #80]	@ (80030f4 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030a8:	ee17 2a90 	vmov	r2, s15
 80030ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 80030ae:	edd7 7a01 	vldr	s15, [r7, #4]
 80030b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80030f0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 80030b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030ba:	4b0e      	ldr	r3, [pc, #56]	@ (80030f4 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030c2:	ee17 2a90 	vmov	r2, s15
 80030c6:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 80030c8:	edd7 7a00 	vldr	s15, [r7]
 80030cc:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80030f0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 80030d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80030d4:	4b07      	ldr	r3, [pc, #28]	@ (80030f4 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030dc:	ee17 2a90 	vmov	r2, s15
 80030e0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80030e2:	bf00      	nop
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	45610000 	.word	0x45610000
 80030f4:	20000724 	.word	0x20000724

080030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b090      	sub	sp, #64	@ 0x40
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	ed87 0a02 	vstr	s0, [r7, #8]
 8003104:	edc7 0a01 	vstr	s1, [r7, #4]
 8003108:	ed87 1a00 	vstr	s2, [r7]


// ===========================================================================[Old]
	float Uout;
	// a bit of optitmisation
	if (Ud)
 800310c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003110:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003118:	d029      	beq.n	800316e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 800311a:	edd7 7a01 	vldr	s15, [r7, #4]
 800311e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003122:	edd7 7a02 	vldr	s15, [r7, #8]
 8003126:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	eeb0 0a67 	vmov.f32	s0, s15
 8003132:	f7ff fc93 	bl	8002a5c <_Z11_sqrtApproxf>
 8003136:	eef0 6a40 	vmov.f32	s13, s0
 800313a:	4be8      	ldr	r3, [pc, #928]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 800313c:	ed93 7a00 	vldr	s14, [r3]
 8003140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003144:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _atan2(Uq, Ud));
 8003148:	edd7 0a01 	vldr	s1, [r7, #4]
 800314c:	ed97 0a02 	vldr	s0, [r7, #8]
 8003150:	f7ff fbb4 	bl	80028bc <_Z6_atan2ff>
 8003154:	eeb0 7a40 	vmov.f32	s14, s0
 8003158:	edd7 7a00 	vldr	s15, [r7]
 800315c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003160:	eeb0 0a67 	vmov.f32	s0, s15
 8003164:	f7ff fc40 	bl	80029e8 <_Z15_normalizeAnglef>
 8003168:	ed87 0a00 	vstr	s0, [r7]
 800316c:	e014      	b.n	8003198 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 800316e:	4bdb      	ldr	r3, [pc, #876]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003170:	ed93 7a00 	vldr	s14, [r3]
 8003174:	edd7 6a02 	vldr	s13, [r7, #8]
 8003178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800317c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8003180:	edd7 7a00 	vldr	s15, [r7]
 8003184:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 80034e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8003188:	ee77 7a87 	vadd.f32	s15, s15, s14
 800318c:	eeb0 0a67 	vmov.f32	s0, s15
 8003190:	f7ff fc2a 	bl	80029e8 <_Z15_normalizeAnglef>
 8003194:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8003198:	edd7 7a00 	vldr	s15, [r7]
 800319c:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 80034e4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 80031a0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031a4:	eeb0 0a47 	vmov.f32	s0, s14
 80031a8:	f7ff ff14 	bl	8002fd4 <_ZSt5floorf>
 80031ac:	eef0 7a40 	vmov.f32	s15, s0
 80031b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80031bc:	ee17 3a90 	vmov	r3, s15
 80031c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 80031c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c4:	ee07 3a90 	vmov	s15, r3
 80031c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031cc:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80034e4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 80031d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d4:	edd7 7a00 	vldr	s15, [r7]
 80031d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031dc:	eeb0 0a67 	vmov.f32	s0, s15
 80031e0:	f7ff faaa 	bl	8002738 <_Z4_sinf>
 80031e4:	eef0 7a40 	vmov.f32	s15, s0
 80031e8:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80034e8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80031ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80031f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f8:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	ee07 3a90 	vmov	s15, r3
 8003202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800320a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800320e:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 80034e4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003216:	ed97 7a00 	vldr	s14, [r7]
 800321a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321e:	eeb0 0a67 	vmov.f32	s0, s15
 8003222:	f7ff fa89 	bl	8002738 <_Z4_sinf>
 8003226:	eef0 7a40 	vmov.f32	s15, s0
 800322a:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80034e8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 800322e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003232:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8003236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 800323e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003242:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800324a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800324e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003252:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	3b01      	subs	r3, #1
 800325a:	2b05      	cmp	r3, #5
 800325c:	f200 80ee 	bhi.w	800343c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 8003260:	a201      	add	r2, pc, #4	@ (adr r2, 8003268 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003281 	.word	0x08003281
 800326c:	080032cb 	.word	0x080032cb
 8003270:	08003315 	.word	0x08003315
 8003274:	0800335f 	.word	0x0800335f
 8003278:	080033a9 	.word	0x080033a9
 800327c:	080033f3 	.word	0x080033f3
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8003280:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003284:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003288:	ee37 7a27 	vadd.f32	s14, s14, s15
 800328c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003290:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003294:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 80032a0:	ed97 7a08 	vldr	s14, [r7, #32]
 80032a4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032ac:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 80032b8:	ed97 7a08 	vldr	s14, [r7, #32]
 80032bc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032c4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80032c8:	e0c1      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 80032ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80032ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80032d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032d6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 80032e2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80032e6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032ee:	edd7 6a08 	vldr	s13, [r7, #32]
 80032f2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80032f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8003302:	ed97 7a08 	vldr	s14, [r7, #32]
 8003306:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800330a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800330e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003312:	e09c      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 8003314:	ed97 7a08 	vldr	s14, [r7, #32]
 8003318:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800331c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003320:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8003324:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003328:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800332c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003330:	edd7 6a08 	vldr	s13, [r7, #32]
 8003334:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003338:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800333c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003340:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 8003344:	ed97 7a08 	vldr	s14, [r7, #32]
 8003348:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800334c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003350:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003358:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800335c:	e077      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 800335e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003362:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 800336e:	ed97 7a08 	vldr	s14, [r7, #32]
 8003372:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800337a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800337e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003382:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8003386:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800338a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800338e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003392:	edd7 6a08 	vldr	s13, [r7, #32]
 8003396:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800339a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800339e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80033a6:	e052      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 80033a8:	ed97 7a08 	vldr	s14, [r7, #32]
 80033ac:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b4:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80033b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033bc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 80033c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80033c4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033cc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 80033d0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033d4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033dc:	edd7 6a08 	vldr	s13, [r7, #32]
 80033e0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80033e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80033f0:	e02d      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 80033f2:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033f6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033fe:	edd7 6a08 	vldr	s13, [r7, #32]
 8003402:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003406:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800340a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340e:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8003412:	ed97 7a08 	vldr	s14, [r7, #32]
 8003416:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800341a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800341e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 8003422:	ed97 7a08 	vldr	s14, [r7, #32]
 8003426:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800342a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800342e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003432:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003436:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800343a:	e008      	b.n	800344e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 800344e:	4b23      	ldr	r3, [pc, #140]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003450:	ed93 7a00 	vldr	s14, [r3]
 8003454:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 8003462:	4b1e      	ldr	r3, [pc, #120]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800346c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 8003476:	4b19      	ldr	r3, [pc, #100]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003478:	ed93 7a00 	vldr	s14, [r3]
 800347c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003498:	d502      	bpl.n	80034a0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e00f      	b.n	80034c0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80034a6:	4b0d      	ldr	r3, [pc, #52]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b4:	dd02      	ble.n	80034bc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 80034b6:	4b09      	ldr	r3, [pc, #36]	@ (80034dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	e001      	b.n	80034c0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80034ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d2:	d50b      	bpl.n	80034ec <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e018      	b.n	800350c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80034da:	bf00      	nop
 80034dc:	200000b0 	.word	0x200000b0
 80034e0:	3fc90fdb 	.word	0x3fc90fdb
 80034e4:	3f860a92 	.word	0x3f860a92
 80034e8:	3fddb3d7 	.word	0x3fddb3d7
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80034f2:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80034f4:	edd3 7a00 	vldr	s15, [r3]
 80034f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003500:	dd02      	ble.n	8003508 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 8003502:	4b5a      	ldr	r3, [pc, #360]	@ (800366c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	e001      	b.n	800350c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	edd3 7a03 	vldr	s15, [r3, #12]
 8003516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351e:	d502      	bpl.n	8003526 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 8003520:	f04f 0300 	mov.w	r3, #0
 8003524:	e00f      	b.n	8003546 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	ed93 7a03 	vldr	s14, [r3, #12]
 800352c:	4b4f      	ldr	r3, [pc, #316]	@ (800366c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800353a:	dd02      	ble.n	8003542 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 800353c:	4b4b      	ldr	r3, [pc, #300]	@ (800366c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	e001      	b.n	8003546 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003550:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003552:	ed93 7a00 	vldr	s14, [r3]
 8003556:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800355a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800355e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003562:	d502      	bpl.n	800356a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 8003564:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8003674 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003568:	e019      	b.n	800359e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	edd3 6a01 	vldr	s13, [r3, #4]
 8003570:	4b3f      	ldr	r3, [pc, #252]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003572:	ed93 7a00 	vldr	s14, [r3]
 8003576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800357a:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800357e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003586:	dd02      	ble.n	800358e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 8003588:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800358c:	e007      	b.n	800359e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	edd3 6a01 	vldr	s13, [r3, #4]
 8003594:	4b36      	ldr	r3, [pc, #216]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003596:	ed93 7a00 	vldr	s14, [r3]
 800359a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800359e:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80035a8:	4b31      	ldr	r3, [pc, #196]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80035aa:	ed93 7a00 	vldr	s14, [r3]
 80035ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035ba:	d502      	bpl.n	80035c2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 80035bc:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8003674 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80035c0:	e019      	b.n	80035f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	edd3 6a02 	vldr	s13, [r3, #8]
 80035c8:	4b29      	ldr	r3, [pc, #164]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80035ca:	ed93 7a00 	vldr	s14, [r3]
 80035ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035d2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80035d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80035da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035de:	dd02      	ble.n	80035e6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 80035e0:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80035e4:	e007      	b.n	80035f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	edd3 6a02 	vldr	s13, [r3, #8]
 80035ec:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80035ee:	ed93 7a00 	vldr	s14, [r3]
 80035f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f6:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	edd3 6a03 	vldr	s13, [r3, #12]
 8003600:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003602:	ed93 7a00 	vldr	s14, [r3]
 8003606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800360a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800360e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003612:	d502      	bpl.n	800361a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 8003614:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8003674 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003618:	e019      	b.n	800364e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	edd3 6a03 	vldr	s13, [r3, #12]
 8003620:	4b13      	ldr	r3, [pc, #76]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003622:	ed93 7a00 	vldr	s14, [r3]
 8003626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362a:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800362e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003636:	dd02      	ble.n	800363e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 8003638:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003678 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800363c:	e007      	b.n	800364e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	edd3 6a03 	vldr	s13, [r3, #12]
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003646:	ed93 7a00 	vldr	s14, [r3]
 800364a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800364e:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 8003652:	ed97 1a05 	vldr	s2, [r7, #20]
 8003656:	edd7 0a06 	vldr	s1, [r7, #24]
 800365a:	ed97 0a07 	vldr	s0, [r7, #28]
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f7ff fd0e 	bl	8003080 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 8003664:	bf00      	nop
 8003666:	3740      	adds	r7, #64	@ 0x40
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	200000b0 	.word	0x200000b0
 8003670:	200000ac 	.word	0x200000ac
 8003674:	00000000 	.word	0x00000000
 8003678:	3f70a3d7 	.word	0x3f70a3d7

0800367c <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	ed87 0a01 	vstr	s0, [r7, #4]
 8003686:	edd7 7a01 	vldr	s15, [r7, #4]
 800368a:	eef0 7ae7 	vabs.f32	s15, s15
 800368e:	eeb0 0a67 	vmov.f32	s0, s15
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	4a0f      	ldr	r2, [pc, #60]	@ (80036e4 <_ZN9simpleFOCC1Ev+0x48>)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3308      	adds	r3, #8
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fd fa7e 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	33b8      	adds	r3, #184	@ 0xb8
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7fd fdbd 	bl	8001238 <_ZN12CurrentSenseC1Ev>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff fc95 	bl	8002ff4 <_ZN11pwm_driversC1Ev>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a06      	ldr	r2, [pc, #24]	@ (80036e8 <_ZN9simpleFOCC1Ev+0x4c>)
 80036ce:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a04      	ldr	r2, [pc, #16]	@ (80036e8 <_ZN9simpleFOCC1Ev+0x4c>)
 80036d6:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
{

}
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4618      	mov	r0, r3
 80036de:	3708      	adds	r7, #8
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0800c87c 	.word	0x0800c87c
 80036e8:	40400000 	.word	0x40400000

080036ec <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003724 <_ZN9simpleFOCD1Ev+0x38>)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fc87 	bl	8003014 <_ZN11pwm_driversD1Ev>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	33b8      	adds	r3, #184	@ 0xb8
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fe44 	bl	8001398 <_ZN12CurrentSenseD1Ev>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3308      	adds	r3, #8
 8003714:	4618      	mov	r0, r3
 8003716:	f7fd fabb 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	0800c87c 	.word	0x0800c87c

08003728 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
}
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff ffdb 	bl	80036ec <_ZN9simpleFOCD1Ev>
 8003736:	f44f 710e 	mov.w	r1, #568	@ 0x238
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f007 fe00 	bl	800b340 <_ZdlPvj>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
	driver.initDriver();
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800375a:	4618      	mov	r0, r3
 800375c:	f7ff fc7a 	bl	8003054 <_ZN11pwm_drivers10initDriverEv>
	Encoder.MagneticSensorSPI_init();
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	3308      	adds	r3, #8
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd fab7 	bl	8000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	3308      	adds	r3, #8
 800376e:	4618      	mov	r0, r3
 8003770:	f7fd faee 	bl	8000d50 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	33b8      	adds	r3, #184	@ 0xb8
 8003778:	4a0a      	ldr	r2, [pc, #40]	@ (80037a4 <_ZN9simpleFOC11initSensorsEv+0x58>)
 800377a:	edd2 7a00 	vldr	s15, [r2]
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <_ZN9simpleFOC11initSensorsEv+0x5c>)
 8003780:	ed92 7a00 	vldr	s14, [r2]
 8003784:	eef0 0a47 	vmov.f32	s1, s14
 8003788:	eeb0 0a67 	vmov.f32	s0, s15
 800378c:	4618      	mov	r0, r3
 800378e:	f7fd fe29 	bl	80013e4 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	33b8      	adds	r3, #184	@ 0xb8
 8003796:	4618      	mov	r0, r3
 8003798:	f7fd fe4e 	bl	8001438 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 800379c:	bf00      	nop
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	20000098 	.word	0x20000098
 80037a8:	2000009c 	.word	0x2000009c

080037ac <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	return 0;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 80037cc:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 80037d2:	4b29      	ldr	r3, [pc, #164]	@ (8003878 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 80037de:	4a25      	ldr	r2, [pc, #148]	@ (8003874 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80037e0:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 80037e8:	4a23      	ldr	r2, [pc, #140]	@ (8003878 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80037ea:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f04f 0200 	mov.w	r2, #0
 80037f2:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 80037f4:	e009      	b.n	800380a <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 80037f6:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800387c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 fadc 	bl	8003db8 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3308      	adds	r3, #8
 8003804:	4618      	mov	r0, r3
 8003806:	f7fd fb91 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff ffce 	bl	80037ac <_ZN9simpleFOC11needsSearchEv>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00b      	beq.n	800382e <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	edd3 7a01 	vldr	s15, [r3, #4]
 800381c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003880 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 8003820:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003828:	d501      	bpl.n	800382e <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 800382e:	2300      	movs	r3, #0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e0      	bne.n	80037f6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800383a:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 8003884 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800383e:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8003884 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 8003842:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 8003884 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff fc56 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 800384c:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 8003852:	4a09      	ldr	r2, [pc, #36]	@ (8003878 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ffa7 	bl	80037ac <_ZN9simpleFOC11needsSearchEv>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	bf0c      	ite	eq
 8003864:	2301      	moveq	r3, #1
 8003866:	2300      	movne	r3, #0
 8003868:	b2db      	uxtb	r3, r3
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200000b8 	.word	0x200000b8
 8003878:	200000b0 	.word	0x200000b0
 800387c:	4116cbe4 	.word	0x4116cbe4
 8003880:	40c90fdb 	.word	0x40c90fdb
 8003884:	00000000 	.word	0x00000000

08003888 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8003888:	b580      	push	{r7, lr}
 800388a:	ed2d 8b02 	vpush	{d8}
 800388e:	b08a      	sub	sp, #40	@ 0x28
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 8003894:	2301      	movs	r3, #1
 8003896:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800389c:	ee07 3a90 	vmov	s15, r3
 80038a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a4:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8003b80 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 80038a8:	eef4 7a47 	vcmp.f32	s15, s14
 80038ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038b0:	f040 810a 	bne.w	8003ac8 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ff79 	bl	80037ac <_ZN9simpleFOC11needsSearchEv>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf14      	ite	ne
 80038c0:	2301      	movne	r3, #1
 80038c2:	2300      	moveq	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f7ff ff7a 	bl	80037c4 <_ZN9simpleFOC18absoluteZeroSearchEv>
 80038d0:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 80038d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 80038d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038da:	e146      	b.n	8003b6a <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 80038dc:	2300      	movs	r3, #0
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e037      	b.n	8003952 <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	ee07 3a90 	vmov	s15, r3
 80038e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038ec:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003b84 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80038f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038f4:	ee17 0a90 	vmov	r0, s15
 80038f8:	f7fc fdf2 	bl	80004e0 <__aeabi_f2d>
 80038fc:	f04f 0200 	mov.w	r2, #0
 8003900:	4ba1      	ldr	r3, [pc, #644]	@ (8003b88 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8003902:	f7fc ff6f 	bl	80007e4 <__aeabi_ddiv>
 8003906:	4602      	mov	r2, r0
 8003908:	460b      	mov	r3, r1
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	a39a      	add	r3, pc, #616	@ (adr r3, 8003b78 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	f7fc fc86 	bl	8000224 <__adddf3>
 8003918:	4602      	mov	r2, r0
 800391a:	460b      	mov	r3, r1
 800391c:	4610      	mov	r0, r2
 800391e:	4619      	mov	r1, r3
 8003920:	f7fd f8e6 	bl	8000af0 <__aeabi_d2f>
 8003924:	4603      	mov	r3, r0
 8003926:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8003934:	ed97 1a02 	vldr	s2, [r7, #8]
 8003938:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 800393c:	eeb0 0a67 	vmov.f32	s0, s15
 8003940:	4610      	mov	r0, r2
 8003942:	f7ff fbd9 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8003946:	2002      	movs	r0, #2
 8003948:	f001 fcaa 	bl	80052a0 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	3301      	adds	r3, #1
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003958:	ddc3      	ble.n	80038e2 <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3308      	adds	r3, #8
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd fb54 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	3308      	adds	r3, #8
 8003968:	4618      	mov	r0, r3
 800396a:	f7fd fadf 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 800396e:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8003972:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	e037      	b.n	80039ea <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003984:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003b84 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800398c:	ee17 0a90 	vmov	r0, s15
 8003990:	f7fc fda6 	bl	80004e0 <__aeabi_f2d>
 8003994:	f04f 0200 	mov.w	r2, #0
 8003998:	4b7b      	ldr	r3, [pc, #492]	@ (8003b88 <_ZN9simpleFOC11alignSensorEv+0x300>)
 800399a:	f7fc ff23 	bl	80007e4 <__aeabi_ddiv>
 800399e:	4602      	mov	r2, r0
 80039a0:	460b      	mov	r3, r1
 80039a2:	4610      	mov	r0, r2
 80039a4:	4619      	mov	r1, r3
 80039a6:	a374      	add	r3, pc, #464	@ (adr r3, 8003b78 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fc3a 	bl	8000224 <__adddf3>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4610      	mov	r0, r2
 80039b6:	4619      	mov	r1, r3
 80039b8:	f7fd f89a 	bl	8000af0 <__aeabi_d2f>
 80039bc:	4603      	mov	r3, r0
 80039be:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 80039cc:	ed97 1a03 	vldr	s2, [r7, #12]
 80039d0:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 80039d4:	eeb0 0a67 	vmov.f32	s0, s15
 80039d8:	4610      	mov	r0, r2
 80039da:	f7ff fb8d 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80039de:	2002      	movs	r0, #2
 80039e0:	f001 fc5e 	bl	80052a0 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dac4      	bge.n	800397a <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	3308      	adds	r3, #8
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7fd fb09 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3308      	adds	r3, #8
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7fd fa94 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003a04:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003a0e:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a12:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a16:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff fb6c 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003a20:	20c8      	movs	r0, #200	@ 0xc8
 8003a22:	f001 fc3d 	bl	80052a0 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8003a26:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d101      	bne.n	8003a3c <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 8003a38:	2300      	movs	r3, #0
 8003a3a:	e096      	b.n	8003b6a <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 8003a3c:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a40:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a44:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	d504      	bpl.n	8003a58 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f04f 32ff 	mov.w	r2, #4294967295
 8003a54:	651a      	str	r2, [r3, #80]	@ 0x50
 8003a56:	e002      	b.n	8003a5e <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8003a5e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003a62:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a6a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a6e:	f7ff fe05 	bl	800367c <_ZSt4fabsf>
 8003a72:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8003a76:	4b46      	ldr	r3, [pc, #280]	@ (8003b90 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003a82:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a8a:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003b84 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003a8e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003a92:	eeb0 0a67 	vmov.f32	s0, s15
 8003a96:	f7ff fdf1 	bl	800367c <_ZSt4fabsf>
 8003a9a:	eef0 7a40 	vmov.f32	s15, s0
 8003a9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	bfcc      	ite	gt
 8003aac:	2301      	movgt	r3, #1
 8003aae:	2300      	movle	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8003ab6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003b84 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003aba:	ed97 7a04 	vldr	s14, [r7, #16]
 8003abe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	edc3 7a8b 	vstr	s15, [r3, #556]	@ 0x22c
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003ace:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003b80 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003ad2:	eef4 7a47 	vcmp.f32	s15, s14
 8003ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ada:	d145      	bne.n	8003b68 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8003ae8:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8003b94 <_ZN9simpleFOC11alignSensorEv+0x30c>
 8003aec:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003af0:	eeb0 0a67 	vmov.f32	s0, s15
 8003af4:	4610      	mov	r0, r2
 8003af6:	f7ff faff 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 8003afa:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003afe:	f001 fbcf 	bl	80052a0 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	3308      	adds	r3, #8
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fd fa0a 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003b18:	eef0 7a40 	vmov.f32	s15, s0
 8003b1c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003b20:	4b1b      	ldr	r3, [pc, #108]	@ (8003b90 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4618      	mov	r0, r3
 8003b26:	eeb0 0a67 	vmov.f32	s0, s15
 8003b2a:	f7fe ff81 	bl	8002a30 <_Z16_electricalAnglefi>
 8003b2e:	eef0 7a40 	vmov.f32	s15, s0
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	f7fe ff57 	bl	80029e8 <_Z15_normalizeAnglef>
 8003b3a:	eef0 7a40 	vmov.f32	s15, s0
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		HAL_Delay(20);
 8003b44:	2014      	movs	r0, #20
 8003b46:	f001 fbab 	bl	80052a0 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003b50:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003b54:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003b58:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003b8c <_ZN9simpleFOC11alignSensorEv+0x304>
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f7ff facb 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003b62:	20c8      	movs	r0, #200	@ 0xc8
 8003b64:	f001 fb9c 	bl	80052a0 <HAL_Delay>
	}
	return exit_flag;
 8003b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3728      	adds	r7, #40	@ 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	ecbd 8b02 	vpop	{d8}
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	80000000 	.word	0x80000000
 8003b7c:	4012d97c 	.word	0x4012d97c
 8003b80:	c640e400 	.word	0xc640e400
 8003b84:	40c90fdb 	.word	0x40c90fdb
 8003b88:	407f4000 	.word	0x407f4000
 8003b8c:	00000000 	.word	0x00000000
 8003b90:	200000a8 	.word	0x200000a8
 8003b94:	4096cbe4 	.word	0x4096cbe4

08003b98 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8003bac:	edd7 7a02 	vldr	s15, [r7, #8]
 8003bb0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003c04 <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8003bb4:	eef4 7a47 	vcmp.f32	s15, s14
 8003bb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bbc:	d006      	beq.n	8003bcc <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	64da      	str	r2, [r3, #76]	@ 0x4c
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8003bc4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff fe5b 	bl	8003888 <_ZN9simpleFOC11alignSensorEv>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	fb02 f303 	mul.w	r3, r2, r3
 8003bda:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3308      	adds	r3, #8
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fd f9a3 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003be6:	eef0 7a40 	vmov.f32	s15, s0
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8003bf0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003bf4:	f001 fb54 	bl	80052a0 <HAL_Delay>

	return exit_flag;
 8003bf8:	697b      	ldr	r3, [r7, #20]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	c640e400 	.word	0xc640e400

08003c08 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8003c08:	b590      	push	{r4, r7, lr}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3308      	adds	r3, #8
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fd f9f9 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3308      	adds	r3, #8
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fac2 	bl	80011a8 <_ZN17AS5048A_interface13getShaftAngleEv>
 8003c24:	eef0 7a40 	vmov.f32	s15, s0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	3308      	adds	r3, #8
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fd f9a6 	bl	8000f84 <_ZN17AS5048A_interface15electricalAngleEv>
 8003c38:	eef0 7a40 	vmov.f32	s15, s0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8003c4e:	687c      	ldr	r4, [r7, #4]
 8003c50:	eeb0 0a67 	vmov.f32	s0, s15
 8003c54:	4610      	mov	r0, r2
 8003c56:	f7fd fcef 	bl	8001638 <_ZN12CurrentSense14getFOCCurrentsEf>
 8003c5a:	eeb0 7a40 	vmov.f32	s14, s0
 8003c5e:	eef0 7a60 	vmov.f32	s15, s1
 8003c62:	ed84 7a86 	vstr	s14, [r4, #536]	@ 0x218
 8003c66:	edc4 7a87 	vstr	s15, [r4, #540]	@ 0x21c

	current_LPF.q = LPF_current_q(current.q);   // filter values
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003c70:	eeb0 0a67 	vmov.f32	s0, s15
 8003c74:	4828      	ldr	r0, [pc, #160]	@ (8003d18 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8003c76:	f7fe ff3d 	bl	8002af4 <_ZN13LowPassFilterclEf>
 8003c7a:	eef0 7a40 	vmov.f32	s15, s0
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
	current_LPF.d = LPF_current_d(current.d);   // filter values
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003c8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c8e:	4823      	ldr	r0, [pc, #140]	@ (8003d1c <_ZN9simpleFOC7loopFOCEv+0x114>)
 8003c90:	f7fe ff30 	bl	8002af4 <_ZN13LowPassFilterclEf>
 8003c94:	eef0 7a40 	vmov.f32	s15, s0
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	edc3 7a88 	vstr	s15, [r3, #544]	@ 0x220

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current_LPF.q);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8003caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cae:	eeb0 0a67 	vmov.f32	s0, s15
 8003cb2:	481b      	ldr	r0, [pc, #108]	@ (8003d20 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8003cb4:	f7ff f862 	bl	8002d7c <_ZN13PIDControllerclEf>
 8003cb8:	eef0 7a40 	vmov.f32	s15, s0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = PID_current_d(0 - current.d);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003cc8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003d24 <_ZN9simpleFOC7loopFOCEv+0x11c>
 8003ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	4814      	ldr	r0, [pc, #80]	@ (8003d28 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8003cd6:	f7ff f851 	bl	8002d7c <_ZN13PIDControllerclEf>
 8003cda:	eef0 7a40 	vmov.f32	s15, s0
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8003cfc:	eeb0 1a66 	vmov.f32	s2, s13
 8003d00:	eef0 0a47 	vmov.f32	s1, s14
 8003d04:	eeb0 0a67 	vmov.f32	s0, s15
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7ff f9f5 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	200001d4 	.word	0x200001d4
 8003d1c:	200001e0 	.word	0x200001e0
 8003d20:	20000168 	.word	0x20000168
 8003d24:	00000000 	.word	0x00000000
 8003d28:	20000144 	.word	0x20000144

08003d2c <_ZN9simpleFOC10move_angleEf>:
	voltage.q = current_sp*phase_resistance;
	voltage.d = 0;
}

void simpleFOC::move_angle(float new_target)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	ed87 0a00 	vstr	s0, [r7]

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
 8003d38:	edd7 7a00 	vldr	s15, [r7]
 8003d3c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003dac <_ZN9simpleFOC10move_angleEf+0x80>
 8003d40:	eef4 7a47 	vcmp.f32	s15, s14
 8003d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d48:	d003      	beq.n	8003d52 <_ZN9simpleFOC10move_angleEf+0x26>
		  target = new_target;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

	// angle set point
	shaft_angle_sp = target;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	// calculate velocity set point
	current_sp = PID_position(shaft_angle_sp - shaft_angle);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d72:	480f      	ldr	r0, [pc, #60]	@ (8003db0 <_ZN9simpleFOC10move_angleEf+0x84>)
 8003d74:	f7ff f802 	bl	8002d7c <_ZN13PIDControllerclEf>
 8003d78:	eef0 7a40 	vmov.f32	s15, s0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204

//	// calculate the torque command
//	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);

	voltage.q = current_sp*phase_resistance;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003d88:	4b0a      	ldr	r3, [pc, #40]	@ (8003db4 <_ZN9simpleFOC10move_angleEf+0x88>)
 8003d8a:	edd3 7a00 	vldr	s15, [r3]
 8003d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = 0;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	c640e400 	.word	0xc640e400
 8003db0:	200001b0 	.word	0x200001b0
 8003db4:	200000a0 	.word	0x200000a0

08003db8 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	ed2d 8b02 	vpush	{d8}
 8003dbe:	b087      	sub	sp, #28
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8003dc8:	f000 f8e6 	bl	8003f98 <_ZN9simpleFOC6microsEv>
 8003dcc:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1a9b      	subs	r3, r3, r2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7fc fb5e 	bl	800049c <__aeabi_ui2d>
 8003de0:	a36b      	add	r3, pc, #428	@ (adr r3, 8003f90 <_ZN9simpleFOC13angleOpenloopEf+0x1d8>)
 8003de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de6:	f7fc fbd3 	bl	8000590 <__aeabi_dmul>
 8003dea:	4602      	mov	r2, r0
 8003dec:	460b      	mov	r3, r1
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	f7fc fe7d 	bl	8000af0 <__aeabi_d2f>
 8003df6:	4603      	mov	r3, r0
 8003df8:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003dfa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003dfe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e06:	d908      	bls.n	8003e1a <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8003e08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e0c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003e10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e18:	dd01      	ble.n	8003e1e <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8003e1a:	4b55      	ldr	r3, [pc, #340]	@ (8003f70 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>)
 8003e1c:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e24:	ed97 7a00 	vldr	s14, [r7]
 8003e28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e30:	f7fc feae 	bl	8000b90 <_ZSt3absf>
 8003e34:	eeb0 8a40 	vmov.f32	s16, s0
 8003e38:	4b4e      	ldr	r3, [pc, #312]	@ (8003f74 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003e3a:	ed93 7a00 	vldr	s14, [r3]
 8003e3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e46:	eeb0 0a67 	vmov.f32	s0, s15
 8003e4a:	f7fc fea1 	bl	8000b90 <_ZSt3absf>
 8003e4e:	eef0 7a40 	vmov.f32	s15, s0
 8003e52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e5a:	bfcc      	ite	gt
 8003e5c:	2301      	movgt	r3, #1
 8003e5e:	2300      	movle	r3, #0
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d03c      	beq.n	8003ee0 <_ZN9simpleFOC13angleOpenloopEf+0x128>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e6c:	ed97 7a00 	vldr	s14, [r7]
 8003e70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e7c:	d502      	bpl.n	8003e84 <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8003e7e:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003e82:	e010      	b.n	8003ea6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e8a:	ed97 7a00 	vldr	s14, [r7]
 8003e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e9a:	dd02      	ble.n	8003ea2 <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8003e9c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003ea0:	e001      	b.n	8003ea6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003ea2:	ed9f 8a35 	vldr	s16, [pc, #212]	@ 8003f78 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003ea6:	4b33      	ldr	r3, [pc, #204]	@ (8003f74 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003ea8:	edd3 7a00 	vldr	s15, [r3]
 8003eac:	eeb0 0a67 	vmov.f32	s0, s15
 8003eb0:	f7fc fe6e 	bl	8000b90 <_ZSt3absf>
 8003eb4:	eef0 7a40 	vmov.f32	s15, s0
 8003eb8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003ebc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ec0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8003ed4:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003ede:	e007      	b.n	8003ef0 <_ZN9simpleFOC13angleOpenloopEf+0x138>
	}
	else
	{
		shaft_angle = target_angle;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003ef0:	4b22      	ldr	r3, [pc, #136]	@ (8003f7c <_ZN9simpleFOC13angleOpenloopEf+0x1c4>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8003ef6:	4b22      	ldr	r3, [pc, #136]	@ (8003f80 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003ef8:	edd3 7a00 	vldr	s15, [r3]
 8003efc:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8003f84 <_ZN9simpleFOC13angleOpenloopEf+0x1cc>
 8003f00:	eef4 7a47 	vcmp.f32	s15, s14
 8003f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f08:	d009      	beq.n	8003f1e <_ZN9simpleFOC13angleOpenloopEf+0x166>
		Uq =  current_limit*phase_resistance;
 8003f0a:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8003f0c:	ed93 7a00 	vldr	s14, [r3]
 8003f10:	4b1b      	ldr	r3, [pc, #108]	@ (8003f80 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003f12:	edd3 7a00 	vldr	s15, [r3]
 8003f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1a:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f2a:	4b18      	ldr	r3, [pc, #96]	@ (8003f8c <_ZN9simpleFOC13angleOpenloopEf+0x1d4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	eeb0 0a67 	vmov.f32	s0, s15
 8003f34:	f7fe fd7c 	bl	8002a30 <_Z16_electricalAnglefi>
 8003f38:	eef0 7a40 	vmov.f32	s15, s0
 8003f3c:	eeb0 1a67 	vmov.f32	s2, s15
 8003f40:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003f78 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003f44:	ed97 0a04 	vldr	s0, [r7, #16]
 8003f48:	4620      	mov	r0, r4
 8003f4a:	f7ff f8d5 	bl	80030f8 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	return Uq;
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	ee07 3a90 	vmov	s15, r3
}
 8003f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f60:	371c      	adds	r7, #28
 8003f62:	46bd      	mov	sp, r7
 8003f64:	ecbd 8b02 	vpop	{d8}
 8003f68:	bd90      	pop	{r4, r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	f3af 8000 	nop.w
 8003f70:	3a83126f 	.word	0x3a83126f
 8003f74:	200000b8 	.word	0x200000b8
 8003f78:	00000000 	.word	0x00000000
 8003f7c:	200000b0 	.word	0x200000b0
 8003f80:	200000a0 	.word	0x200000a0
 8003f84:	c640e400 	.word	0xc640e400
 8003f88:	200000b4 	.word	0x200000b4
 8003f8c:	200000a8 	.word	0x200000a8
 8003f90:	a0b5ed8d 	.word	0xa0b5ed8d
 8003f94:	3eb0c6f7 	.word	0x3eb0c6f7

08003f98 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8003f98:	b480      	push	{r7}
 8003f9a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003f9c:	4b07      	ldr	r3, [pc, #28]	@ (8003fbc <_ZN9simpleFOC6microsEv+0x24>)
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	4b07      	ldr	r3, [pc, #28]	@ (8003fc0 <_ZN9simpleFOC6microsEv+0x28>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4907      	ldr	r1, [pc, #28]	@ (8003fc4 <_ZN9simpleFOC6microsEv+0x2c>)
 8003fa6:	fba1 1303 	umull	r1, r3, r1, r3
 8003faa:	0c9b      	lsrs	r3, r3, #18
 8003fac:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	e0001000 	.word	0xe0001000
 8003fc0:	200000bc 	.word	0x200000bc
 8003fc4:	431bde83 	.word	0x431bde83

08003fc8 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	@ (8003fe8 <MX_CORDIC_Init+0x20>)
 8003fce:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <MX_CORDIC_Init+0x24>)
 8003fd0:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003fd2:	4805      	ldr	r0, [pc, #20]	@ (8003fe8 <MX_CORDIC_Init+0x20>)
 8003fd4:	f002 ff36 	bl	8006e44 <HAL_CORDIC_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8003fde:	f000 fcff 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	200005d8 	.word	0x200005d8
 8003fec:	40020c00 	.word	0x40020c00

08003ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ff4:	f001 f8e3 	bl	80051be <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003ff8:	f000 f874 	bl	80040e4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003ffc:	f000 fc4e 	bl	800489c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004000:	f000 fbe4 	bl	80047cc <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8004004:	f000 fa46 	bl	8004494 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8004008:	f000 f8c2 	bl	8004190 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 800400c:	f000 f9de 	bl	80043cc <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8004010:	f000 fa82 	bl	8004518 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8004014:	f000 f942 	bl	800429c <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8004018:	f7ff ffd6 	bl	8003fc8 <MX_CORDIC_Init>
  MX_CRC_Init();
 800401c:	f000 f9ae 	bl	800437c <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8004020:	f000 fa20 	bl	8004464 <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 8004024:	f000 fb76 	bl	8004714 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  	  //  Delay SETUP
	DWT_Init();
 8004028:	f000 fc98 	bl	800495c <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
  	HAL_TIM_Base_Start_IT(&htim2);
 800402c:	4824      	ldr	r0, [pc, #144]	@ (80040c0 <main+0xd0>)
 800402e:	f005 fdbb 	bl	8009ba8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8004032:	2201      	movs	r2, #1
 8004034:	2101      	movs	r1, #1
 8004036:	4823      	ldr	r0, [pc, #140]	@ (80040c4 <main+0xd4>)
 8004038:	f004 f92e 	bl	8008298 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//SPI SETUP
	simpleFOC.initSensors();
 800403c:	4822      	ldr	r0, [pc, #136]	@ (80040c8 <main+0xd8>)
 800403e:	f7ff fb85 	bl	800374c <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
  	simpleFOC.initFOC(5.26846504, CW);
 8004042:	2101      	movs	r1, #1
 8004044:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 80040cc <main+0xdc>
 8004048:	481f      	ldr	r0, [pc, #124]	@ (80040c8 <main+0xd8>)
 800404a:	f7ff fda5 	bl	8003b98 <_ZN9simpleFOC7initFOCEf9Direction>


	  /** Test Closed Loop Control **/
//	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
//	  simpleFOC.move_velocity(setpoint_cmd);		// 21 us  maximum 100 rad/s --> 950 rpm
	  simpleFOC.move_angle(setpoint_cmd);			// 26 us  a lot of noise in q,d current
 800404e:	4b20      	ldr	r3, [pc, #128]	@ (80040d0 <main+0xe0>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	eeb0 0a67 	vmov.f32	s0, s15
 8004058:	481b      	ldr	r0, [pc, #108]	@ (80040c8 <main+0xd8>)
 800405a:	f7ff fe67 	bl	8003d2c <_ZN9simpleFOC10move_angleEf>

	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();							// 115 us
 800405e:	481a      	ldr	r0, [pc, #104]	@ (80040c8 <main+0xd8>)
 8004060:	f7ff fdd2 	bl	8003c08 <_ZN9simpleFOC7loopFOCEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8004064:	f000 fc92 	bl	800498c <_ZL6microsv>
 8004068:	4602      	mov	r2, r0
 800406a:	4b1a      	ldr	r3, [pc, #104]	@ (80040d4 <main+0xe4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <main+0xe8>)
 8004072:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8004074:	f000 fc8a 	bl	800498c <_ZL6microsv>
 8004078:	4603      	mov	r3, r0
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <main+0xe4>)
 800407c:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 800407e:	4b16      	ldr	r3, [pc, #88]	@ (80040d8 <main+0xe8>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fc fa0a 	bl	800049c <__aeabi_ui2d>
 8004088:	a30b      	add	r3, pc, #44	@ (adr r3, 80040b8 <main+0xc8>)
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f7fc fa7f 	bl	8000590 <__aeabi_dmul>
 8004092:	4602      	mov	r2, r0
 8004094:	460b      	mov	r3, r1
 8004096:	f04f 0000 	mov.w	r0, #0
 800409a:	4910      	ldr	r1, [pc, #64]	@ (80040dc <main+0xec>)
 800409c:	f7fc fba2 	bl	80007e4 <__aeabi_ddiv>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	f7fc fd22 	bl	8000af0 <__aeabi_d2f>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4a0c      	ldr	r2, [pc, #48]	@ (80040e0 <main+0xf0>)
 80040b0:	6013      	str	r3, [r2, #0]
	  simpleFOC.move_angle(setpoint_cmd);			// 26 us  a lot of noise in q,d current
 80040b2:	bf00      	nop
 80040b4:	e7cb      	b.n	800404e <main+0x5e>
 80040b6:	bf00      	nop
 80040b8:	a0b5ed8d 	.word	0xa0b5ed8d
 80040bc:	3eb0c6f7 	.word	0x3eb0c6f7
 80040c0:	20000770 	.word	0x20000770
 80040c4:	48000400 	.word	0x48000400
 80040c8:	20000208 	.word	0x20000208
 80040cc:	40a89744 	.word	0x40a89744
 80040d0:	200007c8 	.word	0x200007c8
 80040d4:	200007bc 	.word	0x200007bc
 80040d8:	200007c0 	.word	0x200007c0
 80040dc:	3ff00000 	.word	0x3ff00000
 80040e0:	200007c4 	.word	0x200007c4

080040e4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b094      	sub	sp, #80	@ 0x50
 80040e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040ea:	f107 0318 	add.w	r3, r7, #24
 80040ee:	2238      	movs	r2, #56	@ 0x38
 80040f0:	2100      	movs	r1, #0
 80040f2:	4618      	mov	r0, r3
 80040f4:	f008 fa74 	bl	800c5e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80040f8:	1d3b      	adds	r3, r7, #4
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	605a      	str	r2, [r3, #4]
 8004100:	609a      	str	r2, [r3, #8]
 8004102:	60da      	str	r2, [r3, #12]
 8004104:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004106:	2000      	movs	r0, #0
 8004108:	f004 f8de 	bl	80082c8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800410c:	2302      	movs	r3, #2
 800410e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004110:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004114:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004116:	2340      	movs	r3, #64	@ 0x40
 8004118:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800411a:	2302      	movs	r3, #2
 800411c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800411e:	2302      	movs	r3, #2
 8004120:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8004122:	2304      	movs	r3, #4
 8004124:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8004126:	2355      	movs	r3, #85	@ 0x55
 8004128:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800412a:	2302      	movs	r3, #2
 800412c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800412e:	2302      	movs	r3, #2
 8004130:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004132:	2302      	movs	r3, #2
 8004134:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004136:	f107 0318 	add.w	r3, r7, #24
 800413a:	4618      	mov	r0, r3
 800413c:	f004 f978 	bl	8008430 <HAL_RCC_OscConfig>
 8004140:	4603      	mov	r3, r0
 8004142:	2b00      	cmp	r3, #0
 8004144:	bf14      	ite	ne
 8004146:	2301      	movne	r3, #1
 8004148:	2300      	moveq	r3, #0
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8004150:	f000 fc46 	bl	80049e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004154:	230f      	movs	r3, #15
 8004156:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004158:	2303      	movs	r3, #3
 800415a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004160:	2300      	movs	r3, #0
 8004162:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004164:	2300      	movs	r3, #0
 8004166:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004168:	1d3b      	adds	r3, r7, #4
 800416a:	2104      	movs	r1, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f004 fc71 	bl	8008a54 <HAL_RCC_ClockConfig>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8004182:	f000 fc2d 	bl	80049e0 <Error_Handler>
  }
}
 8004186:	bf00      	nop
 8004188:	3750      	adds	r7, #80	@ 0x50
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	@ 0x30
 8004194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004196:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800419a:	2200      	movs	r2, #0
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80041a2:	1d3b      	adds	r3, r7, #4
 80041a4:	2220      	movs	r2, #32
 80041a6:	2100      	movs	r1, #0
 80041a8:	4618      	mov	r0, r3
 80041aa:	f008 fa19 	bl	800c5e0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80041ae:	4b39      	ldr	r3, [pc, #228]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041b0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80041b4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80041b6:	4b37      	ldr	r3, [pc, #220]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041b8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041bc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80041be:	4b35      	ldr	r3, [pc, #212]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80041c4:	4b33      	ldr	r3, [pc, #204]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80041ca:	4b32      	ldr	r3, [pc, #200]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80041d0:	4b30      	ldr	r3, [pc, #192]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80041d6:	4b2f      	ldr	r3, [pc, #188]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041d8:	2204      	movs	r2, #4
 80041da:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80041dc:	4b2d      	ldr	r3, [pc, #180]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041de:	2200      	movs	r2, #0
 80041e0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80041e2:	4b2c      	ldr	r3, [pc, #176]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80041e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041ea:	2201      	movs	r2, #1
 80041ec:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80041ee:	4b29      	ldr	r3, [pc, #164]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80041f6:	4b27      	ldr	r3, [pc, #156]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80041fc:	4b25      	ldr	r3, [pc, #148]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 80041fe:	2200      	movs	r2, #0
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30

//  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
//  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;		// Use TIM1 TRGO

  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004202:	4b24      	ldr	r3, [pc, #144]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800420a:	4b22      	ldr	r3, [pc, #136]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 800420c:	2200      	movs	r2, #0
 800420e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004210:	4b20      	ldr	r3, [pc, #128]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004218:	481e      	ldr	r0, [pc, #120]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 800421a:	f001 faa3 	bl	8005764 <HAL_ADC_Init>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 800422e:	f000 fbd7 	bl	80049e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004232:	2300      	movs	r3, #0
 8004234:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8004236:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800423a:	4619      	mov	r1, r3
 800423c:	4815      	ldr	r0, [pc, #84]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 800423e:	f002 fd19 	bl	8006c74 <HAL_ADCEx_MultiModeConfigChannel>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8004252:	f000 fbc5 	bl	80049e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004256:	4b10      	ldr	r3, [pc, #64]	@ (8004298 <_ZL12MX_ADC1_Initv+0x108>)
 8004258:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800425a:	2306      	movs	r3, #6
 800425c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800425e:	2307      	movs	r3, #7
 8004260:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8004262:	237f      	movs	r3, #127	@ 0x7f
 8004264:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004266:	2304      	movs	r3, #4
 8004268:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800426a:	2300      	movs	r3, #0
 800426c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	4619      	mov	r1, r3
 8004272:	4808      	ldr	r0, [pc, #32]	@ (8004294 <_ZL12MX_ADC1_Initv+0x104>)
 8004274:	f001 ff50 	bl	8006118 <HAL_ADC_ConfigChannel>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	bf14      	ite	ne
 800427e:	2301      	movne	r3, #1
 8004280:	2300      	moveq	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8004288:	f000 fbaa 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800428c:	bf00      	nop
 800428e:	3730      	adds	r7, #48	@ 0x30
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000440 	.word	0x20000440
 8004298:	04300002 	.word	0x04300002

0800429c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b088      	sub	sp, #32
 80042a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80042a2:	463b      	mov	r3, r7
 80042a4:	2220      	movs	r2, #32
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f008 f999 	bl	800c5e0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80042ae:	4b30      	ldr	r3, [pc, #192]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042b0:	4a30      	ldr	r2, [pc, #192]	@ (8004374 <_ZL12MX_ADC2_Initv+0xd8>)
 80042b2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80042b4:	4b2e      	ldr	r3, [pc, #184]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80042ba:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80042bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042be:	2200      	movs	r2, #0
 80042c0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80042c2:	4b2b      	ldr	r3, [pc, #172]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042c4:	2200      	movs	r2, #0
 80042c6:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80042c8:	4b29      	ldr	r3, [pc, #164]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80042ce:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80042d4:	4b26      	ldr	r3, [pc, #152]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042d6:	2204      	movs	r2, #4
 80042d8:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80042da:	4b25      	ldr	r3, [pc, #148]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042dc:	2200      	movs	r2, #0
 80042de:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80042e0:	4b23      	ldr	r3, [pc, #140]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042e2:	2201      	movs	r2, #1
 80042e4:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80042e6:	4b22      	ldr	r3, [pc, #136]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80042ec:	4b20      	ldr	r3, [pc, #128]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80042f4:	4b1e      	ldr	r3, [pc, #120]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80042fa:	4b1d      	ldr	r3, [pc, #116]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004300:	4b1b      	ldr	r3, [pc, #108]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 800430a:	2200      	movs	r2, #0
 800430c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800430e:	4b18      	ldr	r3, [pc, #96]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8004316:	4816      	ldr	r0, [pc, #88]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 8004318:	f001 fa24 	bl	8005764 <HAL_ADC_Init>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	bf14      	ite	ne
 8004322:	2301      	movne	r3, #1
 8004324:	2300      	moveq	r3, #0
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 800432c:	f000 fb58 	bl	80049e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004330:	4b11      	ldr	r3, [pc, #68]	@ (8004378 <_ZL12MX_ADC2_Initv+0xdc>)
 8004332:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004334:	2306      	movs	r3, #6
 8004336:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004338:	2307      	movs	r3, #7
 800433a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800433c:	237f      	movs	r3, #127	@ 0x7f
 800433e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004340:	2304      	movs	r3, #4
 8004342:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8004344:	2300      	movs	r3, #0
 8004346:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004348:	463b      	mov	r3, r7
 800434a:	4619      	mov	r1, r3
 800434c:	4808      	ldr	r0, [pc, #32]	@ (8004370 <_ZL12MX_ADC2_Initv+0xd4>)
 800434e:	f001 fee3 	bl	8006118 <HAL_ADC_ConfigChannel>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	bf14      	ite	ne
 8004358:	2301      	movne	r3, #1
 800435a:	2300      	moveq	r3, #0
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8004362:	f000 fb3d 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8004366:	bf00      	nop
 8004368:	3720      	adds	r7, #32
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200004ac 	.word	0x200004ac
 8004374:	50000100 	.word	0x50000100
 8004378:	08600004 	.word	0x08600004

0800437c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004380:	4b10      	ldr	r3, [pc, #64]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 8004382:	4a11      	ldr	r2, [pc, #68]	@ (80043c8 <_ZL11MX_CRC_Initv+0x4c>)
 8004384:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004386:	4b0f      	ldr	r3, [pc, #60]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 8004388:	2200      	movs	r2, #0
 800438a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800438c:	4b0d      	ldr	r3, [pc, #52]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 800438e:	2200      	movs	r2, #0
 8004390:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004392:	4b0c      	ldr	r3, [pc, #48]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 8004394:	2200      	movs	r2, #0
 8004396:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 800439a:	2200      	movs	r2, #0
 800439c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800439e:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80043a4:	4807      	ldr	r0, [pc, #28]	@ (80043c4 <_ZL11MX_CRC_Initv+0x48>)
 80043a6:	f002 fe8f 	bl	80070c8 <HAL_CRC_Init>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80043ba:	f000 fb11 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000600 	.word	0x20000600
 80043c8:	40023000 	.word	0x40023000

080043cc <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80043d0:	4b22      	ldr	r3, [pc, #136]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043d2:	4a23      	ldr	r2, [pc, #140]	@ (8004460 <_ZL14MX_FDCAN1_Initv+0x94>)
 80043d4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80043d6:	4b21      	ldr	r3, [pc, #132]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043d8:	2200      	movs	r2, #0
 80043da:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80043dc:	4b1f      	ldr	r3, [pc, #124]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043de:	2200      	movs	r2, #0
 80043e0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80043e2:	4b1e      	ldr	r3, [pc, #120]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80043e8:	4b1c      	ldr	r3, [pc, #112]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043ea:	2200      	movs	r2, #0
 80043ec:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80043ee:	4b1b      	ldr	r3, [pc, #108]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80043f4:	4b19      	ldr	r3, [pc, #100]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043f6:	2200      	movs	r2, #0
 80043f8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80043fa:	4b18      	ldr	r3, [pc, #96]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 80043fc:	2202      	movs	r2, #2
 80043fe:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8004400:	4b16      	ldr	r3, [pc, #88]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004402:	220b      	movs	r2, #11
 8004404:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 8004406:	4b15      	ldr	r3, [pc, #84]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004408:	2249      	movs	r2, #73	@ 0x49
 800440a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 800440c:	4b13      	ldr	r3, [pc, #76]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 800440e:	220b      	movs	r2, #11
 8004410:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 8004412:	4b12      	ldr	r3, [pc, #72]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004414:	2205      	movs	r2, #5
 8004416:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 8004418:	4b10      	ldr	r3, [pc, #64]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 800441a:	220f      	movs	r2, #15
 800441c:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004420:	2212      	movs	r2, #18
 8004422:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 8004424:	4b0d      	ldr	r3, [pc, #52]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004426:	220f      	movs	r2, #15
 8004428:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 800442a:	4b0c      	ldr	r3, [pc, #48]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 800442c:	220a      	movs	r2, #10
 800442e:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8004430:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004432:	2200      	movs	r2, #0
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8004436:	4b09      	ldr	r3, [pc, #36]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 8004438:	2200      	movs	r2, #0
 800443a:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800443c:	4807      	ldr	r0, [pc, #28]	@ (800445c <_ZL14MX_FDCAN1_Initv+0x90>)
 800443e:	f003 f9a7 	bl	8007790 <HAL_FDCAN_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	bf14      	ite	ne
 8004448:	2301      	movne	r3, #1
 800444a:	2300      	moveq	r3, #0
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8004452:	f000 fac5 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000624 	.word	0x20000624
 8004460:	40006400 	.word	0x40006400

08004464 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004468:	4b08      	ldr	r3, [pc, #32]	@ (800448c <_ZL12MX_FMAC_Initv+0x28>)
 800446a:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <_ZL12MX_FMAC_Initv+0x2c>)
 800446c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800446e:	4807      	ldr	r0, [pc, #28]	@ (800448c <_ZL12MX_FMAC_Initv+0x28>)
 8004470:	f003 fce4 	bl	8007e3c <HAL_FMAC_Init>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	bf14      	ite	ne
 800447a:	2301      	movne	r3, #1
 800447c:	2300      	moveq	r3, #0
 800447e:	b2db      	uxtb	r3, r3
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8004484:	f000 faac 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}
 800448c:	20000688 	.word	0x20000688
 8004490:	40021400 	.word	0x40021400

08004494 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004498:	4b1d      	ldr	r3, [pc, #116]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 800449a:	4a1e      	ldr	r2, [pc, #120]	@ (8004514 <_ZL12MX_SPI1_Initv+0x80>)
 800449c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800449e:	4b1c      	ldr	r3, [pc, #112]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044a0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80044a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80044a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80044ac:	4b18      	ldr	r3, [pc, #96]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044ae:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80044b2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80044b4:	4b16      	ldr	r3, [pc, #88]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80044ba:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044bc:	2201      	movs	r2, #1
 80044be:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80044c0:	4b13      	ldr	r3, [pc, #76]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044c6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80044c8:	4b11      	ldr	r3, [pc, #68]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044ca:	2218      	movs	r2, #24
 80044cc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80044ce:	4b10      	ldr	r3, [pc, #64]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80044d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80044da:	4b0d      	ldr	r3, [pc, #52]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044dc:	2200      	movs	r2, #0
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80044e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044e2:	2207      	movs	r2, #7
 80044e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80044ec:	4b08      	ldr	r3, [pc, #32]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80044f2:	4807      	ldr	r0, [pc, #28]	@ (8004510 <_ZL12MX_SPI1_Initv+0x7c>)
 80044f4:	f004 fece 	bl	8009294 <HAL_SPI_Init>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	bf14      	ite	ne
 80044fe:	2301      	movne	r3, #1
 8004500:	2300      	moveq	r3, #0
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d001      	beq.n	800450c <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8004508:	f000 fa6a 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800450c:	bf00      	nop
 800450e:	bd80      	pop	{r7, pc}
 8004510:	200006c0 	.word	0x200006c0
 8004514:	40013000 	.word	0x40013000

08004518 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b09c      	sub	sp, #112	@ 0x70
 800451c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800451e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
 8004528:	609a      	str	r2, [r3, #8]
 800452a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800452c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004530:	2200      	movs	r2, #0
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	605a      	str	r2, [r3, #4]
 8004536:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004538:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800453c:	2200      	movs	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
 8004540:	605a      	str	r2, [r3, #4]
 8004542:	609a      	str	r2, [r3, #8]
 8004544:	60da      	str	r2, [r3, #12]
 8004546:	611a      	str	r2, [r3, #16]
 8004548:	615a      	str	r2, [r3, #20]
 800454a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800454c:	1d3b      	adds	r3, r7, #4
 800454e:	2234      	movs	r2, #52	@ 0x34
 8004550:	2100      	movs	r1, #0
 8004552:	4618      	mov	r0, r3
 8004554:	f008 f844 	bl	800c5e0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004558:	4b6c      	ldr	r3, [pc, #432]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800455a:	4a6d      	ldr	r2, [pc, #436]	@ (8004710 <_ZL12MX_TIM1_Initv+0x1f8>)
 800455c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800455e:	4b6b      	ldr	r3, [pc, #428]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004560:	2200      	movs	r2, #0
 8004562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004564:	4b69      	ldr	r3, [pc, #420]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004566:	2220      	movs	r2, #32
 8004568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 800456a:	4b68      	ldr	r3, [pc, #416]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800456c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004570:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004572:	4b66      	ldr	r3, [pc, #408]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004574:	2200      	movs	r2, #0
 8004576:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8004578:	4b64      	ldr	r3, [pc, #400]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800457a:	2201      	movs	r2, #1
 800457c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800457e:	4b63      	ldr	r3, [pc, #396]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004580:	2280      	movs	r2, #128	@ 0x80
 8004582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004584:	4861      	ldr	r0, [pc, #388]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004586:	f005 fab7 	bl	8009af8 <HAL_TIM_Base_Init>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	bf14      	ite	ne
 8004590:	2301      	movne	r3, #1
 8004592:	2300      	moveq	r3, #0
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800459a:	f000 fa21 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800459e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80045a2:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80045a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80045a8:	4619      	mov	r1, r3
 80045aa:	4858      	ldr	r0, [pc, #352]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 80045ac:	f005 ff9e 	bl	800a4ec <HAL_TIM_ConfigClockSource>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80045c0:	f000 fa0e 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80045c4:	4851      	ldr	r0, [pc, #324]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 80045c6:	f005 fbc0 	bl	8009d4a <HAL_TIM_PWM_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80045da:	f000 fa01 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80045de:	484b      	ldr	r0, [pc, #300]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 80045e0:	f005 fb52 	bl	8009c88 <HAL_TIM_OC_Init>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 80045f4:	f000 f9f4 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80045f8:	2300      	movs	r3, #0
 80045fa:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 80045fc:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004600:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004606:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800460a:	4619      	mov	r1, r3
 800460c:	483f      	ldr	r0, [pc, #252]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800460e:	f006 fd2f 	bl	800b070 <HAL_TIMEx_MasterConfigSynchronization>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	bf14      	ite	ne
 8004618:	2301      	movne	r3, #1
 800461a:	2300      	moveq	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8004622:	f000 f9dd 	bl	80049e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004626:	2360      	movs	r3, #96	@ 0x60
 8004628:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800462e:	2302      	movs	r3, #2
 8004630:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004632:	2300      	movs	r3, #0
 8004634:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004636:	2304      	movs	r3, #4
 8004638:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800463a:	2300      	movs	r3, #0
 800463c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800463e:	2300      	movs	r3, #0
 8004640:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004642:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004646:	2200      	movs	r2, #0
 8004648:	4619      	mov	r1, r3
 800464a:	4830      	ldr	r0, [pc, #192]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800464c:	f005 fe3a 	bl	800a2c4 <HAL_TIM_PWM_ConfigChannel>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf14      	ite	ne
 8004656:	2301      	movne	r3, #1
 8004658:	2300      	moveq	r3, #0
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8004660:	f000 f9be 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004664:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004668:	2204      	movs	r2, #4
 800466a:	4619      	mov	r1, r3
 800466c:	4827      	ldr	r0, [pc, #156]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 800466e:	f005 fe29 	bl	800a2c4 <HAL_TIM_PWM_ConfigChannel>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	bf14      	ite	ne
 8004678:	2301      	movne	r3, #1
 800467a:	2300      	moveq	r3, #0
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8004682:	f000 f9ad 	bl	80049e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004686:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800468a:	2208      	movs	r2, #8
 800468c:	4619      	mov	r1, r3
 800468e:	481f      	ldr	r0, [pc, #124]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004690:	f005 fe18 	bl	800a2c4 <HAL_TIM_PWM_ConfigChannel>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf14      	ite	ne
 800469a:	2301      	movne	r3, #1
 800469c:	2300      	moveq	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d001      	beq.n	80046a8 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 80046a4:	f000 f99c 	bl	80049e0 <Error_Handler>
  }

  // =================================================================================

  // =================================================================================
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80046b4:	2300      	movs	r3, #0
 80046b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80046bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80046ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80046d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80046d4:	2300      	movs	r3, #0
 80046d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80046d8:	2300      	movs	r3, #0
 80046da:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80046dc:	2300      	movs	r3, #0
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80046e0:	1d3b      	adds	r3, r7, #4
 80046e2:	4619      	mov	r1, r3
 80046e4:	4809      	ldr	r0, [pc, #36]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 80046e6:	f006 fd51 	bl	800b18c <HAL_TIMEx_ConfigBreakDeadTime>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <_ZL12MX_TIM1_Initv+0x1e6>
  {
    Error_Handler();
 80046fa:	f000 f971 	bl	80049e0 <Error_Handler>
  }
  // =================================================================================
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80046fe:	4803      	ldr	r0, [pc, #12]	@ (800470c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004700:	f000 fc20 	bl	8004f44 <HAL_TIM_MspPostInit>

}
 8004704:	bf00      	nop
 8004706:	3770      	adds	r7, #112	@ 0x70
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}
 800470c:	20000724 	.word	0x20000724
 8004710:	40012c00 	.word	0x40012c00

08004714 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b088      	sub	sp, #32
 8004718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800471a:	f107 0310 	add.w	r3, r7, #16
 800471e:	2200      	movs	r2, #0
 8004720:	601a      	str	r2, [r3, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	609a      	str	r2, [r3, #8]
 8004726:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004728:	1d3b      	adds	r3, r7, #4
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004732:	4b25      	ldr	r3, [pc, #148]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8004734:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004738:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 800473a:	4b23      	ldr	r3, [pc, #140]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 800473c:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004740:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004742:	4b21      	ldr	r3, [pc, #132]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8004744:	2200      	movs	r2, #0
 8004746:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004748:	4b1f      	ldr	r3, [pc, #124]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 800474a:	2263      	movs	r2, #99	@ 0x63
 800474c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800474e:	4b1e      	ldr	r3, [pc, #120]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8004750:	2200      	movs	r2, #0
 8004752:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004754:	4b1c      	ldr	r3, [pc, #112]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8004756:	2200      	movs	r2, #0
 8004758:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800475a:	481b      	ldr	r0, [pc, #108]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 800475c:	f005 f9cc 	bl	8009af8 <HAL_TIM_Base_Init>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	bf14      	ite	ne
 8004766:	2301      	movne	r3, #1
 8004768:	2300      	moveq	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8004770:	f000 f936 	bl	80049e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004774:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004778:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800477a:	f107 0310 	add.w	r3, r7, #16
 800477e:	4619      	mov	r1, r3
 8004780:	4811      	ldr	r0, [pc, #68]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 8004782:	f005 feb3 	bl	800a4ec <HAL_TIM_ConfigClockSource>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d001      	beq.n	800479a <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8004796:	f000 f923 	bl	80049e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800479a:	2300      	movs	r3, #0
 800479c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80047a2:	1d3b      	adds	r3, r7, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4808      	ldr	r0, [pc, #32]	@ (80047c8 <_ZL12MX_TIM2_Initv+0xb4>)
 80047a8:	f006 fc62 	bl	800b070 <HAL_TIMEx_MasterConfigSynchronization>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	bf14      	ite	ne
 80047b2:	2301      	movne	r3, #1
 80047b4:	2300      	moveq	r3, #0
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80047bc:	f000 f910 	bl	80049e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80047c0:	bf00      	nop
 80047c2:	3720      	adds	r7, #32
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000770 	.word	0x20000770

080047cc <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80047d2:	4b2e      	ldr	r3, [pc, #184]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047d8:	f043 0304 	orr.w	r3, r3, #4
 80047dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80047de:	4b2b      	ldr	r3, [pc, #172]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80047ea:	4b28      	ldr	r3, [pc, #160]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047ee:	4a27      	ldr	r2, [pc, #156]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6493      	str	r3, [r2, #72]	@ 0x48
 80047f6:	4b25      	ldr	r3, [pc, #148]	@ (800488c <_ZL11MX_DMA_Initv+0xc0>)
 80047f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]
 8004800:	683b      	ldr	r3, [r7, #0]


  hdma_adc1.Instance = DMA1_Channel1;
 8004802:	4b23      	ldr	r3, [pc, #140]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004804:	4a23      	ldr	r2, [pc, #140]	@ (8004894 <_ZL11MX_DMA_Initv+0xc8>)
 8004806:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004808:	4b21      	ldr	r3, [pc, #132]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 800480a:	2205      	movs	r2, #5
 800480c:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800480e:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004810:	2200      	movs	r2, #0
 8004812:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004814:	4b1e      	ldr	r3, [pc, #120]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004816:	2200      	movs	r2, #0
 8004818:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800481a:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 800481c:	2280      	movs	r2, #128	@ 0x80
 800481e:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004822:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004826:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 800482a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800482e:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004830:	4b17      	ldr	r3, [pc, #92]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004832:	2220      	movs	r2, #32
 8004834:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004836:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004838:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800483c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800483e:	4814      	ldr	r0, [pc, #80]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004840:	f002 fd34 	bl	80072ac <HAL_DMA_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	bf14      	ite	ne
 800484a:	2301      	movne	r3, #1
 800484c:	2300      	moveq	r3, #0
 800484e:	b2db      	uxtb	r3, r3
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <_ZL11MX_DMA_Initv+0x8c>
  {
      Error_Handler();
 8004854:	f000 f8c4 	bl	80049e0 <Error_Handler>
  }
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8004858:	4b0f      	ldr	r3, [pc, #60]	@ (8004898 <_ZL11MX_DMA_Initv+0xcc>)
 800485a:	4a0d      	ldr	r2, [pc, #52]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 800485c:	655a      	str	r2, [r3, #84]	@ 0x54
 800485e:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <_ZL11MX_DMA_Initv+0xc4>)
 8004860:	4a0d      	ldr	r2, [pc, #52]	@ (8004898 <_ZL11MX_DMA_Initv+0xcc>)
 8004862:	629a      	str	r2, [r3, #40]	@ 0x28



  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration --> ADC_1 */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004864:	2200      	movs	r2, #0
 8004866:	2100      	movs	r1, #0
 8004868:	200b      	movs	r0, #11
 800486a:	f002 fbf8 	bl	800705e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800486e:	200b      	movs	r0, #11
 8004870:	f002 fc0f 	bl	8007092 <HAL_NVIC_EnableIRQ>




  /* DMA1_Channel2_IRQn interrupt configuration --> ADC_2*/
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004874:	2200      	movs	r2, #0
 8004876:	2100      	movs	r1, #0
 8004878:	200c      	movs	r0, #12
 800487a:	f002 fbf0 	bl	800705e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800487e:	200c      	movs	r0, #12
 8004880:	f002 fc07 	bl	8007092 <HAL_NVIC_EnableIRQ>

}
 8004884:	bf00      	nop
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40021000 	.word	0x40021000
 8004890:	20000518 	.word	0x20000518
 8004894:	40020008 	.word	0x40020008
 8004898:	20000440 	.word	0x20000440

0800489c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b088      	sub	sp, #32
 80048a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048a2:	f107 030c 	add.w	r3, r7, #12
 80048a6:	2200      	movs	r2, #0
 80048a8:	601a      	str	r2, [r3, #0]
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	609a      	str	r2, [r3, #8]
 80048ae:	60da      	str	r2, [r3, #12]
 80048b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048b2:	4b28      	ldr	r3, [pc, #160]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048b6:	4a27      	ldr	r2, [pc, #156]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048b8:	f043 0320 	orr.w	r3, r3, #32
 80048bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048be:	4b25      	ldr	r3, [pc, #148]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048c2:	f003 0320 	and.w	r3, r3, #32
 80048c6:	60bb      	str	r3, [r7, #8]
 80048c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ca:	4b22      	ldr	r3, [pc, #136]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	4a21      	ldr	r2, [pc, #132]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048d0:	f043 0301 	orr.w	r3, r3, #1
 80048d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80048e2:	4b1c      	ldr	r3, [pc, #112]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048e8:	f043 0302 	orr.w	r3, r3, #2
 80048ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80048ee:	4b19      	ldr	r3, [pc, #100]	@ (8004954 <_ZL12MX_GPIO_Initv+0xb8>)
 80048f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80048fa:	2200      	movs	r2, #0
 80048fc:	2110      	movs	r1, #16
 80048fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004902:	f003 fcc9 	bl	8008298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8004906:	2200      	movs	r2, #0
 8004908:	2101      	movs	r1, #1
 800490a:	4813      	ldr	r0, [pc, #76]	@ (8004958 <_ZL12MX_GPIO_Initv+0xbc>)
 800490c:	f003 fcc4 	bl	8008298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8004910:	2310      	movs	r3, #16
 8004912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004914:	2301      	movs	r3, #1
 8004916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491c:	2300      	movs	r3, #0
 800491e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8004920:	f107 030c 	add.w	r3, r7, #12
 8004924:	4619      	mov	r1, r3
 8004926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800492a:	f003 fb33 	bl	8007f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800492e:	2301      	movs	r3, #1
 8004930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004932:	2301      	movs	r3, #1
 8004934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004936:	2300      	movs	r3, #0
 8004938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800493a:	2300      	movs	r3, #0
 800493c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800493e:	f107 030c 	add.w	r3, r7, #12
 8004942:	4619      	mov	r1, r3
 8004944:	4804      	ldr	r0, [pc, #16]	@ (8004958 <_ZL12MX_GPIO_Initv+0xbc>)
 8004946:	f003 fb25 	bl	8007f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800494a:	bf00      	nop
 800494c:	3720      	adds	r7, #32
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	40021000 	.word	0x40021000
 8004958:	48000400 	.word	0x48000400

0800495c <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004960:	4b08      	ldr	r3, [pc, #32]	@ (8004984 <_ZL8DWT_Initv+0x28>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	4a07      	ldr	r2, [pc, #28]	@ (8004984 <_ZL8DWT_Initv+0x28>)
 8004966:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800496a:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 800496c:	4b06      	ldr	r3, [pc, #24]	@ (8004988 <_ZL8DWT_Initv+0x2c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a05      	ldr	r2, [pc, #20]	@ (8004988 <_ZL8DWT_Initv+0x2c>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6013      	str	r3, [r2, #0]
}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	e000edf0 	.word	0xe000edf0
 8004988:	e0001000 	.word	0xe0001000

0800498c <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <_ZL6microsv+0x24>)
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	4b07      	ldr	r3, [pc, #28]	@ (80049b4 <_ZL6microsv+0x28>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4907      	ldr	r1, [pc, #28]	@ (80049b8 <_ZL6microsv+0x2c>)
 800499a:	fba1 1303 	umull	r1, r3, r1, r3
 800499e:	0c9b      	lsrs	r3, r3, #18
 80049a0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e0001000 	.word	0xe0001000
 80049b4:	200000bc 	.word	0x200000bc
 80049b8:	431bde83 	.word	0x431bde83

080049bc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049cc:	d102      	bne.n	80049d4 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  simpleFOC.Encoder.updateVelocity();
 80049ce:	4803      	ldr	r0, [pc, #12]	@ (80049dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049d0:	f7fc fb60 	bl	8001094 <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000210 	.word	0x20000210

080049e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049e0:	b480      	push	{r7}
 80049e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049e4:	b672      	cpsid	i
}
 80049e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049e8:	bf00      	nop
 80049ea:	e7fd      	b.n	80049e8 <Error_Handler+0x8>

080049ec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d107      	bne.n	8004a0c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d102      	bne.n	8004a0c <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8004a06:	4809      	ldr	r0, [pc, #36]	@ (8004a2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004a08:	f7fe fe48 	bl	800369c <_ZN9simpleFOCC1Ev>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d107      	bne.n	8004a22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d102      	bne.n	8004a22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004a1c:	4803      	ldr	r0, [pc, #12]	@ (8004a2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004a1e:	f7fe fe65 	bl	80036ec <_ZN9simpleFOCD1Ev>
}
 8004a22:	bf00      	nop
 8004a24:	3708      	adds	r7, #8
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	20000208 	.word	0x20000208

08004a30 <_GLOBAL__sub_I_simpleFOC>:
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a38:	2001      	movs	r0, #1
 8004a3a:	f7ff ffd7 	bl	80049ec <_Z41__static_initialization_and_destruction_0ii>
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <_GLOBAL__sub_D_simpleFOC>:
 8004a40:	b580      	push	{r7, lr}
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004a48:	2000      	movs	r0, #0
 8004a4a:	f7ff ffcf 	bl	80049ec <_Z41__static_initialization_and_destruction_0ii>
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a56:	4b0f      	ldr	r3, [pc, #60]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a5c:	f043 0301 	orr.w	r3, r3, #1
 8004a60:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a62:	4b0c      	ldr	r3, [pc, #48]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	607b      	str	r3, [r7, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	4b09      	ldr	r3, [pc, #36]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a72:	4a08      	ldr	r2, [pc, #32]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a78:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7a:	4b06      	ldr	r3, [pc, #24]	@ (8004a94 <HAL_MspInit+0x44>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004a86:	f003 fcc3 	bl	8008410 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	40021000 	.word	0x40021000

08004a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b0a0      	sub	sp, #128	@ 0x80
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	605a      	str	r2, [r3, #4]
 8004aaa:	609a      	str	r2, [r3, #8]
 8004aac:	60da      	str	r2, [r3, #12]
 8004aae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ab0:	f107 031c 	add.w	r3, r7, #28
 8004ab4:	2250      	movs	r2, #80	@ 0x50
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f007 fd91 	bl	800c5e0 <memset>
  if(hadc->Instance==ADC1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ac6:	d171      	bne.n	8004bac <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004ac8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004acc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004ace:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004ad2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ad4:	f107 031c 	add.w	r3, r7, #28
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f004 f99f 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004ae4:	f7ff ff7c 	bl	80049e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ae8:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3301      	adds	r3, #1
 8004aee:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004af0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004af2:	4b6b      	ldr	r3, [pc, #428]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d10b      	bne.n	8004b12 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004afa:	4b6a      	ldr	r3, [pc, #424]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004afc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afe:	4a69      	ldr	r2, [pc, #420]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004b00:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b06:	4b67      	ldr	r3, [pc, #412]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b12:	4b64      	ldr	r3, [pc, #400]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b16:	4a63      	ldr	r2, [pc, #396]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b1e:	4b61      	ldr	r3, [pc, #388]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
 8004b28:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8004b36:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b40:	f003 fa28 	bl	8007f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004b44:	4b58      	ldr	r3, [pc, #352]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b46:	4a59      	ldr	r2, [pc, #356]	@ (8004cac <HAL_ADC_MspInit+0x214>)
 8004b48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004b4a:	4b57      	ldr	r3, [pc, #348]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b4c:	2205      	movs	r2, #5
 8004b4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b50:	4b55      	ldr	r3, [pc, #340]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b56:	4b54      	ldr	r3, [pc, #336]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004b5c:	4b52      	ldr	r3, [pc, #328]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b5e:	2280      	movs	r2, #128	@ 0x80
 8004b60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b62:	4b51      	ldr	r3, [pc, #324]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b6a:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b6c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004b70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004b72:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b74:	2220      	movs	r2, #32
 8004b76:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004b78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004b7e:	484a      	ldr	r0, [pc, #296]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b80:	f002 fb94 	bl	80072ac <HAL_DMA_Init>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004b8a:	f7ff ff29 	bl	80049e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a45      	ldr	r2, [pc, #276]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b92:	655a      	str	r2, [r3, #84]	@ 0x54
 8004b94:	4a44      	ldr	r2, [pc, #272]	@ (8004ca8 <HAL_ADC_MspInit+0x210>)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2012      	movs	r0, #18
 8004ba0:	f002 fa5d 	bl	800705e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004ba4:	2012      	movs	r0, #18
 8004ba6:	f002 fa74 	bl	8007092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004baa:	e075      	b.n	8004c98 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb0 <HAL_ADC_MspInit+0x218>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d170      	bne.n	8004c98 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004bb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004bbc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004bc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bc2:	f107 031c 	add.w	r3, r7, #28
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f004 f928 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d001      	beq.n	8004bd6 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004bd2:	f7ff ff05 	bl	80049e0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004bd6:	4b32      	ldr	r3, [pc, #200]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3301      	adds	r3, #1
 8004bdc:	4a30      	ldr	r2, [pc, #192]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004bde:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004be0:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca0 <HAL_ADC_MspInit+0x208>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d10b      	bne.n	8004c00 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004be8:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004bea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bec:	4a2d      	ldr	r2, [pc, #180]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004bee:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004bf2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004bf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c00:	4b28      	ldr	r3, [pc, #160]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c04:	4a27      	ldr	r2, [pc, #156]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004c0c:	4b25      	ldr	r3, [pc, #148]	@ (8004ca4 <HAL_ADC_MspInit+0x20c>)
 8004c0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	60fb      	str	r3, [r7, #12]
 8004c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004c24:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c28:	4619      	mov	r1, r3
 8004c2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004c2e:	f003 f9b1 	bl	8007f94 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004c32:	4b20      	ldr	r3, [pc, #128]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c34:	4a20      	ldr	r2, [pc, #128]	@ (8004cb8 <HAL_ADC_MspInit+0x220>)
 8004c36:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004c38:	4b1e      	ldr	r3, [pc, #120]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c3a:	2224      	movs	r2, #36	@ 0x24
 8004c3c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c4c:	2280      	movs	r2, #128	@ 0x80
 8004c4e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c50:	4b18      	ldr	r3, [pc, #96]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c56:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c58:	4b16      	ldr	r3, [pc, #88]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c5e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c62:	2220      	movs	r2, #32
 8004c64:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004c66:	4b13      	ldr	r3, [pc, #76]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004c6c:	4811      	ldr	r0, [pc, #68]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c6e:	f002 fb1d 	bl	80072ac <HAL_DMA_Init>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d001      	beq.n	8004c7c <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8004c78:	f7ff feb2 	bl	80049e0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c80:	655a      	str	r2, [r3, #84]	@ 0x54
 8004c82:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb4 <HAL_ADC_MspInit+0x21c>)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004c88:	2200      	movs	r2, #0
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	2012      	movs	r0, #18
 8004c8e:	f002 f9e6 	bl	800705e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004c92:	2012      	movs	r0, #18
 8004c94:	f002 f9fd 	bl	8007092 <HAL_NVIC_EnableIRQ>
}
 8004c98:	bf00      	nop
 8004c9a:	3780      	adds	r7, #128	@ 0x80
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	200007cc 	.word	0x200007cc
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	20000518 	.word	0x20000518
 8004cac:	40020008 	.word	0x40020008
 8004cb0:	50000100 	.word	0x50000100
 8004cb4:	20000578 	.word	0x20000578
 8004cb8:	4002001c 	.word	0x4002001c

08004cbc <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a0a      	ldr	r2, [pc, #40]	@ (8004cf4 <HAL_CORDIC_MspInit+0x38>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d10b      	bne.n	8004ce6 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004cce:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_CORDIC_MspInit+0x3c>)
 8004cd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cd2:	4a09      	ldr	r2, [pc, #36]	@ (8004cf8 <HAL_CORDIC_MspInit+0x3c>)
 8004cd4:	f043 0308 	orr.w	r3, r3, #8
 8004cd8:	6493      	str	r3, [r2, #72]	@ 0x48
 8004cda:	4b07      	ldr	r3, [pc, #28]	@ (8004cf8 <HAL_CORDIC_MspInit+0x3c>)
 8004cdc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cde:	f003 0308 	and.w	r3, r3, #8
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40020c00 	.word	0x40020c00
 8004cf8:	40021000 	.word	0x40021000

08004cfc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a0a      	ldr	r2, [pc, #40]	@ (8004d34 <HAL_CRC_MspInit+0x38>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d10b      	bne.n	8004d26 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <HAL_CRC_MspInit+0x3c>)
 8004d10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d12:	4a09      	ldr	r2, [pc, #36]	@ (8004d38 <HAL_CRC_MspInit+0x3c>)
 8004d14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d18:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d1a:	4b07      	ldr	r3, [pc, #28]	@ (8004d38 <HAL_CRC_MspInit+0x3c>)
 8004d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004d26:	bf00      	nop
 8004d28:	3714      	adds	r7, #20
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	40023000 	.word	0x40023000
 8004d38:	40021000 	.word	0x40021000

08004d3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b09e      	sub	sp, #120	@ 0x78
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d44:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	605a      	str	r2, [r3, #4]
 8004d4e:	609a      	str	r2, [r3, #8]
 8004d50:	60da      	str	r2, [r3, #12]
 8004d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d54:	f107 0314 	add.w	r3, r7, #20
 8004d58:	2250      	movs	r2, #80	@ 0x50
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f007 fc3f 	bl	800c5e0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a24      	ldr	r2, [pc, #144]	@ (8004df8 <HAL_FDCAN_MspInit+0xbc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d141      	bne.n	8004df0 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004d6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d70:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004d72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d78:	f107 0314 	add.w	r3, r7, #20
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f004 f84d 	bl	8008e1c <HAL_RCCEx_PeriphCLKConfig>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004d88:	f7ff fe2a 	bl	80049e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004d8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	4a1a      	ldr	r2, [pc, #104]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004d92:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d96:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d98:	4b18      	ldr	r3, [pc, #96]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da4:	4b15      	ldr	r3, [pc, #84]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da8:	4a14      	ldr	r2, [pc, #80]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004daa:	f043 0301 	orr.w	r3, r3, #1
 8004dae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004db0:	4b12      	ldr	r3, [pc, #72]	@ (8004dfc <HAL_FDCAN_MspInit+0xc0>)
 8004db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004dbc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004dc0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004dce:	2309      	movs	r3, #9
 8004dd0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dd2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004dd6:	4619      	mov	r1, r3
 8004dd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ddc:	f003 f8da 	bl	8007f94 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004de0:	2200      	movs	r2, #0
 8004de2:	2100      	movs	r1, #0
 8004de4:	2015      	movs	r0, #21
 8004de6:	f002 f93a 	bl	800705e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004dea:	2015      	movs	r0, #21
 8004dec:	f002 f951 	bl	8007092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004df0:	bf00      	nop
 8004df2:	3778      	adds	r7, #120	@ 0x78
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40006400 	.word	0x40006400
 8004dfc:	40021000 	.word	0x40021000

08004e00 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b085      	sub	sp, #20
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e38 <HAL_FMAC_MspInit+0x38>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10b      	bne.n	8004e2a <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004e12:	4b0a      	ldr	r3, [pc, #40]	@ (8004e3c <HAL_FMAC_MspInit+0x3c>)
 8004e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e16:	4a09      	ldr	r2, [pc, #36]	@ (8004e3c <HAL_FMAC_MspInit+0x3c>)
 8004e18:	f043 0310 	orr.w	r3, r3, #16
 8004e1c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e1e:	4b07      	ldr	r3, [pc, #28]	@ (8004e3c <HAL_FMAC_MspInit+0x3c>)
 8004e20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004e2a:	bf00      	nop
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40021400 	.word	0x40021400
 8004e3c:	40021000 	.word	0x40021000

08004e40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	@ 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	f107 0314 	add.w	r3, r7, #20
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	605a      	str	r2, [r3, #4]
 8004e52:	609a      	str	r2, [r3, #8]
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a17      	ldr	r2, [pc, #92]	@ (8004ebc <HAL_SPI_MspInit+0x7c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d128      	bne.n	8004eb4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004e62:	4b17      	ldr	r3, [pc, #92]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e66:	4a16      	ldr	r2, [pc, #88]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004e6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7e:	4a10      	ldr	r2, [pc, #64]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e80:	f043 0301 	orr.w	r3, r3, #1
 8004e84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e86:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec0 <HAL_SPI_MspInit+0x80>)
 8004e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004e92:	23e0      	movs	r3, #224	@ 0xe0
 8004e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e96:	2302      	movs	r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004ea2:	2305      	movs	r3, #5
 8004ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ea6:	f107 0314 	add.w	r3, r7, #20
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004eb0:	f003 f870 	bl	8007f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004eb4:	bf00      	nop
 8004eb6:	3728      	adds	r7, #40	@ 0x28
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	40013000 	.word	0x40013000
 8004ec0:	40021000 	.word	0x40021000

08004ec4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8004f3c <HAL_TIM_Base_MspInit+0x78>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d114      	bne.n	8004f00 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ed6:	4b1a      	ldr	r3, [pc, #104]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004eda:	4a19      	ldr	r2, [pc, #100]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004edc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004ee0:	6613      	str	r3, [r2, #96]	@ 0x60
 8004ee2:	4b17      	ldr	r3, [pc, #92]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004ee4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ee6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004eee:	2200      	movs	r2, #0
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	201b      	movs	r0, #27
 8004ef4:	f002 f8b3 	bl	800705e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004ef8:	201b      	movs	r0, #27
 8004efa:	f002 f8ca 	bl	8007092 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004efe:	e018      	b.n	8004f32 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f08:	d113      	bne.n	8004f32 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004f10:	f043 0301 	orr.w	r3, r3, #1
 8004f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f16:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <HAL_TIM_Base_MspInit+0x7c>)
 8004f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f1a:	f003 0301 	and.w	r3, r3, #1
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004f22:	2200      	movs	r2, #0
 8004f24:	2100      	movs	r1, #0
 8004f26:	201c      	movs	r0, #28
 8004f28:	f002 f899 	bl	800705e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004f2c:	201c      	movs	r0, #28
 8004f2e:	f002 f8b0 	bl	8007092 <HAL_NVIC_EnableIRQ>
}
 8004f32:	bf00      	nop
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40021000 	.word	0x40021000

08004f44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 030c 	add.w	r3, r7, #12
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a12      	ldr	r2, [pc, #72]	@ (8004fac <HAL_TIM_MspPostInit+0x68>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d11d      	bne.n	8004fa2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <HAL_TIM_MspPostInit+0x6c>)
 8004f68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6a:	4a11      	ldr	r2, [pc, #68]	@ (8004fb0 <HAL_TIM_MspPostInit+0x6c>)
 8004f6c:	f043 0301 	orr.w	r3, r3, #1
 8004f70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f72:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <HAL_TIM_MspPostInit+0x6c>)
 8004f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f76:	f003 0301 	and.w	r3, r3, #1
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8004f7e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8004f82:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f84:	2302      	movs	r3, #2
 8004f86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004f90:	2306      	movs	r3, #6
 8004f92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f94:	f107 030c 	add.w	r3, r7, #12
 8004f98:	4619      	mov	r1, r3
 8004f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f9e:	f002 fff9 	bl	8007f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004fa2:	bf00      	nop
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00
 8004fb0:	40021000 	.word	0x40021000

08004fb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004fb8:	bf00      	nop
 8004fba:	e7fd      	b.n	8004fb8 <NMI_Handler+0x4>

08004fbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <HardFault_Handler+0x4>

08004fc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fc8:	bf00      	nop
 8004fca:	e7fd      	b.n	8004fc8 <MemManage_Handler+0x4>

08004fcc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <BusFault_Handler+0x4>

08004fd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fd8:	bf00      	nop
 8004fda:	e7fd      	b.n	8004fd8 <UsageFault_Handler+0x4>

08004fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fe0:	bf00      	nop
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fea:	b480      	push	{r7}
 8004fec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fee:	bf00      	nop
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004ffc:	bf00      	nop
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr

08005006 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005006:	b580      	push	{r7, lr}
 8005008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800500a:	f000 f92b 	bl	8005264 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005018:	4802      	ldr	r0, [pc, #8]	@ (8005024 <DMA1_Channel1_IRQHandler+0x10>)
 800501a:	f002 fa6a 	bl	80074f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000518 	.word	0x20000518

08005028 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800502c:	4802      	ldr	r0, [pc, #8]	@ (8005038 <DMA1_Channel2_IRQHandler+0x10>)
 800502e:	f002 fa60 	bl	80074f2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8005032:	bf00      	nop
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20000578 	.word	0x20000578

0800503c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005040:	4803      	ldr	r0, [pc, #12]	@ (8005050 <ADC1_2_IRQHandler+0x14>)
 8005042:	f000 fe07 	bl	8005c54 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005046:	4803      	ldr	r0, [pc, #12]	@ (8005054 <ADC1_2_IRQHandler+0x18>)
 8005048:	f000 fe04 	bl	8005c54 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800504c:	bf00      	nop
 800504e:	bd80      	pop	{r7, pc}
 8005050:	20000440 	.word	0x20000440
 8005054:	200004ac 	.word	0x200004ac

08005058 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800505c:	4802      	ldr	r0, [pc, #8]	@ (8005068 <FDCAN1_IT0_IRQHandler+0x10>)
 800505e:	f002 fcf1 	bl	8007a44 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000624 	.word	0x20000624

0800506c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005070:	4802      	ldr	r0, [pc, #8]	@ (800507c <TIM1_CC_IRQHandler+0x10>)
 8005072:	f004 ffd7 	bl	800a024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000724 	.word	0x20000724

08005080 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005084:	4802      	ldr	r0, [pc, #8]	@ (8005090 <TIM2_IRQHandler+0x10>)
 8005086:	f004 ffcd 	bl	800a024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000770 	.word	0x20000770

08005094 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005094:	b480      	push	{r7}
 8005096:	af00      	add	r7, sp, #0
  return 1;
 8005098:	2301      	movs	r3, #1
}
 800509a:	4618      	mov	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr

080050a4 <_kill>:

int _kill(int pid, int sig)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050ae:	f007 faf3 	bl	800c698 <__errno>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2216      	movs	r2, #22
 80050b6:	601a      	str	r2, [r3, #0]
  return -1;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3708      	adds	r7, #8
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_exit>:

void _exit (int status)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b082      	sub	sp, #8
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80050cc:	f04f 31ff 	mov.w	r1, #4294967295
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f7ff ffe7 	bl	80050a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80050d6:	bf00      	nop
 80050d8:	e7fd      	b.n	80050d6 <_exit+0x12>
	...

080050dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050e4:	4a14      	ldr	r2, [pc, #80]	@ (8005138 <_sbrk+0x5c>)
 80050e6:	4b15      	ldr	r3, [pc, #84]	@ (800513c <_sbrk+0x60>)
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050f0:	4b13      	ldr	r3, [pc, #76]	@ (8005140 <_sbrk+0x64>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d102      	bne.n	80050fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050f8:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <_sbrk+0x64>)
 80050fa:	4a12      	ldr	r2, [pc, #72]	@ (8005144 <_sbrk+0x68>)
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050fe:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <_sbrk+0x64>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	429a      	cmp	r2, r3
 800510a:	d207      	bcs.n	800511c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800510c:	f007 fac4 	bl	800c698 <__errno>
 8005110:	4603      	mov	r3, r0
 8005112:	220c      	movs	r2, #12
 8005114:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005116:	f04f 33ff 	mov.w	r3, #4294967295
 800511a:	e009      	b.n	8005130 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800511c:	4b08      	ldr	r3, [pc, #32]	@ (8005140 <_sbrk+0x64>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005122:	4b07      	ldr	r3, [pc, #28]	@ (8005140 <_sbrk+0x64>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4413      	add	r3, r2
 800512a:	4a05      	ldr	r2, [pc, #20]	@ (8005140 <_sbrk+0x64>)
 800512c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800512e:	68fb      	ldr	r3, [r7, #12]
}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}
 8005138:	2001c000 	.word	0x2001c000
 800513c:	00000400 	.word	0x00000400
 8005140:	200007d0 	.word	0x200007d0
 8005144:	20000928 	.word	0x20000928

08005148 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800514c:	4b06      	ldr	r3, [pc, #24]	@ (8005168 <SystemInit+0x20>)
 800514e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005152:	4a05      	ldr	r2, [pc, #20]	@ (8005168 <SystemInit+0x20>)
 8005154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800515c:	bf00      	nop
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800516c:	480d      	ldr	r0, [pc, #52]	@ (80051a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800516e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005170:	f7ff ffea 	bl	8005148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005174:	480c      	ldr	r0, [pc, #48]	@ (80051a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005176:	490d      	ldr	r1, [pc, #52]	@ (80051ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8005178:	4a0d      	ldr	r2, [pc, #52]	@ (80051b0 <LoopForever+0xe>)
  movs r3, #0
 800517a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800517c:	e002      	b.n	8005184 <LoopCopyDataInit>

0800517e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800517e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005182:	3304      	adds	r3, #4

08005184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005188:	d3f9      	bcc.n	800517e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800518a:	4a0a      	ldr	r2, [pc, #40]	@ (80051b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800518c:	4c0a      	ldr	r4, [pc, #40]	@ (80051b8 <LoopForever+0x16>)
  movs r3, #0
 800518e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005190:	e001      	b.n	8005196 <LoopFillZerobss>

08005192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005194:	3204      	adds	r2, #4

08005196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005198:	d3fb      	bcc.n	8005192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800519a:	f007 fa83 	bl	800c6a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800519e:	f7fe ff27 	bl	8003ff0 <main>

080051a2 <LoopForever>:

LoopForever:
    b LoopForever
 80051a2:	e7fe      	b.n	80051a2 <LoopForever>
  ldr   r0, =_estack
 80051a4:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80051a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051ac:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80051b0:	0800c8e4 	.word	0x0800c8e4
  ldr r2, =_sbss
 80051b4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80051b8:	20000924 	.word	0x20000924

080051bc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80051bc:	e7fe      	b.n	80051bc <ADC3_IRQHandler>

080051be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	b082      	sub	sp, #8
 80051c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80051c4:	2300      	movs	r3, #0
 80051c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80051c8:	2003      	movs	r0, #3
 80051ca:	f001 ff3d 	bl	8007048 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80051ce:	200f      	movs	r0, #15
 80051d0:	f000 f80e 	bl	80051f0 <HAL_InitTick>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	71fb      	strb	r3, [r7, #7]
 80051de:	e001      	b.n	80051e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80051e0:	f7ff fc36 	bl	8004a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80051e4:	79fb      	ldrb	r3, [r7, #7]

}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
	...

080051f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80051f8:	2300      	movs	r3, #0
 80051fa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80051fc:	4b16      	ldr	r3, [pc, #88]	@ (8005258 <HAL_InitTick+0x68>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d022      	beq.n	800524a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005204:	4b15      	ldr	r3, [pc, #84]	@ (800525c <HAL_InitTick+0x6c>)
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	4b13      	ldr	r3, [pc, #76]	@ (8005258 <HAL_InitTick+0x68>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005210:	fbb1 f3f3 	udiv	r3, r1, r3
 8005214:	fbb2 f3f3 	udiv	r3, r2, r3
 8005218:	4618      	mov	r0, r3
 800521a:	f001 ff48 	bl	80070ae <HAL_SYSTICK_Config>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2b0f      	cmp	r3, #15
 8005228:	d809      	bhi.n	800523e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800522a:	2200      	movs	r2, #0
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	f04f 30ff 	mov.w	r0, #4294967295
 8005232:	f001 ff14 	bl	800705e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005236:	4a0a      	ldr	r2, [pc, #40]	@ (8005260 <HAL_InitTick+0x70>)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6013      	str	r3, [r2, #0]
 800523c:	e007      	b.n	800524e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e004      	b.n	800524e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	73fb      	strb	r3, [r7, #15]
 8005248:	e001      	b.n	800524e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800524e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3710      	adds	r7, #16
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	200000c4 	.word	0x200000c4
 800525c:	200000bc 	.word	0x200000bc
 8005260:	200000c0 	.word	0x200000c0

08005264 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005264:	b480      	push	{r7}
 8005266:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005268:	4b05      	ldr	r3, [pc, #20]	@ (8005280 <HAL_IncTick+0x1c>)
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <HAL_IncTick+0x20>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4413      	add	r3, r2
 8005272:	4a03      	ldr	r2, [pc, #12]	@ (8005280 <HAL_IncTick+0x1c>)
 8005274:	6013      	str	r3, [r2, #0]
}
 8005276:	bf00      	nop
 8005278:	46bd      	mov	sp, r7
 800527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527e:	4770      	bx	lr
 8005280:	200007d4 	.word	0x200007d4
 8005284:	200000c4 	.word	0x200000c4

08005288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return uwTick;
 800528c:	4b03      	ldr	r3, [pc, #12]	@ (800529c <HAL_GetTick+0x14>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	4618      	mov	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	200007d4 	.word	0x200007d4

080052a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052a8:	f7ff ffee 	bl	8005288 <HAL_GetTick>
 80052ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b8:	d004      	beq.n	80052c4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80052ba:	4b09      	ldr	r3, [pc, #36]	@ (80052e0 <HAL_Delay+0x40>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80052c4:	bf00      	nop
 80052c6:	f7ff ffdf 	bl	8005288 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d8f7      	bhi.n	80052c6 <HAL_Delay+0x26>
  {
  }
}
 80052d6:	bf00      	nop
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	200000c4 	.word	0x200000c4

080052e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b083      	sub	sp, #12
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	431a      	orrs	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	609a      	str	r2, [r3, #8]
}
 80052fe:	bf00      	nop
 8005300:	370c      	adds	r7, #12
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800530a:	b480      	push	{r7}
 800530c:	b083      	sub	sp, #12
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	609a      	str	r2, [r3, #8]
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8005340:	4618      	mov	r0, r3
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
 8005358:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3360      	adds	r3, #96	@ 0x60
 800535e:	461a      	mov	r2, r3
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	4b08      	ldr	r3, [pc, #32]	@ (8005390 <LL_ADC_SetOffset+0x44>)
 800536e:	4013      	ands	r3, r2
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	4313      	orrs	r3, r2
 800537c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	03fff000 	.word	0x03fff000

08005394 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005394:	b480      	push	{r7}
 8005396:	b085      	sub	sp, #20
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	3360      	adds	r3, #96	@ 0x60
 80053a2:	461a      	mov	r2, r3
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	4413      	add	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3360      	adds	r3, #96	@ 0x60
 80053d0:	461a      	mov	r2, r3
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4413      	add	r3, r2
 80053d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80053ea:	bf00      	nop
 80053ec:	371c      	adds	r7, #28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr

080053f6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80053f6:	b480      	push	{r7}
 80053f8:	b087      	sub	sp, #28
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	60f8      	str	r0, [r7, #12]
 80053fe:	60b9      	str	r1, [r7, #8]
 8005400:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3360      	adds	r3, #96	@ 0x60
 8005406:	461a      	mov	r2, r3
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	431a      	orrs	r2, r3
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3360      	adds	r3, #96	@ 0x60
 800543c:	461a      	mov	r2, r3
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	4413      	add	r3, r2
 8005444:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	431a      	orrs	r2, r3
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005456:	bf00      	nop
 8005458:	371c      	adds	r7, #28
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005462:	b480      	push	{r7}
 8005464:	b083      	sub	sp, #12
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
 800546a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	431a      	orrs	r2, r3
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	615a      	str	r2, [r3, #20]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800549c:	2301      	movs	r3, #1
 800549e:	e000      	b.n	80054a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	370c      	adds	r7, #12
 80054a6:	46bd      	mov	sp, r7
 80054a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ac:	4770      	bx	lr

080054ae <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80054ae:	b480      	push	{r7}
 80054b0:	b087      	sub	sp, #28
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3330      	adds	r3, #48	@ 0x30
 80054be:	461a      	mov	r2, r3
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	0a1b      	lsrs	r3, r3, #8
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	f003 030c 	and.w	r3, r3, #12
 80054ca:	4413      	add	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	f003 031f 	and.w	r3, r3, #31
 80054d8:	211f      	movs	r1, #31
 80054da:	fa01 f303 	lsl.w	r3, r1, r3
 80054de:	43db      	mvns	r3, r3
 80054e0:	401a      	ands	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	0e9b      	lsrs	r3, r3, #26
 80054e6:	f003 011f 	and.w	r1, r3, #31
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	f003 031f 	and.w	r3, r3, #31
 80054f0:	fa01 f303 	lsl.w	r3, r1, r3
 80054f4:	431a      	orrs	r2, r3
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80054fa:	bf00      	nop
 80054fc:	371c      	adds	r7, #28
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr

08005506 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800551a:	2301      	movs	r3, #1
 800551c:	e000      	b.n	8005520 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3314      	adds	r3, #20
 800553c:	461a      	mov	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	0e5b      	lsrs	r3, r3, #25
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	4413      	add	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	0d1b      	lsrs	r3, r3, #20
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	2107      	movs	r1, #7
 800555a:	fa01 f303 	lsl.w	r3, r1, r3
 800555e:	43db      	mvns	r3, r3
 8005560:	401a      	ands	r2, r3
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	0d1b      	lsrs	r3, r3, #20
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	431a      	orrs	r2, r3
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005576:	bf00      	nop
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800559c:	43db      	mvns	r3, r3
 800559e:	401a      	ands	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f003 0318 	and.w	r3, r3, #24
 80055a6:	4908      	ldr	r1, [pc, #32]	@ (80055c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80055a8:	40d9      	lsrs	r1, r3
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	400b      	ands	r3, r1
 80055ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055b2:	431a      	orrs	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80055ba:	bf00      	nop
 80055bc:	3714      	adds	r7, #20
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	0007ffff 	.word	0x0007ffff

080055cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f003 031f 	and.w	r3, r3, #31
}
 80055dc:	4618      	mov	r0, r3
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	370c      	adds	r7, #12
 80055fc:	46bd      	mov	sp, r7
 80055fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005602:	4770      	bx	lr

08005604 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005614:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	6093      	str	r3, [r2, #8]
}
 800561c:	bf00      	nop
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563c:	d101      	bne.n	8005642 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800563e:	2301      	movs	r3, #1
 8005640:	e000      	b.n	8005644 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005642:	2300      	movs	r3, #0
}
 8005644:	4618      	mov	r0, r3
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005660:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005664:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800568c:	d101      	bne.n	8005692 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800568e:	2301      	movs	r3, #1
 8005690:	e000      	b.n	8005694 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	689b      	ldr	r3, [r3, #8]
 80056ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056b0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80056b4:	f043 0201 	orr.w	r2, r3, #1
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d101      	bne.n	80056e0 <LL_ADC_IsEnabled+0x18>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <LL_ADC_IsEnabled+0x1a>
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	370c      	adds	r7, #12
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr

080056ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80056ee:	b480      	push	{r7}
 80056f0:	b083      	sub	sp, #12
 80056f2:	af00      	add	r7, sp, #0
 80056f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005702:	f043 0204 	orr.w	r2, r3, #4
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800570a:	bf00      	nop
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b04      	cmp	r3, #4
 8005728:	d101      	bne.n	800572e <LL_ADC_REG_IsConversionOngoing+0x18>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b08      	cmp	r3, #8
 800574e:	d101      	bne.n	8005754 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005750:	2301      	movs	r3, #1
 8005752:	e000      	b.n	8005756 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	370c      	adds	r7, #12
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
	...

08005764 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b089      	sub	sp, #36	@ 0x24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d101      	bne.n	800577e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e19b      	b.n	8005ab6 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff f983 	bl	8004a98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7ff ff3f 	bl	8005628 <LL_ADC_IsDeepPowerDownEnabled>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d004      	beq.n	80057ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7ff ff25 	bl	8005604 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff ff5a 	bl	8005678 <LL_ADC_IsInternalRegulatorEnabled>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d115      	bne.n	80057f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff3e 	bl	8005650 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057d4:	4b97      	ldr	r3, [pc, #604]	@ (8005a34 <HAL_ADC_Init+0x2d0>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	099b      	lsrs	r3, r3, #6
 80057da:	4a97      	ldr	r2, [pc, #604]	@ (8005a38 <HAL_ADC_Init+0x2d4>)
 80057dc:	fba2 2303 	umull	r2, r3, r2, r3
 80057e0:	099b      	lsrs	r3, r3, #6
 80057e2:	3301      	adds	r3, #1
 80057e4:	005b      	lsls	r3, r3, #1
 80057e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80057e8:	e002      	b.n	80057f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f9      	bne.n	80057ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7ff ff3c 	bl	8005678 <LL_ADC_IsInternalRegulatorEnabled>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10d      	bne.n	8005822 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580a:	f043 0210 	orr.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff75 	bl	8005716 <LL_ADC_REG_IsConversionOngoing>
 800582c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	f040 8134 	bne.w	8005aa4 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	f040 8130 	bne.w	8005aa4 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005848:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800584c:	f043 0202 	orr.w	r2, r3, #2
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4618      	mov	r0, r3
 800585a:	f7ff ff35 	bl	80056c8 <LL_ADC_IsEnabled>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d137      	bne.n	80058d4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800586c:	d004      	beq.n	8005878 <HAL_ADC_Init+0x114>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a72      	ldr	r2, [pc, #456]	@ (8005a3c <HAL_ADC_Init+0x2d8>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d10f      	bne.n	8005898 <HAL_ADC_Init+0x134>
 8005878:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800587c:	f7ff ff24 	bl	80056c8 <LL_ADC_IsEnabled>
 8005880:	4604      	mov	r4, r0
 8005882:	486e      	ldr	r0, [pc, #440]	@ (8005a3c <HAL_ADC_Init+0x2d8>)
 8005884:	f7ff ff20 	bl	80056c8 <LL_ADC_IsEnabled>
 8005888:	4603      	mov	r3, r0
 800588a:	4323      	orrs	r3, r4
 800588c:	2b00      	cmp	r3, #0
 800588e:	bf0c      	ite	eq
 8005890:	2301      	moveq	r3, #1
 8005892:	2300      	movne	r3, #0
 8005894:	b2db      	uxtb	r3, r3
 8005896:	e008      	b.n	80058aa <HAL_ADC_Init+0x146>
 8005898:	4869      	ldr	r0, [pc, #420]	@ (8005a40 <HAL_ADC_Init+0x2dc>)
 800589a:	f7ff ff15 	bl	80056c8 <LL_ADC_IsEnabled>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	bf0c      	ite	eq
 80058a4:	2301      	moveq	r3, #1
 80058a6:	2300      	movne	r3, #0
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80058b6:	d004      	beq.n	80058c2 <HAL_ADC_Init+0x15e>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a5f      	ldr	r2, [pc, #380]	@ (8005a3c <HAL_ADC_Init+0x2d8>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d101      	bne.n	80058c6 <HAL_ADC_Init+0x162>
 80058c2:	4a60      	ldr	r2, [pc, #384]	@ (8005a44 <HAL_ADC_Init+0x2e0>)
 80058c4:	e000      	b.n	80058c8 <HAL_ADC_Init+0x164>
 80058c6:	4a60      	ldr	r2, [pc, #384]	@ (8005a48 <HAL_ADC_Init+0x2e4>)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f7ff fd08 	bl	80052e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	7f5b      	ldrb	r3, [r3, #29]
 80058d8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058de:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80058e4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80058ea:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058f2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80058f4:	4313      	orrs	r3, r2
 80058f6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d106      	bne.n	8005910 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005906:	3b01      	subs	r3, #1
 8005908:	045b      	lsls	r3, r3, #17
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4313      	orrs	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005924:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68da      	ldr	r2, [r3, #12]
 8005932:	4b46      	ldr	r3, [pc, #280]	@ (8005a4c <HAL_ADC_Init+0x2e8>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6812      	ldr	r2, [r2, #0]
 800593a:	69b9      	ldr	r1, [r7, #24]
 800593c:	430b      	orrs	r3, r1
 800593e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff feee 	bl	800573c <LL_ADC_INJ_IsConversionOngoing>
 8005960:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d17b      	bne.n	8005a60 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d178      	bne.n	8005a60 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005972:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800597a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800597c:	4313      	orrs	r3, r2
 800597e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800598a:	f023 0302 	bic.w	r3, r3, #2
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	69b9      	ldr	r1, [r7, #24]
 8005994:	430b      	orrs	r3, r1
 8005996:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d017      	beq.n	80059d0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80059ae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80059bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	6911      	ldr	r1, [r2, #16]
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80059ce:	e013      	b.n	80059f8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691a      	ldr	r2, [r3, #16]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80059de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	6812      	ldr	r2, [r2, #0]
 80059ec:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80059f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80059f4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d126      	bne.n	8005a50 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a0c:	f023 0304 	bic.w	r3, r3, #4
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005a18:	4311      	orrs	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005a1e:	4311      	orrs	r1, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005a24:	430a      	orrs	r2, r1
 8005a26:	431a      	orrs	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	611a      	str	r2, [r3, #16]
 8005a32:	e015      	b.n	8005a60 <HAL_ADC_Init+0x2fc>
 8005a34:	200000bc 	.word	0x200000bc
 8005a38:	053e2d63 	.word	0x053e2d63
 8005a3c:	50000100 	.word	0x50000100
 8005a40:	50000400 	.word	0x50000400
 8005a44:	50000300 	.word	0x50000300
 8005a48:	50000700 	.word	0x50000700
 8005a4c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d10c      	bne.n	8005a82 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	f023 010f 	bic.w	r1, r3, #15
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a1b      	ldr	r3, [r3, #32]
 8005a76:	1e5a      	subs	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	430a      	orrs	r2, r1
 8005a7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a80:	e007      	b.n	8005a92 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f022 020f 	bic.w	r2, r2, #15
 8005a90:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	f043 0201 	orr.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005aa2:	e007      	b.n	8005ab4 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aa8:	f043 0210 	orr.w	r2, r3, #16
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ab4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3724      	adds	r7, #36	@ 0x24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop

08005ac0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005ad4:	d004      	beq.n	8005ae0 <HAL_ADC_Start_DMA+0x20>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a57      	ldr	r2, [pc, #348]	@ (8005c38 <HAL_ADC_Start_DMA+0x178>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d101      	bne.n	8005ae4 <HAL_ADC_Start_DMA+0x24>
 8005ae0:	4b56      	ldr	r3, [pc, #344]	@ (8005c3c <HAL_ADC_Start_DMA+0x17c>)
 8005ae2:	e000      	b.n	8005ae6 <HAL_ADC_Start_DMA+0x26>
 8005ae4:	4b56      	ldr	r3, [pc, #344]	@ (8005c40 <HAL_ADC_Start_DMA+0x180>)
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fd70 	bl	80055cc <LL_ADC_GetMultimode>
 8005aec:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fe0f 	bl	8005716 <LL_ADC_REG_IsConversionOngoing>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f040 8094 	bne.w	8005c28 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d101      	bne.n	8005b0e <HAL_ADC_Start_DMA+0x4e>
 8005b0a:	2302      	movs	r3, #2
 8005b0c:	e08f      	b.n	8005c2e <HAL_ADC_Start_DMA+0x16e>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4a4a      	ldr	r2, [pc, #296]	@ (8005c44 <HAL_ADC_Start_DMA+0x184>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d008      	beq.n	8005b32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	2b05      	cmp	r3, #5
 8005b2a:	d002      	beq.n	8005b32 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b09      	cmp	r3, #9
 8005b30:	d173      	bne.n	8005c1a <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f000 ff1c 	bl	8006970 <ADC_Enable>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d166      	bne.n	8005c10 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b46:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a37      	ldr	r2, [pc, #220]	@ (8005c38 <HAL_ADC_Start_DMA+0x178>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d002      	beq.n	8005b66 <HAL_ADC_Start_DMA+0xa6>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	e001      	b.n	8005b6a <HAL_ADC_Start_DMA+0xaa>
 8005b66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d002      	beq.n	8005b78 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d105      	bne.n	8005b84 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b7c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b88:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b94:	f023 0206 	bic.w	r2, r3, #6
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	661a      	str	r2, [r3, #96]	@ 0x60
 8005b9c:	e002      	b.n	8005ba4 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ba8:	4a27      	ldr	r2, [pc, #156]	@ (8005c48 <HAL_ADC_Start_DMA+0x188>)
 8005baa:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb0:	4a26      	ldr	r2, [pc, #152]	@ (8005c4c <HAL_ADC_Start_DMA+0x18c>)
 8005bb2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bb8:	4a25      	ldr	r2, [pc, #148]	@ (8005c50 <HAL_ADC_Start_DMA+0x190>)
 8005bba:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	221c      	movs	r2, #28
 8005bc2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0210 	orr.w	r2, r2, #16
 8005bda:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0201 	orr.w	r2, r2, #1
 8005bea:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3340      	adds	r3, #64	@ 0x40
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f001 fbfe 	bl	80073fc <HAL_DMA_Start_IT>
 8005c00:	4603      	mov	r3, r0
 8005c02:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7ff fd70 	bl	80056ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005c0e:	e00d      	b.n	8005c2c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005c18:	e008      	b.n	8005c2c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005c26:	e001      	b.n	8005c2c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005c28:	2302      	movs	r3, #2
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3718      	adds	r7, #24
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	50000100 	.word	0x50000100
 8005c3c:	50000300 	.word	0x50000300
 8005c40:	50000700 	.word	0x50000700
 8005c44:	50000400 	.word	0x50000400
 8005c48:	08006a9d 	.word	0x08006a9d
 8005c4c:	08006b75 	.word	0x08006b75
 8005c50:	08006b91 	.word	0x08006b91

08005c54 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08a      	sub	sp, #40	@ 0x28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c78:	d004      	beq.n	8005c84 <HAL_ADC_IRQHandler+0x30>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a87      	ldr	r2, [pc, #540]	@ (8005e9c <HAL_ADC_IRQHandler+0x248>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d101      	bne.n	8005c88 <HAL_ADC_IRQHandler+0x34>
 8005c84:	4b86      	ldr	r3, [pc, #536]	@ (8005ea0 <HAL_ADC_IRQHandler+0x24c>)
 8005c86:	e000      	b.n	8005c8a <HAL_ADC_IRQHandler+0x36>
 8005c88:	4b86      	ldr	r3, [pc, #536]	@ (8005ea4 <HAL_ADC_IRQHandler+0x250>)
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7ff fc9e 	bl	80055cc <LL_ADC_GetMultimode>
 8005c90:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d017      	beq.n	8005ccc <HAL_ADC_IRQHandler+0x78>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	f003 0302 	and.w	r3, r3, #2
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d012      	beq.n	8005ccc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005caa:	f003 0310 	and.w	r3, r3, #16
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d105      	bne.n	8005cbe <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cb6:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 ffce 	bl	8006c60 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <HAL_ADC_IRQHandler+0x8c>
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8085 	beq.w	8005df6 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	f003 0308 	and.w	r3, r3, #8
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d07f      	beq.n	8005df6 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005cfa:	f003 0310 	and.w	r3, r3, #16
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d105      	bne.n	8005d0e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d06:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4618      	mov	r0, r3
 8005d14:	f7ff fbb8 	bl	8005488 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d064      	beq.n	8005de8 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a5e      	ldr	r2, [pc, #376]	@ (8005e9c <HAL_ADC_IRQHandler+0x248>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d002      	beq.n	8005d2e <HAL_ADC_IRQHandler+0xda>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	e001      	b.n	8005d32 <HAL_ADC_IRQHandler+0xde>
 8005d2e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d008      	beq.n	8005d4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d005      	beq.n	8005d4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d002      	beq.n	8005d4c <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	2b09      	cmp	r3, #9
 8005d4a:	d104      	bne.n	8005d56 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	e00d      	b.n	8005d72 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a50      	ldr	r2, [pc, #320]	@ (8005e9c <HAL_ADC_IRQHandler+0x248>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d002      	beq.n	8005d66 <HAL_ADC_IRQHandler+0x112>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	e001      	b.n	8005d6a <HAL_ADC_IRQHandler+0x116>
 8005d66:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005d6a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d135      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0308 	and.w	r3, r3, #8
 8005d86:	2b08      	cmp	r3, #8
 8005d88:	d12e      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fcc1 	bl	8005716 <LL_ADC_REG_IsConversionOngoing>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11a      	bne.n	8005dd0 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	685a      	ldr	r2, [r3, #4]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 020c 	bic.w	r2, r2, #12
 8005da8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d112      	bne.n	8005de8 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dc6:	f043 0201 	orr.w	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005dce:	e00b      	b.n	8005de8 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd4:	f043 0210 	orr.w	r2, r3, #16
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005de0:	f043 0201 	orr.w	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f96d 	bl	80060c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	220c      	movs	r2, #12
 8005df4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	f003 0320 	and.w	r3, r3, #32
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d004      	beq.n	8005e0a <HAL_ADC_IRQHandler+0x1b6>
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d10b      	bne.n	8005e22 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 80a1 	beq.w	8005f58 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 809b 	beq.w	8005f58 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e26:	f003 0310 	and.w	r3, r3, #16
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d105      	bne.n	8005e3a <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e32:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7ff fb61 	bl	8005506 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8005e44:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7ff fb1c 	bl	8005488 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005e50:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a11      	ldr	r2, [pc, #68]	@ (8005e9c <HAL_ADC_IRQHandler+0x248>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d002      	beq.n	8005e62 <HAL_ADC_IRQHandler+0x20e>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	e001      	b.n	8005e66 <HAL_ADC_IRQHandler+0x212>
 8005e62:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6812      	ldr	r2, [r2, #0]
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d008      	beq.n	8005e80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2b06      	cmp	r3, #6
 8005e78:	d002      	beq.n	8005e80 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	2b07      	cmp	r3, #7
 8005e7e:	d104      	bne.n	8005e8a <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	623b      	str	r3, [r7, #32]
 8005e88:	e014      	b.n	8005eb4 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a03      	ldr	r2, [pc, #12]	@ (8005e9c <HAL_ADC_IRQHandler+0x248>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d009      	beq.n	8005ea8 <HAL_ADC_IRQHandler+0x254>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	e008      	b.n	8005eac <HAL_ADC_IRQHandler+0x258>
 8005e9a:	bf00      	nop
 8005e9c:	50000100 	.word	0x50000100
 8005ea0:	50000300 	.word	0x50000300
 8005ea4:	50000700 	.word	0x50000700
 8005ea8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005eac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	68db      	ldr	r3, [r3, #12]
 8005eb2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d047      	beq.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d007      	beq.n	8005ed4 <HAL_ADC_IRQHandler+0x280>
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d03f      	beq.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d13a      	bne.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ede:	2b40      	cmp	r3, #64	@ 0x40
 8005ee0:	d133      	bne.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d12e      	bne.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7ff fc23 	bl	800573c <LL_ADC_INJ_IsConversionOngoing>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11a      	bne.n	8005f32 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f0a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f10:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d112      	bne.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f28:	f043 0201 	orr.w	r2, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005f30:	e00b      	b.n	8005f4a <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f36:	f043 0210 	orr.w	r2, r3, #16
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f42:	f043 0201 	orr.w	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fe60 	bl	8006c10 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2260      	movs	r2, #96	@ 0x60
 8005f56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d011      	beq.n	8005f86 <HAL_ADC_IRQHandler+0x332>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00c      	beq.n	8005f86 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f70:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f8b9 	bl	80060f0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2280      	movs	r2, #128	@ 0x80
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d012      	beq.n	8005fb6 <HAL_ADC_IRQHandler+0x362>
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00d      	beq.n	8005fb6 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f9e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 fe46 	bl	8006c38 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005fb4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d012      	beq.n	8005fe6 <HAL_ADC_IRQHandler+0x392>
 8005fc0:	69bb      	ldr	r3, [r7, #24]
 8005fc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00d      	beq.n	8005fe6 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005fce:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fe38 	bl	8006c4c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fe4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d043      	beq.n	8006078 <HAL_ADC_IRQHandler+0x424>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0310 	and.w	r3, r3, #16
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d03e      	beq.n	8006078 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d102      	bne.n	8006008 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8006002:	2301      	movs	r3, #1
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
 8006006:	e021      	b.n	800604c <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d015      	beq.n	800603a <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006016:	d004      	beq.n	8006022 <HAL_ADC_IRQHandler+0x3ce>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a27      	ldr	r2, [pc, #156]	@ (80060bc <HAL_ADC_IRQHandler+0x468>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d101      	bne.n	8006026 <HAL_ADC_IRQHandler+0x3d2>
 8006022:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <HAL_ADC_IRQHandler+0x46c>)
 8006024:	e000      	b.n	8006028 <HAL_ADC_IRQHandler+0x3d4>
 8006026:	4b27      	ldr	r3, [pc, #156]	@ (80060c4 <HAL_ADC_IRQHandler+0x470>)
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff fadd 	bl	80055e8 <LL_ADC_GetMultiDMATransfer>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8006034:	2301      	movs	r3, #1
 8006036:	627b      	str	r3, [r7, #36]	@ 0x24
 8006038:	e008      	b.n	800604c <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8006048:	2301      	movs	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	2b01      	cmp	r3, #1
 8006050:	d10e      	bne.n	8006070 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006056:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006062:	f043 0202 	orr.w	r2, r3, #2
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 f84a 	bl	8006104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2210      	movs	r2, #16
 8006076:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <HAL_ADC_IRQHandler+0x460>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006088:	2b00      	cmp	r3, #0
 800608a:	d013      	beq.n	80060b4 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006090:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800609c:	f043 0208 	orr.w	r2, r3, #8
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80060ac:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fdb8 	bl	8006c24 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80060b4:	bf00      	nop
 80060b6:	3728      	adds	r7, #40	@ 0x28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	bd80      	pop	{r7, pc}
 80060bc:	50000100 	.word	0x50000100
 80060c0:	50000300 	.word	0x50000300
 80060c4:	50000700 	.word	0x50000700

080060c8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80060d0:	bf00      	nop
 80060d2:	370c      	adds	r7, #12
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b0b6      	sub	sp, #216	@ 0xd8
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006128:	2300      	movs	r3, #0
 800612a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006132:	2b01      	cmp	r3, #1
 8006134:	d102      	bne.n	800613c <HAL_ADC_ConfigChannel+0x24>
 8006136:	2302      	movs	r3, #2
 8006138:	f000 bc04 	b.w	8006944 <HAL_ADC_ConfigChannel+0x82c>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fae4 	bl	8005716 <LL_ADC_REG_IsConversionOngoing>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	f040 83e8 	bne.w	8006926 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6818      	ldr	r0, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	6859      	ldr	r1, [r3, #4]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7ff f9a3 	bl	80054ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4618      	mov	r0, r3
 800616e:	f7ff fad2 	bl	8005716 <LL_ADC_REG_IsConversionOngoing>
 8006172:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4618      	mov	r0, r3
 800617c:	f7ff fade 	bl	800573c <LL_ADC_INJ_IsConversionOngoing>
 8006180:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006184:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006188:	2b00      	cmp	r3, #0
 800618a:	f040 81d9 	bne.w	8006540 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800618e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006192:	2b00      	cmp	r3, #0
 8006194:	f040 81d4 	bne.w	8006540 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061a0:	d10f      	bne.n	80061c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2200      	movs	r2, #0
 80061ac:	4619      	mov	r1, r3
 80061ae:	f7ff f9bd 	bl	800552c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7ff f951 	bl	8005462 <LL_ADC_SetSamplingTimeCommonConfig>
 80061c0:	e00e      	b.n	80061e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6819      	ldr	r1, [r3, #0]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f7ff f9ac 	bl	800552c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2100      	movs	r1, #0
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff f941 	bl	8005462 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	695a      	ldr	r2, [r3, #20]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	08db      	lsrs	r3, r3, #3
 80061ec:	f003 0303 	and.w	r3, r3, #3
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	fa02 f303 	lsl.w	r3, r2, r3
 80061f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d022      	beq.n	8006248 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6919      	ldr	r1, [r3, #16]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006212:	f7ff f89b 	bl	800534c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	6919      	ldr	r1, [r3, #16]
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	461a      	mov	r2, r3
 8006224:	f7ff f8e7 	bl	80053f6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006234:	2b01      	cmp	r3, #1
 8006236:	d102      	bne.n	800623e <HAL_ADC_ConfigChannel+0x126>
 8006238:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800623c:	e000      	b.n	8006240 <HAL_ADC_ConfigChannel+0x128>
 800623e:	2300      	movs	r3, #0
 8006240:	461a      	mov	r2, r3
 8006242:	f7ff f8f3 	bl	800542c <LL_ADC_SetOffsetSaturation>
 8006246:	e17b      	b.n	8006540 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff f8a0 	bl	8005394 <LL_ADC_GetOffsetChannel>
 8006254:	4603      	mov	r3, r0
 8006256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10a      	bne.n	8006274 <HAL_ADC_ConfigChannel+0x15c>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2100      	movs	r1, #0
 8006264:	4618      	mov	r0, r3
 8006266:	f7ff f895 	bl	8005394 <LL_ADC_GetOffsetChannel>
 800626a:	4603      	mov	r3, r0
 800626c:	0e9b      	lsrs	r3, r3, #26
 800626e:	f003 021f 	and.w	r2, r3, #31
 8006272:	e01e      	b.n	80062b2 <HAL_ADC_ConfigChannel+0x19a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2100      	movs	r1, #0
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f88a 	bl	8005394 <LL_ADC_GetOffsetChannel>
 8006280:	4603      	mov	r3, r0
 8006282:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006286:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006292:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006296:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800629a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80062a2:	2320      	movs	r3, #32
 80062a4:	e004      	b.n	80062b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80062a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80062aa:	fab3 f383 	clz	r3, r3
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d105      	bne.n	80062ca <HAL_ADC_ConfigChannel+0x1b2>
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	0e9b      	lsrs	r3, r3, #26
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	e018      	b.n	80062fc <HAL_ADC_ConfigChannel+0x1e4>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80062d6:	fa93 f3a3 	rbit	r3, r3
 80062da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80062de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80062e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80062e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80062ee:	2320      	movs	r3, #32
 80062f0:	e004      	b.n	80062fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80062f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80062f6:	fab3 f383 	clz	r3, r3
 80062fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d106      	bne.n	800630e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2200      	movs	r2, #0
 8006306:	2100      	movs	r1, #0
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff f859 	bl	80053c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2101      	movs	r1, #1
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff f83d 	bl	8005394 <LL_ADC_GetOffsetChannel>
 800631a:	4603      	mov	r3, r0
 800631c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <HAL_ADC_ConfigChannel+0x222>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	2101      	movs	r1, #1
 800632a:	4618      	mov	r0, r3
 800632c:	f7ff f832 	bl	8005394 <LL_ADC_GetOffsetChannel>
 8006330:	4603      	mov	r3, r0
 8006332:	0e9b      	lsrs	r3, r3, #26
 8006334:	f003 021f 	and.w	r2, r3, #31
 8006338:	e01e      	b.n	8006378 <HAL_ADC_ConfigChannel+0x260>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2101      	movs	r1, #1
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff f827 	bl	8005394 <LL_ADC_GetOffsetChannel>
 8006346:	4603      	mov	r3, r0
 8006348:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800634c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006350:	fa93 f3a3 	rbit	r3, r3
 8006354:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006358:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800635c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006360:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d101      	bne.n	800636c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006368:	2320      	movs	r3, #32
 800636a:	e004      	b.n	8006376 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800636c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006370:	fab3 f383 	clz	r3, r3
 8006374:	b2db      	uxtb	r3, r3
 8006376:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <HAL_ADC_ConfigChannel+0x278>
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	0e9b      	lsrs	r3, r3, #26
 800638a:	f003 031f 	and.w	r3, r3, #31
 800638e:	e018      	b.n	80063c2 <HAL_ADC_ConfigChannel+0x2aa>
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006398:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800639c:	fa93 f3a3 	rbit	r3, r3
 80063a0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80063a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80063a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80063ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d101      	bne.n	80063b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80063b4:	2320      	movs	r3, #32
 80063b6:	e004      	b.n	80063c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80063b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063bc:	fab3 f383 	clz	r3, r3
 80063c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d106      	bne.n	80063d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2200      	movs	r2, #0
 80063cc:	2101      	movs	r1, #1
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fff6 	bl	80053c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2102      	movs	r1, #2
 80063da:	4618      	mov	r0, r3
 80063dc:	f7fe ffda 	bl	8005394 <LL_ADC_GetOffsetChannel>
 80063e0:	4603      	mov	r3, r0
 80063e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x2e8>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2102      	movs	r1, #2
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe ffcf 	bl	8005394 <LL_ADC_GetOffsetChannel>
 80063f6:	4603      	mov	r3, r0
 80063f8:	0e9b      	lsrs	r3, r3, #26
 80063fa:	f003 021f 	and.w	r2, r3, #31
 80063fe:	e01e      	b.n	800643e <HAL_ADC_ConfigChannel+0x326>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f7fe ffc4 	bl	8005394 <LL_ADC_GetOffsetChannel>
 800640c:	4603      	mov	r3, r0
 800640e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006412:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006416:	fa93 f3a3 	rbit	r3, r3
 800641a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800641e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006422:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8006426:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800642a:	2b00      	cmp	r3, #0
 800642c:	d101      	bne.n	8006432 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800642e:	2320      	movs	r3, #32
 8006430:	e004      	b.n	800643c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8006432:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006436:	fab3 f383 	clz	r3, r3
 800643a:	b2db      	uxtb	r3, r3
 800643c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006446:	2b00      	cmp	r3, #0
 8006448:	d105      	bne.n	8006456 <HAL_ADC_ConfigChannel+0x33e>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	0e9b      	lsrs	r3, r3, #26
 8006450:	f003 031f 	and.w	r3, r3, #31
 8006454:	e016      	b.n	8006484 <HAL_ADC_ConfigChannel+0x36c>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800645e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006462:	fa93 f3a3 	rbit	r3, r3
 8006466:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006468:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800646a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800646e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006476:	2320      	movs	r3, #32
 8006478:	e004      	b.n	8006484 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800647a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800647e:	fab3 f383 	clz	r3, r3
 8006482:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006484:	429a      	cmp	r2, r3
 8006486:	d106      	bne.n	8006496 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2200      	movs	r2, #0
 800648e:	2102      	movs	r1, #2
 8006490:	4618      	mov	r0, r3
 8006492:	f7fe ff95 	bl	80053c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2103      	movs	r1, #3
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe ff79 	bl	8005394 <LL_ADC_GetOffsetChannel>
 80064a2:	4603      	mov	r3, r0
 80064a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10a      	bne.n	80064c2 <HAL_ADC_ConfigChannel+0x3aa>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2103      	movs	r1, #3
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe ff6e 	bl	8005394 <LL_ADC_GetOffsetChannel>
 80064b8:	4603      	mov	r3, r0
 80064ba:	0e9b      	lsrs	r3, r3, #26
 80064bc:	f003 021f 	and.w	r2, r3, #31
 80064c0:	e017      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x3da>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2103      	movs	r1, #3
 80064c8:	4618      	mov	r0, r3
 80064ca:	f7fe ff63 	bl	8005394 <LL_ADC_GetOffsetChannel>
 80064ce:	4603      	mov	r3, r0
 80064d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80064d4:	fa93 f3a3 	rbit	r3, r3
 80064d8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80064da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80064dc:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80064de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d101      	bne.n	80064e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80064e4:	2320      	movs	r3, #32
 80064e6:	e003      	b.n	80064f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80064e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80064ea:	fab3 f383 	clz	r3, r3
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d105      	bne.n	800650a <HAL_ADC_ConfigChannel+0x3f2>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	0e9b      	lsrs	r3, r3, #26
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	e011      	b.n	800652e <HAL_ADC_ConfigChannel+0x416>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006512:	fa93 f3a3 	rbit	r3, r3
 8006516:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006518:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800651a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 800651c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800651e:	2b00      	cmp	r3, #0
 8006520:	d101      	bne.n	8006526 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006522:	2320      	movs	r3, #32
 8006524:	e003      	b.n	800652e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006526:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006528:	fab3 f383 	clz	r3, r3
 800652c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800652e:	429a      	cmp	r2, r3
 8006530:	d106      	bne.n	8006540 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2200      	movs	r2, #0
 8006538:	2103      	movs	r1, #3
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe ff40 	bl	80053c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff f8bf 	bl	80056c8 <LL_ADC_IsEnabled>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	f040 813d 	bne.w	80067cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6818      	ldr	r0, [r3, #0]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	68db      	ldr	r3, [r3, #12]
 800655e:	461a      	mov	r2, r3
 8006560:	f7ff f810 	bl	8005584 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	4aa2      	ldr	r2, [pc, #648]	@ (80067f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	f040 812e 	bne.w	80067cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10b      	bne.n	8006598 <HAL_ADC_ConfigChannel+0x480>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	0e9b      	lsrs	r3, r3, #26
 8006586:	3301      	adds	r3, #1
 8006588:	f003 031f 	and.w	r3, r3, #31
 800658c:	2b09      	cmp	r3, #9
 800658e:	bf94      	ite	ls
 8006590:	2301      	movls	r3, #1
 8006592:	2300      	movhi	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	e019      	b.n	80065cc <HAL_ADC_ConfigChannel+0x4b4>
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a0:	fa93 f3a3 	rbit	r3, r3
 80065a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80065a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065a8:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80065aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80065b0:	2320      	movs	r3, #32
 80065b2:	e003      	b.n	80065bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80065b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065b6:	fab3 f383 	clz	r3, r3
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	3301      	adds	r3, #1
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2b09      	cmp	r3, #9
 80065c4:	bf94      	ite	ls
 80065c6:	2301      	movls	r3, #1
 80065c8:	2300      	movhi	r3, #0
 80065ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d079      	beq.n	80066c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d107      	bne.n	80065ec <HAL_ADC_ConfigChannel+0x4d4>
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	0e9b      	lsrs	r3, r3, #26
 80065e2:	3301      	adds	r3, #1
 80065e4:	069b      	lsls	r3, r3, #26
 80065e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80065ea:	e015      	b.n	8006618 <HAL_ADC_ConfigChannel+0x500>
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065f4:	fa93 f3a3 	rbit	r3, r3
 80065f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80065fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065fc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80065fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006600:	2b00      	cmp	r3, #0
 8006602:	d101      	bne.n	8006608 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006604:	2320      	movs	r3, #32
 8006606:	e003      	b.n	8006610 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006608:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800660a:	fab3 f383 	clz	r3, r3
 800660e:	b2db      	uxtb	r3, r3
 8006610:	3301      	adds	r3, #1
 8006612:	069b      	lsls	r3, r3, #26
 8006614:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <HAL_ADC_ConfigChannel+0x520>
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	0e9b      	lsrs	r3, r3, #26
 800662a:	3301      	adds	r3, #1
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	e017      	b.n	8006668 <HAL_ADC_ConfigChannel+0x550>
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	fa93 f3a3 	rbit	r3, r3
 8006644:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006648:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 800664a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800664c:	2b00      	cmp	r3, #0
 800664e:	d101      	bne.n	8006654 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006650:	2320      	movs	r3, #32
 8006652:	e003      	b.n	800665c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006654:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006656:	fab3 f383 	clz	r3, r3
 800665a:	b2db      	uxtb	r3, r3
 800665c:	3301      	adds	r3, #1
 800665e:	f003 031f 	and.w	r3, r3, #31
 8006662:	2101      	movs	r1, #1
 8006664:	fa01 f303 	lsl.w	r3, r1, r3
 8006668:	ea42 0103 	orr.w	r1, r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10a      	bne.n	800668e <HAL_ADC_ConfigChannel+0x576>
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	0e9b      	lsrs	r3, r3, #26
 800667e:	3301      	adds	r3, #1
 8006680:	f003 021f 	and.w	r2, r3, #31
 8006684:	4613      	mov	r3, r2
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4413      	add	r3, r2
 800668a:	051b      	lsls	r3, r3, #20
 800668c:	e018      	b.n	80066c0 <HAL_ADC_ConfigChannel+0x5a8>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	fa93 f3a3 	rbit	r3, r3
 800669a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800669c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80066a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80066a6:	2320      	movs	r3, #32
 80066a8:	e003      	b.n	80066b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80066aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ac:	fab3 f383 	clz	r3, r3
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	3301      	adds	r3, #1
 80066b4:	f003 021f 	and.w	r2, r3, #31
 80066b8:	4613      	mov	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4413      	add	r3, r2
 80066be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066c0:	430b      	orrs	r3, r1
 80066c2:	e07e      	b.n	80067c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d107      	bne.n	80066e0 <HAL_ADC_ConfigChannel+0x5c8>
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	0e9b      	lsrs	r3, r3, #26
 80066d6:	3301      	adds	r3, #1
 80066d8:	069b      	lsls	r3, r3, #26
 80066da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80066de:	e015      	b.n	800670c <HAL_ADC_ConfigChannel+0x5f4>
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	fa93 f3a3 	rbit	r3, r3
 80066ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80066ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f0:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d101      	bne.n	80066fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80066f8:	2320      	movs	r3, #32
 80066fa:	e003      	b.n	8006704 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80066fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066fe:	fab3 f383 	clz	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	3301      	adds	r3, #1
 8006706:	069b      	lsls	r3, r3, #26
 8006708:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006714:	2b00      	cmp	r3, #0
 8006716:	d109      	bne.n	800672c <HAL_ADC_ConfigChannel+0x614>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	0e9b      	lsrs	r3, r3, #26
 800671e:	3301      	adds	r3, #1
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2101      	movs	r1, #1
 8006726:	fa01 f303 	lsl.w	r3, r1, r3
 800672a:	e017      	b.n	800675c <HAL_ADC_ConfigChannel+0x644>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	fa93 f3a3 	rbit	r3, r3
 8006738:	61fb      	str	r3, [r7, #28]
  return result;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800673e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006744:	2320      	movs	r3, #32
 8006746:	e003      	b.n	8006750 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	fab3 f383 	clz	r3, r3
 800674e:	b2db      	uxtb	r3, r3
 8006750:	3301      	adds	r3, #1
 8006752:	f003 031f 	and.w	r3, r3, #31
 8006756:	2101      	movs	r1, #1
 8006758:	fa01 f303 	lsl.w	r3, r1, r3
 800675c:	ea42 0103 	orr.w	r1, r2, r3
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_ADC_ConfigChannel+0x670>
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	0e9b      	lsrs	r3, r3, #26
 8006772:	3301      	adds	r3, #1
 8006774:	f003 021f 	and.w	r2, r3, #31
 8006778:	4613      	mov	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	4413      	add	r3, r2
 800677e:	3b1e      	subs	r3, #30
 8006780:	051b      	lsls	r3, r3, #20
 8006782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006786:	e01b      	b.n	80067c0 <HAL_ADC_ConfigChannel+0x6a8>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	fa93 f3a3 	rbit	r3, r3
 8006794:	613b      	str	r3, [r7, #16]
  return result;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80067a0:	2320      	movs	r3, #32
 80067a2:	e003      	b.n	80067ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	fab3 f383 	clz	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	3301      	adds	r3, #1
 80067ae:	f003 021f 	and.w	r2, r3, #31
 80067b2:	4613      	mov	r3, r2
 80067b4:	005b      	lsls	r3, r3, #1
 80067b6:	4413      	add	r3, r2
 80067b8:	3b1e      	subs	r3, #30
 80067ba:	051b      	lsls	r3, r3, #20
 80067bc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067c6:	4619      	mov	r1, r3
 80067c8:	f7fe feb0 	bl	800552c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80af 	beq.w	8006938 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80067e2:	d004      	beq.n	80067ee <HAL_ADC_ConfigChannel+0x6d6>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a04      	ldr	r2, [pc, #16]	@ (80067fc <HAL_ADC_ConfigChannel+0x6e4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d10a      	bne.n	8006804 <HAL_ADC_ConfigChannel+0x6ec>
 80067ee:	4b04      	ldr	r3, [pc, #16]	@ (8006800 <HAL_ADC_ConfigChannel+0x6e8>)
 80067f0:	e009      	b.n	8006806 <HAL_ADC_ConfigChannel+0x6ee>
 80067f2:	bf00      	nop
 80067f4:	407f0000 	.word	0x407f0000
 80067f8:	80080000 	.word	0x80080000
 80067fc:	50000100 	.word	0x50000100
 8006800:	50000300 	.word	0x50000300
 8006804:	4b51      	ldr	r3, [pc, #324]	@ (800694c <HAL_ADC_ConfigChannel+0x834>)
 8006806:	4618      	mov	r0, r3
 8006808:	f7fe fd92 	bl	8005330 <LL_ADC_GetCommonPathInternalCh>
 800680c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a4e      	ldr	r2, [pc, #312]	@ (8006950 <HAL_ADC_ConfigChannel+0x838>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_ADC_ConfigChannel+0x70c>
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a4d      	ldr	r2, [pc, #308]	@ (8006954 <HAL_ADC_ConfigChannel+0x83c>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d134      	bne.n	800688e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006824:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006828:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d12e      	bne.n	800688e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006838:	d17e      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006842:	d004      	beq.n	800684e <HAL_ADC_ConfigChannel+0x736>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a43      	ldr	r2, [pc, #268]	@ (8006958 <HAL_ADC_ConfigChannel+0x840>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d101      	bne.n	8006852 <HAL_ADC_ConfigChannel+0x73a>
 800684e:	4a43      	ldr	r2, [pc, #268]	@ (800695c <HAL_ADC_ConfigChannel+0x844>)
 8006850:	e000      	b.n	8006854 <HAL_ADC_ConfigChannel+0x73c>
 8006852:	4a3e      	ldr	r2, [pc, #248]	@ (800694c <HAL_ADC_ConfigChannel+0x834>)
 8006854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006858:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800685c:	4619      	mov	r1, r3
 800685e:	4610      	mov	r0, r2
 8006860:	f7fe fd53 	bl	800530a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006864:	4b3e      	ldr	r3, [pc, #248]	@ (8006960 <HAL_ADC_ConfigChannel+0x848>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	099b      	lsrs	r3, r3, #6
 800686a:	4a3e      	ldr	r2, [pc, #248]	@ (8006964 <HAL_ADC_ConfigChannel+0x84c>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	099b      	lsrs	r3, r3, #6
 8006872:	1c5a      	adds	r2, r3, #1
 8006874:	4613      	mov	r3, r2
 8006876:	005b      	lsls	r3, r3, #1
 8006878:	4413      	add	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800687e:	e002      	b.n	8006886 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	3b01      	subs	r3, #1
 8006884:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1f9      	bne.n	8006880 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800688c:	e054      	b.n	8006938 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a35      	ldr	r2, [pc, #212]	@ (8006968 <HAL_ADC_ConfigChannel+0x850>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d120      	bne.n	80068da <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006898:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800689c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d11a      	bne.n	80068da <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068ac:	d144      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80068b6:	d004      	beq.n	80068c2 <HAL_ADC_ConfigChannel+0x7aa>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a26      	ldr	r2, [pc, #152]	@ (8006958 <HAL_ADC_ConfigChannel+0x840>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d101      	bne.n	80068c6 <HAL_ADC_ConfigChannel+0x7ae>
 80068c2:	4a26      	ldr	r2, [pc, #152]	@ (800695c <HAL_ADC_ConfigChannel+0x844>)
 80068c4:	e000      	b.n	80068c8 <HAL_ADC_ConfigChannel+0x7b0>
 80068c6:	4a21      	ldr	r2, [pc, #132]	@ (800694c <HAL_ADC_ConfigChannel+0x834>)
 80068c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068d0:	4619      	mov	r1, r3
 80068d2:	4610      	mov	r0, r2
 80068d4:	f7fe fd19 	bl	800530a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80068d8:	e02e      	b.n	8006938 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a23      	ldr	r2, [pc, #140]	@ (800696c <HAL_ADC_ConfigChannel+0x854>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d129      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80068e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80068e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d123      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a18      	ldr	r2, [pc, #96]	@ (8006958 <HAL_ADC_ConfigChannel+0x840>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d01e      	beq.n	8006938 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006902:	d004      	beq.n	800690e <HAL_ADC_ConfigChannel+0x7f6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a13      	ldr	r2, [pc, #76]	@ (8006958 <HAL_ADC_ConfigChannel+0x840>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d101      	bne.n	8006912 <HAL_ADC_ConfigChannel+0x7fa>
 800690e:	4a13      	ldr	r2, [pc, #76]	@ (800695c <HAL_ADC_ConfigChannel+0x844>)
 8006910:	e000      	b.n	8006914 <HAL_ADC_ConfigChannel+0x7fc>
 8006912:	4a0e      	ldr	r2, [pc, #56]	@ (800694c <HAL_ADC_ConfigChannel+0x834>)
 8006914:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006918:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800691c:	4619      	mov	r1, r3
 800691e:	4610      	mov	r0, r2
 8006920:	f7fe fcf3 	bl	800530a <LL_ADC_SetCommonPathInternalCh>
 8006924:	e008      	b.n	8006938 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800692a:	f043 0220 	orr.w	r2, r3, #32
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006940:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006944:	4618      	mov	r0, r3
 8006946:	37d8      	adds	r7, #216	@ 0xd8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	50000700 	.word	0x50000700
 8006950:	c3210000 	.word	0xc3210000
 8006954:	90c00010 	.word	0x90c00010
 8006958:	50000100 	.word	0x50000100
 800695c:	50000300 	.word	0x50000300
 8006960:	200000bc 	.word	0x200000bc
 8006964:	053e2d63 	.word	0x053e2d63
 8006968:	c7520000 	.word	0xc7520000
 800696c:	cb840000 	.word	0xcb840000

08006970 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006978:	2300      	movs	r3, #0
 800697a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4618      	mov	r0, r3
 8006982:	f7fe fea1 	bl	80056c8 <LL_ADC_IsEnabled>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d176      	bne.n	8006a7a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	4b3c      	ldr	r3, [pc, #240]	@ (8006a84 <ADC_Enable+0x114>)
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00d      	beq.n	80069b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80069aa:	f043 0201 	orr.w	r2, r3, #1
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80069b2:	2301      	movs	r3, #1
 80069b4:	e062      	b.n	8006a7c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe fe70 	bl	80056a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069c8:	d004      	beq.n	80069d4 <ADC_Enable+0x64>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a2e      	ldr	r2, [pc, #184]	@ (8006a88 <ADC_Enable+0x118>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <ADC_Enable+0x68>
 80069d4:	4b2d      	ldr	r3, [pc, #180]	@ (8006a8c <ADC_Enable+0x11c>)
 80069d6:	e000      	b.n	80069da <ADC_Enable+0x6a>
 80069d8:	4b2d      	ldr	r3, [pc, #180]	@ (8006a90 <ADC_Enable+0x120>)
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fca8 	bl	8005330 <LL_ADC_GetCommonPathInternalCh>
 80069e0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80069e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d013      	beq.n	8006a12 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80069ea:	4b2a      	ldr	r3, [pc, #168]	@ (8006a94 <ADC_Enable+0x124>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	099b      	lsrs	r3, r3, #6
 80069f0:	4a29      	ldr	r2, [pc, #164]	@ (8006a98 <ADC_Enable+0x128>)
 80069f2:	fba2 2303 	umull	r2, r3, r2, r3
 80069f6:	099b      	lsrs	r3, r3, #6
 80069f8:	1c5a      	adds	r2, r3, #1
 80069fa:	4613      	mov	r3, r2
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	4413      	add	r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a04:	e002      	b.n	8006a0c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f9      	bne.n	8006a06 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006a12:	f7fe fc39 	bl	8005288 <HAL_GetTick>
 8006a16:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a18:	e028      	b.n	8006a6c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fe52 	bl	80056c8 <LL_ADC_IsEnabled>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d104      	bne.n	8006a34 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f7fe fe36 	bl	80056a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006a34:	f7fe fc28 	bl	8005288 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d914      	bls.n	8006a6c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d00d      	beq.n	8006a6c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a54:	f043 0210 	orr.w	r2, r3, #16
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a60:	f043 0201 	orr.w	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e007      	b.n	8006a7c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0301 	and.w	r3, r3, #1
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d1cf      	bne.n	8006a1a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	8000003f 	.word	0x8000003f
 8006a88:	50000100 	.word	0x50000100
 8006a8c:	50000300 	.word	0x50000300
 8006a90:	50000700 	.word	0x50000700
 8006a94:	200000bc 	.word	0x200000bc
 8006a98:	053e2d63 	.word	0x053e2d63

08006a9c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aae:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d14b      	bne.n	8006b4e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006aba:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f003 0308 	and.w	r3, r3, #8
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d021      	beq.n	8006b14 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fe fcd7 	bl	8005488 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d032      	beq.n	8006b46 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d12b      	bne.n	8006b46 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006af2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006afe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d11f      	bne.n	8006b46 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0a:	f043 0201 	orr.w	r2, r3, #1
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006b12:	e018      	b.n	8006b46 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	f003 0302 	and.w	r3, r3, #2
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d111      	bne.n	8006b46 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b26:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d105      	bne.n	8006b46 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b3e:	f043 0201 	orr.w	r2, r3, #1
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f7ff fabe 	bl	80060c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006b4c:	e00e      	b.n	8006b6c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b52:	f003 0310 	and.w	r3, r3, #16
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	f7ff fad2 	bl	8006104 <HAL_ADC_ErrorCallback>
}
 8006b60:	e004      	b.n	8006b6c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	4798      	blx	r3
}
 8006b6c:	bf00      	nop
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b80:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f7ff faaa 	bl	80060dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bae:	f043 0204 	orr.w	r2, r3, #4
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f7ff faa4 	bl	8006104 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006bbc:	bf00      	nop
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <LL_ADC_IsEnabled>:
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f003 0301 	and.w	r3, r3, #1
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <LL_ADC_IsEnabled+0x18>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <LL_ADC_IsEnabled+0x1a>
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <LL_ADC_REG_IsConversionOngoing>:
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d101      	bne.n	8006c02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e000      	b.n	8006c04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b083      	sub	sp, #12
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006c54:	bf00      	nop
 8006c56:	370c      	adds	r7, #12
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006c74:	b590      	push	{r4, r7, lr}
 8006c76:	b0a1      	sub	sp, #132	@ 0x84
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d101      	bne.n	8006c92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006c8e:	2302      	movs	r3, #2
 8006c90:	e0cb      	b.n	8006e2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006caa:	d102      	bne.n	8006cb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006cac:	4b61      	ldr	r3, [pc, #388]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006cae:	60bb      	str	r3, [r7, #8]
 8006cb0:	e001      	b.n	8006cb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10b      	bne.n	8006cd4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc0:	f043 0220 	orr.w	r2, r3, #32
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e0aa      	b.n	8006e2a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff ff87 	bl	8006bea <LL_ADC_REG_IsConversionOngoing>
 8006cdc:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7ff ff81 	bl	8006bea <LL_ADC_REG_IsConversionOngoing>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	f040 808c 	bne.w	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006cf0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f040 8088 	bne.w	8006e08 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d00:	d004      	beq.n	8006d0c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a4b      	ldr	r2, [pc, #300]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d101      	bne.n	8006d10 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006d0c:	4b4a      	ldr	r3, [pc, #296]	@ (8006e38 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8006d0e:	e000      	b.n	8006d12 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006d10:	4b4a      	ldr	r3, [pc, #296]	@ (8006e3c <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006d12:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d041      	beq.n	8006da0 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	6859      	ldr	r1, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d2e:	035b      	lsls	r3, r3, #13
 8006d30:	430b      	orrs	r3, r1
 8006d32:	431a      	orrs	r2, r3
 8006d34:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d36:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d40:	d004      	beq.n	8006d4c <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a3b      	ldr	r2, [pc, #236]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10f      	bne.n	8006d6c <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006d4c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006d50:	f7ff ff38 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006d54:	4604      	mov	r4, r0
 8006d56:	4837      	ldr	r0, [pc, #220]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006d58:	f7ff ff34 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	4323      	orrs	r3, r4
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf0c      	ite	eq
 8006d64:	2301      	moveq	r3, #1
 8006d66:	2300      	movne	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
 8006d6a:	e008      	b.n	8006d7e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8006d6c:	4834      	ldr	r0, [pc, #208]	@ (8006e40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006d6e:	f7ff ff29 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	bf0c      	ite	eq
 8006d78:	2301      	moveq	r3, #1
 8006d7a:	2300      	movne	r3, #0
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d04c      	beq.n	8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006d82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006d8a:	f023 030f 	bic.w	r3, r3, #15
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	6811      	ldr	r1, [r2, #0]
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	6892      	ldr	r2, [r2, #8]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	431a      	orrs	r2, r3
 8006d9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006d9c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006d9e:	e03d      	b.n	8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006da0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006da8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006daa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006db4:	d004      	beq.n	8006dc0 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1e      	ldr	r2, [pc, #120]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d10f      	bne.n	8006de0 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8006dc0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006dc4:	f7ff fefe 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006dc8:	4604      	mov	r4, r0
 8006dca:	481a      	ldr	r0, [pc, #104]	@ (8006e34 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006dcc:	f7ff fefa 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	4323      	orrs	r3, r4
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2301      	moveq	r3, #1
 8006dda:	2300      	movne	r3, #0
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	e008      	b.n	8006df2 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8006de0:	4817      	ldr	r0, [pc, #92]	@ (8006e40 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006de2:	f7ff feef 	bl	8006bc4 <LL_ADC_IsEnabled>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d012      	beq.n	8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8006dfe:	f023 030f 	bic.w	r3, r3, #15
 8006e02:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006e04:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006e06:	e009      	b.n	8006e1c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8006e1a:	e000      	b.n	8006e1e <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006e1c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006e26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3784      	adds	r7, #132	@ 0x84
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd90      	pop	{r4, r7, pc}
 8006e32:	bf00      	nop
 8006e34:	50000100 	.word	0x50000100
 8006e38:	50000300 	.word	0x50000300
 8006e3c:	50000700 	.word	0x50000700
 8006e40:	50000400 	.word	0x50000400

08006e44 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e023      	b.n	8006e9e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7fd ff26 	bl	8004cbc <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2200      	movs	r2, #0
 8006e86:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2200      	movs	r2, #0
 8006e92:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3708      	adds	r7, #8
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
	...

08006ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f003 0307 	and.w	r3, r3, #7
 8006eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006eec <__NVIC_SetPriorityGrouping+0x44>)
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8006ec4:	4013      	ands	r3, r2
 8006ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006eda:	4a04      	ldr	r2, [pc, #16]	@ (8006eec <__NVIC_SetPriorityGrouping+0x44>)
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	60d3      	str	r3, [r2, #12]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr
 8006eec:	e000ed00 	.word	0xe000ed00

08006ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ef4:	4b04      	ldr	r3, [pc, #16]	@ (8006f08 <__NVIC_GetPriorityGrouping+0x18>)
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	0a1b      	lsrs	r3, r3, #8
 8006efa:	f003 0307 	and.w	r3, r3, #7
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	46bd      	mov	sp, r7
 8006f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f06:	4770      	bx	lr
 8006f08:	e000ed00 	.word	0xe000ed00

08006f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	db0b      	blt.n	8006f36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	f003 021f 	and.w	r2, r3, #31
 8006f24:	4907      	ldr	r1, [pc, #28]	@ (8006f44 <__NVIC_EnableIRQ+0x38>)
 8006f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	2001      	movs	r0, #1
 8006f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8006f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	e000e100 	.word	0xe000e100

08006f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	4603      	mov	r3, r0
 8006f50:	6039      	str	r1, [r7, #0]
 8006f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	db0a      	blt.n	8006f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	490c      	ldr	r1, [pc, #48]	@ (8006f94 <__NVIC_SetPriority+0x4c>)
 8006f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f66:	0112      	lsls	r2, r2, #4
 8006f68:	b2d2      	uxtb	r2, r2
 8006f6a:	440b      	add	r3, r1
 8006f6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f70:	e00a      	b.n	8006f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	4908      	ldr	r1, [pc, #32]	@ (8006f98 <__NVIC_SetPriority+0x50>)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	3b04      	subs	r3, #4
 8006f80:	0112      	lsls	r2, r2, #4
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	440b      	add	r3, r1
 8006f86:	761a      	strb	r2, [r3, #24]
}
 8006f88:	bf00      	nop
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr
 8006f94:	e000e100 	.word	0xe000e100
 8006f98:	e000ed00 	.word	0xe000ed00

08006f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b089      	sub	sp, #36	@ 0x24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f003 0307 	and.w	r3, r3, #7
 8006fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006fb0:	69fb      	ldr	r3, [r7, #28]
 8006fb2:	f1c3 0307 	rsb	r3, r3, #7
 8006fb6:	2b04      	cmp	r3, #4
 8006fb8:	bf28      	it	cs
 8006fba:	2304      	movcs	r3, #4
 8006fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	2b06      	cmp	r3, #6
 8006fc4:	d902      	bls.n	8006fcc <NVIC_EncodePriority+0x30>
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3b03      	subs	r3, #3
 8006fca:	e000      	b.n	8006fce <NVIC_EncodePriority+0x32>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43da      	mvns	r2, r3
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	401a      	ands	r2, r3
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	fa01 f303 	lsl.w	r3, r1, r3
 8006fee:	43d9      	mvns	r1, r3
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ff4:	4313      	orrs	r3, r2
         );
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3724      	adds	r7, #36	@ 0x24
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
	...

08007004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	3b01      	subs	r3, #1
 8007010:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007014:	d301      	bcc.n	800701a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007016:	2301      	movs	r3, #1
 8007018:	e00f      	b.n	800703a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800701a:	4a0a      	ldr	r2, [pc, #40]	@ (8007044 <SysTick_Config+0x40>)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3b01      	subs	r3, #1
 8007020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007022:	210f      	movs	r1, #15
 8007024:	f04f 30ff 	mov.w	r0, #4294967295
 8007028:	f7ff ff8e 	bl	8006f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800702c:	4b05      	ldr	r3, [pc, #20]	@ (8007044 <SysTick_Config+0x40>)
 800702e:	2200      	movs	r2, #0
 8007030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007032:	4b04      	ldr	r3, [pc, #16]	@ (8007044 <SysTick_Config+0x40>)
 8007034:	2207      	movs	r2, #7
 8007036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	e000e010 	.word	0xe000e010

08007048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f7ff ff29 	bl	8006ea8 <__NVIC_SetPriorityGrouping>
}
 8007056:	bf00      	nop
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}

0800705e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800705e:	b580      	push	{r7, lr}
 8007060:	b086      	sub	sp, #24
 8007062:	af00      	add	r7, sp, #0
 8007064:	4603      	mov	r3, r0
 8007066:	60b9      	str	r1, [r7, #8]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800706c:	f7ff ff40 	bl	8006ef0 <__NVIC_GetPriorityGrouping>
 8007070:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	6978      	ldr	r0, [r7, #20]
 8007078:	f7ff ff90 	bl	8006f9c <NVIC_EncodePriority>
 800707c:	4602      	mov	r2, r0
 800707e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007082:	4611      	mov	r1, r2
 8007084:	4618      	mov	r0, r3
 8007086:	f7ff ff5f 	bl	8006f48 <__NVIC_SetPriority>
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}

08007092 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007092:	b580      	push	{r7, lr}
 8007094:	b082      	sub	sp, #8
 8007096:	af00      	add	r7, sp, #0
 8007098:	4603      	mov	r3, r0
 800709a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800709c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7ff ff33 	bl	8006f0c <__NVIC_EnableIRQ>
}
 80070a6:	bf00      	nop
 80070a8:	3708      	adds	r7, #8
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f7ff ffa4 	bl	8007004 <SysTick_Config>
 80070bc:	4603      	mov	r3, r0
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}
	...

080070c8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e054      	b.n	8007184 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7f5b      	ldrb	r3, [r3, #29]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d105      	bne.n	80070f0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fd fe06 	bl	8004cfc <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	791b      	ldrb	r3, [r3, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d10c      	bne.n	8007118 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a22      	ldr	r2, [pc, #136]	@ (800718c <HAL_CRC_Init+0xc4>)
 8007104:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 0218 	bic.w	r2, r2, #24
 8007114:	609a      	str	r2, [r3, #8]
 8007116:	e00c      	b.n	8007132 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	461a      	mov	r2, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f834 	bl	8007190 <HAL_CRCEx_Polynomial_Set>
 8007128:	4603      	mov	r3, r0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d001      	beq.n	8007132 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800712e:	2301      	movs	r3, #1
 8007130:	e028      	b.n	8007184 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	795b      	ldrb	r3, [r3, #5]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d105      	bne.n	8007146 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f04f 32ff 	mov.w	r2, #4294967295
 8007142:	611a      	str	r2, [r3, #16]
 8007144:	e004      	b.n	8007150 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	6912      	ldr	r2, [r2, #16]
 800714e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	695a      	ldr	r2, [r3, #20]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	430a      	orrs	r2, r1
 8007164:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	699a      	ldr	r2, [r3, #24]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	430a      	orrs	r2, r1
 800717a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3708      	adds	r7, #8
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}
 800718c:	04c11db7 	.word	0x04c11db7

08007190 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007190:	b480      	push	{r7}
 8007192:	b087      	sub	sp, #28
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800719c:	2300      	movs	r3, #0
 800719e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80071a0:	231f      	movs	r3, #31
 80071a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 0301 	and.w	r3, r3, #1
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	75fb      	strb	r3, [r7, #23]
 80071b2:	e063      	b.n	800727c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80071b4:	bf00      	nop
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1e5a      	subs	r2, r3, #1
 80071ba:	613a      	str	r2, [r7, #16]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d009      	beq.n	80071d4 <HAL_CRCEx_Polynomial_Set+0x44>
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f003 031f 	and.w	r3, r3, #31
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	fa22 f303 	lsr.w	r3, r2, r3
 80071cc:	f003 0301 	and.w	r3, r3, #1
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b18      	cmp	r3, #24
 80071d8:	d846      	bhi.n	8007268 <HAL_CRCEx_Polynomial_Set+0xd8>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <HAL_CRCEx_Polynomial_Set+0x50>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	0800726f 	.word	0x0800726f
 80071e4:	08007269 	.word	0x08007269
 80071e8:	08007269 	.word	0x08007269
 80071ec:	08007269 	.word	0x08007269
 80071f0:	08007269 	.word	0x08007269
 80071f4:	08007269 	.word	0x08007269
 80071f8:	08007269 	.word	0x08007269
 80071fc:	08007269 	.word	0x08007269
 8007200:	0800725d 	.word	0x0800725d
 8007204:	08007269 	.word	0x08007269
 8007208:	08007269 	.word	0x08007269
 800720c:	08007269 	.word	0x08007269
 8007210:	08007269 	.word	0x08007269
 8007214:	08007269 	.word	0x08007269
 8007218:	08007269 	.word	0x08007269
 800721c:	08007269 	.word	0x08007269
 8007220:	08007251 	.word	0x08007251
 8007224:	08007269 	.word	0x08007269
 8007228:	08007269 	.word	0x08007269
 800722c:	08007269 	.word	0x08007269
 8007230:	08007269 	.word	0x08007269
 8007234:	08007269 	.word	0x08007269
 8007238:	08007269 	.word	0x08007269
 800723c:	08007269 	.word	0x08007269
 8007240:	08007245 	.word	0x08007245
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2b06      	cmp	r3, #6
 8007248:	d913      	bls.n	8007272 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800724e:	e010      	b.n	8007272 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	2b07      	cmp	r3, #7
 8007254:	d90f      	bls.n	8007276 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800725a:	e00c      	b.n	8007276 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2b0f      	cmp	r3, #15
 8007260:	d90b      	bls.n	800727a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007266:	e008      	b.n	800727a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
        break;
 800726c:	e006      	b.n	800727c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800726e:	bf00      	nop
 8007270:	e004      	b.n	800727c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007272:	bf00      	nop
 8007274:	e002      	b.n	800727c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007276:	bf00      	nop
 8007278:	e000      	b.n	800727c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800727a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800727c:	7dfb      	ldrb	r3, [r7, #23]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d10d      	bne.n	800729e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f023 0118 	bic.w	r1, r3, #24
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	430a      	orrs	r2, r1
 800729c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800729e:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	371c      	adds	r7, #28
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e08d      	b.n	80073da <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_DMA_Init+0x138>)
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d80f      	bhi.n	80072ea <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	4b45      	ldr	r3, [pc, #276]	@ (80073e8 <HAL_DMA_Init+0x13c>)
 80072d2:	4413      	add	r3, r2
 80072d4:	4a45      	ldr	r2, [pc, #276]	@ (80073ec <HAL_DMA_Init+0x140>)
 80072d6:	fba2 2303 	umull	r2, r3, r2, r3
 80072da:	091b      	lsrs	r3, r3, #4
 80072dc:	009a      	lsls	r2, r3, #2
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a42      	ldr	r2, [pc, #264]	@ (80073f0 <HAL_DMA_Init+0x144>)
 80072e6:	641a      	str	r2, [r3, #64]	@ 0x40
 80072e8:	e00e      	b.n	8007308 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	4b40      	ldr	r3, [pc, #256]	@ (80073f4 <HAL_DMA_Init+0x148>)
 80072f2:	4413      	add	r3, r2
 80072f4:	4a3d      	ldr	r2, [pc, #244]	@ (80073ec <HAL_DMA_Init+0x140>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	091b      	lsrs	r3, r3, #4
 80072fc:	009a      	lsls	r2, r3, #2
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a3c      	ldr	r2, [pc, #240]	@ (80073f8 <HAL_DMA_Init+0x14c>)
 8007306:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800731e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007322:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800732c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
 8007332:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	699b      	ldr	r3, [r3, #24]
 800733e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a1b      	ldr	r3, [r3, #32]
 800734a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800734c:	68fa      	ldr	r2, [r7, #12]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	68fa      	ldr	r2, [r7, #12]
 8007358:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f9b6 	bl	80076cc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007368:	d102      	bne.n	8007370 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007378:	b2d2      	uxtb	r2, r2
 800737a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007384:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d010      	beq.n	80073b0 <HAL_DMA_Init+0x104>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b04      	cmp	r3, #4
 8007394:	d80c      	bhi.n	80073b0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 f9d6 	bl	8007748 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073a0:	2200      	movs	r2, #0
 80073a2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	e008      	b.n	80073c2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40020407 	.word	0x40020407
 80073e8:	bffdfff8 	.word	0xbffdfff8
 80073ec:	cccccccd 	.word	0xcccccccd
 80073f0:	40020000 	.word	0x40020000
 80073f4:	bffdfbf8 	.word	0xbffdfbf8
 80073f8:	40020400 	.word	0x40020400

080073fc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800740a:	2300      	movs	r3, #0
 800740c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007414:	2b01      	cmp	r3, #1
 8007416:	d101      	bne.n	800741c <HAL_DMA_Start_IT+0x20>
 8007418:	2302      	movs	r3, #2
 800741a:	e066      	b.n	80074ea <HAL_DMA_Start_IT+0xee>
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b01      	cmp	r3, #1
 800742e:	d155      	bne.n	80074dc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2202      	movs	r2, #2
 8007434:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 0201 	bic.w	r2, r2, #1
 800744c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	687a      	ldr	r2, [r7, #4]
 8007452:	68b9      	ldr	r1, [r7, #8]
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f8fb 	bl	8007650 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800745e:	2b00      	cmp	r3, #0
 8007460:	d008      	beq.n	8007474 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f042 020e 	orr.w	r2, r2, #14
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e00f      	b.n	8007494 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f022 0204 	bic.w	r2, r2, #4
 8007482:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f042 020a 	orr.w	r2, r2, #10
 8007492:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d007      	beq.n	80074b2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80074ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074b0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d007      	beq.n	80074ca <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80074c8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f042 0201 	orr.w	r2, r2, #1
 80074d8:	601a      	str	r2, [r3, #0]
 80074da:	e005      	b.n	80074e8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80074e4:	2302      	movs	r3, #2
 80074e6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80074e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3718      	adds	r7, #24
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800750e:	f003 031f 	and.w	r3, r3, #31
 8007512:	2204      	movs	r2, #4
 8007514:	409a      	lsls	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d026      	beq.n	800756c <HAL_DMA_IRQHandler+0x7a>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d021      	beq.n	800756c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0320 	and.w	r3, r3, #32
 8007532:	2b00      	cmp	r3, #0
 8007534:	d107      	bne.n	8007546 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f022 0204 	bic.w	r2, r2, #4
 8007544:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800754a:	f003 021f 	and.w	r2, r3, #31
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007552:	2104      	movs	r1, #4
 8007554:	fa01 f202 	lsl.w	r2, r1, r2
 8007558:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800755e:	2b00      	cmp	r3, #0
 8007560:	d071      	beq.n	8007646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800756a:	e06c      	b.n	8007646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007570:	f003 031f 	and.w	r3, r3, #31
 8007574:	2202      	movs	r2, #2
 8007576:	409a      	lsls	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d02e      	beq.n	80075de <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	f003 0302 	and.w	r3, r3, #2
 8007586:	2b00      	cmp	r3, #0
 8007588:	d029      	beq.n	80075de <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0320 	and.w	r3, r3, #32
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10b      	bne.n	80075b0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 020a 	bic.w	r2, r2, #10
 80075a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075b4:	f003 021f 	and.w	r2, r3, #31
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075bc:	2102      	movs	r1, #2
 80075be:	fa01 f202 	lsl.w	r2, r1, r2
 80075c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d038      	beq.n	8007646 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80075dc:	e033      	b.n	8007646 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075e2:	f003 031f 	and.w	r3, r3, #31
 80075e6:	2208      	movs	r2, #8
 80075e8:	409a      	lsls	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	4013      	ands	r3, r2
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d02a      	beq.n	8007648 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f003 0308 	and.w	r3, r3, #8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d025      	beq.n	8007648 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f022 020e 	bic.w	r2, r2, #14
 800760a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007610:	f003 021f 	and.w	r2, r3, #31
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007618:	2101      	movs	r1, #1
 800761a:	fa01 f202 	lsl.w	r2, r1, r2
 800761e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763a:	2b00      	cmp	r3, #0
 800763c:	d004      	beq.n	8007648 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007646:	bf00      	nop
 8007648:	bf00      	nop
}
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007650:	b480      	push	{r7}
 8007652:	b085      	sub	sp, #20
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
 800765c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007666:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800766c:	2b00      	cmp	r3, #0
 800766e:	d004      	beq.n	800767a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007678:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800767e:	f003 021f 	and.w	r2, r3, #31
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007686:	2101      	movs	r1, #1
 8007688:	fa01 f202 	lsl.w	r2, r1, r2
 800768c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2b10      	cmp	r3, #16
 800769c:	d108      	bne.n	80076b0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80076ae:	e007      	b.n	80076c0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	60da      	str	r2, [r3, #12]
}
 80076c0:	bf00      	nop
 80076c2:	3714      	adds	r7, #20
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	4b16      	ldr	r3, [pc, #88]	@ (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d802      	bhi.n	80076e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80076e0:	4b15      	ldr	r3, [pc, #84]	@ (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80076e2:	617b      	str	r3, [r7, #20]
 80076e4:	e001      	b.n	80076ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80076e6:	4b15      	ldr	r3, [pc, #84]	@ (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80076e8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	3b08      	subs	r3, #8
 80076f6:	4a12      	ldr	r2, [pc, #72]	@ (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80076f8:	fba2 2303 	umull	r2, r3, r2, r3
 80076fc:	091b      	lsrs	r3, r3, #4
 80076fe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007704:	089b      	lsrs	r3, r3, #2
 8007706:	009a      	lsls	r2, r3, #2
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	4413      	add	r3, r2
 800770c:	461a      	mov	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a0b      	ldr	r2, [pc, #44]	@ (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007716:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 031f 	and.w	r3, r3, #31
 800771e:	2201      	movs	r2, #1
 8007720:	409a      	lsls	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007726:	bf00      	nop
 8007728:	371c      	adds	r7, #28
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40020407 	.word	0x40020407
 8007738:	40020800 	.word	0x40020800
 800773c:	40020820 	.word	0x40020820
 8007740:	cccccccd 	.word	0xcccccccd
 8007744:	40020880 	.word	0x40020880

08007748 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	b2db      	uxtb	r3, r3
 8007756:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	4b0b      	ldr	r3, [pc, #44]	@ (8007788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	461a      	mov	r2, r3
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a08      	ldr	r2, [pc, #32]	@ (800778c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800776a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3b01      	subs	r3, #1
 8007770:	f003 031f 	and.w	r3, r3, #31
 8007774:	2201      	movs	r2, #1
 8007776:	409a      	lsls	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800777c:	bf00      	nop
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr
 8007788:	1000823f 	.word	0x1000823f
 800778c:	40020940 	.word	0x40020940

08007790 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e147      	b.n	8007a32 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d106      	bne.n	80077bc <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fd fac0 	bl	8004d3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	699a      	ldr	r2, [r3, #24]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0210 	bic.w	r2, r2, #16
 80077ca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077cc:	f7fd fd5c 	bl	8005288 <HAL_GetTick>
 80077d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80077d2:	e012      	b.n	80077fa <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80077d4:	f7fd fd58 	bl	8005288 <HAL_GetTick>
 80077d8:	4602      	mov	r2, r0
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	1ad3      	subs	r3, r2, r3
 80077de:	2b0a      	cmp	r3, #10
 80077e0:	d90b      	bls.n	80077fa <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077e6:	f043 0201 	orr.w	r2, r3, #1
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2203      	movs	r2, #3
 80077f2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e11b      	b.n	8007a32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	f003 0308 	and.w	r3, r3, #8
 8007804:	2b08      	cmp	r3, #8
 8007806:	d0e5      	beq.n	80077d4 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0201 	orr.w	r2, r2, #1
 8007816:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007818:	f7fd fd36 	bl	8005288 <HAL_GetTick>
 800781c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800781e:	e012      	b.n	8007846 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007820:	f7fd fd32 	bl	8005288 <HAL_GetTick>
 8007824:	4602      	mov	r2, r0
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	1ad3      	subs	r3, r2, r3
 800782a:	2b0a      	cmp	r3, #10
 800782c:	d90b      	bls.n	8007846 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007832:	f043 0201 	orr.w	r2, r3, #1
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2203      	movs	r2, #3
 800783e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	e0f5      	b.n	8007a32 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0e5      	beq.n	8007820 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	699a      	ldr	r2, [r3, #24]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f042 0202 	orr.w	r2, r2, #2
 8007862:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a74      	ldr	r2, [pc, #464]	@ (8007a3c <HAL_FDCAN_Init+0x2ac>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d103      	bne.n	8007876 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800786e:	4a74      	ldr	r2, [pc, #464]	@ (8007a40 <HAL_FDCAN_Init+0x2b0>)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	7c1b      	ldrb	r3, [r3, #16]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d108      	bne.n	8007890 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	699a      	ldr	r2, [r3, #24]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800788c:	619a      	str	r2, [r3, #24]
 800788e:	e007      	b.n	80078a0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800789e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	7c5b      	ldrb	r3, [r3, #17]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d108      	bne.n	80078ba <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	699a      	ldr	r2, [r3, #24]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078b6:	619a      	str	r2, [r3, #24]
 80078b8:	e007      	b.n	80078ca <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	699a      	ldr	r2, [r3, #24]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078c8:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	7c9b      	ldrb	r3, [r3, #18]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d108      	bne.n	80078e4 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80078e0:	619a      	str	r2, [r3, #24]
 80078e2:	e007      	b.n	80078f4 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	699a      	ldr	r2, [r3, #24]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80078f2:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	699b      	ldr	r3, [r3, #24]
 80078fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	699a      	ldr	r2, [r3, #24]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007918:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f022 0210 	bic.w	r2, r2, #16
 8007928:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	2b01      	cmp	r3, #1
 8007930:	d108      	bne.n	8007944 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	699a      	ldr	r2, [r3, #24]
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0204 	orr.w	r2, r2, #4
 8007940:	619a      	str	r2, [r3, #24]
 8007942:	e02c      	b.n	800799e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d028      	beq.n	800799e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d01c      	beq.n	800798e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	699a      	ldr	r2, [r3, #24]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007962:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	691a      	ldr	r2, [r3, #16]
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f042 0210 	orr.w	r2, r2, #16
 8007972:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68db      	ldr	r3, [r3, #12]
 8007978:	2b03      	cmp	r3, #3
 800797a:	d110      	bne.n	800799e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	699a      	ldr	r2, [r3, #24]
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f042 0220 	orr.w	r2, r2, #32
 800798a:	619a      	str	r2, [r3, #24]
 800798c:	e007      	b.n	800799e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	699a      	ldr	r2, [r3, #24]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0220 	orr.w	r2, r2, #32
 800799c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	699b      	ldr	r3, [r3, #24]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	69db      	ldr	r3, [r3, #28]
 80079aa:	3b01      	subs	r3, #1
 80079ac:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079ae:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80079b6:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	3b01      	subs	r3, #1
 80079c0:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80079c6:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80079c8:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80079d2:	d115      	bne.n	8007a00 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d8:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079de:	3b01      	subs	r3, #1
 80079e0:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079e2:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079e8:	3b01      	subs	r3, #1
 80079ea:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80079ec:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f4:	3b01      	subs	r3, #1
 80079f6:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80079fc:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80079fe:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	430a      	orrs	r2, r1
 8007a12:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f9ae 	bl	8007d78 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2200      	movs	r2, #0
 8007a26:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	40006400 	.word	0x40006400
 8007a40:	40006500 	.word	0x40006500

08007a44 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b08c      	sub	sp, #48	@ 0x30
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a52:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8007a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a60:	4013      	ands	r3, r2
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a6a:	f003 0307 	and.w	r3, r3, #7
 8007a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a78:	4013      	ands	r3, r2
 8007a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a86:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a90:	4013      	ands	r3, r2
 8007a92:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a9a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8007a9e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aa6:	6a3a      	ldr	r2, [r7, #32]
 8007aa8:	4013      	ands	r3, r2
 8007aaa:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ab2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8007ab6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ad2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00b      	beq.n	8007af6 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d006      	beq.n	8007af6 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2240      	movs	r2, #64	@ 0x40
 8007aee:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f921 	bl	8007d38 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d019      	beq.n	8007b34 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d014      	beq.n	8007b34 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8007b12:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b1c:	693a      	ldr	r2, [r7, #16]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b2a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007b2c:	6939      	ldr	r1, [r7, #16]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f8e3 	bl	8007cfa <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b40:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f8a2 	bl	8007c8e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d007      	beq.n	8007b60 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b56:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007b58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f8a2 	bl	8007ca4 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d007      	beq.n	8007b76 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b6c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007b6e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f8a2 	bl	8007cba <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00c      	beq.n	8007b9a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d007      	beq.n	8007b9a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b92:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 f89b 	bl	8007cd0 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d018      	beq.n	8007bd6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d013      	beq.n	8007bd6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8007bb6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2280      	movs	r2, #128	@ 0x80
 8007bcc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f887 	bl	8007ce4 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d00c      	beq.n	8007bfa <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007be0:	69bb      	ldr	r3, [r7, #24]
 8007be2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d007      	beq.n	8007bfa <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007bf2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f88b 	bl	8007d10 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00c      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d007      	beq.n	8007c1e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007c16:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007c18:	6878      	ldr	r0, [r7, #4]
 8007c1a:	f000 f883 	bl	8007d24 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00f      	beq.n	8007c48 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007c3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c40:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d007      	beq.n	8007c5e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69fa      	ldr	r2, [r7, #28]
 8007c54:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007c56:	69f9      	ldr	r1, [r7, #28]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f000 f881 	bl	8007d60 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6a3a      	ldr	r2, [r7, #32]
 8007c6a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d002      	beq.n	8007c86 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 f863 	bl	8007d4c <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007c86:	bf00      	nop
 8007c88:	3730      	adds	r7, #48	@ 0x30
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}

08007c8e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b083      	sub	sp, #12
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007c98:	bf00      	nop
 8007c9a:	370c      	adds	r7, #12
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr

08007ca4 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8007cae:	bf00      	nop
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
 8007cc2:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007cd8:	bf00      	nop
 8007cda:	370c      	adds	r7, #12
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b083      	sub	sp, #12
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8007cee:	bf00      	nop
 8007cf0:	370c      	adds	r7, #12
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b083      	sub	sp, #12
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007d04:	bf00      	nop
 8007d06:	370c      	adds	r7, #12
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr

08007d10 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007d54:	bf00      	nop
 8007d56:	370c      	adds	r7, #12
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5e:	4770      	bx	lr

08007d60 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007d80:	4b2c      	ldr	r3, [pc, #176]	@ (8007e34 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8007d82:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2b      	ldr	r2, [pc, #172]	@ (8007e38 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d103      	bne.n	8007d96 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007d94:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	68ba      	ldr	r2, [r7, #8]
 8007d9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da4:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007dac:	041a      	lsls	r2, r3, #16
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dca:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd2:	061a      	lsls	r2, r3, #24
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	430a      	orrs	r2, r1
 8007dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e005      	b.n	8007e18 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	3304      	adds	r3, #4
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d3f3      	bcc.n	8007e0c <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	3714      	adds	r7, #20
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e30:	4770      	bx	lr
 8007e32:	bf00      	nop
 8007e34:	4000a400 	.word	0x4000a400
 8007e38:	40006800 	.word	0x40006800

08007e3c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d101      	bne.n	8007e4e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	e033      	b.n	8007eb6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d106      	bne.n	8007e68 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f7fc ffcc 	bl	8004e00 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f000 f854 	bl	8007f1c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f822 	bl	8007ebe <FMAC_Reset>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d10c      	bne.n	8007e9a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e84:	f043 0210 	orr.w	r2, r3, #16
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	22a0      	movs	r2, #160	@ 0xa0
 8007e90:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	e008      	b.n	8007eac <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2220      	movs	r2, #32
 8007ea4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b084      	sub	sp, #16
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ec6:	f7fd f9df 	bl	8005288 <HAL_GetTick>
 8007eca:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	691a      	ldr	r2, [r3, #16]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007eda:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007edc:	e00f      	b.n	8007efe <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8007ede:	f7fd f9d3 	bl	8005288 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8007eec:	d907      	bls.n	8007efe <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e00a      	b.n	8007f14 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1e8      	bne.n	8007ede <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	3710      	adds	r7, #16
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b082      	sub	sp, #8
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 f807 	bl	8007f38 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f81b 	bl	8007f66 <FMAC_ResetOutputStateAndDataPointers>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2220      	movs	r2, #32
 8007f56:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8007f5a:	bf00      	nop
 8007f5c:	370c      	adds	r7, #12
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f64:	4770      	bx	lr

08007f66 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8007f66:	b480      	push	{r7}
 8007f68:	b083      	sub	sp, #12
 8007f6a:	af00      	add	r7, sp, #0
 8007f6c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2220      	movs	r2, #32
 8007f84:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007fa2:	e15a      	b.n	800825a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	2101      	movs	r1, #1
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 814c 	beq.w	8008254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d005      	beq.n	8007fd4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007fd0:	2b02      	cmp	r3, #2
 8007fd2:	d130      	bne.n	8008036 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	2203      	movs	r2, #3
 8007fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe4:	43db      	mvns	r3, r3
 8007fe6:	693a      	ldr	r2, [r7, #16]
 8007fe8:	4013      	ands	r3, r2
 8007fea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68da      	ldr	r2, [r3, #12]
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	005b      	lsls	r3, r3, #1
 8007ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ff8:	693a      	ldr	r2, [r7, #16]
 8007ffa:	4313      	orrs	r3, r2
 8007ffc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800800a:	2201      	movs	r2, #1
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	fa02 f303 	lsl.w	r3, r2, r3
 8008012:	43db      	mvns	r3, r3
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4013      	ands	r3, r2
 8008018:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	091b      	lsrs	r3, r3, #4
 8008020:	f003 0201 	and.w	r2, r3, #1
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	fa02 f303 	lsl.w	r3, r2, r3
 800802a:	693a      	ldr	r2, [r7, #16]
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b03      	cmp	r3, #3
 8008040:	d017      	beq.n	8008072 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	2203      	movs	r2, #3
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	43db      	mvns	r3, r3
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4013      	ands	r3, r2
 8008058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	689a      	ldr	r2, [r3, #8]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	005b      	lsls	r3, r3, #1
 8008062:	fa02 f303 	lsl.w	r3, r2, r3
 8008066:	693a      	ldr	r2, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	f003 0303 	and.w	r3, r3, #3
 800807a:	2b02      	cmp	r3, #2
 800807c:	d123      	bne.n	80080c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	08da      	lsrs	r2, r3, #3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3208      	adds	r2, #8
 8008086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	220f      	movs	r2, #15
 8008096:	fa02 f303 	lsl.w	r3, r2, r3
 800809a:	43db      	mvns	r3, r3
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4013      	ands	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	fa02 f303 	lsl.w	r3, r2, r3
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	08da      	lsrs	r2, r3, #3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3208      	adds	r2, #8
 80080c0:	6939      	ldr	r1, [r7, #16]
 80080c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	2203      	movs	r2, #3
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43db      	mvns	r3, r3
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4013      	ands	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f003 0203 	and.w	r2, r3, #3
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a6 	beq.w	8008254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008108:	4b5b      	ldr	r3, [pc, #364]	@ (8008278 <HAL_GPIO_Init+0x2e4>)
 800810a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800810c:	4a5a      	ldr	r2, [pc, #360]	@ (8008278 <HAL_GPIO_Init+0x2e4>)
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6613      	str	r3, [r2, #96]	@ 0x60
 8008114:	4b58      	ldr	r3, [pc, #352]	@ (8008278 <HAL_GPIO_Init+0x2e4>)
 8008116:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008120:	4a56      	ldr	r2, [pc, #344]	@ (800827c <HAL_GPIO_Init+0x2e8>)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	089b      	lsrs	r3, r3, #2
 8008126:	3302      	adds	r3, #2
 8008128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	220f      	movs	r2, #15
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	43db      	mvns	r3, r3
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4013      	ands	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800814a:	d01f      	beq.n	800818c <HAL_GPIO_Init+0x1f8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a4c      	ldr	r2, [pc, #304]	@ (8008280 <HAL_GPIO_Init+0x2ec>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d019      	beq.n	8008188 <HAL_GPIO_Init+0x1f4>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a4b      	ldr	r2, [pc, #300]	@ (8008284 <HAL_GPIO_Init+0x2f0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <HAL_GPIO_Init+0x1f0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a4a      	ldr	r2, [pc, #296]	@ (8008288 <HAL_GPIO_Init+0x2f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00d      	beq.n	8008180 <HAL_GPIO_Init+0x1ec>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a49      	ldr	r2, [pc, #292]	@ (800828c <HAL_GPIO_Init+0x2f8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d007      	beq.n	800817c <HAL_GPIO_Init+0x1e8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a48      	ldr	r2, [pc, #288]	@ (8008290 <HAL_GPIO_Init+0x2fc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d101      	bne.n	8008178 <HAL_GPIO_Init+0x1e4>
 8008174:	2305      	movs	r3, #5
 8008176:	e00a      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008178:	2306      	movs	r3, #6
 800817a:	e008      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 800817c:	2304      	movs	r3, #4
 800817e:	e006      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008180:	2303      	movs	r3, #3
 8008182:	e004      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008184:	2302      	movs	r3, #2
 8008186:	e002      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 800818c:	2300      	movs	r3, #0
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	f002 0203 	and.w	r2, r2, #3
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	4093      	lsls	r3, r2
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800819e:	4937      	ldr	r1, [pc, #220]	@ (800827c <HAL_GPIO_Init+0x2e8>)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	089b      	lsrs	r3, r3, #2
 80081a4:	3302      	adds	r3, #2
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80081ac:	4b39      	ldr	r3, [pc, #228]	@ (8008294 <HAL_GPIO_Init+0x300>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4013      	ands	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80081d0:	4a30      	ldr	r2, [pc, #192]	@ (8008294 <HAL_GPIO_Init+0x300>)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80081d6:	4b2f      	ldr	r3, [pc, #188]	@ (8008294 <HAL_GPIO_Init+0x300>)
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	43db      	mvns	r3, r3
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4013      	ands	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80081fa:	4a26      	ldr	r2, [pc, #152]	@ (8008294 <HAL_GPIO_Init+0x300>)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008200:	4b24      	ldr	r3, [pc, #144]	@ (8008294 <HAL_GPIO_Init+0x300>)
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	43db      	mvns	r3, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4013      	ands	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008224:	4a1b      	ldr	r2, [pc, #108]	@ (8008294 <HAL_GPIO_Init+0x300>)
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800822a:	4b1a      	ldr	r3, [pc, #104]	@ (8008294 <HAL_GPIO_Init+0x300>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	43db      	mvns	r3, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4013      	ands	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800824e:	4a11      	ldr	r2, [pc, #68]	@ (8008294 <HAL_GPIO_Init+0x300>)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	3301      	adds	r3, #1
 8008258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	fa22 f303 	lsr.w	r3, r2, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	f47f ae9d 	bne.w	8007fa4 <HAL_GPIO_Init+0x10>
  }
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	40021000 	.word	0x40021000
 800827c:	40010000 	.word	0x40010000
 8008280:	48000400 	.word	0x48000400
 8008284:	48000800 	.word	0x48000800
 8008288:	48000c00 	.word	0x48000c00
 800828c:	48001000 	.word	0x48001000
 8008290:	48001400 	.word	0x48001400
 8008294:	40010400 	.word	0x40010400

08008298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	807b      	strh	r3, [r7, #2]
 80082a4:	4613      	mov	r3, r2
 80082a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082a8:	787b      	ldrb	r3, [r7, #1]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082ae:	887a      	ldrh	r2, [r7, #2]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082b4:	e002      	b.n	80082bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082b6:	887a      	ldrh	r2, [r7, #2]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d141      	bne.n	800835a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80082d6:	4b4b      	ldr	r3, [pc, #300]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082e2:	d131      	bne.n	8008348 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082e4:	4b47      	ldr	r3, [pc, #284]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80082ea:	4a46      	ldr	r2, [pc, #280]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082f4:	4b43      	ldr	r3, [pc, #268]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80082fc:	4a41      	ldr	r2, [pc, #260]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008302:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008304:	4b40      	ldr	r3, [pc, #256]	@ (8008408 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2232      	movs	r2, #50	@ 0x32
 800830a:	fb02 f303 	mul.w	r3, r2, r3
 800830e:	4a3f      	ldr	r2, [pc, #252]	@ (800840c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008310:	fba2 2303 	umull	r2, r3, r2, r3
 8008314:	0c9b      	lsrs	r3, r3, #18
 8008316:	3301      	adds	r3, #1
 8008318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800831a:	e002      	b.n	8008322 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	3b01      	subs	r3, #1
 8008320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008322:	4b38      	ldr	r3, [pc, #224]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800832a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800832e:	d102      	bne.n	8008336 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d1f2      	bne.n	800831c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008336:	4b33      	ldr	r3, [pc, #204]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008338:	695b      	ldr	r3, [r3, #20]
 800833a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800833e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008342:	d158      	bne.n	80083f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e057      	b.n	80083f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008348:	4b2e      	ldr	r3, [pc, #184]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800834a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800834e:	4a2d      	ldr	r2, [pc, #180]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008350:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008354:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008358:	e04d      	b.n	80083f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008360:	d141      	bne.n	80083e6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008362:	4b28      	ldr	r3, [pc, #160]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800836a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800836e:	d131      	bne.n	80083d4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008370:	4b24      	ldr	r3, [pc, #144]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008372:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008376:	4a23      	ldr	r2, [pc, #140]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008378:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800837c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008380:	4b20      	ldr	r3, [pc, #128]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008388:	4a1e      	ldr	r2, [pc, #120]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800838a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800838e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008390:	4b1d      	ldr	r3, [pc, #116]	@ (8008408 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2232      	movs	r2, #50	@ 0x32
 8008396:	fb02 f303 	mul.w	r3, r2, r3
 800839a:	4a1c      	ldr	r2, [pc, #112]	@ (800840c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800839c:	fba2 2303 	umull	r2, r3, r2, r3
 80083a0:	0c9b      	lsrs	r3, r3, #18
 80083a2:	3301      	adds	r3, #1
 80083a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083a6:	e002      	b.n	80083ae <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	3b01      	subs	r3, #1
 80083ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80083ae:	4b15      	ldr	r3, [pc, #84]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ba:	d102      	bne.n	80083c2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d1f2      	bne.n	80083a8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80083c2:	4b10      	ldr	r3, [pc, #64]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083c4:	695b      	ldr	r3, [r3, #20]
 80083c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80083ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083ce:	d112      	bne.n	80083f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80083d0:	2303      	movs	r3, #3
 80083d2:	e011      	b.n	80083f8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80083d4:	4b0b      	ldr	r3, [pc, #44]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083da:	4a0a      	ldr	r2, [pc, #40]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80083e4:	e007      	b.n	80083f6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80083e6:	4b07      	ldr	r3, [pc, #28]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80083ee:	4a05      	ldr	r2, [pc, #20]	@ (8008404 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80083f0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80083f4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	40007000 	.word	0x40007000
 8008408:	200000bc 	.word	0x200000bc
 800840c:	431bde83 	.word	0x431bde83

08008410 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008410:	b480      	push	{r7}
 8008412:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008414:	4b05      	ldr	r3, [pc, #20]	@ (800842c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	4a04      	ldr	r2, [pc, #16]	@ (800842c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800841a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800841e:	6093      	str	r3, [r2, #8]
}
 8008420:	bf00      	nop
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40007000 	.word	0x40007000

08008430 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b088      	sub	sp, #32
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e2fe      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d075      	beq.n	800853a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800844e:	4b97      	ldr	r3, [pc, #604]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008450:	689b      	ldr	r3, [r3, #8]
 8008452:	f003 030c 	and.w	r3, r3, #12
 8008456:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008458:	4b94      	ldr	r3, [pc, #592]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	f003 0303 	and.w	r3, r3, #3
 8008460:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	2b0c      	cmp	r3, #12
 8008466:	d102      	bne.n	800846e <HAL_RCC_OscConfig+0x3e>
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	2b03      	cmp	r3, #3
 800846c:	d002      	beq.n	8008474 <HAL_RCC_OscConfig+0x44>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	2b08      	cmp	r3, #8
 8008472:	d10b      	bne.n	800848c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008474:	4b8d      	ldr	r3, [pc, #564]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800847c:	2b00      	cmp	r3, #0
 800847e:	d05b      	beq.n	8008538 <HAL_RCC_OscConfig+0x108>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d157      	bne.n	8008538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e2d9      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008494:	d106      	bne.n	80084a4 <HAL_RCC_OscConfig+0x74>
 8008496:	4b85      	ldr	r3, [pc, #532]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a84      	ldr	r2, [pc, #528]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 800849c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	e01d      	b.n	80084e0 <HAL_RCC_OscConfig+0xb0>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	685b      	ldr	r3, [r3, #4]
 80084a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80084ac:	d10c      	bne.n	80084c8 <HAL_RCC_OscConfig+0x98>
 80084ae:	4b7f      	ldr	r3, [pc, #508]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a7e      	ldr	r2, [pc, #504]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	4b7c      	ldr	r3, [pc, #496]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a7b      	ldr	r2, [pc, #492]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e00b      	b.n	80084e0 <HAL_RCC_OscConfig+0xb0>
 80084c8:	4b78      	ldr	r3, [pc, #480]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a77      	ldr	r2, [pc, #476]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80084d2:	6013      	str	r3, [r2, #0]
 80084d4:	4b75      	ldr	r3, [pc, #468]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a74      	ldr	r2, [pc, #464]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80084da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80084de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d013      	beq.n	8008510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fc fece 	bl	8005288 <HAL_GetTick>
 80084ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80084f0:	f7fc feca 	bl	8005288 <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b64      	cmp	r3, #100	@ 0x64
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e29e      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008502:	4b6a      	ldr	r3, [pc, #424]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f0      	beq.n	80084f0 <HAL_RCC_OscConfig+0xc0>
 800850e:	e014      	b.n	800853a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7fc feba 	bl	8005288 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008516:	e008      	b.n	800852a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008518:	f7fc feb6 	bl	8005288 <HAL_GetTick>
 800851c:	4602      	mov	r2, r0
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1ad3      	subs	r3, r2, r3
 8008522:	2b64      	cmp	r3, #100	@ 0x64
 8008524:	d901      	bls.n	800852a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e28a      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800852a:	4b60      	ldr	r3, [pc, #384]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d1f0      	bne.n	8008518 <HAL_RCC_OscConfig+0xe8>
 8008536:	e000      	b.n	800853a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d075      	beq.n	8008632 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008546:	4b59      	ldr	r3, [pc, #356]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008548:	689b      	ldr	r3, [r3, #8]
 800854a:	f003 030c 	and.w	r3, r3, #12
 800854e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008550:	4b56      	ldr	r3, [pc, #344]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	f003 0303 	and.w	r3, r3, #3
 8008558:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	2b0c      	cmp	r3, #12
 800855e:	d102      	bne.n	8008566 <HAL_RCC_OscConfig+0x136>
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2b02      	cmp	r3, #2
 8008564:	d002      	beq.n	800856c <HAL_RCC_OscConfig+0x13c>
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	2b04      	cmp	r3, #4
 800856a:	d11f      	bne.n	80085ac <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800856c:	4b4f      	ldr	r3, [pc, #316]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008574:	2b00      	cmp	r3, #0
 8008576:	d005      	beq.n	8008584 <HAL_RCC_OscConfig+0x154>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d101      	bne.n	8008584 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008580:	2301      	movs	r3, #1
 8008582:	e25d      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008584:	4b49      	ldr	r3, [pc, #292]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	061b      	lsls	r3, r3, #24
 8008592:	4946      	ldr	r1, [pc, #280]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008594:	4313      	orrs	r3, r2
 8008596:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008598:	4b45      	ldr	r3, [pc, #276]	@ (80086b0 <HAL_RCC_OscConfig+0x280>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4618      	mov	r0, r3
 800859e:	f7fc fe27 	bl	80051f0 <HAL_InitTick>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d043      	beq.n	8008630 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80085a8:	2301      	movs	r3, #1
 80085aa:	e249      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	68db      	ldr	r3, [r3, #12]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d023      	beq.n	80085fc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80085b4:	4b3d      	ldr	r3, [pc, #244]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a3c      	ldr	r2, [pc, #240]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085c0:	f7fc fe62 	bl	8005288 <HAL_GetTick>
 80085c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085c6:	e008      	b.n	80085da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80085c8:	f7fc fe5e 	bl	8005288 <HAL_GetTick>
 80085cc:	4602      	mov	r2, r0
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	1ad3      	subs	r3, r2, r3
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d901      	bls.n	80085da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e232      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085da:	4b34      	ldr	r3, [pc, #208]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d0f0      	beq.n	80085c8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80085e6:	4b31      	ldr	r3, [pc, #196]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	061b      	lsls	r3, r3, #24
 80085f4:	492d      	ldr	r1, [pc, #180]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085f6:	4313      	orrs	r3, r2
 80085f8:	604b      	str	r3, [r1, #4]
 80085fa:	e01a      	b.n	8008632 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80085fc:	4b2b      	ldr	r3, [pc, #172]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a2a      	ldr	r2, [pc, #168]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008602:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008606:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008608:	f7fc fe3e 	bl	8005288 <HAL_GetTick>
 800860c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800860e:	e008      	b.n	8008622 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008610:	f7fc fe3a 	bl	8005288 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	2b02      	cmp	r3, #2
 800861c:	d901      	bls.n	8008622 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800861e:	2303      	movs	r3, #3
 8008620:	e20e      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008622:	4b22      	ldr	r3, [pc, #136]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800862a:	2b00      	cmp	r3, #0
 800862c:	d1f0      	bne.n	8008610 <HAL_RCC_OscConfig+0x1e0>
 800862e:	e000      	b.n	8008632 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008630:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f003 0308 	and.w	r3, r3, #8
 800863a:	2b00      	cmp	r3, #0
 800863c:	d041      	beq.n	80086c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d01c      	beq.n	8008680 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008646:	4b19      	ldr	r3, [pc, #100]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008648:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800864c:	4a17      	ldr	r2, [pc, #92]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 800864e:	f043 0301 	orr.w	r3, r3, #1
 8008652:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008656:	f7fc fe17 	bl	8005288 <HAL_GetTick>
 800865a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800865c:	e008      	b.n	8008670 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800865e:	f7fc fe13 	bl	8005288 <HAL_GetTick>
 8008662:	4602      	mov	r2, r0
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b02      	cmp	r3, #2
 800866a:	d901      	bls.n	8008670 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800866c:	2303      	movs	r3, #3
 800866e:	e1e7      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008670:	4b0e      	ldr	r3, [pc, #56]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008676:	f003 0302 	and.w	r3, r3, #2
 800867a:	2b00      	cmp	r3, #0
 800867c:	d0ef      	beq.n	800865e <HAL_RCC_OscConfig+0x22e>
 800867e:	e020      	b.n	80086c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008680:	4b0a      	ldr	r3, [pc, #40]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008686:	4a09      	ldr	r2, [pc, #36]	@ (80086ac <HAL_RCC_OscConfig+0x27c>)
 8008688:	f023 0301 	bic.w	r3, r3, #1
 800868c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008690:	f7fc fdfa 	bl	8005288 <HAL_GetTick>
 8008694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008696:	e00d      	b.n	80086b4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008698:	f7fc fdf6 	bl	8005288 <HAL_GetTick>
 800869c:	4602      	mov	r2, r0
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d906      	bls.n	80086b4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e1ca      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
 80086aa:	bf00      	nop
 80086ac:	40021000 	.word	0x40021000
 80086b0:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80086b4:	4b8c      	ldr	r3, [pc, #560]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80086b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1ea      	bne.n	8008698 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f003 0304 	and.w	r3, r3, #4
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80a6 	beq.w	800881c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80086d0:	2300      	movs	r3, #0
 80086d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80086d4:	4b84      	ldr	r3, [pc, #528]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80086d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d101      	bne.n	80086e4 <HAL_RCC_OscConfig+0x2b4>
 80086e0:	2301      	movs	r3, #1
 80086e2:	e000      	b.n	80086e6 <HAL_RCC_OscConfig+0x2b6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00d      	beq.n	8008706 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ea:	4b7f      	ldr	r3, [pc, #508]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80086ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086ee:	4a7e      	ldr	r2, [pc, #504]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80086f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80086f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80086f6:	4b7c      	ldr	r3, [pc, #496]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80086f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80086fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80086fe:	60fb      	str	r3, [r7, #12]
 8008700:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008702:	2301      	movs	r3, #1
 8008704:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008706:	4b79      	ldr	r3, [pc, #484]	@ (80088ec <HAL_RCC_OscConfig+0x4bc>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800870e:	2b00      	cmp	r3, #0
 8008710:	d118      	bne.n	8008744 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008712:	4b76      	ldr	r3, [pc, #472]	@ (80088ec <HAL_RCC_OscConfig+0x4bc>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a75      	ldr	r2, [pc, #468]	@ (80088ec <HAL_RCC_OscConfig+0x4bc>)
 8008718:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800871c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800871e:	f7fc fdb3 	bl	8005288 <HAL_GetTick>
 8008722:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008724:	e008      	b.n	8008738 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008726:	f7fc fdaf 	bl	8005288 <HAL_GetTick>
 800872a:	4602      	mov	r2, r0
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	1ad3      	subs	r3, r2, r3
 8008730:	2b02      	cmp	r3, #2
 8008732:	d901      	bls.n	8008738 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008734:	2303      	movs	r3, #3
 8008736:	e183      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008738:	4b6c      	ldr	r3, [pc, #432]	@ (80088ec <HAL_RCC_OscConfig+0x4bc>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008740:	2b00      	cmp	r3, #0
 8008742:	d0f0      	beq.n	8008726 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	689b      	ldr	r3, [r3, #8]
 8008748:	2b01      	cmp	r3, #1
 800874a:	d108      	bne.n	800875e <HAL_RCC_OscConfig+0x32e>
 800874c:	4b66      	ldr	r3, [pc, #408]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008752:	4a65      	ldr	r2, [pc, #404]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008754:	f043 0301 	orr.w	r3, r3, #1
 8008758:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800875c:	e024      	b.n	80087a8 <HAL_RCC_OscConfig+0x378>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b05      	cmp	r3, #5
 8008764:	d110      	bne.n	8008788 <HAL_RCC_OscConfig+0x358>
 8008766:	4b60      	ldr	r3, [pc, #384]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008768:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800876c:	4a5e      	ldr	r2, [pc, #376]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800876e:	f043 0304 	orr.w	r3, r3, #4
 8008772:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008776:	4b5c      	ldr	r3, [pc, #368]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800877c:	4a5a      	ldr	r2, [pc, #360]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800877e:	f043 0301 	orr.w	r3, r3, #1
 8008782:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008786:	e00f      	b.n	80087a8 <HAL_RCC_OscConfig+0x378>
 8008788:	4b57      	ldr	r3, [pc, #348]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800878a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800878e:	4a56      	ldr	r2, [pc, #344]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008790:	f023 0301 	bic.w	r3, r3, #1
 8008794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008798:	4b53      	ldr	r3, [pc, #332]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800879a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800879e:	4a52      	ldr	r2, [pc, #328]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80087a0:	f023 0304 	bic.w	r3, r3, #4
 80087a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d016      	beq.n	80087de <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087b0:	f7fc fd6a 	bl	8005288 <HAL_GetTick>
 80087b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087b6:	e00a      	b.n	80087ce <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087b8:	f7fc fd66 	bl	8005288 <HAL_GetTick>
 80087bc:	4602      	mov	r2, r0
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	1ad3      	subs	r3, r2, r3
 80087c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e138      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80087ce:	4b46      	ldr	r3, [pc, #280]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80087d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d4:	f003 0302 	and.w	r3, r3, #2
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0ed      	beq.n	80087b8 <HAL_RCC_OscConfig+0x388>
 80087dc:	e015      	b.n	800880a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087de:	f7fc fd53 	bl	8005288 <HAL_GetTick>
 80087e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087e4:	e00a      	b.n	80087fc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80087e6:	f7fc fd4f 	bl	8005288 <HAL_GetTick>
 80087ea:	4602      	mov	r2, r0
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d901      	bls.n	80087fc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e121      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80087fc:	4b3a      	ldr	r3, [pc, #232]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1ed      	bne.n	80087e6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800880a:	7ffb      	ldrb	r3, [r7, #31]
 800880c:	2b01      	cmp	r3, #1
 800880e:	d105      	bne.n	800881c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008810:	4b35      	ldr	r3, [pc, #212]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008814:	4a34      	ldr	r2, [pc, #208]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008816:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800881a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f003 0320 	and.w	r3, r3, #32
 8008824:	2b00      	cmp	r3, #0
 8008826:	d03c      	beq.n	80088a2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d01c      	beq.n	800886a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008830:	4b2d      	ldr	r3, [pc, #180]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008836:	4a2c      	ldr	r2, [pc, #176]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008840:	f7fc fd22 	bl	8005288 <HAL_GetTick>
 8008844:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008846:	e008      	b.n	800885a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008848:	f7fc fd1e 	bl	8005288 <HAL_GetTick>
 800884c:	4602      	mov	r2, r0
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	1ad3      	subs	r3, r2, r3
 8008852:	2b02      	cmp	r3, #2
 8008854:	d901      	bls.n	800885a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008856:	2303      	movs	r3, #3
 8008858:	e0f2      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800885a:	4b23      	ldr	r3, [pc, #140]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800885c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0ef      	beq.n	8008848 <HAL_RCC_OscConfig+0x418>
 8008868:	e01b      	b.n	80088a2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800886a:	4b1f      	ldr	r3, [pc, #124]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 800886c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008870:	4a1d      	ldr	r2, [pc, #116]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008872:	f023 0301 	bic.w	r3, r3, #1
 8008876:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800887a:	f7fc fd05 	bl	8005288 <HAL_GetTick>
 800887e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008880:	e008      	b.n	8008894 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008882:	f7fc fd01 	bl	8005288 <HAL_GetTick>
 8008886:	4602      	mov	r2, r0
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	1ad3      	subs	r3, r2, r3
 800888c:	2b02      	cmp	r3, #2
 800888e:	d901      	bls.n	8008894 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008890:	2303      	movs	r3, #3
 8008892:	e0d5      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008894:	4b14      	ldr	r3, [pc, #80]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 8008896:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800889a:	f003 0302 	and.w	r3, r3, #2
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1ef      	bne.n	8008882 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f000 80c9 	beq.w	8008a3e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088ac:	4b0e      	ldr	r3, [pc, #56]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f003 030c 	and.w	r3, r3, #12
 80088b4:	2b0c      	cmp	r3, #12
 80088b6:	f000 8083 	beq.w	80089c0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d15e      	bne.n	8008980 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088c2:	4b09      	ldr	r3, [pc, #36]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4a08      	ldr	r2, [pc, #32]	@ (80088e8 <HAL_RCC_OscConfig+0x4b8>)
 80088c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80088cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ce:	f7fc fcdb 	bl	8005288 <HAL_GetTick>
 80088d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088d4:	e00c      	b.n	80088f0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088d6:	f7fc fcd7 	bl	8005288 <HAL_GetTick>
 80088da:	4602      	mov	r2, r0
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	1ad3      	subs	r3, r2, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d905      	bls.n	80088f0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80088e4:	2303      	movs	r3, #3
 80088e6:	e0ab      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
 80088e8:	40021000 	.word	0x40021000
 80088ec:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088f0:	4b55      	ldr	r3, [pc, #340]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1ec      	bne.n	80088d6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80088fc:	4b52      	ldr	r3, [pc, #328]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80088fe:	68da      	ldr	r2, [r3, #12]
 8008900:	4b52      	ldr	r3, [pc, #328]	@ (8008a4c <HAL_RCC_OscConfig+0x61c>)
 8008902:	4013      	ands	r3, r2
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	6a11      	ldr	r1, [r2, #32]
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800890c:	3a01      	subs	r2, #1
 800890e:	0112      	lsls	r2, r2, #4
 8008910:	4311      	orrs	r1, r2
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8008916:	0212      	lsls	r2, r2, #8
 8008918:	4311      	orrs	r1, r2
 800891a:	687a      	ldr	r2, [r7, #4]
 800891c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800891e:	0852      	lsrs	r2, r2, #1
 8008920:	3a01      	subs	r2, #1
 8008922:	0552      	lsls	r2, r2, #21
 8008924:	4311      	orrs	r1, r2
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800892a:	0852      	lsrs	r2, r2, #1
 800892c:	3a01      	subs	r2, #1
 800892e:	0652      	lsls	r2, r2, #25
 8008930:	4311      	orrs	r1, r2
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008936:	06d2      	lsls	r2, r2, #27
 8008938:	430a      	orrs	r2, r1
 800893a:	4943      	ldr	r1, [pc, #268]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 800893c:	4313      	orrs	r3, r2
 800893e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008940:	4b41      	ldr	r3, [pc, #260]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a40      	ldr	r2, [pc, #256]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800894a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800894c:	4b3e      	ldr	r3, [pc, #248]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	4a3d      	ldr	r2, [pc, #244]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008952:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008956:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008958:	f7fc fc96 	bl	8005288 <HAL_GetTick>
 800895c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800895e:	e008      	b.n	8008972 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008960:	f7fc fc92 	bl	8005288 <HAL_GetTick>
 8008964:	4602      	mov	r2, r0
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	2b02      	cmp	r3, #2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e066      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008972:	4b35      	ldr	r3, [pc, #212]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0f0      	beq.n	8008960 <HAL_RCC_OscConfig+0x530>
 800897e:	e05e      	b.n	8008a3e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008980:	4b31      	ldr	r3, [pc, #196]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a30      	ldr	r2, [pc, #192]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 8008986:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800898a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800898c:	f7fc fc7c 	bl	8005288 <HAL_GetTick>
 8008990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008992:	e008      	b.n	80089a6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008994:	f7fc fc78 	bl	8005288 <HAL_GetTick>
 8008998:	4602      	mov	r2, r0
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	1ad3      	subs	r3, r2, r3
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d901      	bls.n	80089a6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e04c      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80089a6:	4b28      	ldr	r3, [pc, #160]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d1f0      	bne.n	8008994 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80089b2:	4b25      	ldr	r3, [pc, #148]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	4924      	ldr	r1, [pc, #144]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80089b8:	4b25      	ldr	r3, [pc, #148]	@ (8008a50 <HAL_RCC_OscConfig+0x620>)
 80089ba:	4013      	ands	r3, r2
 80089bc:	60cb      	str	r3, [r1, #12]
 80089be:	e03e      	b.n	8008a3e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	69db      	ldr	r3, [r3, #28]
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d101      	bne.n	80089cc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80089c8:	2301      	movs	r3, #1
 80089ca:	e039      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80089cc:	4b1e      	ldr	r3, [pc, #120]	@ (8008a48 <HAL_RCC_OscConfig+0x618>)
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089d2:	697b      	ldr	r3, [r7, #20]
 80089d4:	f003 0203 	and.w	r2, r3, #3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d12c      	bne.n	8008a3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089ea:	3b01      	subs	r3, #1
 80089ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d123      	bne.n	8008a3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d11b      	bne.n	8008a3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a0c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d113      	bne.n	8008a3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a1c:	085b      	lsrs	r3, r3, #1
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d109      	bne.n	8008a3a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a30:	085b      	lsrs	r3, r3, #1
 8008a32:	3b01      	subs	r3, #1
 8008a34:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d001      	beq.n	8008a3e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e000      	b.n	8008a40 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3720      	adds	r7, #32
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	40021000 	.word	0x40021000
 8008a4c:	019f800c 	.word	0x019f800c
 8008a50:	feeefffc 	.word	0xfeeefffc

08008a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e11e      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a6c:	4b91      	ldr	r3, [pc, #580]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d910      	bls.n	8008a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7a:	4b8e      	ldr	r3, [pc, #568]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f023 020f 	bic.w	r2, r3, #15
 8008a82:	498c      	ldr	r1, [pc, #560]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a8a:	4b8a      	ldr	r3, [pc, #552]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d001      	beq.n	8008a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e106      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d073      	beq.n	8008b90 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	2b03      	cmp	r3, #3
 8008aae:	d129      	bne.n	8008b04 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008ab0:	4b81      	ldr	r3, [pc, #516]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008abc:	2301      	movs	r3, #1
 8008abe:	e0f4      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008ac0:	f000 f966 	bl	8008d90 <RCC_GetSysClockFreqFromPLLSource>
 8008ac4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	4a7c      	ldr	r2, [pc, #496]	@ (8008cbc <HAL_RCC_ClockConfig+0x268>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d93f      	bls.n	8008b4e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ace:	4b7a      	ldr	r3, [pc, #488]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008ad0:	689b      	ldr	r3, [r3, #8]
 8008ad2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d009      	beq.n	8008aee <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d033      	beq.n	8008b4e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d12f      	bne.n	8008b4e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008aee:	4b72      	ldr	r3, [pc, #456]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008af0:	689b      	ldr	r3, [r3, #8]
 8008af2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008af6:	4a70      	ldr	r2, [pc, #448]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008afc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008afe:	2380      	movs	r3, #128	@ 0x80
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	e024      	b.n	8008b4e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d107      	bne.n	8008b1c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008b0c:	4b6a      	ldr	r3, [pc, #424]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d109      	bne.n	8008b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e0c6      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b1c:	4b66      	ldr	r3, [pc, #408]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d101      	bne.n	8008b2c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e0be      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008b2c:	f000 f8ce 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8008b30:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	4a61      	ldr	r2, [pc, #388]	@ (8008cbc <HAL_RCC_ClockConfig+0x268>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d909      	bls.n	8008b4e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008b3a:	4b5f      	ldr	r3, [pc, #380]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b42:	4a5d      	ldr	r2, [pc, #372]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b48:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008b4a:	2380      	movs	r3, #128	@ 0x80
 8008b4c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	f023 0203 	bic.w	r2, r3, #3
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4957      	ldr	r1, [pc, #348]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b60:	f7fc fb92 	bl	8005288 <HAL_GetTick>
 8008b64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b66:	e00a      	b.n	8008b7e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b68:	f7fc fb8e 	bl	8005288 <HAL_GetTick>
 8008b6c:	4602      	mov	r2, r0
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	1ad3      	subs	r3, r2, r3
 8008b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d901      	bls.n	8008b7e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008b7a:	2303      	movs	r3, #3
 8008b7c:	e095      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f003 020c 	and.w	r2, r3, #12
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	009b      	lsls	r3, r3, #2
 8008b8c:	429a      	cmp	r2, r3
 8008b8e:	d1eb      	bne.n	8008b68 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f003 0302 	and.w	r3, r3, #2
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d023      	beq.n	8008be4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f003 0304 	and.w	r3, r3, #4
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ba8:	4b43      	ldr	r3, [pc, #268]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	4a42      	ldr	r2, [pc, #264]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008bb2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d007      	beq.n	8008bd0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bc2:	689b      	ldr	r3, [r3, #8]
 8008bc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008bd0:	4b39      	ldr	r3, [pc, #228]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	4936      	ldr	r1, [pc, #216]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	608b      	str	r3, [r1, #8]
 8008be2:	e008      	b.n	8008bf6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	2b80      	cmp	r3, #128	@ 0x80
 8008be8:	d105      	bne.n	8008bf6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008bea:	4b33      	ldr	r3, [pc, #204]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	4a32      	ldr	r2, [pc, #200]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008bf0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bf4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 030f 	and.w	r3, r3, #15
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d21d      	bcs.n	8008c40 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c04:	4b2b      	ldr	r3, [pc, #172]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f023 020f 	bic.w	r2, r3, #15
 8008c0c:	4929      	ldr	r1, [pc, #164]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008c14:	f7fc fb38 	bl	8005288 <HAL_GetTick>
 8008c18:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1a:	e00a      	b.n	8008c32 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c1c:	f7fc fb34 	bl	8005288 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d901      	bls.n	8008c32 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008c2e:	2303      	movs	r3, #3
 8008c30:	e03b      	b.n	8008caa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c32:	4b20      	ldr	r3, [pc, #128]	@ (8008cb4 <HAL_RCC_ClockConfig+0x260>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 030f 	and.w	r3, r3, #15
 8008c3a:	683a      	ldr	r2, [r7, #0]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d1ed      	bne.n	8008c1c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f003 0304 	and.w	r3, r3, #4
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008c4e:	689b      	ldr	r3, [r3, #8]
 8008c50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	4917      	ldr	r1, [pc, #92]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0308 	and.w	r3, r3, #8
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d009      	beq.n	8008c7e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c6a:	4b13      	ldr	r3, [pc, #76]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	00db      	lsls	r3, r3, #3
 8008c78:	490f      	ldr	r1, [pc, #60]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008c7e:	f000 f825 	bl	8008ccc <HAL_RCC_GetSysClockFreq>
 8008c82:	4602      	mov	r2, r0
 8008c84:	4b0c      	ldr	r3, [pc, #48]	@ (8008cb8 <HAL_RCC_ClockConfig+0x264>)
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	091b      	lsrs	r3, r3, #4
 8008c8a:	f003 030f 	and.w	r3, r3, #15
 8008c8e:	490c      	ldr	r1, [pc, #48]	@ (8008cc0 <HAL_RCC_ClockConfig+0x26c>)
 8008c90:	5ccb      	ldrb	r3, [r1, r3]
 8008c92:	f003 031f 	and.w	r3, r3, #31
 8008c96:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8008cc4 <HAL_RCC_ClockConfig+0x270>)
 8008c9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008c9e:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <HAL_RCC_ClockConfig+0x274>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f7fc faa4 	bl	80051f0 <HAL_InitTick>
 8008ca8:	4603      	mov	r3, r0
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3718      	adds	r7, #24
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	40022000 	.word	0x40022000
 8008cb8:	40021000 	.word	0x40021000
 8008cbc:	04c4b400 	.word	0x04c4b400
 8008cc0:	0800c884 	.word	0x0800c884
 8008cc4:	200000bc 	.word	0x200000bc
 8008cc8:	200000c0 	.word	0x200000c0

08008ccc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 030c 	and.w	r3, r3, #12
 8008cda:	2b04      	cmp	r3, #4
 8008cdc:	d102      	bne.n	8008ce4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008cde:	4b2a      	ldr	r3, [pc, #168]	@ (8008d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008ce0:	613b      	str	r3, [r7, #16]
 8008ce2:	e047      	b.n	8008d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008ce4:	4b27      	ldr	r3, [pc, #156]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f003 030c 	and.w	r3, r3, #12
 8008cec:	2b08      	cmp	r3, #8
 8008cee:	d102      	bne.n	8008cf6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008cf0:	4b26      	ldr	r3, [pc, #152]	@ (8008d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008cf2:	613b      	str	r3, [r7, #16]
 8008cf4:	e03e      	b.n	8008d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008cf6:	4b23      	ldr	r3, [pc, #140]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	f003 030c 	and.w	r3, r3, #12
 8008cfe:	2b0c      	cmp	r3, #12
 8008d00:	d136      	bne.n	8008d70 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d02:	4b20      	ldr	r3, [pc, #128]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d0c:	4b1d      	ldr	r3, [pc, #116]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	3301      	adds	r3, #1
 8008d18:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d10c      	bne.n	8008d3a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d20:	4a1a      	ldr	r2, [pc, #104]	@ (8008d8c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	4a16      	ldr	r2, [pc, #88]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d2a:	68d2      	ldr	r2, [r2, #12]
 8008d2c:	0a12      	lsrs	r2, r2, #8
 8008d2e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	617b      	str	r3, [r7, #20]
      break;
 8008d38:	e00c      	b.n	8008d54 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d3a:	4a13      	ldr	r2, [pc, #76]	@ (8008d88 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	4a10      	ldr	r2, [pc, #64]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d44:	68d2      	ldr	r2, [r2, #12]
 8008d46:	0a12      	lsrs	r2, r2, #8
 8008d48:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]
      break;
 8008d52:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d54:	4b0b      	ldr	r3, [pc, #44]	@ (8008d84 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	0e5b      	lsrs	r3, r3, #25
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	3301      	adds	r3, #1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	613b      	str	r3, [r7, #16]
 8008d6e:	e001      	b.n	8008d74 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008d74:	693b      	ldr	r3, [r7, #16]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	371c      	adds	r7, #28
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	40021000 	.word	0x40021000
 8008d88:	00f42400 	.word	0x00f42400
 8008d8c:	007a1200 	.word	0x007a1200

08008d90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b087      	sub	sp, #28
 8008d94:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d96:	4b1e      	ldr	r3, [pc, #120]	@ (8008e10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008da0:	4b1b      	ldr	r3, [pc, #108]	@ (8008e10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	091b      	lsrs	r3, r3, #4
 8008da6:	f003 030f 	and.w	r3, r3, #15
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d10c      	bne.n	8008dce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008db4:	4a17      	ldr	r2, [pc, #92]	@ (8008e14 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dbc:	4a14      	ldr	r2, [pc, #80]	@ (8008e10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008dbe:	68d2      	ldr	r2, [r2, #12]
 8008dc0:	0a12      	lsrs	r2, r2, #8
 8008dc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008dc6:	fb02 f303 	mul.w	r3, r2, r3
 8008dca:	617b      	str	r3, [r7, #20]
    break;
 8008dcc:	e00c      	b.n	8008de8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008dce:	4a12      	ldr	r2, [pc, #72]	@ (8008e18 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008dd8:	68d2      	ldr	r2, [r2, #12]
 8008dda:	0a12      	lsrs	r2, r2, #8
 8008ddc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8008de0:	fb02 f303 	mul.w	r3, r2, r3
 8008de4:	617b      	str	r3, [r7, #20]
    break;
 8008de6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008de8:	4b09      	ldr	r3, [pc, #36]	@ (8008e10 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	0e5b      	lsrs	r3, r3, #25
 8008dee:	f003 0303 	and.w	r3, r3, #3
 8008df2:	3301      	adds	r3, #1
 8008df4:	005b      	lsls	r3, r3, #1
 8008df6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e00:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008e02:	687b      	ldr	r3, [r7, #4]
}
 8008e04:	4618      	mov	r0, r3
 8008e06:	371c      	adds	r7, #28
 8008e08:	46bd      	mov	sp, r7
 8008e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0e:	4770      	bx	lr
 8008e10:	40021000 	.word	0x40021000
 8008e14:	007a1200 	.word	0x007a1200
 8008e18:	00f42400 	.word	0x00f42400

08008e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b086      	sub	sp, #24
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008e24:	2300      	movs	r3, #0
 8008e26:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008e28:	2300      	movs	r3, #0
 8008e2a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	f000 8098 	beq.w	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e3e:	4b43      	ldr	r3, [pc, #268]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10d      	bne.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e4a:	4b40      	ldr	r3, [pc, #256]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e4e:	4a3f      	ldr	r2, [pc, #252]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e54:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e56:	4b3d      	ldr	r3, [pc, #244]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e5e:	60bb      	str	r3, [r7, #8]
 8008e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e62:	2301      	movs	r3, #1
 8008e64:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e66:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a39      	ldr	r2, [pc, #228]	@ (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008e72:	f7fc fa09 	bl	8005288 <HAL_GetTick>
 8008e76:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e78:	e009      	b.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7a:	f7fc fa05 	bl	8005288 <HAL_GetTick>
 8008e7e:	4602      	mov	r2, r0
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	1ad3      	subs	r3, r2, r3
 8008e84:	2b02      	cmp	r3, #2
 8008e86:	d902      	bls.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	74fb      	strb	r3, [r7, #19]
        break;
 8008e8c:	e005      	b.n	8008e9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008e8e:	4b30      	ldr	r3, [pc, #192]	@ (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d0ef      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e9a:	7cfb      	ldrb	r3, [r7, #19]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d159      	bne.n	8008f54 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eaa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d01e      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d019      	beq.n	8008ef0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008ebc:	4b23      	ldr	r3, [pc, #140]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ec6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ec8:	4b20      	ldr	r3, [pc, #128]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ece:	4a1f      	ldr	r2, [pc, #124]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ed0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ed8:	4b1c      	ldr	r3, [pc, #112]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ede:	4a1b      	ldr	r2, [pc, #108]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ee8:	4a18      	ldr	r2, [pc, #96]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	f003 0301 	and.w	r3, r3, #1
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d016      	beq.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008efa:	f7fc f9c5 	bl	8005288 <HAL_GetTick>
 8008efe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f00:	e00b      	b.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f02:	f7fc f9c1 	bl	8005288 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d902      	bls.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008f14:	2303      	movs	r3, #3
 8008f16:	74fb      	strb	r3, [r7, #19]
            break;
 8008f18:	e006      	b.n	8008f28 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f20:	f003 0302 	and.w	r3, r3, #2
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d0ec      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008f28:	7cfb      	ldrb	r3, [r7, #19]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d10b      	bne.n	8008f46 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008f2e:	4b07      	ldr	r3, [pc, #28]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008f3c:	4903      	ldr	r1, [pc, #12]	@ (8008f4c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8008f44:	e008      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008f46:	7cfb      	ldrb	r3, [r7, #19]
 8008f48:	74bb      	strb	r3, [r7, #18]
 8008f4a:	e005      	b.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f54:	7cfb      	ldrb	r3, [r7, #19]
 8008f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f58:	7c7b      	ldrb	r3, [r7, #17]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d105      	bne.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f5e:	4ba7      	ldr	r3, [pc, #668]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f62:	4aa6      	ldr	r2, [pc, #664]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f68:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f76:	4ba1      	ldr	r3, [pc, #644]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f7c:	f023 0203 	bic.w	r2, r3, #3
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	685b      	ldr	r3, [r3, #4]
 8008f84:	499d      	ldr	r1, [pc, #628]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 0302 	and.w	r3, r3, #2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f98:	4b98      	ldr	r3, [pc, #608]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008f9e:	f023 020c 	bic.w	r2, r3, #12
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	4995      	ldr	r1, [pc, #596]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0304 	and.w	r3, r3, #4
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008fba:	4b90      	ldr	r3, [pc, #576]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fc0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	68db      	ldr	r3, [r3, #12]
 8008fc8:	498c      	ldr	r1, [pc, #560]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f003 0308 	and.w	r3, r3, #8
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008fdc:	4b87      	ldr	r3, [pc, #540]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008fe2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	4984      	ldr	r1, [pc, #528]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f003 0310 	and.w	r3, r3, #16
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008ffe:	4b7f      	ldr	r3, [pc, #508]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	695b      	ldr	r3, [r3, #20]
 800900c:	497b      	ldr	r1, [pc, #492]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f003 0320 	and.w	r3, r3, #32
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009020:	4b76      	ldr	r3, [pc, #472]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009022:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009026:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	699b      	ldr	r3, [r3, #24]
 800902e:	4973      	ldr	r1, [pc, #460]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009030:	4313      	orrs	r3, r2
 8009032:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00a      	beq.n	8009058 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009042:	4b6e      	ldr	r3, [pc, #440]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009048:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	496a      	ldr	r1, [pc, #424]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00a      	beq.n	800907a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009064:	4b65      	ldr	r3, [pc, #404]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800906a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	4962      	ldr	r1, [pc, #392]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009074:	4313      	orrs	r3, r2
 8009076:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00a      	beq.n	800909c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009086:	4b5d      	ldr	r3, [pc, #372]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800908c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009094:	4959      	ldr	r1, [pc, #356]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009096:	4313      	orrs	r3, r2
 8009098:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00a      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80090a8:	4b54      	ldr	r3, [pc, #336]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ae:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090b6:	4951      	ldr	r1, [pc, #324]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090b8:	4313      	orrs	r3, r2
 80090ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d015      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090ca:	4b4c      	ldr	r3, [pc, #304]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090d0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d8:	4948      	ldr	r1, [pc, #288]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80090e8:	d105      	bne.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090ea:	4b44      	ldr	r3, [pc, #272]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	4a43      	ldr	r2, [pc, #268]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80090f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80090f4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d015      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009102:	4b3e      	ldr	r3, [pc, #248]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009108:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009110:	493a      	ldr	r1, [pc, #232]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009112:	4313      	orrs	r3, r2
 8009114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009120:	d105      	bne.n	800912e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009122:	4b36      	ldr	r3, [pc, #216]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	4a35      	ldr	r2, [pc, #212]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800912c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009136:	2b00      	cmp	r3, #0
 8009138:	d015      	beq.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800913a:	4b30      	ldr	r3, [pc, #192]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800913c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009140:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009148:	492c      	ldr	r1, [pc, #176]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800914a:	4313      	orrs	r3, r2
 800914c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009154:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009158:	d105      	bne.n	8009166 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800915a:	4b28      	ldr	r3, [pc, #160]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800915c:	68db      	ldr	r3, [r3, #12]
 800915e:	4a27      	ldr	r2, [pc, #156]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009160:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009164:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800916e:	2b00      	cmp	r3, #0
 8009170:	d015      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009172:	4b22      	ldr	r3, [pc, #136]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009178:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009180:	491e      	ldr	r1, [pc, #120]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009182:	4313      	orrs	r3, r2
 8009184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009190:	d105      	bne.n	800919e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009192:	4b1a      	ldr	r3, [pc, #104]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	4a19      	ldr	r2, [pc, #100]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800919c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d015      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80091aa:	4b14      	ldr	r3, [pc, #80]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091b8:	4910      	ldr	r1, [pc, #64]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80091c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80091c8:	d105      	bne.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80091ca:	4b0c      	ldr	r3, [pc, #48]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	4a0b      	ldr	r2, [pc, #44]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80091d4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d018      	beq.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80091e2:	4b06      	ldr	r3, [pc, #24]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091e8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80091f0:	4902      	ldr	r1, [pc, #8]	@ (80091fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	e001      	b.n	8009200 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80091fc:	40021000 	.word	0x40021000
 8009200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009206:	d105      	bne.n	8009214 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009208:	4b21      	ldr	r3, [pc, #132]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800920a:	68db      	ldr	r3, [r3, #12]
 800920c:	4a20      	ldr	r2, [pc, #128]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800920e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009212:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800921c:	2b00      	cmp	r3, #0
 800921e:	d015      	beq.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009220:	4b1b      	ldr	r3, [pc, #108]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009222:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009226:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800922e:	4918      	ldr	r1, [pc, #96]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009230:	4313      	orrs	r3, r2
 8009232:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800923a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800923e:	d105      	bne.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009240:	4b13      	ldr	r3, [pc, #76]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	4a12      	ldr	r2, [pc, #72]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009246:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800924a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d015      	beq.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009258:	4b0d      	ldr	r3, [pc, #52]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800925a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800925e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009266:	490a      	ldr	r1, [pc, #40]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009268:	4313      	orrs	r3, r2
 800926a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009272:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009276:	d105      	bne.n	8009284 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009278:	4b05      	ldr	r3, [pc, #20]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	4a04      	ldr	r2, [pc, #16]	@ (8009290 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800927e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009282:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009284:	7cbb      	ldrb	r3, [r7, #18]
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	40021000 	.word	0x40021000

08009294 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b084      	sub	sp, #16
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80092a2:	2301      	movs	r3, #1
 80092a4:	e09d      	b.n	80093e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d108      	bne.n	80092c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80092b6:	d009      	beq.n	80092cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2200      	movs	r2, #0
 80092bc:	61da      	str	r2, [r3, #28]
 80092be:	e005      	b.n	80092cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80092d8:	b2db      	uxtb	r3, r3
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d106      	bne.n	80092ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2200      	movs	r2, #0
 80092e2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fb fdaa 	bl	8004e40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	681a      	ldr	r2, [r3, #0]
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009302:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800930c:	d902      	bls.n	8009314 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800930e:	2300      	movs	r3, #0
 8009310:	60fb      	str	r3, [r7, #12]
 8009312:	e002      	b.n	800931a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009318:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009322:	d007      	beq.n	8009334 <HAL_SPI_Init+0xa0>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	68db      	ldr	r3, [r3, #12]
 8009328:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800932c:	d002      	beq.n	8009334 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009344:	431a      	orrs	r2, r3
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	695b      	ldr	r3, [r3, #20]
 8009354:	f003 0301 	and.w	r3, r3, #1
 8009358:	431a      	orrs	r2, r3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	699b      	ldr	r3, [r3, #24]
 800935e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009362:	431a      	orrs	r2, r3
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	6a1b      	ldr	r3, [r3, #32]
 8009372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009376:	ea42 0103 	orr.w	r1, r2, r3
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800937e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	430a      	orrs	r2, r1
 8009388:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	0c1b      	lsrs	r3, r3, #16
 8009390:	f003 0204 	and.w	r2, r3, #4
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009398:	f003 0310 	and.w	r3, r3, #16
 800939c:	431a      	orrs	r2, r3
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093a2:	f003 0308 	and.w	r3, r3, #8
 80093a6:	431a      	orrs	r2, r3
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80093b0:	ea42 0103 	orr.w	r1, r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	430a      	orrs	r2, r1
 80093c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	69da      	ldr	r2, [r3, #28]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80093d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2200      	movs	r2, #0
 80093d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b08a      	sub	sp, #40	@ 0x28
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	60f8      	str	r0, [r7, #12]
 80093f2:	60b9      	str	r1, [r7, #8]
 80093f4:	607a      	str	r2, [r7, #4]
 80093f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80093f8:	2301      	movs	r3, #1
 80093fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093fc:	2300      	movs	r3, #0
 80093fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009408:	2b01      	cmp	r3, #1
 800940a:	d101      	bne.n	8009410 <HAL_SPI_TransmitReceive+0x26>
 800940c:	2302      	movs	r3, #2
 800940e:	e20a      	b.n	8009826 <HAL_SPI_TransmitReceive+0x43c>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	2201      	movs	r2, #1
 8009414:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009418:	f7fb ff36 	bl	8005288 <HAL_GetTick>
 800941c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009424:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800942c:	887b      	ldrh	r3, [r7, #2]
 800942e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009430:	887b      	ldrh	r3, [r7, #2]
 8009432:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009434:	7efb      	ldrb	r3, [r7, #27]
 8009436:	2b01      	cmp	r3, #1
 8009438:	d00e      	beq.n	8009458 <HAL_SPI_TransmitReceive+0x6e>
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009440:	d106      	bne.n	8009450 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	689b      	ldr	r3, [r3, #8]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d102      	bne.n	8009450 <HAL_SPI_TransmitReceive+0x66>
 800944a:	7efb      	ldrb	r3, [r7, #27]
 800944c:	2b04      	cmp	r3, #4
 800944e:	d003      	beq.n	8009458 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009450:	2302      	movs	r3, #2
 8009452:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009456:	e1e0      	b.n	800981a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d005      	beq.n	800946a <HAL_SPI_TransmitReceive+0x80>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d002      	beq.n	800946a <HAL_SPI_TransmitReceive+0x80>
 8009464:	887b      	ldrh	r3, [r7, #2]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d103      	bne.n	8009472 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800946a:	2301      	movs	r3, #1
 800946c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009470:	e1d3      	b.n	800981a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b04      	cmp	r3, #4
 800947c:	d003      	beq.n	8009486 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	2205      	movs	r2, #5
 8009482:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2200      	movs	r2, #0
 800948a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	887a      	ldrh	r2, [r7, #2]
 8009496:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	887a      	ldrh	r2, [r7, #2]
 800949e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	887a      	ldrh	r2, [r7, #2]
 80094ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	887a      	ldrh	r2, [r7, #2]
 80094b2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2200      	movs	r2, #0
 80094be:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80094c8:	d802      	bhi.n	80094d0 <HAL_SPI_TransmitReceive+0xe6>
 80094ca:	8a3b      	ldrh	r3, [r7, #16]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d908      	bls.n	80094e2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	685a      	ldr	r2, [r3, #4]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80094de:	605a      	str	r2, [r3, #4]
 80094e0:	e007      	b.n	80094f2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	685a      	ldr	r2, [r3, #4]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80094f0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fc:	2b40      	cmp	r3, #64	@ 0x40
 80094fe:	d007      	beq.n	8009510 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800950e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009518:	f240 8081 	bls.w	800961e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_SPI_TransmitReceive+0x140>
 8009524:	8a7b      	ldrh	r3, [r7, #18]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d16d      	bne.n	8009606 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952e:	881a      	ldrh	r2, [r3, #0]
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800953a:	1c9a      	adds	r2, r3, #2
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009544:	b29b      	uxth	r3, r3
 8009546:	3b01      	subs	r3, #1
 8009548:	b29a      	uxth	r2, r3
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800954e:	e05a      	b.n	8009606 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f003 0302 	and.w	r3, r3, #2
 800955a:	2b02      	cmp	r3, #2
 800955c:	d11b      	bne.n	8009596 <HAL_SPI_TransmitReceive+0x1ac>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009562:	b29b      	uxth	r3, r3
 8009564:	2b00      	cmp	r3, #0
 8009566:	d016      	beq.n	8009596 <HAL_SPI_TransmitReceive+0x1ac>
 8009568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800956a:	2b01      	cmp	r3, #1
 800956c:	d113      	bne.n	8009596 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009572:	881a      	ldrh	r2, [r3, #0]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800957e:	1c9a      	adds	r2, r3, #2
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009588:	b29b      	uxth	r3, r3
 800958a:	3b01      	subs	r3, #1
 800958c:	b29a      	uxth	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009592:	2300      	movs	r3, #0
 8009594:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	689b      	ldr	r3, [r3, #8]
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d11c      	bne.n	80095de <HAL_SPI_TransmitReceive+0x1f4>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095aa:	b29b      	uxth	r3, r3
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d016      	beq.n	80095de <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68da      	ldr	r2, [r3, #12]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095ba:	b292      	uxth	r2, r2
 80095bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095c2:	1c9a      	adds	r2, r3, #2
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80095ce:	b29b      	uxth	r3, r3
 80095d0:	3b01      	subs	r3, #1
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80095da:	2301      	movs	r3, #1
 80095dc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80095de:	f7fb fe53 	bl	8005288 <HAL_GetTick>
 80095e2:	4602      	mov	r2, r0
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d80b      	bhi.n	8009606 <HAL_SPI_TransmitReceive+0x21c>
 80095ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095f4:	d007      	beq.n	8009606 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80095f6:	2303      	movs	r3, #3
 80095f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2201      	movs	r2, #1
 8009600:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009604:	e109      	b.n	800981a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800960a:	b29b      	uxth	r3, r3
 800960c:	2b00      	cmp	r3, #0
 800960e:	d19f      	bne.n	8009550 <HAL_SPI_TransmitReceive+0x166>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009616:	b29b      	uxth	r3, r3
 8009618:	2b00      	cmp	r3, #0
 800961a:	d199      	bne.n	8009550 <HAL_SPI_TransmitReceive+0x166>
 800961c:	e0e3      	b.n	80097e6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <HAL_SPI_TransmitReceive+0x244>
 8009626:	8a7b      	ldrh	r3, [r7, #18]
 8009628:	2b01      	cmp	r3, #1
 800962a:	f040 80cf 	bne.w	80097cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009632:	b29b      	uxth	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d912      	bls.n	800965e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800963c:	881a      	ldrh	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009648:	1c9a      	adds	r2, r3, #2
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009652:	b29b      	uxth	r3, r3
 8009654:	3b02      	subs	r3, #2
 8009656:	b29a      	uxth	r2, r3
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800965c:	e0b6      	b.n	80097cc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	330c      	adds	r3, #12
 8009668:	7812      	ldrb	r2, [r2, #0]
 800966a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009670:	1c5a      	adds	r2, r3, #1
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800967a:	b29b      	uxth	r3, r3
 800967c:	3b01      	subs	r3, #1
 800967e:	b29a      	uxth	r2, r3
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009684:	e0a2      	b.n	80097cc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	f003 0302 	and.w	r3, r3, #2
 8009690:	2b02      	cmp	r3, #2
 8009692:	d134      	bne.n	80096fe <HAL_SPI_TransmitReceive+0x314>
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009698:	b29b      	uxth	r3, r3
 800969a:	2b00      	cmp	r3, #0
 800969c:	d02f      	beq.n	80096fe <HAL_SPI_TransmitReceive+0x314>
 800969e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d12c      	bne.n	80096fe <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d912      	bls.n	80096d4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096b2:	881a      	ldrh	r2, [r3, #0]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096be:	1c9a      	adds	r2, r3, #2
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096c8:	b29b      	uxth	r3, r3
 80096ca:	3b02      	subs	r3, #2
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80096d2:	e012      	b.n	80096fa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	330c      	adds	r3, #12
 80096de:	7812      	ldrb	r2, [r2, #0]
 80096e0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	3b01      	subs	r3, #1
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096fa:	2300      	movs	r3, #0
 80096fc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f003 0301 	and.w	r3, r3, #1
 8009708:	2b01      	cmp	r3, #1
 800970a:	d148      	bne.n	800979e <HAL_SPI_TransmitReceive+0x3b4>
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009712:	b29b      	uxth	r3, r3
 8009714:	2b00      	cmp	r3, #0
 8009716:	d042      	beq.n	800979e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800971e:	b29b      	uxth	r3, r3
 8009720:	2b01      	cmp	r3, #1
 8009722:	d923      	bls.n	800976c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68da      	ldr	r2, [r3, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972e:	b292      	uxth	r2, r2
 8009730:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009736:	1c9a      	adds	r2, r3, #2
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009742:	b29b      	uxth	r3, r3
 8009744:	3b02      	subs	r3, #2
 8009746:	b29a      	uxth	r2, r3
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009754:	b29b      	uxth	r3, r3
 8009756:	2b01      	cmp	r3, #1
 8009758:	d81f      	bhi.n	800979a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685a      	ldr	r2, [r3, #4]
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009768:	605a      	str	r2, [r3, #4]
 800976a:	e016      	b.n	800979a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f103 020c 	add.w	r2, r3, #12
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009778:	7812      	ldrb	r2, [r2, #0]
 800977a:	b2d2      	uxtb	r2, r2
 800977c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009782:	1c5a      	adds	r2, r3, #1
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800978e:	b29b      	uxth	r3, r3
 8009790:	3b01      	subs	r3, #1
 8009792:	b29a      	uxth	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800979a:	2301      	movs	r3, #1
 800979c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800979e:	f7fb fd73 	bl	8005288 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	69fb      	ldr	r3, [r7, #28]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d803      	bhi.n	80097b6 <HAL_SPI_TransmitReceive+0x3cc>
 80097ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097b4:	d102      	bne.n	80097bc <HAL_SPI_TransmitReceive+0x3d2>
 80097b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d107      	bne.n	80097cc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80097bc:	2303      	movs	r3, #3
 80097be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 80097ca:	e026      	b.n	800981a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	f47f af57 	bne.w	8009686 <HAL_SPI_TransmitReceive+0x29c>
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f47f af50 	bne.w	8009686 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80097e6:	69fa      	ldr	r2, [r7, #28]
 80097e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80097ea:	68f8      	ldr	r0, [r7, #12]
 80097ec:	f000 f93e 	bl	8009a6c <SPI_EndRxTxTransaction>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80097f6:	2301      	movs	r3, #1
 80097f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	2220      	movs	r2, #32
 8009800:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009806:	2b00      	cmp	r3, #0
 8009808:	d003      	beq.n	8009812 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800980a:	2301      	movs	r3, #1
 800980c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009810:	e003      	b.n	800981a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009822:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009826:	4618      	mov	r0, r3
 8009828:	3728      	adds	r7, #40	@ 0x28
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
	...

08009830 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b088      	sub	sp, #32
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	603b      	str	r3, [r7, #0]
 800983c:	4613      	mov	r3, r2
 800983e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009840:	f7fb fd22 	bl	8005288 <HAL_GetTick>
 8009844:	4602      	mov	r2, r0
 8009846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009848:	1a9b      	subs	r3, r3, r2
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	4413      	add	r3, r2
 800984e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009850:	f7fb fd1a 	bl	8005288 <HAL_GetTick>
 8009854:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009856:	4b39      	ldr	r3, [pc, #228]	@ (800993c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	015b      	lsls	r3, r3, #5
 800985c:	0d1b      	lsrs	r3, r3, #20
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009866:	e054      	b.n	8009912 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800986e:	d050      	beq.n	8009912 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009870:	f7fb fd0a 	bl	8005288 <HAL_GetTick>
 8009874:	4602      	mov	r2, r0
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	69fa      	ldr	r2, [r7, #28]
 800987c:	429a      	cmp	r2, r3
 800987e:	d902      	bls.n	8009886 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009880:	69fb      	ldr	r3, [r7, #28]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d13d      	bne.n	8009902 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	685a      	ldr	r2, [r3, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009894:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800989e:	d111      	bne.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80098a8:	d004      	beq.n	80098b4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80098b2:	d107      	bne.n	80098c4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098c2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80098cc:	d10f      	bne.n	80098ee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098ec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80098fe:	2303      	movs	r3, #3
 8009900:	e017      	b.n	8009932 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d101      	bne.n	800990c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	3b01      	subs	r3, #1
 8009910:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689a      	ldr	r2, [r3, #8]
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	4013      	ands	r3, r2
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	429a      	cmp	r2, r3
 8009920:	bf0c      	ite	eq
 8009922:	2301      	moveq	r3, #1
 8009924:	2300      	movne	r3, #0
 8009926:	b2db      	uxtb	r3, r3
 8009928:	461a      	mov	r2, r3
 800992a:	79fb      	ldrb	r3, [r7, #7]
 800992c:	429a      	cmp	r2, r3
 800992e:	d19b      	bne.n	8009868 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009930:	2300      	movs	r3, #0
}
 8009932:	4618      	mov	r0, r3
 8009934:	3720      	adds	r7, #32
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	200000bc 	.word	0x200000bc

08009940 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b08a      	sub	sp, #40	@ 0x28
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	60b9      	str	r1, [r7, #8]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009952:	f7fb fc99 	bl	8005288 <HAL_GetTick>
 8009956:	4602      	mov	r2, r0
 8009958:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	683a      	ldr	r2, [r7, #0]
 800995e:	4413      	add	r3, r2
 8009960:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8009962:	f7fb fc91 	bl	8005288 <HAL_GetTick>
 8009966:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	330c      	adds	r3, #12
 800996e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009970:	4b3d      	ldr	r3, [pc, #244]	@ (8009a68 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	00da      	lsls	r2, r3, #3
 800997c:	1ad3      	subs	r3, r2, r3
 800997e:	0d1b      	lsrs	r3, r3, #20
 8009980:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009982:	fb02 f303 	mul.w	r3, r2, r3
 8009986:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009988:	e060      	b.n	8009a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800998a:	68bb      	ldr	r3, [r7, #8]
 800998c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009990:	d107      	bne.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d104      	bne.n	80099a2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	b2db      	uxtb	r3, r3
 800999e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a8:	d050      	beq.n	8009a4c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80099aa:	f7fb fc6d 	bl	8005288 <HAL_GetTick>
 80099ae:	4602      	mov	r2, r0
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	1ad3      	subs	r3, r2, r3
 80099b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d902      	bls.n	80099c0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d13d      	bne.n	8009a3c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	685a      	ldr	r2, [r3, #4]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80099ce:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099d8:	d111      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0xbe>
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80099e2:	d004      	beq.n	80099ee <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	689b      	ldr	r3, [r3, #8]
 80099e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80099ec:	d107      	bne.n	80099fe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	681a      	ldr	r2, [r3, #0]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80099fc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a06:	d10f      	bne.n	8009a28 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009a16:	601a      	str	r2, [r3, #0]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a26:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2200      	movs	r2, #0
 8009a34:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8009a38:	2303      	movs	r3, #3
 8009a3a:	e010      	b.n	8009a5e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009a3c:	69bb      	ldr	r3, [r7, #24]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009a42:	2300      	movs	r3, #0
 8009a44:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8009a46:	69bb      	ldr	r3, [r7, #24]
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	4013      	ands	r3, r2
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d196      	bne.n	800998a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009a5c:	2300      	movs	r3, #0
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3728      	adds	r7, #40	@ 0x28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}
 8009a66:	bf00      	nop
 8009a68:	200000bc 	.word	0x200000bc

08009a6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af02      	add	r7, sp, #8
 8009a72:	60f8      	str	r0, [r7, #12]
 8009a74:	60b9      	str	r1, [r7, #8]
 8009a76:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	9300      	str	r3, [sp, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff ff5b 	bl	8009940 <SPI_WaitFifoStateUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e027      	b.n	8009af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	2180      	movs	r1, #128	@ 0x80
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fec0 	bl	8009830 <SPI_WaitFlagStateUntilTimeout>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d007      	beq.n	8009ac6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009aba:	f043 0220 	orr.w	r2, r3, #32
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009ac2:	2303      	movs	r3, #3
 8009ac4:	e014      	b.n	8009af0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009ad2:	68f8      	ldr	r0, [r7, #12]
 8009ad4:	f7ff ff34 	bl	8009940 <SPI_WaitFifoStateUntilTimeout>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009ae2:	f043 0220 	orr.w	r2, r3, #32
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e000      	b.n	8009af0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3710      	adds	r7, #16
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}

08009af8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d101      	bne.n	8009b0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e049      	b.n	8009b9e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d106      	bne.n	8009b24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f7fb f9d0 	bl	8004ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2202      	movs	r2, #2
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681a      	ldr	r2, [r3, #0]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	3304      	adds	r3, #4
 8009b34:	4619      	mov	r1, r3
 8009b36:	4610      	mov	r0, r2
 8009b38:	f000 fe04 	bl	800a744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3708      	adds	r7, #8
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b085      	sub	sp, #20
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d001      	beq.n	8009bc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	e04f      	b.n	8009c60 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f042 0201 	orr.w	r2, r2, #1
 8009bd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	4a23      	ldr	r2, [pc, #140]	@ (8009c6c <HAL_TIM_Base_Start_IT+0xc4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d01d      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bea:	d018      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a1f      	ldr	r2, [pc, #124]	@ (8009c70 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bf2:	4293      	cmp	r3, r2
 8009bf4:	d013      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8009c74 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d00e      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	4a1c      	ldr	r2, [pc, #112]	@ (8009c78 <HAL_TIM_Base_Start_IT+0xd0>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	d009      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8009c7c <HAL_TIM_Base_Start_IT+0xd4>)
 8009c10:	4293      	cmp	r3, r2
 8009c12:	d004      	beq.n	8009c1e <HAL_TIM_Base_Start_IT+0x76>
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	4a19      	ldr	r2, [pc, #100]	@ (8009c80 <HAL_TIM_Base_Start_IT+0xd8>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d115      	bne.n	8009c4a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	4b17      	ldr	r3, [pc, #92]	@ (8009c84 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c26:	4013      	ands	r3, r2
 8009c28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	2b06      	cmp	r3, #6
 8009c2e:	d015      	beq.n	8009c5c <HAL_TIM_Base_Start_IT+0xb4>
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c36:	d011      	beq.n	8009c5c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	681a      	ldr	r2, [r3, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c48:	e008      	b.n	8009c5c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681a      	ldr	r2, [r3, #0]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f042 0201 	orr.w	r2, r2, #1
 8009c58:	601a      	str	r2, [r3, #0]
 8009c5a:	e000      	b.n	8009c5e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3714      	adds	r7, #20
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	40000400 	.word	0x40000400
 8009c74:	40000800 	.word	0x40000800
 8009c78:	40013400 	.word	0x40013400
 8009c7c:	40014000 	.word	0x40014000
 8009c80:	40015000 	.word	0x40015000
 8009c84:	00010007 	.word	0x00010007

08009c88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d101      	bne.n	8009c9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009c96:	2301      	movs	r3, #1
 8009c98:	e049      	b.n	8009d2e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ca0:	b2db      	uxtb	r3, r3
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d106      	bne.n	8009cb4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 f841 	bl	8009d36 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2202      	movs	r2, #2
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	3304      	adds	r3, #4
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	4610      	mov	r0, r2
 8009cc8:	f000 fd3c 	bl	800a744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2201      	movs	r2, #1
 8009cd0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2201      	movs	r2, #1
 8009ce0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2201      	movs	r2, #1
 8009cf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2201      	movs	r2, #1
 8009d08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3708      	adds	r7, #8
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009d36:	b480      	push	{r7}
 8009d38:	b083      	sub	sp, #12
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009d3e:	bf00      	nop
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009d4a:	b580      	push	{r7, lr}
 8009d4c:	b082      	sub	sp, #8
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e049      	b.n	8009df0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 f841 	bl	8009df8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4619      	mov	r1, r3
 8009d88:	4610      	mov	r0, r2
 8009d8a:	f000 fcdb 	bl	800a744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2201      	movs	r2, #1
 8009d9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2201      	movs	r2, #1
 8009daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2201      	movs	r2, #1
 8009dba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2201      	movs	r2, #1
 8009dd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2201      	movs	r2, #1
 8009de2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009dee:	2300      	movs	r3, #0
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3708      	adds	r7, #8
 8009df4:	46bd      	mov	sp, r7
 8009df6:	bd80      	pop	{r7, pc}

08009df8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009e00:	bf00      	nop
 8009e02:	370c      	adds	r7, #12
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d109      	bne.n	8009e30 <HAL_TIM_PWM_Start+0x24>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	bf14      	ite	ne
 8009e28:	2301      	movne	r3, #1
 8009e2a:	2300      	moveq	r3, #0
 8009e2c:	b2db      	uxtb	r3, r3
 8009e2e:	e03c      	b.n	8009eaa <HAL_TIM_PWM_Start+0x9e>
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	2b04      	cmp	r3, #4
 8009e34:	d109      	bne.n	8009e4a <HAL_TIM_PWM_Start+0x3e>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8009e3c:	b2db      	uxtb	r3, r3
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	bf14      	ite	ne
 8009e42:	2301      	movne	r3, #1
 8009e44:	2300      	moveq	r3, #0
 8009e46:	b2db      	uxtb	r3, r3
 8009e48:	e02f      	b.n	8009eaa <HAL_TIM_PWM_Start+0x9e>
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d109      	bne.n	8009e64 <HAL_TIM_PWM_Start+0x58>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009e56:	b2db      	uxtb	r3, r3
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	bf14      	ite	ne
 8009e5c:	2301      	movne	r3, #1
 8009e5e:	2300      	moveq	r3, #0
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	e022      	b.n	8009eaa <HAL_TIM_PWM_Start+0x9e>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b0c      	cmp	r3, #12
 8009e68:	d109      	bne.n	8009e7e <HAL_TIM_PWM_Start+0x72>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	bf14      	ite	ne
 8009e76:	2301      	movne	r3, #1
 8009e78:	2300      	moveq	r3, #0
 8009e7a:	b2db      	uxtb	r3, r3
 8009e7c:	e015      	b.n	8009eaa <HAL_TIM_PWM_Start+0x9e>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	2b10      	cmp	r3, #16
 8009e82:	d109      	bne.n	8009e98 <HAL_TIM_PWM_Start+0x8c>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009e8a:	b2db      	uxtb	r3, r3
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	bf14      	ite	ne
 8009e90:	2301      	movne	r3, #1
 8009e92:	2300      	moveq	r3, #0
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	e008      	b.n	8009eaa <HAL_TIM_PWM_Start+0x9e>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	bf14      	ite	ne
 8009ea4:	2301      	movne	r3, #1
 8009ea6:	2300      	moveq	r3, #0
 8009ea8:	b2db      	uxtb	r3, r3
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d001      	beq.n	8009eb2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009eae:	2301      	movs	r3, #1
 8009eb0:	e0a1      	b.n	8009ff6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d104      	bne.n	8009ec2 <HAL_TIM_PWM_Start+0xb6>
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2202      	movs	r2, #2
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009ec0:	e023      	b.n	8009f0a <HAL_TIM_PWM_Start+0xfe>
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	2b04      	cmp	r3, #4
 8009ec6:	d104      	bne.n	8009ed2 <HAL_TIM_PWM_Start+0xc6>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2202      	movs	r2, #2
 8009ecc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009ed0:	e01b      	b.n	8009f0a <HAL_TIM_PWM_Start+0xfe>
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	2b08      	cmp	r3, #8
 8009ed6:	d104      	bne.n	8009ee2 <HAL_TIM_PWM_Start+0xd6>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2202      	movs	r2, #2
 8009edc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009ee0:	e013      	b.n	8009f0a <HAL_TIM_PWM_Start+0xfe>
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b0c      	cmp	r3, #12
 8009ee6:	d104      	bne.n	8009ef2 <HAL_TIM_PWM_Start+0xe6>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2202      	movs	r2, #2
 8009eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8009ef0:	e00b      	b.n	8009f0a <HAL_TIM_PWM_Start+0xfe>
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	2b10      	cmp	r3, #16
 8009ef6:	d104      	bne.n	8009f02 <HAL_TIM_PWM_Start+0xf6>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2202      	movs	r2, #2
 8009efc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009f00:	e003      	b.n	8009f0a <HAL_TIM_PWM_Start+0xfe>
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2202      	movs	r2, #2
 8009f06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	2201      	movs	r2, #1
 8009f10:	6839      	ldr	r1, [r7, #0]
 8009f12:	4618      	mov	r0, r3
 8009f14:	f001 f886 	bl	800b024 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	4a38      	ldr	r2, [pc, #224]	@ (800a000 <HAL_TIM_PWM_Start+0x1f4>)
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d018      	beq.n	8009f54 <HAL_TIM_PWM_Start+0x148>
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a37      	ldr	r2, [pc, #220]	@ (800a004 <HAL_TIM_PWM_Start+0x1f8>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d013      	beq.n	8009f54 <HAL_TIM_PWM_Start+0x148>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a35      	ldr	r2, [pc, #212]	@ (800a008 <HAL_TIM_PWM_Start+0x1fc>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00e      	beq.n	8009f54 <HAL_TIM_PWM_Start+0x148>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a34      	ldr	r2, [pc, #208]	@ (800a00c <HAL_TIM_PWM_Start+0x200>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d009      	beq.n	8009f54 <HAL_TIM_PWM_Start+0x148>
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a32      	ldr	r2, [pc, #200]	@ (800a010 <HAL_TIM_PWM_Start+0x204>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d004      	beq.n	8009f54 <HAL_TIM_PWM_Start+0x148>
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	4a31      	ldr	r2, [pc, #196]	@ (800a014 <HAL_TIM_PWM_Start+0x208>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d101      	bne.n	8009f58 <HAL_TIM_PWM_Start+0x14c>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <HAL_TIM_PWM_Start+0x14e>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d007      	beq.n	8009f6e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	4a23      	ldr	r2, [pc, #140]	@ (800a000 <HAL_TIM_PWM_Start+0x1f4>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d01d      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f80:	d018      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a24      	ldr	r2, [pc, #144]	@ (800a018 <HAL_TIM_PWM_Start+0x20c>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d013      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a22      	ldr	r2, [pc, #136]	@ (800a01c <HAL_TIM_PWM_Start+0x210>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d00e      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	4a1a      	ldr	r2, [pc, #104]	@ (800a004 <HAL_TIM_PWM_Start+0x1f8>)
 8009f9c:	4293      	cmp	r3, r2
 8009f9e:	d009      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	4a18      	ldr	r2, [pc, #96]	@ (800a008 <HAL_TIM_PWM_Start+0x1fc>)
 8009fa6:	4293      	cmp	r3, r2
 8009fa8:	d004      	beq.n	8009fb4 <HAL_TIM_PWM_Start+0x1a8>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a19      	ldr	r2, [pc, #100]	@ (800a014 <HAL_TIM_PWM_Start+0x208>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d115      	bne.n	8009fe0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689a      	ldr	r2, [r3, #8]
 8009fba:	4b19      	ldr	r3, [pc, #100]	@ (800a020 <HAL_TIM_PWM_Start+0x214>)
 8009fbc:	4013      	ands	r3, r2
 8009fbe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	2b06      	cmp	r3, #6
 8009fc4:	d015      	beq.n	8009ff2 <HAL_TIM_PWM_Start+0x1e6>
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fcc:	d011      	beq.n	8009ff2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0201 	orr.w	r2, r2, #1
 8009fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fde:	e008      	b.n	8009ff2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681a      	ldr	r2, [r3, #0]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	f042 0201 	orr.w	r2, r2, #1
 8009fee:	601a      	str	r2, [r3, #0]
 8009ff0:	e000      	b.n	8009ff4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	40012c00 	.word	0x40012c00
 800a004:	40013400 	.word	0x40013400
 800a008:	40014000 	.word	0x40014000
 800a00c:	40014400 	.word	0x40014400
 800a010:	40014800 	.word	0x40014800
 800a014:	40015000 	.word	0x40015000
 800a018:	40000400 	.word	0x40000400
 800a01c:	40000800 	.word	0x40000800
 800a020:	00010007 	.word	0x00010007

0800a024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	68db      	ldr	r3, [r3, #12]
 800a032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	f003 0302 	and.w	r3, r3, #2
 800a042:	2b00      	cmp	r3, #0
 800a044:	d020      	beq.n	800a088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	f003 0302 	and.w	r3, r3, #2
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d01b      	beq.n	800a088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0202 	mvn.w	r2, #2
 800a058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2201      	movs	r2, #1
 800a05e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	699b      	ldr	r3, [r3, #24]
 800a066:	f003 0303 	and.w	r3, r3, #3
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d003      	beq.n	800a076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fb4a 	bl	800a708 <HAL_TIM_IC_CaptureCallback>
 800a074:	e005      	b.n	800a082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f000 fb3c 	bl	800a6f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 fb4d 	bl	800a71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2200      	movs	r2, #0
 800a086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f003 0304 	and.w	r3, r3, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d020      	beq.n	800a0d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f003 0304 	and.w	r3, r3, #4
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d01b      	beq.n	800a0d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f06f 0204 	mvn.w	r2, #4
 800a0a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 fb24 	bl	800a708 <HAL_TIM_IC_CaptureCallback>
 800a0c0:	e005      	b.n	800a0ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 fb16 	bl	800a6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f000 fb27 	bl	800a71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	f003 0308 	and.w	r3, r3, #8
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d020      	beq.n	800a120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f003 0308 	and.w	r3, r3, #8
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d01b      	beq.n	800a120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	f06f 0208 	mvn.w	r2, #8
 800a0f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2204      	movs	r2, #4
 800a0f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	69db      	ldr	r3, [r3, #28]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
 800a102:	2b00      	cmp	r3, #0
 800a104:	d003      	beq.n	800a10e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f000 fafe 	bl	800a708 <HAL_TIM_IC_CaptureCallback>
 800a10c:	e005      	b.n	800a11a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 faf0 	bl	800a6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 fb01 	bl	800a71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	2200      	movs	r2, #0
 800a11e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	f003 0310 	and.w	r3, r3, #16
 800a126:	2b00      	cmp	r3, #0
 800a128:	d020      	beq.n	800a16c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	f003 0310 	and.w	r3, r3, #16
 800a130:	2b00      	cmp	r3, #0
 800a132:	d01b      	beq.n	800a16c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f06f 0210 	mvn.w	r2, #16
 800a13c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2208      	movs	r2, #8
 800a142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d003      	beq.n	800a15a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f000 fad8 	bl	800a708 <HAL_TIM_IC_CaptureCallback>
 800a158:	e005      	b.n	800a166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 faca 	bl	800a6f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 fadb 	bl	800a71c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2200      	movs	r2, #0
 800a16a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	2b00      	cmp	r3, #0
 800a174:	d00c      	beq.n	800a190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d007      	beq.n	800a190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	f06f 0201 	mvn.w	r2, #1
 800a188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f7fa fc16 	bl	80049bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a196:	2b00      	cmp	r3, #0
 800a198:	d104      	bne.n	800a1a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d00c      	beq.n	800a1be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a1b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f001 f885 	bl	800b2c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00c      	beq.n	800a1e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d007      	beq.n	800a1e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f001 f87d 	bl	800b2dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d00c      	beq.n	800a206 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d007      	beq.n	800a206 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a1fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fa95 	bl	800a730 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	f003 0320 	and.w	r3, r3, #32
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00c      	beq.n	800a22a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f003 0320 	and.w	r3, r3, #32
 800a216:	2b00      	cmp	r3, #0
 800a218:	d007      	beq.n	800a22a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f06f 0220 	mvn.w	r2, #32
 800a222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f001 f845 	bl	800b2b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d00c      	beq.n	800a24e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d007      	beq.n	800a24e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a246:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f001 f851 	bl	800b2f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a254:	2b00      	cmp	r3, #0
 800a256:	d00c      	beq.n	800a272 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d007      	beq.n	800a272 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a26a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f001 f849 	bl	800b304 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00c      	beq.n	800a296 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a282:	2b00      	cmp	r3, #0
 800a284:	d007      	beq.n	800a296 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a28e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f001 f841 	bl	800b318 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00c      	beq.n	800a2ba <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d007      	beq.n	800a2ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800a2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 f839 	bl	800b32c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a2ba:	bf00      	nop
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b086      	sub	sp, #24
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d101      	bne.n	800a2e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a2de:	2302      	movs	r3, #2
 800a2e0:	e0ff      	b.n	800a4e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b14      	cmp	r3, #20
 800a2ee:	f200 80f0 	bhi.w	800a4d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a2f2:	a201      	add	r2, pc, #4	@ (adr r2, 800a2f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a34d 	.word	0x0800a34d
 800a2fc:	0800a4d3 	.word	0x0800a4d3
 800a300:	0800a4d3 	.word	0x0800a4d3
 800a304:	0800a4d3 	.word	0x0800a4d3
 800a308:	0800a38d 	.word	0x0800a38d
 800a30c:	0800a4d3 	.word	0x0800a4d3
 800a310:	0800a4d3 	.word	0x0800a4d3
 800a314:	0800a4d3 	.word	0x0800a4d3
 800a318:	0800a3cf 	.word	0x0800a3cf
 800a31c:	0800a4d3 	.word	0x0800a4d3
 800a320:	0800a4d3 	.word	0x0800a4d3
 800a324:	0800a4d3 	.word	0x0800a4d3
 800a328:	0800a40f 	.word	0x0800a40f
 800a32c:	0800a4d3 	.word	0x0800a4d3
 800a330:	0800a4d3 	.word	0x0800a4d3
 800a334:	0800a4d3 	.word	0x0800a4d3
 800a338:	0800a451 	.word	0x0800a451
 800a33c:	0800a4d3 	.word	0x0800a4d3
 800a340:	0800a4d3 	.word	0x0800a4d3
 800a344:	0800a4d3 	.word	0x0800a4d3
 800a348:	0800a491 	.word	0x0800a491
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	4618      	mov	r0, r3
 800a354:	f000 faa0 	bl	800a898 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	699a      	ldr	r2, [r3, #24]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f042 0208 	orr.w	r2, r2, #8
 800a366:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	699a      	ldr	r2, [r3, #24]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f022 0204 	bic.w	r2, r2, #4
 800a376:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	6999      	ldr	r1, [r3, #24]
 800a37e:	68bb      	ldr	r3, [r7, #8]
 800a380:	691a      	ldr	r2, [r3, #16]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	430a      	orrs	r2, r1
 800a388:	619a      	str	r2, [r3, #24]
      break;
 800a38a:	e0a5      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	4618      	mov	r0, r3
 800a394:	f000 fb1a 	bl	800a9cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699a      	ldr	r2, [r3, #24]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	699a      	ldr	r2, [r3, #24]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a3b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	6999      	ldr	r1, [r3, #24]
 800a3be:	68bb      	ldr	r3, [r7, #8]
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	021a      	lsls	r2, r3, #8
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	430a      	orrs	r2, r1
 800a3ca:	619a      	str	r2, [r3, #24]
      break;
 800a3cc:	e084      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f000 fb8d 	bl	800aaf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	69da      	ldr	r2, [r3, #28]
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f042 0208 	orr.w	r2, r2, #8
 800a3e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	69da      	ldr	r2, [r3, #28]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	f022 0204 	bic.w	r2, r2, #4
 800a3f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69d9      	ldr	r1, [r3, #28]
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	430a      	orrs	r2, r1
 800a40a:	61da      	str	r2, [r3, #28]
      break;
 800a40c:	e064      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	68b9      	ldr	r1, [r7, #8]
 800a414:	4618      	mov	r0, r3
 800a416:	f000 fbff 	bl	800ac18 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69da      	ldr	r2, [r3, #28]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a428:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69da      	ldr	r2, [r3, #28]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a438:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69d9      	ldr	r1, [r3, #28]
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	021a      	lsls	r2, r3, #8
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	430a      	orrs	r2, r1
 800a44c:	61da      	str	r2, [r3, #28]
      break;
 800a44e:	e043      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68b9      	ldr	r1, [r7, #8]
 800a456:	4618      	mov	r0, r3
 800a458:	f000 fc72 	bl	800ad40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0208 	orr.w	r2, r2, #8
 800a46a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f022 0204 	bic.w	r2, r2, #4
 800a47a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	691a      	ldr	r2, [r3, #16]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	430a      	orrs	r2, r1
 800a48c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a48e:	e023      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	68b9      	ldr	r1, [r7, #8]
 800a496:	4618      	mov	r0, r3
 800a498:	f000 fcbc 	bl	800ae14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a4ba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	691b      	ldr	r3, [r3, #16]
 800a4c6:	021a      	lsls	r2, r3, #8
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	430a      	orrs	r2, r1
 800a4ce:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800a4d0:	e002      	b.n	800a4d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a4d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a4e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3718      	adds	r7, #24
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop

0800a4ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a500:	2b01      	cmp	r3, #1
 800a502:	d101      	bne.n	800a508 <HAL_TIM_ConfigClockSource+0x1c>
 800a504:	2302      	movs	r3, #2
 800a506:	e0e6      	b.n	800a6d6 <HAL_TIM_ConfigClockSource+0x1ea>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2202      	movs	r2, #2
 800a514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	689b      	ldr	r3, [r3, #8]
 800a51e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800a526:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800a52a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a52c:	68bb      	ldr	r3, [r7, #8]
 800a52e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a67      	ldr	r2, [pc, #412]	@ (800a6e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a542:	4293      	cmp	r3, r2
 800a544:	f000 80b1 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a548:	4a65      	ldr	r2, [pc, #404]	@ (800a6e0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800a54a:	4293      	cmp	r3, r2
 800a54c:	f200 80b6 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a550:	4a64      	ldr	r2, [pc, #400]	@ (800a6e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a552:	4293      	cmp	r3, r2
 800a554:	f000 80a9 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a558:	4a62      	ldr	r2, [pc, #392]	@ (800a6e4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	f200 80ae 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a560:	4a61      	ldr	r2, [pc, #388]	@ (800a6e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a562:	4293      	cmp	r3, r2
 800a564:	f000 80a1 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a568:	4a5f      	ldr	r2, [pc, #380]	@ (800a6e8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800a56a:	4293      	cmp	r3, r2
 800a56c:	f200 80a6 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a570:	4a5e      	ldr	r2, [pc, #376]	@ (800a6ec <HAL_TIM_ConfigClockSource+0x200>)
 800a572:	4293      	cmp	r3, r2
 800a574:	f000 8099 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a578:	4a5c      	ldr	r2, [pc, #368]	@ (800a6ec <HAL_TIM_ConfigClockSource+0x200>)
 800a57a:	4293      	cmp	r3, r2
 800a57c:	f200 809e 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a580:	4a5b      	ldr	r2, [pc, #364]	@ (800a6f0 <HAL_TIM_ConfigClockSource+0x204>)
 800a582:	4293      	cmp	r3, r2
 800a584:	f000 8091 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a588:	4a59      	ldr	r2, [pc, #356]	@ (800a6f0 <HAL_TIM_ConfigClockSource+0x204>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	f200 8096 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a590:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a594:	f000 8089 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a598:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800a59c:	f200 808e 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5a4:	d03e      	beq.n	800a624 <HAL_TIM_ConfigClockSource+0x138>
 800a5a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5aa:	f200 8087 	bhi.w	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5b2:	f000 8086 	beq.w	800a6c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800a5b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a5ba:	d87f      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5bc:	2b70      	cmp	r3, #112	@ 0x70
 800a5be:	d01a      	beq.n	800a5f6 <HAL_TIM_ConfigClockSource+0x10a>
 800a5c0:	2b70      	cmp	r3, #112	@ 0x70
 800a5c2:	d87b      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5c4:	2b60      	cmp	r3, #96	@ 0x60
 800a5c6:	d050      	beq.n	800a66a <HAL_TIM_ConfigClockSource+0x17e>
 800a5c8:	2b60      	cmp	r3, #96	@ 0x60
 800a5ca:	d877      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5cc:	2b50      	cmp	r3, #80	@ 0x50
 800a5ce:	d03c      	beq.n	800a64a <HAL_TIM_ConfigClockSource+0x15e>
 800a5d0:	2b50      	cmp	r3, #80	@ 0x50
 800a5d2:	d873      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5d4:	2b40      	cmp	r3, #64	@ 0x40
 800a5d6:	d058      	beq.n	800a68a <HAL_TIM_ConfigClockSource+0x19e>
 800a5d8:	2b40      	cmp	r3, #64	@ 0x40
 800a5da:	d86f      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5dc:	2b30      	cmp	r3, #48	@ 0x30
 800a5de:	d064      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a5e0:	2b30      	cmp	r3, #48	@ 0x30
 800a5e2:	d86b      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5e4:	2b20      	cmp	r3, #32
 800a5e6:	d060      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a5e8:	2b20      	cmp	r3, #32
 800a5ea:	d867      	bhi.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d05c      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a5f0:	2b10      	cmp	r3, #16
 800a5f2:	d05a      	beq.n	800a6aa <HAL_TIM_ConfigClockSource+0x1be>
 800a5f4:	e062      	b.n	800a6bc <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5fa:	683b      	ldr	r3, [r7, #0]
 800a5fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a606:	f000 fced 	bl	800afe4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	689b      	ldr	r3, [r3, #8]
 800a610:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800a618:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68ba      	ldr	r2, [r7, #8]
 800a620:	609a      	str	r2, [r3, #8]
      break;
 800a622:	e04f      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a630:	683b      	ldr	r3, [r7, #0]
 800a632:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a634:	f000 fcd6 	bl	800afe4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	689a      	ldr	r2, [r3, #8]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800a646:	609a      	str	r2, [r3, #8]
      break;
 800a648:	e03c      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a64e:	683b      	ldr	r3, [r7, #0]
 800a650:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a656:	461a      	mov	r2, r3
 800a658:	f000 fc48 	bl	800aeec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	2150      	movs	r1, #80	@ 0x50
 800a662:	4618      	mov	r0, r3
 800a664:	f000 fca1 	bl	800afaa <TIM_ITRx_SetConfig>
      break;
 800a668:	e02c      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a676:	461a      	mov	r2, r3
 800a678:	f000 fc67 	bl	800af4a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2160      	movs	r1, #96	@ 0x60
 800a682:	4618      	mov	r0, r3
 800a684:	f000 fc91 	bl	800afaa <TIM_ITRx_SetConfig>
      break;
 800a688:	e01c      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a696:	461a      	mov	r2, r3
 800a698:	f000 fc28 	bl	800aeec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2140      	movs	r1, #64	@ 0x40
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	f000 fc81 	bl	800afaa <TIM_ITRx_SetConfig>
      break;
 800a6a8:	e00c      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681a      	ldr	r2, [r3, #0]
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	f000 fc78 	bl	800afaa <TIM_ITRx_SetConfig>
      break;
 800a6ba:	e003      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	73fb      	strb	r3, [r7, #15]
      break;
 800a6c0:	e000      	b.n	800a6c4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a6c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	00100070 	.word	0x00100070
 800a6e4:	00100050 	.word	0x00100050
 800a6e8:	00100040 	.word	0x00100040
 800a6ec:	00100030 	.word	0x00100030
 800a6f0:	00100020 	.word	0x00100020

0800a6f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a744:	b480      	push	{r7}
 800a746:	b085      	sub	sp, #20
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	4a48      	ldr	r2, [pc, #288]	@ (800a878 <TIM_Base_SetConfig+0x134>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d013      	beq.n	800a784 <TIM_Base_SetConfig+0x40>
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a762:	d00f      	beq.n	800a784 <TIM_Base_SetConfig+0x40>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	4a45      	ldr	r2, [pc, #276]	@ (800a87c <TIM_Base_SetConfig+0x138>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d00b      	beq.n	800a784 <TIM_Base_SetConfig+0x40>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a44      	ldr	r2, [pc, #272]	@ (800a880 <TIM_Base_SetConfig+0x13c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d007      	beq.n	800a784 <TIM_Base_SetConfig+0x40>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a43      	ldr	r2, [pc, #268]	@ (800a884 <TIM_Base_SetConfig+0x140>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d003      	beq.n	800a784 <TIM_Base_SetConfig+0x40>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	4a42      	ldr	r2, [pc, #264]	@ (800a888 <TIM_Base_SetConfig+0x144>)
 800a780:	4293      	cmp	r3, r2
 800a782:	d108      	bne.n	800a796 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a78a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	4313      	orrs	r3, r2
 800a794:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	4a37      	ldr	r2, [pc, #220]	@ (800a878 <TIM_Base_SetConfig+0x134>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d01f      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7a4:	d01b      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a34      	ldr	r2, [pc, #208]	@ (800a87c <TIM_Base_SetConfig+0x138>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d017      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4a33      	ldr	r2, [pc, #204]	@ (800a880 <TIM_Base_SetConfig+0x13c>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d013      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	4a32      	ldr	r2, [pc, #200]	@ (800a884 <TIM_Base_SetConfig+0x140>)
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d00f      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	4a32      	ldr	r2, [pc, #200]	@ (800a88c <TIM_Base_SetConfig+0x148>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d00b      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a31      	ldr	r2, [pc, #196]	@ (800a890 <TIM_Base_SetConfig+0x14c>)
 800a7ca:	4293      	cmp	r3, r2
 800a7cc:	d007      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4a30      	ldr	r2, [pc, #192]	@ (800a894 <TIM_Base_SetConfig+0x150>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d003      	beq.n	800a7de <TIM_Base_SetConfig+0x9a>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a2b      	ldr	r2, [pc, #172]	@ (800a888 <TIM_Base_SetConfig+0x144>)
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	d108      	bne.n	800a7f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a7e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	68db      	ldr	r3, [r3, #12]
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	695b      	ldr	r3, [r3, #20]
 800a7fa:	4313      	orrs	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	68fa      	ldr	r2, [r7, #12]
 800a802:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	689a      	ldr	r2, [r3, #8]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	4a18      	ldr	r2, [pc, #96]	@ (800a878 <TIM_Base_SetConfig+0x134>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d013      	beq.n	800a844 <TIM_Base_SetConfig+0x100>
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	4a19      	ldr	r2, [pc, #100]	@ (800a884 <TIM_Base_SetConfig+0x140>)
 800a820:	4293      	cmp	r3, r2
 800a822:	d00f      	beq.n	800a844 <TIM_Base_SetConfig+0x100>
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a19      	ldr	r2, [pc, #100]	@ (800a88c <TIM_Base_SetConfig+0x148>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d00b      	beq.n	800a844 <TIM_Base_SetConfig+0x100>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	4a18      	ldr	r2, [pc, #96]	@ (800a890 <TIM_Base_SetConfig+0x14c>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d007      	beq.n	800a844 <TIM_Base_SetConfig+0x100>
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	4a17      	ldr	r2, [pc, #92]	@ (800a894 <TIM_Base_SetConfig+0x150>)
 800a838:	4293      	cmp	r3, r2
 800a83a:	d003      	beq.n	800a844 <TIM_Base_SetConfig+0x100>
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	4a12      	ldr	r2, [pc, #72]	@ (800a888 <TIM_Base_SetConfig+0x144>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d103      	bne.n	800a84c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	691a      	ldr	r2, [r3, #16]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	f003 0301 	and.w	r3, r3, #1
 800a85a:	2b01      	cmp	r3, #1
 800a85c:	d105      	bne.n	800a86a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	691b      	ldr	r3, [r3, #16]
 800a862:	f023 0201 	bic.w	r2, r3, #1
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	611a      	str	r2, [r3, #16]
  }
}
 800a86a:	bf00      	nop
 800a86c:	3714      	adds	r7, #20
 800a86e:	46bd      	mov	sp, r7
 800a870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a874:	4770      	bx	lr
 800a876:	bf00      	nop
 800a878:	40012c00 	.word	0x40012c00
 800a87c:	40000400 	.word	0x40000400
 800a880:	40000800 	.word	0x40000800
 800a884:	40013400 	.word	0x40013400
 800a888:	40015000 	.word	0x40015000
 800a88c:	40014000 	.word	0x40014000
 800a890:	40014400 	.word	0x40014400
 800a894:	40014800 	.word	0x40014800

0800a898 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6a1b      	ldr	r3, [r3, #32]
 800a8ac:	f023 0201 	bic.w	r2, r3, #1
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a8c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0303 	bic.w	r3, r3, #3
 800a8d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	68fa      	ldr	r2, [r7, #12]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f023 0302 	bic.w	r3, r3, #2
 800a8e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	697a      	ldr	r2, [r7, #20]
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a30      	ldr	r2, [pc, #192]	@ (800a9b4 <TIM_OC1_SetConfig+0x11c>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d013      	beq.n	800a920 <TIM_OC1_SetConfig+0x88>
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	4a2f      	ldr	r2, [pc, #188]	@ (800a9b8 <TIM_OC1_SetConfig+0x120>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d00f      	beq.n	800a920 <TIM_OC1_SetConfig+0x88>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	4a2e      	ldr	r2, [pc, #184]	@ (800a9bc <TIM_OC1_SetConfig+0x124>)
 800a904:	4293      	cmp	r3, r2
 800a906:	d00b      	beq.n	800a920 <TIM_OC1_SetConfig+0x88>
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	4a2d      	ldr	r2, [pc, #180]	@ (800a9c0 <TIM_OC1_SetConfig+0x128>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d007      	beq.n	800a920 <TIM_OC1_SetConfig+0x88>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	4a2c      	ldr	r2, [pc, #176]	@ (800a9c4 <TIM_OC1_SetConfig+0x12c>)
 800a914:	4293      	cmp	r3, r2
 800a916:	d003      	beq.n	800a920 <TIM_OC1_SetConfig+0x88>
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	4a2b      	ldr	r2, [pc, #172]	@ (800a9c8 <TIM_OC1_SetConfig+0x130>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d10c      	bne.n	800a93a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	f023 0308 	bic.w	r3, r3, #8
 800a926:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	697a      	ldr	r2, [r7, #20]
 800a92e:	4313      	orrs	r3, r2
 800a930:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	f023 0304 	bic.w	r3, r3, #4
 800a938:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	4a1d      	ldr	r2, [pc, #116]	@ (800a9b4 <TIM_OC1_SetConfig+0x11c>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d013      	beq.n	800a96a <TIM_OC1_SetConfig+0xd2>
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	4a1c      	ldr	r2, [pc, #112]	@ (800a9b8 <TIM_OC1_SetConfig+0x120>)
 800a946:	4293      	cmp	r3, r2
 800a948:	d00f      	beq.n	800a96a <TIM_OC1_SetConfig+0xd2>
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	4a1b      	ldr	r2, [pc, #108]	@ (800a9bc <TIM_OC1_SetConfig+0x124>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d00b      	beq.n	800a96a <TIM_OC1_SetConfig+0xd2>
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	4a1a      	ldr	r2, [pc, #104]	@ (800a9c0 <TIM_OC1_SetConfig+0x128>)
 800a956:	4293      	cmp	r3, r2
 800a958:	d007      	beq.n	800a96a <TIM_OC1_SetConfig+0xd2>
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4a19      	ldr	r2, [pc, #100]	@ (800a9c4 <TIM_OC1_SetConfig+0x12c>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d003      	beq.n	800a96a <TIM_OC1_SetConfig+0xd2>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	4a18      	ldr	r2, [pc, #96]	@ (800a9c8 <TIM_OC1_SetConfig+0x130>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d111      	bne.n	800a98e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	695b      	ldr	r3, [r3, #20]
 800a97e:	693a      	ldr	r2, [r7, #16]
 800a980:	4313      	orrs	r3, r2
 800a982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	693a      	ldr	r2, [r7, #16]
 800a98a:	4313      	orrs	r3, r2
 800a98c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	693a      	ldr	r2, [r7, #16]
 800a992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68fa      	ldr	r2, [r7, #12]
 800a998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	685a      	ldr	r2, [r3, #4]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	697a      	ldr	r2, [r7, #20]
 800a9a6:	621a      	str	r2, [r3, #32]
}
 800a9a8:	bf00      	nop
 800a9aa:	371c      	adds	r7, #28
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr
 800a9b4:	40012c00 	.word	0x40012c00
 800a9b8:	40013400 	.word	0x40013400
 800a9bc:	40014000 	.word	0x40014000
 800a9c0:	40014400 	.word	0x40014400
 800a9c4:	40014800 	.word	0x40014800
 800a9c8:	40015000 	.word	0x40015000

0800a9cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b087      	sub	sp, #28
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6a1b      	ldr	r3, [r3, #32]
 800a9da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	f023 0210 	bic.w	r2, r3, #16
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	685b      	ldr	r3, [r3, #4]
 800a9ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a9fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a9fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800aa06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	68fa      	ldr	r2, [r7, #12]
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0320 	bic.w	r3, r3, #32
 800aa1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	4a2c      	ldr	r2, [pc, #176]	@ (800aadc <TIM_OC2_SetConfig+0x110>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d007      	beq.n	800aa40 <TIM_OC2_SetConfig+0x74>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a2b      	ldr	r2, [pc, #172]	@ (800aae0 <TIM_OC2_SetConfig+0x114>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d003      	beq.n	800aa40 <TIM_OC2_SetConfig+0x74>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	4a2a      	ldr	r2, [pc, #168]	@ (800aae4 <TIM_OC2_SetConfig+0x118>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d10d      	bne.n	800aa5c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	68db      	ldr	r3, [r3, #12]
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	697a      	ldr	r2, [r7, #20]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa54:	697b      	ldr	r3, [r7, #20]
 800aa56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800aa5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	4a1f      	ldr	r2, [pc, #124]	@ (800aadc <TIM_OC2_SetConfig+0x110>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d013      	beq.n	800aa8c <TIM_OC2_SetConfig+0xc0>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	4a1e      	ldr	r2, [pc, #120]	@ (800aae0 <TIM_OC2_SetConfig+0x114>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d00f      	beq.n	800aa8c <TIM_OC2_SetConfig+0xc0>
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	4a1e      	ldr	r2, [pc, #120]	@ (800aae8 <TIM_OC2_SetConfig+0x11c>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d00b      	beq.n	800aa8c <TIM_OC2_SetConfig+0xc0>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4a1d      	ldr	r2, [pc, #116]	@ (800aaec <TIM_OC2_SetConfig+0x120>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d007      	beq.n	800aa8c <TIM_OC2_SetConfig+0xc0>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	4a1c      	ldr	r2, [pc, #112]	@ (800aaf0 <TIM_OC2_SetConfig+0x124>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d003      	beq.n	800aa8c <TIM_OC2_SetConfig+0xc0>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	4a17      	ldr	r2, [pc, #92]	@ (800aae4 <TIM_OC2_SetConfig+0x118>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d113      	bne.n	800aab4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800aa92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	695b      	ldr	r3, [r3, #20]
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	693a      	ldr	r2, [r7, #16]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	693a      	ldr	r2, [r7, #16]
 800aab0:	4313      	orrs	r3, r2
 800aab2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	693a      	ldr	r2, [r7, #16]
 800aab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	697a      	ldr	r2, [r7, #20]
 800aacc:	621a      	str	r2, [r3, #32]
}
 800aace:	bf00      	nop
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad8:	4770      	bx	lr
 800aada:	bf00      	nop
 800aadc:	40012c00 	.word	0x40012c00
 800aae0:	40013400 	.word	0x40013400
 800aae4:	40015000 	.word	0x40015000
 800aae8:	40014000 	.word	0x40014000
 800aaec:	40014400 	.word	0x40014400
 800aaf0:	40014800 	.word	0x40014800

0800aaf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b087      	sub	sp, #28
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6a1b      	ldr	r3, [r3, #32]
 800ab08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	69db      	ldr	r3, [r3, #28]
 800ab1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ab22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ab26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f023 0303 	bic.w	r3, r3, #3
 800ab2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ab3a:	697b      	ldr	r3, [r7, #20]
 800ab3c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ab40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	021b      	lsls	r3, r3, #8
 800ab48:	697a      	ldr	r2, [r7, #20]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	4a2b      	ldr	r2, [pc, #172]	@ (800ac00 <TIM_OC3_SetConfig+0x10c>)
 800ab52:	4293      	cmp	r3, r2
 800ab54:	d007      	beq.n	800ab66 <TIM_OC3_SetConfig+0x72>
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	4a2a      	ldr	r2, [pc, #168]	@ (800ac04 <TIM_OC3_SetConfig+0x110>)
 800ab5a:	4293      	cmp	r3, r2
 800ab5c:	d003      	beq.n	800ab66 <TIM_OC3_SetConfig+0x72>
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	4a29      	ldr	r2, [pc, #164]	@ (800ac08 <TIM_OC3_SetConfig+0x114>)
 800ab62:	4293      	cmp	r3, r2
 800ab64:	d10d      	bne.n	800ab82 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ab6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	68db      	ldr	r3, [r3, #12]
 800ab72:	021b      	lsls	r3, r3, #8
 800ab74:	697a      	ldr	r2, [r7, #20]
 800ab76:	4313      	orrs	r3, r2
 800ab78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ab80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a1e      	ldr	r2, [pc, #120]	@ (800ac00 <TIM_OC3_SetConfig+0x10c>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d013      	beq.n	800abb2 <TIM_OC3_SetConfig+0xbe>
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	4a1d      	ldr	r2, [pc, #116]	@ (800ac04 <TIM_OC3_SetConfig+0x110>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d00f      	beq.n	800abb2 <TIM_OC3_SetConfig+0xbe>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	4a1d      	ldr	r2, [pc, #116]	@ (800ac0c <TIM_OC3_SetConfig+0x118>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d00b      	beq.n	800abb2 <TIM_OC3_SetConfig+0xbe>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	4a1c      	ldr	r2, [pc, #112]	@ (800ac10 <TIM_OC3_SetConfig+0x11c>)
 800ab9e:	4293      	cmp	r3, r2
 800aba0:	d007      	beq.n	800abb2 <TIM_OC3_SetConfig+0xbe>
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	4a1b      	ldr	r2, [pc, #108]	@ (800ac14 <TIM_OC3_SetConfig+0x120>)
 800aba6:	4293      	cmp	r3, r2
 800aba8:	d003      	beq.n	800abb2 <TIM_OC3_SetConfig+0xbe>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	4a16      	ldr	r2, [pc, #88]	@ (800ac08 <TIM_OC3_SetConfig+0x114>)
 800abae:	4293      	cmp	r3, r2
 800abb0:	d113      	bne.n	800abda <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800abb2:	693b      	ldr	r3, [r7, #16]
 800abb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800abb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800abc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	011b      	lsls	r3, r3, #4
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	699b      	ldr	r3, [r3, #24]
 800abd2:	011b      	lsls	r3, r3, #4
 800abd4:	693a      	ldr	r2, [r7, #16]
 800abd6:	4313      	orrs	r3, r2
 800abd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68fa      	ldr	r2, [r7, #12]
 800abe4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	685a      	ldr	r2, [r3, #4]
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	697a      	ldr	r2, [r7, #20]
 800abf2:	621a      	str	r2, [r3, #32]
}
 800abf4:	bf00      	nop
 800abf6:	371c      	adds	r7, #28
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr
 800ac00:	40012c00 	.word	0x40012c00
 800ac04:	40013400 	.word	0x40013400
 800ac08:	40015000 	.word	0x40015000
 800ac0c:	40014000 	.word	0x40014000
 800ac10:	40014400 	.word	0x40014400
 800ac14:	40014800 	.word	0x40014800

0800ac18 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b087      	sub	sp, #28
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6a1b      	ldr	r3, [r3, #32]
 800ac26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6a1b      	ldr	r3, [r3, #32]
 800ac2c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ac46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ac4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ac52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	4313      	orrs	r3, r2
 800ac5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ac66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	031b      	lsls	r3, r3, #12
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	4313      	orrs	r3, r2
 800ac72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	4a2c      	ldr	r2, [pc, #176]	@ (800ad28 <TIM_OC4_SetConfig+0x110>)
 800ac78:	4293      	cmp	r3, r2
 800ac7a:	d007      	beq.n	800ac8c <TIM_OC4_SetConfig+0x74>
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	4a2b      	ldr	r2, [pc, #172]	@ (800ad2c <TIM_OC4_SetConfig+0x114>)
 800ac80:	4293      	cmp	r3, r2
 800ac82:	d003      	beq.n	800ac8c <TIM_OC4_SetConfig+0x74>
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4a2a      	ldr	r2, [pc, #168]	@ (800ad30 <TIM_OC4_SetConfig+0x118>)
 800ac88:	4293      	cmp	r3, r2
 800ac8a:	d10d      	bne.n	800aca8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ac92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	68db      	ldr	r3, [r3, #12]
 800ac98:	031b      	lsls	r3, r3, #12
 800ac9a:	697a      	ldr	r2, [r7, #20]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800aca0:	697b      	ldr	r3, [r7, #20]
 800aca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800aca6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ad28 <TIM_OC4_SetConfig+0x110>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d013      	beq.n	800acd8 <TIM_OC4_SetConfig+0xc0>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a1e      	ldr	r2, [pc, #120]	@ (800ad2c <TIM_OC4_SetConfig+0x114>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d00f      	beq.n	800acd8 <TIM_OC4_SetConfig+0xc0>
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	4a1e      	ldr	r2, [pc, #120]	@ (800ad34 <TIM_OC4_SetConfig+0x11c>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d00b      	beq.n	800acd8 <TIM_OC4_SetConfig+0xc0>
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4a1d      	ldr	r2, [pc, #116]	@ (800ad38 <TIM_OC4_SetConfig+0x120>)
 800acc4:	4293      	cmp	r3, r2
 800acc6:	d007      	beq.n	800acd8 <TIM_OC4_SetConfig+0xc0>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4a1c      	ldr	r2, [pc, #112]	@ (800ad3c <TIM_OC4_SetConfig+0x124>)
 800accc:	4293      	cmp	r3, r2
 800acce:	d003      	beq.n	800acd8 <TIM_OC4_SetConfig+0xc0>
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	4a17      	ldr	r2, [pc, #92]	@ (800ad30 <TIM_OC4_SetConfig+0x118>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d113      	bne.n	800ad00 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800acde:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ace0:	693b      	ldr	r3, [r7, #16]
 800ace2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ace6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	019b      	lsls	r3, r3, #6
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	699b      	ldr	r3, [r3, #24]
 800acf8:	019b      	lsls	r3, r3, #6
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4313      	orrs	r3, r2
 800acfe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	693a      	ldr	r2, [r7, #16]
 800ad04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	68fa      	ldr	r2, [r7, #12]
 800ad0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	685a      	ldr	r2, [r3, #4]
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	697a      	ldr	r2, [r7, #20]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	40012c00 	.word	0x40012c00
 800ad2c:	40013400 	.word	0x40013400
 800ad30:	40015000 	.word	0x40015000
 800ad34:	40014000 	.word	0x40014000
 800ad38:	40014400 	.word	0x40014400
 800ad3c:	40014800 	.word	0x40014800

0800ad40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b087      	sub	sp, #28
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6a1b      	ldr	r3, [r3, #32]
 800ad4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6a1b      	ldr	r3, [r3, #32]
 800ad54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	685b      	ldr	r3, [r3, #4]
 800ad60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ad6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ad72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	68fa      	ldr	r2, [r7, #12]
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800ad84:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	689b      	ldr	r3, [r3, #8]
 800ad8a:	041b      	lsls	r3, r3, #16
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	4a19      	ldr	r2, [pc, #100]	@ (800adfc <TIM_OC5_SetConfig+0xbc>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d013      	beq.n	800adc2 <TIM_OC5_SetConfig+0x82>
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	4a18      	ldr	r2, [pc, #96]	@ (800ae00 <TIM_OC5_SetConfig+0xc0>)
 800ad9e:	4293      	cmp	r3, r2
 800ada0:	d00f      	beq.n	800adc2 <TIM_OC5_SetConfig+0x82>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a17      	ldr	r2, [pc, #92]	@ (800ae04 <TIM_OC5_SetConfig+0xc4>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d00b      	beq.n	800adc2 <TIM_OC5_SetConfig+0x82>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	4a16      	ldr	r2, [pc, #88]	@ (800ae08 <TIM_OC5_SetConfig+0xc8>)
 800adae:	4293      	cmp	r3, r2
 800adb0:	d007      	beq.n	800adc2 <TIM_OC5_SetConfig+0x82>
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	4a15      	ldr	r2, [pc, #84]	@ (800ae0c <TIM_OC5_SetConfig+0xcc>)
 800adb6:	4293      	cmp	r3, r2
 800adb8:	d003      	beq.n	800adc2 <TIM_OC5_SetConfig+0x82>
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	4a14      	ldr	r2, [pc, #80]	@ (800ae10 <TIM_OC5_SetConfig+0xd0>)
 800adbe:	4293      	cmp	r3, r2
 800adc0:	d109      	bne.n	800add6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adc8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	695b      	ldr	r3, [r3, #20]
 800adce:	021b      	lsls	r3, r3, #8
 800add0:	697a      	ldr	r2, [r7, #20]
 800add2:	4313      	orrs	r3, r2
 800add4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68fa      	ldr	r2, [r7, #12]
 800ade0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ade2:	683b      	ldr	r3, [r7, #0]
 800ade4:	685a      	ldr	r2, [r3, #4]
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	621a      	str	r2, [r3, #32]
}
 800adf0:	bf00      	nop
 800adf2:	371c      	adds	r7, #28
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	40012c00 	.word	0x40012c00
 800ae00:	40013400 	.word	0x40013400
 800ae04:	40014000 	.word	0x40014000
 800ae08:	40014400 	.word	0x40014400
 800ae0c:	40014800 	.word	0x40014800
 800ae10:	40015000 	.word	0x40015000

0800ae14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a1b      	ldr	r3, [r3, #32]
 800ae28:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ae42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ae46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	021b      	lsls	r3, r3, #8
 800ae4e:	68fa      	ldr	r2, [r7, #12]
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ae5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	051b      	lsls	r3, r3, #20
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a1a      	ldr	r2, [pc, #104]	@ (800aed4 <TIM_OC6_SetConfig+0xc0>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d013      	beq.n	800ae98 <TIM_OC6_SetConfig+0x84>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a19      	ldr	r2, [pc, #100]	@ (800aed8 <TIM_OC6_SetConfig+0xc4>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d00f      	beq.n	800ae98 <TIM_OC6_SetConfig+0x84>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	4a18      	ldr	r2, [pc, #96]	@ (800aedc <TIM_OC6_SetConfig+0xc8>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d00b      	beq.n	800ae98 <TIM_OC6_SetConfig+0x84>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	4a17      	ldr	r2, [pc, #92]	@ (800aee0 <TIM_OC6_SetConfig+0xcc>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d007      	beq.n	800ae98 <TIM_OC6_SetConfig+0x84>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	4a16      	ldr	r2, [pc, #88]	@ (800aee4 <TIM_OC6_SetConfig+0xd0>)
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	d003      	beq.n	800ae98 <TIM_OC6_SetConfig+0x84>
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	4a15      	ldr	r2, [pc, #84]	@ (800aee8 <TIM_OC6_SetConfig+0xd4>)
 800ae94:	4293      	cmp	r3, r2
 800ae96:	d109      	bne.n	800aeac <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ae9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	695b      	ldr	r3, [r3, #20]
 800aea4:	029b      	lsls	r3, r3, #10
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	68fa      	ldr	r2, [r7, #12]
 800aeb6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	621a      	str	r2, [r3, #32]
}
 800aec6:	bf00      	nop
 800aec8:	371c      	adds	r7, #28
 800aeca:	46bd      	mov	sp, r7
 800aecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed0:	4770      	bx	lr
 800aed2:	bf00      	nop
 800aed4:	40012c00 	.word	0x40012c00
 800aed8:	40013400 	.word	0x40013400
 800aedc:	40014000 	.word	0x40014000
 800aee0:	40014400 	.word	0x40014400
 800aee4:	40014800 	.word	0x40014800
 800aee8:	40015000 	.word	0x40015000

0800aeec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b087      	sub	sp, #28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	6a1b      	ldr	r3, [r3, #32]
 800aefc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	6a1b      	ldr	r3, [r3, #32]
 800af02:	f023 0201 	bic.w	r2, r3, #1
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800af10:	693b      	ldr	r3, [r7, #16]
 800af12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800af16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	f023 030a 	bic.w	r3, r3, #10
 800af28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800af2a:	697a      	ldr	r2, [r7, #20]
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	4313      	orrs	r3, r2
 800af30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	693a      	ldr	r2, [r7, #16]
 800af36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	697a      	ldr	r2, [r7, #20]
 800af3c:	621a      	str	r2, [r3, #32]
}
 800af3e:	bf00      	nop
 800af40:	371c      	adds	r7, #28
 800af42:	46bd      	mov	sp, r7
 800af44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af48:	4770      	bx	lr

0800af4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800af4a:	b480      	push	{r7}
 800af4c:	b087      	sub	sp, #28
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	60b9      	str	r1, [r7, #8]
 800af54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6a1b      	ldr	r3, [r3, #32]
 800af5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6a1b      	ldr	r3, [r3, #32]
 800af60:	f023 0210 	bic.w	r2, r3, #16
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	699b      	ldr	r3, [r3, #24]
 800af6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800af74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	031b      	lsls	r3, r3, #12
 800af7a:	693a      	ldr	r2, [r7, #16]
 800af7c:	4313      	orrs	r3, r2
 800af7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800af86:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	011b      	lsls	r3, r3, #4
 800af8c:	697a      	ldr	r2, [r7, #20]
 800af8e:	4313      	orrs	r3, r2
 800af90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	697a      	ldr	r2, [r7, #20]
 800af9c:	621a      	str	r2, [r3, #32]
}
 800af9e:	bf00      	nop
 800afa0:	371c      	adds	r7, #28
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr

0800afaa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800afaa:	b480      	push	{r7}
 800afac:	b085      	sub	sp, #20
 800afae:	af00      	add	r7, sp, #0
 800afb0:	6078      	str	r0, [r7, #4]
 800afb2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800afc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800afc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800afc6:	683a      	ldr	r2, [r7, #0]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4313      	orrs	r3, r2
 800afcc:	f043 0307 	orr.w	r3, r3, #7
 800afd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	68fa      	ldr	r2, [r7, #12]
 800afd6:	609a      	str	r2, [r3, #8]
}
 800afd8:	bf00      	nop
 800afda:	3714      	adds	r7, #20
 800afdc:	46bd      	mov	sp, r7
 800afde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe2:	4770      	bx	lr

0800afe4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b087      	sub	sp, #28
 800afe8:	af00      	add	r7, sp, #0
 800afea:	60f8      	str	r0, [r7, #12]
 800afec:	60b9      	str	r1, [r7, #8]
 800afee:	607a      	str	r2, [r7, #4]
 800aff0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800affe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	021a      	lsls	r2, r3, #8
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	431a      	orrs	r2, r3
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	4313      	orrs	r3, r2
 800b00c:	697a      	ldr	r2, [r7, #20]
 800b00e:	4313      	orrs	r3, r2
 800b010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	697a      	ldr	r2, [r7, #20]
 800b016:	609a      	str	r2, [r3, #8]
}
 800b018:	bf00      	nop
 800b01a:	371c      	adds	r7, #28
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b024:	b480      	push	{r7}
 800b026:	b087      	sub	sp, #28
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	f003 031f 	and.w	r3, r3, #31
 800b036:	2201      	movs	r2, #1
 800b038:	fa02 f303 	lsl.w	r3, r2, r3
 800b03c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6a1a      	ldr	r2, [r3, #32]
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	43db      	mvns	r3, r3
 800b046:	401a      	ands	r2, r3
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6a1a      	ldr	r2, [r3, #32]
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	f003 031f 	and.w	r3, r3, #31
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	fa01 f303 	lsl.w	r3, r1, r3
 800b05c:	431a      	orrs	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	621a      	str	r2, [r3, #32]
}
 800b062:	bf00      	nop
 800b064:	371c      	adds	r7, #28
 800b066:	46bd      	mov	sp, r7
 800b068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b06c:	4770      	bx	lr
	...

0800b070 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]
 800b078:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b080:	2b01      	cmp	r3, #1
 800b082:	d101      	bne.n	800b088 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b084:	2302      	movs	r3, #2
 800b086:	e06f      	b.n	800b168 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2202      	movs	r2, #2
 800b094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a31      	ldr	r2, [pc, #196]	@ (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d009      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a30      	ldr	r2, [pc, #192]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d004      	beq.n	800b0c6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a2e      	ldr	r2, [pc, #184]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d108      	bne.n	800b0d8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b0cc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	68fa      	ldr	r2, [r7, #12]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b0de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b0e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	68fa      	ldr	r2, [r7, #12]
 800b0ea:	4313      	orrs	r3, r2
 800b0ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	68fa      	ldr	r2, [r7, #12]
 800b0f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	4a1e      	ldr	r2, [pc, #120]	@ (800b174 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d01d      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b108:	d018      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	4a1c      	ldr	r2, [pc, #112]	@ (800b180 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b110:	4293      	cmp	r3, r2
 800b112:	d013      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a1a      	ldr	r2, [pc, #104]	@ (800b184 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d00e      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	4a15      	ldr	r2, [pc, #84]	@ (800b178 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b124:	4293      	cmp	r3, r2
 800b126:	d009      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	4a16      	ldr	r2, [pc, #88]	@ (800b188 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b12e:	4293      	cmp	r3, r2
 800b130:	d004      	beq.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4a11      	ldr	r2, [pc, #68]	@ (800b17c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d10c      	bne.n	800b156 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b142:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	4313      	orrs	r3, r2
 800b14c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	68ba      	ldr	r2, [r7, #8]
 800b154:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	2201      	movs	r2, #1
 800b15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2200      	movs	r2, #0
 800b162:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3714      	adds	r7, #20
 800b16c:	46bd      	mov	sp, r7
 800b16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b172:	4770      	bx	lr
 800b174:	40012c00 	.word	0x40012c00
 800b178:	40013400 	.word	0x40013400
 800b17c:	40015000 	.word	0x40015000
 800b180:	40000400 	.word	0x40000400
 800b184:	40000800 	.word	0x40000800
 800b188:	40014000 	.word	0x40014000

0800b18c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b18c:	b480      	push	{r7}
 800b18e:	b085      	sub	sp, #20
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d101      	bne.n	800b1a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1a4:	2302      	movs	r3, #2
 800b1a6:	e078      	b.n	800b29a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	689b      	ldr	r3, [r3, #8]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b1fc:	683b      	ldr	r3, [r7, #0]
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	4313      	orrs	r3, r2
 800b202:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b20e:	4313      	orrs	r3, r2
 800b210:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	041b      	lsls	r3, r3, #16
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	69db      	ldr	r3, [r3, #28]
 800b22c:	4313      	orrs	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	4a1c      	ldr	r2, [pc, #112]	@ (800b2a8 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b236:	4293      	cmp	r3, r2
 800b238:	d009      	beq.n	800b24e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a1b      	ldr	r2, [pc, #108]	@ (800b2ac <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d004      	beq.n	800b24e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a19      	ldr	r2, [pc, #100]	@ (800b2b0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d11c      	bne.n	800b288 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b258:	051b      	lsls	r3, r3, #20
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	6a1b      	ldr	r3, [r3, #32]
 800b268:	4313      	orrs	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b284:	4313      	orrs	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2200      	movs	r2, #0
 800b294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3714      	adds	r7, #20
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a4:	4770      	bx	lr
 800b2a6:	bf00      	nop
 800b2a8:	40012c00 	.word	0x40012c00
 800b2ac:	40013400 	.word	0x40013400
 800b2b0:	40015000 	.word	0x40015000

0800b2b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b083      	sub	sp, #12
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2e4:	bf00      	nop
 800b2e6:	370c      	adds	r7, #12
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b2f0:	b480      	push	{r7}
 800b2f2:	b083      	sub	sp, #12
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b2f8:	bf00      	nop
 800b2fa:	370c      	adds	r7, #12
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b302:	4770      	bx	lr

0800b304 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b32c:	b480      	push	{r7}
 800b32e:	b083      	sub	sp, #12
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b334:	bf00      	nop
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <_ZdlPvj>:
 800b340:	f000 b804 	b.w	800b34c <_ZdlPv>

0800b344 <_ZdaPv>:
 800b344:	f000 b802 	b.w	800b34c <_ZdlPv>

0800b348 <_Znaj>:
 800b348:	f000 b802 	b.w	800b350 <_Znwj>

0800b34c <_ZdlPv>:
 800b34c:	f001 b892 	b.w	800c474 <free>

0800b350 <_Znwj>:
 800b350:	2801      	cmp	r0, #1
 800b352:	bf38      	it	cc
 800b354:	2001      	movcc	r0, #1
 800b356:	b510      	push	{r4, lr}
 800b358:	4604      	mov	r4, r0
 800b35a:	4620      	mov	r0, r4
 800b35c:	f001 f882 	bl	800c464 <malloc>
 800b360:	b100      	cbz	r0, 800b364 <_Znwj+0x14>
 800b362:	bd10      	pop	{r4, pc}
 800b364:	f000 f806 	bl	800b374 <_ZSt15get_new_handlerv>
 800b368:	b908      	cbnz	r0, 800b36e <_Znwj+0x1e>
 800b36a:	f001 f873 	bl	800c454 <abort>
 800b36e:	4780      	blx	r0
 800b370:	e7f3      	b.n	800b35a <_Znwj+0xa>
	...

0800b374 <_ZSt15get_new_handlerv>:
 800b374:	4b02      	ldr	r3, [pc, #8]	@ (800b380 <_ZSt15get_new_handlerv+0xc>)
 800b376:	6818      	ldr	r0, [r3, #0]
 800b378:	f3bf 8f5b 	dmb	ish
 800b37c:	4770      	bx	lr
 800b37e:	bf00      	nop
 800b380:	200007d8 	.word	0x200007d8

0800b384 <pow>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	ed2d 8b02 	vpush	{d8}
 800b38a:	eeb0 8a40 	vmov.f32	s16, s0
 800b38e:	eef0 8a60 	vmov.f32	s17, s1
 800b392:	ec55 4b11 	vmov	r4, r5, d1
 800b396:	f000 f977 	bl	800b688 <__ieee754_pow>
 800b39a:	4622      	mov	r2, r4
 800b39c:	462b      	mov	r3, r5
 800b39e:	4620      	mov	r0, r4
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	ec57 6b10 	vmov	r6, r7, d0
 800b3a6:	f7f5 fb8d 	bl	8000ac4 <__aeabi_dcmpun>
 800b3aa:	2800      	cmp	r0, #0
 800b3ac:	d13b      	bne.n	800b426 <pow+0xa2>
 800b3ae:	ec51 0b18 	vmov	r0, r1, d8
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f7f5 fb53 	bl	8000a60 <__aeabi_dcmpeq>
 800b3ba:	b1b8      	cbz	r0, 800b3ec <pow+0x68>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2300      	movs	r3, #0
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f5 fb4c 	bl	8000a60 <__aeabi_dcmpeq>
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	d146      	bne.n	800b45a <pow+0xd6>
 800b3cc:	ec45 4b10 	vmov	d0, r4, r5
 800b3d0:	f000 f886 	bl	800b4e0 <finite>
 800b3d4:	b338      	cbz	r0, 800b426 <pow+0xa2>
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	2300      	movs	r3, #0
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4629      	mov	r1, r5
 800b3de:	f7f5 fb49 	bl	8000a74 <__aeabi_dcmplt>
 800b3e2:	b300      	cbz	r0, 800b426 <pow+0xa2>
 800b3e4:	f001 f958 	bl	800c698 <__errno>
 800b3e8:	2322      	movs	r3, #34	@ 0x22
 800b3ea:	e01b      	b.n	800b424 <pow+0xa0>
 800b3ec:	ec47 6b10 	vmov	d0, r6, r7
 800b3f0:	f000 f876 	bl	800b4e0 <finite>
 800b3f4:	b9e0      	cbnz	r0, 800b430 <pow+0xac>
 800b3f6:	eeb0 0a48 	vmov.f32	s0, s16
 800b3fa:	eef0 0a68 	vmov.f32	s1, s17
 800b3fe:	f000 f86f 	bl	800b4e0 <finite>
 800b402:	b1a8      	cbz	r0, 800b430 <pow+0xac>
 800b404:	ec45 4b10 	vmov	d0, r4, r5
 800b408:	f000 f86a 	bl	800b4e0 <finite>
 800b40c:	b180      	cbz	r0, 800b430 <pow+0xac>
 800b40e:	4632      	mov	r2, r6
 800b410:	463b      	mov	r3, r7
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f5 fb55 	bl	8000ac4 <__aeabi_dcmpun>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d0e2      	beq.n	800b3e4 <pow+0x60>
 800b41e:	f001 f93b 	bl	800c698 <__errno>
 800b422:	2321      	movs	r3, #33	@ 0x21
 800b424:	6003      	str	r3, [r0, #0]
 800b426:	ecbd 8b02 	vpop	{d8}
 800b42a:	ec47 6b10 	vmov	d0, r6, r7
 800b42e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b430:	2200      	movs	r2, #0
 800b432:	2300      	movs	r3, #0
 800b434:	4630      	mov	r0, r6
 800b436:	4639      	mov	r1, r7
 800b438:	f7f5 fb12 	bl	8000a60 <__aeabi_dcmpeq>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d0f2      	beq.n	800b426 <pow+0xa2>
 800b440:	eeb0 0a48 	vmov.f32	s0, s16
 800b444:	eef0 0a68 	vmov.f32	s1, s17
 800b448:	f000 f84a 	bl	800b4e0 <finite>
 800b44c:	2800      	cmp	r0, #0
 800b44e:	d0ea      	beq.n	800b426 <pow+0xa2>
 800b450:	ec45 4b10 	vmov	d0, r4, r5
 800b454:	f000 f844 	bl	800b4e0 <finite>
 800b458:	e7c3      	b.n	800b3e2 <pow+0x5e>
 800b45a:	4f01      	ldr	r7, [pc, #4]	@ (800b460 <pow+0xdc>)
 800b45c:	2600      	movs	r6, #0
 800b45e:	e7e2      	b.n	800b426 <pow+0xa2>
 800b460:	3ff00000 	.word	0x3ff00000

0800b464 <fmodf>:
 800b464:	b508      	push	{r3, lr}
 800b466:	ed2d 8b02 	vpush	{d8}
 800b46a:	eef0 8a40 	vmov.f32	s17, s0
 800b46e:	eeb0 8a60 	vmov.f32	s16, s1
 800b472:	f000 fe55 	bl	800c120 <__ieee754_fmodf>
 800b476:	eef4 8a48 	vcmp.f32	s17, s16
 800b47a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b47e:	d60c      	bvs.n	800b49a <fmodf+0x36>
 800b480:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b4a0 <fmodf+0x3c>
 800b484:	eeb4 8a68 	vcmp.f32	s16, s17
 800b488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b48c:	d105      	bne.n	800b49a <fmodf+0x36>
 800b48e:	f001 f903 	bl	800c698 <__errno>
 800b492:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b496:	2321      	movs	r3, #33	@ 0x21
 800b498:	6003      	str	r3, [r0, #0]
 800b49a:	ecbd 8b02 	vpop	{d8}
 800b49e:	bd08      	pop	{r3, pc}
 800b4a0:	00000000 	.word	0x00000000

0800b4a4 <sqrtf>:
 800b4a4:	b508      	push	{r3, lr}
 800b4a6:	ed2d 8b02 	vpush	{d8}
 800b4aa:	eeb0 8a40 	vmov.f32	s16, s0
 800b4ae:	f000 f8a1 	bl	800b5f4 <__ieee754_sqrtf>
 800b4b2:	eeb4 8a48 	vcmp.f32	s16, s16
 800b4b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ba:	d60c      	bvs.n	800b4d6 <sqrtf+0x32>
 800b4bc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800b4dc <sqrtf+0x38>
 800b4c0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800b4c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4c8:	d505      	bpl.n	800b4d6 <sqrtf+0x32>
 800b4ca:	f001 f8e5 	bl	800c698 <__errno>
 800b4ce:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800b4d2:	2321      	movs	r3, #33	@ 0x21
 800b4d4:	6003      	str	r3, [r0, #0]
 800b4d6:	ecbd 8b02 	vpop	{d8}
 800b4da:	bd08      	pop	{r3, pc}
 800b4dc:	00000000 	.word	0x00000000

0800b4e0 <finite>:
 800b4e0:	b082      	sub	sp, #8
 800b4e2:	ed8d 0b00 	vstr	d0, [sp]
 800b4e6:	9801      	ldr	r0, [sp, #4]
 800b4e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b4ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b4f0:	0fc0      	lsrs	r0, r0, #31
 800b4f2:	b002      	add	sp, #8
 800b4f4:	4770      	bx	lr
	...

0800b4f8 <scalbn>:
 800b4f8:	b570      	push	{r4, r5, r6, lr}
 800b4fa:	ec55 4b10 	vmov	r4, r5, d0
 800b4fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b502:	4606      	mov	r6, r0
 800b504:	462b      	mov	r3, r5
 800b506:	b991      	cbnz	r1, 800b52e <scalbn+0x36>
 800b508:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b50c:	4323      	orrs	r3, r4
 800b50e:	d03d      	beq.n	800b58c <scalbn+0x94>
 800b510:	4b35      	ldr	r3, [pc, #212]	@ (800b5e8 <scalbn+0xf0>)
 800b512:	4620      	mov	r0, r4
 800b514:	4629      	mov	r1, r5
 800b516:	2200      	movs	r2, #0
 800b518:	f7f5 f83a 	bl	8000590 <__aeabi_dmul>
 800b51c:	4b33      	ldr	r3, [pc, #204]	@ (800b5ec <scalbn+0xf4>)
 800b51e:	429e      	cmp	r6, r3
 800b520:	4604      	mov	r4, r0
 800b522:	460d      	mov	r5, r1
 800b524:	da0f      	bge.n	800b546 <scalbn+0x4e>
 800b526:	a328      	add	r3, pc, #160	@ (adr r3, 800b5c8 <scalbn+0xd0>)
 800b528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52c:	e01e      	b.n	800b56c <scalbn+0x74>
 800b52e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b532:	4291      	cmp	r1, r2
 800b534:	d10b      	bne.n	800b54e <scalbn+0x56>
 800b536:	4622      	mov	r2, r4
 800b538:	4620      	mov	r0, r4
 800b53a:	4629      	mov	r1, r5
 800b53c:	f7f4 fe72 	bl	8000224 <__adddf3>
 800b540:	4604      	mov	r4, r0
 800b542:	460d      	mov	r5, r1
 800b544:	e022      	b.n	800b58c <scalbn+0x94>
 800b546:	460b      	mov	r3, r1
 800b548:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b54c:	3936      	subs	r1, #54	@ 0x36
 800b54e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b552:	4296      	cmp	r6, r2
 800b554:	dd0d      	ble.n	800b572 <scalbn+0x7a>
 800b556:	2d00      	cmp	r5, #0
 800b558:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5d0 <scalbn+0xd8>)
 800b55a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b55e:	da02      	bge.n	800b566 <scalbn+0x6e>
 800b560:	a11d      	add	r1, pc, #116	@ (adr r1, 800b5d8 <scalbn+0xe0>)
 800b562:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b566:	a31a      	add	r3, pc, #104	@ (adr r3, 800b5d0 <scalbn+0xd8>)
 800b568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b56c:	f7f5 f810 	bl	8000590 <__aeabi_dmul>
 800b570:	e7e6      	b.n	800b540 <scalbn+0x48>
 800b572:	1872      	adds	r2, r6, r1
 800b574:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b578:	428a      	cmp	r2, r1
 800b57a:	dcec      	bgt.n	800b556 <scalbn+0x5e>
 800b57c:	2a00      	cmp	r2, #0
 800b57e:	dd08      	ble.n	800b592 <scalbn+0x9a>
 800b580:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b584:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b588:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b58c:	ec45 4b10 	vmov	d0, r4, r5
 800b590:	bd70      	pop	{r4, r5, r6, pc}
 800b592:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b596:	da08      	bge.n	800b5aa <scalbn+0xb2>
 800b598:	2d00      	cmp	r5, #0
 800b59a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b5c8 <scalbn+0xd0>)
 800b59c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a0:	dac1      	bge.n	800b526 <scalbn+0x2e>
 800b5a2:	a10f      	add	r1, pc, #60	@ (adr r1, 800b5e0 <scalbn+0xe8>)
 800b5a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5a8:	e7bd      	b.n	800b526 <scalbn+0x2e>
 800b5aa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5ae:	3236      	adds	r2, #54	@ 0x36
 800b5b0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b5b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b5f0 <scalbn+0xf8>)
 800b5bc:	4629      	mov	r1, r5
 800b5be:	2200      	movs	r2, #0
 800b5c0:	e7d4      	b.n	800b56c <scalbn+0x74>
 800b5c2:	bf00      	nop
 800b5c4:	f3af 8000 	nop.w
 800b5c8:	c2f8f359 	.word	0xc2f8f359
 800b5cc:	01a56e1f 	.word	0x01a56e1f
 800b5d0:	8800759c 	.word	0x8800759c
 800b5d4:	7e37e43c 	.word	0x7e37e43c
 800b5d8:	8800759c 	.word	0x8800759c
 800b5dc:	fe37e43c 	.word	0xfe37e43c
 800b5e0:	c2f8f359 	.word	0xc2f8f359
 800b5e4:	81a56e1f 	.word	0x81a56e1f
 800b5e8:	43500000 	.word	0x43500000
 800b5ec:	ffff3cb0 	.word	0xffff3cb0
 800b5f0:	3c900000 	.word	0x3c900000

0800b5f4 <__ieee754_sqrtf>:
 800b5f4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b5f8:	4770      	bx	lr
	...

0800b5fc <floorf>:
 800b5fc:	ee10 3a10 	vmov	r3, s0
 800b600:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b604:	3a7f      	subs	r2, #127	@ 0x7f
 800b606:	2a16      	cmp	r2, #22
 800b608:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800b60c:	dc2b      	bgt.n	800b666 <floorf+0x6a>
 800b60e:	2a00      	cmp	r2, #0
 800b610:	da12      	bge.n	800b638 <floorf+0x3c>
 800b612:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b678 <floorf+0x7c>
 800b616:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b61a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b61e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b622:	dd06      	ble.n	800b632 <floorf+0x36>
 800b624:	2b00      	cmp	r3, #0
 800b626:	da24      	bge.n	800b672 <floorf+0x76>
 800b628:	2900      	cmp	r1, #0
 800b62a:	4b14      	ldr	r3, [pc, #80]	@ (800b67c <floorf+0x80>)
 800b62c:	bf08      	it	eq
 800b62e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800b632:	ee00 3a10 	vmov	s0, r3
 800b636:	4770      	bx	lr
 800b638:	4911      	ldr	r1, [pc, #68]	@ (800b680 <floorf+0x84>)
 800b63a:	4111      	asrs	r1, r2
 800b63c:	420b      	tst	r3, r1
 800b63e:	d0fa      	beq.n	800b636 <floorf+0x3a>
 800b640:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800b678 <floorf+0x7c>
 800b644:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b648:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	ddef      	ble.n	800b632 <floorf+0x36>
 800b652:	2b00      	cmp	r3, #0
 800b654:	bfbe      	ittt	lt
 800b656:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800b65a:	fa40 f202 	asrlt.w	r2, r0, r2
 800b65e:	189b      	addlt	r3, r3, r2
 800b660:	ea23 0301 	bic.w	r3, r3, r1
 800b664:	e7e5      	b.n	800b632 <floorf+0x36>
 800b666:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800b66a:	d3e4      	bcc.n	800b636 <floorf+0x3a>
 800b66c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b670:	4770      	bx	lr
 800b672:	2300      	movs	r3, #0
 800b674:	e7dd      	b.n	800b632 <floorf+0x36>
 800b676:	bf00      	nop
 800b678:	7149f2ca 	.word	0x7149f2ca
 800b67c:	bf800000 	.word	0xbf800000
 800b680:	007fffff 	.word	0x007fffff
 800b684:	00000000 	.word	0x00000000

0800b688 <__ieee754_pow>:
 800b688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b68c:	b091      	sub	sp, #68	@ 0x44
 800b68e:	ed8d 1b00 	vstr	d1, [sp]
 800b692:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b696:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b69a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b69e:	ec57 6b10 	vmov	r6, r7, d0
 800b6a2:	d113      	bne.n	800b6cc <__ieee754_pow+0x44>
 800b6a4:	19b3      	adds	r3, r6, r6
 800b6a6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b6aa:	4152      	adcs	r2, r2
 800b6ac:	4298      	cmp	r0, r3
 800b6ae:	4b98      	ldr	r3, [pc, #608]	@ (800b910 <__ieee754_pow+0x288>)
 800b6b0:	4193      	sbcs	r3, r2
 800b6b2:	f080 84ea 	bcs.w	800c08a <__ieee754_pow+0xa02>
 800b6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ba:	4630      	mov	r0, r6
 800b6bc:	4639      	mov	r1, r7
 800b6be:	f7f4 fdb1 	bl	8000224 <__adddf3>
 800b6c2:	ec41 0b10 	vmov	d0, r0, r1
 800b6c6:	b011      	add	sp, #68	@ 0x44
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	4a91      	ldr	r2, [pc, #580]	@ (800b914 <__ieee754_pow+0x28c>)
 800b6ce:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b6d2:	4590      	cmp	r8, r2
 800b6d4:	463d      	mov	r5, r7
 800b6d6:	4633      	mov	r3, r6
 800b6d8:	d806      	bhi.n	800b6e8 <__ieee754_pow+0x60>
 800b6da:	d101      	bne.n	800b6e0 <__ieee754_pow+0x58>
 800b6dc:	2e00      	cmp	r6, #0
 800b6de:	d1ea      	bne.n	800b6b6 <__ieee754_pow+0x2e>
 800b6e0:	4592      	cmp	sl, r2
 800b6e2:	d801      	bhi.n	800b6e8 <__ieee754_pow+0x60>
 800b6e4:	d10e      	bne.n	800b704 <__ieee754_pow+0x7c>
 800b6e6:	b169      	cbz	r1, 800b704 <__ieee754_pow+0x7c>
 800b6e8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b6ec:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b6f0:	431d      	orrs	r5, r3
 800b6f2:	d1e0      	bne.n	800b6b6 <__ieee754_pow+0x2e>
 800b6f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6f8:	18db      	adds	r3, r3, r3
 800b6fa:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b6fe:	4152      	adcs	r2, r2
 800b700:	429d      	cmp	r5, r3
 800b702:	e7d4      	b.n	800b6ae <__ieee754_pow+0x26>
 800b704:	2d00      	cmp	r5, #0
 800b706:	46c3      	mov	fp, r8
 800b708:	da3a      	bge.n	800b780 <__ieee754_pow+0xf8>
 800b70a:	4a83      	ldr	r2, [pc, #524]	@ (800b918 <__ieee754_pow+0x290>)
 800b70c:	4592      	cmp	sl, r2
 800b70e:	d84d      	bhi.n	800b7ac <__ieee754_pow+0x124>
 800b710:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b714:	4592      	cmp	sl, r2
 800b716:	f240 84c7 	bls.w	800c0a8 <__ieee754_pow+0xa20>
 800b71a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b71e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b722:	2a14      	cmp	r2, #20
 800b724:	dd0f      	ble.n	800b746 <__ieee754_pow+0xbe>
 800b726:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b72a:	fa21 f402 	lsr.w	r4, r1, r2
 800b72e:	fa04 f202 	lsl.w	r2, r4, r2
 800b732:	428a      	cmp	r2, r1
 800b734:	f040 84b8 	bne.w	800c0a8 <__ieee754_pow+0xa20>
 800b738:	f004 0401 	and.w	r4, r4, #1
 800b73c:	f1c4 0402 	rsb	r4, r4, #2
 800b740:	2900      	cmp	r1, #0
 800b742:	d158      	bne.n	800b7f6 <__ieee754_pow+0x16e>
 800b744:	e00e      	b.n	800b764 <__ieee754_pow+0xdc>
 800b746:	2900      	cmp	r1, #0
 800b748:	d154      	bne.n	800b7f4 <__ieee754_pow+0x16c>
 800b74a:	f1c2 0214 	rsb	r2, r2, #20
 800b74e:	fa4a f402 	asr.w	r4, sl, r2
 800b752:	fa04 f202 	lsl.w	r2, r4, r2
 800b756:	4552      	cmp	r2, sl
 800b758:	f040 84a3 	bne.w	800c0a2 <__ieee754_pow+0xa1a>
 800b75c:	f004 0401 	and.w	r4, r4, #1
 800b760:	f1c4 0402 	rsb	r4, r4, #2
 800b764:	4a6d      	ldr	r2, [pc, #436]	@ (800b91c <__ieee754_pow+0x294>)
 800b766:	4592      	cmp	sl, r2
 800b768:	d12e      	bne.n	800b7c8 <__ieee754_pow+0x140>
 800b76a:	f1b9 0f00 	cmp.w	r9, #0
 800b76e:	f280 8494 	bge.w	800c09a <__ieee754_pow+0xa12>
 800b772:	496a      	ldr	r1, [pc, #424]	@ (800b91c <__ieee754_pow+0x294>)
 800b774:	4632      	mov	r2, r6
 800b776:	463b      	mov	r3, r7
 800b778:	2000      	movs	r0, #0
 800b77a:	f7f5 f833 	bl	80007e4 <__aeabi_ddiv>
 800b77e:	e7a0      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b780:	2400      	movs	r4, #0
 800b782:	bbc1      	cbnz	r1, 800b7f6 <__ieee754_pow+0x16e>
 800b784:	4a63      	ldr	r2, [pc, #396]	@ (800b914 <__ieee754_pow+0x28c>)
 800b786:	4592      	cmp	sl, r2
 800b788:	d1ec      	bne.n	800b764 <__ieee754_pow+0xdc>
 800b78a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b78e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b792:	431a      	orrs	r2, r3
 800b794:	f000 8479 	beq.w	800c08a <__ieee754_pow+0xa02>
 800b798:	4b61      	ldr	r3, [pc, #388]	@ (800b920 <__ieee754_pow+0x298>)
 800b79a:	4598      	cmp	r8, r3
 800b79c:	d908      	bls.n	800b7b0 <__ieee754_pow+0x128>
 800b79e:	f1b9 0f00 	cmp.w	r9, #0
 800b7a2:	f2c0 8476 	blt.w	800c092 <__ieee754_pow+0xa0a>
 800b7a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b7aa:	e78a      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b7ac:	2402      	movs	r4, #2
 800b7ae:	e7e8      	b.n	800b782 <__ieee754_pow+0xfa>
 800b7b0:	f1b9 0f00 	cmp.w	r9, #0
 800b7b4:	f04f 0000 	mov.w	r0, #0
 800b7b8:	f04f 0100 	mov.w	r1, #0
 800b7bc:	da81      	bge.n	800b6c2 <__ieee754_pow+0x3a>
 800b7be:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b7c2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b7c6:	e77c      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b7c8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b7cc:	d106      	bne.n	800b7dc <__ieee754_pow+0x154>
 800b7ce:	4632      	mov	r2, r6
 800b7d0:	463b      	mov	r3, r7
 800b7d2:	4630      	mov	r0, r6
 800b7d4:	4639      	mov	r1, r7
 800b7d6:	f7f4 fedb 	bl	8000590 <__aeabi_dmul>
 800b7da:	e772      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b7dc:	4a51      	ldr	r2, [pc, #324]	@ (800b924 <__ieee754_pow+0x29c>)
 800b7de:	4591      	cmp	r9, r2
 800b7e0:	d109      	bne.n	800b7f6 <__ieee754_pow+0x16e>
 800b7e2:	2d00      	cmp	r5, #0
 800b7e4:	db07      	blt.n	800b7f6 <__ieee754_pow+0x16e>
 800b7e6:	ec47 6b10 	vmov	d0, r6, r7
 800b7ea:	b011      	add	sp, #68	@ 0x44
 800b7ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f0:	f000 bd56 	b.w	800c2a0 <__ieee754_sqrt>
 800b7f4:	2400      	movs	r4, #0
 800b7f6:	ec47 6b10 	vmov	d0, r6, r7
 800b7fa:	9302      	str	r3, [sp, #8]
 800b7fc:	f000 fc88 	bl	800c110 <fabs>
 800b800:	9b02      	ldr	r3, [sp, #8]
 800b802:	ec51 0b10 	vmov	r0, r1, d0
 800b806:	bb53      	cbnz	r3, 800b85e <__ieee754_pow+0x1d6>
 800b808:	4b44      	ldr	r3, [pc, #272]	@ (800b91c <__ieee754_pow+0x294>)
 800b80a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b80e:	429a      	cmp	r2, r3
 800b810:	d002      	beq.n	800b818 <__ieee754_pow+0x190>
 800b812:	f1b8 0f00 	cmp.w	r8, #0
 800b816:	d122      	bne.n	800b85e <__ieee754_pow+0x1d6>
 800b818:	f1b9 0f00 	cmp.w	r9, #0
 800b81c:	da05      	bge.n	800b82a <__ieee754_pow+0x1a2>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	2000      	movs	r0, #0
 800b824:	493d      	ldr	r1, [pc, #244]	@ (800b91c <__ieee754_pow+0x294>)
 800b826:	f7f4 ffdd 	bl	80007e4 <__aeabi_ddiv>
 800b82a:	2d00      	cmp	r5, #0
 800b82c:	f6bf af49 	bge.w	800b6c2 <__ieee754_pow+0x3a>
 800b830:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b834:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b838:	ea58 0804 	orrs.w	r8, r8, r4
 800b83c:	d108      	bne.n	800b850 <__ieee754_pow+0x1c8>
 800b83e:	4602      	mov	r2, r0
 800b840:	460b      	mov	r3, r1
 800b842:	4610      	mov	r0, r2
 800b844:	4619      	mov	r1, r3
 800b846:	f7f4 fceb 	bl	8000220 <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	e794      	b.n	800b77a <__ieee754_pow+0xf2>
 800b850:	2c01      	cmp	r4, #1
 800b852:	f47f af36 	bne.w	800b6c2 <__ieee754_pow+0x3a>
 800b856:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b85a:	4619      	mov	r1, r3
 800b85c:	e731      	b.n	800b6c2 <__ieee754_pow+0x3a>
 800b85e:	0feb      	lsrs	r3, r5, #31
 800b860:	3b01      	subs	r3, #1
 800b862:	ea53 0204 	orrs.w	r2, r3, r4
 800b866:	d102      	bne.n	800b86e <__ieee754_pow+0x1e6>
 800b868:	4632      	mov	r2, r6
 800b86a:	463b      	mov	r3, r7
 800b86c:	e7e9      	b.n	800b842 <__ieee754_pow+0x1ba>
 800b86e:	3c01      	subs	r4, #1
 800b870:	431c      	orrs	r4, r3
 800b872:	d016      	beq.n	800b8a2 <__ieee754_pow+0x21a>
 800b874:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b900 <__ieee754_pow+0x278>
 800b878:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b87c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b880:	f240 8112 	bls.w	800baa8 <__ieee754_pow+0x420>
 800b884:	4b28      	ldr	r3, [pc, #160]	@ (800b928 <__ieee754_pow+0x2a0>)
 800b886:	459a      	cmp	sl, r3
 800b888:	4b25      	ldr	r3, [pc, #148]	@ (800b920 <__ieee754_pow+0x298>)
 800b88a:	d916      	bls.n	800b8ba <__ieee754_pow+0x232>
 800b88c:	4598      	cmp	r8, r3
 800b88e:	d80b      	bhi.n	800b8a8 <__ieee754_pow+0x220>
 800b890:	f1b9 0f00 	cmp.w	r9, #0
 800b894:	da0b      	bge.n	800b8ae <__ieee754_pow+0x226>
 800b896:	2000      	movs	r0, #0
 800b898:	b011      	add	sp, #68	@ 0x44
 800b89a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89e:	f000 bcf7 	b.w	800c290 <__math_oflow>
 800b8a2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b908 <__ieee754_pow+0x280>
 800b8a6:	e7e7      	b.n	800b878 <__ieee754_pow+0x1f0>
 800b8a8:	f1b9 0f00 	cmp.w	r9, #0
 800b8ac:	dcf3      	bgt.n	800b896 <__ieee754_pow+0x20e>
 800b8ae:	2000      	movs	r0, #0
 800b8b0:	b011      	add	sp, #68	@ 0x44
 800b8b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b6:	f000 bce3 	b.w	800c280 <__math_uflow>
 800b8ba:	4598      	cmp	r8, r3
 800b8bc:	d20c      	bcs.n	800b8d8 <__ieee754_pow+0x250>
 800b8be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	f7f5 f8d5 	bl	8000a74 <__aeabi_dcmplt>
 800b8ca:	3800      	subs	r0, #0
 800b8cc:	bf18      	it	ne
 800b8ce:	2001      	movne	r0, #1
 800b8d0:	f1b9 0f00 	cmp.w	r9, #0
 800b8d4:	daec      	bge.n	800b8b0 <__ieee754_pow+0x228>
 800b8d6:	e7df      	b.n	800b898 <__ieee754_pow+0x210>
 800b8d8:	4b10      	ldr	r3, [pc, #64]	@ (800b91c <__ieee754_pow+0x294>)
 800b8da:	4598      	cmp	r8, r3
 800b8dc:	f04f 0200 	mov.w	r2, #0
 800b8e0:	d924      	bls.n	800b92c <__ieee754_pow+0x2a4>
 800b8e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	f7f5 f8c4 	bl	8000a74 <__aeabi_dcmplt>
 800b8ec:	3800      	subs	r0, #0
 800b8ee:	bf18      	it	ne
 800b8f0:	2001      	movne	r0, #1
 800b8f2:	f1b9 0f00 	cmp.w	r9, #0
 800b8f6:	dccf      	bgt.n	800b898 <__ieee754_pow+0x210>
 800b8f8:	e7da      	b.n	800b8b0 <__ieee754_pow+0x228>
 800b8fa:	bf00      	nop
 800b8fc:	f3af 8000 	nop.w
 800b900:	00000000 	.word	0x00000000
 800b904:	3ff00000 	.word	0x3ff00000
 800b908:	00000000 	.word	0x00000000
 800b90c:	bff00000 	.word	0xbff00000
 800b910:	fff00000 	.word	0xfff00000
 800b914:	7ff00000 	.word	0x7ff00000
 800b918:	433fffff 	.word	0x433fffff
 800b91c:	3ff00000 	.word	0x3ff00000
 800b920:	3fefffff 	.word	0x3fefffff
 800b924:	3fe00000 	.word	0x3fe00000
 800b928:	43f00000 	.word	0x43f00000
 800b92c:	4b5a      	ldr	r3, [pc, #360]	@ (800ba98 <__ieee754_pow+0x410>)
 800b92e:	f7f4 fc77 	bl	8000220 <__aeabi_dsub>
 800b932:	a351      	add	r3, pc, #324	@ (adr r3, 800ba78 <__ieee754_pow+0x3f0>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	4604      	mov	r4, r0
 800b93a:	460d      	mov	r5, r1
 800b93c:	f7f4 fe28 	bl	8000590 <__aeabi_dmul>
 800b940:	a34f      	add	r3, pc, #316	@ (adr r3, 800ba80 <__ieee754_pow+0x3f8>)
 800b942:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b946:	4606      	mov	r6, r0
 800b948:	460f      	mov	r7, r1
 800b94a:	4620      	mov	r0, r4
 800b94c:	4629      	mov	r1, r5
 800b94e:	f7f4 fe1f 	bl	8000590 <__aeabi_dmul>
 800b952:	4b52      	ldr	r3, [pc, #328]	@ (800ba9c <__ieee754_pow+0x414>)
 800b954:	4682      	mov	sl, r0
 800b956:	468b      	mov	fp, r1
 800b958:	2200      	movs	r2, #0
 800b95a:	4620      	mov	r0, r4
 800b95c:	4629      	mov	r1, r5
 800b95e:	f7f4 fe17 	bl	8000590 <__aeabi_dmul>
 800b962:	4602      	mov	r2, r0
 800b964:	460b      	mov	r3, r1
 800b966:	a148      	add	r1, pc, #288	@ (adr r1, 800ba88 <__ieee754_pow+0x400>)
 800b968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b96c:	f7f4 fc58 	bl	8000220 <__aeabi_dsub>
 800b970:	4622      	mov	r2, r4
 800b972:	462b      	mov	r3, r5
 800b974:	f7f4 fe0c 	bl	8000590 <__aeabi_dmul>
 800b978:	4602      	mov	r2, r0
 800b97a:	460b      	mov	r3, r1
 800b97c:	2000      	movs	r0, #0
 800b97e:	4948      	ldr	r1, [pc, #288]	@ (800baa0 <__ieee754_pow+0x418>)
 800b980:	f7f4 fc4e 	bl	8000220 <__aeabi_dsub>
 800b984:	4622      	mov	r2, r4
 800b986:	4680      	mov	r8, r0
 800b988:	4689      	mov	r9, r1
 800b98a:	462b      	mov	r3, r5
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	f7f4 fdfe 	bl	8000590 <__aeabi_dmul>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4640      	mov	r0, r8
 800b99a:	4649      	mov	r1, r9
 800b99c:	f7f4 fdf8 	bl	8000590 <__aeabi_dmul>
 800b9a0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ba90 <__ieee754_pow+0x408>)
 800b9a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a6:	f7f4 fdf3 	bl	8000590 <__aeabi_dmul>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4650      	mov	r0, sl
 800b9b0:	4659      	mov	r1, fp
 800b9b2:	f7f4 fc35 	bl	8000220 <__aeabi_dsub>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	460b      	mov	r3, r1
 800b9ba:	4680      	mov	r8, r0
 800b9bc:	4689      	mov	r9, r1
 800b9be:	4630      	mov	r0, r6
 800b9c0:	4639      	mov	r1, r7
 800b9c2:	f7f4 fc2f 	bl	8000224 <__adddf3>
 800b9c6:	2400      	movs	r4, #0
 800b9c8:	4632      	mov	r2, r6
 800b9ca:	463b      	mov	r3, r7
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	460d      	mov	r5, r1
 800b9d0:	f7f4 fc26 	bl	8000220 <__aeabi_dsub>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	460b      	mov	r3, r1
 800b9d8:	4640      	mov	r0, r8
 800b9da:	4649      	mov	r1, r9
 800b9dc:	f7f4 fc20 	bl	8000220 <__aeabi_dsub>
 800b9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b9e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	9304      	str	r3, [sp, #16]
 800b9ec:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	460f      	mov	r7, r1
 800b9f4:	4652      	mov	r2, sl
 800b9f6:	465b      	mov	r3, fp
 800b9f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b9fc:	f7f4 fc10 	bl	8000220 <__aeabi_dsub>
 800ba00:	4622      	mov	r2, r4
 800ba02:	462b      	mov	r3, r5
 800ba04:	f7f4 fdc4 	bl	8000590 <__aeabi_dmul>
 800ba08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ba0c:	4680      	mov	r8, r0
 800ba0e:	4689      	mov	r9, r1
 800ba10:	4630      	mov	r0, r6
 800ba12:	4639      	mov	r1, r7
 800ba14:	f7f4 fdbc 	bl	8000590 <__aeabi_dmul>
 800ba18:	4602      	mov	r2, r0
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4640      	mov	r0, r8
 800ba1e:	4649      	mov	r1, r9
 800ba20:	f7f4 fc00 	bl	8000224 <__adddf3>
 800ba24:	4652      	mov	r2, sl
 800ba26:	465b      	mov	r3, fp
 800ba28:	4606      	mov	r6, r0
 800ba2a:	460f      	mov	r7, r1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	4629      	mov	r1, r5
 800ba30:	f7f4 fdae 	bl	8000590 <__aeabi_dmul>
 800ba34:	460b      	mov	r3, r1
 800ba36:	4602      	mov	r2, r0
 800ba38:	4680      	mov	r8, r0
 800ba3a:	4689      	mov	r9, r1
 800ba3c:	4630      	mov	r0, r6
 800ba3e:	4639      	mov	r1, r7
 800ba40:	f7f4 fbf0 	bl	8000224 <__adddf3>
 800ba44:	4b17      	ldr	r3, [pc, #92]	@ (800baa4 <__ieee754_pow+0x41c>)
 800ba46:	4299      	cmp	r1, r3
 800ba48:	4604      	mov	r4, r0
 800ba4a:	460d      	mov	r5, r1
 800ba4c:	468a      	mov	sl, r1
 800ba4e:	468b      	mov	fp, r1
 800ba50:	f340 82ef 	ble.w	800c032 <__ieee754_pow+0x9aa>
 800ba54:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ba58:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ba5c:	4303      	orrs	r3, r0
 800ba5e:	f000 81e8 	beq.w	800be32 <__ieee754_pow+0x7aa>
 800ba62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba66:	2200      	movs	r2, #0
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f7f5 f803 	bl	8000a74 <__aeabi_dcmplt>
 800ba6e:	3800      	subs	r0, #0
 800ba70:	bf18      	it	ne
 800ba72:	2001      	movne	r0, #1
 800ba74:	e710      	b.n	800b898 <__ieee754_pow+0x210>
 800ba76:	bf00      	nop
 800ba78:	60000000 	.word	0x60000000
 800ba7c:	3ff71547 	.word	0x3ff71547
 800ba80:	f85ddf44 	.word	0xf85ddf44
 800ba84:	3e54ae0b 	.word	0x3e54ae0b
 800ba88:	55555555 	.word	0x55555555
 800ba8c:	3fd55555 	.word	0x3fd55555
 800ba90:	652b82fe 	.word	0x652b82fe
 800ba94:	3ff71547 	.word	0x3ff71547
 800ba98:	3ff00000 	.word	0x3ff00000
 800ba9c:	3fd00000 	.word	0x3fd00000
 800baa0:	3fe00000 	.word	0x3fe00000
 800baa4:	408fffff 	.word	0x408fffff
 800baa8:	4bd5      	ldr	r3, [pc, #852]	@ (800be00 <__ieee754_pow+0x778>)
 800baaa:	402b      	ands	r3, r5
 800baac:	2200      	movs	r2, #0
 800baae:	b92b      	cbnz	r3, 800babc <__ieee754_pow+0x434>
 800bab0:	4bd4      	ldr	r3, [pc, #848]	@ (800be04 <__ieee754_pow+0x77c>)
 800bab2:	f7f4 fd6d 	bl	8000590 <__aeabi_dmul>
 800bab6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800baba:	468b      	mov	fp, r1
 800babc:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bac0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bac4:	4413      	add	r3, r2
 800bac6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bac8:	4bcf      	ldr	r3, [pc, #828]	@ (800be08 <__ieee754_pow+0x780>)
 800baca:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bace:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bad2:	459b      	cmp	fp, r3
 800bad4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bad8:	dd08      	ble.n	800baec <__ieee754_pow+0x464>
 800bada:	4bcc      	ldr	r3, [pc, #816]	@ (800be0c <__ieee754_pow+0x784>)
 800badc:	459b      	cmp	fp, r3
 800bade:	f340 81a5 	ble.w	800be2c <__ieee754_pow+0x7a4>
 800bae2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bae4:	3301      	adds	r3, #1
 800bae6:	930a      	str	r3, [sp, #40]	@ 0x28
 800bae8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800baec:	f04f 0a00 	mov.w	sl, #0
 800baf0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800baf4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800baf6:	4bc6      	ldr	r3, [pc, #792]	@ (800be10 <__ieee754_pow+0x788>)
 800baf8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bafc:	ed93 7b00 	vldr	d7, [r3]
 800bb00:	4629      	mov	r1, r5
 800bb02:	ec53 2b17 	vmov	r2, r3, d7
 800bb06:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bb0a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bb0e:	f7f4 fb87 	bl	8000220 <__aeabi_dsub>
 800bb12:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb1e:	f7f4 fb81 	bl	8000224 <__adddf3>
 800bb22:	4602      	mov	r2, r0
 800bb24:	460b      	mov	r3, r1
 800bb26:	2000      	movs	r0, #0
 800bb28:	49ba      	ldr	r1, [pc, #744]	@ (800be14 <__ieee754_pow+0x78c>)
 800bb2a:	f7f4 fe5b 	bl	80007e4 <__aeabi_ddiv>
 800bb2e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fd29 	bl	8000590 <__aeabi_dmul>
 800bb3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb42:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bb46:	106d      	asrs	r5, r5, #1
 800bb48:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bb4c:	f04f 0b00 	mov.w	fp, #0
 800bb50:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bb54:	4661      	mov	r1, ip
 800bb56:	2200      	movs	r2, #0
 800bb58:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bb5c:	4658      	mov	r0, fp
 800bb5e:	46e1      	mov	r9, ip
 800bb60:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bb64:	4614      	mov	r4, r2
 800bb66:	461d      	mov	r5, r3
 800bb68:	f7f4 fd12 	bl	8000590 <__aeabi_dmul>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	460b      	mov	r3, r1
 800bb70:	4630      	mov	r0, r6
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fb54 	bl	8000220 <__aeabi_dsub>
 800bb78:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bb7c:	4606      	mov	r6, r0
 800bb7e:	460f      	mov	r7, r1
 800bb80:	4620      	mov	r0, r4
 800bb82:	4629      	mov	r1, r5
 800bb84:	f7f4 fb4c 	bl	8000220 <__aeabi_dsub>
 800bb88:	4602      	mov	r2, r0
 800bb8a:	460b      	mov	r3, r1
 800bb8c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bb90:	f7f4 fb46 	bl	8000220 <__aeabi_dsub>
 800bb94:	465a      	mov	r2, fp
 800bb96:	464b      	mov	r3, r9
 800bb98:	f7f4 fcfa 	bl	8000590 <__aeabi_dmul>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	460b      	mov	r3, r1
 800bba0:	4630      	mov	r0, r6
 800bba2:	4639      	mov	r1, r7
 800bba4:	f7f4 fb3c 	bl	8000220 <__aeabi_dsub>
 800bba8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800bbac:	f7f4 fcf0 	bl	8000590 <__aeabi_dmul>
 800bbb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bbb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bbb8:	4610      	mov	r0, r2
 800bbba:	4619      	mov	r1, r3
 800bbbc:	f7f4 fce8 	bl	8000590 <__aeabi_dmul>
 800bbc0:	a37d      	add	r3, pc, #500	@ (adr r3, 800bdb8 <__ieee754_pow+0x730>)
 800bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc6:	4604      	mov	r4, r0
 800bbc8:	460d      	mov	r5, r1
 800bbca:	f7f4 fce1 	bl	8000590 <__aeabi_dmul>
 800bbce:	a37c      	add	r3, pc, #496	@ (adr r3, 800bdc0 <__ieee754_pow+0x738>)
 800bbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbd4:	f7f4 fb26 	bl	8000224 <__adddf3>
 800bbd8:	4622      	mov	r2, r4
 800bbda:	462b      	mov	r3, r5
 800bbdc:	f7f4 fcd8 	bl	8000590 <__aeabi_dmul>
 800bbe0:	a379      	add	r3, pc, #484	@ (adr r3, 800bdc8 <__ieee754_pow+0x740>)
 800bbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe6:	f7f4 fb1d 	bl	8000224 <__adddf3>
 800bbea:	4622      	mov	r2, r4
 800bbec:	462b      	mov	r3, r5
 800bbee:	f7f4 fccf 	bl	8000590 <__aeabi_dmul>
 800bbf2:	a377      	add	r3, pc, #476	@ (adr r3, 800bdd0 <__ieee754_pow+0x748>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fb14 	bl	8000224 <__adddf3>
 800bbfc:	4622      	mov	r2, r4
 800bbfe:	462b      	mov	r3, r5
 800bc00:	f7f4 fcc6 	bl	8000590 <__aeabi_dmul>
 800bc04:	a374      	add	r3, pc, #464	@ (adr r3, 800bdd8 <__ieee754_pow+0x750>)
 800bc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0a:	f7f4 fb0b 	bl	8000224 <__adddf3>
 800bc0e:	4622      	mov	r2, r4
 800bc10:	462b      	mov	r3, r5
 800bc12:	f7f4 fcbd 	bl	8000590 <__aeabi_dmul>
 800bc16:	a372      	add	r3, pc, #456	@ (adr r3, 800bde0 <__ieee754_pow+0x758>)
 800bc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc1c:	f7f4 fb02 	bl	8000224 <__adddf3>
 800bc20:	4622      	mov	r2, r4
 800bc22:	4606      	mov	r6, r0
 800bc24:	460f      	mov	r7, r1
 800bc26:	462b      	mov	r3, r5
 800bc28:	4620      	mov	r0, r4
 800bc2a:	4629      	mov	r1, r5
 800bc2c:	f7f4 fcb0 	bl	8000590 <__aeabi_dmul>
 800bc30:	4602      	mov	r2, r0
 800bc32:	460b      	mov	r3, r1
 800bc34:	4630      	mov	r0, r6
 800bc36:	4639      	mov	r1, r7
 800bc38:	f7f4 fcaa 	bl	8000590 <__aeabi_dmul>
 800bc3c:	465a      	mov	r2, fp
 800bc3e:	4604      	mov	r4, r0
 800bc40:	460d      	mov	r5, r1
 800bc42:	464b      	mov	r3, r9
 800bc44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bc48:	f7f4 faec 	bl	8000224 <__adddf3>
 800bc4c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bc50:	f7f4 fc9e 	bl	8000590 <__aeabi_dmul>
 800bc54:	4622      	mov	r2, r4
 800bc56:	462b      	mov	r3, r5
 800bc58:	f7f4 fae4 	bl	8000224 <__adddf3>
 800bc5c:	465a      	mov	r2, fp
 800bc5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bc62:	464b      	mov	r3, r9
 800bc64:	4658      	mov	r0, fp
 800bc66:	4649      	mov	r1, r9
 800bc68:	f7f4 fc92 	bl	8000590 <__aeabi_dmul>
 800bc6c:	4b6a      	ldr	r3, [pc, #424]	@ (800be18 <__ieee754_pow+0x790>)
 800bc6e:	2200      	movs	r2, #0
 800bc70:	4606      	mov	r6, r0
 800bc72:	460f      	mov	r7, r1
 800bc74:	f7f4 fad6 	bl	8000224 <__adddf3>
 800bc78:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bc7c:	f7f4 fad2 	bl	8000224 <__adddf3>
 800bc80:	46d8      	mov	r8, fp
 800bc82:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800bc86:	460d      	mov	r5, r1
 800bc88:	465a      	mov	r2, fp
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4640      	mov	r0, r8
 800bc8e:	4649      	mov	r1, r9
 800bc90:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800bc94:	f7f4 fc7c 	bl	8000590 <__aeabi_dmul>
 800bc98:	465c      	mov	r4, fp
 800bc9a:	4680      	mov	r8, r0
 800bc9c:	4689      	mov	r9, r1
 800bc9e:	4b5e      	ldr	r3, [pc, #376]	@ (800be18 <__ieee754_pow+0x790>)
 800bca0:	2200      	movs	r2, #0
 800bca2:	4620      	mov	r0, r4
 800bca4:	4629      	mov	r1, r5
 800bca6:	f7f4 fabb 	bl	8000220 <__aeabi_dsub>
 800bcaa:	4632      	mov	r2, r6
 800bcac:	463b      	mov	r3, r7
 800bcae:	f7f4 fab7 	bl	8000220 <__aeabi_dsub>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bcba:	f7f4 fab1 	bl	8000220 <__aeabi_dsub>
 800bcbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcc2:	f7f4 fc65 	bl	8000590 <__aeabi_dmul>
 800bcc6:	4622      	mov	r2, r4
 800bcc8:	4606      	mov	r6, r0
 800bcca:	460f      	mov	r7, r1
 800bccc:	462b      	mov	r3, r5
 800bcce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcd2:	f7f4 fc5d 	bl	8000590 <__aeabi_dmul>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 faa1 	bl	8000224 <__adddf3>
 800bce2:	4606      	mov	r6, r0
 800bce4:	460f      	mov	r7, r1
 800bce6:	4602      	mov	r2, r0
 800bce8:	460b      	mov	r3, r1
 800bcea:	4640      	mov	r0, r8
 800bcec:	4649      	mov	r1, r9
 800bcee:	f7f4 fa99 	bl	8000224 <__adddf3>
 800bcf2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800bcf6:	a33c      	add	r3, pc, #240	@ (adr r3, 800bde8 <__ieee754_pow+0x760>)
 800bcf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfc:	4658      	mov	r0, fp
 800bcfe:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800bd02:	460d      	mov	r5, r1
 800bd04:	f7f4 fc44 	bl	8000590 <__aeabi_dmul>
 800bd08:	465c      	mov	r4, fp
 800bd0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd0e:	4642      	mov	r2, r8
 800bd10:	464b      	mov	r3, r9
 800bd12:	4620      	mov	r0, r4
 800bd14:	4629      	mov	r1, r5
 800bd16:	f7f4 fa83 	bl	8000220 <__aeabi_dsub>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4630      	mov	r0, r6
 800bd20:	4639      	mov	r1, r7
 800bd22:	f7f4 fa7d 	bl	8000220 <__aeabi_dsub>
 800bd26:	a332      	add	r3, pc, #200	@ (adr r3, 800bdf0 <__ieee754_pow+0x768>)
 800bd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd2c:	f7f4 fc30 	bl	8000590 <__aeabi_dmul>
 800bd30:	a331      	add	r3, pc, #196	@ (adr r3, 800bdf8 <__ieee754_pow+0x770>)
 800bd32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd36:	4606      	mov	r6, r0
 800bd38:	460f      	mov	r7, r1
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7f4 fc27 	bl	8000590 <__aeabi_dmul>
 800bd42:	4602      	mov	r2, r0
 800bd44:	460b      	mov	r3, r1
 800bd46:	4630      	mov	r0, r6
 800bd48:	4639      	mov	r1, r7
 800bd4a:	f7f4 fa6b 	bl	8000224 <__adddf3>
 800bd4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd50:	4b32      	ldr	r3, [pc, #200]	@ (800be1c <__ieee754_pow+0x794>)
 800bd52:	4413      	add	r3, r2
 800bd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd58:	f7f4 fa64 	bl	8000224 <__adddf3>
 800bd5c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800bd62:	f7f4 fbab 	bl	80004bc <__aeabi_i2d>
 800bd66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bd68:	4b2d      	ldr	r3, [pc, #180]	@ (800be20 <__ieee754_pow+0x798>)
 800bd6a:	4413      	add	r3, r2
 800bd6c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bd70:	4606      	mov	r6, r0
 800bd72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bd76:	460f      	mov	r7, r1
 800bd78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd7c:	f7f4 fa52 	bl	8000224 <__adddf3>
 800bd80:	4642      	mov	r2, r8
 800bd82:	464b      	mov	r3, r9
 800bd84:	f7f4 fa4e 	bl	8000224 <__adddf3>
 800bd88:	4632      	mov	r2, r6
 800bd8a:	463b      	mov	r3, r7
 800bd8c:	f7f4 fa4a 	bl	8000224 <__adddf3>
 800bd90:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800bd94:	4632      	mov	r2, r6
 800bd96:	463b      	mov	r3, r7
 800bd98:	4658      	mov	r0, fp
 800bd9a:	460d      	mov	r5, r1
 800bd9c:	f7f4 fa40 	bl	8000220 <__aeabi_dsub>
 800bda0:	4642      	mov	r2, r8
 800bda2:	464b      	mov	r3, r9
 800bda4:	f7f4 fa3c 	bl	8000220 <__aeabi_dsub>
 800bda8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdac:	f7f4 fa38 	bl	8000220 <__aeabi_dsub>
 800bdb0:	465c      	mov	r4, fp
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	e036      	b.n	800be24 <__ieee754_pow+0x79c>
 800bdb6:	bf00      	nop
 800bdb8:	4a454eef 	.word	0x4a454eef
 800bdbc:	3fca7e28 	.word	0x3fca7e28
 800bdc0:	93c9db65 	.word	0x93c9db65
 800bdc4:	3fcd864a 	.word	0x3fcd864a
 800bdc8:	a91d4101 	.word	0xa91d4101
 800bdcc:	3fd17460 	.word	0x3fd17460
 800bdd0:	518f264d 	.word	0x518f264d
 800bdd4:	3fd55555 	.word	0x3fd55555
 800bdd8:	db6fabff 	.word	0xdb6fabff
 800bddc:	3fdb6db6 	.word	0x3fdb6db6
 800bde0:	33333303 	.word	0x33333303
 800bde4:	3fe33333 	.word	0x3fe33333
 800bde8:	e0000000 	.word	0xe0000000
 800bdec:	3feec709 	.word	0x3feec709
 800bdf0:	dc3a03fd 	.word	0xdc3a03fd
 800bdf4:	3feec709 	.word	0x3feec709
 800bdf8:	145b01f5 	.word	0x145b01f5
 800bdfc:	be3e2fe0 	.word	0xbe3e2fe0
 800be00:	7ff00000 	.word	0x7ff00000
 800be04:	43400000 	.word	0x43400000
 800be08:	0003988e 	.word	0x0003988e
 800be0c:	000bb679 	.word	0x000bb679
 800be10:	0800c8b8 	.word	0x0800c8b8
 800be14:	3ff00000 	.word	0x3ff00000
 800be18:	40080000 	.word	0x40080000
 800be1c:	0800c898 	.word	0x0800c898
 800be20:	0800c8a8 	.word	0x0800c8a8
 800be24:	460b      	mov	r3, r1
 800be26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be2a:	e5d7      	b.n	800b9dc <__ieee754_pow+0x354>
 800be2c:	f04f 0a01 	mov.w	sl, #1
 800be30:	e65e      	b.n	800baf0 <__ieee754_pow+0x468>
 800be32:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c104 <__ieee754_pow+0xa7c>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 f9f2 	bl	8000224 <__adddf3>
 800be40:	4642      	mov	r2, r8
 800be42:	e9cd 0100 	strd	r0, r1, [sp]
 800be46:	464b      	mov	r3, r9
 800be48:	4620      	mov	r0, r4
 800be4a:	4629      	mov	r1, r5
 800be4c:	f7f4 f9e8 	bl	8000220 <__aeabi_dsub>
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be58:	f7f4 fe2a 	bl	8000ab0 <__aeabi_dcmpgt>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	f47f ae00 	bne.w	800ba62 <__ieee754_pow+0x3da>
 800be62:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800be66:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800be6a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800be6e:	fa43 fa0a 	asr.w	sl, r3, sl
 800be72:	44da      	add	sl, fp
 800be74:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800be78:	489d      	ldr	r0, [pc, #628]	@ (800c0f0 <__ieee754_pow+0xa68>)
 800be7a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800be7e:	4108      	asrs	r0, r1
 800be80:	ea00 030a 	and.w	r3, r0, sl
 800be84:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800be88:	f1c1 0114 	rsb	r1, r1, #20
 800be8c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800be90:	fa4a fa01 	asr.w	sl, sl, r1
 800be94:	f1bb 0f00 	cmp.w	fp, #0
 800be98:	4640      	mov	r0, r8
 800be9a:	4649      	mov	r1, r9
 800be9c:	f04f 0200 	mov.w	r2, #0
 800bea0:	bfb8      	it	lt
 800bea2:	f1ca 0a00 	rsblt	sl, sl, #0
 800bea6:	f7f4 f9bb 	bl	8000220 <__aeabi_dsub>
 800beaa:	4680      	mov	r8, r0
 800beac:	4689      	mov	r9, r1
 800beae:	4632      	mov	r2, r6
 800beb0:	463b      	mov	r3, r7
 800beb2:	4640      	mov	r0, r8
 800beb4:	4649      	mov	r1, r9
 800beb6:	f7f4 f9b5 	bl	8000224 <__adddf3>
 800beba:	2400      	movs	r4, #0
 800bebc:	a37c      	add	r3, pc, #496	@ (adr r3, 800c0b0 <__ieee754_pow+0xa28>)
 800bebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec2:	4620      	mov	r0, r4
 800bec4:	460d      	mov	r5, r1
 800bec6:	f7f4 fb63 	bl	8000590 <__aeabi_dmul>
 800beca:	4642      	mov	r2, r8
 800becc:	e9cd 0100 	strd	r0, r1, [sp]
 800bed0:	464b      	mov	r3, r9
 800bed2:	4620      	mov	r0, r4
 800bed4:	4629      	mov	r1, r5
 800bed6:	f7f4 f9a3 	bl	8000220 <__aeabi_dsub>
 800beda:	4602      	mov	r2, r0
 800bedc:	460b      	mov	r3, r1
 800bede:	4630      	mov	r0, r6
 800bee0:	4639      	mov	r1, r7
 800bee2:	f7f4 f99d 	bl	8000220 <__aeabi_dsub>
 800bee6:	a374      	add	r3, pc, #464	@ (adr r3, 800c0b8 <__ieee754_pow+0xa30>)
 800bee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beec:	f7f4 fb50 	bl	8000590 <__aeabi_dmul>
 800bef0:	a373      	add	r3, pc, #460	@ (adr r3, 800c0c0 <__ieee754_pow+0xa38>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	4680      	mov	r8, r0
 800bef8:	4689      	mov	r9, r1
 800befa:	4620      	mov	r0, r4
 800befc:	4629      	mov	r1, r5
 800befe:	f7f4 fb47 	bl	8000590 <__aeabi_dmul>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4640      	mov	r0, r8
 800bf08:	4649      	mov	r1, r9
 800bf0a:	f7f4 f98b 	bl	8000224 <__adddf3>
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	4602      	mov	r2, r0
 800bf14:	460b      	mov	r3, r1
 800bf16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf1a:	f7f4 f983 	bl	8000224 <__adddf3>
 800bf1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf22:	4680      	mov	r8, r0
 800bf24:	4689      	mov	r9, r1
 800bf26:	f7f4 f97b 	bl	8000220 <__aeabi_dsub>
 800bf2a:	4602      	mov	r2, r0
 800bf2c:	460b      	mov	r3, r1
 800bf2e:	4620      	mov	r0, r4
 800bf30:	4629      	mov	r1, r5
 800bf32:	f7f4 f975 	bl	8000220 <__aeabi_dsub>
 800bf36:	4642      	mov	r2, r8
 800bf38:	4606      	mov	r6, r0
 800bf3a:	460f      	mov	r7, r1
 800bf3c:	464b      	mov	r3, r9
 800bf3e:	4640      	mov	r0, r8
 800bf40:	4649      	mov	r1, r9
 800bf42:	f7f4 fb25 	bl	8000590 <__aeabi_dmul>
 800bf46:	a360      	add	r3, pc, #384	@ (adr r3, 800c0c8 <__ieee754_pow+0xa40>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	460d      	mov	r5, r1
 800bf50:	f7f4 fb1e 	bl	8000590 <__aeabi_dmul>
 800bf54:	a35e      	add	r3, pc, #376	@ (adr r3, 800c0d0 <__ieee754_pow+0xa48>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 f961 	bl	8000220 <__aeabi_dsub>
 800bf5e:	4622      	mov	r2, r4
 800bf60:	462b      	mov	r3, r5
 800bf62:	f7f4 fb15 	bl	8000590 <__aeabi_dmul>
 800bf66:	a35c      	add	r3, pc, #368	@ (adr r3, 800c0d8 <__ieee754_pow+0xa50>)
 800bf68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf6c:	f7f4 f95a 	bl	8000224 <__adddf3>
 800bf70:	4622      	mov	r2, r4
 800bf72:	462b      	mov	r3, r5
 800bf74:	f7f4 fb0c 	bl	8000590 <__aeabi_dmul>
 800bf78:	a359      	add	r3, pc, #356	@ (adr r3, 800c0e0 <__ieee754_pow+0xa58>)
 800bf7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf7e:	f7f4 f94f 	bl	8000220 <__aeabi_dsub>
 800bf82:	4622      	mov	r2, r4
 800bf84:	462b      	mov	r3, r5
 800bf86:	f7f4 fb03 	bl	8000590 <__aeabi_dmul>
 800bf8a:	a357      	add	r3, pc, #348	@ (adr r3, 800c0e8 <__ieee754_pow+0xa60>)
 800bf8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf90:	f7f4 f948 	bl	8000224 <__adddf3>
 800bf94:	4622      	mov	r2, r4
 800bf96:	462b      	mov	r3, r5
 800bf98:	f7f4 fafa 	bl	8000590 <__aeabi_dmul>
 800bf9c:	4602      	mov	r2, r0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4640      	mov	r0, r8
 800bfa2:	4649      	mov	r1, r9
 800bfa4:	f7f4 f93c 	bl	8000220 <__aeabi_dsub>
 800bfa8:	4604      	mov	r4, r0
 800bfaa:	460d      	mov	r5, r1
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	f7f4 faec 	bl	8000590 <__aeabi_dmul>
 800bfb8:	2200      	movs	r2, #0
 800bfba:	e9cd 0100 	strd	r0, r1, [sp]
 800bfbe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 f92b 	bl	8000220 <__aeabi_dsub>
 800bfca:	4602      	mov	r2, r0
 800bfcc:	460b      	mov	r3, r1
 800bfce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd2:	f7f4 fc07 	bl	80007e4 <__aeabi_ddiv>
 800bfd6:	4632      	mov	r2, r6
 800bfd8:	4604      	mov	r4, r0
 800bfda:	460d      	mov	r5, r1
 800bfdc:	463b      	mov	r3, r7
 800bfde:	4640      	mov	r0, r8
 800bfe0:	4649      	mov	r1, r9
 800bfe2:	f7f4 fad5 	bl	8000590 <__aeabi_dmul>
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	f7f4 f91b 	bl	8000224 <__adddf3>
 800bfee:	4602      	mov	r2, r0
 800bff0:	460b      	mov	r3, r1
 800bff2:	4620      	mov	r0, r4
 800bff4:	4629      	mov	r1, r5
 800bff6:	f7f4 f913 	bl	8000220 <__aeabi_dsub>
 800bffa:	4642      	mov	r2, r8
 800bffc:	464b      	mov	r3, r9
 800bffe:	f7f4 f90f 	bl	8000220 <__aeabi_dsub>
 800c002:	460b      	mov	r3, r1
 800c004:	4602      	mov	r2, r0
 800c006:	493b      	ldr	r1, [pc, #236]	@ (800c0f4 <__ieee754_pow+0xa6c>)
 800c008:	2000      	movs	r0, #0
 800c00a:	f7f4 f909 	bl	8000220 <__aeabi_dsub>
 800c00e:	ec41 0b10 	vmov	d0, r0, r1
 800c012:	ee10 3a90 	vmov	r3, s1
 800c016:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c01a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c01e:	da30      	bge.n	800c082 <__ieee754_pow+0x9fa>
 800c020:	4650      	mov	r0, sl
 800c022:	f7ff fa69 	bl	800b4f8 <scalbn>
 800c026:	ec51 0b10 	vmov	r0, r1, d0
 800c02a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c02e:	f7ff bbd2 	b.w	800b7d6 <__ieee754_pow+0x14e>
 800c032:	4c31      	ldr	r4, [pc, #196]	@ (800c0f8 <__ieee754_pow+0xa70>)
 800c034:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c038:	42a3      	cmp	r3, r4
 800c03a:	d91a      	bls.n	800c072 <__ieee754_pow+0x9ea>
 800c03c:	4b2f      	ldr	r3, [pc, #188]	@ (800c0fc <__ieee754_pow+0xa74>)
 800c03e:	440b      	add	r3, r1
 800c040:	4303      	orrs	r3, r0
 800c042:	d009      	beq.n	800c058 <__ieee754_pow+0x9d0>
 800c044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c048:	2200      	movs	r2, #0
 800c04a:	2300      	movs	r3, #0
 800c04c:	f7f4 fd12 	bl	8000a74 <__aeabi_dcmplt>
 800c050:	3800      	subs	r0, #0
 800c052:	bf18      	it	ne
 800c054:	2001      	movne	r0, #1
 800c056:	e42b      	b.n	800b8b0 <__ieee754_pow+0x228>
 800c058:	4642      	mov	r2, r8
 800c05a:	464b      	mov	r3, r9
 800c05c:	f7f4 f8e0 	bl	8000220 <__aeabi_dsub>
 800c060:	4632      	mov	r2, r6
 800c062:	463b      	mov	r3, r7
 800c064:	f7f4 fd1a 	bl	8000a9c <__aeabi_dcmpge>
 800c068:	2800      	cmp	r0, #0
 800c06a:	d1eb      	bne.n	800c044 <__ieee754_pow+0x9bc>
 800c06c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c10c <__ieee754_pow+0xa84>
 800c070:	e6f7      	b.n	800be62 <__ieee754_pow+0x7da>
 800c072:	469a      	mov	sl, r3
 800c074:	4b22      	ldr	r3, [pc, #136]	@ (800c100 <__ieee754_pow+0xa78>)
 800c076:	459a      	cmp	sl, r3
 800c078:	f63f aef3 	bhi.w	800be62 <__ieee754_pow+0x7da>
 800c07c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c080:	e715      	b.n	800beae <__ieee754_pow+0x826>
 800c082:	ec51 0b10 	vmov	r0, r1, d0
 800c086:	4619      	mov	r1, r3
 800c088:	e7cf      	b.n	800c02a <__ieee754_pow+0x9a2>
 800c08a:	491a      	ldr	r1, [pc, #104]	@ (800c0f4 <__ieee754_pow+0xa6c>)
 800c08c:	2000      	movs	r0, #0
 800c08e:	f7ff bb18 	b.w	800b6c2 <__ieee754_pow+0x3a>
 800c092:	2000      	movs	r0, #0
 800c094:	2100      	movs	r1, #0
 800c096:	f7ff bb14 	b.w	800b6c2 <__ieee754_pow+0x3a>
 800c09a:	4630      	mov	r0, r6
 800c09c:	4639      	mov	r1, r7
 800c09e:	f7ff bb10 	b.w	800b6c2 <__ieee754_pow+0x3a>
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	f7ff bb5e 	b.w	800b764 <__ieee754_pow+0xdc>
 800c0a8:	2400      	movs	r4, #0
 800c0aa:	f7ff bb49 	b.w	800b740 <__ieee754_pow+0xb8>
 800c0ae:	bf00      	nop
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	3fe62e43 	.word	0x3fe62e43
 800c0b8:	fefa39ef 	.word	0xfefa39ef
 800c0bc:	3fe62e42 	.word	0x3fe62e42
 800c0c0:	0ca86c39 	.word	0x0ca86c39
 800c0c4:	be205c61 	.word	0xbe205c61
 800c0c8:	72bea4d0 	.word	0x72bea4d0
 800c0cc:	3e663769 	.word	0x3e663769
 800c0d0:	c5d26bf1 	.word	0xc5d26bf1
 800c0d4:	3ebbbd41 	.word	0x3ebbbd41
 800c0d8:	af25de2c 	.word	0xaf25de2c
 800c0dc:	3f11566a 	.word	0x3f11566a
 800c0e0:	16bebd93 	.word	0x16bebd93
 800c0e4:	3f66c16c 	.word	0x3f66c16c
 800c0e8:	5555553e 	.word	0x5555553e
 800c0ec:	3fc55555 	.word	0x3fc55555
 800c0f0:	fff00000 	.word	0xfff00000
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	4090cbff 	.word	0x4090cbff
 800c0fc:	3f6f3400 	.word	0x3f6f3400
 800c100:	3fe00000 	.word	0x3fe00000
 800c104:	652b82fe 	.word	0x652b82fe
 800c108:	3c971547 	.word	0x3c971547
 800c10c:	4090cc00 	.word	0x4090cc00

0800c110 <fabs>:
 800c110:	ec51 0b10 	vmov	r0, r1, d0
 800c114:	4602      	mov	r2, r0
 800c116:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c11a:	ec43 2b10 	vmov	d0, r2, r3
 800c11e:	4770      	bx	lr

0800c120 <__ieee754_fmodf>:
 800c120:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c122:	ee10 5a90 	vmov	r5, s1
 800c126:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800c12a:	1e43      	subs	r3, r0, #1
 800c12c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c130:	d206      	bcs.n	800c140 <__ieee754_fmodf+0x20>
 800c132:	ee10 3a10 	vmov	r3, s0
 800c136:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800c13a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c13e:	d304      	bcc.n	800c14a <__ieee754_fmodf+0x2a>
 800c140:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c144:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c148:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c14a:	4286      	cmp	r6, r0
 800c14c:	dbfc      	blt.n	800c148 <__ieee754_fmodf+0x28>
 800c14e:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800c152:	d105      	bne.n	800c160 <__ieee754_fmodf+0x40>
 800c154:	4b32      	ldr	r3, [pc, #200]	@ (800c220 <__ieee754_fmodf+0x100>)
 800c156:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800c15a:	ed93 0a00 	vldr	s0, [r3]
 800c15e:	e7f3      	b.n	800c148 <__ieee754_fmodf+0x28>
 800c160:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c164:	d140      	bne.n	800c1e8 <__ieee754_fmodf+0xc8>
 800c166:	0232      	lsls	r2, r6, #8
 800c168:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	dc38      	bgt.n	800c1e2 <__ieee754_fmodf+0xc2>
 800c170:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800c174:	d13e      	bne.n	800c1f4 <__ieee754_fmodf+0xd4>
 800c176:	0207      	lsls	r7, r0, #8
 800c178:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800c17c:	2f00      	cmp	r7, #0
 800c17e:	da36      	bge.n	800c1ee <__ieee754_fmodf+0xce>
 800c180:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800c184:	bfb9      	ittee	lt
 800c186:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800c18a:	1a5b      	sublt	r3, r3, r1
 800c18c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800c190:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800c194:	bfb8      	it	lt
 800c196:	fa06 f303 	lsllt.w	r3, r6, r3
 800c19a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c19e:	bfb5      	itete	lt
 800c1a0:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800c1a4:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800c1a8:	1aad      	sublt	r5, r5, r2
 800c1aa:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800c1ae:	bfb8      	it	lt
 800c1b0:	40a8      	lsllt	r0, r5
 800c1b2:	1a89      	subs	r1, r1, r2
 800c1b4:	1a1d      	subs	r5, r3, r0
 800c1b6:	bb01      	cbnz	r1, 800c1fa <__ieee754_fmodf+0xda>
 800c1b8:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800c1bc:	bf38      	it	cc
 800c1be:	462b      	movcc	r3, r5
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0c7      	beq.n	800c154 <__ieee754_fmodf+0x34>
 800c1c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c1c8:	db1f      	blt.n	800c20a <__ieee754_fmodf+0xea>
 800c1ca:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c1ce:	db1f      	blt.n	800c210 <__ieee754_fmodf+0xf0>
 800c1d0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c1d4:	327f      	adds	r2, #127	@ 0x7f
 800c1d6:	4323      	orrs	r3, r4
 800c1d8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c1dc:	ee00 3a10 	vmov	s0, r3
 800c1e0:	e7b2      	b.n	800c148 <__ieee754_fmodf+0x28>
 800c1e2:	3901      	subs	r1, #1
 800c1e4:	0052      	lsls	r2, r2, #1
 800c1e6:	e7c1      	b.n	800c16c <__ieee754_fmodf+0x4c>
 800c1e8:	15f1      	asrs	r1, r6, #23
 800c1ea:	397f      	subs	r1, #127	@ 0x7f
 800c1ec:	e7c0      	b.n	800c170 <__ieee754_fmodf+0x50>
 800c1ee:	3a01      	subs	r2, #1
 800c1f0:	007f      	lsls	r7, r7, #1
 800c1f2:	e7c3      	b.n	800c17c <__ieee754_fmodf+0x5c>
 800c1f4:	15c2      	asrs	r2, r0, #23
 800c1f6:	3a7f      	subs	r2, #127	@ 0x7f
 800c1f8:	e7c2      	b.n	800c180 <__ieee754_fmodf+0x60>
 800c1fa:	2d00      	cmp	r5, #0
 800c1fc:	da02      	bge.n	800c204 <__ieee754_fmodf+0xe4>
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	3901      	subs	r1, #1
 800c202:	e7d7      	b.n	800c1b4 <__ieee754_fmodf+0x94>
 800c204:	d0a6      	beq.n	800c154 <__ieee754_fmodf+0x34>
 800c206:	006b      	lsls	r3, r5, #1
 800c208:	e7fa      	b.n	800c200 <__ieee754_fmodf+0xe0>
 800c20a:	005b      	lsls	r3, r3, #1
 800c20c:	3a01      	subs	r2, #1
 800c20e:	e7d9      	b.n	800c1c4 <__ieee754_fmodf+0xa4>
 800c210:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c214:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c218:	3282      	adds	r2, #130	@ 0x82
 800c21a:	4113      	asrs	r3, r2
 800c21c:	4323      	orrs	r3, r4
 800c21e:	e7dd      	b.n	800c1dc <__ieee754_fmodf+0xbc>
 800c220:	0800c8c8 	.word	0x0800c8c8

0800c224 <with_errno>:
 800c224:	b510      	push	{r4, lr}
 800c226:	ed2d 8b02 	vpush	{d8}
 800c22a:	eeb0 8a40 	vmov.f32	s16, s0
 800c22e:	eef0 8a60 	vmov.f32	s17, s1
 800c232:	4604      	mov	r4, r0
 800c234:	f000 fa30 	bl	800c698 <__errno>
 800c238:	eeb0 0a48 	vmov.f32	s0, s16
 800c23c:	eef0 0a68 	vmov.f32	s1, s17
 800c240:	ecbd 8b02 	vpop	{d8}
 800c244:	6004      	str	r4, [r0, #0]
 800c246:	bd10      	pop	{r4, pc}

0800c248 <xflow>:
 800c248:	4603      	mov	r3, r0
 800c24a:	b507      	push	{r0, r1, r2, lr}
 800c24c:	ec51 0b10 	vmov	r0, r1, d0
 800c250:	b183      	cbz	r3, 800c274 <xflow+0x2c>
 800c252:	4602      	mov	r2, r0
 800c254:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c258:	e9cd 2300 	strd	r2, r3, [sp]
 800c25c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c260:	f7f4 f996 	bl	8000590 <__aeabi_dmul>
 800c264:	ec41 0b10 	vmov	d0, r0, r1
 800c268:	2022      	movs	r0, #34	@ 0x22
 800c26a:	b003      	add	sp, #12
 800c26c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c270:	f7ff bfd8 	b.w	800c224 <with_errno>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	e7ee      	b.n	800c258 <xflow+0x10>
 800c27a:	0000      	movs	r0, r0
 800c27c:	0000      	movs	r0, r0
	...

0800c280 <__math_uflow>:
 800c280:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c288 <__math_uflow+0x8>
 800c284:	f7ff bfe0 	b.w	800c248 <xflow>
 800c288:	00000000 	.word	0x00000000
 800c28c:	10000000 	.word	0x10000000

0800c290 <__math_oflow>:
 800c290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c298 <__math_oflow+0x8>
 800c294:	f7ff bfd8 	b.w	800c248 <xflow>
 800c298:	00000000 	.word	0x00000000
 800c29c:	70000000 	.word	0x70000000

0800c2a0 <__ieee754_sqrt>:
 800c2a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2a4:	4a68      	ldr	r2, [pc, #416]	@ (800c448 <__ieee754_sqrt+0x1a8>)
 800c2a6:	ec55 4b10 	vmov	r4, r5, d0
 800c2aa:	43aa      	bics	r2, r5
 800c2ac:	462b      	mov	r3, r5
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	d110      	bne.n	800c2d4 <__ieee754_sqrt+0x34>
 800c2b2:	4622      	mov	r2, r4
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f4 f96a 	bl	8000590 <__aeabi_dmul>
 800c2bc:	4602      	mov	r2, r0
 800c2be:	460b      	mov	r3, r1
 800c2c0:	4620      	mov	r0, r4
 800c2c2:	4629      	mov	r1, r5
 800c2c4:	f7f3 ffae 	bl	8000224 <__adddf3>
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	ec45 4b10 	vmov	d0, r4, r5
 800c2d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2d4:	2d00      	cmp	r5, #0
 800c2d6:	dc0e      	bgt.n	800c2f6 <__ieee754_sqrt+0x56>
 800c2d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800c2dc:	4322      	orrs	r2, r4
 800c2de:	d0f5      	beq.n	800c2cc <__ieee754_sqrt+0x2c>
 800c2e0:	b19d      	cbz	r5, 800c30a <__ieee754_sqrt+0x6a>
 800c2e2:	4622      	mov	r2, r4
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	4629      	mov	r1, r5
 800c2e8:	f7f3 ff9a 	bl	8000220 <__aeabi_dsub>
 800c2ec:	4602      	mov	r2, r0
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	f7f4 fa78 	bl	80007e4 <__aeabi_ddiv>
 800c2f4:	e7e8      	b.n	800c2c8 <__ieee754_sqrt+0x28>
 800c2f6:	152a      	asrs	r2, r5, #20
 800c2f8:	d115      	bne.n	800c326 <__ieee754_sqrt+0x86>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e009      	b.n	800c312 <__ieee754_sqrt+0x72>
 800c2fe:	0acb      	lsrs	r3, r1, #11
 800c300:	3a15      	subs	r2, #21
 800c302:	0549      	lsls	r1, r1, #21
 800c304:	2b00      	cmp	r3, #0
 800c306:	d0fa      	beq.n	800c2fe <__ieee754_sqrt+0x5e>
 800c308:	e7f7      	b.n	800c2fa <__ieee754_sqrt+0x5a>
 800c30a:	462a      	mov	r2, r5
 800c30c:	e7fa      	b.n	800c304 <__ieee754_sqrt+0x64>
 800c30e:	005b      	lsls	r3, r3, #1
 800c310:	3001      	adds	r0, #1
 800c312:	02dc      	lsls	r4, r3, #11
 800c314:	d5fb      	bpl.n	800c30e <__ieee754_sqrt+0x6e>
 800c316:	1e44      	subs	r4, r0, #1
 800c318:	1b12      	subs	r2, r2, r4
 800c31a:	f1c0 0420 	rsb	r4, r0, #32
 800c31e:	fa21 f404 	lsr.w	r4, r1, r4
 800c322:	4323      	orrs	r3, r4
 800c324:	4081      	lsls	r1, r0
 800c326:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c32a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800c32e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c332:	07d2      	lsls	r2, r2, #31
 800c334:	bf5c      	itt	pl
 800c336:	005b      	lslpl	r3, r3, #1
 800c338:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800c33c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c340:	bf58      	it	pl
 800c342:	0049      	lslpl	r1, r1, #1
 800c344:	2600      	movs	r6, #0
 800c346:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800c34a:	106d      	asrs	r5, r5, #1
 800c34c:	0049      	lsls	r1, r1, #1
 800c34e:	2016      	movs	r0, #22
 800c350:	4632      	mov	r2, r6
 800c352:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800c356:	1917      	adds	r7, r2, r4
 800c358:	429f      	cmp	r7, r3
 800c35a:	bfde      	ittt	le
 800c35c:	193a      	addle	r2, r7, r4
 800c35e:	1bdb      	suble	r3, r3, r7
 800c360:	1936      	addle	r6, r6, r4
 800c362:	0fcf      	lsrs	r7, r1, #31
 800c364:	3801      	subs	r0, #1
 800c366:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800c36a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c36e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800c372:	d1f0      	bne.n	800c356 <__ieee754_sqrt+0xb6>
 800c374:	4604      	mov	r4, r0
 800c376:	2720      	movs	r7, #32
 800c378:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800c37c:	429a      	cmp	r2, r3
 800c37e:	eb00 0e0c 	add.w	lr, r0, ip
 800c382:	db02      	blt.n	800c38a <__ieee754_sqrt+0xea>
 800c384:	d113      	bne.n	800c3ae <__ieee754_sqrt+0x10e>
 800c386:	458e      	cmp	lr, r1
 800c388:	d811      	bhi.n	800c3ae <__ieee754_sqrt+0x10e>
 800c38a:	f1be 0f00 	cmp.w	lr, #0
 800c38e:	eb0e 000c 	add.w	r0, lr, ip
 800c392:	da42      	bge.n	800c41a <__ieee754_sqrt+0x17a>
 800c394:	2800      	cmp	r0, #0
 800c396:	db40      	blt.n	800c41a <__ieee754_sqrt+0x17a>
 800c398:	f102 0801 	add.w	r8, r2, #1
 800c39c:	1a9b      	subs	r3, r3, r2
 800c39e:	458e      	cmp	lr, r1
 800c3a0:	bf88      	it	hi
 800c3a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800c3a6:	eba1 010e 	sub.w	r1, r1, lr
 800c3aa:	4464      	add	r4, ip
 800c3ac:	4642      	mov	r2, r8
 800c3ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800c3b2:	3f01      	subs	r7, #1
 800c3b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800c3b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c3bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800c3c0:	d1dc      	bne.n	800c37c <__ieee754_sqrt+0xdc>
 800c3c2:	4319      	orrs	r1, r3
 800c3c4:	d01b      	beq.n	800c3fe <__ieee754_sqrt+0x15e>
 800c3c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800c44c <__ieee754_sqrt+0x1ac>
 800c3ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800c450 <__ieee754_sqrt+0x1b0>
 800c3ce:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3d2:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3d6:	f7f3 ff23 	bl	8000220 <__aeabi_dsub>
 800c3da:	e9da 8900 	ldrd	r8, r9, [sl]
 800c3de:	4602      	mov	r2, r0
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	4640      	mov	r0, r8
 800c3e4:	4649      	mov	r1, r9
 800c3e6:	f7f4 fb4f 	bl	8000a88 <__aeabi_dcmple>
 800c3ea:	b140      	cbz	r0, 800c3fe <__ieee754_sqrt+0x15e>
 800c3ec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800c3f0:	e9da 0100 	ldrd	r0, r1, [sl]
 800c3f4:	e9db 2300 	ldrd	r2, r3, [fp]
 800c3f8:	d111      	bne.n	800c41e <__ieee754_sqrt+0x17e>
 800c3fa:	3601      	adds	r6, #1
 800c3fc:	463c      	mov	r4, r7
 800c3fe:	1072      	asrs	r2, r6, #1
 800c400:	0863      	lsrs	r3, r4, #1
 800c402:	07f1      	lsls	r1, r6, #31
 800c404:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800c408:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800c40c:	bf48      	it	mi
 800c40e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800c412:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800c416:	4618      	mov	r0, r3
 800c418:	e756      	b.n	800c2c8 <__ieee754_sqrt+0x28>
 800c41a:	4690      	mov	r8, r2
 800c41c:	e7be      	b.n	800c39c <__ieee754_sqrt+0xfc>
 800c41e:	f7f3 ff01 	bl	8000224 <__adddf3>
 800c422:	e9da 8900 	ldrd	r8, r9, [sl]
 800c426:	4602      	mov	r2, r0
 800c428:	460b      	mov	r3, r1
 800c42a:	4640      	mov	r0, r8
 800c42c:	4649      	mov	r1, r9
 800c42e:	f7f4 fb21 	bl	8000a74 <__aeabi_dcmplt>
 800c432:	b120      	cbz	r0, 800c43e <__ieee754_sqrt+0x19e>
 800c434:	1ca0      	adds	r0, r4, #2
 800c436:	bf08      	it	eq
 800c438:	3601      	addeq	r6, #1
 800c43a:	3402      	adds	r4, #2
 800c43c:	e7df      	b.n	800c3fe <__ieee754_sqrt+0x15e>
 800c43e:	1c63      	adds	r3, r4, #1
 800c440:	f023 0401 	bic.w	r4, r3, #1
 800c444:	e7db      	b.n	800c3fe <__ieee754_sqrt+0x15e>
 800c446:	bf00      	nop
 800c448:	7ff00000 	.word	0x7ff00000
 800c44c:	200000d0 	.word	0x200000d0
 800c450:	200000c8 	.word	0x200000c8

0800c454 <abort>:
 800c454:	b508      	push	{r3, lr}
 800c456:	2006      	movs	r0, #6
 800c458:	f000 f8f2 	bl	800c640 <raise>
 800c45c:	2001      	movs	r0, #1
 800c45e:	f7f8 fe31 	bl	80050c4 <_exit>
	...

0800c464 <malloc>:
 800c464:	4b02      	ldr	r3, [pc, #8]	@ (800c470 <malloc+0xc>)
 800c466:	4601      	mov	r1, r0
 800c468:	6818      	ldr	r0, [r3, #0]
 800c46a:	f000 b82d 	b.w	800c4c8 <_malloc_r>
 800c46e:	bf00      	nop
 800c470:	200000d8 	.word	0x200000d8

0800c474 <free>:
 800c474:	4b02      	ldr	r3, [pc, #8]	@ (800c480 <free+0xc>)
 800c476:	4601      	mov	r1, r0
 800c478:	6818      	ldr	r0, [r3, #0]
 800c47a:	f000 b947 	b.w	800c70c <_free_r>
 800c47e:	bf00      	nop
 800c480:	200000d8 	.word	0x200000d8

0800c484 <sbrk_aligned>:
 800c484:	b570      	push	{r4, r5, r6, lr}
 800c486:	4e0f      	ldr	r6, [pc, #60]	@ (800c4c4 <sbrk_aligned+0x40>)
 800c488:	460c      	mov	r4, r1
 800c48a:	6831      	ldr	r1, [r6, #0]
 800c48c:	4605      	mov	r5, r0
 800c48e:	b911      	cbnz	r1, 800c496 <sbrk_aligned+0x12>
 800c490:	f000 f8f2 	bl	800c678 <_sbrk_r>
 800c494:	6030      	str	r0, [r6, #0]
 800c496:	4621      	mov	r1, r4
 800c498:	4628      	mov	r0, r5
 800c49a:	f000 f8ed 	bl	800c678 <_sbrk_r>
 800c49e:	1c43      	adds	r3, r0, #1
 800c4a0:	d103      	bne.n	800c4aa <sbrk_aligned+0x26>
 800c4a2:	f04f 34ff 	mov.w	r4, #4294967295
 800c4a6:	4620      	mov	r0, r4
 800c4a8:	bd70      	pop	{r4, r5, r6, pc}
 800c4aa:	1cc4      	adds	r4, r0, #3
 800c4ac:	f024 0403 	bic.w	r4, r4, #3
 800c4b0:	42a0      	cmp	r0, r4
 800c4b2:	d0f8      	beq.n	800c4a6 <sbrk_aligned+0x22>
 800c4b4:	1a21      	subs	r1, r4, r0
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f000 f8de 	bl	800c678 <_sbrk_r>
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d1f2      	bne.n	800c4a6 <sbrk_aligned+0x22>
 800c4c0:	e7ef      	b.n	800c4a2 <sbrk_aligned+0x1e>
 800c4c2:	bf00      	nop
 800c4c4:	200007dc 	.word	0x200007dc

0800c4c8 <_malloc_r>:
 800c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4cc:	1ccd      	adds	r5, r1, #3
 800c4ce:	f025 0503 	bic.w	r5, r5, #3
 800c4d2:	3508      	adds	r5, #8
 800c4d4:	2d0c      	cmp	r5, #12
 800c4d6:	bf38      	it	cc
 800c4d8:	250c      	movcc	r5, #12
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	4606      	mov	r6, r0
 800c4de:	db01      	blt.n	800c4e4 <_malloc_r+0x1c>
 800c4e0:	42a9      	cmp	r1, r5
 800c4e2:	d904      	bls.n	800c4ee <_malloc_r+0x26>
 800c4e4:	230c      	movs	r3, #12
 800c4e6:	6033      	str	r3, [r6, #0]
 800c4e8:	2000      	movs	r0, #0
 800c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c5c4 <_malloc_r+0xfc>
 800c4f2:	f000 f869 	bl	800c5c8 <__malloc_lock>
 800c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 800c4fa:	461c      	mov	r4, r3
 800c4fc:	bb44      	cbnz	r4, 800c550 <_malloc_r+0x88>
 800c4fe:	4629      	mov	r1, r5
 800c500:	4630      	mov	r0, r6
 800c502:	f7ff ffbf 	bl	800c484 <sbrk_aligned>
 800c506:	1c43      	adds	r3, r0, #1
 800c508:	4604      	mov	r4, r0
 800c50a:	d158      	bne.n	800c5be <_malloc_r+0xf6>
 800c50c:	f8d8 4000 	ldr.w	r4, [r8]
 800c510:	4627      	mov	r7, r4
 800c512:	2f00      	cmp	r7, #0
 800c514:	d143      	bne.n	800c59e <_malloc_r+0xd6>
 800c516:	2c00      	cmp	r4, #0
 800c518:	d04b      	beq.n	800c5b2 <_malloc_r+0xea>
 800c51a:	6823      	ldr	r3, [r4, #0]
 800c51c:	4639      	mov	r1, r7
 800c51e:	4630      	mov	r0, r6
 800c520:	eb04 0903 	add.w	r9, r4, r3
 800c524:	f000 f8a8 	bl	800c678 <_sbrk_r>
 800c528:	4581      	cmp	r9, r0
 800c52a:	d142      	bne.n	800c5b2 <_malloc_r+0xea>
 800c52c:	6821      	ldr	r1, [r4, #0]
 800c52e:	1a6d      	subs	r5, r5, r1
 800c530:	4629      	mov	r1, r5
 800c532:	4630      	mov	r0, r6
 800c534:	f7ff ffa6 	bl	800c484 <sbrk_aligned>
 800c538:	3001      	adds	r0, #1
 800c53a:	d03a      	beq.n	800c5b2 <_malloc_r+0xea>
 800c53c:	6823      	ldr	r3, [r4, #0]
 800c53e:	442b      	add	r3, r5
 800c540:	6023      	str	r3, [r4, #0]
 800c542:	f8d8 3000 	ldr.w	r3, [r8]
 800c546:	685a      	ldr	r2, [r3, #4]
 800c548:	bb62      	cbnz	r2, 800c5a4 <_malloc_r+0xdc>
 800c54a:	f8c8 7000 	str.w	r7, [r8]
 800c54e:	e00f      	b.n	800c570 <_malloc_r+0xa8>
 800c550:	6822      	ldr	r2, [r4, #0]
 800c552:	1b52      	subs	r2, r2, r5
 800c554:	d420      	bmi.n	800c598 <_malloc_r+0xd0>
 800c556:	2a0b      	cmp	r2, #11
 800c558:	d917      	bls.n	800c58a <_malloc_r+0xc2>
 800c55a:	1961      	adds	r1, r4, r5
 800c55c:	42a3      	cmp	r3, r4
 800c55e:	6025      	str	r5, [r4, #0]
 800c560:	bf18      	it	ne
 800c562:	6059      	strne	r1, [r3, #4]
 800c564:	6863      	ldr	r3, [r4, #4]
 800c566:	bf08      	it	eq
 800c568:	f8c8 1000 	streq.w	r1, [r8]
 800c56c:	5162      	str	r2, [r4, r5]
 800c56e:	604b      	str	r3, [r1, #4]
 800c570:	4630      	mov	r0, r6
 800c572:	f000 f82f 	bl	800c5d4 <__malloc_unlock>
 800c576:	f104 000b 	add.w	r0, r4, #11
 800c57a:	1d23      	adds	r3, r4, #4
 800c57c:	f020 0007 	bic.w	r0, r0, #7
 800c580:	1ac2      	subs	r2, r0, r3
 800c582:	bf1c      	itt	ne
 800c584:	1a1b      	subne	r3, r3, r0
 800c586:	50a3      	strne	r3, [r4, r2]
 800c588:	e7af      	b.n	800c4ea <_malloc_r+0x22>
 800c58a:	6862      	ldr	r2, [r4, #4]
 800c58c:	42a3      	cmp	r3, r4
 800c58e:	bf0c      	ite	eq
 800c590:	f8c8 2000 	streq.w	r2, [r8]
 800c594:	605a      	strne	r2, [r3, #4]
 800c596:	e7eb      	b.n	800c570 <_malloc_r+0xa8>
 800c598:	4623      	mov	r3, r4
 800c59a:	6864      	ldr	r4, [r4, #4]
 800c59c:	e7ae      	b.n	800c4fc <_malloc_r+0x34>
 800c59e:	463c      	mov	r4, r7
 800c5a0:	687f      	ldr	r7, [r7, #4]
 800c5a2:	e7b6      	b.n	800c512 <_malloc_r+0x4a>
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	42a3      	cmp	r3, r4
 800c5aa:	d1fb      	bne.n	800c5a4 <_malloc_r+0xdc>
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	6053      	str	r3, [r2, #4]
 800c5b0:	e7de      	b.n	800c570 <_malloc_r+0xa8>
 800c5b2:	230c      	movs	r3, #12
 800c5b4:	6033      	str	r3, [r6, #0]
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	f000 f80c 	bl	800c5d4 <__malloc_unlock>
 800c5bc:	e794      	b.n	800c4e8 <_malloc_r+0x20>
 800c5be:	6005      	str	r5, [r0, #0]
 800c5c0:	e7d6      	b.n	800c570 <_malloc_r+0xa8>
 800c5c2:	bf00      	nop
 800c5c4:	200007e0 	.word	0x200007e0

0800c5c8 <__malloc_lock>:
 800c5c8:	4801      	ldr	r0, [pc, #4]	@ (800c5d0 <__malloc_lock+0x8>)
 800c5ca:	f000 b88f 	b.w	800c6ec <__retarget_lock_acquire_recursive>
 800c5ce:	bf00      	nop
 800c5d0:	20000920 	.word	0x20000920

0800c5d4 <__malloc_unlock>:
 800c5d4:	4801      	ldr	r0, [pc, #4]	@ (800c5dc <__malloc_unlock+0x8>)
 800c5d6:	f000 b88a 	b.w	800c6ee <__retarget_lock_release_recursive>
 800c5da:	bf00      	nop
 800c5dc:	20000920 	.word	0x20000920

0800c5e0 <memset>:
 800c5e0:	4402      	add	r2, r0
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d100      	bne.n	800c5ea <memset+0xa>
 800c5e8:	4770      	bx	lr
 800c5ea:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ee:	e7f9      	b.n	800c5e4 <memset+0x4>

0800c5f0 <_raise_r>:
 800c5f0:	291f      	cmp	r1, #31
 800c5f2:	b538      	push	{r3, r4, r5, lr}
 800c5f4:	4605      	mov	r5, r0
 800c5f6:	460c      	mov	r4, r1
 800c5f8:	d904      	bls.n	800c604 <_raise_r+0x14>
 800c5fa:	2316      	movs	r3, #22
 800c5fc:	6003      	str	r3, [r0, #0]
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c606:	b112      	cbz	r2, 800c60e <_raise_r+0x1e>
 800c608:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c60c:	b94b      	cbnz	r3, 800c622 <_raise_r+0x32>
 800c60e:	4628      	mov	r0, r5
 800c610:	f000 f830 	bl	800c674 <_getpid_r>
 800c614:	4622      	mov	r2, r4
 800c616:	4601      	mov	r1, r0
 800c618:	4628      	mov	r0, r5
 800c61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c61e:	f000 b817 	b.w	800c650 <_kill_r>
 800c622:	2b01      	cmp	r3, #1
 800c624:	d00a      	beq.n	800c63c <_raise_r+0x4c>
 800c626:	1c59      	adds	r1, r3, #1
 800c628:	d103      	bne.n	800c632 <_raise_r+0x42>
 800c62a:	2316      	movs	r3, #22
 800c62c:	6003      	str	r3, [r0, #0]
 800c62e:	2001      	movs	r0, #1
 800c630:	e7e7      	b.n	800c602 <_raise_r+0x12>
 800c632:	2100      	movs	r1, #0
 800c634:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c638:	4620      	mov	r0, r4
 800c63a:	4798      	blx	r3
 800c63c:	2000      	movs	r0, #0
 800c63e:	e7e0      	b.n	800c602 <_raise_r+0x12>

0800c640 <raise>:
 800c640:	4b02      	ldr	r3, [pc, #8]	@ (800c64c <raise+0xc>)
 800c642:	4601      	mov	r1, r0
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	f7ff bfd3 	b.w	800c5f0 <_raise_r>
 800c64a:	bf00      	nop
 800c64c:	200000d8 	.word	0x200000d8

0800c650 <_kill_r>:
 800c650:	b538      	push	{r3, r4, r5, lr}
 800c652:	4d07      	ldr	r5, [pc, #28]	@ (800c670 <_kill_r+0x20>)
 800c654:	2300      	movs	r3, #0
 800c656:	4604      	mov	r4, r0
 800c658:	4608      	mov	r0, r1
 800c65a:	4611      	mov	r1, r2
 800c65c:	602b      	str	r3, [r5, #0]
 800c65e:	f7f8 fd21 	bl	80050a4 <_kill>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d102      	bne.n	800c66c <_kill_r+0x1c>
 800c666:	682b      	ldr	r3, [r5, #0]
 800c668:	b103      	cbz	r3, 800c66c <_kill_r+0x1c>
 800c66a:	6023      	str	r3, [r4, #0]
 800c66c:	bd38      	pop	{r3, r4, r5, pc}
 800c66e:	bf00      	nop
 800c670:	2000091c 	.word	0x2000091c

0800c674 <_getpid_r>:
 800c674:	f7f8 bd0e 	b.w	8005094 <_getpid>

0800c678 <_sbrk_r>:
 800c678:	b538      	push	{r3, r4, r5, lr}
 800c67a:	4d06      	ldr	r5, [pc, #24]	@ (800c694 <_sbrk_r+0x1c>)
 800c67c:	2300      	movs	r3, #0
 800c67e:	4604      	mov	r4, r0
 800c680:	4608      	mov	r0, r1
 800c682:	602b      	str	r3, [r5, #0]
 800c684:	f7f8 fd2a 	bl	80050dc <_sbrk>
 800c688:	1c43      	adds	r3, r0, #1
 800c68a:	d102      	bne.n	800c692 <_sbrk_r+0x1a>
 800c68c:	682b      	ldr	r3, [r5, #0]
 800c68e:	b103      	cbz	r3, 800c692 <_sbrk_r+0x1a>
 800c690:	6023      	str	r3, [r4, #0]
 800c692:	bd38      	pop	{r3, r4, r5, pc}
 800c694:	2000091c 	.word	0x2000091c

0800c698 <__errno>:
 800c698:	4b01      	ldr	r3, [pc, #4]	@ (800c6a0 <__errno+0x8>)
 800c69a:	6818      	ldr	r0, [r3, #0]
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	200000d8 	.word	0x200000d8

0800c6a4 <__libc_init_array>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	4d0d      	ldr	r5, [pc, #52]	@ (800c6dc <__libc_init_array+0x38>)
 800c6a8:	4c0d      	ldr	r4, [pc, #52]	@ (800c6e0 <__libc_init_array+0x3c>)
 800c6aa:	1b64      	subs	r4, r4, r5
 800c6ac:	10a4      	asrs	r4, r4, #2
 800c6ae:	2600      	movs	r6, #0
 800c6b0:	42a6      	cmp	r6, r4
 800c6b2:	d109      	bne.n	800c6c8 <__libc_init_array+0x24>
 800c6b4:	4d0b      	ldr	r5, [pc, #44]	@ (800c6e4 <__libc_init_array+0x40>)
 800c6b6:	4c0c      	ldr	r4, [pc, #48]	@ (800c6e8 <__libc_init_array+0x44>)
 800c6b8:	f000 f872 	bl	800c7a0 <_init>
 800c6bc:	1b64      	subs	r4, r4, r5
 800c6be:	10a4      	asrs	r4, r4, #2
 800c6c0:	2600      	movs	r6, #0
 800c6c2:	42a6      	cmp	r6, r4
 800c6c4:	d105      	bne.n	800c6d2 <__libc_init_array+0x2e>
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
 800c6c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6cc:	4798      	blx	r3
 800c6ce:	3601      	adds	r6, #1
 800c6d0:	e7ee      	b.n	800c6b0 <__libc_init_array+0xc>
 800c6d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c6d6:	4798      	blx	r3
 800c6d8:	3601      	adds	r6, #1
 800c6da:	e7f2      	b.n	800c6c2 <__libc_init_array+0x1e>
 800c6dc:	0800c8d0 	.word	0x0800c8d0
 800c6e0:	0800c8d0 	.word	0x0800c8d0
 800c6e4:	0800c8d0 	.word	0x0800c8d0
 800c6e8:	0800c8dc 	.word	0x0800c8dc

0800c6ec <__retarget_lock_acquire_recursive>:
 800c6ec:	4770      	bx	lr

0800c6ee <__retarget_lock_release_recursive>:
 800c6ee:	4770      	bx	lr

0800c6f0 <memcpy>:
 800c6f0:	440a      	add	r2, r1
 800c6f2:	4291      	cmp	r1, r2
 800c6f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c6f8:	d100      	bne.n	800c6fc <memcpy+0xc>
 800c6fa:	4770      	bx	lr
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c702:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c706:	4291      	cmp	r1, r2
 800c708:	d1f9      	bne.n	800c6fe <memcpy+0xe>
 800c70a:	bd10      	pop	{r4, pc}

0800c70c <_free_r>:
 800c70c:	b538      	push	{r3, r4, r5, lr}
 800c70e:	4605      	mov	r5, r0
 800c710:	2900      	cmp	r1, #0
 800c712:	d041      	beq.n	800c798 <_free_r+0x8c>
 800c714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c718:	1f0c      	subs	r4, r1, #4
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	bfb8      	it	lt
 800c71e:	18e4      	addlt	r4, r4, r3
 800c720:	f7ff ff52 	bl	800c5c8 <__malloc_lock>
 800c724:	4a1d      	ldr	r2, [pc, #116]	@ (800c79c <_free_r+0x90>)
 800c726:	6813      	ldr	r3, [r2, #0]
 800c728:	b933      	cbnz	r3, 800c738 <_free_r+0x2c>
 800c72a:	6063      	str	r3, [r4, #4]
 800c72c:	6014      	str	r4, [r2, #0]
 800c72e:	4628      	mov	r0, r5
 800c730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c734:	f7ff bf4e 	b.w	800c5d4 <__malloc_unlock>
 800c738:	42a3      	cmp	r3, r4
 800c73a:	d908      	bls.n	800c74e <_free_r+0x42>
 800c73c:	6820      	ldr	r0, [r4, #0]
 800c73e:	1821      	adds	r1, r4, r0
 800c740:	428b      	cmp	r3, r1
 800c742:	bf01      	itttt	eq
 800c744:	6819      	ldreq	r1, [r3, #0]
 800c746:	685b      	ldreq	r3, [r3, #4]
 800c748:	1809      	addeq	r1, r1, r0
 800c74a:	6021      	streq	r1, [r4, #0]
 800c74c:	e7ed      	b.n	800c72a <_free_r+0x1e>
 800c74e:	461a      	mov	r2, r3
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	b10b      	cbz	r3, 800c758 <_free_r+0x4c>
 800c754:	42a3      	cmp	r3, r4
 800c756:	d9fa      	bls.n	800c74e <_free_r+0x42>
 800c758:	6811      	ldr	r1, [r2, #0]
 800c75a:	1850      	adds	r0, r2, r1
 800c75c:	42a0      	cmp	r0, r4
 800c75e:	d10b      	bne.n	800c778 <_free_r+0x6c>
 800c760:	6820      	ldr	r0, [r4, #0]
 800c762:	4401      	add	r1, r0
 800c764:	1850      	adds	r0, r2, r1
 800c766:	4283      	cmp	r3, r0
 800c768:	6011      	str	r1, [r2, #0]
 800c76a:	d1e0      	bne.n	800c72e <_free_r+0x22>
 800c76c:	6818      	ldr	r0, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	6053      	str	r3, [r2, #4]
 800c772:	4408      	add	r0, r1
 800c774:	6010      	str	r0, [r2, #0]
 800c776:	e7da      	b.n	800c72e <_free_r+0x22>
 800c778:	d902      	bls.n	800c780 <_free_r+0x74>
 800c77a:	230c      	movs	r3, #12
 800c77c:	602b      	str	r3, [r5, #0]
 800c77e:	e7d6      	b.n	800c72e <_free_r+0x22>
 800c780:	6820      	ldr	r0, [r4, #0]
 800c782:	1821      	adds	r1, r4, r0
 800c784:	428b      	cmp	r3, r1
 800c786:	bf04      	itt	eq
 800c788:	6819      	ldreq	r1, [r3, #0]
 800c78a:	685b      	ldreq	r3, [r3, #4]
 800c78c:	6063      	str	r3, [r4, #4]
 800c78e:	bf04      	itt	eq
 800c790:	1809      	addeq	r1, r1, r0
 800c792:	6021      	streq	r1, [r4, #0]
 800c794:	6054      	str	r4, [r2, #4]
 800c796:	e7ca      	b.n	800c72e <_free_r+0x22>
 800c798:	bd38      	pop	{r3, r4, r5, pc}
 800c79a:	bf00      	nop
 800c79c:	200007e0 	.word	0x200007e0

0800c7a0 <_init>:
 800c7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7a2:	bf00      	nop
 800c7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7a6:	bc08      	pop	{r3}
 800c7a8:	469e      	mov	lr, r3
 800c7aa:	4770      	bx	lr

0800c7ac <_fini>:
 800c7ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ae:	bf00      	nop
 800c7b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7b2:	bc08      	pop	{r3}
 800c7b4:	469e      	mov	lr, r3
 800c7b6:	4770      	bx	lr
