
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a998  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800ab70  0800ab70  0000bb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac30  0800ac30  0000c120  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac30  0800ac30  0000c120  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac30  0800ac30  0000c120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800ac30  0800ac30  0000bc30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ac3c  0800ac3c  0000bc3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  20000000  0800ac44  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000654  20000120  0800ad64  0000c120  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000774  0800ad64  0000c774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c120  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e4c5  00000000  00000000  0000c150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005646  00000000  00000000  0003a615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b98  00000000  00000000  0003fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001523  00000000  00000000  000417f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002803c  00000000  00000000  00042d1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000251a3  00000000  00000000  0006ad57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeae2  00000000  00000000  0008fefa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017e9dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f30  00000000  00000000  0017ea20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00186950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000120 	.word	0x20000120
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800ab58 	.word	0x0800ab58

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000124 	.word	0x20000124
 8000214:	0800ab58 	.word	0x0800ab58

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8000c38 <_ZN17AS5048A_interfaceC1Ev+0x88>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2200      	movs	r2, #0
 8000bee:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f04f 0200 	mov.w	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a0e      	ldr	r2, [pc, #56]	@ (8000c3c <_ZN17AS5048A_interfaceC1Ev+0x8c>)
 8000c02:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	@ (8000c40 <_ZN17AS5048A_interfaceC1Ev+0x90>)
 8000c08:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2215      	movs	r2, #21
 8000c0e:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	334c      	adds	r3, #76	@ 0x4c
 8000c14:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8000c44 <_ZN17AS5048A_interfaceC1Ev+0x94>
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 fdbd 	bl	8001798 <_ZN13LowPassFilterC1Ef>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	3358      	adds	r3, #88	@ 0x58
 8000c22:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000c48 <_ZN17AS5048A_interfaceC1Ev+0x98>
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 fdb6 	bl	8001798 <_ZN13LowPassFilterC1Ef>
	// TODO Auto-generated constructor stub

}
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	0800ab78 	.word	0x0800ab78
 8000c3c:	c640e400 	.word	0xc640e400
 8000c40:	ffffcfc7 	.word	0xffffcfc7
 8000c44:	3c23d70a 	.word	0x3c23d70a
 8000c48:	3e4ccccd 	.word	0x3e4ccccd

08000c4c <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	4a04      	ldr	r2, [pc, #16]	@ (8000c68 <_ZN17AS5048A_interfaceD1Ev+0x1c>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	0800ab78 	.word	0x0800ab78

08000c6c <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
}
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ffe9 	bl	8000c4c <_ZN17AS5048A_interfaceD1Ev>
 8000c7a:	2164      	movs	r1, #100	@ 0x64
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f008 fd11 	bl	80096a4 <_ZdlPvj>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000c8c:	b5b0      	push	{r4, r5, r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000c94:	4b1a      	ldr	r3, [pc, #104]	@ (8000d00 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000c96:	f107 040c 	add.w	r4, r7, #12
 8000c9a:	461d      	mov	r5, r3
 8000c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca0:	682b      	ldr	r3, [r5, #0]
 8000ca2:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	e001      	b.n	8000cb2 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cae:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	2002      	movs	r0, #2
 8000cbc:	f000 fa6e 	bl	800119c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000cc0:	ec53 2b10 	vmov	r2, r3, d0
 8000cc4:	4610      	mov	r0, r2
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f7ff ff12 	bl	8000af0 <__aeabi_d2f>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000cde:	69ba      	ldr	r2, [r7, #24]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000cea:	2201      	movs	r2, #1
 8000cec:	2110      	movs	r1, #16
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f005 fd4b 	bl	800678c <HAL_GPIO_WritePin>
}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000000 	.word	0x20000000

08000d04 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d0c:	6878      	ldr	r0, [r7, #4]
 8000d0e:	f000 f8c1 	bl	8000e94 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f000 f8be 	bl	8000e94 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d18:	eef0 7a40 	vmov.f32	s15, s0
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d22:	f000 f989 	bl	8001038 <_ZN17AS5048A_interface6microsEv>
 8000d26:	4603      	mov	r3, r0
 8000d28:	461a      	mov	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f002 ffc8 	bl	8003cc4 <HAL_Delay>
	getSensorAngle();
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f000 f8ad 	bl	8000e94 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f8aa 	bl	8000e94 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d4a:	f000 f975 	bl	8001038 <_ZN17AS5048A_interface6microsEv>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	461a      	mov	r2, r3
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	621a      	str	r2, [r3, #32]
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000d5e:	b480      	push	{r7}
 8000d60:	b085      	sub	sp, #20
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	460b      	mov	r3, r1
 8000d68:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73bb      	strb	r3, [r7, #14]
 8000d72:	e00d      	b.n	8000d90 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d002      	beq.n	8000d84 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	3301      	adds	r3, #1
 8000d82:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000d84:	887b      	ldrh	r3, [r7, #2]
 8000d86:	085b      	lsrs	r3, r3, #1
 8000d88:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000d8a:	7bbb      	ldrb	r3, [r7, #14]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	73bb      	strb	r3, [r7, #14]
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	2b0f      	cmp	r3, #15
 8000d94:	d9ee      	bls.n	8000d74 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	b2db      	uxtb	r3, r3
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000db8:	887b      	ldrh	r3, [r7, #2]
 8000dba:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	dd0b      	ble.n	8000ddc <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	b21a      	sxth	r2, r3
 8000dd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b21b      	sxth	r3, r3
 8000dd8:	b29b      	uxth	r3, r3
 8000dda:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	dd11      	ble.n	8000e08 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000de4:	897b      	ldrh	r3, [r7, #10]
 8000de6:	4619      	mov	r1, r3
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffb8 	bl	8000d5e <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000dee:	4603      	mov	r3, r0
 8000df0:	461a      	mov	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	68db      	ldr	r3, [r3, #12]
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	b21a      	sxth	r2, r3
 8000dfc:	897b      	ldrh	r3, [r7, #10]
 8000dfe:	b21b      	sxth	r3, r3
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2110      	movs	r1, #16
 8000e0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e10:	f005 fcbc 	bl	800678c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000e14:	f107 020c 	add.w	r2, r7, #12
 8000e18:	f107 010a 	add.w	r1, r7, #10
 8000e1c:	2364      	movs	r3, #100	@ 0x64
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	2301      	movs	r3, #1
 8000e22:	4813      	ldr	r0, [pc, #76]	@ (8000e70 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000e24:	f006 fd5b 	bl	80078de <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2110      	movs	r1, #16
 8000e2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e30:	f005 fcac 	bl	800678c <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e34:	89bb      	ldrh	r3, [r7, #12]
 8000e36:	4619      	mov	r1, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	695b      	ldr	r3, [r3, #20]
 8000e3c:	1c5a      	adds	r2, r3, #1
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	1ad3      	subs	r3, r2, r3
 8000e44:	fa41 f303 	asr.w	r3, r1, r3
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f1c3 0310 	rsb	r3, r3, #16
 8000e54:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e58:	fa42 f303 	asr.w	r3, r2, r3
 8000e5c:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000e5e:	89ba      	ldrh	r2, [r7, #12]
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	4013      	ands	r3, r2
 8000e64:	b29b      	uxth	r3, r3
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000570 	.word	0x20000570

08000e74 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff91 	bl	8000dac <_ZN17AS5048A_interface4readEt>
 8000e8a:	4603      	mov	r3, r0
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffe9 	bl	8000e74 <_ZN17AS5048A_interface11getRawCountEv>
 8000ea2:	ee07 0a90 	vmov	s15, r0
 8000ea6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	ed93 7a01 	vldr	s14, [r3, #4]
 8000eb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eb4:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000ec8 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000eb8:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000ebc:	eeb0 0a67 	vmov.f32	s0, s15
 8000ec0:	3708      	adds	r7, #8
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40c90fdb 	.word	0x40c90fdb

08000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ed8:	ee07 3a90 	vmov	s15, r3
 8000edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee0:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f00 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000ee4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	edd3 7a07 	vldr	s15, [r3, #28]
 8000eee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ef2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	40c90fdb 	.word	0x40c90fdb

08000f04 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	69db      	ldr	r3, [r3, #28]
 8000f10:	ee07 3a90 	vmov	s15, r3
}
 8000f14:	eeb0 0a67 	vmov.f32	s0, s15
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	ed2d 8b02 	vpush	{d8}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000f36:	fb02 f303 	mul.w	r3, r2, r3
 8000f3a:	ee07 3a90 	vmov	s15, r3
 8000f3e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ffde 	bl	8000f04 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8000f48:	eef0 7a40 	vmov.f32	s15, s0
 8000f4c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000f56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f5e:	f000 fbc5 	bl	80016ec <_Z15_normalizeAnglef>
 8000f62:	eef0 7a40 	vmov.f32	s15, s0
}
 8000f66:	eeb0 0a67 	vmov.f32	s0, s15
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	ecbd 8b02 	vpop	{d8}
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	0000      	movs	r0, r0
	...

08000f78 <_ZN17AS5048A_interface17getSensorVelocityEv>:
 * @brief Get angular velocity from angular position
 * 
 * @return angular velocity [radians/second]
*/
float AS5048A_interface::getSensorVelocity() 
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = (angle_prev_ts - vel_angle_prev_ts) * 1e-6;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6a1a      	ldr	r2, [r3, #32]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fa96 	bl	80004bc <__aeabi_i2d>
 8000f90:	a327      	add	r3, pc, #156	@ (adr r3, 8001030 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb8>)
 8000f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f96:	f7ff fafb 	bl	8000590 <__aeabi_dmul>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	4610      	mov	r0, r2
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f7ff fda5 	bl	8000af0 <__aeabi_d2f>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	60fb      	str	r3, [r7, #12]
	// quick fix for strange cases (micros overflow)
	if (Ts <= 0)
 8000faa:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	d801      	bhi.n	8000fbc <_ZN17AS5048A_interface17getSensorVelocityEv+0x44>
		Ts = 1e-3f;
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <_ZN17AS5048A_interface17getSensorVelocityEv+0xb0>)
 8000fba:	60fb      	str	r3, [r7, #12]
	// velocity calculation
	vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fce:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800102c <_ZN17AS5048A_interface17getSensorVelocityEv+0xb4>
 8000fd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	edd3 6a07 	vldr	s13, [r3, #28]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8000fe2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fe6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8000fea:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	// save variables for future pass
	vel_angle_prev = angle_prev;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69da      	ldr	r2, [r3, #28]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	639a      	str	r2, [r3, #56]	@ 0x38
	vel_angle_prev_ts = angle_prev_ts;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	629a      	str	r2, [r3, #40]	@ 0x28
	return vel_prev;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001014:	ee07 3a90 	vmov	s15, r3
}
 8001018:	eeb0 0a67 	vmov.f32	s0, s15
 800101c:	3710      	adds	r7, #16
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	f3af 8000 	nop.w
 8001028:	3a83126f 	.word	0x3a83126f
 800102c:	40c90fdb 	.word	0x40c90fdb
 8001030:	a0b5ed8d 	.word	0xa0b5ed8d
 8001034:	3eb0c6f7 	.word	0x3eb0c6f7

08001038 <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800103c:	4b07      	ldr	r3, [pc, #28]	@ (800105c <_ZN17AS5048A_interface6microsEv+0x24>)
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	4b07      	ldr	r3, [pc, #28]	@ (8001060 <_ZN17AS5048A_interface6microsEv+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4907      	ldr	r1, [pc, #28]	@ (8001064 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8001046:	fba1 1303 	umull	r1, r3, r1, r3
 800104a:	0c9b      	lsrs	r3, r3, #18
 800104c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e0001000 	.word	0xe0001000
 8001060:	200000b4 	.word	0x200000b4
 8001064:	431bde83 	.word	0x431bde83

08001068 <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ff0f 	bl	8000e94 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001076:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800107a:	f7ff ffdd 	bl	8001038 <_ZN17AS5048A_interface6microsEv>
 800107e:	4603      	mov	r3, r0
 8001080:	461a      	mov	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a07 	vldr	s15, [r3, #28]
 800108c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 8001098:	ed97 0a02 	vldr	s0, [r7, #8]
 800109c:	f7ff fd78 	bl	8000b90 <_ZSt3absf>
 80010a0:	eef0 7a40 	vmov.f32	s15, s0
 80010a4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010f0 <_ZN17AS5048A_interface12updateSensorEv+0x88>
 80010a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	bfcc      	ite	gt
 80010b2:	2301      	movgt	r3, #1
 80010b4:	2300      	movle	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00f      	beq.n	80010dc <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010cc:	dd02      	ble.n	80010d4 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 80010ce:	f04f 32ff 	mov.w	r2, #4294967295
 80010d2:	e000      	b.n	80010d6 <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 80010d4:	2201      	movs	r2, #1
 80010d6:	441a      	add	r2, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	635a      	str	r2, [r3, #52]	@ 0x34
	angle_prev = angle_current;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	61da      	str	r2, [r3, #28]

	getShaftVelocity();
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f000 f82f 	bl	8001146 <_ZN17AS5048A_interface16getShaftVelocityEv>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40a0d97c 	.word	0x40a0d97c

080010f4 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80010f4:	b590      	push	{r4, r7, lr}
 80010f6:	ed2d 8b02 	vpush	{d8}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001104:	ee07 3a90 	vmov	s15, r3
 8001108:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f103 044c 	add.w	r4, r3, #76	@ 0x4c
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff feda 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8001118:	eef0 7a40 	vmov.f32	s15, s0
 800111c:	eeb0 0a67 	vmov.f32	s0, s15
 8001120:	4620      	mov	r0, r4
 8001122:	f000 fb51 	bl	80017c8 <_ZN13LowPassFilterclEf>
 8001126:	eef0 7a40 	vmov.f32	s15, s0
 800112a:	ee28 7a27 	vmul.f32	s14, s16, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001134:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8001138:	eeb0 0a67 	vmov.f32	s0, s15
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	ecbd 8b02 	vpop	{d8}
 8001144:	bd90      	pop	{r4, r7, pc}

08001146 <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 8001146:	b590      	push	{r4, r7, lr}
 8001148:	ed2d 8b02 	vpush	{d8}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	vel_prev_LPF = sensor_direction * LPF_velocity(getSensorVelocity());
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	ee07 3a90 	vmov	s15, r3
 800115a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f103 0458 	add.w	r4, r3, #88	@ 0x58
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff07 	bl	8000f78 <_ZN17AS5048A_interface17getSensorVelocityEv>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	eeb0 0a67 	vmov.f32	s0, s15
 8001172:	4620      	mov	r0, r4
 8001174:	f000 fb28 	bl	80017c8 <_ZN13LowPassFilterclEf>
 8001178:	eef0 7a40 	vmov.f32	s15, s0
 800117c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	return vel_prev_LPF;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	ee07 3a90 	vmov	s15, r3
}
 800118e:	eeb0 0a67 	vmov.f32	s0, s15
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	ecbd 8b02 	vpop	{d8}
 800119a:	bd90      	pop	{r4, r7, pc}

0800119c <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 800119c:	b5b0      	push	{r4, r5, r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff f988 	bl	80004bc <__aeabi_i2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	6838      	ldr	r0, [r7, #0]
 80011b2:	f7ff f983 	bl	80004bc <__aeabi_i2d>
 80011b6:	4602      	mov	r2, r0
 80011b8:	460b      	mov	r3, r1
 80011ba:	ec43 2b11 	vmov	d1, r2, r3
 80011be:	ec45 4b10 	vmov	d0, r4, r5
 80011c2:	f008 fa73 	bl	80096ac <pow>
 80011c6:	eeb0 7a40 	vmov.f32	s14, s0
 80011ca:	eef0 7a60 	vmov.f32	s15, s1
    }
 80011ce:	eeb0 0a47 	vmov.f32	s0, s14
 80011d2:	eef0 0a67 	vmov.f32	s1, s15
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bdb0      	pop	{r4, r5, r7, pc}

080011dc <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
 80011e4:	4a04      	ldr	r2, [pc, #16]	@ (80011f8 <_ZN12CurrentSenseC1Ev+0x1c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	601a      	str	r2, [r3, #0]
{
	
}
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	0800ab88 	.word	0x0800ab88

080011fc <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	4a04      	ldr	r2, [pc, #16]	@ (8001218 <_ZN12CurrentSenseD1Ev+0x1c>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	0800ab88 	.word	0x0800ab88

0800121c <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
}
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe9 	bl	80011fc <_ZN12CurrentSenseD1Ev>
 800122a:	2150      	movs	r1, #80	@ 0x50
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f008 fa39 	bl	80096a4 <_ZdlPvj>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	ed87 0a02 	vstr	s0, [r7, #8]
 8001248:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	3344      	adds	r3, #68	@ 0x44
 8001250:	2201      	movs	r2, #1
 8001252:	4619      	mov	r1, r3
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 8001256:	f003 f923 	bl	80044a0 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3348      	adds	r3, #72	@ 0x48
 800125e:	2201      	movs	r2, #1
 8001260:	4619      	mov	r1, r3
 8001262:	480a      	ldr	r0, [pc, #40]	@ (800128c <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 8001264:	f003 f91c 	bl	80044a0 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	68ba      	ldr	r2, [r7, #8]
 800126c:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_a = _gain;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	621a      	str	r2, [r3, #32]
	gain_b = _gain;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	625a      	str	r2, [r3, #36]	@ 0x24
	gain_c = _gain;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001280:	bf00      	nop
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	200002f0 	.word	0x200002f0
 800128c:	2000035c 	.word	0x2000035c

08001290 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129c:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 800129e:	6879      	ldr	r1, [r7, #4]
 80012a0:	f04f 0200 	mov.w	r2, #0
 80012a4:	f04f 0300 	mov.w	r3, #0
 80012a8:	e9c1 2302 	strd	r2, r3, [r1, #8]
	offset_ib = 0;
 80012ac:	6879      	ldr	r1, [r7, #4]
 80012ae:	f04f 0200 	mov.w	r2, #0
 80012b2:	f04f 0300 	mov.w	r3, #0
 80012b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ic = 0;
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	f04f 0300 	mov.w	r3, #0
 80012c4:	e9c1 2306 	strd	r2, r3, [r1, #24]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	e02b      	b.n	8001326 <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8df 	bl	800049c <__aeabi_ui2d>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
 80012e6:	f7fe ff9d 	bl	8000224 <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	6879      	ldr	r1, [r7, #4]
 80012f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff f8cc 	bl	800049c <__aeabi_ui2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4620      	mov	r0, r4
 800130a:	4629      	mov	r1, r5
 800130c:	f7fe ff8a 	bl	8000224 <__adddf3>
 8001310:	4602      	mov	r2, r0
 8001312:	460b      	mov	r3, r1
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	e9c1 2306 	strd	r2, r3, [r1, #24]
		HAL_Delay(1);
 800131a:	2001      	movs	r0, #1
 800131c:	f002 fcd2 	bl	8003cc4 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	3301      	adds	r3, #1
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800132c:	dbcf      	blt.n	80012ce <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 800133a:	f7ff fa53 	bl	80007e4 <__aeabi_ddiv>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	6879      	ldr	r1, [r7, #4]
 8001344:	e9c1 2302 	strd	r2, r3, [r1, #8]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	4b06      	ldr	r3, [pc, #24]	@ (800136c <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 8001354:	f7ff fa46 	bl	80007e4 <__aeabi_ddiv>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	6879      	ldr	r1, [r7, #4]
 800135e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001362:	bf00      	nop
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bdb0      	pop	{r4, r5, r7, pc}
 800136a:	bf00      	nop
 800136c:	408f4000 	.word	0x408f4000

08001370 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f88a 	bl	800049c <__aeabi_ui2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7fe ff46 	bl	8000220 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	a33a      	add	r3, pc, #232	@ (adr r3, 8001488 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f8f5 	bl	8000590 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4614      	mov	r4, r2
 80013ac:	461d      	mov	r5, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80013ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013be:	ee17 0a90 	vmov	r0, s15
 80013c2:	f7ff f88d 	bl	80004e0 <__aeabi_f2d>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4620      	mov	r0, r4
 80013cc:	4629      	mov	r1, r5
 80013ce:	f7ff fa09 	bl	80007e4 <__aeabi_ddiv>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4610      	mov	r0, r2
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fb89 	bl	8000af0 <__aeabi_d2f>
 80013de:	4602      	mov	r2, r0
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	631a      	str	r2, [r3, #48]	@ 0x30
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff f854 	bl	800049c <__aeabi_ui2d>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4620      	mov	r0, r4
 80013fa:	4629      	mov	r1, r5
 80013fc:	f7fe ff10 	bl	8000220 <__aeabi_dsub>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	4610      	mov	r0, r2
 8001406:	4619      	mov	r1, r3
 8001408:	a31f      	add	r3, pc, #124	@ (adr r3, 8001488 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f8bf 	bl	8000590 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800142a:	ee17 0a90 	vmov	r0, s15
 800142e:	f7ff f857 	bl	80004e0 <__aeabi_f2d>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4620      	mov	r0, r4
 8001438:	4629      	mov	r1, r5
 800143a:	f7ff f9d3 	bl	80007e4 <__aeabi_ddiv>
 800143e:	4602      	mov	r2, r0
 8001440:	460b      	mov	r3, r1
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	f7ff fb53 	bl	8000af0 <__aeabi_d2f>
 800144a:	4602      	mov	r2, r0
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	639a      	str	r2, [r3, #56]	@ 0x38
//    current.b = - current.a  - current.c; // --(1)
	return current;
 8001450:	697a      	ldr	r2, [r7, #20]
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	3230      	adds	r2, #48	@ 0x30
 8001458:	ca07      	ldmia	r2, {r0, r1, r2}
 800145a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800145e:	69f9      	ldr	r1, [r7, #28]
 8001460:	6a3a      	ldr	r2, [r7, #32]
 8001462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001464:	ee06 1a90 	vmov	s13, r1
 8001468:	ee07 2a10 	vmov	s14, r2
 800146c:	ee07 3a90 	vmov	s15, r3
}
 8001470:	eeb0 0a66 	vmov.f32	s0, s13
 8001474:	eef0 0a47 	vmov.f32	s1, s14
 8001478:	eeb0 1a67 	vmov.f32	s2, s15
 800147c:	3728      	adds	r7, #40	@ 0x28
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	f3af 8000 	nop.w
 8001488:	66666666 	.word	0x66666666
 800148c:	3f4a6666 	.word	0x3f4a6666

08001490 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001490:	b590      	push	{r4, r7, lr}
 8001492:	b08b      	sub	sp, #44	@ 0x2c
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 800149c:	68fc      	ldr	r4, [r7, #12]
 800149e:	68f8      	ldr	r0, [r7, #12]
 80014a0:	f7ff ff66 	bl	8001370 <_ZN12CurrentSense16getPhaseCurrentsEv>
 80014a4:	eef0 6a40 	vmov.f32	s13, s0
 80014a8:	eeb0 7a60 	vmov.f32	s14, s1
 80014ac:	eef0 7a41 	vmov.f32	s15, s2
 80014b0:	edc4 6a0c 	vstr	s13, [r4, #48]	@ 0x30
 80014b4:	ed84 7a0d 	vstr	s14, [r4, #52]	@ 0x34
 80014b8:	edc4 7a0e 	vstr	s15, [r4, #56]	@ 0x38
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80014c8:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800156c <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 80014cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 80014d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001570 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 80014da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 80014e6:	ed97 0a02 	vldr	s0, [r7, #8]
 80014ea:	f000 f8cf 	bl	800168c <_Z4_cosf>
 80014ee:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 80014f2:	ed97 0a02 	vldr	s0, [r7, #8]
 80014f6:	f000 f851 	bl	800159c <_Z4_sinf>
 80014fa:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 80014fe:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001502:	edd7 7a07 	vldr	s15, [r7, #28]
 8001506:	ee27 7a27 	vmul.f32	s14, s14, s15
 800150a:	edd7 6a08 	vldr	s13, [r7, #32]
 800150e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001512:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001516:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	dq_current.q = i_beta  * ct - i_alpha * st;
 8001520:	ed97 7a08 	vldr	s14, [r7, #32]
 8001524:	edd7 7a07 	vldr	s15, [r7, #28]
 8001528:	ee27 7a27 	vmul.f32	s14, s14, s15
 800152c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001530:	edd7 7a06 	vldr	s15, [r7, #24]
 8001534:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	return dq_current;
 8001542:	68fa      	ldr	r2, [r7, #12]
 8001544:	f107 0310 	add.w	r3, r7, #16
 8001548:	323c      	adds	r2, #60	@ 0x3c
 800154a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800154e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	ee07 2a10 	vmov	s14, r2
 800155a:	ee07 3a90 	vmov	s15, r3
}
 800155e:	eeb0 0a47 	vmov.f32	s0, s14
 8001562:	eef0 0a67 	vmov.f32	s1, s15
 8001566:	372c      	adds	r7, #44	@ 0x2c
 8001568:	46bd      	mov	sp, r7
 800156a:	bd90      	pop	{r4, r7, pc}
 800156c:	bf13cd3a 	.word	0xbf13cd3a
 8001570:	bf93cd3a 	.word	0xbf93cd3a

08001574 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	ed87 0a01 	vstr	s0, [r7, #4]
 800157e:	edc7 0a00 	vstr	s1, [r7]
 8001582:	edd7 0a00 	vldr	s1, [r7]
 8001586:	ed97 0a01 	vldr	s0, [r7, #4]
 800158a:	f008 f901 	bl	8009790 <fmodf>
 800158e:	eef0 7a40 	vmov.f32	s15, s0
 8001592:	eeb0 0a67 	vmov.f32	s0, s15
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 800159c:	b480      	push	{r7}
 800159e:	b087      	sub	sp, #28
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 80015a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80015aa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001680 <_Z4_sinf+0xe4>
 80015ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015b6:	ee17 3a90 	vmov	r3, s15
 80015ba:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80015ce:	d80b      	bhi.n	80015e8 <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 80015d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001684 <_Z4_sinf+0xe8>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a29      	ldr	r2, [pc, #164]	@ (8001684 <_Z4_sinf+0xe8>)
 80015e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	e033      	b.n	8001650 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80015ec:	d80e      	bhi.n	800160c <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80015f4:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <_Z4_sinf+0xe8>)
 80015f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8001602:	4a20      	ldr	r2, [pc, #128]	@ (8001684 <_Z4_sinf+0xe8>)
 8001604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001608:	613b      	str	r3, [r7, #16]
 800160a:	e021      	b.n	8001650 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2bbf      	cmp	r3, #191	@ 0xbf
 8001610:	d80e      	bhi.n	8001630 <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b80      	subs	r3, #128	@ 0x80
 8001616:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <_Z4_sinf+0xe8>)
 8001618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800161c:	425b      	negs	r3, r3
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3b7f      	subs	r3, #127	@ 0x7f
 8001624:	4a17      	ldr	r2, [pc, #92]	@ (8001684 <_Z4_sinf+0xe8>)
 8001626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800162a:	425b      	negs	r3, r3
 800162c:	613b      	str	r3, [r7, #16]
 800162e:	e00f      	b.n	8001650 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8001636:	4a13      	ldr	r2, [pc, #76]	@ (8001684 <_Z4_sinf+0xe8>)
 8001638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800163c:	425b      	negs	r3, r3
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8001646:	4a0f      	ldr	r2, [pc, #60]	@ (8001684 <_Z4_sinf+0xe8>)
 8001648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800164c:	425b      	negs	r3, r3
 800164e:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	68ba      	ldr	r2, [r7, #8]
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	121a      	asrs	r2, r3, #8
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	4413      	add	r3, r2
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800166a:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001688 <_Z4_sinf+0xec>
 800166e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001672:	eeb0 0a67 	vmov.f32	s0, s15
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	4622f983 	.word	0x4622f983
 8001684:	20000014 	.word	0x20000014
 8001688:	38000000 	.word	0x38000000

0800168c <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8001696:	edd7 7a01 	vldr	s15, [r7, #4]
 800169a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016e4 <_Z4_cosf+0x58>
 800169e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a2:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80016a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016aa:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80016e8 <_Z4_cosf+0x5c>
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	dd06      	ble.n	80016c6 <_Z4_cosf+0x3a>
 80016b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016bc:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80016e8 <_Z4_cosf+0x5c>
 80016c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80016c4:	e001      	b.n	80016ca <_Z4_cosf+0x3e>
 80016c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80016ca:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 80016ce:	ed97 0a03 	vldr	s0, [r7, #12]
 80016d2:	f7ff ff63 	bl	800159c <_Z4_sinf>
 80016d6:	eef0 7a40 	vmov.f32	s15, s0
}
 80016da:	eeb0 0a67 	vmov.f32	s0, s15
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	3fc90fdb 	.word	0x3fc90fdb
 80016e8:	40c90fdb 	.word	0x40c90fdb

080016ec <_Z15_normalizeAnglef>:
    return r;
  }


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 80016f6:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8001730 <_Z15_normalizeAnglef+0x44>
 80016fa:	ed97 0a01 	vldr	s0, [r7, #4]
 80016fe:	f7ff ff39 	bl	8001574 <_ZSt4fmodff>
 8001702:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8001706:	edd7 7a03 	vldr	s15, [r7, #12]
 800170a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	db02      	blt.n	800171a <_Z15_normalizeAnglef+0x2e>
 8001714:	edd7 7a03 	vldr	s15, [r7, #12]
 8001718:	e005      	b.n	8001726 <_Z15_normalizeAnglef+0x3a>
 800171a:	edd7 7a03 	vldr	s15, [r7, #12]
 800171e:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001730 <_Z15_normalizeAnglef+0x44>
 8001722:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8001726:	eeb0 0a67 	vmov.f32	s0, s15
 800172a:	3710      	adds	r7, #16
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40c90fdb 	.word	0x40c90fdb

08001734 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	ed87 0a01 	vstr	s0, [r7, #4]
 800173e:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	ee07 3a90 	vmov	s15, r3
 8001746:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800174a:	edd7 7a01 	vldr	s15, [r7, #4]
 800174e:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001752:	eeb0 0a67 	vmov.f32	s0, s15
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr

08001760 <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	085a      	lsrs	r2, r3, #1
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_Z11_sqrtApproxf+0x34>)
 8001774:	1a9b      	subs	r3, r3, r2
 8001776:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8001778:	ed97 7a03 	vldr	s14, [r7, #12]
 800177c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001784:	eeb0 0a67 	vmov.f32	s0, s15
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	5f375a86 	.word	0x5f375a86

08001798 <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f04f 0200 	mov.w	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 80017b2:	f000 f873 	bl	800189c <_ZN13LowPassFilter6microsEv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	605a      	str	r2, [r3, #4]
}
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 80017d4:	f000 f862 	bl	800189c <_ZN13LowPassFilter6microsEv>
 80017d8:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017ea:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8001890 <_ZN13LowPassFilterclEf+0xc8>
 80017ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017f2:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 80017f6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001802:	d502      	bpl.n	800180a <_ZN13LowPassFilterclEf+0x42>
 8001804:	4b23      	ldr	r3, [pc, #140]	@ (8001894 <_ZN13LowPassFilterclEf+0xcc>)
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	e010      	b.n	800182c <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 800180a:	edd7 7a05 	vldr	s15, [r7, #20]
 800180e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001898 <_ZN13LowPassFilterclEf+0xd0>
 8001812:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800181a:	dd07      	ble.n	800182c <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	605a      	str	r2, [r3, #4]
        return x;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	e029      	b.n	8001880 <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	edd3 6a00 	vldr	s13, [r3]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	ed93 7a00 	vldr	s14, [r3]
 8001838:	edd7 7a05 	vldr	s15, [r7, #20]
 800183c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001844:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	ed93 7a02 	vldr	s14, [r3, #8]
 800184e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001852:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800185a:	edd7 7a03 	vldr	s15, [r7, #12]
 800185e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001862:	edd7 7a00 	vldr	s15, [r7]
 8001866:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800186a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800186e:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	605a      	str	r2, [r3, #4]
    return y;
 800187e:	68bb      	ldr	r3, [r7, #8]
}
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eeb0 0a67 	vmov.f32	s0, s15
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	358637bd 	.word	0x358637bd
 8001894:	3a83126f 	.word	0x3a83126f
 8001898:	3e99999a 	.word	0x3e99999a

0800189c <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80018a0:	4b07      	ldr	r3, [pc, #28]	@ (80018c0 <_ZN13LowPassFilter6microsEv+0x24>)
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <_ZN13LowPassFilter6microsEv+0x28>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4907      	ldr	r1, [pc, #28]	@ (80018c8 <_ZN13LowPassFilter6microsEv+0x2c>)
 80018aa:	fba1 1303 	umull	r1, r3, r1, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e0001000 	.word	0xe0001000
 80018c4:	200000b4 	.word	0x200000b4
 80018c8:	431bde83 	.word	0x431bde83

080018cc <_Z41__static_initialization_and_destruction_0ii>:
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
	PIDController PID_velocity  {5.0, 0.0, 0.0, 1000.0, current_limit};
	PIDController PID_position  {1.0, 0.0, 0.0, 0, velocity_limit};

	LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
	LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d14e      	bne.n	800197a <_Z41__static_initialization_and_destruction_0ii+0xae>
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d149      	bne.n	800197a <_Z41__static_initialization_and_destruction_0ii+0xae>
	PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 80018e6:	4b27      	ldr	r3, [pc, #156]	@ (8001984 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	eeb0 2a67 	vmov.f32	s4, s15
 80018f0:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001988 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 80018f4:	ed9f 1a25 	vldr	s2, [pc, #148]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80018f8:	eddf 0a24 	vldr	s1, [pc, #144]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 80018fc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001900:	4823      	ldr	r0, [pc, #140]	@ (8001990 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8001902:	f000 f85f 	bl	80019c4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_current_q {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8001906:	4b1f      	ldr	r3, [pc, #124]	@ (8001984 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8001908:	edd3 7a00 	vldr	s15, [r3]
 800190c:	eeb0 2a67 	vmov.f32	s4, s15
 8001910:	eddf 1a1d 	vldr	s3, [pc, #116]	@ 8001988 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8001914:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001918:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800191c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001920:	481c      	ldr	r0, [pc, #112]	@ (8001994 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8001922:	f000 f84f 	bl	80019c4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_velocity  {5.0, 0.0, 0.0, 1000.0, current_limit};
 8001926:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8001928:	edd3 7a00 	vldr	s15, [r3]
 800192c:	eeb0 2a67 	vmov.f32	s4, s15
 8001930:	eddf 1a15 	vldr	s3, [pc, #84]	@ 8001988 <_Z41__static_initialization_and_destruction_0ii+0xbc>
 8001934:	ed9f 1a15 	vldr	s2, [pc, #84]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001938:	eddf 0a14 	vldr	s1, [pc, #80]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800193c:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8001940:	4816      	ldr	r0, [pc, #88]	@ (800199c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8001942:	f000 f83f 	bl	80019c4 <_ZN13PIDControllerC1Efffff>
	PIDController PID_position  {1.0, 0.0, 0.0, 0, velocity_limit};
 8001946:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <_Z41__static_initialization_and_destruction_0ii+0xd4>)
 8001948:	edd3 7a00 	vldr	s15, [r3]
 800194c:	eeb0 2a67 	vmov.f32	s4, s15
 8001950:	eddf 1a0e 	vldr	s3, [pc, #56]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001954:	ed9f 1a0d 	vldr	s2, [pc, #52]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 8001958:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 800198c <_Z41__static_initialization_and_destruction_0ii+0xc0>
 800195c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001960:	4810      	ldr	r0, [pc, #64]	@ (80019a4 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8001962:	f000 f82f 	bl	80019c4 <_ZN13PIDControllerC1Efffff>
	LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 8001966:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80019a8 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 800196a:	4810      	ldr	r0, [pc, #64]	@ (80019ac <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 800196c:	f7ff ff14 	bl	8001798 <_ZN13LowPassFilterC1Ef>
	LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 8001970:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80019a8 <_Z41__static_initialization_and_destruction_0ii+0xdc>
 8001974:	480e      	ldr	r0, [pc, #56]	@ (80019b0 <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 8001976:	f7ff ff0f 	bl	8001798 <_ZN13LowPassFilterC1Ef>
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	200000a4 	.word	0x200000a4
 8001988:	447a0000 	.word	0x447a0000
 800198c:	00000000 	.word	0x00000000
 8001990:	2000013c 	.word	0x2000013c
 8001994:	20000160 	.word	0x20000160
 8001998:	200000a8 	.word	0x200000a8
 800199c:	20000184 	.word	0x20000184
 80019a0:	200000ac 	.word	0x200000ac
 80019a4:	200001a8 	.word	0x200001a8
 80019a8:	3dcccccd 	.word	0x3dcccccd
 80019ac:	200001cc 	.word	0x200001cc
 80019b0:	200001d8 	.word	0x200001d8

080019b4 <_GLOBAL__sub_I_phase_resistance>:
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff ff85 	bl	80018cc <_Z41__static_initialization_and_destruction_0ii>
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b086      	sub	sp, #24
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6178      	str	r0, [r7, #20]
 80019cc:	ed87 0a04 	vstr	s0, [r7, #16]
 80019d0:	edc7 0a03 	vstr	s1, [r7, #12]
 80019d4:	ed87 1a02 	vstr	s2, [r7, #8]
 80019d8:	edc7 1a01 	vstr	s3, [r7, #4]
 80019dc:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	601a      	str	r2, [r3, #0]
    , I(I)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
    , D(D)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	68ba      	ldr	r2, [r7, #8]
 80019f0:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8001a16:	f000 f91d 	bl	8001c54 <_ZN13PIDController6microsEv>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	621a      	str	r2, [r3, #32]
}
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4618      	mov	r0, r3
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08a      	sub	sp, #40	@ 0x28
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8001a38:	f000 f90c 	bl	8001c54 <_ZN13PIDController6microsEv>
 8001a3c:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6a1b      	ldr	r3, [r3, #32]
 8001a42:	69fa      	ldr	r2, [r7, #28]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	ee07 3a90 	vmov	s15, r3
 8001a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4e:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8001c4c <_ZN13PIDControllerclEf+0x220>
 8001a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a56:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8001a5a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a66:	d908      	bls.n	8001a7a <_ZN13PIDControllerclEf+0x4e>
 8001a68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001a6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001a70:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a78:	dd01      	ble.n	8001a7e <_ZN13PIDControllerclEf+0x52>
 8001a7a:	4b75      	ldr	r3, [pc, #468]	@ (8001c50 <_ZN13PIDControllerclEf+0x224>)
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edd3 7a00 	vldr	s15, [r3]
 8001a84:	ed97 7a00 	vldr	s14, [r7]
 8001a88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a8c:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	edd3 6a01 	vldr	s13, [r3, #4]
 8001a9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa4:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8001aa8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 6a05 	vldr	s12, [r3, #20]
 8001ab2:	edd7 7a00 	vldr	s15, [r7]
 8001ab6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac2:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001acc:	eef1 7a67 	vneg.f32	s15, s15
 8001ad0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ad4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001adc:	d505      	bpl.n	8001aea <_ZN13PIDControllerclEf+0xbe>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ae4:	eef1 7a67 	vneg.f32	s15, s15
 8001ae8:	e00f      	b.n	8001b0a <_ZN13PIDControllerclEf+0xde>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	edd3 7a04 	vldr	s15, [r3, #16]
 8001af0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001af4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afc:	dd03      	ble.n	8001b06 <_ZN13PIDControllerclEf+0xda>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b04:	e001      	b.n	8001b0a <_ZN13PIDControllerclEf+0xde>
 8001b06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b0a:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b1a:	edd7 6a00 	vldr	s13, [r7]
 8001b1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001b22:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001b26:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b2e:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8001b32:	ed97 7a06 	vldr	s14, [r7, #24]
 8001b36:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b3e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001b42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b46:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b50:	eef1 7a67 	vneg.f32	s15, s15
 8001b54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d505      	bpl.n	8001b6e <_ZN13PIDControllerclEf+0x142>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b68:	eef1 7a67 	vneg.f32	s15, s15
 8001b6c:	e00f      	b.n	8001b8e <_ZN13PIDControllerclEf+0x162>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b74:	ed97 7a08 	vldr	s14, [r7, #32]
 8001b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b80:	dd03      	ble.n	8001b8a <_ZN13PIDControllerclEf+0x15e>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b88:	e001      	b.n	8001b8e <_ZN13PIDControllerclEf+0x162>
 8001b8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8001b8e:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	dd3f      	ble.n	8001c22 <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ba8:	ed97 7a08 	vldr	s14, [r7, #32]
 8001bac:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001bb0:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001bb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb8:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bc2:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bc6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	dd0e      	ble.n	8001bee <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	ed93 7a06 	vldr	s14, [r3, #24]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	edc7 7a08 	vstr	s15, [r7, #32]
 8001bec:	e019      	b.n	8001c22 <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	edd3 7a03 	vldr	s15, [r3, #12]
 8001bf4:	eef1 7a67 	vneg.f32	s15, s15
 8001bf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001bfc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c04:	d50d      	bpl.n	8001c22 <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	ed93 7a06 	vldr	s14, [r3, #24]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	edd3 6a03 	vldr	s13, [r3, #12]
 8001c12:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1e:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a3a      	ldr	r2, [r7, #32]
 8001c2c:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69fa      	ldr	r2, [r7, #28]
 8001c38:	621a      	str	r2, [r3, #32]
    return output;
 8001c3a:	6a3b      	ldr	r3, [r7, #32]
 8001c3c:	ee07 3a90 	vmov	s15, r3
}
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	3728      	adds	r7, #40	@ 0x28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	358637bd 	.word	0x358637bd
 8001c50:	3a83126f 	.word	0x3a83126f

08001c54 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <_ZN13PIDController6microsEv+0x24>)
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4b07      	ldr	r3, [pc, #28]	@ (8001c7c <_ZN13PIDController6microsEv+0x28>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4907      	ldr	r1, [pc, #28]	@ (8001c80 <_ZN13PIDController6microsEv+0x2c>)
 8001c62:	fba1 1303 	umull	r1, r3, r1, r3
 8001c66:	0c9b      	lsrs	r3, r3, #18
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	e0001000 	.word	0xe0001000
 8001c7c:	200000b4 	.word	0x200000b4
 8001c80:	431bde83 	.word	0x431bde83

08001c84 <_ZSt5atan2ff>:
  { return __builtin_atan2f(__y, __x); }
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8e:	edc7 0a00 	vstr	s1, [r7]
 8001c92:	edd7 0a00 	vldr	s1, [r7]
 8001c96:	ed97 0a01 	vldr	s0, [r7, #4]
 8001c9a:	f007 fd77 	bl	800978c <atan2f>
 8001c9e:	eef0 7a40 	vmov.f32	s15, s0
 8001ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	ed87 0a01 	vstr	s0, [r7, #4]
 8001cb6:	ed97 0a01 	vldr	s0, [r7, #4]
 8001cba:	f007 fd95 	bl	80097e8 <floorf>
 8001cbe:	eef0 7a40 	vmov.f32	s15, s0
 8001cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <_ZN11pwm_driversC1Ev+0x1c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	0800ab98 	.word	0x0800ab98

08001cec <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	4a04      	ldr	r2, [pc, #16]	@ (8001d08 <_ZN11pwm_driversD1Ev+0x1c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	0800ab98 	.word	0x0800ab98

08001d0c <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
}
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ffe9 	bl	8001cec <_ZN11pwm_driversD1Ev>
 8001d1a:	2110      	movs	r1, #16
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f007 fcc1 	bl	80096a4 <_ZdlPvj>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:


//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d38:	edc7 0a01 	vstr	s1, [r7, #4]
 8001d3c:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 8001d40:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d44:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8001d9c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8001d48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4c:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d54:	ee17 2a90 	vmov	r2, s15
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8001d5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d5e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8001d9c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8001d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d66:	4b0e      	ldr	r3, [pc, #56]	@ (8001da0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6e:	ee17 2a90 	vmov	r2, s15
 8001d72:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8001d74:	edd7 7a00 	vldr	s15, [r7]
 8001d78:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001d9c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8001d7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d80:	4b07      	ldr	r3, [pc, #28]	@ (8001da0 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d88:	ee17 2a90 	vmov	r2, s15
 8001d8c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	45610000 	.word	0x45610000
 8001da0:	200005d4 	.word	0x200005d4

08001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	@ 0x40
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	ed87 0a02 	vstr	s0, [r7, #8]
 8001db0:	edc7 0a01 	vstr	s1, [r7, #4]
 8001db4:	ed87 1a00 	vstr	s2, [r7]
//		Uc = -0.5f * iv_alpha - _SQRT3_2 * iv_beta + center;

// ===========================================================================
	float Uout;
	// a bit of optitmisation
	if (Ud)
 8001db8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc4:	d029      	beq.n	8001e1a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 8001dc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dca:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001dd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dda:	eeb0 0a67 	vmov.f32	s0, s15
 8001dde:	f7ff fcbf 	bl	8001760 <_Z11_sqrtApproxf>
 8001de2:	eef0 6a40 	vmov.f32	s13, s0
 8001de6:	4be8      	ldr	r3, [pc, #928]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + atan2(Uq, Ud));
 8001df4:	edd7 0a01 	vldr	s1, [r7, #4]
 8001df8:	ed97 0a02 	vldr	s0, [r7, #8]
 8001dfc:	f7ff ff42 	bl	8001c84 <_ZSt5atan2ff>
 8001e00:	eeb0 7a40 	vmov.f32	s14, s0
 8001e04:	edd7 7a00 	vldr	s15, [r7]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	f7ff fc6c 	bl	80016ec <_Z15_normalizeAnglef>
 8001e14:	ed87 0a00 	vstr	s0, [r7]
 8001e18:	e014      	b.n	8001e44 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 8001e1a:	4bdb      	ldr	r3, [pc, #876]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8001e1c:	ed93 7a00 	vldr	s14, [r3]
 8001e20:	edd7 6a02 	vldr	s13, [r7, #8]
 8001e24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e28:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8001e2c:	edd7 7a00 	vldr	s15, [r7]
 8001e30:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 800218c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8001e34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e38:	eeb0 0a67 	vmov.f32	s0, s15
 8001e3c:	f7ff fc56 	bl	80016ec <_Z15_normalizeAnglef>
 8001e40:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8001e44:	edd7 7a00 	vldr	s15, [r7]
 8001e48:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 8002190 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8001e4c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e50:	eeb0 0a47 	vmov.f32	s0, s14
 8001e54:	f7ff ff2a 	bl	8001cac <_ZSt5floorf>
 8001e58:	eef0 7a40 	vmov.f32	s15, s0
 8001e5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e68:	ee17 3a90 	vmov	r3, s15
 8001e6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	ee07 3a90 	vmov	s15, r3
 8001e74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e78:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8002190 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8001e7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e80:	edd7 7a00 	vldr	s15, [r7]
 8001e84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e88:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8c:	f7ff fb86 	bl	800159c <_Z4_sinf>
 8001e90:	eef0 7a40 	vmov.f32	s15, s0
 8001e94:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8002194 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 8001e98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 8001ea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001eaa:	ee07 3a90 	vmov	s15, r3
 8001eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eb6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001eba:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 8002190 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8001ebe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ec2:	ed97 7a00 	vldr	s14, [r7]
 8001ec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eca:	eeb0 0a67 	vmov.f32	s0, s15
 8001ece:	f7ff fb65 	bl	800159c <_Z4_sinf>
 8001ed2:	eef0 7a40 	vmov.f32	s15, s0
 8001ed6:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8002194 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 8001eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ede:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ee6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 8001eea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001ef2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ef6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001efe:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 8001f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f04:	3b01      	subs	r3, #1
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	f200 80ee 	bhi.w	80020e8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 8001f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f14 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 8001f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f12:	bf00      	nop
 8001f14:	08001f2d 	.word	0x08001f2d
 8001f18:	08001f77 	.word	0x08001f77
 8001f1c:	08001fc1 	.word	0x08001fc1
 8001f20:	0800200b 	.word	0x0800200b
 8001f24:	08002055 	.word	0x08002055
 8001f28:	0800209f 	.word	0x0800209f
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8001f2c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f30:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f38:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f3c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001f40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f48:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8001f4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f50:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f58:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001f5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f60:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8001f64:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f68:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f70:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8001f74:	e0c1      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8001f76:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f7a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001f7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f82:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8001f8e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001f92:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001f96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9a:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f9e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001fa2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8001fae:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fb2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fba:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8001fbe:	e09c      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 8001fc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001fc4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001fc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001fcc:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 8001fd0:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8001fd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001fd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fdc:	edd7 6a08 	vldr	s13, [r7, #32]
 8001fe0:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8001fe4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fec:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 8001ff0:	ed97 7a08 	vldr	s14, [r7, #32]
 8001ff4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001ff8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ffc:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002004:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8002008:	e077      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 800200a:	ed97 7a08 	vldr	s14, [r7, #32]
 800200e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002012:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002016:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 800201a:	ed97 7a08 	vldr	s14, [r7, #32]
 800201e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002022:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002026:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800202a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800202e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8002032:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002036:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800203a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800203e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002042:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002046:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800204a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8002052:	e052      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 8002054:	ed97 7a08 	vldr	s14, [r7, #32]
 8002058:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800205c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002060:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 800206c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002070:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002074:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002078:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 800207c:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8002080:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002084:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002088:	edd7 6a08 	vldr	s13, [r7, #32]
 800208c:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8002090:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002098:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800209c:	e02d      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 800209e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020a2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020aa:	edd7 6a08 	vldr	s13, [r7, #32]
 80020ae:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80020b2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80020b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ba:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 80020be:	ed97 7a08 	vldr	s14, [r7, #32]
 80020c2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020ca:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 80020ce:	ed97 7a08 	vldr	s14, [r7, #32]
 80020d2:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80020d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020da:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80020e6:	e008      	b.n	80020fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 80020e8:	f04f 0300 	mov.w	r3, #0
 80020ec:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 80020f4:	f04f 0300 	mov.w	r3, #0
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 80020fa:	4b23      	ldr	r3, [pc, #140]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80020fc:	ed93 7a00 	vldr	s14, [r3]
 8002100:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 800210e:	4b1e      	ldr	r3, [pc, #120]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002110:	ed93 7a00 	vldr	s14, [r3]
 8002114:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 8002122:	4b19      	ldr	r3, [pc, #100]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002124:	ed93 7a00 	vldr	s14, [r3]
 8002128:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800212c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	edd3 7a01 	vldr	s15, [r3, #4]
 800213c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002144:	d502      	bpl.n	800214c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	e00f      	b.n	800216c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002152:	4b0d      	ldr	r3, [pc, #52]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800215c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002160:	dd02      	ble.n	8002168 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	e001      	b.n	800216c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	edd3 7a02 	vldr	s15, [r3, #8]
 8002176:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800217a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800217e:	d50b      	bpl.n	8002198 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 8002180:	f04f 0300 	mov.w	r3, #0
 8002184:	e018      	b.n	80021b8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8002186:	bf00      	nop
 8002188:	200000a4 	.word	0x200000a4
 800218c:	3fc90fdb 	.word	0x3fc90fdb
 8002190:	3f860a92 	.word	0x3f860a92
 8002194:	3fddb3d7 	.word	0x3fddb3d7
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	ed93 7a02 	vldr	s14, [r3, #8]
 800219e:	4b5e      	ldr	r3, [pc, #376]	@ (8002318 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80021a0:	edd3 7a00 	vldr	s15, [r3]
 80021a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ac:	dd02      	ble.n	80021b4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 80021ae:	4b5a      	ldr	r3, [pc, #360]	@ (8002318 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e001      	b.n	80021b8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	68fa      	ldr	r2, [r7, #12]
 80021ba:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	edd3 7a03 	vldr	s15, [r3, #12]
 80021c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	d502      	bpl.n	80021d2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 80021cc:	f04f 0300 	mov.w	r3, #0
 80021d0:	e00f      	b.n	80021f2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80021d8:	4b4f      	ldr	r3, [pc, #316]	@ (8002318 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e6:	dd02      	ble.n	80021ee <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 80021e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002318 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	e001      	b.n	80021f2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	edd3 6a01 	vldr	s13, [r3, #4]
 80021fc:	4b47      	ldr	r3, [pc, #284]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80021fe:	ed93 7a00 	vldr	s14, [r3]
 8002202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002206:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d502      	bpl.n	8002216 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 8002210:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8002320 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8002214:	e019      	b.n	800224a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	edd3 6a01 	vldr	s13, [r3, #4]
 800221c:	4b3f      	ldr	r3, [pc, #252]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800221e:	ed93 7a00 	vldr	s14, [r3]
 8002222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002226:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800222a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800222e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002232:	dd02      	ble.n	800223a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 8002234:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8002238:	e007      	b.n	800224a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8002242:	ed93 7a00 	vldr	s14, [r3]
 8002246:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800224a:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	edd3 6a02 	vldr	s13, [r3, #8]
 8002254:	4b31      	ldr	r3, [pc, #196]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800225e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002266:	d502      	bpl.n	800226e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 8002268:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8002320 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 800226c:	e019      	b.n	80022a2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	edd3 6a02 	vldr	s13, [r3, #8]
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8002276:	ed93 7a00 	vldr	s14, [r3]
 800227a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800227e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8002282:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800228a:	dd02      	ble.n	8002292 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 800228c:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8002290:	e007      	b.n	80022a2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	edd3 6a02 	vldr	s13, [r3, #8]
 8002298:	4b20      	ldr	r3, [pc, #128]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800229a:	ed93 7a00 	vldr	s14, [r3]
 800229e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022a2:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	edd3 6a03 	vldr	s13, [r3, #12]
 80022ac:	4b1b      	ldr	r3, [pc, #108]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80022ae:	ed93 7a00 	vldr	s14, [r3]
 80022b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022be:	d502      	bpl.n	80022c6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 80022c0:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8002320 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80022c4:	e019      	b.n	80022fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80022cc:	4b13      	ldr	r3, [pc, #76]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80022da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e2:	dd02      	ble.n	80022ea <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 80022e4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8002324 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80022e8:	e007      	b.n	80022fa <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80022f0:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80022f2:	ed93 7a00 	vldr	s14, [r3]
 80022f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022fa:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 80022fe:	ed97 1a05 	vldr	s2, [r7, #20]
 8002302:	edd7 0a06 	vldr	s1, [r7, #24]
 8002306:	ed97 0a07 	vldr	s0, [r7, #28]
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f7ff fd0e 	bl	8001d2c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 8002310:	bf00      	nop
 8002312:	3740      	adds	r7, #64	@ 0x40
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	200000a4 	.word	0x200000a4
 800231c:	200000a0 	.word	0x200000a0
 8002320:	00000000 	.word	0x00000000
 8002324:	3f70a3d7 	.word	0x3f70a3d7

08002328 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002332:	edd7 7a01 	vldr	s15, [r7, #4]
 8002336:	eef0 7ae7 	vabs.f32	s15, s15
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	4a10      	ldr	r2, [pc, #64]	@ (8002394 <_ZN9simpleFOCC1Ev+0x4c>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3308      	adds	r3, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fc28 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3370      	adds	r3, #112	@ 0x70
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe ff39 	bl	80011dc <_ZN12CurrentSenseC1Ev>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	33c0      	adds	r3, #192	@ 0xc0
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fcac 	bl	8001ccc <_ZN11pwm_driversC1Ev>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800237a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002384:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
{

}
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	0800aba8 	.word	0x0800aba8

08002398 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	4a0b      	ldr	r2, [pc, #44]	@ (80023d0 <_ZN9simpleFOCD1Ev+0x38>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	33c0      	adds	r3, #192	@ 0xc0
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7ff fc9e 	bl	8001cec <_ZN11pwm_driversD1Ev>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3370      	adds	r3, #112	@ 0x70
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe ff21 	bl	80011fc <_ZN12CurrentSenseD1Ev>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3308      	adds	r3, #8
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe fc44 	bl	8000c4c <_ZN17AS5048A_interfaceD1Ev>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	0800aba8 	.word	0x0800aba8

080023d4 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
}
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ffdb 	bl	8002398 <_ZN9simpleFOCD1Ev>
 80023e2:	f44f 7184 	mov.w	r1, #264	@ 0x108
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f007 f95c 	bl	80096a4 <_ZdlPvj>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
	...

080023f8 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	Encoder.MagneticSensorSPI_init();
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3308      	adds	r3, #8
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe fc41 	bl	8000c8c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3308      	adds	r3, #8
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fc78 	bl	8000d04 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3370      	adds	r3, #112	@ 0x70
 8002418:	eef1 0a04 	vmov.f32	s1, #20	@ 0x40a00000  5.0
 800241c:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002438 <_ZN9simpleFOC11initSensorsEv+0x40>
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe ff0b 	bl	800123c <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3370      	adds	r3, #112	@ 0x70
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ff30 	bl	8001290 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 8002430:	bf00      	nop
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	3c23d70a 	.word	0x3c23d70a

0800243c <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	return 0;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 800245c:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 8002462:	4b28      	ldr	r3, [pc, #160]	@ (8002504 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 800246e:	4a24      	ldr	r2, [pc, #144]	@ (8002500 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 8002470:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8002478:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 800247a:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 8002484:	e009      	b.n	800249a <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 8002486:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8002508 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 fae8 	bl	8002a60 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3308      	adds	r3, #8
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fd19 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffce 	bl	800243c <_ZN9simpleFOC11needsSearchEv>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00b      	beq.n	80024be <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024ac:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800250c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 80024b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b8:	d501      	bpl.n	80024be <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 80024be:	2300      	movs	r3, #0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1e0      	bne.n	8002486 <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	33c0      	adds	r3, #192	@ 0xc0
 80024c8:	ed9f 1a11 	vldr	s2, [pc, #68]	@ 8002510 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80024cc:	eddf 0a10 	vldr	s1, [pc, #64]	@ 8002510 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80024d0:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8002510 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fc65 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 80024da:	4a09      	ldr	r2, [pc, #36]	@ (8002500 <_ZN9simpleFOC18absoluteZeroSearchEv+0xac>)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 80024e0:	4a08      	ldr	r2, [pc, #32]	@ (8002504 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa8 	bl	800243c <_ZN9simpleFOC11needsSearchEv>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	bf0c      	ite	eq
 80024f2:	2301      	moveq	r3, #1
 80024f4:	2300      	movne	r3, #0
 80024f6:	b2db      	uxtb	r3, r3
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	200000ac 	.word	0x200000ac
 8002504:	200000a4 	.word	0x200000a4
 8002508:	4116cbe4 	.word	0x4116cbe4
 800250c:	40c90fdb 	.word	0x40c90fdb
	...

08002518 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8002518:	b580      	push	{r7, lr}
 800251a:	ed2d 8b02 	vpush	{d8}
 800251e:	b08a      	sub	sp, #40	@ 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 8002524:	2301      	movs	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8002810 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8002538:	eef4 7a47 	vcmp.f32	s15, s14
 800253c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002540:	f040 8109 	bne.w	8002756 <_ZN9simpleFOC11alignSensorEv+0x23e>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ff79 	bl	800243c <_ZN9simpleFOC11needsSearchEv>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f7ff ff7a 	bl	8002454 <_ZN9simpleFOC18absoluteZeroSearchEv>
 8002560:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	2b00      	cmp	r3, #0
 8002566:	d101      	bne.n	800256c <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	e144      	b.n	80027f6 <_ZN9simpleFOC11alignSensorEv+0x2de>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 800256c:	2300      	movs	r3, #0
 800256e:	623b      	str	r3, [r7, #32]
 8002570:	e037      	b.n	80025e2 <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	ee07 3a90 	vmov	s15, r3
 8002578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800257c:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8002814 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8002580:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002584:	ee17 0a90 	vmov	r0, s15
 8002588:	f7fd ffaa 	bl	80004e0 <__aeabi_f2d>
 800258c:	f04f 0200 	mov.w	r2, #0
 8002590:	4ba1      	ldr	r3, [pc, #644]	@ (8002818 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8002592:	f7fe f927 	bl	80007e4 <__aeabi_ddiv>
 8002596:	4602      	mov	r2, r0
 8002598:	460b      	mov	r3, r1
 800259a:	4610      	mov	r0, r2
 800259c:	4619      	mov	r1, r3
 800259e:	a39a      	add	r3, pc, #616	@ (adr r3, 8002808 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f7fd fe3e 	bl	8000224 <__adddf3>
 80025a8:	4602      	mov	r2, r0
 80025aa:	460b      	mov	r3, r1
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f7fe fa9e 	bl	8000af0 <__aeabi_d2f>
 80025b4:	4603      	mov	r3, r0
 80025b6:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 80025c4:	ed97 1a02 	vldr	s2, [r7, #8]
 80025c8:	eddf 0a94 	vldr	s1, [pc, #592]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80025cc:	eeb0 0a67 	vmov.f32	s0, s15
 80025d0:	4610      	mov	r0, r2
 80025d2:	f7ff fbe7 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80025d6:	2002      	movs	r0, #2
 80025d8:	f001 fb74 	bl	8003cc4 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 80025dc:	6a3b      	ldr	r3, [r7, #32]
 80025de:	3301      	adds	r3, #1
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80025e8:	ddc3      	ble.n	8002572 <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3308      	adds	r3, #8
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fd3a 	bl	8001068 <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3308      	adds	r3, #8
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7fe fc67 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80025fe:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8002602:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e037      	b.n	800267a <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	ee07 3a90 	vmov	s15, r3
 8002610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002614:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8002814 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8002618:	ee67 7a87 	vmul.f32	s15, s15, s14
 800261c:	ee17 0a90 	vmov	r0, s15
 8002620:	f7fd ff5e 	bl	80004e0 <__aeabi_f2d>
 8002624:	f04f 0200 	mov.w	r2, #0
 8002628:	4b7b      	ldr	r3, [pc, #492]	@ (8002818 <_ZN9simpleFOC11alignSensorEv+0x300>)
 800262a:	f7fe f8db 	bl	80007e4 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	a374      	add	r3, pc, #464	@ (adr r3, 8002808 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8002638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263c:	f7fd fdf2 	bl	8000224 <__adddf3>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f7fe fa52 	bl	8000af0 <__aeabi_d2f>
 800264c:	4603      	mov	r3, r0
 800264e:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 800265c:	ed97 1a03 	vldr	s2, [r7, #12]
 8002660:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 8002664:	eeb0 0a67 	vmov.f32	s0, s15
 8002668:	4610      	mov	r0, r2
 800266a:	f7ff fb9b 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 800266e:	2002      	movs	r0, #2
 8002670:	f001 fb28 	bl	8003cc4 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3b01      	subs	r3, #1
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	2b00      	cmp	r3, #0
 800267e:	dac4      	bge.n	800260a <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3308      	adds	r3, #8
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fcef 	bl	8001068 <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3308      	adds	r3, #8
 800268e:	4618      	mov	r0, r3
 8002690:	f7fe fc1c 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002694:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	33c0      	adds	r3, #192	@ 0xc0
 800269c:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80026a0:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80026a4:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fb7b 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 80026ae:	20c8      	movs	r0, #200	@ 0xc8
 80026b0:	f001 fb08 	bl	8003cc4 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 80026b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80026b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80026bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	d101      	bne.n	80026ca <_ZN9simpleFOC11alignSensorEv+0x1b2>
		{
			return 0; // failed calibration
 80026c6:	2300      	movs	r3, #0
 80026c8:	e095      	b.n	80027f6 <_ZN9simpleFOC11alignSensorEv+0x2de>
		} else if (mid_angle < end_angle) 
 80026ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80026ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80026d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026da:	d504      	bpl.n	80026e6 <_ZN9simpleFOC11alignSensorEv+0x1ce>
		{
			Encoder.sensor_direction = CCW;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f04f 32ff 	mov.w	r2, #4294967295
 80026e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80026e4:	e002      	b.n	80026ec <_ZN9simpleFOC11alignSensorEv+0x1d4>
		} else {
			Encoder.sensor_direction = CW;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2201      	movs	r2, #1
 80026ea:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 80026ec:	ed97 7a06 	vldr	s14, [r7, #24]
 80026f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80026f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f8:	eeb0 0a67 	vmov.f32	s0, s15
 80026fc:	f7ff fe14 	bl	8002328 <_ZSt4fabsf>
 8002700:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8002704:	4b46      	ldr	r3, [pc, #280]	@ (8002820 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002710:	edd7 7a04 	vldr	s15, [r7, #16]
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8002814 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 800271c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002720:	eeb0 0a67 	vmov.f32	s0, s15
 8002724:	f7ff fe00 	bl	8002328 <_ZSt4fabsf>
 8002728:	eef0 7a40 	vmov.f32	s15, s0
 800272c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002730:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002738:	bfcc      	ite	gt
 800273a:	2301      	movgt	r3, #1
 800273c:	2300      	movle	r3, #0
 800273e:	b2db      	uxtb	r3, r3
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <_ZN9simpleFOC11alignSensorEv+0x23e>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8002744:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8002814 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8002748:	ed97 7a04 	vldr	s14, [r7, #16]
 800274c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800275c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002810 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8002760:	eef4 7a47 	vcmp.f32	s15, s14
 8002764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002768:	d144      	bne.n	80027f4 <_ZN9simpleFOC11alignSensorEv+0x2dc>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	edd3 7a40 	vldr	s15, [r3, #256]	@ 0x100
 8002776:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8002824 <_ZN9simpleFOC11alignSensorEv+0x30c>
 800277a:	eddf 0a28 	vldr	s1, [pc, #160]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	4610      	mov	r0, r2
 8002784:	f7ff fb0e 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 8002788:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800278c:	f001 fa9a 	bl	8003cc4 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002794:	ee07 3a90 	vmov	s15, r3
 8002798:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3308      	adds	r3, #8
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe fb93 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80027a6:	eef0 7a40 	vmov.f32	s15, s0
 80027aa:	ee68 7a27 	vmul.f32	s15, s16, s15
 80027ae:	4b1c      	ldr	r3, [pc, #112]	@ (8002820 <_ZN9simpleFOC11alignSensorEv+0x308>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	f7fe ffbc 	bl	8001734 <_Z16_electricalAnglefi>
 80027bc:	eef0 7a40 	vmov.f32	s15, s0
 80027c0:	eeb0 0a67 	vmov.f32	s0, s15
 80027c4:	f7fe ff92 	bl	80016ec <_Z15_normalizeAnglef>
 80027c8:	eef0 7a40 	vmov.f32	s15, s0
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
		HAL_Delay(20);
 80027d2:	2014      	movs	r0, #20
 80027d4:	f001 fa76 	bl	8003cc4 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	33c0      	adds	r3, #192	@ 0xc0
 80027dc:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80027e0:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80027e4:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800281c <_ZN9simpleFOC11alignSensorEv+0x304>
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff fadb 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 80027ee:	20c8      	movs	r0, #200	@ 0xc8
 80027f0:	f001 fa68 	bl	8003cc4 <HAL_Delay>
	}
	return exit_flag;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3728      	adds	r7, #40	@ 0x28
 80027fa:	46bd      	mov	sp, r7
 80027fc:	ecbd 8b02 	vpop	{d8}
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	80000000 	.word	0x80000000
 800280c:	4012d97c 	.word	0x4012d97c
 8002810:	c640e400 	.word	0xc640e400
 8002814:	40c90fdb 	.word	0x40c90fdb
 8002818:	407f4000 	.word	0x407f4000
 800281c:	00000000 	.word	0x00000000
 8002820:	2000009c 	.word	0x2000009c
 8002824:	4096cbe4 	.word	0x4096cbe4

08002828 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	ed87 0a02 	vstr	s0, [r7, #8]
 8002834:	460b      	mov	r3, r1
 8002836:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8002838:	2301      	movs	r3, #1
 800283a:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 800283c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002840:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002894 <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8002844:	eef4 7a47 	vcmp.f32	s15, s14
 8002848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284c:	d006      	beq.n	800285c <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	649a      	str	r2, [r3, #72]	@ 0x48
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8002854:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff fe5b 	bl	8002518 <_ZN9simpleFOC11alignSensorEv>
 8002862:	4602      	mov	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	3308      	adds	r3, #8
 8002870:	4618      	mov	r0, r3
 8002872:	f7fe fb2b 	bl	8000ecc <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8002876:	eef0 7a40 	vmov.f32	s15, s0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8002880:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002884:	f001 fa1e 	bl	8003cc4 <HAL_Delay>

	return exit_flag;
 8002888:	697b      	ldr	r3, [r7, #20]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	c640e400 	.word	0xc640e400

08002898 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8002898:	b590      	push	{r4, r7, lr}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3308      	adds	r3, #8
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7fe fbdf 	bl	8001068 <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3308      	adds	r3, #8
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fc20 	bl	80010f4 <_ZN17AS5048A_interface13getShaftAngleEv>
 80028b4:	eef0 7a40 	vmov.f32	s15, s0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3308      	adds	r3, #8
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7fe fb2d 	bl	8000f22 <_ZN17AS5048A_interface15electricalAngleEv>
 80028c8:	eef0 7a40 	vmov.f32	s15, s0
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	edc3 7a35 	vstr	s15, [r3, #212]	@ 0xd4


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 80028de:	687c      	ldr	r4, [r7, #4]
 80028e0:	eeb0 0a67 	vmov.f32	s0, s15
 80028e4:	4610      	mov	r0, r2
 80028e6:	f7fe fdd3 	bl	8001490 <_ZN12CurrentSense14getFOCCurrentsEf>
 80028ea:	eeb0 7a40 	vmov.f32	s14, s0
 80028ee:	eef0 7a60 	vmov.f32	s15, s1
 80028f2:	ed84 7a3c 	vstr	s14, [r4, #240]	@ 0xf0
 80028f6:	edc4 7a3d 	vstr	s15, [r4, #244]	@ 0xf4

	current.q = LPF_current_q(current.q);   // filter values
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8002900:	eeb0 0a67 	vmov.f32	s0, s15
 8002904:	4828      	ldr	r0, [pc, #160]	@ (80029a8 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8002906:	f7fe ff5f 	bl	80017c8 <_ZN13LowPassFilterclEf>
 800290a:	eef0 7a40 	vmov.f32	s15, s0
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
	current.d = LPF_current_d(current.d);   // filter values
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 800291a:	eeb0 0a67 	vmov.f32	s0, s15
 800291e:	4823      	ldr	r0, [pc, #140]	@ (80029ac <_ZN9simpleFOC7loopFOCEv+0x114>)
 8002920:	f7fe ff52 	bl	80017c8 <_ZN13LowPassFilterclEf>
 8002924:	eef0 7a40 	vmov.f32	s15, s0
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current.q);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 800293a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293e:	eeb0 0a67 	vmov.f32	s0, s15
 8002942:	481b      	ldr	r0, [pc, #108]	@ (80029b0 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8002944:	f7ff f872 	bl	8001a2c <_ZN13PIDControllerclEf>
 8002948:	eef0 7a40 	vmov.f32	s15, s0
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
	voltage.d = PID_current_d(0 - current.d);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	edd3 7a3c 	vldr	s15, [r3, #240]	@ 0xf0
 8002958:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80029b4 <_ZN9simpleFOC7loopFOCEv+0x11c>
 800295c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	4814      	ldr	r0, [pc, #80]	@ (80029b8 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8002966:	f7ff f861 	bl	8001a2c <_ZN13PIDControllerclEf>
 800296a:	eef0 7a40 	vmov.f32	s15, s0
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	edc3 7a3a 	vstr	s15, [r3, #232]	@ 0xe8

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	edd3 7a3b 	vldr	s15, [r3, #236]	@ 0xec
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	ed93 7a3a 	vldr	s14, [r3, #232]	@ 0xe8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	edd3 6a35 	vldr	s13, [r3, #212]	@ 0xd4
 800298c:	eeb0 1a66 	vmov.f32	s2, s13
 8002990:	eef0 0a47 	vmov.f32	s1, s14
 8002994:	eeb0 0a67 	vmov.f32	s0, s15
 8002998:	4610      	mov	r0, r2
 800299a:	f7ff fa03 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd90      	pop	{r4, r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200001cc 	.word	0x200001cc
 80029ac:	200001d8 	.word	0x200001d8
 80029b0:	20000160 	.word	0x20000160
 80029b4:	00000000 	.word	0x00000000
 80029b8:	2000013c 	.word	0x2000013c

080029bc <_ZN9simpleFOC13move_velocityEf>:
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void simpleFOC::move_velocity(float new_target)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	ed87 0a00 	vstr	s0, [r7]
// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3308      	adds	r3, #8
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fe fbba 	bl	8001146 <_ZN17AS5048A_interface16getShaftVelocityEv>
 80029d2:	eef0 7a40 	vmov.f32	s15, s0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	edc3 7a36 	vstr	s15, [r3, #216]	@ 0xd8

	if (_isset(new_target))
 80029dc:	edd7 7a00 	vldr	s15, [r7]
 80029e0:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002a50 <_ZN9simpleFOC13move_velocityEf+0x94>
 80029e4:	eef4 7a47 	vcmp.f32	s15, s14
 80029e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ec:	d003      	beq.n	80029f6 <_ZN9simpleFOC13move_velocityEf+0x3a>
		target = new_target;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

	// velocity set point
	shaft_velocity_sp = target;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

	// calculate the torque command
	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	ed93 7a38 	vldr	s14, [r3, #224]	@ 0xe0
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8002a0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a12:	eeb0 0a67 	vmov.f32	s0, s15
 8002a16:	480f      	ldr	r0, [pc, #60]	@ (8002a54 <_ZN9simpleFOC13move_velocityEf+0x98>)
 8002a18:	f7ff f808 	bl	8001a2c <_ZN13PIDControllerclEf>
 8002a1c:	eef0 7a40 	vmov.f32	s15, s0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	edc3 7a37 	vstr	s15, [r3, #220]	@ 0xdc

	voltage.q = current_sp*phase_resistance;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	ed93 7a37 	vldr	s14, [r3, #220]	@ 0xdc
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <_ZN9simpleFOC13move_velocityEf+0x9c>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
	voltage.d = 0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
}
 8002a46:	bf00      	nop
 8002a48:	3708      	adds	r7, #8
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	c640e400 	.word	0xc640e400
 8002a54:	20000184 	.word	0x20000184
 8002a58:	20000098 	.word	0x20000098
 8002a5c:	00000000 	.word	0x00000000

08002a60 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	ed2d 8b02 	vpush	{d8}
 8002a66:	b087      	sub	sp, #28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8002a70:	f000 f8e6 	bl	8002c40 <_ZN9simpleFOC6microsEv>
 8002a74:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	1a9b      	subs	r3, r3, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fd fd0a 	bl	800049c <__aeabi_ui2d>
 8002a88:	a36b      	add	r3, pc, #428	@ (adr r3, 8002c38 <_ZN9simpleFOC13angleOpenloopEf+0x1d8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fd7f 	bl	8000590 <__aeabi_dmul>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f829 	bl	8000af0 <__aeabi_d2f>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8002aa2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aae:	d908      	bls.n	8002ac2 <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8002ab0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002ab8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ac0:	dd01      	ble.n	8002ac6 <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8002ac2:	4b55      	ldr	r3, [pc, #340]	@ (8002c18 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>)
 8002ac4:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002acc:	ed97 7a00 	vldr	s14, [r7]
 8002ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ad8:	f7fe f85a 	bl	8000b90 <_ZSt3absf>
 8002adc:	eeb0 8a40 	vmov.f32	s16, s0
 8002ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8002c1c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8002ae2:	ed93 7a00 	vldr	s14, [r3]
 8002ae6:	edd7 7a05 	vldr	s15, [r7, #20]
 8002aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aee:	eeb0 0a67 	vmov.f32	s0, s15
 8002af2:	f7fe f84d 	bl	8000b90 <_ZSt3absf>
 8002af6:	eef0 7a40 	vmov.f32	s15, s0
 8002afa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b02:	bfcc      	ite	gt
 8002b04:	2301      	movgt	r3, #1
 8002b06:	2300      	movle	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d03c      	beq.n	8002b88 <_ZN9simpleFOC13angleOpenloopEf+0x128>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b14:	ed97 7a00 	vldr	s14, [r7]
 8002b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b24:	d502      	bpl.n	8002b2c <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8002b26:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8002b2a:	e010      	b.n	8002b4e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b32:	ed97 7a00 	vldr	s14, [r7]
 8002b36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b42:	dd02      	ble.n	8002b4a <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8002b44:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8002b48:	e001      	b.n	8002b4e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8002b4a:	ed9f 8a35 	vldr	s16, [pc, #212]	@ 8002c20 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8002b4e:	4b33      	ldr	r3, [pc, #204]	@ (8002c1c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8002b50:	edd3 7a00 	vldr	s15, [r3]
 8002b54:	eeb0 0a67 	vmov.f32	s0, s15
 8002b58:	f7fe f81a 	bl	8000b90 <_ZSt3absf>
 8002b5c:	eef0 7a40 	vmov.f32	s15, s0
 8002b60:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002b64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002b68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8002b7c:	4b27      	ldr	r3, [pc, #156]	@ (8002c1c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
 8002b86:	e007      	b.n	8002b98 <_ZN9simpleFOC13angleOpenloopEf+0x138>
	}
	else
	{
		shaft_angle = target_angle;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f04f 0200 	mov.w	r2, #0
 8002b94:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8002b98:	4b22      	ldr	r3, [pc, #136]	@ (8002c24 <_ZN9simpleFOC13angleOpenloopEf+0x1c4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8002b9e:	4b22      	ldr	r3, [pc, #136]	@ (8002c28 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8002c2c <_ZN9simpleFOC13angleOpenloopEf+0x1cc>
 8002ba8:	eef4 7a47 	vcmp.f32	s15, s14
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	d009      	beq.n	8002bc6 <_ZN9simpleFOC13angleOpenloopEf+0x166>
		Uq =  current_limit*phase_resistance;
 8002bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002c30 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8002bb4:	ed93 7a00 	vldr	s14, [r3]
 8002bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c28 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bc2:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	@ (8002c34 <_ZN9simpleFOC13angleOpenloopEf+0x1d4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	eeb0 0a67 	vmov.f32	s0, s15
 8002bdc:	f7fe fdaa 	bl	8001734 <_Z16_electricalAnglefi>
 8002be0:	eef0 7a40 	vmov.f32	s15, s0
 8002be4:	eeb0 1a67 	vmov.f32	s2, s15
 8002be8:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8002c20 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8002bec:	ed97 0a04 	vldr	s0, [r7, #16]
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff f8d7 	bl	8001da4 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
	return Uq;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	ee07 3a90 	vmov	s15, r3
}
 8002c04:	eeb0 0a67 	vmov.f32	s0, s15
 8002c08:	371c      	adds	r7, #28
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	ecbd 8b02 	vpop	{d8}
 8002c10:	bd90      	pop	{r4, r7, pc}
 8002c12:	bf00      	nop
 8002c14:	f3af 8000 	nop.w
 8002c18:	3a83126f 	.word	0x3a83126f
 8002c1c:	200000ac 	.word	0x200000ac
 8002c20:	00000000 	.word	0x00000000
 8002c24:	200000a4 	.word	0x200000a4
 8002c28:	20000098 	.word	0x20000098
 8002c2c:	c640e400 	.word	0xc640e400
 8002c30:	200000a8 	.word	0x200000a8
 8002c34:	2000009c 	.word	0x2000009c
 8002c38:	a0b5ed8d 	.word	0xa0b5ed8d
 8002c3c:	3eb0c6f7 	.word	0x3eb0c6f7

08002c40 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002c44:	4b07      	ldr	r3, [pc, #28]	@ (8002c64 <_ZN9simpleFOC6microsEv+0x24>)
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	4b07      	ldr	r3, [pc, #28]	@ (8002c68 <_ZN9simpleFOC6microsEv+0x28>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4907      	ldr	r1, [pc, #28]	@ (8002c6c <_ZN9simpleFOC6microsEv+0x2c>)
 8002c4e:	fba1 1303 	umull	r1, r3, r1, r3
 8002c52:	0c9b      	lsrs	r3, r3, #18
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e0001000 	.word	0xe0001000
 8002c68:	200000b4 	.word	0x200000b4
 8002c6c:	431bde83 	.word	0x431bde83

08002c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c74:	f000 ffb5 	bl	8003be2 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c78:	f000 f87c 	bl	8002d74 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c7c:	f000 fbce 	bl	800341c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8002c80:	f000 fb9a 	bl	80033b8 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 8002c84:	f000 fa66 	bl	8003154 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8002c88:	f000 f8ca 	bl	8002e20 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8002c8c:	f000 f9fe 	bl	800308c <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8002c90:	f000 faa2 	bl	80031d8 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 8002c94:	f000 f94a 	bl	8002f2c <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8002c98:	f000 f9b8 	bl	800300c <_ZL14MX_CORDIC_Initv>
  MX_CRC_Init();
 8002c9c:	f000 f9ce 	bl	800303c <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8002ca0:	f000 fa40 	bl	8003124 <_ZL12MX_FMAC_Initv>
  /* USER CODE BEGIN 2 */

  	  //  Delay SETUP
	DWT_Init();
 8002ca4:	f000 fc1a 	bl	80034dc <_ZL8DWT_Initv>





	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 8002ca8:	2201      	movs	r2, #1
 8002caa:	2101      	movs	r1, #1
 8002cac:	4828      	ldr	r0, [pc, #160]	@ (8002d50 <main+0xe0>)
 8002cae:	f003 fd6d 	bl	800678c <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable


	//PWM SETUP
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4827      	ldr	r0, [pc, #156]	@ (8002d54 <main+0xe4>)
 8002cb6:	f005 fa51 	bl	800815c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8002cba:	2104      	movs	r1, #4
 8002cbc:	4825      	ldr	r0, [pc, #148]	@ (8002d54 <main+0xe4>)
 8002cbe:	f005 fa4d 	bl	800815c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8002cc2:	2108      	movs	r1, #8
 8002cc4:	4823      	ldr	r0, [pc, #140]	@ (8002d54 <main+0xe4>)
 8002cc6:	f005 fa49 	bl	800815c <HAL_TIM_PWM_Start>
	//SPI SETUP
	simpleFOC.initSensors();
 8002cca:	4823      	ldr	r0, [pc, #140]	@ (8002d58 <main+0xe8>)
 8002ccc:	f7ff fb94 	bl	80023f8 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
  	simpleFOC.initFOC(0.564893246, CW); 				// Do not search!! checked
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8002d5c <main+0xec>
 8002cd6:	4820      	ldr	r0, [pc, #128]	@ (8002d58 <main+0xe8>)
 8002cd8:	f7ff fda6 	bl	8002828 <_ZN9simpleFOC7initFOCEf9Direction>
//	  simpleFOC.angleOpenloop(0.0f);		  // Test move angle open loop [/] : Should set phase resistance


	  /** Test Closed Loop Control **/
//	  simpleFOC.move_torque(setpoint_cmd);
	  simpleFOC.move_velocity(setpoint_cmd);
 8002cdc:	4b20      	ldr	r3, [pc, #128]	@ (8002d60 <main+0xf0>)
 8002cde:	edd3 7a00 	vldr	s15, [r3]
 8002ce2:	eeb0 0a67 	vmov.f32	s0, s15
 8002ce6:	481c      	ldr	r0, [pc, #112]	@ (8002d58 <main+0xe8>)
 8002ce8:	f7ff fe68 	bl	80029bc <_ZN9simpleFOC13move_velocityEf>
//	  simpleFOC.move_angle(setpoint_cmd);

	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();
 8002cec:	481a      	ldr	r0, [pc, #104]	@ (8002d58 <main+0xe8>)
 8002cee:	f7ff fdd3 	bl	8002898 <_ZN9simpleFOC7loopFOCEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8002cf2:	f000 fc0b 	bl	800350c <_ZL6microsv>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d64 <main+0xf4>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d68 <main+0xf8>)
 8002d00:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8002d02:	f000 fc03 	bl	800350c <_ZL6microsv>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a16      	ldr	r2, [pc, #88]	@ (8002d64 <main+0xf4>)
 8002d0a:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 8002d0c:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <main+0xf8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fbc3 	bl	800049c <__aeabi_ui2d>
 8002d16:	a30c      	add	r3, pc, #48	@ (adr r3, 8002d48 <main+0xd8>)
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	f7fd fc38 	bl	8000590 <__aeabi_dmul>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	f04f 0000 	mov.w	r0, #0
 8002d28:	4910      	ldr	r1, [pc, #64]	@ (8002d6c <main+0xfc>)
 8002d2a:	f7fd fd5b 	bl	80007e4 <__aeabi_ddiv>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f7fd fedb 	bl	8000af0 <__aeabi_d2f>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <main+0x100>)
 8002d3e:	6013      	str	r3, [r2, #0]
	  simpleFOC.move_velocity(setpoint_cmd);
 8002d40:	bf00      	nop
 8002d42:	e7cb      	b.n	8002cdc <main+0x6c>
 8002d44:	f3af 8000 	nop.w
 8002d48:	a0b5ed8d 	.word	0xa0b5ed8d
 8002d4c:	3eb0c6f7 	.word	0x3eb0c6f7
 8002d50:	48000400 	.word	0x48000400
 8002d54:	200005d4 	.word	0x200005d4
 8002d58:	200001e8 	.word	0x200001e8
 8002d5c:	3f109cd8 	.word	0x3f109cd8
 8002d60:	200000b0 	.word	0x200000b0
 8002d64:	20000620 	.word	0x20000620
 8002d68:	20000624 	.word	0x20000624
 8002d6c:	3ff00000 	.word	0x3ff00000
 8002d70:	20000628 	.word	0x20000628

08002d74 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b094      	sub	sp, #80	@ 0x50
 8002d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d7a:	f107 0318 	add.w	r3, r7, #24
 8002d7e:	2238      	movs	r2, #56	@ 0x38
 8002d80:	2100      	movs	r1, #0
 8002d82:	4618      	mov	r0, r3
 8002d84:	f007 fe6a 	bl	800aa5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d88:	1d3b      	adds	r3, r7, #4
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	609a      	str	r2, [r3, #8]
 8002d92:	60da      	str	r2, [r3, #12]
 8002d94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f003 fd10 	bl	80067bc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002da4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002da6:	2340      	movs	r3, #64	@ 0x40
 8002da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002daa:	2302      	movs	r3, #2
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002dae:	2302      	movs	r3, #2
 8002db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002db2:	2304      	movs	r3, #4
 8002db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002db6:	2355      	movs	r3, #85	@ 0x55
 8002db8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002dba:	2302      	movs	r3, #2
 8002dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dc6:	f107 0318 	add.w	r3, r7, #24
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f003 fdaa 	bl	8006924 <HAL_RCC_OscConfig>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	bf14      	ite	ne
 8002dd6:	2301      	movne	r3, #1
 8002dd8:	2300      	moveq	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002de0:	f000 fbac 	bl	800353c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002de4:	230f      	movs	r3, #15
 8002de6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002de8:	2303      	movs	r3, #3
 8002dea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dec:	2300      	movs	r3, #0
 8002dee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002df4:	2300      	movs	r3, #0
 8002df6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002df8:	1d3b      	adds	r3, r7, #4
 8002dfa:	2104      	movs	r1, #4
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f004 f8a3 	bl	8006f48 <HAL_RCC_ClockConfig>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf14      	ite	ne
 8002e08:	2301      	movne	r3, #1
 8002e0a:	2300      	moveq	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002e12:	f000 fb93 	bl	800353c <Error_Handler>
  }
}
 8002e16:	bf00      	nop
 8002e18:	3750      	adds	r7, #80	@ 0x50
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
	...

08002e20 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08c      	sub	sp, #48	@ 0x30
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002e26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	2220      	movs	r2, #32
 8002e36:	2100      	movs	r1, #0
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f007 fe0f 	bl	800aa5c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e3e:	4b39      	ldr	r3, [pc, #228]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e40:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002e44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002e46:	4b37      	ldr	r3, [pc, #220]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e48:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002e4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e4e:	4b35      	ldr	r3, [pc, #212]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e54:	4b33      	ldr	r3, [pc, #204]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e56:	2200      	movs	r2, #0
 8002e58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002e5a:	4b32      	ldr	r3, [pc, #200]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e60:	4b30      	ldr	r3, [pc, #192]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e66:	4b2f      	ldr	r3, [pc, #188]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e68:	2204      	movs	r2, #4
 8002e6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002e72:	4b2c      	ldr	r3, [pc, #176]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8002e78:	4b2a      	ldr	r3, [pc, #168]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e7e:	4b29      	ldr	r3, [pc, #164]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e86:	4b27      	ldr	r3, [pc, #156]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002e8c:	4b25      	ldr	r3, [pc, #148]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002e92:	4b24      	ldr	r3, [pc, #144]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002e9a:	4b22      	ldr	r3, [pc, #136]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8002ea0:	4b20      	ldr	r3, [pc, #128]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ea8:	481e      	ldr	r0, [pc, #120]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002eaa:	f001 f94b 	bl	8004144 <HAL_ADC_Init>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	bf14      	ite	ne
 8002eb4:	2301      	movne	r3, #1
 8002eb6:	2300      	moveq	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8002ebe:	f000 fb3d 	bl	800353c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4815      	ldr	r0, [pc, #84]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002ece:	f002 f94b 	bl	8005168 <HAL_ADCEx_MultiModeConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bf14      	ite	ne
 8002ed8:	2301      	movne	r3, #1
 8002eda:	2300      	moveq	r3, #0
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8002ee2:	f000 fb2b 	bl	800353c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002ee6:	4b10      	ldr	r3, [pc, #64]	@ (8002f28 <_ZL12MX_ADC1_Initv+0x108>)
 8002ee8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002eea:	2306      	movs	r3, #6
 8002eec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002eee:	2307      	movs	r3, #7
 8002ef0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ef2:	237f      	movs	r3, #127	@ 0x7f
 8002ef4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ef6:	2304      	movs	r3, #4
 8002ef8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002efa:	2300      	movs	r3, #0
 8002efc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4619      	mov	r1, r3
 8002f02:	4808      	ldr	r0, [pc, #32]	@ (8002f24 <_ZL12MX_ADC1_Initv+0x104>)
 8002f04:	f001 fbb4 	bl	8004670 <HAL_ADC_ConfigChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	bf14      	ite	ne
 8002f0e:	2301      	movne	r3, #1
 8002f10:	2300      	moveq	r3, #0
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8002f18:	f000 fb10 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002f1c:	bf00      	nop
 8002f1e:	3730      	adds	r7, #48	@ 0x30
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	200002f0 	.word	0x200002f0
 8002f28:	04300002 	.word	0x04300002

08002f2c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002f32:	463b      	mov	r3, r7
 8002f34:	2220      	movs	r2, #32
 8002f36:	2100      	movs	r1, #0
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f007 fd8f 	bl	800aa5c <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8002f3e:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f40:	4a30      	ldr	r2, [pc, #192]	@ (8003004 <_ZL12MX_ADC2_Initv+0xd8>)
 8002f42:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002f44:	4b2e      	ldr	r3, [pc, #184]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002f4a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002f52:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8002f58:	4b29      	ldr	r3, [pc, #164]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002f5e:	4b28      	ldr	r3, [pc, #160]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002f64:	4b26      	ldr	r3, [pc, #152]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f66:	2204      	movs	r2, #4
 8002f68:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002f6a:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002f70:	4b23      	ldr	r3, [pc, #140]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f72:	2201      	movs	r2, #1
 8002f74:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8002f76:	4b22      	ldr	r3, [pc, #136]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002f84:	4b1e      	ldr	r3, [pc, #120]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8002f90:	4b1b      	ldr	r3, [pc, #108]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002f98:	4b19      	ldr	r3, [pc, #100]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002f9e:	4b18      	ldr	r3, [pc, #96]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002fa6:	4816      	ldr	r0, [pc, #88]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002fa8:	f001 f8cc 	bl	8004144 <HAL_ADC_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8002fbc:	f000 fabe 	bl	800353c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002fc0:	4b11      	ldr	r3, [pc, #68]	@ (8003008 <_ZL12MX_ADC2_Initv+0xdc>)
 8002fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002fc4:	2306      	movs	r3, #6
 8002fc6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8002fc8:	2307      	movs	r3, #7
 8002fca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002fcc:	237f      	movs	r3, #127	@ 0x7f
 8002fce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002fd0:	2304      	movs	r3, #4
 8002fd2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002fd8:	463b      	mov	r3, r7
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4808      	ldr	r0, [pc, #32]	@ (8003000 <_ZL12MX_ADC2_Initv+0xd4>)
 8002fde:	f001 fb47 	bl	8004670 <HAL_ADC_ConfigChannel>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	bf14      	ite	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	2300      	moveq	r3, #0
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8002ff2:	f000 faa3 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8002ff6:	bf00      	nop
 8002ff8:	3720      	adds	r7, #32
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	2000035c 	.word	0x2000035c
 8003004:	50000100 	.word	0x50000100
 8003008:	08600004 	.word	0x08600004

0800300c <_ZL14MX_CORDIC_Initv>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8003010:	4b08      	ldr	r3, [pc, #32]	@ (8003034 <_ZL14MX_CORDIC_Initv+0x28>)
 8003012:	4a09      	ldr	r2, [pc, #36]	@ (8003038 <_ZL14MX_CORDIC_Initv+0x2c>)
 8003014:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8003016:	4807      	ldr	r0, [pc, #28]	@ (8003034 <_ZL14MX_CORDIC_Initv+0x28>)
 8003018:	f002 f98e 	bl	8005338 <HAL_CORDIC_Init>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	bf14      	ite	ne
 8003022:	2301      	movne	r3, #1
 8003024:	2300      	moveq	r3, #0
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d001      	beq.n	8003030 <_ZL14MX_CORDIC_Initv+0x24>
  {
    Error_Handler();
 800302c:	f000 fa86 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8003030:	bf00      	nop
 8003032:	bd80      	pop	{r7, pc}
 8003034:	20000488 	.word	0x20000488
 8003038:	40020c00 	.word	0x40020c00

0800303c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003040:	4b10      	ldr	r3, [pc, #64]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 8003042:	4a11      	ldr	r2, [pc, #68]	@ (8003088 <_ZL11MX_CRC_Initv+0x4c>)
 8003044:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003046:	4b0f      	ldr	r3, [pc, #60]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 8003048:	2200      	movs	r2, #0
 800304a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800304c:	4b0d      	ldr	r3, [pc, #52]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 800304e:	2200      	movs	r2, #0
 8003050:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003052:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 8003054:	2200      	movs	r2, #0
 8003056:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003058:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 800305a:	2200      	movs	r2, #0
 800305c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800305e:	4b09      	ldr	r3, [pc, #36]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 8003060:	2201      	movs	r2, #1
 8003062:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003064:	4807      	ldr	r0, [pc, #28]	@ (8003084 <_ZL11MX_CRC_Initv+0x48>)
 8003066:	f002 faa9 	bl	80055bc <HAL_CRC_Init>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	bf14      	ite	ne
 8003070:	2301      	movne	r3, #1
 8003072:	2300      	moveq	r3, #0
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800307a:	f000 fa5f 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800307e:	bf00      	nop
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200004b0 	.word	0x200004b0
 8003088:	40023000 	.word	0x40023000

0800308c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003090:	4b22      	ldr	r3, [pc, #136]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 8003092:	4a23      	ldr	r2, [pc, #140]	@ (8003120 <_ZL14MX_FDCAN1_Initv+0x94>)
 8003094:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8003096:	4b21      	ldr	r3, [pc, #132]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 8003098:	2200      	movs	r2, #0
 800309a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800309c:	4b1f      	ldr	r3, [pc, #124]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 800309e:	2200      	movs	r2, #0
 80030a0:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80030a2:	4b1e      	ldr	r3, [pc, #120]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80030a8:	4b1c      	ldr	r3, [pc, #112]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80030ae:	4b1b      	ldr	r3, [pc, #108]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80030b4:	4b19      	ldr	r3, [pc, #100]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80030ba:	4b18      	ldr	r3, [pc, #96]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030bc:	2202      	movs	r2, #2
 80030be:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80030c0:	4b16      	ldr	r3, [pc, #88]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030c2:	220b      	movs	r2, #11
 80030c4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80030c6:	4b15      	ldr	r3, [pc, #84]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030c8:	2249      	movs	r2, #73	@ 0x49
 80030ca:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80030cc:	4b13      	ldr	r3, [pc, #76]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030ce:	220b      	movs	r2, #11
 80030d0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 80030d2:	4b12      	ldr	r3, [pc, #72]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030d4:	2205      	movs	r2, #5
 80030d6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80030d8:	4b10      	ldr	r3, [pc, #64]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030da:	220f      	movs	r2, #15
 80030dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 80030de:	4b0f      	ldr	r3, [pc, #60]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030e0:	2212      	movs	r2, #18
 80030e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80030e4:	4b0d      	ldr	r3, [pc, #52]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030e6:	220f      	movs	r2, #15
 80030e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80030ea:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030ec:	220a      	movs	r2, #10
 80030ee:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80030f0:	4b0a      	ldr	r3, [pc, #40]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80030f6:	4b09      	ldr	r3, [pc, #36]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80030fc:	4807      	ldr	r0, [pc, #28]	@ (800311c <_ZL14MX_FDCAN1_Initv+0x90>)
 80030fe:	f002 fdc1 	bl	8005c84 <HAL_FDCAN_Init>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	bf14      	ite	ne
 8003108:	2301      	movne	r3, #1
 800310a:	2300      	moveq	r3, #0
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d001      	beq.n	8003116 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8003112:	f000 fa13 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003116:	bf00      	nop
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200004d4 	.word	0x200004d4
 8003120:	40006400 	.word	0x40006400

08003124 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8003128:	4b08      	ldr	r3, [pc, #32]	@ (800314c <_ZL12MX_FMAC_Initv+0x28>)
 800312a:	4a09      	ldr	r2, [pc, #36]	@ (8003150 <_ZL12MX_FMAC_Initv+0x2c>)
 800312c:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 800312e:	4807      	ldr	r0, [pc, #28]	@ (800314c <_ZL12MX_FMAC_Initv+0x28>)
 8003130:	f003 f8fe 	bl	8006330 <HAL_FMAC_Init>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8003144:	f000 f9fa 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8003148:	bf00      	nop
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20000538 	.word	0x20000538
 8003150:	40021400 	.word	0x40021400

08003154 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003158:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 800315a:	4a1e      	ldr	r2, [pc, #120]	@ (80031d4 <_ZL12MX_SPI1_Initv+0x80>)
 800315c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800315e:	4b1c      	ldr	r3, [pc, #112]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003160:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003164:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003168:	2200      	movs	r2, #0
 800316a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 800316e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8003172:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003174:	4b16      	ldr	r3, [pc, #88]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800317a:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 800317c:	2201      	movs	r2, #1
 800317e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003180:	4b13      	ldr	r3, [pc, #76]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003182:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003186:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 800318a:	2218      	movs	r2, #24
 800318c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800318e:	4b10      	ldr	r3, [pc, #64]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003190:	2200      	movs	r2, #0
 8003192:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003194:	4b0e      	ldr	r3, [pc, #56]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 8003196:	2200      	movs	r2, #0
 8003198:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800319a:	4b0d      	ldr	r3, [pc, #52]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 800319c:	2200      	movs	r2, #0
 800319e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031a0:	4b0b      	ldr	r3, [pc, #44]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 80031a2:	2207      	movs	r2, #7
 80031a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031a6:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80031ac:	4b08      	ldr	r3, [pc, #32]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031b2:	4807      	ldr	r0, [pc, #28]	@ (80031d0 <_ZL12MX_SPI1_Initv+0x7c>)
 80031b4:	f004 fae8 	bl	8007788 <HAL_SPI_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80031c8:	f000 f9b8 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	20000570 	.word	0x20000570
 80031d4:	40013000 	.word	0x40013000

080031d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b09c      	sub	sp, #112	@ 0x70
 80031dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031de:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
 8003208:	615a      	str	r2, [r3, #20]
 800320a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800320c:	1d3b      	adds	r3, r7, #4
 800320e:	2234      	movs	r2, #52	@ 0x34
 8003210:	2100      	movs	r1, #0
 8003212:	4618      	mov	r0, r3
 8003214:	f007 fc22 	bl	800aa5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003218:	4b65      	ldr	r3, [pc, #404]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 800321a:	4a66      	ldr	r2, [pc, #408]	@ (80033b4 <_ZL12MX_TIM1_Initv+0x1dc>)
 800321c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800321e:	4b64      	ldr	r3, [pc, #400]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003220:	2200      	movs	r2, #0
 8003222:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8003224:	4b62      	ldr	r3, [pc, #392]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003226:	2220      	movs	r2, #32
 8003228:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 800322a:	4b61      	ldr	r3, [pc, #388]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 800322c:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8003230:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003232:	4b5f      	ldr	r3, [pc, #380]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8003238:	4b5d      	ldr	r3, [pc, #372]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 800323a:	2201      	movs	r2, #1
 800323c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800323e:	4b5c      	ldr	r3, [pc, #368]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003240:	2280      	movs	r2, #128	@ 0x80
 8003242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003244:	485a      	ldr	r0, [pc, #360]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003246:	f004 fed1 	bl	8007fec <HAL_TIM_Base_Init>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	bf14      	ite	ne
 8003250:	2301      	movne	r3, #1
 8003252:	2300      	moveq	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800325a:	f000 f96f 	bl	800353c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800325e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003262:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003264:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8003268:	4619      	mov	r1, r3
 800326a:	4851      	ldr	r0, [pc, #324]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 800326c:	f005 fae6 	bl	800883c <HAL_TIM_ConfigClockSource>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	bf14      	ite	ne
 8003276:	2301      	movne	r3, #1
 8003278:	2300      	moveq	r3, #0
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8003280:	f000 f95c 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003284:	484a      	ldr	r0, [pc, #296]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003286:	f004 ff08 	bl	800809a <HAL_TIM_PWM_Init>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	bf14      	ite	ne
 8003290:	2301      	movne	r3, #1
 8003292:	2300      	moveq	r3, #0
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800329a:	f000 f94f 	bl	800353c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800329e:	2300      	movs	r3, #0
 80032a0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80032aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80032ae:	4619      	mov	r1, r3
 80032b0:	483f      	ldr	r0, [pc, #252]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 80032b2:	f006 f88f 	bl	80093d4 <HAL_TIMEx_MasterConfigSynchronization>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80032c6:	f000 f939 	bl	800353c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ca:	2360      	movs	r3, #96	@ 0x60
 80032cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80032ce:	2300      	movs	r3, #0
 80032d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80032d2:	2302      	movs	r3, #2
 80032d4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032d6:	2300      	movs	r3, #0
 80032d8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80032da:	2304      	movs	r3, #4
 80032dc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032de:	2300      	movs	r3, #0
 80032e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032e2:	2300      	movs	r3, #0
 80032e4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80032ea:	2200      	movs	r2, #0
 80032ec:	4619      	mov	r1, r3
 80032ee:	4830      	ldr	r0, [pc, #192]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 80032f0:	f005 f990 	bl	8008614 <HAL_TIM_PWM_ConfigChannel>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	bf14      	ite	ne
 80032fa:	2301      	movne	r3, #1
 80032fc:	2300      	moveq	r3, #0
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d001      	beq.n	8003308 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8003304:	f000 f91a 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003308:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800330c:	2204      	movs	r2, #4
 800330e:	4619      	mov	r1, r3
 8003310:	4827      	ldr	r0, [pc, #156]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003312:	f005 f97f 	bl	8008614 <HAL_TIM_PWM_ConfigChannel>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 8003326:	f000 f909 	bl	800353c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800332a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800332e:	2208      	movs	r2, #8
 8003330:	4619      	mov	r1, r3
 8003332:	481f      	ldr	r0, [pc, #124]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 8003334:	f005 f96e 	bl	8008614 <HAL_TIM_PWM_ConfigChannel>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <_ZL12MX_TIM1_Initv+0x174>
  {
    Error_Handler();
 8003348:	f000 f8f8 	bl	800353c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800334c:	2300      	movs	r3, #0
 800334e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003358:	2300      	movs	r3, #0
 800335a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800335c:	2300      	movs	r3, #0
 800335e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003360:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003364:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003366:	2300      	movs	r3, #0
 8003368:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800336a:	2300      	movs	r3, #0
 800336c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8003372:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003376:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800337c:	2300      	movs	r3, #0
 800337e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003380:	2300      	movs	r3, #0
 8003382:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003384:	1d3b      	adds	r3, r7, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4809      	ldr	r0, [pc, #36]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 800338a:	f006 f8b1 	bl	80094f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <_ZL12MX_TIM1_Initv+0x1ca>
  {
    Error_Handler();
 800339e:	f000 f8cd 	bl	800353c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80033a2:	4803      	ldr	r0, [pc, #12]	@ (80033b0 <_ZL12MX_TIM1_Initv+0x1d8>)
 80033a4:	f000 fb52 	bl	8003a4c <HAL_TIM_MspPostInit>

}
 80033a8:	bf00      	nop
 80033aa:	3770      	adds	r7, #112	@ 0x70
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	200005d4 	.word	0x200005d4
 80033b4:	40012c00 	.word	0x40012c00

080033b8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80033be:	4b16      	ldr	r3, [pc, #88]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033c2:	4a15      	ldr	r2, [pc, #84]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033c4:	f043 0304 	orr.w	r3, r3, #4
 80033c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80033ca:	4b13      	ldr	r3, [pc, #76]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	607b      	str	r3, [r7, #4]
 80033d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80033d6:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033da:	4a0f      	ldr	r2, [pc, #60]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033dc:	f043 0301 	orr.w	r3, r3, #1
 80033e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80033e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003418 <_ZL11MX_DMA_Initv+0x60>)
 80033e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80033ee:	2200      	movs	r2, #0
 80033f0:	2100      	movs	r1, #0
 80033f2:	200b      	movs	r0, #11
 80033f4:	f002 f8ad 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80033f8:	200b      	movs	r0, #11
 80033fa:	f002 f8c4 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80033fe:	2200      	movs	r2, #0
 8003400:	2100      	movs	r1, #0
 8003402:	200c      	movs	r0, #12
 8003404:	f002 f8a5 	bl	8005552 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003408:	200c      	movs	r0, #12
 800340a:	f002 f8bc 	bl	8005586 <HAL_NVIC_EnableIRQ>

}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000

0800341c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003422:	f107 030c 	add.w	r3, r7, #12
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	60da      	str	r2, [r3, #12]
 8003430:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003432:	4b28      	ldr	r3, [pc, #160]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003436:	4a27      	ldr	r2, [pc, #156]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003438:	f043 0320 	orr.w	r3, r3, #32
 800343c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800343e:	4b25      	ldr	r3, [pc, #148]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	f003 0320 	and.w	r3, r3, #32
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800344a:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003456:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003462:	4b1c      	ldr	r3, [pc, #112]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003466:	4a1b      	ldr	r2, [pc, #108]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800346e:	4b19      	ldr	r3, [pc, #100]	@ (80034d4 <_ZL12MX_GPIO_Initv+0xb8>)
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 800347a:	2200      	movs	r2, #0
 800347c:	2110      	movs	r1, #16
 800347e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003482:	f003 f983 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8003486:	2200      	movs	r2, #0
 8003488:	2101      	movs	r1, #1
 800348a:	4813      	ldr	r0, [pc, #76]	@ (80034d8 <_ZL12MX_GPIO_Initv+0xbc>)
 800348c:	f003 f97e 	bl	800678c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8003490:	2310      	movs	r3, #16
 8003492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003494:	2301      	movs	r3, #1
 8003496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 80034a0:	f107 030c 	add.w	r3, r7, #12
 80034a4:	4619      	mov	r1, r3
 80034a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80034aa:	f002 ffed 	bl	8006488 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80034ae:	2301      	movs	r3, #1
 80034b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034b2:	2301      	movs	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80034be:	f107 030c 	add.w	r3, r7, #12
 80034c2:	4619      	mov	r1, r3
 80034c4:	4804      	ldr	r0, [pc, #16]	@ (80034d8 <_ZL12MX_GPIO_Initv+0xbc>)
 80034c6:	f002 ffdf 	bl	8006488 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80034ca:	bf00      	nop
 80034cc:	3720      	adds	r7, #32
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	48000400 	.word	0x48000400

080034dc <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80034e0:	4b08      	ldr	r3, [pc, #32]	@ (8003504 <_ZL8DWT_Initv+0x28>)
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4a07      	ldr	r2, [pc, #28]	@ (8003504 <_ZL8DWT_Initv+0x28>)
 80034e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034ea:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 80034ec:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <_ZL8DWT_Initv+0x2c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a05      	ldr	r2, [pc, #20]	@ (8003508 <_ZL8DWT_Initv+0x2c>)
 80034f2:	f043 0301 	orr.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]
}
 80034f8:	bf00      	nop
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	e000edf0 	.word	0xe000edf0
 8003508:	e0001000 	.word	0xe0001000

0800350c <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003510:	4b07      	ldr	r3, [pc, #28]	@ (8003530 <_ZL6microsv+0x24>)
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4b07      	ldr	r3, [pc, #28]	@ (8003534 <_ZL6microsv+0x28>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4907      	ldr	r1, [pc, #28]	@ (8003538 <_ZL6microsv+0x2c>)
 800351a:	fba1 1303 	umull	r1, r3, r1, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003524:	4618      	mov	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e0001000 	.word	0xe0001000
 8003534:	200000b4 	.word	0x200000b4
 8003538:	431bde83 	.word	0x431bde83

0800353c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800353c:	b480      	push	{r7}
 800353e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003540:	b672      	cpsid	i
}
 8003542:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003544:	bf00      	nop
 8003546:	e7fd      	b.n	8003544 <Error_Handler+0x8>

08003548 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d107      	bne.n	8003568 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800355e:	4293      	cmp	r3, r2
 8003560:	d102      	bne.n	8003568 <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8003562:	4809      	ldr	r0, [pc, #36]	@ (8003588 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003564:	f7fe fef0 	bl	8002348 <_ZN9simpleFOCC1Ev>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003574:	4293      	cmp	r3, r2
 8003576:	d102      	bne.n	800357e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003578:	4803      	ldr	r0, [pc, #12]	@ (8003588 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800357a:	f7fe ff0d 	bl	8002398 <_ZN9simpleFOCD1Ev>
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200001e8 	.word	0x200001e8

0800358c <_GLOBAL__sub_I_simpleFOC>:
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
 8003590:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003594:	2001      	movs	r0, #1
 8003596:	f7ff ffd7 	bl	8003548 <_Z41__static_initialization_and_destruction_0ii>
 800359a:	bd80      	pop	{r7, pc}

0800359c <_GLOBAL__sub_D_simpleFOC>:
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
 80035a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7ff ffcf 	bl	8003548 <_Z41__static_initialization_and_destruction_0ii>
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_MspInit+0x44>)
 80035b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b6:	4a0e      	ldr	r2, [pc, #56]	@ (80035f0 <HAL_MspInit+0x44>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6613      	str	r3, [r2, #96]	@ 0x60
 80035be:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <HAL_MspInit+0x44>)
 80035c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	607b      	str	r3, [r7, #4]
 80035c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ca:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_MspInit+0x44>)
 80035cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ce:	4a08      	ldr	r2, [pc, #32]	@ (80035f0 <HAL_MspInit+0x44>)
 80035d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d6:	4b06      	ldr	r3, [pc, #24]	@ (80035f0 <HAL_MspInit+0x44>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80035e2:	f003 f98f 	bl	8006904 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000

080035f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0a0      	sub	sp, #128	@ 0x80
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800360c:	f107 031c 	add.w	r3, r7, #28
 8003610:	2250      	movs	r2, #80	@ 0x50
 8003612:	2100      	movs	r1, #0
 8003614:	4618      	mov	r0, r3
 8003616:	f007 fa21 	bl	800aa5c <memset>
  if(hadc->Instance==ADC1)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003622:	d169      	bne.n	80036f8 <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003624:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003628:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800362a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800362e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	4618      	mov	r0, r3
 8003636:	f003 fe6b 	bl	8007310 <HAL_RCCEx_PeriphCLKConfig>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003640:	f7ff ff7c 	bl	800353c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003644:	4b65      	ldr	r3, [pc, #404]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a64      	ldr	r2, [pc, #400]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 800364c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800364e:	4b63      	ldr	r3, [pc, #396]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d10b      	bne.n	800366e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003656:	4b62      	ldr	r3, [pc, #392]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800365a:	4a61      	ldr	r2, [pc, #388]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 800365c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003660:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003662:	4b5f      	ldr	r3, [pc, #380]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003666:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800366e:	4b5c      	ldr	r3, [pc, #368]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	4a5b      	ldr	r2, [pc, #364]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800367a:	4b59      	ldr	r3, [pc, #356]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 800367c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8003686:	2301      	movs	r3, #1
 8003688:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800368a:	2303      	movs	r3, #3
 800368c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800368e:	2300      	movs	r3, #0
 8003690:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8003692:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003696:	4619      	mov	r1, r3
 8003698:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800369c:	f002 fef4 	bl	8006488 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80036a0:	4b50      	ldr	r3, [pc, #320]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036a2:	4a51      	ldr	r2, [pc, #324]	@ (80037e8 <HAL_ADC_MspInit+0x1f4>)
 80036a4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80036a6:	4b4f      	ldr	r3, [pc, #316]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036a8:	2205      	movs	r2, #5
 80036aa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80036ac:	4b4d      	ldr	r3, [pc, #308]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80036b2:	4b4c      	ldr	r3, [pc, #304]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80036b8:	4b4a      	ldr	r3, [pc, #296]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036ba:	2280      	movs	r2, #128	@ 0x80
 80036bc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80036be:	4b49      	ldr	r3, [pc, #292]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036c4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80036c6:	4b47      	ldr	r3, [pc, #284]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036c8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036cc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80036ce:	4b45      	ldr	r3, [pc, #276]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036d0:	2220      	movs	r2, #32
 80036d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80036d4:	4b43      	ldr	r3, [pc, #268]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80036da:	4842      	ldr	r0, [pc, #264]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036dc:	f002 f860 	bl	80057a0 <HAL_DMA_Init>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 80036e6:	f7ff ff29 	bl	800353c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a3d      	ldr	r2, [pc, #244]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80036f0:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <HAL_ADC_MspInit+0x1f0>)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80036f6:	e06d      	b.n	80037d4 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a3b      	ldr	r2, [pc, #236]	@ (80037ec <HAL_ADC_MspInit+0x1f8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d168      	bne.n	80037d4 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003702:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003706:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8003708:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800370c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800370e:	f107 031c 	add.w	r3, r7, #28
 8003712:	4618      	mov	r0, r3
 8003714:	f003 fdfc 	bl	8007310 <HAL_RCCEx_PeriphCLKConfig>
 8003718:	4603      	mov	r3, r0
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 800371e:	f7ff ff0d 	bl	800353c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003722:	4b2e      	ldr	r3, [pc, #184]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	4a2c      	ldr	r2, [pc, #176]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 800372a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800372c:	4b2b      	ldr	r3, [pc, #172]	@ (80037dc <HAL_ADC_MspInit+0x1e8>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10b      	bne.n	800374c <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003734:	4b2a      	ldr	r3, [pc, #168]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003738:	4a29      	ldr	r2, [pc, #164]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 800373a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800373e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003740:	4b27      	ldr	r3, [pc, #156]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003744:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374c:	4b24      	ldr	r3, [pc, #144]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 800374e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003750:	4a23      	ldr	r2, [pc, #140]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 8003752:	f043 0301 	orr.w	r3, r3, #1
 8003756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003758:	4b21      	ldr	r3, [pc, #132]	@ (80037e0 <HAL_ADC_MspInit+0x1ec>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8003764:	2302      	movs	r3, #2
 8003766:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003768:	2303      	movs	r3, #3
 800376a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8003770:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800377a:	f002 fe85 	bl	8006488 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800377e:	4b1c      	ldr	r3, [pc, #112]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 8003780:	4a1c      	ldr	r2, [pc, #112]	@ (80037f4 <HAL_ADC_MspInit+0x200>)
 8003782:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8003784:	4b1a      	ldr	r3, [pc, #104]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800378a:	4b19      	ldr	r3, [pc, #100]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003790:	4b17      	ldr	r3, [pc, #92]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8003796:	4b16      	ldr	r3, [pc, #88]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 8003798:	2280      	movs	r2, #128	@ 0x80
 800379a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800379c:	4b14      	ldr	r3, [pc, #80]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 800379e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037a2:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80037a4:	4b12      	ldr	r3, [pc, #72]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037aa:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80037ac:	4b10      	ldr	r3, [pc, #64]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037ae:	2220      	movs	r2, #32
 80037b0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80037b2:	4b0f      	ldr	r3, [pc, #60]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80037b8:	480d      	ldr	r0, [pc, #52]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037ba:	f001 fff1 	bl	80057a0 <HAL_DMA_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 80037c4:	f7ff feba 	bl	800353c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	4a09      	ldr	r2, [pc, #36]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80037ce:	4a08      	ldr	r2, [pc, #32]	@ (80037f0 <HAL_ADC_MspInit+0x1fc>)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6293      	str	r3, [r2, #40]	@ 0x28
}
 80037d4:	bf00      	nop
 80037d6:	3780      	adds	r7, #128	@ 0x80
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	2000062c 	.word	0x2000062c
 80037e0:	40021000 	.word	0x40021000
 80037e4:	200003c8 	.word	0x200003c8
 80037e8:	40020008 	.word	0x40020008
 80037ec:	50000100 	.word	0x50000100
 80037f0:	20000428 	.word	0x20000428
 80037f4:	4002001c 	.word	0x4002001c

080037f8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a0a      	ldr	r2, [pc, #40]	@ (8003830 <HAL_CORDIC_MspInit+0x38>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d10b      	bne.n	8003822 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800380a:	4b0a      	ldr	r3, [pc, #40]	@ (8003834 <HAL_CORDIC_MspInit+0x3c>)
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	4a09      	ldr	r2, [pc, #36]	@ (8003834 <HAL_CORDIC_MspInit+0x3c>)
 8003810:	f043 0308 	orr.w	r3, r3, #8
 8003814:	6493      	str	r3, [r2, #72]	@ 0x48
 8003816:	4b07      	ldr	r3, [pc, #28]	@ (8003834 <HAL_CORDIC_MspInit+0x3c>)
 8003818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003822:	bf00      	nop
 8003824:	3714      	adds	r7, #20
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40020c00 	.word	0x40020c00
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8003838:	b480      	push	{r7}
 800383a:	b085      	sub	sp, #20
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <HAL_CRC_MspInit+0x38>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10b      	bne.n	8003862 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <HAL_CRC_MspInit+0x3c>)
 800384c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800384e:	4a09      	ldr	r2, [pc, #36]	@ (8003874 <HAL_CRC_MspInit+0x3c>)
 8003850:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003854:	6493      	str	r3, [r2, #72]	@ 0x48
 8003856:	4b07      	ldr	r3, [pc, #28]	@ (8003874 <HAL_CRC_MspInit+0x3c>)
 8003858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800385a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800385e:	60fb      	str	r3, [r7, #12]
 8003860:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	40023000 	.word	0x40023000
 8003874:	40021000 	.word	0x40021000

08003878 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b09e      	sub	sp, #120	@ 0x78
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003880:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003890:	f107 0314 	add.w	r3, r7, #20
 8003894:	2250      	movs	r2, #80	@ 0x50
 8003896:	2100      	movs	r1, #0
 8003898:	4618      	mov	r0, r3
 800389a:	f007 f8df 	bl	800aa5c <memset>
  if(hfdcan->Instance==FDCAN1)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a24      	ldr	r2, [pc, #144]	@ (8003934 <HAL_FDCAN_MspInit+0xbc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d141      	bne.n	800392c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80038a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038ac:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80038ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038b4:	f107 0314 	add.w	r3, r7, #20
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fd29 	bl	8007310 <HAL_RCCEx_PeriphCLKConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80038c4:	f7ff fe3a 	bl	800353c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038cc:	4a1a      	ldr	r2, [pc, #104]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80038d4:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038e0:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038e4:	4a14      	ldr	r2, [pc, #80]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038e6:	f043 0301 	orr.w	r3, r3, #1
 80038ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ec:	4b12      	ldr	r3, [pc, #72]	@ (8003938 <HAL_FDCAN_MspInit+0xc0>)
 80038ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80038f8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80038fc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038fe:	2302      	movs	r3, #2
 8003900:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003902:	2300      	movs	r3, #0
 8003904:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003906:	2300      	movs	r3, #0
 8003908:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800390a:	2309      	movs	r3, #9
 800390c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800390e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003912:	4619      	mov	r1, r3
 8003914:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003918:	f002 fdb6 	bl	8006488 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800391c:	2200      	movs	r2, #0
 800391e:	2100      	movs	r1, #0
 8003920:	2015      	movs	r0, #21
 8003922:	f001 fe16 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003926:	2015      	movs	r0, #21
 8003928:	f001 fe2d 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800392c:	bf00      	nop
 800392e:	3778      	adds	r7, #120	@ 0x78
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40006400 	.word	0x40006400
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <HAL_FMAC_MspInit+0x38>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10b      	bne.n	8003966 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 800394e:	4b0a      	ldr	r3, [pc, #40]	@ (8003978 <HAL_FMAC_MspInit+0x3c>)
 8003950:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003952:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <HAL_FMAC_MspInit+0x3c>)
 8003954:	f043 0310 	orr.w	r3, r3, #16
 8003958:	6493      	str	r3, [r2, #72]	@ 0x48
 800395a:	4b07      	ldr	r3, [pc, #28]	@ (8003978 <HAL_FMAC_MspInit+0x3c>)
 800395c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395e:	f003 0310 	and.w	r3, r3, #16
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40021400 	.word	0x40021400
 8003978:	40021000 	.word	0x40021000

0800397c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	@ 0x28
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a17      	ldr	r2, [pc, #92]	@ (80039f8 <HAL_SPI_MspInit+0x7c>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d128      	bne.n	80039f0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800399e:	4b17      	ldr	r3, [pc, #92]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a2:	4a16      	ldr	r2, [pc, #88]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80039a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80039aa:	4b14      	ldr	r3, [pc, #80]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b6:	4b11      	ldr	r3, [pc, #68]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	4a10      	ldr	r2, [pc, #64]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039bc:	f043 0301 	orr.w	r3, r3, #1
 80039c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c2:	4b0e      	ldr	r3, [pc, #56]	@ (80039fc <HAL_SPI_MspInit+0x80>)
 80039c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80039ce:	23e0      	movs	r3, #224	@ 0xe0
 80039d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d2:	2302      	movs	r3, #2
 80039d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d6:	2300      	movs	r3, #0
 80039d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039da:	2302      	movs	r3, #2
 80039dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80039de:	2305      	movs	r3, #5
 80039e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	4619      	mov	r1, r3
 80039e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80039ec:	f002 fd4c 	bl	8006488 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80039f0:	bf00      	nop
 80039f2:	3728      	adds	r7, #40	@ 0x28
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40013000 	.word	0x40013000
 80039fc:	40021000 	.word	0x40021000

08003a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003a44 <HAL_TIM_Base_MspInit+0x44>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d113      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a16:	4a0c      	ldr	r2, [pc, #48]	@ (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003a1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <HAL_TIM_Base_MspInit+0x48>)
 8003a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a26:	60fb      	str	r3, [r7, #12]
 8003a28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2019      	movs	r0, #25
 8003a30:	f001 fd8f 	bl	8005552 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003a34:	2019      	movs	r0, #25
 8003a36:	f001 fda6 	bl	8005586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40012c00 	.word	0x40012c00
 8003a48:	40021000 	.word	0x40021000

08003a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 030c 	add.w	r3, r7, #12
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a12      	ldr	r2, [pc, #72]	@ (8003ab4 <HAL_TIM_MspPostInit+0x68>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d11d      	bne.n	8003aaa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6e:	4b12      	ldr	r3, [pc, #72]	@ (8003ab8 <HAL_TIM_MspPostInit+0x6c>)
 8003a70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a72:	4a11      	ldr	r2, [pc, #68]	@ (8003ab8 <HAL_TIM_MspPostInit+0x6c>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab8 <HAL_TIM_MspPostInit+0x6c>)
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8003a86:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8003a8a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a94:	2303      	movs	r3, #3
 8003a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003a98:	2306      	movs	r3, #6
 8003a9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a9c:	f107 030c 	add.w	r3, r7, #12
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003aa6:	f002 fcef 	bl	8006488 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003aaa:	bf00      	nop
 8003aac:	3720      	adds	r7, #32
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	40012c00 	.word	0x40012c00
 8003ab8:	40021000 	.word	0x40021000

08003abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <NMI_Handler+0x4>

08003ac4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac8:	bf00      	nop
 8003aca:	e7fd      	b.n	8003ac8 <HardFault_Handler+0x4>

08003acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ad0:	bf00      	nop
 8003ad2:	e7fd      	b.n	8003ad0 <MemManage_Handler+0x4>

08003ad4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad8:	bf00      	nop
 8003ada:	e7fd      	b.n	8003ad8 <BusFault_Handler+0x4>

08003adc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <UsageFault_Handler+0x4>

08003ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ae8:	bf00      	nop
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003af2:	b480      	push	{r7}
 8003af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003af6:	bf00      	nop
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b12:	f000 f8b9 	bl	8003c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
	...

08003b1c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003b20:	4802      	ldr	r0, [pc, #8]	@ (8003b2c <DMA1_Channel1_IRQHandler+0x10>)
 8003b22:	f001 ff60 	bl	80059e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200003c8 	.word	0x200003c8

08003b30 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8003b34:	4802      	ldr	r0, [pc, #8]	@ (8003b40 <DMA1_Channel2_IRQHandler+0x10>)
 8003b36:	f001 ff56 	bl	80059e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000428 	.word	0x20000428

08003b44 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8003b48:	4802      	ldr	r0, [pc, #8]	@ (8003b54 <FDCAN1_IT0_IRQHandler+0x10>)
 8003b4a:	f002 f9f5 	bl	8005f38 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8003b4e:	bf00      	nop
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	200004d4 	.word	0x200004d4

08003b58 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003b5c:	4802      	ldr	r0, [pc, #8]	@ (8003b68 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003b5e:	f004 fc09 	bl	8008374 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003b62:	bf00      	nop
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	200005d4 	.word	0x200005d4

08003b6c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b70:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <SystemInit+0x20>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b76:	4a05      	ldr	r2, [pc, #20]	@ (8003b8c <SystemInit+0x20>)
 8003b78:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003b7c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b80:	bf00      	nop
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003b90:	480d      	ldr	r0, [pc, #52]	@ (8003bc8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003b92:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8003b94:	f7ff ffea 	bl	8003b6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003b98:	480c      	ldr	r0, [pc, #48]	@ (8003bcc <LoopForever+0x6>)
  ldr r1, =_edata
 8003b9a:	490d      	ldr	r1, [pc, #52]	@ (8003bd0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bd4 <LoopForever+0xe>)
  movs r3, #0
 8003b9e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003ba0:	e002      	b.n	8003ba8 <LoopCopyDataInit>

08003ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ba6:	3304      	adds	r3, #4

08003ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bac:	d3f9      	bcc.n	8003ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bae:	4a0a      	ldr	r2, [pc, #40]	@ (8003bd8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003bb0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bdc <LoopForever+0x16>)
  movs r3, #0
 8003bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bb4:	e001      	b.n	8003bba <LoopFillZerobss>

08003bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bb8:	3204      	adds	r2, #4

08003bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bbc:	d3fb      	bcc.n	8003bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bbe:	f006 ff5b 	bl	800aa78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003bc2:	f7ff f855 	bl	8002c70 <main>

08003bc6 <LoopForever>:

LoopForever:
    b LoopForever
 8003bc6:	e7fe      	b.n	8003bc6 <LoopForever>
  ldr   r0, =_estack
 8003bc8:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8003bcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003bd0:	20000120 	.word	0x20000120
  ldr r2, =_sidata
 8003bd4:	0800ac44 	.word	0x0800ac44
  ldr r2, =_sbss
 8003bd8:	20000120 	.word	0x20000120
  ldr r4, =_ebss
 8003bdc:	20000774 	.word	0x20000774

08003be0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003be0:	e7fe      	b.n	8003be0 <ADC1_2_IRQHandler>

08003be2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b082      	sub	sp, #8
 8003be6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bec:	2003      	movs	r0, #3
 8003bee:	f001 fca5 	bl	800553c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003bf2:	200f      	movs	r0, #15
 8003bf4:	f000 f80e 	bl	8003c14 <HAL_InitTick>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	71fb      	strb	r3, [r7, #7]
 8003c02:	e001      	b.n	8003c08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003c04:	f7ff fcd2 	bl	80035ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003c08:	79fb      	ldrb	r3, [r7, #7]

}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3708      	adds	r7, #8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
	...

08003c14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003c20:	4b16      	ldr	r3, [pc, #88]	@ (8003c7c <HAL_InitTick+0x68>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d022      	beq.n	8003c6e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003c28:	4b15      	ldr	r3, [pc, #84]	@ (8003c80 <HAL_InitTick+0x6c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b13      	ldr	r3, [pc, #76]	@ (8003c7c <HAL_InitTick+0x68>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f001 fcb0 	bl	80055a2 <HAL_SYSTICK_Config>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10f      	bne.n	8003c68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b0f      	cmp	r3, #15
 8003c4c:	d809      	bhi.n	8003c62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295
 8003c56:	f001 fc7c 	bl	8005552 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c84 <HAL_InitTick+0x70>)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6013      	str	r3, [r2, #0]
 8003c60:	e007      	b.n	8003c72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	73fb      	strb	r3, [r7, #15]
 8003c66:	e004      	b.n	8003c72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	73fb      	strb	r3, [r7, #15]
 8003c6c:	e001      	b.n	8003c72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200000bc 	.word	0x200000bc
 8003c80:	200000b4 	.word	0x200000b4
 8003c84:	200000b8 	.word	0x200000b8

08003c88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <HAL_IncTick+0x1c>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b05      	ldr	r3, [pc, #20]	@ (8003ca8 <HAL_IncTick+0x20>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4413      	add	r3, r2
 8003c96:	4a03      	ldr	r2, [pc, #12]	@ (8003ca4 <HAL_IncTick+0x1c>)
 8003c98:	6013      	str	r3, [r2, #0]
}
 8003c9a:	bf00      	nop
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr
 8003ca4:	20000630 	.word	0x20000630
 8003ca8:	200000bc 	.word	0x200000bc

08003cac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return uwTick;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	@ (8003cc0 <HAL_GetTick+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000630 	.word	0x20000630

08003cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ccc:	f7ff ffee 	bl	8003cac <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cdc:	d004      	beq.n	8003ce8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cde:	4b09      	ldr	r3, [pc, #36]	@ (8003d04 <HAL_Delay+0x40>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4413      	add	r3, r2
 8003ce6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ce8:	bf00      	nop
 8003cea:	f7ff ffdf 	bl	8003cac <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	68fa      	ldr	r2, [r7, #12]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d8f7      	bhi.n	8003cea <HAL_Delay+0x26>
  {
  }
}
 8003cfa:	bf00      	nop
 8003cfc:	bf00      	nop
 8003cfe:	3710      	adds	r7, #16
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	200000bc 	.word	0x200000bc

08003d08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	609a      	str	r2, [r3, #8]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b083      	sub	sp, #12
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	609a      	str	r2, [r3, #8]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	3360      	adds	r3, #96	@ 0x60
 8003d82:	461a      	mov	r2, r3
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4413      	add	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b08      	ldr	r3, [pc, #32]	@ (8003db4 <LL_ADC_SetOffset+0x44>)
 8003d92:	4013      	ands	r3, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003d9a:	683a      	ldr	r2, [r7, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003da8:	bf00      	nop
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr
 8003db4:	03fff000 	.word	0x03fff000

08003db8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3360      	adds	r3, #96	@ 0x60
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	3360      	adds	r3, #96	@ 0x60
 8003df4:	461a      	mov	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	431a      	orrs	r2, r3
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003e0e:	bf00      	nop
 8003e10:	371c      	adds	r7, #28
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3360      	adds	r3, #96	@ 0x60
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4413      	add	r3, r2
 8003e32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003e44:	bf00      	nop
 8003e46:	371c      	adds	r7, #28
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b087      	sub	sp, #28
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	60b9      	str	r1, [r7, #8]
 8003e5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3360      	adds	r3, #96	@ 0x60
 8003e60:	461a      	mov	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	431a      	orrs	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	615a      	str	r2, [r3, #20]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d101      	bne.n	8003ec4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	e000      	b.n	8003ec6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ec4:	2300      	movs	r3, #0
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b087      	sub	sp, #28
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	60f8      	str	r0, [r7, #12]
 8003eda:	60b9      	str	r1, [r7, #8]
 8003edc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	3330      	adds	r3, #48	@ 0x30
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	f003 030c 	and.w	r3, r3, #12
 8003eee:	4413      	add	r3, r2
 8003ef0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f003 031f 	and.w	r3, r3, #31
 8003efc:	211f      	movs	r1, #31
 8003efe:	fa01 f303 	lsl.w	r3, r1, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	401a      	ands	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0e9b      	lsrs	r3, r3, #26
 8003f0a:	f003 011f 	and.w	r1, r3, #31
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	f003 031f 	and.w	r3, r3, #31
 8003f14:	fa01 f303 	lsl.w	r3, r1, r3
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f1e:	bf00      	nop
 8003f20:	371c      	adds	r7, #28
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr

08003f2a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b087      	sub	sp, #28
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	3314      	adds	r3, #20
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	0e5b      	lsrs	r3, r3, #25
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	4413      	add	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	0d1b      	lsrs	r3, r3, #20
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2107      	movs	r1, #7
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	0d1b      	lsrs	r3, r3, #20
 8003f64:	f003 031f 	and.w	r3, r3, #31
 8003f68:	6879      	ldr	r1, [r7, #4]
 8003f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f74:	bf00      	nop
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b085      	sub	sp, #20
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f98:	43db      	mvns	r3, r3
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f003 0318 	and.w	r3, r3, #24
 8003fa2:	4908      	ldr	r1, [pc, #32]	@ (8003fc4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003fa4:	40d9      	lsrs	r1, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	400b      	ands	r3, r1
 8003faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	0007ffff 	.word	0x0007ffff

08003fc8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003ff4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6093      	str	r3, [r2, #8]
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800401c:	d101      	bne.n	8004022 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800401e:	2301      	movs	r3, #1
 8004020:	e000      	b.n	8004024 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8004040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004044:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004068:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800406c:	d101      	bne.n	8004072 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004090:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004094:	f043 0201 	orr.w	r2, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d101      	bne.n	80040c0 <LL_ADC_IsEnabled+0x18>
 80040bc:	2301      	movs	r3, #1
 80040be:	e000      	b.n	80040c2 <LL_ADC_IsEnabled+0x1a>
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr

080040ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80040ce:	b480      	push	{r7}
 80040d0:	b083      	sub	sp, #12
 80040d2:	af00      	add	r7, sp, #0
 80040d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80040de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b04      	cmp	r3, #4
 8004108:	d101      	bne.n	800410e <LL_ADC_REG_IsConversionOngoing+0x18>
 800410a:	2301      	movs	r3, #1
 800410c:	e000      	b.n	8004110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr

0800411c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d101      	bne.n	8004134 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	370c      	adds	r7, #12
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
	...

08004144 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004144:	b590      	push	{r4, r7, lr}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8004150:	2300      	movs	r3, #0
 8004152:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e19b      	b.n	8004496 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004168:	2b00      	cmp	r3, #0
 800416a:	d109      	bne.n	8004180 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fa41 	bl	80035f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f7ff ff3f 	bl	8004008 <LL_ADC_IsDeepPowerDownEnabled>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d004      	beq.n	800419a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4618      	mov	r0, r3
 8004196:	f7ff ff25 	bl	8003fe4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4618      	mov	r0, r3
 80041a0:	f7ff ff5a 	bl	8004058 <LL_ADC_IsInternalRegulatorEnabled>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d115      	bne.n	80041d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff ff3e 	bl	8004030 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80041b4:	4b97      	ldr	r3, [pc, #604]	@ (8004414 <HAL_ADC_Init+0x2d0>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	099b      	lsrs	r3, r3, #6
 80041ba:	4a97      	ldr	r2, [pc, #604]	@ (8004418 <HAL_ADC_Init+0x2d4>)
 80041bc:	fba2 2303 	umull	r2, r3, r2, r3
 80041c0:	099b      	lsrs	r3, r3, #6
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041c8:	e002      	b.n	80041d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	3b01      	subs	r3, #1
 80041ce:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f9      	bne.n	80041ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f7ff ff3c 	bl	8004058 <LL_ADC_IsInternalRegulatorEnabled>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d10d      	bne.n	8004202 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ea:	f043 0210 	orr.w	r2, r3, #16
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041f6:	f043 0201 	orr.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4618      	mov	r0, r3
 8004208:	f7ff ff75 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 800420c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004212:	f003 0310 	and.w	r3, r3, #16
 8004216:	2b00      	cmp	r3, #0
 8004218:	f040 8134 	bne.w	8004484 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f040 8130 	bne.w	8004484 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004228:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800422c:	f043 0202 	orr.w	r2, r3, #2
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f7ff ff35 	bl	80040a8 <LL_ADC_IsEnabled>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d137      	bne.n	80042b4 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800424c:	d004      	beq.n	8004258 <HAL_ADC_Init+0x114>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a72      	ldr	r2, [pc, #456]	@ (800441c <HAL_ADC_Init+0x2d8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d10f      	bne.n	8004278 <HAL_ADC_Init+0x134>
 8004258:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800425c:	f7ff ff24 	bl	80040a8 <LL_ADC_IsEnabled>
 8004260:	4604      	mov	r4, r0
 8004262:	486e      	ldr	r0, [pc, #440]	@ (800441c <HAL_ADC_Init+0x2d8>)
 8004264:	f7ff ff20 	bl	80040a8 <LL_ADC_IsEnabled>
 8004268:	4603      	mov	r3, r0
 800426a:	4323      	orrs	r3, r4
 800426c:	2b00      	cmp	r3, #0
 800426e:	bf0c      	ite	eq
 8004270:	2301      	moveq	r3, #1
 8004272:	2300      	movne	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e008      	b.n	800428a <HAL_ADC_Init+0x146>
 8004278:	4869      	ldr	r0, [pc, #420]	@ (8004420 <HAL_ADC_Init+0x2dc>)
 800427a:	f7ff ff15 	bl	80040a8 <LL_ADC_IsEnabled>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004296:	d004      	beq.n	80042a2 <HAL_ADC_Init+0x15e>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a5f      	ldr	r2, [pc, #380]	@ (800441c <HAL_ADC_Init+0x2d8>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_ADC_Init+0x162>
 80042a2:	4a60      	ldr	r2, [pc, #384]	@ (8004424 <HAL_ADC_Init+0x2e0>)
 80042a4:	e000      	b.n	80042a8 <HAL_ADC_Init+0x164>
 80042a6:	4a60      	ldr	r2, [pc, #384]	@ (8004428 <HAL_ADC_Init+0x2e4>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	4619      	mov	r1, r3
 80042ae:	4610      	mov	r0, r2
 80042b0:	f7ff fd2a 	bl	8003d08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	7f5b      	ldrb	r3, [r3, #29]
 80042b8:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042be:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80042c4:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80042ca:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042d2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d106      	bne.n	80042f0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	045b      	lsls	r3, r3, #17
 80042ea:	69ba      	ldr	r2, [r7, #24]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004304:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004306:	69ba      	ldr	r2, [r7, #24]
 8004308:	4313      	orrs	r3, r2
 800430a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68da      	ldr	r2, [r3, #12]
 8004312:	4b46      	ldr	r3, [pc, #280]	@ (800442c <HAL_ADC_Init+0x2e8>)
 8004314:	4013      	ands	r3, r2
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6812      	ldr	r2, [r2, #0]
 800431a:	69b9      	ldr	r1, [r7, #24]
 800431c:	430b      	orrs	r3, r1
 800431e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	430a      	orrs	r2, r1
 8004334:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff feee 	bl	800411c <LL_ADC_INJ_IsConversionOngoing>
 8004340:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d17b      	bne.n	8004440 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d178      	bne.n	8004440 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8004352:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800435a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800435c:	4313      	orrs	r3, r2
 800435e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800436a:	f023 0302 	bic.w	r3, r3, #2
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6812      	ldr	r2, [r2, #0]
 8004372:	69b9      	ldr	r1, [r7, #24]
 8004374:	430b      	orrs	r3, r1
 8004376:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d017      	beq.n	80043b0 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	691a      	ldr	r2, [r3, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800438e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004398:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800439c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6911      	ldr	r1, [r2, #16]
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80043ae:	e013      	b.n	80043d8 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	691a      	ldr	r2, [r3, #16]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80043be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80043d0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043d4:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80043de:	2b01      	cmp	r3, #1
 80043e0:	d126      	bne.n	8004430 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	691b      	ldr	r3, [r3, #16]
 80043e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80043ec:	f023 0304 	bic.w	r3, r3, #4
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80043f8:	4311      	orrs	r1, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80043fe:	4311      	orrs	r1, r2
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004404:	430a      	orrs	r2, r1
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f042 0201 	orr.w	r2, r2, #1
 8004410:	611a      	str	r2, [r3, #16]
 8004412:	e015      	b.n	8004440 <HAL_ADC_Init+0x2fc>
 8004414:	200000b4 	.word	0x200000b4
 8004418:	053e2d63 	.word	0x053e2d63
 800441c:	50000100 	.word	0x50000100
 8004420:	50000400 	.word	0x50000400
 8004424:	50000300 	.word	0x50000300
 8004428:	50000700 	.word	0x50000700
 800442c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f022 0201 	bic.w	r2, r2, #1
 800443e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d10c      	bne.n	8004462 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800444e:	f023 010f 	bic.w	r1, r3, #15
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	1e5a      	subs	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004460:	e007      	b.n	8004472 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 020f 	bic.w	r2, r2, #15
 8004470:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004476:	f023 0303 	bic.w	r3, r3, #3
 800447a:	f043 0201 	orr.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004482:	e007      	b.n	8004494 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	f043 0210 	orr.w	r2, r3, #16
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004494:	7ffb      	ldrb	r3, [r7, #31]
}
 8004496:	4618      	mov	r0, r3
 8004498:	3724      	adds	r7, #36	@ 0x24
 800449a:	46bd      	mov	sp, r7
 800449c:	bd90      	pop	{r4, r7, pc}
 800449e:	bf00      	nop

080044a0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80044b4:	d004      	beq.n	80044c0 <HAL_ADC_Start_DMA+0x20>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a57      	ldr	r2, [pc, #348]	@ (8004618 <HAL_ADC_Start_DMA+0x178>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d101      	bne.n	80044c4 <HAL_ADC_Start_DMA+0x24>
 80044c0:	4b56      	ldr	r3, [pc, #344]	@ (800461c <HAL_ADC_Start_DMA+0x17c>)
 80044c2:	e000      	b.n	80044c6 <HAL_ADC_Start_DMA+0x26>
 80044c4:	4b56      	ldr	r3, [pc, #344]	@ (8004620 <HAL_ADC_Start_DMA+0x180>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff fd7e 	bl	8003fc8 <LL_ADC_GetMultimode>
 80044cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4618      	mov	r0, r3
 80044d4:	f7ff fe0f 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f040 8094 	bne.w	8004608 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d101      	bne.n	80044ee <HAL_ADC_Start_DMA+0x4e>
 80044ea:	2302      	movs	r3, #2
 80044ec:	e08f      	b.n	800460e <HAL_ADC_Start_DMA+0x16e>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2201      	movs	r2, #1
 80044f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a4a      	ldr	r2, [pc, #296]	@ (8004624 <HAL_ADC_Start_DMA+0x184>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d008      	beq.n	8004512 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b05      	cmp	r3, #5
 800450a:	d002      	beq.n	8004512 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	2b09      	cmp	r3, #9
 8004510:	d173      	bne.n	80045fa <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f000 fcd8 	bl	8004ec8 <ADC_Enable>
 8004518:	4603      	mov	r3, r0
 800451a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800451c:	7dfb      	ldrb	r3, [r7, #23]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d166      	bne.n	80045f0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004526:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800452a:	f023 0301 	bic.w	r3, r3, #1
 800452e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a37      	ldr	r2, [pc, #220]	@ (8004618 <HAL_ADC_Start_DMA+0x178>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d002      	beq.n	8004546 <HAL_ADC_Start_DMA+0xa6>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	e001      	b.n	800454a <HAL_ADC_Start_DMA+0xaa>
 8004546:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	6812      	ldr	r2, [r2, #0]
 800454e:	4293      	cmp	r3, r2
 8004550:	d002      	beq.n	8004558 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d105      	bne.n	8004564 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800455c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004568:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d006      	beq.n	800457e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004574:	f023 0206 	bic.w	r2, r3, #6
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	661a      	str	r2, [r3, #96]	@ 0x60
 800457c:	e002      	b.n	8004584 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	4a27      	ldr	r2, [pc, #156]	@ (8004628 <HAL_ADC_Start_DMA+0x188>)
 800458a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004590:	4a26      	ldr	r2, [pc, #152]	@ (800462c <HAL_ADC_Start_DMA+0x18c>)
 8004592:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	4a25      	ldr	r2, [pc, #148]	@ (8004630 <HAL_ADC_Start_DMA+0x190>)
 800459a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	221c      	movs	r2, #28
 80045a2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0210 	orr.w	r2, r2, #16
 80045ba:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68da      	ldr	r2, [r3, #12]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0201 	orr.w	r2, r2, #1
 80045ca:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	3340      	adds	r3, #64	@ 0x40
 80045d6:	4619      	mov	r1, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f001 f988 	bl	80058f0 <HAL_DMA_Start_IT>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fd70 	bl	80040ce <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045ee:	e00d      	b.n	800460c <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80045f8:	e008      	b.n	800460c <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8004606:	e001      	b.n	800460c <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004608:	2302      	movs	r3, #2
 800460a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	50000100 	.word	0x50000100
 800461c:	50000300 	.word	0x50000300
 8004620:	50000700 	.word	0x50000700
 8004624:	50000400 	.word	0x50000400
 8004628:	08004ff5 	.word	0x08004ff5
 800462c:	080050cd 	.word	0x080050cd
 8004630:	080050e9 	.word	0x080050e9

08004634 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466e:	4770      	bx	lr

08004670 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b0b6      	sub	sp, #216	@ 0xd8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
 8004678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800467a:	2300      	movs	r3, #0
 800467c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004680:	2300      	movs	r3, #0
 8004682:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800468a:	2b01      	cmp	r3, #1
 800468c:	d102      	bne.n	8004694 <HAL_ADC_ConfigChannel+0x24>
 800468e:	2302      	movs	r3, #2
 8004690:	f000 bc04 	b.w	8004e9c <HAL_ADC_ConfigChannel+0x82c>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4618      	mov	r0, r3
 80046a2:	f7ff fd28 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f040 83e8 	bne.w	8004e7e <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6818      	ldr	r0, [r3, #0]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	6859      	ldr	r1, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f7ff fc09 	bl	8003ed2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff fd16 	bl	80040f6 <LL_ADC_REG_IsConversionOngoing>
 80046ca:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7ff fd22 	bl	800411c <LL_ADC_INJ_IsConversionOngoing>
 80046d8:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	f040 81d9 	bne.w	8004a98 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f040 81d4 	bne.w	8004a98 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80046f8:	d10f      	bne.n	800471a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2200      	movs	r2, #0
 8004704:	4619      	mov	r1, r3
 8004706:	f7ff fc10 	bl	8003f2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff fbb7 	bl	8003e86 <LL_ADC_SetSamplingTimeCommonConfig>
 8004718:	e00e      	b.n	8004738 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	6819      	ldr	r1, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	461a      	mov	r2, r3
 8004728:	f7ff fbff 	bl	8003f2a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	2100      	movs	r1, #0
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff fba7 	bl	8003e86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	695a      	ldr	r2, [r3, #20]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f003 0303 	and.w	r3, r3, #3
 8004748:	005b      	lsls	r3, r3, #1
 800474a:	fa02 f303 	lsl.w	r3, r2, r3
 800474e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d022      	beq.n	80047a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	6919      	ldr	r1, [r3, #16]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800476a:	f7ff fb01 	bl	8003d70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6818      	ldr	r0, [r3, #0]
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	6919      	ldr	r1, [r3, #16]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	461a      	mov	r2, r3
 800477c:	f7ff fb4d 	bl	8003e1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800478c:	2b01      	cmp	r3, #1
 800478e:	d102      	bne.n	8004796 <HAL_ADC_ConfigChannel+0x126>
 8004790:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004794:	e000      	b.n	8004798 <HAL_ADC_ConfigChannel+0x128>
 8004796:	2300      	movs	r3, #0
 8004798:	461a      	mov	r2, r3
 800479a:	f7ff fb59 	bl	8003e50 <LL_ADC_SetOffsetSaturation>
 800479e:	e17b      	b.n	8004a98 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2100      	movs	r1, #0
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff fb06 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <HAL_ADC_ConfigChannel+0x15c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	2100      	movs	r1, #0
 80047bc:	4618      	mov	r0, r3
 80047be:	f7ff fafb 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 80047c2:	4603      	mov	r3, r0
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	f003 021f 	and.w	r2, r3, #31
 80047ca:	e01e      	b.n	800480a <HAL_ADC_ConfigChannel+0x19a>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2100      	movs	r1, #0
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff faf0 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 80047d8:	4603      	mov	r3, r0
 80047da:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80047ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80047ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80047f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80047fa:	2320      	movs	r3, #32
 80047fc:	e004      	b.n	8004808 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80047fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004802:	fab3 f383 	clz	r3, r3
 8004806:	b2db      	uxtb	r3, r3
 8004808:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004812:	2b00      	cmp	r3, #0
 8004814:	d105      	bne.n	8004822 <HAL_ADC_ConfigChannel+0x1b2>
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	0e9b      	lsrs	r3, r3, #26
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	e018      	b.n	8004854 <HAL_ADC_ConfigChannel+0x1e4>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800482e:	fa93 f3a3 	rbit	r3, r3
 8004832:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8004836:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800483a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800483e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8004846:	2320      	movs	r3, #32
 8004848:	e004      	b.n	8004854 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800484a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800484e:	fab3 f383 	clz	r3, r3
 8004852:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004854:	429a      	cmp	r2, r3
 8004856:	d106      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2200      	movs	r2, #0
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f7ff fabf 	bl	8003de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	2101      	movs	r1, #1
 800486c:	4618      	mov	r0, r3
 800486e:	f7ff faa3 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004872:	4603      	mov	r3, r0
 8004874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x222>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2101      	movs	r1, #1
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff fa98 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004888:	4603      	mov	r3, r0
 800488a:	0e9b      	lsrs	r3, r3, #26
 800488c:	f003 021f 	and.w	r2, r3, #31
 8004890:	e01e      	b.n	80048d0 <HAL_ADC_ConfigChannel+0x260>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f7ff fa8d 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 800489e:	4603      	mov	r3, r0
 80048a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80048a8:	fa93 f3a3 	rbit	r3, r3
 80048ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80048b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80048b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80048b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80048c0:	2320      	movs	r3, #32
 80048c2:	e004      	b.n	80048ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80048c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d105      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x278>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	e018      	b.n	800491a <HAL_ADC_ConfigChannel+0x2aa>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80048f4:	fa93 f3a3 	rbit	r3, r3
 80048f8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80048fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8004904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800490c:	2320      	movs	r3, #32
 800490e:	e004      	b.n	800491a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8004910:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004914:	fab3 f383 	clz	r3, r3
 8004918:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800491a:	429a      	cmp	r2, r3
 800491c:	d106      	bne.n	800492c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2200      	movs	r2, #0
 8004924:	2101      	movs	r1, #1
 8004926:	4618      	mov	r0, r3
 8004928:	f7ff fa5c 	bl	8003de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fa40 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004938:	4603      	mov	r3, r0
 800493a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493e:	2b00      	cmp	r3, #0
 8004940:	d10a      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x2e8>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2102      	movs	r1, #2
 8004948:	4618      	mov	r0, r3
 800494a:	f7ff fa35 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 800494e:	4603      	mov	r3, r0
 8004950:	0e9b      	lsrs	r3, r3, #26
 8004952:	f003 021f 	and.w	r2, r3, #31
 8004956:	e01e      	b.n	8004996 <HAL_ADC_ConfigChannel+0x326>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f7ff fa2a 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004964:	4603      	mov	r3, r0
 8004966:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800496e:	fa93 f3a3 	rbit	r3, r3
 8004972:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8004976:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800497a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 800497e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8004986:	2320      	movs	r3, #32
 8004988:	e004      	b.n	8004994 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800498a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d105      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x33e>
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	0e9b      	lsrs	r3, r3, #26
 80049a8:	f003 031f 	and.w	r3, r3, #31
 80049ac:	e016      	b.n	80049dc <HAL_ADC_ConfigChannel+0x36c>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80049c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80049c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80049c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d101      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80049ce:	2320      	movs	r3, #32
 80049d0:	e004      	b.n	80049dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80049d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049dc:	429a      	cmp	r2, r3
 80049de:	d106      	bne.n	80049ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2102      	movs	r1, #2
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f9fb 	bl	8003de4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2103      	movs	r1, #3
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7ff f9df 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x3aa>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2103      	movs	r1, #3
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7ff f9d4 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004a10:	4603      	mov	r3, r0
 8004a12:	0e9b      	lsrs	r3, r3, #26
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	e017      	b.n	8004a4a <HAL_ADC_ConfigChannel+0x3da>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2103      	movs	r1, #3
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7ff f9c9 	bl	8003db8 <LL_ADC_GetOffsetChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a2c:	fa93 f3a3 	rbit	r3, r3
 8004a30:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004a32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a34:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004a36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8004a3c:	2320      	movs	r3, #32
 8004a3e:	e003      	b.n	8004a48 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8004a40:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a42:	fab3 f383 	clz	r3, r3
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d105      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x3f2>
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	0e9b      	lsrs	r3, r3, #26
 8004a5c:	f003 031f 	and.w	r3, r3, #31
 8004a60:	e011      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x416>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004a70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a72:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d101      	bne.n	8004a7e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8004a7a:	2320      	movs	r3, #32
 8004a7c:	e003      	b.n	8004a86 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a80:	fab3 f383 	clz	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d106      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2103      	movs	r1, #3
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff f9a6 	bl	8003de4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f7ff fb03 	bl	80040a8 <LL_ADC_IsEnabled>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f040 813d 	bne.w	8004d24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f7ff fa62 	bl	8003f80 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	4aa2      	ldr	r2, [pc, #648]	@ (8004d4c <HAL_ADC_ConfigChannel+0x6dc>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	f040 812e 	bne.w	8004d24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10b      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x480>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	0e9b      	lsrs	r3, r3, #26
 8004ade:	3301      	adds	r3, #1
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	2b09      	cmp	r3, #9
 8004ae6:	bf94      	ite	ls
 8004ae8:	2301      	movls	r3, #1
 8004aea:	2300      	movhi	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e019      	b.n	8004b24 <HAL_ADC_ConfigChannel+0x4b4>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004afe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004b00:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004b02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8004b08:	2320      	movs	r3, #32
 8004b0a:	e003      	b.n	8004b14 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004b0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b0e:	fab3 f383 	clz	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3301      	adds	r3, #1
 8004b16:	f003 031f 	and.w	r3, r3, #31
 8004b1a:	2b09      	cmp	r3, #9
 8004b1c:	bf94      	ite	ls
 8004b1e:	2301      	movls	r3, #1
 8004b20:	2300      	movhi	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d079      	beq.n	8004c1c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d107      	bne.n	8004b44 <HAL_ADC_ConfigChannel+0x4d4>
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0e9b      	lsrs	r3, r3, #26
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	069b      	lsls	r3, r3, #26
 8004b3e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b42:	e015      	b.n	8004b70 <HAL_ADC_ConfigChannel+0x500>
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b54:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004b56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	e003      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004b60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	3301      	adds	r3, #1
 8004b6a:	069b      	lsls	r3, r3, #26
 8004b6c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <HAL_ADC_ConfigChannel+0x520>
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	0e9b      	lsrs	r3, r3, #26
 8004b82:	3301      	adds	r3, #1
 8004b84:	f003 031f 	and.w	r3, r3, #31
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	e017      	b.n	8004bc0 <HAL_ADC_ConfigChannel+0x550>
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b98:	fa93 f3a3 	rbit	r3, r3
 8004b9c:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004b9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004ba2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8004ba8:	2320      	movs	r3, #32
 8004baa:	e003      	b.n	8004bb4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bae:	fab3 f383 	clz	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2101      	movs	r1, #1
 8004bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8004bc0:	ea42 0103 	orr.w	r1, r2, r3
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10a      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x576>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	0e9b      	lsrs	r3, r3, #26
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	f003 021f 	and.w	r2, r3, #31
 8004bdc:	4613      	mov	r3, r2
 8004bde:	005b      	lsls	r3, r3, #1
 8004be0:	4413      	add	r3, r2
 8004be2:	051b      	lsls	r3, r3, #20
 8004be4:	e018      	b.n	8004c18 <HAL_ADC_ConfigChannel+0x5a8>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	fa93 f3a3 	rbit	r3, r3
 8004bf2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d101      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004bfe:	2320      	movs	r3, #32
 8004c00:	e003      	b.n	8004c0a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c04:	fab3 f383 	clz	r3, r3
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	f003 021f 	and.w	r2, r3, #31
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c18:	430b      	orrs	r3, r1
 8004c1a:	e07e      	b.n	8004d1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d107      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x5c8>
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	0e9b      	lsrs	r3, r3, #26
 8004c2e:	3301      	adds	r3, #1
 8004c30:	069b      	lsls	r3, r3, #26
 8004c32:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c36:	e015      	b.n	8004c64 <HAL_ADC_ConfigChannel+0x5f4>
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c40:	fa93 f3a3 	rbit	r3, r3
 8004c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c48:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8004c4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004c50:	2320      	movs	r3, #32
 8004c52:	e003      	b.n	8004c5c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	fab3 f383 	clz	r3, r3
 8004c5a:	b2db      	uxtb	r3, r3
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	069b      	lsls	r3, r3, #26
 8004c60:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d109      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x614>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	0e9b      	lsrs	r3, r3, #26
 8004c76:	3301      	adds	r3, #1
 8004c78:	f003 031f 	and.w	r3, r3, #31
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c82:	e017      	b.n	8004cb4 <HAL_ADC_ConfigChannel+0x644>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	fa93 f3a3 	rbit	r3, r3
 8004c90:	61fb      	str	r3, [r7, #28]
  return result;
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004c9c:	2320      	movs	r3, #32
 8004c9e:	e003      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca2:	fab3 f383 	clz	r3, r3
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	3301      	adds	r3, #1
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	2101      	movs	r1, #1
 8004cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb4:	ea42 0103 	orr.w	r1, r2, r3
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x670>
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	0e9b      	lsrs	r3, r3, #26
 8004cca:	3301      	adds	r3, #1
 8004ccc:	f003 021f 	and.w	r2, r3, #31
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3b1e      	subs	r3, #30
 8004cd8:	051b      	lsls	r3, r3, #20
 8004cda:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	e01b      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x6a8>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	fa93 f3a3 	rbit	r3, r3
 8004cec:	613b      	str	r3, [r7, #16]
  return result;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d101      	bne.n	8004cfc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8004cf8:	2320      	movs	r3, #32
 8004cfa:	e003      	b.n	8004d04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	fab3 f383 	clz	r3, r3
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	3301      	adds	r3, #1
 8004d06:	f003 021f 	and.w	r2, r3, #31
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	4413      	add	r3, r2
 8004d10:	3b1e      	subs	r3, #30
 8004d12:	051b      	lsls	r3, r3, #20
 8004d14:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004d1a:	683a      	ldr	r2, [r7, #0]
 8004d1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d1e:	4619      	mov	r1, r3
 8004d20:	f7ff f903 	bl	8003f2a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	4b09      	ldr	r3, [pc, #36]	@ (8004d50 <HAL_ADC_ConfigChannel+0x6e0>)
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80af 	beq.w	8004e90 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d3a:	d004      	beq.n	8004d46 <HAL_ADC_ConfigChannel+0x6d6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a04      	ldr	r2, [pc, #16]	@ (8004d54 <HAL_ADC_ConfigChannel+0x6e4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d10a      	bne.n	8004d5c <HAL_ADC_ConfigChannel+0x6ec>
 8004d46:	4b04      	ldr	r3, [pc, #16]	@ (8004d58 <HAL_ADC_ConfigChannel+0x6e8>)
 8004d48:	e009      	b.n	8004d5e <HAL_ADC_ConfigChannel+0x6ee>
 8004d4a:	bf00      	nop
 8004d4c:	407f0000 	.word	0x407f0000
 8004d50:	80080000 	.word	0x80080000
 8004d54:	50000100 	.word	0x50000100
 8004d58:	50000300 	.word	0x50000300
 8004d5c:	4b51      	ldr	r3, [pc, #324]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x834>)
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f7fe fff8 	bl	8003d54 <LL_ADC_GetCommonPathInternalCh>
 8004d64:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4e      	ldr	r2, [pc, #312]	@ (8004ea8 <HAL_ADC_ConfigChannel+0x838>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_ADC_ConfigChannel+0x70c>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4d      	ldr	r2, [pc, #308]	@ (8004eac <HAL_ADC_ConfigChannel+0x83c>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d134      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004d7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d12e      	bne.n	8004de6 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d90:	d17e      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d9a:	d004      	beq.n	8004da6 <HAL_ADC_ConfigChannel+0x736>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a43      	ldr	r2, [pc, #268]	@ (8004eb0 <HAL_ADC_ConfigChannel+0x840>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d101      	bne.n	8004daa <HAL_ADC_ConfigChannel+0x73a>
 8004da6:	4a43      	ldr	r2, [pc, #268]	@ (8004eb4 <HAL_ADC_ConfigChannel+0x844>)
 8004da8:	e000      	b.n	8004dac <HAL_ADC_ConfigChannel+0x73c>
 8004daa:	4a3e      	ldr	r2, [pc, #248]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x834>)
 8004dac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004db0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004db4:	4619      	mov	r1, r3
 8004db6:	4610      	mov	r0, r2
 8004db8:	f7fe ffb9 	bl	8003d2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004dbc:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb8 <HAL_ADC_ConfigChannel+0x848>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	099b      	lsrs	r3, r3, #6
 8004dc2:	4a3e      	ldr	r2, [pc, #248]	@ (8004ebc <HAL_ADC_ConfigChannel+0x84c>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	099b      	lsrs	r3, r3, #6
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dd6:	e002      	b.n	8004dde <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1f9      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de4:	e054      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a35      	ldr	r2, [pc, #212]	@ (8004ec0 <HAL_ADC_ConfigChannel+0x850>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d120      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004df4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d11a      	bne.n	8004e32 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e04:	d144      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e0e:	d004      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x7aa>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a26      	ldr	r2, [pc, #152]	@ (8004eb0 <HAL_ADC_ConfigChannel+0x840>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d101      	bne.n	8004e1e <HAL_ADC_ConfigChannel+0x7ae>
 8004e1a:	4a26      	ldr	r2, [pc, #152]	@ (8004eb4 <HAL_ADC_ConfigChannel+0x844>)
 8004e1c:	e000      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x7b0>
 8004e1e:	4a21      	ldr	r2, [pc, #132]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x834>)
 8004e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7fe ff7f 	bl	8003d2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e30:	e02e      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <HAL_ADC_ConfigChannel+0x854>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d129      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e40:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d123      	bne.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a18      	ldr	r2, [pc, #96]	@ (8004eb0 <HAL_ADC_ConfigChannel+0x840>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d01e      	beq.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e5a:	d004      	beq.n	8004e66 <HAL_ADC_ConfigChannel+0x7f6>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a13      	ldr	r2, [pc, #76]	@ (8004eb0 <HAL_ADC_ConfigChannel+0x840>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d101      	bne.n	8004e6a <HAL_ADC_ConfigChannel+0x7fa>
 8004e66:	4a13      	ldr	r2, [pc, #76]	@ (8004eb4 <HAL_ADC_ConfigChannel+0x844>)
 8004e68:	e000      	b.n	8004e6c <HAL_ADC_ConfigChannel+0x7fc>
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8004ea4 <HAL_ADC_ConfigChannel+0x834>)
 8004e6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004e70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e74:	4619      	mov	r1, r3
 8004e76:	4610      	mov	r0, r2
 8004e78:	f7fe ff59 	bl	8003d2e <LL_ADC_SetCommonPathInternalCh>
 8004e7c:	e008      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e82:	f043 0220 	orr.w	r2, r3, #32
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004e98:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	37d8      	adds	r7, #216	@ 0xd8
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	50000700 	.word	0x50000700
 8004ea8:	c3210000 	.word	0xc3210000
 8004eac:	90c00010 	.word	0x90c00010
 8004eb0:	50000100 	.word	0x50000100
 8004eb4:	50000300 	.word	0x50000300
 8004eb8:	200000b4 	.word	0x200000b4
 8004ebc:	053e2d63 	.word	0x053e2d63
 8004ec0:	c7520000 	.word	0xc7520000
 8004ec4:	cb840000 	.word	0xcb840000

08004ec8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7ff f8e5 	bl	80040a8 <LL_ADC_IsEnabled>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d176      	bne.n	8004fd2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	689a      	ldr	r2, [r3, #8]
 8004eea:	4b3c      	ldr	r3, [pc, #240]	@ (8004fdc <ADC_Enable+0x114>)
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d00d      	beq.n	8004f0e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ef6:	f043 0210 	orr.w	r2, r3, #16
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f02:	f043 0201 	orr.w	r2, r3, #1
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e062      	b.n	8004fd4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7ff f8b4 	bl	8004080 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f20:	d004      	beq.n	8004f2c <ADC_Enable+0x64>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe0 <ADC_Enable+0x118>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <ADC_Enable+0x68>
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe4 <ADC_Enable+0x11c>)
 8004f2e:	e000      	b.n	8004f32 <ADC_Enable+0x6a>
 8004f30:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe8 <ADC_Enable+0x120>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fe ff0e 	bl	8003d54 <LL_ADC_GetCommonPathInternalCh>
 8004f38:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d013      	beq.n	8004f6a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f42:	4b2a      	ldr	r3, [pc, #168]	@ (8004fec <ADC_Enable+0x124>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	099b      	lsrs	r3, r3, #6
 8004f48:	4a29      	ldr	r2, [pc, #164]	@ (8004ff0 <ADC_Enable+0x128>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	4613      	mov	r3, r2
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f5c:	e002      	b.n	8004f64 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	3b01      	subs	r3, #1
 8004f62:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f9      	bne.n	8004f5e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004f6a:	f7fe fe9f 	bl	8003cac <HAL_GetTick>
 8004f6e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f70:	e028      	b.n	8004fc4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff f896 	bl	80040a8 <LL_ADC_IsEnabled>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4618      	mov	r0, r3
 8004f88:	f7ff f87a 	bl	8004080 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004f8c:	f7fe fe8e 	bl	8003cac <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d914      	bls.n	8004fc4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d00d      	beq.n	8004fc4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fac:	f043 0210 	orr.w	r2, r3, #16
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004fb8:	f043 0201 	orr.w	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e007      	b.n	8004fd4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d1cf      	bne.n	8004f72 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	8000003f 	.word	0x8000003f
 8004fe0:	50000100 	.word	0x50000100
 8004fe4:	50000300 	.word	0x50000300
 8004fe8:	50000700 	.word	0x50000700
 8004fec:	200000b4 	.word	0x200000b4
 8004ff0:	053e2d63 	.word	0x053e2d63

08004ff4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005000:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005006:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800500a:	2b00      	cmp	r3, #0
 800500c:	d14b      	bne.n	80050a6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005012:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d021      	beq.n	800506c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f7fe ff3d 	bl	8003eac <LL_ADC_REG_IsTriggerSourceSWStart>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d032      	beq.n	800509e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d12b      	bne.n	800509e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800504a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005056:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d11f      	bne.n	800509e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005062:	f043 0201 	orr.w	r2, r3, #1
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	65da      	str	r2, [r3, #92]	@ 0x5c
 800506a:	e018      	b.n	800509e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0302 	and.w	r3, r3, #2
 8005076:	2b00      	cmp	r3, #0
 8005078:	d111      	bne.n	800509e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800507e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800508a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d105      	bne.n	800509e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005096:	f043 0201 	orr.w	r2, r3, #1
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f7ff fac8 	bl	8004634 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80050a4:	e00e      	b.n	80050c4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	f003 0310 	and.w	r3, r3, #16
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fad2 	bl	800465c <HAL_ADC_ErrorCallback>
}
 80050b8:	e004      	b.n	80050c4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	4798      	blx	r3
}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80050da:	68f8      	ldr	r0, [r7, #12]
 80050dc:	f7ff fab4 	bl	8004648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80050e0:	bf00      	nop
 80050e2:	3710      	adds	r7, #16
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050fa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005106:	f043 0204 	orr.w	r2, r3, #4
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f7ff faa4 	bl	800465c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005114:	bf00      	nop
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <LL_ADC_IsEnabled>:
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d101      	bne.n	8005134 <LL_ADC_IsEnabled+0x18>
 8005130:	2301      	movs	r3, #1
 8005132:	e000      	b.n	8005136 <LL_ADC_IsEnabled+0x1a>
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <LL_ADC_REG_IsConversionOngoing>:
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0304 	and.w	r3, r3, #4
 8005152:	2b04      	cmp	r3, #4
 8005154:	d101      	bne.n	800515a <LL_ADC_REG_IsConversionOngoing+0x18>
 8005156:	2301      	movs	r3, #1
 8005158:	e000      	b.n	800515c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b0a1      	sub	sp, #132	@ 0x84
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005172:	2300      	movs	r3, #0
 8005174:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800517e:	2b01      	cmp	r3, #1
 8005180:	d101      	bne.n	8005186 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005182:	2302      	movs	r3, #2
 8005184:	e0cb      	b.n	800531e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800518e:	2300      	movs	r3, #0
 8005190:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8005192:	2300      	movs	r3, #0
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800519e:	d102      	bne.n	80051a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80051a0:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051a2:	60bb      	str	r3, [r7, #8]
 80051a4:	e001      	b.n	80051aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10b      	bne.n	80051c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051b4:	f043 0220 	orr.w	r2, r3, #32
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e0aa      	b.n	800531e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f7ff ffb9 	bl	8005142 <LL_ADC_REG_IsConversionOngoing>
 80051d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ffb3 	bl	8005142 <LL_ADC_REG_IsConversionOngoing>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	f040 808c 	bne.w	80052fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80051e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	f040 8088 	bne.w	80052fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051f4:	d004      	beq.n	8005200 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4b      	ldr	r2, [pc, #300]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8005200:	4b4a      	ldr	r3, [pc, #296]	@ (800532c <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8005202:	e000      	b.n	8005206 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005204:	4b4a      	ldr	r3, [pc, #296]	@ (8005330 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8005206:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d041      	beq.n	8005294 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005210:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	6859      	ldr	r1, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005222:	035b      	lsls	r3, r3, #13
 8005224:	430b      	orrs	r3, r1
 8005226:	431a      	orrs	r2, r3
 8005228:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800522a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005234:	d004      	beq.n	8005240 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a3b      	ldr	r2, [pc, #236]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10f      	bne.n	8005260 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8005240:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005244:	f7ff ff6a 	bl	800511c <LL_ADC_IsEnabled>
 8005248:	4604      	mov	r4, r0
 800524a:	4837      	ldr	r0, [pc, #220]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800524c:	f7ff ff66 	bl	800511c <LL_ADC_IsEnabled>
 8005250:	4603      	mov	r3, r0
 8005252:	4323      	orrs	r3, r4
 8005254:	2b00      	cmp	r3, #0
 8005256:	bf0c      	ite	eq
 8005258:	2301      	moveq	r3, #1
 800525a:	2300      	movne	r3, #0
 800525c:	b2db      	uxtb	r3, r3
 800525e:	e008      	b.n	8005272 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8005260:	4834      	ldr	r0, [pc, #208]	@ (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8005262:	f7ff ff5b 	bl	800511c <LL_ADC_IsEnabled>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d04c      	beq.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005276:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800527e:	f023 030f 	bic.w	r3, r3, #15
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	6811      	ldr	r1, [r2, #0]
 8005286:	683a      	ldr	r2, [r7, #0]
 8005288:	6892      	ldr	r2, [r2, #8]
 800528a:	430a      	orrs	r2, r1
 800528c:	431a      	orrs	r2, r3
 800528e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005290:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005292:	e03d      	b.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005294:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800529c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800529e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80052a8:	d004      	beq.n	80052b4 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1e      	ldr	r2, [pc, #120]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d10f      	bne.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 80052b4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80052b8:	f7ff ff30 	bl	800511c <LL_ADC_IsEnabled>
 80052bc:	4604      	mov	r4, r0
 80052be:	481a      	ldr	r0, [pc, #104]	@ (8005328 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80052c0:	f7ff ff2c 	bl	800511c <LL_ADC_IsEnabled>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4323      	orrs	r3, r4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e008      	b.n	80052e6 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 80052d4:	4817      	ldr	r0, [pc, #92]	@ (8005334 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 80052d6:	f7ff ff21 	bl	800511c <LL_ADC_IsEnabled>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	bf0c      	ite	eq
 80052e0:	2301      	moveq	r3, #1
 80052e2:	2300      	movne	r3, #0
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d012      	beq.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80052f2:	f023 030f 	bic.w	r3, r3, #15
 80052f6:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80052f8:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80052fa:	e009      	b.n	8005310 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005300:	f043 0220 	orr.w	r2, r3, #32
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800530e:	e000      	b.n	8005312 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8005310:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800531a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800531e:	4618      	mov	r0, r3
 8005320:	3784      	adds	r7, #132	@ 0x84
 8005322:	46bd      	mov	sp, r7
 8005324:	bd90      	pop	{r4, r7, pc}
 8005326:	bf00      	nop
 8005328:	50000100 	.word	0x50000100
 800532c:	50000300 	.word	0x50000300
 8005330:	50000700 	.word	0x50000700
 8005334:	50000400 	.word	0x50000400

08005338 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e023      	b.n	8005392 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d106      	bne.n	8005364 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fe fa4a 	bl	80037f8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
	...

0800539c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053ac:	4b0c      	ldr	r3, [pc, #48]	@ (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053b2:	68ba      	ldr	r2, [r7, #8]
 80053b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053b8:	4013      	ands	r3, r2
 80053ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ce:	4a04      	ldr	r2, [pc, #16]	@ (80053e0 <__NVIC_SetPriorityGrouping+0x44>)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	60d3      	str	r3, [r2, #12]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000ed00 	.word	0xe000ed00

080053e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053e8:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <__NVIC_GetPriorityGrouping+0x18>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	0a1b      	lsrs	r3, r3, #8
 80053ee:	f003 0307 	and.w	r3, r3, #7
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	4603      	mov	r3, r0
 8005408:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800540a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540e:	2b00      	cmp	r3, #0
 8005410:	db0b      	blt.n	800542a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005412:	79fb      	ldrb	r3, [r7, #7]
 8005414:	f003 021f 	and.w	r2, r3, #31
 8005418:	4907      	ldr	r1, [pc, #28]	@ (8005438 <__NVIC_EnableIRQ+0x38>)
 800541a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2001      	movs	r0, #1
 8005422:	fa00 f202 	lsl.w	r2, r0, r2
 8005426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800542a:	bf00      	nop
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	e000e100 	.word	0xe000e100

0800543c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	6039      	str	r1, [r7, #0]
 8005446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800544c:	2b00      	cmp	r3, #0
 800544e:	db0a      	blt.n	8005466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	b2da      	uxtb	r2, r3
 8005454:	490c      	ldr	r1, [pc, #48]	@ (8005488 <__NVIC_SetPriority+0x4c>)
 8005456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800545a:	0112      	lsls	r2, r2, #4
 800545c:	b2d2      	uxtb	r2, r2
 800545e:	440b      	add	r3, r1
 8005460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005464:	e00a      	b.n	800547c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	b2da      	uxtb	r2, r3
 800546a:	4908      	ldr	r1, [pc, #32]	@ (800548c <__NVIC_SetPriority+0x50>)
 800546c:	79fb      	ldrb	r3, [r7, #7]
 800546e:	f003 030f 	and.w	r3, r3, #15
 8005472:	3b04      	subs	r3, #4
 8005474:	0112      	lsls	r2, r2, #4
 8005476:	b2d2      	uxtb	r2, r2
 8005478:	440b      	add	r3, r1
 800547a:	761a      	strb	r2, [r3, #24]
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	e000e100 	.word	0xe000e100
 800548c:	e000ed00 	.word	0xe000ed00

08005490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005490:	b480      	push	{r7}
 8005492:	b089      	sub	sp, #36	@ 0x24
 8005494:	af00      	add	r7, sp, #0
 8005496:	60f8      	str	r0, [r7, #12]
 8005498:	60b9      	str	r1, [r7, #8]
 800549a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f003 0307 	and.w	r3, r3, #7
 80054a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f1c3 0307 	rsb	r3, r3, #7
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	bf28      	it	cs
 80054ae:	2304      	movcs	r3, #4
 80054b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054b2:	69fb      	ldr	r3, [r7, #28]
 80054b4:	3304      	adds	r3, #4
 80054b6:	2b06      	cmp	r3, #6
 80054b8:	d902      	bls.n	80054c0 <NVIC_EncodePriority+0x30>
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	3b03      	subs	r3, #3
 80054be:	e000      	b.n	80054c2 <NVIC_EncodePriority+0x32>
 80054c0:	2300      	movs	r3, #0
 80054c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	43da      	mvns	r2, r3
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	401a      	ands	r2, r3
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054d8:	f04f 31ff 	mov.w	r1, #4294967295
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	fa01 f303 	lsl.w	r3, r1, r3
 80054e2:	43d9      	mvns	r1, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054e8:	4313      	orrs	r3, r2
         );
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	@ 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
	...

080054f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3b01      	subs	r3, #1
 8005504:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005508:	d301      	bcc.n	800550e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800550a:	2301      	movs	r3, #1
 800550c:	e00f      	b.n	800552e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800550e:	4a0a      	ldr	r2, [pc, #40]	@ (8005538 <SysTick_Config+0x40>)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	3b01      	subs	r3, #1
 8005514:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005516:	210f      	movs	r1, #15
 8005518:	f04f 30ff 	mov.w	r0, #4294967295
 800551c:	f7ff ff8e 	bl	800543c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005520:	4b05      	ldr	r3, [pc, #20]	@ (8005538 <SysTick_Config+0x40>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005526:	4b04      	ldr	r3, [pc, #16]	@ (8005538 <SysTick_Config+0x40>)
 8005528:	2207      	movs	r2, #7
 800552a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	e000e010 	.word	0xe000e010

0800553c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f7ff ff29 	bl	800539c <__NVIC_SetPriorityGrouping>
}
 800554a:	bf00      	nop
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b086      	sub	sp, #24
 8005556:	af00      	add	r7, sp, #0
 8005558:	4603      	mov	r3, r0
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005560:	f7ff ff40 	bl	80053e4 <__NVIC_GetPriorityGrouping>
 8005564:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005566:	687a      	ldr	r2, [r7, #4]
 8005568:	68b9      	ldr	r1, [r7, #8]
 800556a:	6978      	ldr	r0, [r7, #20]
 800556c:	f7ff ff90 	bl	8005490 <NVIC_EncodePriority>
 8005570:	4602      	mov	r2, r0
 8005572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005576:	4611      	mov	r1, r2
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ff5f 	bl	800543c <__NVIC_SetPriority>
}
 800557e:	bf00      	nop
 8005580:	3718      	adds	r7, #24
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}

08005586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005586:	b580      	push	{r7, lr}
 8005588:	b082      	sub	sp, #8
 800558a:	af00      	add	r7, sp, #0
 800558c:	4603      	mov	r3, r0
 800558e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff ff33 	bl	8005400 <__NVIC_EnableIRQ>
}
 800559a:	bf00      	nop
 800559c:	3708      	adds	r7, #8
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff ffa4 	bl	80054f8 <SysTick_Config>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e054      	b.n	8005678 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	7f5b      	ldrb	r3, [r3, #29]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d105      	bne.n	80055e4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2200      	movs	r2, #0
 80055dc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7fe f92a 	bl	8003838 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	791b      	ldrb	r3, [r3, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10c      	bne.n	800560c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a22      	ldr	r2, [pc, #136]	@ (8005680 <HAL_CRC_Init+0xc4>)
 80055f8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0218 	bic.w	r2, r2, #24
 8005608:	609a      	str	r2, [r3, #8]
 800560a:	e00c      	b.n	8005626 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6899      	ldr	r1, [r3, #8]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	461a      	mov	r2, r3
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f834 	bl	8005684 <HAL_CRCEx_Polynomial_Set>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e028      	b.n	8005678 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	795b      	ldrb	r3, [r3, #5]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f04f 32ff 	mov.w	r2, #4294967295
 8005636:	611a      	str	r2, [r3, #16]
 8005638:	e004      	b.n	8005644 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	6912      	ldr	r2, [r2, #16]
 8005642:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699a      	ldr	r2, [r3, #24]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}
 8005680:	04c11db7 	.word	0x04c11db7

08005684 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8005694:	231f      	movs	r3, #31
 8005696:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d102      	bne.n	80056a8 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	75fb      	strb	r3, [r7, #23]
 80056a6:	e063      	b.n	8005770 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80056a8:	bf00      	nop
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1e5a      	subs	r2, r3, #1
 80056ae:	613a      	str	r2, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d009      	beq.n	80056c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	fa22 f303 	lsr.w	r3, r2, r3
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d0f0      	beq.n	80056aa <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2b18      	cmp	r3, #24
 80056cc:	d846      	bhi.n	800575c <HAL_CRCEx_Polynomial_Set+0xd8>
 80056ce:	a201      	add	r2, pc, #4	@ (adr r2, 80056d4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80056d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056d4:	08005763 	.word	0x08005763
 80056d8:	0800575d 	.word	0x0800575d
 80056dc:	0800575d 	.word	0x0800575d
 80056e0:	0800575d 	.word	0x0800575d
 80056e4:	0800575d 	.word	0x0800575d
 80056e8:	0800575d 	.word	0x0800575d
 80056ec:	0800575d 	.word	0x0800575d
 80056f0:	0800575d 	.word	0x0800575d
 80056f4:	08005751 	.word	0x08005751
 80056f8:	0800575d 	.word	0x0800575d
 80056fc:	0800575d 	.word	0x0800575d
 8005700:	0800575d 	.word	0x0800575d
 8005704:	0800575d 	.word	0x0800575d
 8005708:	0800575d 	.word	0x0800575d
 800570c:	0800575d 	.word	0x0800575d
 8005710:	0800575d 	.word	0x0800575d
 8005714:	08005745 	.word	0x08005745
 8005718:	0800575d 	.word	0x0800575d
 800571c:	0800575d 	.word	0x0800575d
 8005720:	0800575d 	.word	0x0800575d
 8005724:	0800575d 	.word	0x0800575d
 8005728:	0800575d 	.word	0x0800575d
 800572c:	0800575d 	.word	0x0800575d
 8005730:	0800575d 	.word	0x0800575d
 8005734:	08005739 	.word	0x08005739
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b06      	cmp	r3, #6
 800573c:	d913      	bls.n	8005766 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8005742:	e010      	b.n	8005766 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b07      	cmp	r3, #7
 8005748:	d90f      	bls.n	800576a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 800574a:	2301      	movs	r3, #1
 800574c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800574e:	e00c      	b.n	800576a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b0f      	cmp	r3, #15
 8005754:	d90b      	bls.n	800576e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800575a:	e008      	b.n	800576e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	75fb      	strb	r3, [r7, #23]
        break;
 8005760:	e006      	b.n	8005770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005762:	bf00      	nop
 8005764:	e004      	b.n	8005770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8005766:	bf00      	nop
 8005768:	e002      	b.n	8005770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800576a:	bf00      	nop
 800576c:	e000      	b.n	8005770 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800576e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8005770:	7dfb      	ldrb	r3, [r7, #23]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f023 0118 	bic.w	r1, r3, #24
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	430a      	orrs	r2, r1
 8005790:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8005792:	7dfb      	ldrb	r3, [r7, #23]
}
 8005794:	4618      	mov	r0, r3
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e08d      	b.n	80058ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	4b47      	ldr	r3, [pc, #284]	@ (80058d8 <HAL_DMA_Init+0x138>)
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d80f      	bhi.n	80057de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	4b45      	ldr	r3, [pc, #276]	@ (80058dc <HAL_DMA_Init+0x13c>)
 80057c6:	4413      	add	r3, r2
 80057c8:	4a45      	ldr	r2, [pc, #276]	@ (80058e0 <HAL_DMA_Init+0x140>)
 80057ca:	fba2 2303 	umull	r2, r3, r2, r3
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	009a      	lsls	r2, r3, #2
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a42      	ldr	r2, [pc, #264]	@ (80058e4 <HAL_DMA_Init+0x144>)
 80057da:	641a      	str	r2, [r3, #64]	@ 0x40
 80057dc:	e00e      	b.n	80057fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	461a      	mov	r2, r3
 80057e4:	4b40      	ldr	r3, [pc, #256]	@ (80058e8 <HAL_DMA_Init+0x148>)
 80057e6:	4413      	add	r3, r2
 80057e8:	4a3d      	ldr	r2, [pc, #244]	@ (80058e0 <HAL_DMA_Init+0x140>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	091b      	lsrs	r3, r3, #4
 80057f0:	009a      	lsls	r2, r3, #2
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a3c      	ldr	r2, [pc, #240]	@ (80058ec <HAL_DMA_Init+0x14c>)
 80057fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2202      	movs	r2, #2
 8005800:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8005812:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005816:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005820:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	691b      	ldr	r3, [r3, #16]
 8005826:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800582c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005838:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f9b6 	bl	8005bc0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800585c:	d102      	bne.n	8005864 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005878:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <HAL_DMA_Init+0x104>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2b04      	cmp	r3, #4
 8005888:	d80c      	bhi.n	80058a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f9d6 	bl	8005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005894:	2200      	movs	r2, #0
 8005896:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	e008      	b.n	80058b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3710      	adds	r7, #16
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	40020407 	.word	0x40020407
 80058dc:	bffdfff8 	.word	0xbffdfff8
 80058e0:	cccccccd 	.word	0xcccccccd
 80058e4:	40020000 	.word	0x40020000
 80058e8:	bffdfbf8 	.word	0xbffdfbf8
 80058ec:	40020400 	.word	0x40020400

080058f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
 80058fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005908:	2b01      	cmp	r3, #1
 800590a:	d101      	bne.n	8005910 <HAL_DMA_Start_IT+0x20>
 800590c:	2302      	movs	r3, #2
 800590e:	e066      	b.n	80059de <HAL_DMA_Start_IT+0xee>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b01      	cmp	r3, #1
 8005922:	d155      	bne.n	80059d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2202      	movs	r2, #2
 8005928:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	68b9      	ldr	r1, [r7, #8]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 f8fb 	bl	8005b44 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005952:	2b00      	cmp	r3, #0
 8005954:	d008      	beq.n	8005968 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 020e 	orr.w	r2, r2, #14
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e00f      	b.n	8005988 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0204 	bic.w	r2, r2, #4
 8005976:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 020a 	orr.w	r2, r2, #10
 8005986:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d007      	beq.n	80059a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800599a:	681a      	ldr	r2, [r3, #0]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d007      	beq.n	80059be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f042 0201 	orr.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]
 80059ce:	e005      	b.n	80059dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80059d8:	2302      	movs	r3, #2
 80059da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80059dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3718      	adds	r7, #24
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}

080059e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059e6:	b580      	push	{r7, lr}
 80059e8:	b084      	sub	sp, #16
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	2204      	movs	r2, #4
 8005a08:	409a      	lsls	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d026      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x7a>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d021      	beq.n	8005a60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0320 	and.w	r3, r3, #32
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f022 0204 	bic.w	r2, r2, #4
 8005a38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3e:	f003 021f 	and.w	r2, r3, #31
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	2104      	movs	r1, #4
 8005a48:	fa01 f202 	lsl.w	r2, r1, r2
 8005a4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d071      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005a5e:	e06c      	b.n	8005b3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a64:	f003 031f 	and.w	r3, r3, #31
 8005a68:	2202      	movs	r2, #2
 8005a6a:	409a      	lsls	r2, r3
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02e      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d029      	beq.n	8005ad2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 0320 	and.w	r3, r3, #32
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10b      	bne.n	8005aa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f022 020a 	bic.w	r2, r2, #10
 8005a9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005aa8:	f003 021f 	and.w	r2, r3, #31
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ab0:	2102      	movs	r1, #2
 8005ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ab6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d038      	beq.n	8005b3a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005ad0:	e033      	b.n	8005b3a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ad6:	f003 031f 	and.w	r3, r3, #31
 8005ada:	2208      	movs	r2, #8
 8005adc:	409a      	lsls	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d02a      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	f003 0308 	and.w	r3, r3, #8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d025      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f022 020e 	bic.w	r2, r2, #14
 8005afe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b04:	f003 021f 	and.w	r2, r3, #31
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8005b12:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d004      	beq.n	8005b3c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
}
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005b5a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d004      	beq.n	8005b6e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005b6c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b72:	f003 021f 	and.w	r2, r3, #31
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8005b80:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d108      	bne.n	8005ba4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ba2:	e007      	b.n	8005bb4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]
}
 8005bb4:	bf00      	nop
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b087      	sub	sp, #28
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	4b16      	ldr	r3, [pc, #88]	@ (8005c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d802      	bhi.n	8005bda <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005bd4:	4b15      	ldr	r3, [pc, #84]	@ (8005c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8005bd6:	617b      	str	r3, [r7, #20]
 8005bd8:	e001      	b.n	8005bde <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005bda:	4b15      	ldr	r3, [pc, #84]	@ (8005c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005bdc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	3b08      	subs	r3, #8
 8005bea:	4a12      	ldr	r2, [pc, #72]	@ (8005c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005bec:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf0:	091b      	lsrs	r3, r3, #4
 8005bf2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bf8:	089b      	lsrs	r3, r3, #2
 8005bfa:	009a      	lsls	r2, r3, #2
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	4413      	add	r3, r2
 8005c00:	461a      	mov	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a0b      	ldr	r2, [pc, #44]	@ (8005c38 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 031f 	and.w	r3, r3, #31
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005c1a:	bf00      	nop
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40020407 	.word	0x40020407
 8005c2c:	40020800 	.word	0x40020800
 8005c30:	40020820 	.word	0x40020820
 8005c34:	cccccccd 	.word	0xcccccccd
 8005c38:	40020880 	.word	0x40020880

08005c3c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005c4c:	68fa      	ldr	r2, [r7, #12]
 8005c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	461a      	mov	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a08      	ldr	r2, [pc, #32]	@ (8005c80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005c5e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	3b01      	subs	r3, #1
 8005c64:	f003 031f 	and.w	r3, r3, #31
 8005c68:	2201      	movs	r2, #1
 8005c6a:	409a      	lsls	r2, r3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	1000823f 	.word	0x1000823f
 8005c80:	40020940 	.word	0x40020940

08005c84 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d101      	bne.n	8005c96 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e147      	b.n	8005f26 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d106      	bne.n	8005cb0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fd fde4 	bl	8003878 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f022 0210 	bic.w	r2, r2, #16
 8005cbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005cc0:	f7fd fff4 	bl	8003cac <HAL_GetTick>
 8005cc4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cc6:	e012      	b.n	8005cee <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005cc8:	f7fd fff0 	bl	8003cac <HAL_GetTick>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	2b0a      	cmp	r3, #10
 8005cd4:	d90b      	bls.n	8005cee <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005cda:	f043 0201 	orr.w	r2, r3, #1
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e11b      	b.n	8005f26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d0e5      	beq.n	8005cc8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	699a      	ldr	r2, [r3, #24]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005d0c:	f7fd ffce 	bl	8003cac <HAL_GetTick>
 8005d10:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d12:	e012      	b.n	8005d3a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005d14:	f7fd ffca 	bl	8003cac <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b0a      	cmp	r3, #10
 8005d20:	d90b      	bls.n	8005d3a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d26:	f043 0201 	orr.w	r2, r3, #1
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2203      	movs	r2, #3
 8005d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e0f5      	b.n	8005f26 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	f003 0301 	and.w	r3, r3, #1
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d0e5      	beq.n	8005d14 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	699a      	ldr	r2, [r3, #24]
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0202 	orr.w	r2, r2, #2
 8005d56:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a74      	ldr	r2, [pc, #464]	@ (8005f30 <HAL_FDCAN_Init+0x2ac>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d103      	bne.n	8005d6a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005d62:	4a74      	ldr	r2, [pc, #464]	@ (8005f34 <HAL_FDCAN_Init+0x2b0>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	7c1b      	ldrb	r3, [r3, #16]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d108      	bne.n	8005d84 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699a      	ldr	r2, [r3, #24]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d80:	619a      	str	r2, [r3, #24]
 8005d82:	e007      	b.n	8005d94 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d92:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	7c5b      	ldrb	r3, [r3, #17]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d108      	bne.n	8005dae <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005daa:	619a      	str	r2, [r3, #24]
 8005dac:	e007      	b.n	8005dbe <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699a      	ldr	r2, [r3, #24]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005dbc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	7c9b      	ldrb	r3, [r3, #18]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d108      	bne.n	8005dd8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699a      	ldr	r2, [r3, #24]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005dd4:	619a      	str	r2, [r3, #24]
 8005dd6:	e007      	b.n	8005de8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005de6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	689a      	ldr	r2, [r3, #8]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	430a      	orrs	r2, r1
 8005dfc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8005e0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	691a      	ldr	r2, [r3, #16]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f022 0210 	bic.w	r2, r2, #16
 8005e1c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d108      	bne.n	8005e38 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	699a      	ldr	r2, [r3, #24]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0204 	orr.w	r2, r2, #4
 8005e34:	619a      	str	r2, [r3, #24]
 8005e36:	e02c      	b.n	8005e92 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d028      	beq.n	8005e92 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	68db      	ldr	r3, [r3, #12]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d01c      	beq.n	8005e82 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e56:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	691a      	ldr	r2, [r3, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f042 0210 	orr.w	r2, r2, #16
 8005e66:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d110      	bne.n	8005e92 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	699a      	ldr	r2, [r3, #24]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 0220 	orr.w	r2, r2, #32
 8005e7e:	619a      	str	r2, [r3, #24]
 8005e80:	e007      	b.n	8005e92 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0220 	orr.w	r2, r2, #32
 8005e90:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	699b      	ldr	r3, [r3, #24]
 8005e96:	3b01      	subs	r3, #1
 8005e98:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ea2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005eaa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	3b01      	subs	r3, #1
 8005eb4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005eba:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005ebc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ec6:	d115      	bne.n	8005ef4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ecc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ed6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005edc:	3b01      	subs	r3, #1
 8005ede:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8005ee0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005ef0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005ef2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 f9ae 	bl	800626c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	40006400 	.word	0x40006400
 8005f34:	40006500 	.word	0x40006500

08005f38 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b08c      	sub	sp, #48	@ 0x30
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f46:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8005f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f54:	4013      	ands	r3, r2
 8005f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f5e:	f003 0307 	and.w	r3, r3, #7
 8005f62:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f7a:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f84:	4013      	ands	r3, r2
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f8e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8005f92:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	6a3a      	ldr	r2, [r7, #32]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fa6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8005faa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fb2:	69fa      	ldr	r2, [r7, #28]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fbe:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fc6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005fc8:	697b      	ldr	r3, [r7, #20]
 8005fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00b      	beq.n	8005fea <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d006      	beq.n	8005fea <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2240      	movs	r2, #64	@ 0x40
 8005fe2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f921 	bl	800622c <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d019      	beq.n	8006028 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005ff4:	69bb      	ldr	r3, [r7, #24]
 8005ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d014      	beq.n	8006028 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006006:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006010:	693a      	ldr	r2, [r7, #16]
 8006012:	4013      	ands	r3, r2
 8006014:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800601e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006020:	6939      	ldr	r1, [r7, #16]
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f8e3 	bl	80061ee <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006034:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006036:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f8a2 	bl	8006182 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800603e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006040:	2b00      	cmp	r3, #0
 8006042:	d007      	beq.n	8006054 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800604a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800604c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f8a2 	bl	8006198 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8006054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006056:	2b00      	cmp	r3, #0
 8006058:	d007      	beq.n	800606a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006060:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006062:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f000 f8a2 	bl	80061ae <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006070:	2b00      	cmp	r3, #0
 8006072:	d00c      	beq.n	800608e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006086:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f89b 	bl	80061c4 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006094:	2b00      	cmp	r3, #0
 8006096:	d018      	beq.n	80060ca <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d013      	beq.n	80060ca <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80060aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4013      	ands	r3, r2
 80060b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2280      	movs	r2, #128	@ 0x80
 80060c0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80060c2:	68f9      	ldr	r1, [r7, #12]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f887 	bl	80061d8 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00c      	beq.n	80060ee <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80060e6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f88b 	bl	8006204 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00c      	beq.n	8006112 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80060f8:	69bb      	ldr	r3, [r7, #24]
 80060fa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d007      	beq.n	8006112 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800610a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 f883 	bl	8006218 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00f      	beq.n	800613c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800612e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006134:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d007      	beq.n	8006152 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69fa      	ldr	r2, [r7, #28]
 8006148:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800614a:	69f9      	ldr	r1, [r7, #28]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f881 	bl	8006254 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	431a      	orrs	r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006170:	2b00      	cmp	r3, #0
 8006172:	d002      	beq.n	800617a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f863 	bl	8006240 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800617a:	bf00      	nop
 800617c:	3730      	adds	r7, #48	@ 0x30
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8006182:	b480      	push	{r7}
 8006184:	b083      	sub	sp, #12
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800618c:	bf00      	nop
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006196:	4770      	bx	lr

08006198 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 80061a2:	bf00      	nop
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80061ae:	b480      	push	{r7}
 80061b0:	b083      	sub	sp, #12
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80061e2:	bf00      	nop
 80061e4:	370c      	adds	r7, #12
 80061e6:	46bd      	mov	sp, r7
 80061e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ec:	4770      	bx	lr

080061ee <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80061ee:	b480      	push	{r7}
 80061f0:	b083      	sub	sp, #12
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800625e:	bf00      	nop
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
	...

0800626c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8006274:	4b2c      	ldr	r3, [pc, #176]	@ (8006328 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 8006276:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a2b      	ldr	r2, [pc, #172]	@ (800632c <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d103      	bne.n	800628a <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006288:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006298:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a0:	041a      	lsls	r2, r3, #16
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80062be:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c6:	061a      	lsls	r2, r3, #24
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	430a      	orrs	r2, r1
 80062ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e005      	b.n	800630c <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3304      	adds	r3, #4
 800630a:	60fb      	str	r3, [r7, #12]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d3f3      	bcc.n	8006300 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8006318:	bf00      	nop
 800631a:	bf00      	nop
 800631c:	3714      	adds	r7, #20
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	4000a400 	.word	0x4000a400
 800632c:	40006800 	.word	0x40006800

08006330 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e033      	b.n	80063aa <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d106      	bne.n	800635c <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7fd faf0 	bl	800393c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f854 	bl	8006410 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f822 	bl	80063b2 <FMAC_Reset>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10c      	bne.n	800638e <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006378:	f043 0210 	orr.w	r2, r3, #16
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	22a0      	movs	r2, #160	@ 0xa0
 8006384:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8006388:	2301      	movs	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	e008      	b.n	80063a0 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2200      	movs	r2, #0
 8006392:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2220      	movs	r2, #32
 8006398:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 800639c:	2300      	movs	r3, #0
 800639e:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b084      	sub	sp, #16
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80063ba:	f7fd fc77 	bl	8003cac <HAL_GetTick>
 80063be:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691a      	ldr	r2, [r3, #16]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063ce:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80063d0:	e00f      	b.n	80063f2 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 80063d2:	f7fd fc6b 	bl	8003cac <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80063e0:	d907      	bls.n	80063f2 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e00a      	b.n	8006408 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691b      	ldr	r3, [r3, #16]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1e8      	bne.n	80063d2 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3710      	adds	r7, #16
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8006410:	b580      	push	{r7, lr}
 8006412:	b082      	sub	sp, #8
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f807 	bl	800642c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f81b 	bl	800645a <FMAC_ResetOutputStateAndDataPointers>
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2200      	movs	r2, #0
 800643e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2220      	movs	r2, #32
 800644a:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800645a:	b480      	push	{r7}
 800645c:	b083      	sub	sp, #12
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006488:	b480      	push	{r7}
 800648a:	b087      	sub	sp, #28
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006492:	2300      	movs	r3, #0
 8006494:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006496:	e15a      	b.n	800674e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	2101      	movs	r1, #1
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	fa01 f303 	lsl.w	r3, r1, r3
 80064a4:	4013      	ands	r3, r2
 80064a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 814c 	beq.w	8006748 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f003 0303 	and.w	r3, r3, #3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d005      	beq.n	80064c8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d130      	bne.n	800652a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	2203      	movs	r2, #3
 80064d4:	fa02 f303 	lsl.w	r3, r2, r3
 80064d8:	43db      	mvns	r3, r3
 80064da:	693a      	ldr	r2, [r7, #16]
 80064dc:	4013      	ands	r3, r2
 80064de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	68da      	ldr	r2, [r3, #12]
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	693a      	ldr	r2, [r7, #16]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80064fe:	2201      	movs	r2, #1
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	fa02 f303 	lsl.w	r3, r2, r3
 8006506:	43db      	mvns	r3, r3
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4013      	ands	r3, r2
 800650c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	091b      	lsrs	r3, r3, #4
 8006514:	f003 0201 	and.w	r2, r3, #1
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4313      	orrs	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f003 0303 	and.w	r3, r3, #3
 8006532:	2b03      	cmp	r3, #3
 8006534:	d017      	beq.n	8006566 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	005b      	lsls	r3, r3, #1
 8006540:	2203      	movs	r2, #3
 8006542:	fa02 f303 	lsl.w	r3, r2, r3
 8006546:	43db      	mvns	r3, r3
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	689a      	ldr	r2, [r3, #8]
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	005b      	lsls	r3, r3, #1
 8006556:	fa02 f303 	lsl.w	r3, r2, r3
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	4313      	orrs	r3, r2
 800655e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	f003 0303 	and.w	r3, r3, #3
 800656e:	2b02      	cmp	r3, #2
 8006570:	d123      	bne.n	80065ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	08da      	lsrs	r2, r3, #3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3208      	adds	r2, #8
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	220f      	movs	r2, #15
 800658a:	fa02 f303 	lsl.w	r3, r2, r3
 800658e:	43db      	mvns	r3, r3
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4013      	ands	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f003 0307 	and.w	r3, r3, #7
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	fa02 f303 	lsl.w	r3, r2, r3
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	08da      	lsrs	r2, r3, #3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	3208      	adds	r2, #8
 80065b4:	6939      	ldr	r1, [r7, #16]
 80065b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	2203      	movs	r2, #3
 80065c6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ca:	43db      	mvns	r3, r3
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4013      	ands	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	f003 0203 	and.w	r2, r3, #3
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	693a      	ldr	r2, [r7, #16]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	f000 80a6 	beq.w	8006748 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065fc:	4b5b      	ldr	r3, [pc, #364]	@ (800676c <HAL_GPIO_Init+0x2e4>)
 80065fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006600:	4a5a      	ldr	r2, [pc, #360]	@ (800676c <HAL_GPIO_Init+0x2e4>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	6613      	str	r3, [r2, #96]	@ 0x60
 8006608:	4b58      	ldr	r3, [pc, #352]	@ (800676c <HAL_GPIO_Init+0x2e4>)
 800660a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	60bb      	str	r3, [r7, #8]
 8006612:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006614:	4a56      	ldr	r2, [pc, #344]	@ (8006770 <HAL_GPIO_Init+0x2e8>)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	089b      	lsrs	r3, r3, #2
 800661a:	3302      	adds	r3, #2
 800661c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006620:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f003 0303 	and.w	r3, r3, #3
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	220f      	movs	r2, #15
 800662c:	fa02 f303 	lsl.w	r3, r2, r3
 8006630:	43db      	mvns	r3, r3
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4013      	ands	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800663e:	d01f      	beq.n	8006680 <HAL_GPIO_Init+0x1f8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a4c      	ldr	r2, [pc, #304]	@ (8006774 <HAL_GPIO_Init+0x2ec>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d019      	beq.n	800667c <HAL_GPIO_Init+0x1f4>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a4b      	ldr	r2, [pc, #300]	@ (8006778 <HAL_GPIO_Init+0x2f0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d013      	beq.n	8006678 <HAL_GPIO_Init+0x1f0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a4a      	ldr	r2, [pc, #296]	@ (800677c <HAL_GPIO_Init+0x2f4>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d00d      	beq.n	8006674 <HAL_GPIO_Init+0x1ec>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	4a49      	ldr	r2, [pc, #292]	@ (8006780 <HAL_GPIO_Init+0x2f8>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d007      	beq.n	8006670 <HAL_GPIO_Init+0x1e8>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a48      	ldr	r2, [pc, #288]	@ (8006784 <HAL_GPIO_Init+0x2fc>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d101      	bne.n	800666c <HAL_GPIO_Init+0x1e4>
 8006668:	2305      	movs	r3, #5
 800666a:	e00a      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 800666c:	2306      	movs	r3, #6
 800666e:	e008      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 8006670:	2304      	movs	r3, #4
 8006672:	e006      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 8006674:	2303      	movs	r3, #3
 8006676:	e004      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 8006678:	2302      	movs	r3, #2
 800667a:	e002      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 800667c:	2301      	movs	r3, #1
 800667e:	e000      	b.n	8006682 <HAL_GPIO_Init+0x1fa>
 8006680:	2300      	movs	r3, #0
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	f002 0203 	and.w	r2, r2, #3
 8006688:	0092      	lsls	r2, r2, #2
 800668a:	4093      	lsls	r3, r2
 800668c:	693a      	ldr	r2, [r7, #16]
 800668e:	4313      	orrs	r3, r2
 8006690:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006692:	4937      	ldr	r1, [pc, #220]	@ (8006770 <HAL_GPIO_Init+0x2e8>)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	089b      	lsrs	r3, r3, #2
 8006698:	3302      	adds	r3, #2
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80066a0:	4b39      	ldr	r3, [pc, #228]	@ (8006788 <HAL_GPIO_Init+0x300>)
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	43db      	mvns	r3, r3
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4013      	ands	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d003      	beq.n	80066c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80066c4:	4a30      	ldr	r2, [pc, #192]	@ (8006788 <HAL_GPIO_Init+0x300>)
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80066ca:	4b2f      	ldr	r3, [pc, #188]	@ (8006788 <HAL_GPIO_Init+0x300>)
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	43db      	mvns	r3, r3
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	4013      	ands	r3, r2
 80066d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80066ee:	4a26      	ldr	r2, [pc, #152]	@ (8006788 <HAL_GPIO_Init+0x300>)
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80066f4:	4b24      	ldr	r3, [pc, #144]	@ (8006788 <HAL_GPIO_Init+0x300>)
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	43db      	mvns	r3, r3
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	4013      	ands	r3, r2
 8006702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d003      	beq.n	8006718 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4313      	orrs	r3, r2
 8006716:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006718:	4a1b      	ldr	r2, [pc, #108]	@ (8006788 <HAL_GPIO_Init+0x300>)
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800671e:	4b1a      	ldr	r3, [pc, #104]	@ (8006788 <HAL_GPIO_Init+0x300>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	43db      	mvns	r3, r3
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4013      	ands	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4313      	orrs	r3, r2
 8006740:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006742:	4a11      	ldr	r2, [pc, #68]	@ (8006788 <HAL_GPIO_Init+0x300>)
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	3301      	adds	r3, #1
 800674c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	fa22 f303 	lsr.w	r3, r2, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	f47f ae9d 	bne.w	8006498 <HAL_GPIO_Init+0x10>
  }
}
 800675e:	bf00      	nop
 8006760:	bf00      	nop
 8006762:	371c      	adds	r7, #28
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40021000 	.word	0x40021000
 8006770:	40010000 	.word	0x40010000
 8006774:	48000400 	.word	0x48000400
 8006778:	48000800 	.word	0x48000800
 800677c:	48000c00 	.word	0x48000c00
 8006780:	48001000 	.word	0x48001000
 8006784:	48001400 	.word	0x48001400
 8006788:	40010400 	.word	0x40010400

0800678c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800678c:	b480      	push	{r7}
 800678e:	b083      	sub	sp, #12
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	807b      	strh	r3, [r7, #2]
 8006798:	4613      	mov	r3, r2
 800679a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800679c:	787b      	ldrb	r3, [r7, #1]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d003      	beq.n	80067aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80067a2:	887a      	ldrh	r2, [r7, #2]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80067a8:	e002      	b.n	80067b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80067aa:	887a      	ldrh	r2, [r7, #2]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80067b0:	bf00      	nop
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d141      	bne.n	800684e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067ca:	4b4b      	ldr	r3, [pc, #300]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d6:	d131      	bne.n	800683c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067d8:	4b47      	ldr	r3, [pc, #284]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80067de:	4a46      	ldr	r2, [pc, #280]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067e4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067e8:	4b43      	ldr	r3, [pc, #268]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067f0:	4a41      	ldr	r2, [pc, #260]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067f8:	4b40      	ldr	r3, [pc, #256]	@ (80068fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2232      	movs	r2, #50	@ 0x32
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	4a3f      	ldr	r2, [pc, #252]	@ (8006900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	0c9b      	lsrs	r3, r3, #18
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800680e:	e002      	b.n	8006816 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	3b01      	subs	r3, #1
 8006814:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006816:	4b38      	ldr	r3, [pc, #224]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006822:	d102      	bne.n	800682a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1f2      	bne.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800682a:	4b33      	ldr	r3, [pc, #204]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006836:	d158      	bne.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006838:	2303      	movs	r3, #3
 800683a:	e057      	b.n	80068ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800683c:	4b2e      	ldr	r3, [pc, #184]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800683e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006842:	4a2d      	ldr	r2, [pc, #180]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006848:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800684c:	e04d      	b.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006854:	d141      	bne.n	80068da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006856:	4b28      	ldr	r3, [pc, #160]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800685e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006862:	d131      	bne.n	80068c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006864:	4b24      	ldr	r3, [pc, #144]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006866:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686a:	4a23      	ldr	r2, [pc, #140]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800686c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006870:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006874:	4b20      	ldr	r3, [pc, #128]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800687c:	4a1e      	ldr	r2, [pc, #120]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800687e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006882:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006884:	4b1d      	ldr	r3, [pc, #116]	@ (80068fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2232      	movs	r2, #50	@ 0x32
 800688a:	fb02 f303 	mul.w	r3, r2, r3
 800688e:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006890:	fba2 2303 	umull	r2, r3, r2, r3
 8006894:	0c9b      	lsrs	r3, r3, #18
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800689a:	e002      	b.n	80068a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	3b01      	subs	r3, #1
 80068a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068a2:	4b15      	ldr	r3, [pc, #84]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068ae:	d102      	bne.n	80068b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f2      	bne.n	800689c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068b6:	4b10      	ldr	r3, [pc, #64]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80068be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80068c2:	d112      	bne.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e011      	b.n	80068ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80068d8:	e007      	b.n	80068ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068da:	4b07      	ldr	r3, [pc, #28]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80068e2:	4a05      	ldr	r2, [pc, #20]	@ (80068f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3714      	adds	r7, #20
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	40007000 	.word	0x40007000
 80068fc:	200000b4 	.word	0x200000b4
 8006900:	431bde83 	.word	0x431bde83

08006904 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006908:	4b05      	ldr	r3, [pc, #20]	@ (8006920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	4a04      	ldr	r2, [pc, #16]	@ (8006920 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800690e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006912:	6093      	str	r3, [r2, #8]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	40007000 	.word	0x40007000

08006924 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b088      	sub	sp, #32
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d101      	bne.n	8006936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e2fe      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d075      	beq.n	8006a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006942:	4b97      	ldr	r3, [pc, #604]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	f003 030c 	and.w	r3, r3, #12
 800694a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800694c:	4b94      	ldr	r3, [pc, #592]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f003 0303 	and.w	r3, r3, #3
 8006954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b0c      	cmp	r3, #12
 800695a:	d102      	bne.n	8006962 <HAL_RCC_OscConfig+0x3e>
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2b03      	cmp	r3, #3
 8006960:	d002      	beq.n	8006968 <HAL_RCC_OscConfig+0x44>
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	2b08      	cmp	r3, #8
 8006966:	d10b      	bne.n	8006980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006968:	4b8d      	ldr	r3, [pc, #564]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d05b      	beq.n	8006a2c <HAL_RCC_OscConfig+0x108>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d157      	bne.n	8006a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	e2d9      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006988:	d106      	bne.n	8006998 <HAL_RCC_OscConfig+0x74>
 800698a:	4b85      	ldr	r3, [pc, #532]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a84      	ldr	r2, [pc, #528]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e01d      	b.n	80069d4 <HAL_RCC_OscConfig+0xb0>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80069a0:	d10c      	bne.n	80069bc <HAL_RCC_OscConfig+0x98>
 80069a2:	4b7f      	ldr	r3, [pc, #508]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a7e      	ldr	r2, [pc, #504]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80069ac:	6013      	str	r3, [r2, #0]
 80069ae:	4b7c      	ldr	r3, [pc, #496]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a7b      	ldr	r2, [pc, #492]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80069b8:	6013      	str	r3, [r2, #0]
 80069ba:	e00b      	b.n	80069d4 <HAL_RCC_OscConfig+0xb0>
 80069bc:	4b78      	ldr	r3, [pc, #480]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a77      	ldr	r2, [pc, #476]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069c6:	6013      	str	r3, [r2, #0]
 80069c8:	4b75      	ldr	r3, [pc, #468]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a74      	ldr	r2, [pc, #464]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80069d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fd f966 	bl	8003cac <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80069e4:	f7fd f962 	bl	8003cac <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b64      	cmp	r3, #100	@ 0x64
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e29e      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80069f6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0xc0>
 8006a02:	e014      	b.n	8006a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a04:	f7fd f952 	bl	8003cac <HAL_GetTick>
 8006a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a0a:	e008      	b.n	8006a1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a0c:	f7fd f94e 	bl	8003cac <HAL_GetTick>
 8006a10:	4602      	mov	r2, r0
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	2b64      	cmp	r3, #100	@ 0x64
 8006a18:	d901      	bls.n	8006a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e28a      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a1e:	4b60      	ldr	r3, [pc, #384]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f0      	bne.n	8006a0c <HAL_RCC_OscConfig+0xe8>
 8006a2a:	e000      	b.n	8006a2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0302 	and.w	r3, r3, #2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d075      	beq.n	8006b26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a3a:	4b59      	ldr	r3, [pc, #356]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f003 030c 	and.w	r3, r3, #12
 8006a42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a44:	4b56      	ldr	r3, [pc, #344]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f003 0303 	and.w	r3, r3, #3
 8006a4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	2b0c      	cmp	r3, #12
 8006a52:	d102      	bne.n	8006a5a <HAL_RCC_OscConfig+0x136>
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b02      	cmp	r3, #2
 8006a58:	d002      	beq.n	8006a60 <HAL_RCC_OscConfig+0x13c>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b04      	cmp	r3, #4
 8006a5e:	d11f      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a60:	4b4f      	ldr	r3, [pc, #316]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d005      	beq.n	8006a78 <HAL_RCC_OscConfig+0x154>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e25d      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a78:	4b49      	ldr	r3, [pc, #292]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	061b      	lsls	r3, r3, #24
 8006a86:	4946      	ldr	r1, [pc, #280]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a8c:	4b45      	ldr	r3, [pc, #276]	@ (8006ba4 <HAL_RCC_OscConfig+0x280>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7fd f8bf 	bl	8003c14 <HAL_InitTick>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d043      	beq.n	8006b24 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e249      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d023      	beq.n	8006af0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006aa8:	4b3d      	ldr	r3, [pc, #244]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006aae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab4:	f7fd f8fa 	bl	8003cac <HAL_GetTick>
 8006ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006aba:	e008      	b.n	8006ace <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006abc:	f7fd f8f6 	bl	8003cac <HAL_GetTick>
 8006ac0:	4602      	mov	r2, r0
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	1ad3      	subs	r3, r2, r3
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d901      	bls.n	8006ace <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e232      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ace:	4b34      	ldr	r3, [pc, #208]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d0f0      	beq.n	8006abc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ada:	4b31      	ldr	r3, [pc, #196]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	061b      	lsls	r3, r3, #24
 8006ae8:	492d      	ldr	r1, [pc, #180]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	604b      	str	r3, [r1, #4]
 8006aee:	e01a      	b.n	8006b26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006af0:	4b2b      	ldr	r3, [pc, #172]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a2a      	ldr	r2, [pc, #168]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006af6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fd f8d6 	bl	8003cac <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b04:	f7fd f8d2 	bl	8003cac <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e20e      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b16:	4b22      	ldr	r3, [pc, #136]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1f0      	bne.n	8006b04 <HAL_RCC_OscConfig+0x1e0>
 8006b22:	e000      	b.n	8006b26 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0308 	and.w	r3, r3, #8
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d041      	beq.n	8006bb6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	695b      	ldr	r3, [r3, #20]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01c      	beq.n	8006b74 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b3a:	4b19      	ldr	r3, [pc, #100]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b40:	4a17      	ldr	r2, [pc, #92]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4a:	f7fd f8af 	bl	8003cac <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b52:	f7fd f8ab 	bl	8003cac <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e1e7      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006b64:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d0ef      	beq.n	8006b52 <HAL_RCC_OscConfig+0x22e>
 8006b72:	e020      	b.n	8006bb6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b74:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b7a:	4a09      	ldr	r2, [pc, #36]	@ (8006ba0 <HAL_RCC_OscConfig+0x27c>)
 8006b7c:	f023 0301 	bic.w	r3, r3, #1
 8006b80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b84:	f7fd f892 	bl	8003cac <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b8a:	e00d      	b.n	8006ba8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b8c:	f7fd f88e 	bl	8003cac <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d906      	bls.n	8006ba8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e1ca      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
 8006b9e:	bf00      	nop
 8006ba0:	40021000 	.word	0x40021000
 8006ba4:	200000b8 	.word	0x200000b8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ba8:	4b8c      	ldr	r3, [pc, #560]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1ea      	bne.n	8006b8c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 80a6 	beq.w	8006d10 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006bc8:	4b84      	ldr	r3, [pc, #528]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d101      	bne.n	8006bd8 <HAL_RCC_OscConfig+0x2b4>
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <HAL_RCC_OscConfig+0x2b6>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00d      	beq.n	8006bfa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006bde:	4b7f      	ldr	r3, [pc, #508]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006be2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006be8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006bea:	4b7c      	ldr	r3, [pc, #496]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006bec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf2:	60fb      	str	r3, [r7, #12]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006bfa:	4b79      	ldr	r3, [pc, #484]	@ (8006de0 <HAL_RCC_OscConfig+0x4bc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d118      	bne.n	8006c38 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006c06:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_RCC_OscConfig+0x4bc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a75      	ldr	r2, [pc, #468]	@ (8006de0 <HAL_RCC_OscConfig+0x4bc>)
 8006c0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c12:	f7fd f84b 	bl	8003cac <HAL_GetTick>
 8006c16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c18:	e008      	b.n	8006c2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1a:	f7fd f847 	bl	8003cac <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d901      	bls.n	8006c2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	e183      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c2c:	4b6c      	ldr	r3, [pc, #432]	@ (8006de0 <HAL_RCC_OscConfig+0x4bc>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0f0      	beq.n	8006c1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d108      	bne.n	8006c52 <HAL_RCC_OscConfig+0x32e>
 8006c40:	4b66      	ldr	r3, [pc, #408]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c46:	4a65      	ldr	r2, [pc, #404]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c48:	f043 0301 	orr.w	r3, r3, #1
 8006c4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c50:	e024      	b.n	8006c9c <HAL_RCC_OscConfig+0x378>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	689b      	ldr	r3, [r3, #8]
 8006c56:	2b05      	cmp	r3, #5
 8006c58:	d110      	bne.n	8006c7c <HAL_RCC_OscConfig+0x358>
 8006c5a:	4b60      	ldr	r3, [pc, #384]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c60:	4a5e      	ldr	r2, [pc, #376]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c62:	f043 0304 	orr.w	r3, r3, #4
 8006c66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c70:	4a5a      	ldr	r2, [pc, #360]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c7a:	e00f      	b.n	8006c9c <HAL_RCC_OscConfig+0x378>
 8006c7c:	4b57      	ldr	r3, [pc, #348]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c82:	4a56      	ldr	r2, [pc, #344]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006c8c:	4b53      	ldr	r3, [pc, #332]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c92:	4a52      	ldr	r2, [pc, #328]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006c94:	f023 0304 	bic.w	r3, r3, #4
 8006c98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d016      	beq.n	8006cd2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca4:	f7fd f802 	bl	8003cac <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cac:	f7fc fffe 	bl	8003cac <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e138      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006cc2:	4b46      	ldr	r3, [pc, #280]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cc8:	f003 0302 	and.w	r3, r3, #2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d0ed      	beq.n	8006cac <HAL_RCC_OscConfig+0x388>
 8006cd0:	e015      	b.n	8006cfe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cd2:	f7fc ffeb 	bl	8003cac <HAL_GetTick>
 8006cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cd8:	e00a      	b.n	8006cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cda:	f7fc ffe7 	bl	8003cac <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d901      	bls.n	8006cf0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006cec:	2303      	movs	r3, #3
 8006cee:	e121      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006cf0:	4b3a      	ldr	r3, [pc, #232]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cf6:	f003 0302 	and.w	r3, r3, #2
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1ed      	bne.n	8006cda <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cfe:	7ffb      	ldrb	r3, [r7, #31]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d105      	bne.n	8006d10 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d04:	4b35      	ldr	r3, [pc, #212]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d08:	4a34      	ldr	r2, [pc, #208]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d0e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0320 	and.w	r3, r3, #32
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d03c      	beq.n	8006d96 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d01c      	beq.n	8006d5e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d24:	4b2d      	ldr	r3, [pc, #180]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d2c:	f043 0301 	orr.w	r3, r3, #1
 8006d30:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d34:	f7fc ffba 	bl	8003cac <HAL_GetTick>
 8006d38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d3c:	f7fc ffb6 	bl	8003cac <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e0f2      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006d4e:	4b23      	ldr	r3, [pc, #140]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d50:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d0ef      	beq.n	8006d3c <HAL_RCC_OscConfig+0x418>
 8006d5c:	e01b      	b.n	8006d96 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006d5e:	4b1f      	ldr	r3, [pc, #124]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d64:	4a1d      	ldr	r2, [pc, #116]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d66:	f023 0301 	bic.w	r3, r3, #1
 8006d6a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d6e:	f7fc ff9d 	bl	8003cac <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006d76:	f7fc ff99 	bl	8003cac <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e0d5      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d88:	4b14      	ldr	r3, [pc, #80]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006d8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1ef      	bne.n	8006d76 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f000 80c9 	beq.w	8006f32 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006da0:	4b0e      	ldr	r3, [pc, #56]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	f000 8083 	beq.w	8006eb4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d15e      	bne.n	8006e74 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006db6:	4b09      	ldr	r3, [pc, #36]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a08      	ldr	r2, [pc, #32]	@ (8006ddc <HAL_RCC_OscConfig+0x4b8>)
 8006dbc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc2:	f7fc ff73 	bl	8003cac <HAL_GetTick>
 8006dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dc8:	e00c      	b.n	8006de4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dca:	f7fc ff6f 	bl	8003cac <HAL_GetTick>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	1ad3      	subs	r3, r2, r3
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d905      	bls.n	8006de4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e0ab      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
 8006ddc:	40021000 	.word	0x40021000
 8006de0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006de4:	4b55      	ldr	r3, [pc, #340]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1ec      	bne.n	8006dca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df0:	4b52      	ldr	r3, [pc, #328]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006df2:	68da      	ldr	r2, [r3, #12]
 8006df4:	4b52      	ldr	r3, [pc, #328]	@ (8006f40 <HAL_RCC_OscConfig+0x61c>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	6a11      	ldr	r1, [r2, #32]
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006e00:	3a01      	subs	r2, #1
 8006e02:	0112      	lsls	r2, r2, #4
 8006e04:	4311      	orrs	r1, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8006e0a:	0212      	lsls	r2, r2, #8
 8006e0c:	4311      	orrs	r1, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006e12:	0852      	lsrs	r2, r2, #1
 8006e14:	3a01      	subs	r2, #1
 8006e16:	0552      	lsls	r2, r2, #21
 8006e18:	4311      	orrs	r1, r2
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e1e:	0852      	lsrs	r2, r2, #1
 8006e20:	3a01      	subs	r2, #1
 8006e22:	0652      	lsls	r2, r2, #25
 8006e24:	4311      	orrs	r1, r2
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e2a:	06d2      	lsls	r2, r2, #27
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	4943      	ldr	r1, [pc, #268]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e34:	4b41      	ldr	r3, [pc, #260]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a40      	ldr	r2, [pc, #256]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006e40:	4b3e      	ldr	r3, [pc, #248]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e42:	68db      	ldr	r3, [r3, #12]
 8006e44:	4a3d      	ldr	r2, [pc, #244]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fc ff2e 	bl	8003cac <HAL_GetTick>
 8006e50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fc ff2a 	bl	8003cac <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e066      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e66:	4b35      	ldr	r3, [pc, #212]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0f0      	beq.n	8006e54 <HAL_RCC_OscConfig+0x530>
 8006e72:	e05e      	b.n	8006f32 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e74:	4b31      	ldr	r3, [pc, #196]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a30      	ldr	r2, [pc, #192]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e80:	f7fc ff14 	bl	8003cac <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e88:	f7fc ff10 	bl	8003cac <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e04c      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e9a:	4b28      	ldr	r3, [pc, #160]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006ea6:	4b25      	ldr	r3, [pc, #148]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006ea8:	68da      	ldr	r2, [r3, #12]
 8006eaa:	4924      	ldr	r1, [pc, #144]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006eac:	4b25      	ldr	r3, [pc, #148]	@ (8006f44 <HAL_RCC_OscConfig+0x620>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	60cb      	str	r3, [r1, #12]
 8006eb2:	e03e      	b.n	8006f32 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	69db      	ldr	r3, [r3, #28]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e039      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ec0:	4b1e      	ldr	r3, [pc, #120]	@ (8006f3c <HAL_RCC_OscConfig+0x618>)
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f003 0203 	and.w	r2, r3, #3
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d12c      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d123      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ef0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d11b      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d113      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	3b01      	subs	r3, #1
 8006f14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d109      	bne.n	8006f2e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f24:	085b      	lsrs	r3, r3, #1
 8006f26:	3b01      	subs	r3, #1
 8006f28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d001      	beq.n	8006f32 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e000      	b.n	8006f34 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3720      	adds	r7, #32
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	019f800c 	.word	0x019f800c
 8006f44:	feeefffc 	.word	0xfeeefffc

08006f48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b086      	sub	sp, #24
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006f52:	2300      	movs	r3, #0
 8006f54:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d101      	bne.n	8006f60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e11e      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f60:	4b91      	ldr	r3, [pc, #580]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d910      	bls.n	8006f90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f6e:	4b8e      	ldr	r3, [pc, #568]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f023 020f 	bic.w	r2, r3, #15
 8006f76:	498c      	ldr	r1, [pc, #560]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f7e:	4b8a      	ldr	r3, [pc, #552]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f003 030f 	and.w	r3, r3, #15
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d001      	beq.n	8006f90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	e106      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d073      	beq.n	8007084 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	2b03      	cmp	r3, #3
 8006fa2:	d129      	bne.n	8006ff8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa4:	4b81      	ldr	r3, [pc, #516]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d101      	bne.n	8006fb4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e0f4      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006fb4:	f000 f966 	bl	8007284 <RCC_GetSysClockFreqFromPLLSource>
 8006fb8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4a7c      	ldr	r2, [pc, #496]	@ (80071b0 <HAL_RCC_ClockConfig+0x268>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d93f      	bls.n	8007042 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fc2:	4b7a      	ldr	r3, [pc, #488]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d033      	beq.n	8007042 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d12f      	bne.n	8007042 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fe2:	4b72      	ldr	r3, [pc, #456]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006fea:	4a70      	ldr	r2, [pc, #448]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8006fec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ff0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006ff2:	2380      	movs	r3, #128	@ 0x80
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	e024      	b.n	8007042 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d107      	bne.n	8007010 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007000:	4b6a      	ldr	r3, [pc, #424]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d109      	bne.n	8007020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e0c6      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007010:	4b66      	ldr	r3, [pc, #408]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0be      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007020:	f000 f8ce 	bl	80071c0 <HAL_RCC_GetSysClockFreq>
 8007024:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	4a61      	ldr	r2, [pc, #388]	@ (80071b0 <HAL_RCC_ClockConfig+0x268>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d909      	bls.n	8007042 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800702e:	4b5f      	ldr	r3, [pc, #380]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007036:	4a5d      	ldr	r2, [pc, #372]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007038:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800703c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800703e:	2380      	movs	r3, #128	@ 0x80
 8007040:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007042:	4b5a      	ldr	r3, [pc, #360]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f023 0203 	bic.w	r2, r3, #3
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	4957      	ldr	r1, [pc, #348]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007050:	4313      	orrs	r3, r2
 8007052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007054:	f7fc fe2a 	bl	8003cac <HAL_GetTick>
 8007058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800705a:	e00a      	b.n	8007072 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800705c:	f7fc fe26 	bl	8003cac <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e095      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007072:	4b4e      	ldr	r3, [pc, #312]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	f003 020c 	and.w	r2, r3, #12
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	429a      	cmp	r2, r3
 8007082:	d1eb      	bne.n	800705c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d023      	beq.n	80070d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800709c:	4b43      	ldr	r3, [pc, #268]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	4a42      	ldr	r2, [pc, #264]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d007      	beq.n	80070c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80070b4:	4b3d      	ldr	r3, [pc, #244]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80070bc:	4a3b      	ldr	r2, [pc, #236]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80070c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c4:	4b39      	ldr	r3, [pc, #228]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	4936      	ldr	r1, [pc, #216]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	608b      	str	r3, [r1, #8]
 80070d6:	e008      	b.n	80070ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80070d8:	697b      	ldr	r3, [r7, #20]
 80070da:	2b80      	cmp	r3, #128	@ 0x80
 80070dc:	d105      	bne.n	80070ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80070de:	4b33      	ldr	r3, [pc, #204]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	4a32      	ldr	r2, [pc, #200]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 80070e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070ea:	4b2f      	ldr	r3, [pc, #188]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f003 030f 	and.w	r3, r3, #15
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d21d      	bcs.n	8007134 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070f8:	4b2b      	ldr	r3, [pc, #172]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f023 020f 	bic.w	r2, r3, #15
 8007100:	4929      	ldr	r1, [pc, #164]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	4313      	orrs	r3, r2
 8007106:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007108:	f7fc fdd0 	bl	8003cac <HAL_GetTick>
 800710c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800710e:	e00a      	b.n	8007126 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007110:	f7fc fdcc 	bl	8003cac <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800711e:	4293      	cmp	r3, r2
 8007120:	d901      	bls.n	8007126 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e03b      	b.n	800719e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007126:	4b20      	ldr	r3, [pc, #128]	@ (80071a8 <HAL_RCC_ClockConfig+0x260>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f003 030f 	and.w	r3, r3, #15
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	429a      	cmp	r2, r3
 8007132:	d1ed      	bne.n	8007110 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007140:	4b1a      	ldr	r3, [pc, #104]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4917      	ldr	r1, [pc, #92]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 800714e:	4313      	orrs	r3, r2
 8007150:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800715e:	4b13      	ldr	r3, [pc, #76]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 8007160:	689b      	ldr	r3, [r3, #8]
 8007162:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	691b      	ldr	r3, [r3, #16]
 800716a:	00db      	lsls	r3, r3, #3
 800716c:	490f      	ldr	r1, [pc, #60]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007172:	f000 f825 	bl	80071c0 <HAL_RCC_GetSysClockFreq>
 8007176:	4602      	mov	r2, r0
 8007178:	4b0c      	ldr	r3, [pc, #48]	@ (80071ac <HAL_RCC_ClockConfig+0x264>)
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	091b      	lsrs	r3, r3, #4
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	490c      	ldr	r1, [pc, #48]	@ (80071b4 <HAL_RCC_ClockConfig+0x26c>)
 8007184:	5ccb      	ldrb	r3, [r1, r3]
 8007186:	f003 031f 	and.w	r3, r3, #31
 800718a:	fa22 f303 	lsr.w	r3, r2, r3
 800718e:	4a0a      	ldr	r2, [pc, #40]	@ (80071b8 <HAL_RCC_ClockConfig+0x270>)
 8007190:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007192:	4b0a      	ldr	r3, [pc, #40]	@ (80071bc <HAL_RCC_ClockConfig+0x274>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4618      	mov	r0, r3
 8007198:	f7fc fd3c 	bl	8003c14 <HAL_InitTick>
 800719c:	4603      	mov	r3, r0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3718      	adds	r7, #24
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40022000 	.word	0x40022000
 80071ac:	40021000 	.word	0x40021000
 80071b0:	04c4b400 	.word	0x04c4b400
 80071b4:	0800abb0 	.word	0x0800abb0
 80071b8:	200000b4 	.word	0x200000b4
 80071bc:	200000b8 	.word	0x200000b8

080071c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b087      	sub	sp, #28
 80071c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80071c6:	4b2c      	ldr	r3, [pc, #176]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 030c 	and.w	r3, r3, #12
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d102      	bne.n	80071d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80071d2:	4b2a      	ldr	r3, [pc, #168]	@ (800727c <HAL_RCC_GetSysClockFreq+0xbc>)
 80071d4:	613b      	str	r3, [r7, #16]
 80071d6:	e047      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80071d8:	4b27      	ldr	r3, [pc, #156]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 030c 	and.w	r3, r3, #12
 80071e0:	2b08      	cmp	r3, #8
 80071e2:	d102      	bne.n	80071ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80071e4:	4b26      	ldr	r3, [pc, #152]	@ (8007280 <HAL_RCC_GetSysClockFreq+0xc0>)
 80071e6:	613b      	str	r3, [r7, #16]
 80071e8:	e03e      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80071ea:	4b23      	ldr	r3, [pc, #140]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	f003 030c 	and.w	r3, r3, #12
 80071f2:	2b0c      	cmp	r3, #12
 80071f4:	d136      	bne.n	8007264 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80071f6:	4b20      	ldr	r3, [pc, #128]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	f003 0303 	and.w	r3, r3, #3
 80071fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007200:	4b1d      	ldr	r3, [pc, #116]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	091b      	lsrs	r3, r3, #4
 8007206:	f003 030f 	and.w	r3, r3, #15
 800720a:	3301      	adds	r3, #1
 800720c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b03      	cmp	r3, #3
 8007212:	d10c      	bne.n	800722e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007214:	4a1a      	ldr	r2, [pc, #104]	@ (8007280 <HAL_RCC_GetSysClockFreq+0xc0>)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	fbb2 f3f3 	udiv	r3, r2, r3
 800721c:	4a16      	ldr	r2, [pc, #88]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800721e:	68d2      	ldr	r2, [r2, #12]
 8007220:	0a12      	lsrs	r2, r2, #8
 8007222:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007226:	fb02 f303 	mul.w	r3, r2, r3
 800722a:	617b      	str	r3, [r7, #20]
      break;
 800722c:	e00c      	b.n	8007248 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800722e:	4a13      	ldr	r2, [pc, #76]	@ (800727c <HAL_RCC_GetSysClockFreq+0xbc>)
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	fbb2 f3f3 	udiv	r3, r2, r3
 8007236:	4a10      	ldr	r2, [pc, #64]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007238:	68d2      	ldr	r2, [r2, #12]
 800723a:	0a12      	lsrs	r2, r2, #8
 800723c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8007240:	fb02 f303 	mul.w	r3, r2, r3
 8007244:	617b      	str	r3, [r7, #20]
      break;
 8007246:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007248:	4b0b      	ldr	r3, [pc, #44]	@ (8007278 <HAL_RCC_GetSysClockFreq+0xb8>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	0e5b      	lsrs	r3, r3, #25
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	3301      	adds	r3, #1
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	e001      	b.n	8007268 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007268:	693b      	ldr	r3, [r7, #16]
}
 800726a:	4618      	mov	r0, r3
 800726c:	371c      	adds	r7, #28
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40021000 	.word	0x40021000
 800727c:	00f42400 	.word	0x00f42400
 8007280:	007a1200 	.word	0x007a1200

08007284 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800728a:	4b1e      	ldr	r3, [pc, #120]	@ (8007304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	f003 0303 	and.w	r3, r3, #3
 8007292:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007294:	4b1b      	ldr	r3, [pc, #108]	@ (8007304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f003 030f 	and.w	r3, r3, #15
 800729e:	3301      	adds	r3, #1
 80072a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	2b03      	cmp	r3, #3
 80072a6:	d10c      	bne.n	80072c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072a8:	4a17      	ldr	r2, [pc, #92]	@ (8007308 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80072b0:	4a14      	ldr	r2, [pc, #80]	@ (8007304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072b2:	68d2      	ldr	r2, [r2, #12]
 80072b4:	0a12      	lsrs	r2, r2, #8
 80072b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072ba:	fb02 f303 	mul.w	r3, r2, r3
 80072be:	617b      	str	r3, [r7, #20]
    break;
 80072c0:	e00c      	b.n	80072dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072c2:	4a12      	ldr	r2, [pc, #72]	@ (800730c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	4a0e      	ldr	r2, [pc, #56]	@ (8007304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072cc:	68d2      	ldr	r2, [r2, #12]
 80072ce:	0a12      	lsrs	r2, r2, #8
 80072d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80072d4:	fb02 f303 	mul.w	r3, r2, r3
 80072d8:	617b      	str	r3, [r7, #20]
    break;
 80072da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072dc:	4b09      	ldr	r3, [pc, #36]	@ (8007304 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072de:	68db      	ldr	r3, [r3, #12]
 80072e0:	0e5b      	lsrs	r3, r3, #25
 80072e2:	f003 0303 	and.w	r3, r3, #3
 80072e6:	3301      	adds	r3, #1
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80072ec:	697a      	ldr	r2, [r7, #20]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072f6:	687b      	ldr	r3, [r7, #4]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	371c      	adds	r7, #28
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr
 8007304:	40021000 	.word	0x40021000
 8007308:	007a1200 	.word	0x007a1200
 800730c:	00f42400 	.word	0x00f42400

08007310 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007318:	2300      	movs	r3, #0
 800731a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800731c:	2300      	movs	r3, #0
 800731e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007328:	2b00      	cmp	r3, #0
 800732a:	f000 8098 	beq.w	800745e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800732e:	2300      	movs	r3, #0
 8007330:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007332:	4b43      	ldr	r3, [pc, #268]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007334:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10d      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800733e:	4b40      	ldr	r3, [pc, #256]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007342:	4a3f      	ldr	r2, [pc, #252]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007348:	6593      	str	r3, [r2, #88]	@ 0x58
 800734a:	4b3d      	ldr	r3, [pc, #244]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800734c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800734e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007352:	60bb      	str	r3, [r7, #8]
 8007354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007356:	2301      	movs	r3, #1
 8007358:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800735a:	4b3a      	ldr	r3, [pc, #232]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a39      	ldr	r2, [pc, #228]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007366:	f7fc fca1 	bl	8003cac <HAL_GetTick>
 800736a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736c:	e009      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800736e:	f7fc fc9d 	bl	8003cac <HAL_GetTick>
 8007372:	4602      	mov	r2, r0
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	1ad3      	subs	r3, r2, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d902      	bls.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	74fb      	strb	r3, [r7, #19]
        break;
 8007380:	e005      	b.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007382:	4b30      	ldr	r3, [pc, #192]	@ (8007444 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800738a:	2b00      	cmp	r3, #0
 800738c:	d0ef      	beq.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800738e:	7cfb      	ldrb	r3, [r7, #19]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d159      	bne.n	8007448 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007394:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007396:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800739a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800739e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d01e      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d019      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073b0:	4b23      	ldr	r3, [pc, #140]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073bc:	4b20      	ldr	r3, [pc, #128]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073c2:	4a1f      	ldr	r2, [pc, #124]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d2:	4a1b      	ldr	r2, [pc, #108]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073dc:	4a18      	ldr	r2, [pc, #96]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d016      	beq.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ee:	f7fc fc5d 	bl	8003cac <HAL_GetTick>
 80073f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073f4:	e00b      	b.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fc fc59 	bl	8003cac <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007404:	4293      	cmp	r3, r2
 8007406:	d902      	bls.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8007408:	2303      	movs	r3, #3
 800740a:	74fb      	strb	r3, [r7, #19]
            break;
 800740c:	e006      	b.n	800741c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800740e:	4b0c      	ldr	r3, [pc, #48]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007410:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007414:	f003 0302 	and.w	r3, r3, #2
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0ec      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800741c:	7cfb      	ldrb	r3, [r7, #19]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007428:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007430:	4903      	ldr	r1, [pc, #12]	@ (8007440 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007438:	e008      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800743a:	7cfb      	ldrb	r3, [r7, #19]
 800743c:	74bb      	strb	r3, [r7, #18]
 800743e:	e005      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007440:	40021000 	.word	0x40021000
 8007444:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007448:	7cfb      	ldrb	r3, [r7, #19]
 800744a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800744c:	7c7b      	ldrb	r3, [r7, #17]
 800744e:	2b01      	cmp	r3, #1
 8007450:	d105      	bne.n	800745e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007452:	4ba7      	ldr	r3, [pc, #668]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007456:	4aa6      	ldr	r2, [pc, #664]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007458:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800745c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0301 	and.w	r3, r3, #1
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800746a:	4ba1      	ldr	r3, [pc, #644]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800746c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007470:	f023 0203 	bic.w	r2, r3, #3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	499d      	ldr	r1, [pc, #628]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800747a:	4313      	orrs	r3, r2
 800747c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f003 0302 	and.w	r3, r3, #2
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800748c:	4b98      	ldr	r3, [pc, #608]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007492:	f023 020c 	bic.w	r2, r3, #12
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	4995      	ldr	r1, [pc, #596]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800749c:	4313      	orrs	r3, r2
 800749e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074ae:	4b90      	ldr	r3, [pc, #576]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	498c      	ldr	r1, [pc, #560]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00a      	beq.n	80074e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074d0:	4b87      	ldr	r3, [pc, #540]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	4984      	ldr	r1, [pc, #528]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80074f2:	4b7f      	ldr	r3, [pc, #508]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	497b      	ldr	r1, [pc, #492]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007502:	4313      	orrs	r3, r2
 8007504:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00a      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007514:	4b76      	ldr	r3, [pc, #472]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800751a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	4973      	ldr	r1, [pc, #460]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007524:	4313      	orrs	r3, r2
 8007526:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d00a      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007536:	4b6e      	ldr	r3, [pc, #440]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800753c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	69db      	ldr	r3, [r3, #28]
 8007544:	496a      	ldr	r1, [pc, #424]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007554:	2b00      	cmp	r3, #0
 8007556:	d00a      	beq.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007558:	4b65      	ldr	r3, [pc, #404]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800755e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a1b      	ldr	r3, [r3, #32]
 8007566:	4962      	ldr	r1, [pc, #392]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007568:	4313      	orrs	r3, r2
 800756a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00a      	beq.n	8007590 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800757a:	4b5d      	ldr	r3, [pc, #372]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800757c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007580:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007588:	4959      	ldr	r1, [pc, #356]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800758a:	4313      	orrs	r3, r2
 800758c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007598:	2b00      	cmp	r3, #0
 800759a:	d00a      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800759c:	4b54      	ldr	r3, [pc, #336]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075a2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075aa:	4951      	ldr	r1, [pc, #324]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d015      	beq.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80075be:	4b4c      	ldr	r3, [pc, #304]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075c4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075cc:	4948      	ldr	r1, [pc, #288]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075dc:	d105      	bne.n	80075ea <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075de:	4b44      	ldr	r3, [pc, #272]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	4a43      	ldr	r2, [pc, #268]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80075e8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d015      	beq.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075f6:	4b3e      	ldr	r3, [pc, #248]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007604:	493a      	ldr	r1, [pc, #232]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007606:	4313      	orrs	r3, r2
 8007608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007610:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007614:	d105      	bne.n	8007622 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007616:	4b36      	ldr	r3, [pc, #216]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	4a35      	ldr	r2, [pc, #212]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800761c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007620:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d015      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800762e:	4b30      	ldr	r3, [pc, #192]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007630:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007634:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800763c:	492c      	ldr	r1, [pc, #176]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800763e:	4313      	orrs	r3, r2
 8007640:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007648:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800764c:	d105      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800764e:	4b28      	ldr	r3, [pc, #160]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	4a27      	ldr	r2, [pc, #156]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007658:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007662:	2b00      	cmp	r3, #0
 8007664:	d015      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007666:	4b22      	ldr	r3, [pc, #136]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007668:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800766c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007674:	491e      	ldr	r1, [pc, #120]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007680:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007684:	d105      	bne.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007686:	4b1a      	ldr	r3, [pc, #104]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	4a19      	ldr	r2, [pc, #100]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800768c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007690:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800769a:	2b00      	cmp	r3, #0
 800769c:	d015      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800769e:	4b14      	ldr	r3, [pc, #80]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076ac:	4910      	ldr	r1, [pc, #64]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80076bc:	d105      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80076be:	4b0c      	ldr	r3, [pc, #48]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	4a0b      	ldr	r2, [pc, #44]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80076c8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d018      	beq.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80076d6:	4b06      	ldr	r3, [pc, #24]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076dc:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076e4:	4902      	ldr	r1, [pc, #8]	@ (80076f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	e001      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80076f0:	40021000 	.word	0x40021000
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076fa:	d105      	bne.n	8007708 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076fc:	4b21      	ldr	r3, [pc, #132]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	4a20      	ldr	r2, [pc, #128]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007706:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d015      	beq.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007714:	4b1b      	ldr	r3, [pc, #108]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800771a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007722:	4918      	ldr	r1, [pc, #96]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007724:	4313      	orrs	r3, r2
 8007726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800772e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007732:	d105      	bne.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007734:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007736:	68db      	ldr	r3, [r3, #12]
 8007738:	4a12      	ldr	r2, [pc, #72]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800773a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800773e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d015      	beq.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800774c:	4b0d      	ldr	r3, [pc, #52]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800774e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800775a:	490a      	ldr	r1, [pc, #40]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800775c:	4313      	orrs	r3, r2
 800775e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800776a:	d105      	bne.n	8007778 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800776c:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	4a04      	ldr	r2, [pc, #16]	@ (8007784 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8007772:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007776:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007778:	7cbb      	ldrb	r3, [r7, #18]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	40021000 	.word	0x40021000

08007788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e09d      	b.n	80078d6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d108      	bne.n	80077b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077aa:	d009      	beq.n	80077c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2200      	movs	r2, #0
 80077b0:	61da      	str	r2, [r3, #28]
 80077b2:	e005      	b.n	80077c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2200      	movs	r2, #0
 80077be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d106      	bne.n	80077e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fc f8ce 	bl	800397c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	681a      	ldr	r2, [r3, #0]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007800:	d902      	bls.n	8007808 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007802:	2300      	movs	r3, #0
 8007804:	60fb      	str	r3, [r7, #12]
 8007806:	e002      	b.n	800780e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007808:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800780c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	68db      	ldr	r3, [r3, #12]
 8007812:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007816:	d007      	beq.n	8007828 <HAL_SPI_Init+0xa0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007820:	d002      	beq.n	8007828 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007838:	431a      	orrs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	691b      	ldr	r3, [r3, #16]
 800783e:	f003 0302 	and.w	r3, r3, #2
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	431a      	orrs	r2, r3
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007856:	431a      	orrs	r2, r3
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	69db      	ldr	r3, [r3, #28]
 800785c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007860:	431a      	orrs	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6a1b      	ldr	r3, [r3, #32]
 8007866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800786a:	ea42 0103 	orr.w	r1, r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007872:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	699b      	ldr	r3, [r3, #24]
 8007882:	0c1b      	lsrs	r3, r3, #16
 8007884:	f003 0204 	and.w	r2, r3, #4
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800788c:	f003 0310 	and.w	r3, r3, #16
 8007890:	431a      	orrs	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007896:	f003 0308 	and.w	r3, r3, #8
 800789a:	431a      	orrs	r2, r3
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078a4:	ea42 0103 	orr.w	r1, r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	430a      	orrs	r2, r1
 80078b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	69da      	ldr	r2, [r3, #28]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2201      	movs	r2, #1
 80078d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80078de:	b580      	push	{r7, lr}
 80078e0:	b08a      	sub	sp, #40	@ 0x28
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	60f8      	str	r0, [r7, #12]
 80078e6:	60b9      	str	r1, [r7, #8]
 80078e8:	607a      	str	r2, [r7, #4]
 80078ea:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078ec:	2301      	movs	r3, #1
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80078f0:	2300      	movs	r3, #0
 80078f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80078fc:	2b01      	cmp	r3, #1
 80078fe:	d101      	bne.n	8007904 <HAL_SPI_TransmitReceive+0x26>
 8007900:	2302      	movs	r3, #2
 8007902:	e20a      	b.n	8007d1a <HAL_SPI_TransmitReceive+0x43c>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800790c:	f7fc f9ce 	bl	8003cac <HAL_GetTick>
 8007910:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007918:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8007920:	887b      	ldrh	r3, [r7, #2]
 8007922:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007924:	887b      	ldrh	r3, [r7, #2]
 8007926:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007928:	7efb      	ldrb	r3, [r7, #27]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d00e      	beq.n	800794c <HAL_SPI_TransmitReceive+0x6e>
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007934:	d106      	bne.n	8007944 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d102      	bne.n	8007944 <HAL_SPI_TransmitReceive+0x66>
 800793e:	7efb      	ldrb	r3, [r7, #27]
 8007940:	2b04      	cmp	r3, #4
 8007942:	d003      	beq.n	800794c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007944:	2302      	movs	r3, #2
 8007946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800794a:	e1e0      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d005      	beq.n	800795e <HAL_SPI_TransmitReceive+0x80>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d002      	beq.n	800795e <HAL_SPI_TransmitReceive+0x80>
 8007958:	887b      	ldrh	r3, [r7, #2]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8007964:	e1d3      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b04      	cmp	r3, #4
 8007970:	d003      	beq.n	800797a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2205      	movs	r2, #5
 8007976:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	887a      	ldrh	r2, [r7, #2]
 800798a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	887a      	ldrh	r2, [r7, #2]
 8007992:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	68ba      	ldr	r2, [r7, #8]
 800799a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	887a      	ldrh	r2, [r7, #2]
 80079a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	887a      	ldrh	r2, [r7, #2]
 80079a6:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2200      	movs	r2, #0
 80079ac:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68db      	ldr	r3, [r3, #12]
 80079b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80079bc:	d802      	bhi.n	80079c4 <HAL_SPI_TransmitReceive+0xe6>
 80079be:	8a3b      	ldrh	r3, [r7, #16]
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d908      	bls.n	80079d6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685a      	ldr	r2, [r3, #4]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80079d2:	605a      	str	r2, [r3, #4]
 80079d4:	e007      	b.n	80079e6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80079e4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f0:	2b40      	cmp	r3, #64	@ 0x40
 80079f2:	d007      	beq.n	8007a04 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007a02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007a0c:	f240 8081 	bls.w	8007b12 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d002      	beq.n	8007a1e <HAL_SPI_TransmitReceive+0x140>
 8007a18:	8a7b      	ldrh	r3, [r7, #18]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d16d      	bne.n	8007afa <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a22:	881a      	ldrh	r2, [r3, #0]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2e:	1c9a      	adds	r2, r3, #2
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	b29a      	uxth	r2, r3
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a42:	e05a      	b.n	8007afa <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b02      	cmp	r3, #2
 8007a50:	d11b      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x1ac>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d016      	beq.n	8007a8a <HAL_SPI_TransmitReceive+0x1ac>
 8007a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d113      	bne.n	8007a8a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a66:	881a      	ldrh	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	1c9a      	adds	r2, r3, #2
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	3b01      	subs	r3, #1
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d11c      	bne.n	8007ad2 <HAL_SPI_TransmitReceive+0x1f4>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d016      	beq.n	8007ad2 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aae:	b292      	uxth	r2, r2
 8007ab0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ab6:	1c9a      	adds	r2, r3, #2
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ace:	2301      	movs	r3, #1
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ad2:	f7fc f8eb 	bl	8003cac <HAL_GetTick>
 8007ad6:	4602      	mov	r2, r0
 8007ad8:	69fb      	ldr	r3, [r7, #28]
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d80b      	bhi.n	8007afa <HAL_SPI_TransmitReceive+0x21c>
 8007ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d007      	beq.n	8007afa <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007af8:	e109      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d19f      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x166>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d199      	bne.n	8007a44 <HAL_SPI_TransmitReceive+0x166>
 8007b10:	e0e3      	b.n	8007cda <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_SPI_TransmitReceive+0x244>
 8007b1a:	8a7b      	ldrh	r3, [r7, #18]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	f040 80cf 	bne.w	8007cc0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b26:	b29b      	uxth	r3, r3
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d912      	bls.n	8007b52 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b30:	881a      	ldrh	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b02      	subs	r3, #2
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007b50:	e0b6      	b.n	8007cc0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	330c      	adds	r3, #12
 8007b5c:	7812      	ldrb	r2, [r2, #0]
 8007b5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	3b01      	subs	r3, #1
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b78:	e0a2      	b.n	8007cc0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d134      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x314>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d02f      	beq.n	8007bf2 <HAL_SPI_TransmitReceive+0x314>
 8007b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d12c      	bne.n	8007bf2 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d912      	bls.n	8007bc8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ba6:	881a      	ldrh	r2, [r3, #0]
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb2:	1c9a      	adds	r2, r3, #2
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	3b02      	subs	r3, #2
 8007bc0:	b29a      	uxth	r2, r3
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007bc6:	e012      	b.n	8007bee <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	330c      	adds	r3, #12
 8007bd2:	7812      	ldrb	r2, [r2, #0]
 8007bd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bda:	1c5a      	adds	r2, r3, #1
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	3b01      	subs	r3, #1
 8007be8:	b29a      	uxth	r2, r3
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0301 	and.w	r3, r3, #1
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d148      	bne.n	8007c92 <HAL_SPI_TransmitReceive+0x3b4>
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d042      	beq.n	8007c92 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d923      	bls.n	8007c60 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68da      	ldr	r2, [r3, #12]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c22:	b292      	uxth	r2, r2
 8007c24:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2a:	1c9a      	adds	r2, r3, #2
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c36:	b29b      	uxth	r3, r3
 8007c38:	3b02      	subs	r3, #2
 8007c3a:	b29a      	uxth	r2, r3
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d81f      	bhi.n	8007c8e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c5c:	605a      	str	r2, [r3, #4]
 8007c5e:	e016      	b.n	8007c8e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f103 020c 	add.w	r2, r3, #12
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	b2d2      	uxtb	r2, r2
 8007c70:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	3b01      	subs	r3, #1
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c92:	f7fc f80b 	bl	8003cac <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d803      	bhi.n	8007caa <HAL_SPI_TransmitReceive+0x3cc>
 8007ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ca8:	d102      	bne.n	8007cb0 <HAL_SPI_TransmitReceive+0x3d2>
 8007caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d107      	bne.n	8007cc0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8007cb0:	2303      	movs	r3, #3
 8007cb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2201      	movs	r2, #1
 8007cba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8007cbe:	e026      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f47f af57 	bne.w	8007b7a <HAL_SPI_TransmitReceive+0x29c>
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	f47f af50 	bne.w	8007b7a <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	f000 f93e 	bl	8007f60 <SPI_EndRxTxTransaction>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d005      	beq.n	8007cf6 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8007d04:	e003      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2201      	movs	r2, #1
 8007d0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8007d16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3728      	adds	r7, #40	@ 0x28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
	...

08007d24 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b088      	sub	sp, #32
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	60b9      	str	r1, [r7, #8]
 8007d2e:	603b      	str	r3, [r7, #0]
 8007d30:	4613      	mov	r3, r2
 8007d32:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007d34:	f7fb ffba 	bl	8003cac <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	683a      	ldr	r2, [r7, #0]
 8007d40:	4413      	add	r3, r2
 8007d42:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007d44:	f7fb ffb2 	bl	8003cac <HAL_GetTick>
 8007d48:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007d4a:	4b39      	ldr	r3, [pc, #228]	@ (8007e30 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	015b      	lsls	r3, r3, #5
 8007d50:	0d1b      	lsrs	r3, r3, #20
 8007d52:	69fa      	ldr	r2, [r7, #28]
 8007d54:	fb02 f303 	mul.w	r3, r2, r3
 8007d58:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007d5a:	e054      	b.n	8007e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d62:	d050      	beq.n	8007e06 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007d64:	f7fb ffa2 	bl	8003cac <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	69fa      	ldr	r2, [r7, #28]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d902      	bls.n	8007d7a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d13d      	bne.n	8007df6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007d88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d92:	d111      	bne.n	8007db8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	689b      	ldr	r3, [r3, #8]
 8007d98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d9c:	d004      	beq.n	8007da8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da6:	d107      	bne.n	8007db8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007db6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007dc0:	d10f      	bne.n	8007de2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007dd0:	601a      	str	r2, [r3, #0]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007de0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007df2:	2303      	movs	r3, #3
 8007df4:	e017      	b.n	8007e26 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d101      	bne.n	8007e00 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	4013      	ands	r3, r2
 8007e10:	68ba      	ldr	r2, [r7, #8]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	bf0c      	ite	eq
 8007e16:	2301      	moveq	r3, #1
 8007e18:	2300      	movne	r3, #0
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d19b      	bne.n	8007d5c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007e24:	2300      	movs	r3, #0
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3720      	adds	r7, #32
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	200000b4 	.word	0x200000b4

08007e34 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b08a      	sub	sp, #40	@ 0x28
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60f8      	str	r0, [r7, #12]
 8007e3c:	60b9      	str	r1, [r7, #8]
 8007e3e:	607a      	str	r2, [r7, #4]
 8007e40:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8007e42:	2300      	movs	r3, #0
 8007e44:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007e46:	f7fb ff31 	bl	8003cac <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	683a      	ldr	r2, [r7, #0]
 8007e52:	4413      	add	r3, r2
 8007e54:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007e56:	f7fb ff29 	bl	8003cac <HAL_GetTick>
 8007e5a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	330c      	adds	r3, #12
 8007e62:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007e64:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00da      	lsls	r2, r3, #3
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	0d1b      	lsrs	r3, r3, #20
 8007e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e76:	fb02 f303 	mul.w	r3, r2, r3
 8007e7a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007e7c:	e060      	b.n	8007f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007e84:	d107      	bne.n	8007e96 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d104      	bne.n	8007e96 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d050      	beq.n	8007f40 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007e9e:	f7fb ff05 	bl	8003cac <HAL_GetTick>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d902      	bls.n	8007eb4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8007eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d13d      	bne.n	8007f30 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	685a      	ldr	r2, [r3, #4]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ec2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ecc:	d111      	bne.n	8007ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed6:	d004      	beq.n	8007ee2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ee0:	d107      	bne.n	8007ef2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007ef0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007efa:	d10f      	bne.n	8007f1c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f1a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2201      	movs	r2, #1
 8007f20:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	e010      	b.n	8007f52 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007f36:	2300      	movs	r3, #0
 8007f38:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	4013      	ands	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d196      	bne.n	8007e7e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3728      	adds	r7, #40	@ 0x28
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	200000b4 	.word	0x200000b4

08007f60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af02      	add	r7, sp, #8
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	9300      	str	r3, [sp, #0]
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f7ff ff5b 	bl	8007e34 <SPI_WaitFifoStateUntilTimeout>
 8007f7e:	4603      	mov	r3, r0
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007f88:	f043 0220 	orr.w	r2, r3, #32
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007f90:	2303      	movs	r3, #3
 8007f92:	e027      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	2180      	movs	r1, #128	@ 0x80
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f7ff fec0 	bl	8007d24 <SPI_WaitFlagStateUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fae:	f043 0220 	orr.w	r2, r3, #32
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e014      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007fc6:	68f8      	ldr	r0, [r7, #12]
 8007fc8:	f7ff ff34 	bl	8007e34 <SPI_WaitFifoStateUntilTimeout>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d007      	beq.n	8007fe2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fd6:	f043 0220 	orr.w	r2, r3, #32
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	e000      	b.n	8007fe4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3710      	adds	r7, #16
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}

08007fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e049      	b.n	8008092 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	d106      	bne.n	8008018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2200      	movs	r2, #0
 800800e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7fb fcf4 	bl	8003a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2202      	movs	r2, #2
 800801c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	3304      	adds	r3, #4
 8008028:	4619      	mov	r1, r3
 800802a:	4610      	mov	r0, r2
 800802c:	f000 fd3c 	bl	8008aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2201      	movs	r2, #1
 8008074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2201      	movs	r2, #1
 8008084:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2201      	movs	r2, #1
 800808c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3708      	adds	r7, #8
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	e049      	b.n	8008140 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f000 f841 	bl	8008148 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2202      	movs	r2, #2
 80080ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	3304      	adds	r3, #4
 80080d6:	4619      	mov	r1, r3
 80080d8:	4610      	mov	r0, r2
 80080da:	f000 fce5 	bl	8008aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2201      	movs	r2, #1
 8008102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2201      	movs	r2, #1
 8008122:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2201      	movs	r2, #1
 800813a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d109      	bne.n	8008180 <HAL_TIM_PWM_Start+0x24>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008172:	b2db      	uxtb	r3, r3
 8008174:	2b01      	cmp	r3, #1
 8008176:	bf14      	ite	ne
 8008178:	2301      	movne	r3, #1
 800817a:	2300      	moveq	r3, #0
 800817c:	b2db      	uxtb	r3, r3
 800817e:	e03c      	b.n	80081fa <HAL_TIM_PWM_Start+0x9e>
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	2b04      	cmp	r3, #4
 8008184:	d109      	bne.n	800819a <HAL_TIM_PWM_Start+0x3e>
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800818c:	b2db      	uxtb	r3, r3
 800818e:	2b01      	cmp	r3, #1
 8008190:	bf14      	ite	ne
 8008192:	2301      	movne	r3, #1
 8008194:	2300      	moveq	r3, #0
 8008196:	b2db      	uxtb	r3, r3
 8008198:	e02f      	b.n	80081fa <HAL_TIM_PWM_Start+0x9e>
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	2b08      	cmp	r3, #8
 800819e:	d109      	bne.n	80081b4 <HAL_TIM_PWM_Start+0x58>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	bf14      	ite	ne
 80081ac:	2301      	movne	r3, #1
 80081ae:	2300      	moveq	r3, #0
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	e022      	b.n	80081fa <HAL_TIM_PWM_Start+0x9e>
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b0c      	cmp	r3, #12
 80081b8:	d109      	bne.n	80081ce <HAL_TIM_PWM_Start+0x72>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80081c0:	b2db      	uxtb	r3, r3
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	bf14      	ite	ne
 80081c6:	2301      	movne	r3, #1
 80081c8:	2300      	moveq	r3, #0
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	e015      	b.n	80081fa <HAL_TIM_PWM_Start+0x9e>
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b10      	cmp	r3, #16
 80081d2:	d109      	bne.n	80081e8 <HAL_TIM_PWM_Start+0x8c>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80081da:	b2db      	uxtb	r3, r3
 80081dc:	2b01      	cmp	r3, #1
 80081de:	bf14      	ite	ne
 80081e0:	2301      	movne	r3, #1
 80081e2:	2300      	moveq	r3, #0
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	e008      	b.n	80081fa <HAL_TIM_PWM_Start+0x9e>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	bf14      	ite	ne
 80081f4:	2301      	movne	r3, #1
 80081f6:	2300      	moveq	r3, #0
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e0a1      	b.n	8008346 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d104      	bne.n	8008212 <HAL_TIM_PWM_Start+0xb6>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2202      	movs	r2, #2
 800820c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008210:	e023      	b.n	800825a <HAL_TIM_PWM_Start+0xfe>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b04      	cmp	r3, #4
 8008216:	d104      	bne.n	8008222 <HAL_TIM_PWM_Start+0xc6>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008220:	e01b      	b.n	800825a <HAL_TIM_PWM_Start+0xfe>
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	2b08      	cmp	r3, #8
 8008226:	d104      	bne.n	8008232 <HAL_TIM_PWM_Start+0xd6>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2202      	movs	r2, #2
 800822c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008230:	e013      	b.n	800825a <HAL_TIM_PWM_Start+0xfe>
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	2b0c      	cmp	r3, #12
 8008236:	d104      	bne.n	8008242 <HAL_TIM_PWM_Start+0xe6>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008240:	e00b      	b.n	800825a <HAL_TIM_PWM_Start+0xfe>
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	2b10      	cmp	r3, #16
 8008246:	d104      	bne.n	8008252 <HAL_TIM_PWM_Start+0xf6>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2202      	movs	r2, #2
 800824c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008250:	e003      	b.n	800825a <HAL_TIM_PWM_Start+0xfe>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2202      	movs	r2, #2
 8008256:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	2201      	movs	r2, #1
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f001 f890 	bl	8009388 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a38      	ldr	r2, [pc, #224]	@ (8008350 <HAL_TIM_PWM_Start+0x1f4>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d018      	beq.n	80082a4 <HAL_TIM_PWM_Start+0x148>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a37      	ldr	r2, [pc, #220]	@ (8008354 <HAL_TIM_PWM_Start+0x1f8>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d013      	beq.n	80082a4 <HAL_TIM_PWM_Start+0x148>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a35      	ldr	r2, [pc, #212]	@ (8008358 <HAL_TIM_PWM_Start+0x1fc>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d00e      	beq.n	80082a4 <HAL_TIM_PWM_Start+0x148>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a34      	ldr	r2, [pc, #208]	@ (800835c <HAL_TIM_PWM_Start+0x200>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d009      	beq.n	80082a4 <HAL_TIM_PWM_Start+0x148>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a32      	ldr	r2, [pc, #200]	@ (8008360 <HAL_TIM_PWM_Start+0x204>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d004      	beq.n	80082a4 <HAL_TIM_PWM_Start+0x148>
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a31      	ldr	r2, [pc, #196]	@ (8008364 <HAL_TIM_PWM_Start+0x208>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d101      	bne.n	80082a8 <HAL_TIM_PWM_Start+0x14c>
 80082a4:	2301      	movs	r3, #1
 80082a6:	e000      	b.n	80082aa <HAL_TIM_PWM_Start+0x14e>
 80082a8:	2300      	movs	r3, #0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d007      	beq.n	80082be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a23      	ldr	r2, [pc, #140]	@ (8008350 <HAL_TIM_PWM_Start+0x1f4>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d01d      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082d0:	d018      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a24      	ldr	r2, [pc, #144]	@ (8008368 <HAL_TIM_PWM_Start+0x20c>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d013      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a22      	ldr	r2, [pc, #136]	@ (800836c <HAL_TIM_PWM_Start+0x210>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d00e      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a1a      	ldr	r2, [pc, #104]	@ (8008354 <HAL_TIM_PWM_Start+0x1f8>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d009      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a18      	ldr	r2, [pc, #96]	@ (8008358 <HAL_TIM_PWM_Start+0x1fc>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d004      	beq.n	8008304 <HAL_TIM_PWM_Start+0x1a8>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a19      	ldr	r2, [pc, #100]	@ (8008364 <HAL_TIM_PWM_Start+0x208>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d115      	bne.n	8008330 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	689a      	ldr	r2, [r3, #8]
 800830a:	4b19      	ldr	r3, [pc, #100]	@ (8008370 <HAL_TIM_PWM_Start+0x214>)
 800830c:	4013      	ands	r3, r2
 800830e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b06      	cmp	r3, #6
 8008314:	d015      	beq.n	8008342 <HAL_TIM_PWM_Start+0x1e6>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831c:	d011      	beq.n	8008342 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f042 0201 	orr.w	r2, r2, #1
 800832c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800832e:	e008      	b.n	8008342 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f042 0201 	orr.w	r2, r2, #1
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e000      	b.n	8008344 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008342:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}
 800834e:	bf00      	nop
 8008350:	40012c00 	.word	0x40012c00
 8008354:	40013400 	.word	0x40013400
 8008358:	40014000 	.word	0x40014000
 800835c:	40014400 	.word	0x40014400
 8008360:	40014800 	.word	0x40014800
 8008364:	40015000 	.word	0x40015000
 8008368:	40000400 	.word	0x40000400
 800836c:	40000800 	.word	0x40000800
 8008370:	00010007 	.word	0x00010007

08008374 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	691b      	ldr	r3, [r3, #16]
 800838a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	f003 0302 	and.w	r3, r3, #2
 8008392:	2b00      	cmp	r3, #0
 8008394:	d020      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f003 0302 	and.w	r3, r3, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01b      	beq.n	80083d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f06f 0202 	mvn.w	r2, #2
 80083a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2201      	movs	r2, #1
 80083ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699b      	ldr	r3, [r3, #24]
 80083b6:	f003 0303 	and.w	r3, r3, #3
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d003      	beq.n	80083c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb54 	bl	8008a6c <HAL_TIM_IC_CaptureCallback>
 80083c4:	e005      	b.n	80083d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fb46 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 fb57 	bl	8008a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	f003 0304 	and.w	r3, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d020      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f003 0304 	and.w	r3, r3, #4
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d01b      	beq.n	8008424 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f06f 0204 	mvn.w	r2, #4
 80083f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2202      	movs	r2, #2
 80083fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	699b      	ldr	r3, [r3, #24]
 8008402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008406:	2b00      	cmp	r3, #0
 8008408:	d003      	beq.n	8008412 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 fb2e 	bl	8008a6c <HAL_TIM_IC_CaptureCallback>
 8008410:	e005      	b.n	800841e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fb20 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb31 	bl	8008a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	f003 0308 	and.w	r3, r3, #8
 800842a:	2b00      	cmp	r3, #0
 800842c:	d020      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f003 0308 	and.w	r3, r3, #8
 8008434:	2b00      	cmp	r3, #0
 8008436:	d01b      	beq.n	8008470 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f06f 0208 	mvn.w	r2, #8
 8008440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2204      	movs	r2, #4
 8008446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	69db      	ldr	r3, [r3, #28]
 800844e:	f003 0303 	and.w	r3, r3, #3
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fb08 	bl	8008a6c <HAL_TIM_IC_CaptureCallback>
 800845c:	e005      	b.n	800846a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fafa 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f000 fb0b 	bl	8008a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2200      	movs	r2, #0
 800846e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	f003 0310 	and.w	r3, r3, #16
 8008476:	2b00      	cmp	r3, #0
 8008478:	d020      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	f003 0310 	and.w	r3, r3, #16
 8008480:	2b00      	cmp	r3, #0
 8008482:	d01b      	beq.n	80084bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0210 	mvn.w	r2, #16
 800848c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2208      	movs	r2, #8
 8008492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	69db      	ldr	r3, [r3, #28]
 800849a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 fae2 	bl	8008a6c <HAL_TIM_IC_CaptureCallback>
 80084a8:	e005      	b.n	80084b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fad4 	bl	8008a58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fae5 	bl	8008a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00c      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d007      	beq.n	80084e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f06f 0201 	mvn.w	r2, #1
 80084d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f000 fab2 	bl	8008a44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d104      	bne.n	80084f4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d00c      	beq.n	800850e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d007      	beq.n	800850e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f001 f88f 	bl	800962c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00c      	beq.n	8008532 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800851e:	2b00      	cmp	r3, #0
 8008520:	d007      	beq.n	8008532 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800852a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f001 f887 	bl	8009640 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00c      	beq.n	8008556 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800854e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa9f 	bl	8008a94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d00c      	beq.n	800857a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d007      	beq.n	800857a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f06f 0220 	mvn.w	r2, #32
 8008572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f001 f84f 	bl	8009618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00c      	beq.n	800859e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800858a:	2b00      	cmp	r3, #0
 800858c:	d007      	beq.n	800859e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8008596:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f001 f85b 	bl	8009654 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00c      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d007      	beq.n	80085c2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80085ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f001 f853 	bl	8009668 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00c      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d007      	beq.n	80085e6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80085de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 f84b 	bl	800967c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d00c      	beq.n	800860a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d007      	beq.n	800860a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8008602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008604:	6878      	ldr	r0, [r7, #4]
 8008606:	f001 f843 	bl	8009690 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800860a:	bf00      	nop
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
	...

08008614 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	60b9      	str	r1, [r7, #8]
 800861e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800862a:	2b01      	cmp	r3, #1
 800862c:	d101      	bne.n	8008632 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800862e:	2302      	movs	r3, #2
 8008630:	e0ff      	b.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b14      	cmp	r3, #20
 800863e:	f200 80f0 	bhi.w	8008822 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008642:	a201      	add	r2, pc, #4	@ (adr r2, 8008648 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008648:	0800869d 	.word	0x0800869d
 800864c:	08008823 	.word	0x08008823
 8008650:	08008823 	.word	0x08008823
 8008654:	08008823 	.word	0x08008823
 8008658:	080086dd 	.word	0x080086dd
 800865c:	08008823 	.word	0x08008823
 8008660:	08008823 	.word	0x08008823
 8008664:	08008823 	.word	0x08008823
 8008668:	0800871f 	.word	0x0800871f
 800866c:	08008823 	.word	0x08008823
 8008670:	08008823 	.word	0x08008823
 8008674:	08008823 	.word	0x08008823
 8008678:	0800875f 	.word	0x0800875f
 800867c:	08008823 	.word	0x08008823
 8008680:	08008823 	.word	0x08008823
 8008684:	08008823 	.word	0x08008823
 8008688:	080087a1 	.word	0x080087a1
 800868c:	08008823 	.word	0x08008823
 8008690:	08008823 	.word	0x08008823
 8008694:	08008823 	.word	0x08008823
 8008698:	080087e1 	.word	0x080087e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68b9      	ldr	r1, [r7, #8]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f000 faaa 	bl	8008bfc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	699a      	ldr	r2, [r3, #24]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0208 	orr.w	r2, r2, #8
 80086b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	699a      	ldr	r2, [r3, #24]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f022 0204 	bic.w	r2, r2, #4
 80086c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6999      	ldr	r1, [r3, #24]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	691a      	ldr	r2, [r3, #16]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	619a      	str	r2, [r3, #24]
      break;
 80086da:	e0a5      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	68b9      	ldr	r1, [r7, #8]
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fb24 	bl	8008d30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	699a      	ldr	r2, [r3, #24]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	699a      	ldr	r2, [r3, #24]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6999      	ldr	r1, [r3, #24]
 800870e:	68bb      	ldr	r3, [r7, #8]
 8008710:	691b      	ldr	r3, [r3, #16]
 8008712:	021a      	lsls	r2, r3, #8
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	430a      	orrs	r2, r1
 800871a:	619a      	str	r2, [r3, #24]
      break;
 800871c:	e084      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	4618      	mov	r0, r3
 8008726:	f000 fb97 	bl	8008e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	69da      	ldr	r2, [r3, #28]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f042 0208 	orr.w	r2, r2, #8
 8008738:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 0204 	bic.w	r2, r2, #4
 8008748:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	69d9      	ldr	r1, [r3, #28]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	691a      	ldr	r2, [r3, #16]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	61da      	str	r2, [r3, #28]
      break;
 800875c:	e064      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 fc09 	bl	8008f7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	69da      	ldr	r2, [r3, #28]
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	69da      	ldr	r2, [r3, #28]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69d9      	ldr	r1, [r3, #28]
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	021a      	lsls	r2, r3, #8
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	430a      	orrs	r2, r1
 800879c:	61da      	str	r2, [r3, #28]
      break;
 800879e:	e043      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f000 fc7c 	bl	80090a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f042 0208 	orr.w	r2, r2, #8
 80087ba:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f022 0204 	bic.w	r2, r2, #4
 80087ca:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	691a      	ldr	r2, [r3, #16]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	430a      	orrs	r2, r1
 80087dc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80087de:	e023      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	68b9      	ldr	r1, [r7, #8]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f000 fcc6 	bl	8009178 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80087fa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800880a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	691b      	ldr	r3, [r3, #16]
 8008816:	021a      	lsls	r2, r3, #8
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008820:	e002      	b.n	8008828 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	75fb      	strb	r3, [r7, #23]
      break;
 8008826:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008830:	7dfb      	ldrb	r3, [r7, #23]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3718      	adds	r7, #24
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop

0800883c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008846:	2300      	movs	r3, #0
 8008848:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008850:	2b01      	cmp	r3, #1
 8008852:	d101      	bne.n	8008858 <HAL_TIM_ConfigClockSource+0x1c>
 8008854:	2302      	movs	r3, #2
 8008856:	e0e6      	b.n	8008a26 <HAL_TIM_ConfigClockSource+0x1ea>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2202      	movs	r2, #2
 8008864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8008876:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800887a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008882:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a67      	ldr	r2, [pc, #412]	@ (8008a30 <HAL_TIM_ConfigClockSource+0x1f4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	f000 80b1 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 8008898:	4a65      	ldr	r2, [pc, #404]	@ (8008a30 <HAL_TIM_ConfigClockSource+0x1f4>)
 800889a:	4293      	cmp	r3, r2
 800889c:	f200 80b6 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088a0:	4a64      	ldr	r2, [pc, #400]	@ (8008a34 <HAL_TIM_ConfigClockSource+0x1f8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	f000 80a9 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 80088a8:	4a62      	ldr	r2, [pc, #392]	@ (8008a34 <HAL_TIM_ConfigClockSource+0x1f8>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	f200 80ae 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088b0:	4a61      	ldr	r2, [pc, #388]	@ (8008a38 <HAL_TIM_ConfigClockSource+0x1fc>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	f000 80a1 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 80088b8:	4a5f      	ldr	r2, [pc, #380]	@ (8008a38 <HAL_TIM_ConfigClockSource+0x1fc>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	f200 80a6 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088c0:	4a5e      	ldr	r2, [pc, #376]	@ (8008a3c <HAL_TIM_ConfigClockSource+0x200>)
 80088c2:	4293      	cmp	r3, r2
 80088c4:	f000 8099 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 80088c8:	4a5c      	ldr	r2, [pc, #368]	@ (8008a3c <HAL_TIM_ConfigClockSource+0x200>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	f200 809e 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088d0:	4a5b      	ldr	r2, [pc, #364]	@ (8008a40 <HAL_TIM_ConfigClockSource+0x204>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	f000 8091 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 80088d8:	4a59      	ldr	r2, [pc, #356]	@ (8008a40 <HAL_TIM_ConfigClockSource+0x204>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	f200 8096 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80088e4:	f000 8089 	beq.w	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 80088e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80088ec:	f200 808e 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088f4:	d03e      	beq.n	8008974 <HAL_TIM_ConfigClockSource+0x138>
 80088f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80088fa:	f200 8087 	bhi.w	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 80088fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008902:	f000 8086 	beq.w	8008a12 <HAL_TIM_ConfigClockSource+0x1d6>
 8008906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800890a:	d87f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 800890c:	2b70      	cmp	r3, #112	@ 0x70
 800890e:	d01a      	beq.n	8008946 <HAL_TIM_ConfigClockSource+0x10a>
 8008910:	2b70      	cmp	r3, #112	@ 0x70
 8008912:	d87b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 8008914:	2b60      	cmp	r3, #96	@ 0x60
 8008916:	d050      	beq.n	80089ba <HAL_TIM_ConfigClockSource+0x17e>
 8008918:	2b60      	cmp	r3, #96	@ 0x60
 800891a:	d877      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 800891c:	2b50      	cmp	r3, #80	@ 0x50
 800891e:	d03c      	beq.n	800899a <HAL_TIM_ConfigClockSource+0x15e>
 8008920:	2b50      	cmp	r3, #80	@ 0x50
 8008922:	d873      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 8008924:	2b40      	cmp	r3, #64	@ 0x40
 8008926:	d058      	beq.n	80089da <HAL_TIM_ConfigClockSource+0x19e>
 8008928:	2b40      	cmp	r3, #64	@ 0x40
 800892a:	d86f      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 800892c:	2b30      	cmp	r3, #48	@ 0x30
 800892e:	d064      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 8008930:	2b30      	cmp	r3, #48	@ 0x30
 8008932:	d86b      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 8008934:	2b20      	cmp	r3, #32
 8008936:	d060      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 8008938:	2b20      	cmp	r3, #32
 800893a:	d867      	bhi.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
 800893c:	2b00      	cmp	r3, #0
 800893e:	d05c      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 8008940:	2b10      	cmp	r3, #16
 8008942:	d05a      	beq.n	80089fa <HAL_TIM_ConfigClockSource+0x1be>
 8008944:	e062      	b.n	8008a0c <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008956:	f000 fcf7 	bl	8009348 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008968:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	609a      	str	r2, [r3, #8]
      break;
 8008972:	e04f      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008984:	f000 fce0 	bl	8009348 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	689a      	ldr	r2, [r3, #8]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008996:	609a      	str	r2, [r3, #8]
      break;
 8008998:	e03c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089a6:	461a      	mov	r2, r3
 80089a8:	f000 fc52 	bl	8009250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2150      	movs	r1, #80	@ 0x50
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fcab 	bl	800930e <TIM_ITRx_SetConfig>
      break;
 80089b8:	e02c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089c6:	461a      	mov	r2, r3
 80089c8:	f000 fc71 	bl	80092ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	2160      	movs	r1, #96	@ 0x60
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 fc9b 	bl	800930e <TIM_ITRx_SetConfig>
      break;
 80089d8:	e01c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089e6:	461a      	mov	r2, r3
 80089e8:	f000 fc32 	bl	8009250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2140      	movs	r1, #64	@ 0x40
 80089f2:	4618      	mov	r0, r3
 80089f4:	f000 fc8b 	bl	800930e <TIM_ITRx_SetConfig>
      break;
 80089f8:	e00c      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4619      	mov	r1, r3
 8008a04:	4610      	mov	r0, r2
 8008a06:	f000 fc82 	bl	800930e <TIM_ITRx_SetConfig>
      break;
 8008a0a:	e003      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a10:	e000      	b.n	8008a14 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 8008a12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2200      	movs	r2, #0
 8008a20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	3710      	adds	r7, #16
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	bd80      	pop	{r7, pc}
 8008a2e:	bf00      	nop
 8008a30:	00100070 	.word	0x00100070
 8008a34:	00100050 	.word	0x00100050
 8008a38:	00100040 	.word	0x00100040
 8008a3c:	00100030 	.word	0x00100030
 8008a40:	00100020 	.word	0x00100020

08008a44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a44:	b480      	push	{r7}
 8008a46:	b083      	sub	sp, #12
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008a4c:	bf00      	nop
 8008a4e:	370c      	adds	r7, #12
 8008a50:	46bd      	mov	sp, r7
 8008a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a56:	4770      	bx	lr

08008a58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a60:	bf00      	nop
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b083      	sub	sp, #12
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr

08008a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a80:	b480      	push	{r7}
 8008a82:	b083      	sub	sp, #12
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a48      	ldr	r2, [pc, #288]	@ (8008bdc <TIM_Base_SetConfig+0x134>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d013      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac6:	d00f      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a45      	ldr	r2, [pc, #276]	@ (8008be0 <TIM_Base_SetConfig+0x138>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d00b      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a44      	ldr	r2, [pc, #272]	@ (8008be4 <TIM_Base_SetConfig+0x13c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d007      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a43      	ldr	r2, [pc, #268]	@ (8008be8 <TIM_Base_SetConfig+0x140>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d003      	beq.n	8008ae8 <TIM_Base_SetConfig+0x40>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a42      	ldr	r2, [pc, #264]	@ (8008bec <TIM_Base_SetConfig+0x144>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d108      	bne.n	8008afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a37      	ldr	r2, [pc, #220]	@ (8008bdc <TIM_Base_SetConfig+0x134>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d01f      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b08:	d01b      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a34      	ldr	r2, [pc, #208]	@ (8008be0 <TIM_Base_SetConfig+0x138>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d017      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a33      	ldr	r2, [pc, #204]	@ (8008be4 <TIM_Base_SetConfig+0x13c>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d013      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a32      	ldr	r2, [pc, #200]	@ (8008be8 <TIM_Base_SetConfig+0x140>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d00f      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a32      	ldr	r2, [pc, #200]	@ (8008bf0 <TIM_Base_SetConfig+0x148>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00b      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a31      	ldr	r2, [pc, #196]	@ (8008bf4 <TIM_Base_SetConfig+0x14c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d007      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a30      	ldr	r2, [pc, #192]	@ (8008bf8 <TIM_Base_SetConfig+0x150>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d003      	beq.n	8008b42 <TIM_Base_SetConfig+0x9a>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8008bec <TIM_Base_SetConfig+0x144>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d108      	bne.n	8008b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	68fa      	ldr	r2, [r7, #12]
 8008b50:	4313      	orrs	r3, r2
 8008b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	68fa      	ldr	r2, [r7, #12]
 8008b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689a      	ldr	r2, [r3, #8]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	4a18      	ldr	r2, [pc, #96]	@ (8008bdc <TIM_Base_SetConfig+0x134>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d013      	beq.n	8008ba8 <TIM_Base_SetConfig+0x100>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	4a19      	ldr	r2, [pc, #100]	@ (8008be8 <TIM_Base_SetConfig+0x140>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d00f      	beq.n	8008ba8 <TIM_Base_SetConfig+0x100>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	4a19      	ldr	r2, [pc, #100]	@ (8008bf0 <TIM_Base_SetConfig+0x148>)
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d00b      	beq.n	8008ba8 <TIM_Base_SetConfig+0x100>
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	4a18      	ldr	r2, [pc, #96]	@ (8008bf4 <TIM_Base_SetConfig+0x14c>)
 8008b94:	4293      	cmp	r3, r2
 8008b96:	d007      	beq.n	8008ba8 <TIM_Base_SetConfig+0x100>
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4a17      	ldr	r2, [pc, #92]	@ (8008bf8 <TIM_Base_SetConfig+0x150>)
 8008b9c:	4293      	cmp	r3, r2
 8008b9e:	d003      	beq.n	8008ba8 <TIM_Base_SetConfig+0x100>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	4a12      	ldr	r2, [pc, #72]	@ (8008bec <TIM_Base_SetConfig+0x144>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d103      	bne.n	8008bb0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0301 	and.w	r3, r3, #1
 8008bbe:	2b01      	cmp	r3, #1
 8008bc0:	d105      	bne.n	8008bce <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f023 0201 	bic.w	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]
  }
}
 8008bce:	bf00      	nop
 8008bd0:	3714      	adds	r7, #20
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40012c00 	.word	0x40012c00
 8008be0:	40000400 	.word	0x40000400
 8008be4:	40000800 	.word	0x40000800
 8008be8:	40013400 	.word	0x40013400
 8008bec:	40015000 	.word	0x40015000
 8008bf0:	40014000 	.word	0x40014000
 8008bf4:	40014400 	.word	0x40014400
 8008bf8:	40014800 	.word	0x40014800

08008bfc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b087      	sub	sp, #28
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a1b      	ldr	r3, [r3, #32]
 8008c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6a1b      	ldr	r3, [r3, #32]
 8008c10:	f023 0201 	bic.w	r2, r3, #1
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 0303 	bic.w	r3, r3, #3
 8008c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	68fa      	ldr	r2, [r7, #12]
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	f023 0302 	bic.w	r3, r3, #2
 8008c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	697a      	ldr	r2, [r7, #20]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a30      	ldr	r2, [pc, #192]	@ (8008d18 <TIM_OC1_SetConfig+0x11c>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <TIM_OC1_SetConfig+0x88>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8008d1c <TIM_OC1_SetConfig+0x120>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00f      	beq.n	8008c84 <TIM_OC1_SetConfig+0x88>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a2e      	ldr	r2, [pc, #184]	@ (8008d20 <TIM_OC1_SetConfig+0x124>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_OC1_SetConfig+0x88>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a2d      	ldr	r2, [pc, #180]	@ (8008d24 <TIM_OC1_SetConfig+0x128>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_OC1_SetConfig+0x88>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a2c      	ldr	r2, [pc, #176]	@ (8008d28 <TIM_OC1_SetConfig+0x12c>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_OC1_SetConfig+0x88>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a2b      	ldr	r2, [pc, #172]	@ (8008d2c <TIM_OC1_SetConfig+0x130>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d10c      	bne.n	8008c9e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	f023 0308 	bic.w	r3, r3, #8
 8008c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	68db      	ldr	r3, [r3, #12]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 0304 	bic.w	r3, r3, #4
 8008c9c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8008d18 <TIM_OC1_SetConfig+0x11c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d013      	beq.n	8008cce <TIM_OC1_SetConfig+0xd2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a1c      	ldr	r2, [pc, #112]	@ (8008d1c <TIM_OC1_SetConfig+0x120>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d00f      	beq.n	8008cce <TIM_OC1_SetConfig+0xd2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8008d20 <TIM_OC1_SetConfig+0x124>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00b      	beq.n	8008cce <TIM_OC1_SetConfig+0xd2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a1a      	ldr	r2, [pc, #104]	@ (8008d24 <TIM_OC1_SetConfig+0x128>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d007      	beq.n	8008cce <TIM_OC1_SetConfig+0xd2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a19      	ldr	r2, [pc, #100]	@ (8008d28 <TIM_OC1_SetConfig+0x12c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d003      	beq.n	8008cce <TIM_OC1_SetConfig+0xd2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a18      	ldr	r2, [pc, #96]	@ (8008d2c <TIM_OC1_SetConfig+0x130>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d111      	bne.n	8008cf2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008cdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	695b      	ldr	r3, [r3, #20]
 8008ce2:	693a      	ldr	r2, [r7, #16]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	699b      	ldr	r3, [r3, #24]
 8008cec:	693a      	ldr	r2, [r7, #16]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	685a      	ldr	r2, [r3, #4]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	697a      	ldr	r2, [r7, #20]
 8008d0a:	621a      	str	r2, [r3, #32]
}
 8008d0c:	bf00      	nop
 8008d0e:	371c      	adds	r7, #28
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	40012c00 	.word	0x40012c00
 8008d1c:	40013400 	.word	0x40013400
 8008d20:	40014000 	.word	0x40014000
 8008d24:	40014400 	.word	0x40014400
 8008d28:	40014800 	.word	0x40014800
 8008d2c:	40015000 	.word	0x40015000

08008d30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6a1b      	ldr	r3, [r3, #32]
 8008d44:	f023 0210 	bic.w	r2, r3, #16
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008d5e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	021b      	lsls	r3, r3, #8
 8008d72:	68fa      	ldr	r2, [r7, #12]
 8008d74:	4313      	orrs	r3, r2
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008d78:	697b      	ldr	r3, [r7, #20]
 8008d7a:	f023 0320 	bic.w	r3, r3, #32
 8008d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	689b      	ldr	r3, [r3, #8]
 8008d84:	011b      	lsls	r3, r3, #4
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	4a2c      	ldr	r2, [pc, #176]	@ (8008e40 <TIM_OC2_SetConfig+0x110>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d007      	beq.n	8008da4 <TIM_OC2_SetConfig+0x74>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	4a2b      	ldr	r2, [pc, #172]	@ (8008e44 <TIM_OC2_SetConfig+0x114>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d003      	beq.n	8008da4 <TIM_OC2_SetConfig+0x74>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	4a2a      	ldr	r2, [pc, #168]	@ (8008e48 <TIM_OC2_SetConfig+0x118>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d10d      	bne.n	8008dc0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008da4:	697b      	ldr	r3, [r7, #20]
 8008da6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008daa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008dbe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8008e40 <TIM_OC2_SetConfig+0x110>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d013      	beq.n	8008df0 <TIM_OC2_SetConfig+0xc0>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a1e      	ldr	r2, [pc, #120]	@ (8008e44 <TIM_OC2_SetConfig+0x114>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d00f      	beq.n	8008df0 <TIM_OC2_SetConfig+0xc0>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008e4c <TIM_OC2_SetConfig+0x11c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d00b      	beq.n	8008df0 <TIM_OC2_SetConfig+0xc0>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a1d      	ldr	r2, [pc, #116]	@ (8008e50 <TIM_OC2_SetConfig+0x120>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d007      	beq.n	8008df0 <TIM_OC2_SetConfig+0xc0>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a1c      	ldr	r2, [pc, #112]	@ (8008e54 <TIM_OC2_SetConfig+0x124>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d003      	beq.n	8008df0 <TIM_OC2_SetConfig+0xc0>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a17      	ldr	r2, [pc, #92]	@ (8008e48 <TIM_OC2_SetConfig+0x118>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d113      	bne.n	8008e18 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008df6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	693a      	ldr	r2, [r7, #16]
 8008e08:	4313      	orrs	r3, r2
 8008e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	693a      	ldr	r2, [r7, #16]
 8008e14:	4313      	orrs	r3, r2
 8008e16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	693a      	ldr	r2, [r7, #16]
 8008e1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68fa      	ldr	r2, [r7, #12]
 8008e22:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	621a      	str	r2, [r3, #32]
}
 8008e32:	bf00      	nop
 8008e34:	371c      	adds	r7, #28
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	40012c00 	.word	0x40012c00
 8008e44:	40013400 	.word	0x40013400
 8008e48:	40015000 	.word	0x40015000
 8008e4c:	40014000 	.word	0x40014000
 8008e50:	40014400 	.word	0x40014400
 8008e54:	40014800 	.word	0x40014800

08008e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b087      	sub	sp, #28
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a1b      	ldr	r3, [r3, #32]
 8008e6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0303 	bic.w	r3, r3, #3
 8008e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68fa      	ldr	r2, [r7, #12]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	689b      	ldr	r3, [r3, #8]
 8008eaa:	021b      	lsls	r3, r3, #8
 8008eac:	697a      	ldr	r2, [r7, #20]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a2b      	ldr	r2, [pc, #172]	@ (8008f64 <TIM_OC3_SetConfig+0x10c>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d007      	beq.n	8008eca <TIM_OC3_SetConfig+0x72>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a2a      	ldr	r2, [pc, #168]	@ (8008f68 <TIM_OC3_SetConfig+0x110>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d003      	beq.n	8008eca <TIM_OC3_SetConfig+0x72>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a29      	ldr	r2, [pc, #164]	@ (8008f6c <TIM_OC3_SetConfig+0x114>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d10d      	bne.n	8008ee6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ed0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	021b      	lsls	r3, r3, #8
 8008ed8:	697a      	ldr	r2, [r7, #20]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ee4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8008f64 <TIM_OC3_SetConfig+0x10c>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d013      	beq.n	8008f16 <TIM_OC3_SetConfig+0xbe>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8008f68 <TIM_OC3_SetConfig+0x110>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d00f      	beq.n	8008f16 <TIM_OC3_SetConfig+0xbe>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a1d      	ldr	r2, [pc, #116]	@ (8008f70 <TIM_OC3_SetConfig+0x118>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d00b      	beq.n	8008f16 <TIM_OC3_SetConfig+0xbe>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4a1c      	ldr	r2, [pc, #112]	@ (8008f74 <TIM_OC3_SetConfig+0x11c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d007      	beq.n	8008f16 <TIM_OC3_SetConfig+0xbe>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	4a1b      	ldr	r2, [pc, #108]	@ (8008f78 <TIM_OC3_SetConfig+0x120>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d003      	beq.n	8008f16 <TIM_OC3_SetConfig+0xbe>
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	4a16      	ldr	r2, [pc, #88]	@ (8008f6c <TIM_OC3_SetConfig+0x114>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d113      	bne.n	8008f3e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	011b      	lsls	r3, r3, #4
 8008f38:	693a      	ldr	r2, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685a      	ldr	r2, [r3, #4]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	621a      	str	r2, [r3, #32]
}
 8008f58:	bf00      	nop
 8008f5a:	371c      	adds	r7, #28
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f62:	4770      	bx	lr
 8008f64:	40012c00 	.word	0x40012c00
 8008f68:	40013400 	.word	0x40013400
 8008f6c:	40015000 	.word	0x40015000
 8008f70:	40014000 	.word	0x40014000
 8008f74:	40014400 	.word	0x40014400
 8008f78:	40014800 	.word	0x40014800

08008f7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b087      	sub	sp, #28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6a1b      	ldr	r3, [r3, #32]
 8008f8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6a1b      	ldr	r3, [r3, #32]
 8008f90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	685b      	ldr	r3, [r3, #4]
 8008f9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69db      	ldr	r3, [r3, #28]
 8008fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	021b      	lsls	r3, r3, #8
 8008fbe:	68fa      	ldr	r2, [r7, #12]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008fca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	031b      	lsls	r3, r3, #12
 8008fd2:	697a      	ldr	r2, [r7, #20]
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a2c      	ldr	r2, [pc, #176]	@ (800908c <TIM_OC4_SetConfig+0x110>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d007      	beq.n	8008ff0 <TIM_OC4_SetConfig+0x74>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8009090 <TIM_OC4_SetConfig+0x114>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d003      	beq.n	8008ff0 <TIM_OC4_SetConfig+0x74>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a2a      	ldr	r2, [pc, #168]	@ (8009094 <TIM_OC4_SetConfig+0x118>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d10d      	bne.n	800900c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008ff0:	697b      	ldr	r3, [r7, #20]
 8008ff2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	031b      	lsls	r3, r3, #12
 8008ffe:	697a      	ldr	r2, [r7, #20]
 8009000:	4313      	orrs	r3, r2
 8009002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800900a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a1f      	ldr	r2, [pc, #124]	@ (800908c <TIM_OC4_SetConfig+0x110>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d013      	beq.n	800903c <TIM_OC4_SetConfig+0xc0>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a1e      	ldr	r2, [pc, #120]	@ (8009090 <TIM_OC4_SetConfig+0x114>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d00f      	beq.n	800903c <TIM_OC4_SetConfig+0xc0>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a1e      	ldr	r2, [pc, #120]	@ (8009098 <TIM_OC4_SetConfig+0x11c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d00b      	beq.n	800903c <TIM_OC4_SetConfig+0xc0>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	4a1d      	ldr	r2, [pc, #116]	@ (800909c <TIM_OC4_SetConfig+0x120>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d007      	beq.n	800903c <TIM_OC4_SetConfig+0xc0>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	4a1c      	ldr	r2, [pc, #112]	@ (80090a0 <TIM_OC4_SetConfig+0x124>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <TIM_OC4_SetConfig+0xc0>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	4a17      	ldr	r2, [pc, #92]	@ (8009094 <TIM_OC4_SetConfig+0x118>)
 8009038:	4293      	cmp	r3, r2
 800903a:	d113      	bne.n	8009064 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009042:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800904a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	019b      	lsls	r3, r3, #6
 8009052:	693a      	ldr	r2, [r7, #16]
 8009054:	4313      	orrs	r3, r2
 8009056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	019b      	lsls	r3, r3, #6
 800905e:	693a      	ldr	r2, [r7, #16]
 8009060:	4313      	orrs	r3, r2
 8009062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	693a      	ldr	r2, [r7, #16]
 8009068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	685a      	ldr	r2, [r3, #4]
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	621a      	str	r2, [r3, #32]
}
 800907e:	bf00      	nop
 8009080:	371c      	adds	r7, #28
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	40012c00 	.word	0x40012c00
 8009090:	40013400 	.word	0x40013400
 8009094:	40015000 	.word	0x40015000
 8009098:	40014000 	.word	0x40014000
 800909c:	40014400 	.word	0x40014400
 80090a0:	40014800 	.word	0x40014800

080090a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6a1b      	ldr	r3, [r3, #32]
 80090b2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6a1b      	ldr	r3, [r3, #32]
 80090b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80090d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68fa      	ldr	r2, [r7, #12]
 80090de:	4313      	orrs	r3, r2
 80090e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80090e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	041b      	lsls	r3, r3, #16
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a19      	ldr	r2, [pc, #100]	@ (8009160 <TIM_OC5_SetConfig+0xbc>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d013      	beq.n	8009126 <TIM_OC5_SetConfig+0x82>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a18      	ldr	r2, [pc, #96]	@ (8009164 <TIM_OC5_SetConfig+0xc0>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d00f      	beq.n	8009126 <TIM_OC5_SetConfig+0x82>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	4a17      	ldr	r2, [pc, #92]	@ (8009168 <TIM_OC5_SetConfig+0xc4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00b      	beq.n	8009126 <TIM_OC5_SetConfig+0x82>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	4a16      	ldr	r2, [pc, #88]	@ (800916c <TIM_OC5_SetConfig+0xc8>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d007      	beq.n	8009126 <TIM_OC5_SetConfig+0x82>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	4a15      	ldr	r2, [pc, #84]	@ (8009170 <TIM_OC5_SetConfig+0xcc>)
 800911a:	4293      	cmp	r3, r2
 800911c:	d003      	beq.n	8009126 <TIM_OC5_SetConfig+0x82>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a14      	ldr	r2, [pc, #80]	@ (8009174 <TIM_OC5_SetConfig+0xd0>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d109      	bne.n	800913a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800912c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	695b      	ldr	r3, [r3, #20]
 8009132:	021b      	lsls	r3, r3, #8
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	4313      	orrs	r3, r2
 8009138:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	685a      	ldr	r2, [r3, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	693a      	ldr	r2, [r7, #16]
 8009152:	621a      	str	r2, [r3, #32]
}
 8009154:	bf00      	nop
 8009156:	371c      	adds	r7, #28
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr
 8009160:	40012c00 	.word	0x40012c00
 8009164:	40013400 	.word	0x40013400
 8009168:	40014000 	.word	0x40014000
 800916c:	40014400 	.word	0x40014400
 8009170:	40014800 	.word	0x40014800
 8009174:	40015000 	.word	0x40015000

08009178 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091b8:	693b      	ldr	r3, [r7, #16]
 80091ba:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80091be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	051b      	lsls	r3, r3, #20
 80091c6:	693a      	ldr	r2, [r7, #16]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009238 <TIM_OC6_SetConfig+0xc0>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d013      	beq.n	80091fc <TIM_OC6_SetConfig+0x84>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a19      	ldr	r2, [pc, #100]	@ (800923c <TIM_OC6_SetConfig+0xc4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d00f      	beq.n	80091fc <TIM_OC6_SetConfig+0x84>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a18      	ldr	r2, [pc, #96]	@ (8009240 <TIM_OC6_SetConfig+0xc8>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d00b      	beq.n	80091fc <TIM_OC6_SetConfig+0x84>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a17      	ldr	r2, [pc, #92]	@ (8009244 <TIM_OC6_SetConfig+0xcc>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d007      	beq.n	80091fc <TIM_OC6_SetConfig+0x84>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a16      	ldr	r2, [pc, #88]	@ (8009248 <TIM_OC6_SetConfig+0xd0>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d003      	beq.n	80091fc <TIM_OC6_SetConfig+0x84>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a15      	ldr	r2, [pc, #84]	@ (800924c <TIM_OC6_SetConfig+0xd4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d109      	bne.n	8009210 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009202:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009204:	683b      	ldr	r3, [r7, #0]
 8009206:	695b      	ldr	r3, [r3, #20]
 8009208:	029b      	lsls	r3, r3, #10
 800920a:	697a      	ldr	r2, [r7, #20]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	697a      	ldr	r2, [r7, #20]
 8009214:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	685a      	ldr	r2, [r3, #4]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	693a      	ldr	r2, [r7, #16]
 8009228:	621a      	str	r2, [r3, #32]
}
 800922a:	bf00      	nop
 800922c:	371c      	adds	r7, #28
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	40012c00 	.word	0x40012c00
 800923c:	40013400 	.word	0x40013400
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400
 8009248:	40014800 	.word	0x40014800
 800924c:	40015000 	.word	0x40015000

08009250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009250:	b480      	push	{r7}
 8009252:	b087      	sub	sp, #28
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	f023 0201 	bic.w	r2, r3, #1
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800927a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	011b      	lsls	r3, r3, #4
 8009280:	693a      	ldr	r2, [r7, #16]
 8009282:	4313      	orrs	r3, r2
 8009284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	f023 030a 	bic.w	r3, r3, #10
 800928c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	4313      	orrs	r3, r2
 8009294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	621a      	str	r2, [r3, #32]
}
 80092a2:	bf00      	nop
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ac:	4770      	bx	lr

080092ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092ae:	b480      	push	{r7}
 80092b0:	b087      	sub	sp, #28
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	60f8      	str	r0, [r7, #12]
 80092b6:	60b9      	str	r1, [r7, #8]
 80092b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6a1b      	ldr	r3, [r3, #32]
 80092be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	6a1b      	ldr	r3, [r3, #32]
 80092c4:	f023 0210 	bic.w	r2, r3, #16
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	699b      	ldr	r3, [r3, #24]
 80092d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80092d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	031b      	lsls	r3, r3, #12
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80092ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	011b      	lsls	r3, r3, #4
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	4313      	orrs	r3, r2
 80092f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	693a      	ldr	r2, [r7, #16]
 80092fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	697a      	ldr	r2, [r7, #20]
 8009300:	621a      	str	r2, [r3, #32]
}
 8009302:	bf00      	nop
 8009304:	371c      	adds	r7, #28
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009324:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009328:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800932a:	683a      	ldr	r2, [r7, #0]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	4313      	orrs	r3, r2
 8009330:	f043 0307 	orr.w	r3, r3, #7
 8009334:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	609a      	str	r2, [r3, #8]
}
 800933c:	bf00      	nop
 800933e:	3714      	adds	r7, #20
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009348:	b480      	push	{r7}
 800934a:	b087      	sub	sp, #28
 800934c:	af00      	add	r7, sp, #0
 800934e:	60f8      	str	r0, [r7, #12]
 8009350:	60b9      	str	r1, [r7, #8]
 8009352:	607a      	str	r2, [r7, #4]
 8009354:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009362:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	021a      	lsls	r2, r3, #8
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	431a      	orrs	r2, r3
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	4313      	orrs	r3, r2
 8009370:	697a      	ldr	r2, [r7, #20]
 8009372:	4313      	orrs	r3, r2
 8009374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	609a      	str	r2, [r3, #8]
}
 800937c:	bf00      	nop
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009388:	b480      	push	{r7}
 800938a:	b087      	sub	sp, #28
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	f003 031f 	and.w	r3, r3, #31
 800939a:	2201      	movs	r2, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a1a      	ldr	r2, [r3, #32]
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	43db      	mvns	r3, r3
 80093aa:	401a      	ands	r2, r3
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1a      	ldr	r2, [r3, #32]
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f003 031f 	and.w	r3, r3, #31
 80093ba:	6879      	ldr	r1, [r7, #4]
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	431a      	orrs	r2, r3
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	621a      	str	r2, [r3, #32]
}
 80093c6:	bf00      	nop
 80093c8:	371c      	adds	r7, #28
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d101      	bne.n	80093ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093e8:	2302      	movs	r3, #2
 80093ea:	e06f      	b.n	80094cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2202      	movs	r2, #2
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	685b      	ldr	r3, [r3, #4]
 8009402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a31      	ldr	r2, [pc, #196]	@ (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d009      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a30      	ldr	r2, [pc, #192]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d004      	beq.n	800942a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a2e      	ldr	r2, [pc, #184]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d108      	bne.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009430:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	68fa      	ldr	r2, [r7, #12]
 8009438:	4313      	orrs	r3, r2
 800943a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009446:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	68fa      	ldr	r2, [r7, #12]
 800944e:	4313      	orrs	r3, r2
 8009450:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a1e      	ldr	r2, [pc, #120]	@ (80094d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d01d      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800946c:	d018      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a1c      	ldr	r2, [pc, #112]	@ (80094e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d013      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	4a1a      	ldr	r2, [pc, #104]	@ (80094e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00e      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a15      	ldr	r2, [pc, #84]	@ (80094dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a16      	ldr	r2, [pc, #88]	@ (80094ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a11      	ldr	r2, [pc, #68]	@ (80094e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10c      	bne.n	80094ba <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2201      	movs	r2, #1
 80094be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2200      	movs	r2, #0
 80094c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3714      	adds	r7, #20
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	40012c00 	.word	0x40012c00
 80094dc:	40013400 	.word	0x40013400
 80094e0:	40015000 	.word	0x40015000
 80094e4:	40000400 	.word	0x40000400
 80094e8:	40000800 	.word	0x40000800
 80094ec:	40014000 	.word	0x40014000

080094f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009504:	2b01      	cmp	r3, #1
 8009506:	d101      	bne.n	800950c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009508:	2302      	movs	r3, #2
 800950a:	e078      	b.n	80095fe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2201      	movs	r2, #1
 8009510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	4313      	orrs	r3, r2
 8009520:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	4313      	orrs	r3, r2
 800952e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	4313      	orrs	r3, r2
 800953c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4313      	orrs	r3, r2
 800954a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	691b      	ldr	r3, [r3, #16]
 8009556:	4313      	orrs	r3, r2
 8009558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	4313      	orrs	r3, r2
 8009566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	699b      	ldr	r3, [r3, #24]
 8009580:	041b      	lsls	r3, r3, #16
 8009582:	4313      	orrs	r3, r2
 8009584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	69db      	ldr	r3, [r3, #28]
 8009590:	4313      	orrs	r3, r2
 8009592:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a1c      	ldr	r2, [pc, #112]	@ (800960c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d009      	beq.n	80095b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a1b      	ldr	r2, [pc, #108]	@ (8009610 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d004      	beq.n	80095b2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a19      	ldr	r2, [pc, #100]	@ (8009614 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d11c      	bne.n	80095ec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095bc:	051b      	lsls	r3, r3, #20
 80095be:	4313      	orrs	r3, r2
 80095c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095da:	4313      	orrs	r3, r2
 80095dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e8:	4313      	orrs	r3, r2
 80095ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80095fc:	2300      	movs	r3, #0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr
 800960a:	bf00      	nop
 800960c:	40012c00 	.word	0x40012c00
 8009610:	40013400 	.word	0x40013400
 8009614:	40015000 	.word	0x40015000

08009618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009620:	bf00      	nop
 8009622:	370c      	adds	r7, #12
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009634:	bf00      	nop
 8009636:	370c      	adds	r7, #12
 8009638:	46bd      	mov	sp, r7
 800963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963e:	4770      	bx	lr

08009640 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009648:	bf00      	nop
 800964a:	370c      	adds	r7, #12
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009654:	b480      	push	{r7}
 8009656:	b083      	sub	sp, #12
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800965c:	bf00      	nop
 800965e:	370c      	adds	r7, #12
 8009660:	46bd      	mov	sp, r7
 8009662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009666:	4770      	bx	lr

08009668 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009668:	b480      	push	{r7}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009670:	bf00      	nop
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009698:	bf00      	nop
 800969a:	370c      	adds	r7, #12
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr

080096a4 <_ZdlPvj>:
 80096a4:	f000 b800 	b.w	80096a8 <_ZdlPv>

080096a8 <_ZdlPv>:
 80096a8:	f001 b9c4 	b.w	800aa34 <free>

080096ac <pow>:
 80096ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ae:	ed2d 8b02 	vpush	{d8}
 80096b2:	eeb0 8a40 	vmov.f32	s16, s0
 80096b6:	eef0 8a60 	vmov.f32	s17, s1
 80096ba:	ec55 4b11 	vmov	r4, r5, d1
 80096be:	f000 f8d7 	bl	8009870 <__ieee754_pow>
 80096c2:	4622      	mov	r2, r4
 80096c4:	462b      	mov	r3, r5
 80096c6:	4620      	mov	r0, r4
 80096c8:	4629      	mov	r1, r5
 80096ca:	ec57 6b10 	vmov	r6, r7, d0
 80096ce:	f7f7 f9f9 	bl	8000ac4 <__aeabi_dcmpun>
 80096d2:	2800      	cmp	r0, #0
 80096d4:	d13b      	bne.n	800974e <pow+0xa2>
 80096d6:	ec51 0b18 	vmov	r0, r1, d8
 80096da:	2200      	movs	r2, #0
 80096dc:	2300      	movs	r3, #0
 80096de:	f7f7 f9bf 	bl	8000a60 <__aeabi_dcmpeq>
 80096e2:	b1b8      	cbz	r0, 8009714 <pow+0x68>
 80096e4:	2200      	movs	r2, #0
 80096e6:	2300      	movs	r3, #0
 80096e8:	4620      	mov	r0, r4
 80096ea:	4629      	mov	r1, r5
 80096ec:	f7f7 f9b8 	bl	8000a60 <__aeabi_dcmpeq>
 80096f0:	2800      	cmp	r0, #0
 80096f2:	d146      	bne.n	8009782 <pow+0xd6>
 80096f4:	ec45 4b10 	vmov	d0, r4, r5
 80096f8:	f000 f86a 	bl	80097d0 <finite>
 80096fc:	b338      	cbz	r0, 800974e <pow+0xa2>
 80096fe:	2200      	movs	r2, #0
 8009700:	2300      	movs	r3, #0
 8009702:	4620      	mov	r0, r4
 8009704:	4629      	mov	r1, r5
 8009706:	f7f7 f9b5 	bl	8000a74 <__aeabi_dcmplt>
 800970a:	b300      	cbz	r0, 800974e <pow+0xa2>
 800970c:	f001 f9ae 	bl	800aa6c <__errno>
 8009710:	2322      	movs	r3, #34	@ 0x22
 8009712:	e01b      	b.n	800974c <pow+0xa0>
 8009714:	ec47 6b10 	vmov	d0, r6, r7
 8009718:	f000 f85a 	bl	80097d0 <finite>
 800971c:	b9e0      	cbnz	r0, 8009758 <pow+0xac>
 800971e:	eeb0 0a48 	vmov.f32	s0, s16
 8009722:	eef0 0a68 	vmov.f32	s1, s17
 8009726:	f000 f853 	bl	80097d0 <finite>
 800972a:	b1a8      	cbz	r0, 8009758 <pow+0xac>
 800972c:	ec45 4b10 	vmov	d0, r4, r5
 8009730:	f000 f84e 	bl	80097d0 <finite>
 8009734:	b180      	cbz	r0, 8009758 <pow+0xac>
 8009736:	4632      	mov	r2, r6
 8009738:	463b      	mov	r3, r7
 800973a:	4630      	mov	r0, r6
 800973c:	4639      	mov	r1, r7
 800973e:	f7f7 f9c1 	bl	8000ac4 <__aeabi_dcmpun>
 8009742:	2800      	cmp	r0, #0
 8009744:	d0e2      	beq.n	800970c <pow+0x60>
 8009746:	f001 f991 	bl	800aa6c <__errno>
 800974a:	2321      	movs	r3, #33	@ 0x21
 800974c:	6003      	str	r3, [r0, #0]
 800974e:	ecbd 8b02 	vpop	{d8}
 8009752:	ec47 6b10 	vmov	d0, r6, r7
 8009756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009758:	2200      	movs	r2, #0
 800975a:	2300      	movs	r3, #0
 800975c:	4630      	mov	r0, r6
 800975e:	4639      	mov	r1, r7
 8009760:	f7f7 f97e 	bl	8000a60 <__aeabi_dcmpeq>
 8009764:	2800      	cmp	r0, #0
 8009766:	d0f2      	beq.n	800974e <pow+0xa2>
 8009768:	eeb0 0a48 	vmov.f32	s0, s16
 800976c:	eef0 0a68 	vmov.f32	s1, s17
 8009770:	f000 f82e 	bl	80097d0 <finite>
 8009774:	2800      	cmp	r0, #0
 8009776:	d0ea      	beq.n	800974e <pow+0xa2>
 8009778:	ec45 4b10 	vmov	d0, r4, r5
 800977c:	f000 f828 	bl	80097d0 <finite>
 8009780:	e7c3      	b.n	800970a <pow+0x5e>
 8009782:	4f01      	ldr	r7, [pc, #4]	@ (8009788 <pow+0xdc>)
 8009784:	2600      	movs	r6, #0
 8009786:	e7e2      	b.n	800974e <pow+0xa2>
 8009788:	3ff00000 	.word	0x3ff00000

0800978c <atan2f>:
 800978c:	f000 bdbc 	b.w	800a308 <__ieee754_atan2f>

08009790 <fmodf>:
 8009790:	b508      	push	{r3, lr}
 8009792:	ed2d 8b02 	vpush	{d8}
 8009796:	eef0 8a40 	vmov.f32	s17, s0
 800979a:	eeb0 8a60 	vmov.f32	s16, s1
 800979e:	f000 fe53 	bl	800a448 <__ieee754_fmodf>
 80097a2:	eef4 8a48 	vcmp.f32	s17, s16
 80097a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097aa:	d60c      	bvs.n	80097c6 <fmodf+0x36>
 80097ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80097cc <fmodf+0x3c>
 80097b0:	eeb4 8a68 	vcmp.f32	s16, s17
 80097b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b8:	d105      	bne.n	80097c6 <fmodf+0x36>
 80097ba:	f001 f957 	bl	800aa6c <__errno>
 80097be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80097c2:	2321      	movs	r3, #33	@ 0x21
 80097c4:	6003      	str	r3, [r0, #0]
 80097c6:	ecbd 8b02 	vpop	{d8}
 80097ca:	bd08      	pop	{r3, pc}
 80097cc:	00000000 	.word	0x00000000

080097d0 <finite>:
 80097d0:	b082      	sub	sp, #8
 80097d2:	ed8d 0b00 	vstr	d0, [sp]
 80097d6:	9801      	ldr	r0, [sp, #4]
 80097d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80097dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80097e0:	0fc0      	lsrs	r0, r0, #31
 80097e2:	b002      	add	sp, #8
 80097e4:	4770      	bx	lr
	...

080097e8 <floorf>:
 80097e8:	ee10 3a10 	vmov	r3, s0
 80097ec:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80097f0:	3a7f      	subs	r2, #127	@ 0x7f
 80097f2:	2a16      	cmp	r2, #22
 80097f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80097f8:	dc2b      	bgt.n	8009852 <floorf+0x6a>
 80097fa:	2a00      	cmp	r2, #0
 80097fc:	da12      	bge.n	8009824 <floorf+0x3c>
 80097fe:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8009864 <floorf+0x7c>
 8009802:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009806:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800980a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800980e:	dd06      	ble.n	800981e <floorf+0x36>
 8009810:	2b00      	cmp	r3, #0
 8009812:	da24      	bge.n	800985e <floorf+0x76>
 8009814:	2900      	cmp	r1, #0
 8009816:	4b14      	ldr	r3, [pc, #80]	@ (8009868 <floorf+0x80>)
 8009818:	bf08      	it	eq
 800981a:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800981e:	ee00 3a10 	vmov	s0, r3
 8009822:	4770      	bx	lr
 8009824:	4911      	ldr	r1, [pc, #68]	@ (800986c <floorf+0x84>)
 8009826:	4111      	asrs	r1, r2
 8009828:	420b      	tst	r3, r1
 800982a:	d0fa      	beq.n	8009822 <floorf+0x3a>
 800982c:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8009864 <floorf+0x7c>
 8009830:	ee30 0a27 	vadd.f32	s0, s0, s15
 8009834:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8009838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800983c:	ddef      	ble.n	800981e <floorf+0x36>
 800983e:	2b00      	cmp	r3, #0
 8009840:	bfbe      	ittt	lt
 8009842:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8009846:	fa40 f202 	asrlt.w	r2, r0, r2
 800984a:	189b      	addlt	r3, r3, r2
 800984c:	ea23 0301 	bic.w	r3, r3, r1
 8009850:	e7e5      	b.n	800981e <floorf+0x36>
 8009852:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8009856:	d3e4      	bcc.n	8009822 <floorf+0x3a>
 8009858:	ee30 0a00 	vadd.f32	s0, s0, s0
 800985c:	4770      	bx	lr
 800985e:	2300      	movs	r3, #0
 8009860:	e7dd      	b.n	800981e <floorf+0x36>
 8009862:	bf00      	nop
 8009864:	7149f2ca 	.word	0x7149f2ca
 8009868:	bf800000 	.word	0xbf800000
 800986c:	007fffff 	.word	0x007fffff

08009870 <__ieee754_pow>:
 8009870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009874:	b091      	sub	sp, #68	@ 0x44
 8009876:	ed8d 1b00 	vstr	d1, [sp]
 800987a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800987e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8009882:	ea5a 0001 	orrs.w	r0, sl, r1
 8009886:	ec57 6b10 	vmov	r6, r7, d0
 800988a:	d113      	bne.n	80098b4 <__ieee754_pow+0x44>
 800988c:	19b3      	adds	r3, r6, r6
 800988e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8009892:	4152      	adcs	r2, r2
 8009894:	4298      	cmp	r0, r3
 8009896:	4b98      	ldr	r3, [pc, #608]	@ (8009af8 <__ieee754_pow+0x288>)
 8009898:	4193      	sbcs	r3, r2
 800989a:	f080 84ea 	bcs.w	800a272 <__ieee754_pow+0xa02>
 800989e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098a2:	4630      	mov	r0, r6
 80098a4:	4639      	mov	r1, r7
 80098a6:	f7f6 fcbd 	bl	8000224 <__adddf3>
 80098aa:	ec41 0b10 	vmov	d0, r0, r1
 80098ae:	b011      	add	sp, #68	@ 0x44
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098b4:	4a91      	ldr	r2, [pc, #580]	@ (8009afc <__ieee754_pow+0x28c>)
 80098b6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80098ba:	4590      	cmp	r8, r2
 80098bc:	463d      	mov	r5, r7
 80098be:	4633      	mov	r3, r6
 80098c0:	d806      	bhi.n	80098d0 <__ieee754_pow+0x60>
 80098c2:	d101      	bne.n	80098c8 <__ieee754_pow+0x58>
 80098c4:	2e00      	cmp	r6, #0
 80098c6:	d1ea      	bne.n	800989e <__ieee754_pow+0x2e>
 80098c8:	4592      	cmp	sl, r2
 80098ca:	d801      	bhi.n	80098d0 <__ieee754_pow+0x60>
 80098cc:	d10e      	bne.n	80098ec <__ieee754_pow+0x7c>
 80098ce:	b169      	cbz	r1, 80098ec <__ieee754_pow+0x7c>
 80098d0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80098d4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80098d8:	431d      	orrs	r5, r3
 80098da:	d1e0      	bne.n	800989e <__ieee754_pow+0x2e>
 80098dc:	e9dd 3200 	ldrd	r3, r2, [sp]
 80098e0:	18db      	adds	r3, r3, r3
 80098e2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 80098e6:	4152      	adcs	r2, r2
 80098e8:	429d      	cmp	r5, r3
 80098ea:	e7d4      	b.n	8009896 <__ieee754_pow+0x26>
 80098ec:	2d00      	cmp	r5, #0
 80098ee:	46c3      	mov	fp, r8
 80098f0:	da3a      	bge.n	8009968 <__ieee754_pow+0xf8>
 80098f2:	4a83      	ldr	r2, [pc, #524]	@ (8009b00 <__ieee754_pow+0x290>)
 80098f4:	4592      	cmp	sl, r2
 80098f6:	d84d      	bhi.n	8009994 <__ieee754_pow+0x124>
 80098f8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80098fc:	4592      	cmp	sl, r2
 80098fe:	f240 84c7 	bls.w	800a290 <__ieee754_pow+0xa20>
 8009902:	ea4f 522a 	mov.w	r2, sl, asr #20
 8009906:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800990a:	2a14      	cmp	r2, #20
 800990c:	dd0f      	ble.n	800992e <__ieee754_pow+0xbe>
 800990e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8009912:	fa21 f402 	lsr.w	r4, r1, r2
 8009916:	fa04 f202 	lsl.w	r2, r4, r2
 800991a:	428a      	cmp	r2, r1
 800991c:	f040 84b8 	bne.w	800a290 <__ieee754_pow+0xa20>
 8009920:	f004 0401 	and.w	r4, r4, #1
 8009924:	f1c4 0402 	rsb	r4, r4, #2
 8009928:	2900      	cmp	r1, #0
 800992a:	d158      	bne.n	80099de <__ieee754_pow+0x16e>
 800992c:	e00e      	b.n	800994c <__ieee754_pow+0xdc>
 800992e:	2900      	cmp	r1, #0
 8009930:	d154      	bne.n	80099dc <__ieee754_pow+0x16c>
 8009932:	f1c2 0214 	rsb	r2, r2, #20
 8009936:	fa4a f402 	asr.w	r4, sl, r2
 800993a:	fa04 f202 	lsl.w	r2, r4, r2
 800993e:	4552      	cmp	r2, sl
 8009940:	f040 84a3 	bne.w	800a28a <__ieee754_pow+0xa1a>
 8009944:	f004 0401 	and.w	r4, r4, #1
 8009948:	f1c4 0402 	rsb	r4, r4, #2
 800994c:	4a6d      	ldr	r2, [pc, #436]	@ (8009b04 <__ieee754_pow+0x294>)
 800994e:	4592      	cmp	sl, r2
 8009950:	d12e      	bne.n	80099b0 <__ieee754_pow+0x140>
 8009952:	f1b9 0f00 	cmp.w	r9, #0
 8009956:	f280 8494 	bge.w	800a282 <__ieee754_pow+0xa12>
 800995a:	496a      	ldr	r1, [pc, #424]	@ (8009b04 <__ieee754_pow+0x294>)
 800995c:	4632      	mov	r2, r6
 800995e:	463b      	mov	r3, r7
 8009960:	2000      	movs	r0, #0
 8009962:	f7f6 ff3f 	bl	80007e4 <__aeabi_ddiv>
 8009966:	e7a0      	b.n	80098aa <__ieee754_pow+0x3a>
 8009968:	2400      	movs	r4, #0
 800996a:	bbc1      	cbnz	r1, 80099de <__ieee754_pow+0x16e>
 800996c:	4a63      	ldr	r2, [pc, #396]	@ (8009afc <__ieee754_pow+0x28c>)
 800996e:	4592      	cmp	sl, r2
 8009970:	d1ec      	bne.n	800994c <__ieee754_pow+0xdc>
 8009972:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009976:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800997a:	431a      	orrs	r2, r3
 800997c:	f000 8479 	beq.w	800a272 <__ieee754_pow+0xa02>
 8009980:	4b61      	ldr	r3, [pc, #388]	@ (8009b08 <__ieee754_pow+0x298>)
 8009982:	4598      	cmp	r8, r3
 8009984:	d908      	bls.n	8009998 <__ieee754_pow+0x128>
 8009986:	f1b9 0f00 	cmp.w	r9, #0
 800998a:	f2c0 8476 	blt.w	800a27a <__ieee754_pow+0xa0a>
 800998e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009992:	e78a      	b.n	80098aa <__ieee754_pow+0x3a>
 8009994:	2402      	movs	r4, #2
 8009996:	e7e8      	b.n	800996a <__ieee754_pow+0xfa>
 8009998:	f1b9 0f00 	cmp.w	r9, #0
 800999c:	f04f 0000 	mov.w	r0, #0
 80099a0:	f04f 0100 	mov.w	r1, #0
 80099a4:	da81      	bge.n	80098aa <__ieee754_pow+0x3a>
 80099a6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80099aa:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80099ae:	e77c      	b.n	80098aa <__ieee754_pow+0x3a>
 80099b0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80099b4:	d106      	bne.n	80099c4 <__ieee754_pow+0x154>
 80099b6:	4632      	mov	r2, r6
 80099b8:	463b      	mov	r3, r7
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 fde7 	bl	8000590 <__aeabi_dmul>
 80099c2:	e772      	b.n	80098aa <__ieee754_pow+0x3a>
 80099c4:	4a51      	ldr	r2, [pc, #324]	@ (8009b0c <__ieee754_pow+0x29c>)
 80099c6:	4591      	cmp	r9, r2
 80099c8:	d109      	bne.n	80099de <__ieee754_pow+0x16e>
 80099ca:	2d00      	cmp	r5, #0
 80099cc:	db07      	blt.n	80099de <__ieee754_pow+0x16e>
 80099ce:	ec47 6b10 	vmov	d0, r6, r7
 80099d2:	b011      	add	sp, #68	@ 0x44
 80099d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	f000 bf52 	b.w	800a880 <__ieee754_sqrt>
 80099dc:	2400      	movs	r4, #0
 80099de:	ec47 6b10 	vmov	d0, r6, r7
 80099e2:	9302      	str	r3, [sp, #8]
 80099e4:	f000 fc88 	bl	800a2f8 <fabs>
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	ec51 0b10 	vmov	r0, r1, d0
 80099ee:	bb53      	cbnz	r3, 8009a46 <__ieee754_pow+0x1d6>
 80099f0:	4b44      	ldr	r3, [pc, #272]	@ (8009b04 <__ieee754_pow+0x294>)
 80099f2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d002      	beq.n	8009a00 <__ieee754_pow+0x190>
 80099fa:	f1b8 0f00 	cmp.w	r8, #0
 80099fe:	d122      	bne.n	8009a46 <__ieee754_pow+0x1d6>
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	da05      	bge.n	8009a12 <__ieee754_pow+0x1a2>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	2000      	movs	r0, #0
 8009a0c:	493d      	ldr	r1, [pc, #244]	@ (8009b04 <__ieee754_pow+0x294>)
 8009a0e:	f7f6 fee9 	bl	80007e4 <__aeabi_ddiv>
 8009a12:	2d00      	cmp	r5, #0
 8009a14:	f6bf af49 	bge.w	80098aa <__ieee754_pow+0x3a>
 8009a18:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8009a1c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8009a20:	ea58 0804 	orrs.w	r8, r8, r4
 8009a24:	d108      	bne.n	8009a38 <__ieee754_pow+0x1c8>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4610      	mov	r0, r2
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7f6 fbf7 	bl	8000220 <__aeabi_dsub>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	e794      	b.n	8009962 <__ieee754_pow+0xf2>
 8009a38:	2c01      	cmp	r4, #1
 8009a3a:	f47f af36 	bne.w	80098aa <__ieee754_pow+0x3a>
 8009a3e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009a42:	4619      	mov	r1, r3
 8009a44:	e731      	b.n	80098aa <__ieee754_pow+0x3a>
 8009a46:	0feb      	lsrs	r3, r5, #31
 8009a48:	3b01      	subs	r3, #1
 8009a4a:	ea53 0204 	orrs.w	r2, r3, r4
 8009a4e:	d102      	bne.n	8009a56 <__ieee754_pow+0x1e6>
 8009a50:	4632      	mov	r2, r6
 8009a52:	463b      	mov	r3, r7
 8009a54:	e7e9      	b.n	8009a2a <__ieee754_pow+0x1ba>
 8009a56:	3c01      	subs	r4, #1
 8009a58:	431c      	orrs	r4, r3
 8009a5a:	d016      	beq.n	8009a8a <__ieee754_pow+0x21a>
 8009a5c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8009ae8 <__ieee754_pow+0x278>
 8009a60:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009a64:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a68:	f240 8112 	bls.w	8009c90 <__ieee754_pow+0x420>
 8009a6c:	4b28      	ldr	r3, [pc, #160]	@ (8009b10 <__ieee754_pow+0x2a0>)
 8009a6e:	459a      	cmp	sl, r3
 8009a70:	4b25      	ldr	r3, [pc, #148]	@ (8009b08 <__ieee754_pow+0x298>)
 8009a72:	d916      	bls.n	8009aa2 <__ieee754_pow+0x232>
 8009a74:	4598      	cmp	r8, r3
 8009a76:	d80b      	bhi.n	8009a90 <__ieee754_pow+0x220>
 8009a78:	f1b9 0f00 	cmp.w	r9, #0
 8009a7c:	da0b      	bge.n	8009a96 <__ieee754_pow+0x226>
 8009a7e:	2000      	movs	r0, #0
 8009a80:	b011      	add	sp, #68	@ 0x44
 8009a82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a86:	f000 bef3 	b.w	800a870 <__math_oflow>
 8009a8a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8009af0 <__ieee754_pow+0x280>
 8009a8e:	e7e7      	b.n	8009a60 <__ieee754_pow+0x1f0>
 8009a90:	f1b9 0f00 	cmp.w	r9, #0
 8009a94:	dcf3      	bgt.n	8009a7e <__ieee754_pow+0x20e>
 8009a96:	2000      	movs	r0, #0
 8009a98:	b011      	add	sp, #68	@ 0x44
 8009a9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a9e:	f000 bedf 	b.w	800a860 <__math_uflow>
 8009aa2:	4598      	cmp	r8, r3
 8009aa4:	d20c      	bcs.n	8009ac0 <__ieee754_pow+0x250>
 8009aa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2300      	movs	r3, #0
 8009aae:	f7f6 ffe1 	bl	8000a74 <__aeabi_dcmplt>
 8009ab2:	3800      	subs	r0, #0
 8009ab4:	bf18      	it	ne
 8009ab6:	2001      	movne	r0, #1
 8009ab8:	f1b9 0f00 	cmp.w	r9, #0
 8009abc:	daec      	bge.n	8009a98 <__ieee754_pow+0x228>
 8009abe:	e7df      	b.n	8009a80 <__ieee754_pow+0x210>
 8009ac0:	4b10      	ldr	r3, [pc, #64]	@ (8009b04 <__ieee754_pow+0x294>)
 8009ac2:	4598      	cmp	r8, r3
 8009ac4:	f04f 0200 	mov.w	r2, #0
 8009ac8:	d924      	bls.n	8009b14 <__ieee754_pow+0x2a4>
 8009aca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ace:	2300      	movs	r3, #0
 8009ad0:	f7f6 ffd0 	bl	8000a74 <__aeabi_dcmplt>
 8009ad4:	3800      	subs	r0, #0
 8009ad6:	bf18      	it	ne
 8009ad8:	2001      	movne	r0, #1
 8009ada:	f1b9 0f00 	cmp.w	r9, #0
 8009ade:	dccf      	bgt.n	8009a80 <__ieee754_pow+0x210>
 8009ae0:	e7da      	b.n	8009a98 <__ieee754_pow+0x228>
 8009ae2:	bf00      	nop
 8009ae4:	f3af 8000 	nop.w
 8009ae8:	00000000 	.word	0x00000000
 8009aec:	3ff00000 	.word	0x3ff00000
 8009af0:	00000000 	.word	0x00000000
 8009af4:	bff00000 	.word	0xbff00000
 8009af8:	fff00000 	.word	0xfff00000
 8009afc:	7ff00000 	.word	0x7ff00000
 8009b00:	433fffff 	.word	0x433fffff
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	3fefffff 	.word	0x3fefffff
 8009b0c:	3fe00000 	.word	0x3fe00000
 8009b10:	43f00000 	.word	0x43f00000
 8009b14:	4b5a      	ldr	r3, [pc, #360]	@ (8009c80 <__ieee754_pow+0x410>)
 8009b16:	f7f6 fb83 	bl	8000220 <__aeabi_dsub>
 8009b1a:	a351      	add	r3, pc, #324	@ (adr r3, 8009c60 <__ieee754_pow+0x3f0>)
 8009b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b20:	4604      	mov	r4, r0
 8009b22:	460d      	mov	r5, r1
 8009b24:	f7f6 fd34 	bl	8000590 <__aeabi_dmul>
 8009b28:	a34f      	add	r3, pc, #316	@ (adr r3, 8009c68 <__ieee754_pow+0x3f8>)
 8009b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b2e:	4606      	mov	r6, r0
 8009b30:	460f      	mov	r7, r1
 8009b32:	4620      	mov	r0, r4
 8009b34:	4629      	mov	r1, r5
 8009b36:	f7f6 fd2b 	bl	8000590 <__aeabi_dmul>
 8009b3a:	4b52      	ldr	r3, [pc, #328]	@ (8009c84 <__ieee754_pow+0x414>)
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	468b      	mov	fp, r1
 8009b40:	2200      	movs	r2, #0
 8009b42:	4620      	mov	r0, r4
 8009b44:	4629      	mov	r1, r5
 8009b46:	f7f6 fd23 	bl	8000590 <__aeabi_dmul>
 8009b4a:	4602      	mov	r2, r0
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	a148      	add	r1, pc, #288	@ (adr r1, 8009c70 <__ieee754_pow+0x400>)
 8009b50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b54:	f7f6 fb64 	bl	8000220 <__aeabi_dsub>
 8009b58:	4622      	mov	r2, r4
 8009b5a:	462b      	mov	r3, r5
 8009b5c:	f7f6 fd18 	bl	8000590 <__aeabi_dmul>
 8009b60:	4602      	mov	r2, r0
 8009b62:	460b      	mov	r3, r1
 8009b64:	2000      	movs	r0, #0
 8009b66:	4948      	ldr	r1, [pc, #288]	@ (8009c88 <__ieee754_pow+0x418>)
 8009b68:	f7f6 fb5a 	bl	8000220 <__aeabi_dsub>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4680      	mov	r8, r0
 8009b70:	4689      	mov	r9, r1
 8009b72:	462b      	mov	r3, r5
 8009b74:	4620      	mov	r0, r4
 8009b76:	4629      	mov	r1, r5
 8009b78:	f7f6 fd0a 	bl	8000590 <__aeabi_dmul>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 fd04 	bl	8000590 <__aeabi_dmul>
 8009b88:	a33b      	add	r3, pc, #236	@ (adr r3, 8009c78 <__ieee754_pow+0x408>)
 8009b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b8e:	f7f6 fcff 	bl	8000590 <__aeabi_dmul>
 8009b92:	4602      	mov	r2, r0
 8009b94:	460b      	mov	r3, r1
 8009b96:	4650      	mov	r0, sl
 8009b98:	4659      	mov	r1, fp
 8009b9a:	f7f6 fb41 	bl	8000220 <__aeabi_dsub>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	4680      	mov	r8, r0
 8009ba4:	4689      	mov	r9, r1
 8009ba6:	4630      	mov	r0, r6
 8009ba8:	4639      	mov	r1, r7
 8009baa:	f7f6 fb3b 	bl	8000224 <__adddf3>
 8009bae:	2400      	movs	r4, #0
 8009bb0:	4632      	mov	r2, r6
 8009bb2:	463b      	mov	r3, r7
 8009bb4:	4620      	mov	r0, r4
 8009bb6:	460d      	mov	r5, r1
 8009bb8:	f7f6 fb32 	bl	8000220 <__aeabi_dsub>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4640      	mov	r0, r8
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	f7f6 fb2c 	bl	8000220 <__aeabi_dsub>
 8009bc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bcc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009bd8:	4606      	mov	r6, r0
 8009bda:	460f      	mov	r7, r1
 8009bdc:	4652      	mov	r2, sl
 8009bde:	465b      	mov	r3, fp
 8009be0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009be4:	f7f6 fb1c 	bl	8000220 <__aeabi_dsub>
 8009be8:	4622      	mov	r2, r4
 8009bea:	462b      	mov	r3, r5
 8009bec:	f7f6 fcd0 	bl	8000590 <__aeabi_dmul>
 8009bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bf4:	4680      	mov	r8, r0
 8009bf6:	4689      	mov	r9, r1
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 fcc8 	bl	8000590 <__aeabi_dmul>
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4640      	mov	r0, r8
 8009c06:	4649      	mov	r1, r9
 8009c08:	f7f6 fb0c 	bl	8000224 <__adddf3>
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	465b      	mov	r3, fp
 8009c10:	4606      	mov	r6, r0
 8009c12:	460f      	mov	r7, r1
 8009c14:	4620      	mov	r0, r4
 8009c16:	4629      	mov	r1, r5
 8009c18:	f7f6 fcba 	bl	8000590 <__aeabi_dmul>
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4680      	mov	r8, r0
 8009c22:	4689      	mov	r9, r1
 8009c24:	4630      	mov	r0, r6
 8009c26:	4639      	mov	r1, r7
 8009c28:	f7f6 fafc 	bl	8000224 <__adddf3>
 8009c2c:	4b17      	ldr	r3, [pc, #92]	@ (8009c8c <__ieee754_pow+0x41c>)
 8009c2e:	4299      	cmp	r1, r3
 8009c30:	4604      	mov	r4, r0
 8009c32:	460d      	mov	r5, r1
 8009c34:	468a      	mov	sl, r1
 8009c36:	468b      	mov	fp, r1
 8009c38:	f340 82ef 	ble.w	800a21a <__ieee754_pow+0x9aa>
 8009c3c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009c40:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009c44:	4303      	orrs	r3, r0
 8009c46:	f000 81e8 	beq.w	800a01a <__ieee754_pow+0x7aa>
 8009c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	2300      	movs	r3, #0
 8009c52:	f7f6 ff0f 	bl	8000a74 <__aeabi_dcmplt>
 8009c56:	3800      	subs	r0, #0
 8009c58:	bf18      	it	ne
 8009c5a:	2001      	movne	r0, #1
 8009c5c:	e710      	b.n	8009a80 <__ieee754_pow+0x210>
 8009c5e:	bf00      	nop
 8009c60:	60000000 	.word	0x60000000
 8009c64:	3ff71547 	.word	0x3ff71547
 8009c68:	f85ddf44 	.word	0xf85ddf44
 8009c6c:	3e54ae0b 	.word	0x3e54ae0b
 8009c70:	55555555 	.word	0x55555555
 8009c74:	3fd55555 	.word	0x3fd55555
 8009c78:	652b82fe 	.word	0x652b82fe
 8009c7c:	3ff71547 	.word	0x3ff71547
 8009c80:	3ff00000 	.word	0x3ff00000
 8009c84:	3fd00000 	.word	0x3fd00000
 8009c88:	3fe00000 	.word	0x3fe00000
 8009c8c:	408fffff 	.word	0x408fffff
 8009c90:	4bd5      	ldr	r3, [pc, #852]	@ (8009fe8 <__ieee754_pow+0x778>)
 8009c92:	402b      	ands	r3, r5
 8009c94:	2200      	movs	r2, #0
 8009c96:	b92b      	cbnz	r3, 8009ca4 <__ieee754_pow+0x434>
 8009c98:	4bd4      	ldr	r3, [pc, #848]	@ (8009fec <__ieee754_pow+0x77c>)
 8009c9a:	f7f6 fc79 	bl	8000590 <__aeabi_dmul>
 8009c9e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009ca2:	468b      	mov	fp, r1
 8009ca4:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009ca8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009cac:	4413      	add	r3, r2
 8009cae:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cb0:	4bcf      	ldr	r3, [pc, #828]	@ (8009ff0 <__ieee754_pow+0x780>)
 8009cb2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009cb6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8009cba:	459b      	cmp	fp, r3
 8009cbc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009cc0:	dd08      	ble.n	8009cd4 <__ieee754_pow+0x464>
 8009cc2:	4bcc      	ldr	r3, [pc, #816]	@ (8009ff4 <__ieee754_pow+0x784>)
 8009cc4:	459b      	cmp	fp, r3
 8009cc6:	f340 81a5 	ble.w	800a014 <__ieee754_pow+0x7a4>
 8009cca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ccc:	3301      	adds	r3, #1
 8009cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cd0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009cd4:	f04f 0a00 	mov.w	sl, #0
 8009cd8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009cdc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cde:	4bc6      	ldr	r3, [pc, #792]	@ (8009ff8 <__ieee754_pow+0x788>)
 8009ce0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ce4:	ed93 7b00 	vldr	d7, [r3]
 8009ce8:	4629      	mov	r1, r5
 8009cea:	ec53 2b17 	vmov	r2, r3, d7
 8009cee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009cf2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009cf6:	f7f6 fa93 	bl	8000220 <__aeabi_dsub>
 8009cfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cfe:	4606      	mov	r6, r0
 8009d00:	460f      	mov	r7, r1
 8009d02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d06:	f7f6 fa8d 	bl	8000224 <__adddf3>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	460b      	mov	r3, r1
 8009d0e:	2000      	movs	r0, #0
 8009d10:	49ba      	ldr	r1, [pc, #744]	@ (8009ffc <__ieee754_pow+0x78c>)
 8009d12:	f7f6 fd67 	bl	80007e4 <__aeabi_ddiv>
 8009d16:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	4630      	mov	r0, r6
 8009d20:	4639      	mov	r1, r7
 8009d22:	f7f6 fc35 	bl	8000590 <__aeabi_dmul>
 8009d26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d2a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8009d2e:	106d      	asrs	r5, r5, #1
 8009d30:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8009d34:	f04f 0b00 	mov.w	fp, #0
 8009d38:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8009d3c:	4661      	mov	r1, ip
 8009d3e:	2200      	movs	r2, #0
 8009d40:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009d44:	4658      	mov	r0, fp
 8009d46:	46e1      	mov	r9, ip
 8009d48:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	461d      	mov	r5, r3
 8009d50:	f7f6 fc1e 	bl	8000590 <__aeabi_dmul>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 fa60 	bl	8000220 <__aeabi_dsub>
 8009d60:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009d64:	4606      	mov	r6, r0
 8009d66:	460f      	mov	r7, r1
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4629      	mov	r1, r5
 8009d6c:	f7f6 fa58 	bl	8000220 <__aeabi_dsub>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d78:	f7f6 fa52 	bl	8000220 <__aeabi_dsub>
 8009d7c:	465a      	mov	r2, fp
 8009d7e:	464b      	mov	r3, r9
 8009d80:	f7f6 fc06 	bl	8000590 <__aeabi_dmul>
 8009d84:	4602      	mov	r2, r0
 8009d86:	460b      	mov	r3, r1
 8009d88:	4630      	mov	r0, r6
 8009d8a:	4639      	mov	r1, r7
 8009d8c:	f7f6 fa48 	bl	8000220 <__aeabi_dsub>
 8009d90:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009d94:	f7f6 fbfc 	bl	8000590 <__aeabi_dmul>
 8009d98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d9c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009da0:	4610      	mov	r0, r2
 8009da2:	4619      	mov	r1, r3
 8009da4:	f7f6 fbf4 	bl	8000590 <__aeabi_dmul>
 8009da8:	a37d      	add	r3, pc, #500	@ (adr r3, 8009fa0 <__ieee754_pow+0x730>)
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	f7f6 fbed 	bl	8000590 <__aeabi_dmul>
 8009db6:	a37c      	add	r3, pc, #496	@ (adr r3, 8009fa8 <__ieee754_pow+0x738>)
 8009db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dbc:	f7f6 fa32 	bl	8000224 <__adddf3>
 8009dc0:	4622      	mov	r2, r4
 8009dc2:	462b      	mov	r3, r5
 8009dc4:	f7f6 fbe4 	bl	8000590 <__aeabi_dmul>
 8009dc8:	a379      	add	r3, pc, #484	@ (adr r3, 8009fb0 <__ieee754_pow+0x740>)
 8009dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dce:	f7f6 fa29 	bl	8000224 <__adddf3>
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	462b      	mov	r3, r5
 8009dd6:	f7f6 fbdb 	bl	8000590 <__aeabi_dmul>
 8009dda:	a377      	add	r3, pc, #476	@ (adr r3, 8009fb8 <__ieee754_pow+0x748>)
 8009ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de0:	f7f6 fa20 	bl	8000224 <__adddf3>
 8009de4:	4622      	mov	r2, r4
 8009de6:	462b      	mov	r3, r5
 8009de8:	f7f6 fbd2 	bl	8000590 <__aeabi_dmul>
 8009dec:	a374      	add	r3, pc, #464	@ (adr r3, 8009fc0 <__ieee754_pow+0x750>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 fa17 	bl	8000224 <__adddf3>
 8009df6:	4622      	mov	r2, r4
 8009df8:	462b      	mov	r3, r5
 8009dfa:	f7f6 fbc9 	bl	8000590 <__aeabi_dmul>
 8009dfe:	a372      	add	r3, pc, #456	@ (adr r3, 8009fc8 <__ieee754_pow+0x758>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fa0e 	bl	8000224 <__adddf3>
 8009e08:	4622      	mov	r2, r4
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	462b      	mov	r3, r5
 8009e10:	4620      	mov	r0, r4
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7f6 fbbc 	bl	8000590 <__aeabi_dmul>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4630      	mov	r0, r6
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fbb6 	bl	8000590 <__aeabi_dmul>
 8009e24:	465a      	mov	r2, fp
 8009e26:	4604      	mov	r4, r0
 8009e28:	460d      	mov	r5, r1
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e30:	f7f6 f9f8 	bl	8000224 <__adddf3>
 8009e34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e38:	f7f6 fbaa 	bl	8000590 <__aeabi_dmul>
 8009e3c:	4622      	mov	r2, r4
 8009e3e:	462b      	mov	r3, r5
 8009e40:	f7f6 f9f0 	bl	8000224 <__adddf3>
 8009e44:	465a      	mov	r2, fp
 8009e46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e4a:	464b      	mov	r3, r9
 8009e4c:	4658      	mov	r0, fp
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7f6 fb9e 	bl	8000590 <__aeabi_dmul>
 8009e54:	4b6a      	ldr	r3, [pc, #424]	@ (800a000 <__ieee754_pow+0x790>)
 8009e56:	2200      	movs	r2, #0
 8009e58:	4606      	mov	r6, r0
 8009e5a:	460f      	mov	r7, r1
 8009e5c:	f7f6 f9e2 	bl	8000224 <__adddf3>
 8009e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e64:	f7f6 f9de 	bl	8000224 <__adddf3>
 8009e68:	46d8      	mov	r8, fp
 8009e6a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8009e6e:	460d      	mov	r5, r1
 8009e70:	465a      	mov	r2, fp
 8009e72:	460b      	mov	r3, r1
 8009e74:	4640      	mov	r0, r8
 8009e76:	4649      	mov	r1, r9
 8009e78:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8009e7c:	f7f6 fb88 	bl	8000590 <__aeabi_dmul>
 8009e80:	465c      	mov	r4, fp
 8009e82:	4680      	mov	r8, r0
 8009e84:	4689      	mov	r9, r1
 8009e86:	4b5e      	ldr	r3, [pc, #376]	@ (800a000 <__ieee754_pow+0x790>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	f7f6 f9c7 	bl	8000220 <__aeabi_dsub>
 8009e92:	4632      	mov	r2, r6
 8009e94:	463b      	mov	r3, r7
 8009e96:	f7f6 f9c3 	bl	8000220 <__aeabi_dsub>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009ea2:	f7f6 f9bd 	bl	8000220 <__aeabi_dsub>
 8009ea6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009eaa:	f7f6 fb71 	bl	8000590 <__aeabi_dmul>
 8009eae:	4622      	mov	r2, r4
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	460f      	mov	r7, r1
 8009eb4:	462b      	mov	r3, r5
 8009eb6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009eba:	f7f6 fb69 	bl	8000590 <__aeabi_dmul>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	4639      	mov	r1, r7
 8009ec6:	f7f6 f9ad 	bl	8000224 <__adddf3>
 8009eca:	4606      	mov	r6, r0
 8009ecc:	460f      	mov	r7, r1
 8009ece:	4602      	mov	r2, r0
 8009ed0:	460b      	mov	r3, r1
 8009ed2:	4640      	mov	r0, r8
 8009ed4:	4649      	mov	r1, r9
 8009ed6:	f7f6 f9a5 	bl	8000224 <__adddf3>
 8009eda:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8009ede:	a33c      	add	r3, pc, #240	@ (adr r3, 8009fd0 <__ieee754_pow+0x760>)
 8009ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee4:	4658      	mov	r0, fp
 8009ee6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8009eea:	460d      	mov	r5, r1
 8009eec:	f7f6 fb50 	bl	8000590 <__aeabi_dmul>
 8009ef0:	465c      	mov	r4, fp
 8009ef2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ef6:	4642      	mov	r2, r8
 8009ef8:	464b      	mov	r3, r9
 8009efa:	4620      	mov	r0, r4
 8009efc:	4629      	mov	r1, r5
 8009efe:	f7f6 f98f 	bl	8000220 <__aeabi_dsub>
 8009f02:	4602      	mov	r2, r0
 8009f04:	460b      	mov	r3, r1
 8009f06:	4630      	mov	r0, r6
 8009f08:	4639      	mov	r1, r7
 8009f0a:	f7f6 f989 	bl	8000220 <__aeabi_dsub>
 8009f0e:	a332      	add	r3, pc, #200	@ (adr r3, 8009fd8 <__ieee754_pow+0x768>)
 8009f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f14:	f7f6 fb3c 	bl	8000590 <__aeabi_dmul>
 8009f18:	a331      	add	r3, pc, #196	@ (adr r3, 8009fe0 <__ieee754_pow+0x770>)
 8009f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1e:	4606      	mov	r6, r0
 8009f20:	460f      	mov	r7, r1
 8009f22:	4620      	mov	r0, r4
 8009f24:	4629      	mov	r1, r5
 8009f26:	f7f6 fb33 	bl	8000590 <__aeabi_dmul>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	4630      	mov	r0, r6
 8009f30:	4639      	mov	r1, r7
 8009f32:	f7f6 f977 	bl	8000224 <__adddf3>
 8009f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f38:	4b32      	ldr	r3, [pc, #200]	@ (800a004 <__ieee754_pow+0x794>)
 8009f3a:	4413      	add	r3, r2
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 f970 	bl	8000224 <__adddf3>
 8009f44:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009f48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009f4a:	f7f6 fab7 	bl	80004bc <__aeabi_i2d>
 8009f4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f50:	4b2d      	ldr	r3, [pc, #180]	@ (800a008 <__ieee754_pow+0x798>)
 8009f52:	4413      	add	r3, r2
 8009f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f58:	4606      	mov	r6, r0
 8009f5a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009f5e:	460f      	mov	r7, r1
 8009f60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f64:	f7f6 f95e 	bl	8000224 <__adddf3>
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	f7f6 f95a 	bl	8000224 <__adddf3>
 8009f70:	4632      	mov	r2, r6
 8009f72:	463b      	mov	r3, r7
 8009f74:	f7f6 f956 	bl	8000224 <__adddf3>
 8009f78:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8009f7c:	4632      	mov	r2, r6
 8009f7e:	463b      	mov	r3, r7
 8009f80:	4658      	mov	r0, fp
 8009f82:	460d      	mov	r5, r1
 8009f84:	f7f6 f94c 	bl	8000220 <__aeabi_dsub>
 8009f88:	4642      	mov	r2, r8
 8009f8a:	464b      	mov	r3, r9
 8009f8c:	f7f6 f948 	bl	8000220 <__aeabi_dsub>
 8009f90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009f94:	f7f6 f944 	bl	8000220 <__aeabi_dsub>
 8009f98:	465c      	mov	r4, fp
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	e036      	b.n	800a00c <__ieee754_pow+0x79c>
 8009f9e:	bf00      	nop
 8009fa0:	4a454eef 	.word	0x4a454eef
 8009fa4:	3fca7e28 	.word	0x3fca7e28
 8009fa8:	93c9db65 	.word	0x93c9db65
 8009fac:	3fcd864a 	.word	0x3fcd864a
 8009fb0:	a91d4101 	.word	0xa91d4101
 8009fb4:	3fd17460 	.word	0x3fd17460
 8009fb8:	518f264d 	.word	0x518f264d
 8009fbc:	3fd55555 	.word	0x3fd55555
 8009fc0:	db6fabff 	.word	0xdb6fabff
 8009fc4:	3fdb6db6 	.word	0x3fdb6db6
 8009fc8:	33333303 	.word	0x33333303
 8009fcc:	3fe33333 	.word	0x3fe33333
 8009fd0:	e0000000 	.word	0xe0000000
 8009fd4:	3feec709 	.word	0x3feec709
 8009fd8:	dc3a03fd 	.word	0xdc3a03fd
 8009fdc:	3feec709 	.word	0x3feec709
 8009fe0:	145b01f5 	.word	0x145b01f5
 8009fe4:	be3e2fe0 	.word	0xbe3e2fe0
 8009fe8:	7ff00000 	.word	0x7ff00000
 8009fec:	43400000 	.word	0x43400000
 8009ff0:	0003988e 	.word	0x0003988e
 8009ff4:	000bb679 	.word	0x000bb679
 8009ff8:	0800abe0 	.word	0x0800abe0
 8009ffc:	3ff00000 	.word	0x3ff00000
 800a000:	40080000 	.word	0x40080000
 800a004:	0800abc0 	.word	0x0800abc0
 800a008:	0800abd0 	.word	0x0800abd0
 800a00c:	460b      	mov	r3, r1
 800a00e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a012:	e5d7      	b.n	8009bc4 <__ieee754_pow+0x354>
 800a014:	f04f 0a01 	mov.w	sl, #1
 800a018:	e65e      	b.n	8009cd8 <__ieee754_pow+0x468>
 800a01a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800a2ec <__ieee754_pow+0xa7c>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	4630      	mov	r0, r6
 800a022:	4639      	mov	r1, r7
 800a024:	f7f6 f8fe 	bl	8000224 <__adddf3>
 800a028:	4642      	mov	r2, r8
 800a02a:	e9cd 0100 	strd	r0, r1, [sp]
 800a02e:	464b      	mov	r3, r9
 800a030:	4620      	mov	r0, r4
 800a032:	4629      	mov	r1, r5
 800a034:	f7f6 f8f4 	bl	8000220 <__aeabi_dsub>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a040:	f7f6 fd36 	bl	8000ab0 <__aeabi_dcmpgt>
 800a044:	2800      	cmp	r0, #0
 800a046:	f47f ae00 	bne.w	8009c4a <__ieee754_pow+0x3da>
 800a04a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800a04e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800a052:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800a056:	fa43 fa0a 	asr.w	sl, r3, sl
 800a05a:	44da      	add	sl, fp
 800a05c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a060:	489d      	ldr	r0, [pc, #628]	@ (800a2d8 <__ieee754_pow+0xa68>)
 800a062:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800a066:	4108      	asrs	r0, r1
 800a068:	ea00 030a 	and.w	r3, r0, sl
 800a06c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a070:	f1c1 0114 	rsb	r1, r1, #20
 800a074:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800a078:	fa4a fa01 	asr.w	sl, sl, r1
 800a07c:	f1bb 0f00 	cmp.w	fp, #0
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f04f 0200 	mov.w	r2, #0
 800a088:	bfb8      	it	lt
 800a08a:	f1ca 0a00 	rsblt	sl, sl, #0
 800a08e:	f7f6 f8c7 	bl	8000220 <__aeabi_dsub>
 800a092:	4680      	mov	r8, r0
 800a094:	4689      	mov	r9, r1
 800a096:	4632      	mov	r2, r6
 800a098:	463b      	mov	r3, r7
 800a09a:	4640      	mov	r0, r8
 800a09c:	4649      	mov	r1, r9
 800a09e:	f7f6 f8c1 	bl	8000224 <__adddf3>
 800a0a2:	2400      	movs	r4, #0
 800a0a4:	a37c      	add	r3, pc, #496	@ (adr r3, 800a298 <__ieee754_pow+0xa28>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	460d      	mov	r5, r1
 800a0ae:	f7f6 fa6f 	bl	8000590 <__aeabi_dmul>
 800a0b2:	4642      	mov	r2, r8
 800a0b4:	e9cd 0100 	strd	r0, r1, [sp]
 800a0b8:	464b      	mov	r3, r9
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	4629      	mov	r1, r5
 800a0be:	f7f6 f8af 	bl	8000220 <__aeabi_dsub>
 800a0c2:	4602      	mov	r2, r0
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4630      	mov	r0, r6
 800a0c8:	4639      	mov	r1, r7
 800a0ca:	f7f6 f8a9 	bl	8000220 <__aeabi_dsub>
 800a0ce:	a374      	add	r3, pc, #464	@ (adr r3, 800a2a0 <__ieee754_pow+0xa30>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 fa5c 	bl	8000590 <__aeabi_dmul>
 800a0d8:	a373      	add	r3, pc, #460	@ (adr r3, 800a2a8 <__ieee754_pow+0xa38>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	4680      	mov	r8, r0
 800a0e0:	4689      	mov	r9, r1
 800a0e2:	4620      	mov	r0, r4
 800a0e4:	4629      	mov	r1, r5
 800a0e6:	f7f6 fa53 	bl	8000590 <__aeabi_dmul>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	4640      	mov	r0, r8
 800a0f0:	4649      	mov	r1, r9
 800a0f2:	f7f6 f897 	bl	8000224 <__adddf3>
 800a0f6:	4604      	mov	r4, r0
 800a0f8:	460d      	mov	r5, r1
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a102:	f7f6 f88f 	bl	8000224 <__adddf3>
 800a106:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a10a:	4680      	mov	r8, r0
 800a10c:	4689      	mov	r9, r1
 800a10e:	f7f6 f887 	bl	8000220 <__aeabi_dsub>
 800a112:	4602      	mov	r2, r0
 800a114:	460b      	mov	r3, r1
 800a116:	4620      	mov	r0, r4
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 f881 	bl	8000220 <__aeabi_dsub>
 800a11e:	4642      	mov	r2, r8
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	464b      	mov	r3, r9
 800a126:	4640      	mov	r0, r8
 800a128:	4649      	mov	r1, r9
 800a12a:	f7f6 fa31 	bl	8000590 <__aeabi_dmul>
 800a12e:	a360      	add	r3, pc, #384	@ (adr r3, 800a2b0 <__ieee754_pow+0xa40>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	4604      	mov	r4, r0
 800a136:	460d      	mov	r5, r1
 800a138:	f7f6 fa2a 	bl	8000590 <__aeabi_dmul>
 800a13c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a2b8 <__ieee754_pow+0xa48>)
 800a13e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a142:	f7f6 f86d 	bl	8000220 <__aeabi_dsub>
 800a146:	4622      	mov	r2, r4
 800a148:	462b      	mov	r3, r5
 800a14a:	f7f6 fa21 	bl	8000590 <__aeabi_dmul>
 800a14e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a2c0 <__ieee754_pow+0xa50>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	f7f6 f866 	bl	8000224 <__adddf3>
 800a158:	4622      	mov	r2, r4
 800a15a:	462b      	mov	r3, r5
 800a15c:	f7f6 fa18 	bl	8000590 <__aeabi_dmul>
 800a160:	a359      	add	r3, pc, #356	@ (adr r3, 800a2c8 <__ieee754_pow+0xa58>)
 800a162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a166:	f7f6 f85b 	bl	8000220 <__aeabi_dsub>
 800a16a:	4622      	mov	r2, r4
 800a16c:	462b      	mov	r3, r5
 800a16e:	f7f6 fa0f 	bl	8000590 <__aeabi_dmul>
 800a172:	a357      	add	r3, pc, #348	@ (adr r3, 800a2d0 <__ieee754_pow+0xa60>)
 800a174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a178:	f7f6 f854 	bl	8000224 <__adddf3>
 800a17c:	4622      	mov	r2, r4
 800a17e:	462b      	mov	r3, r5
 800a180:	f7f6 fa06 	bl	8000590 <__aeabi_dmul>
 800a184:	4602      	mov	r2, r0
 800a186:	460b      	mov	r3, r1
 800a188:	4640      	mov	r0, r8
 800a18a:	4649      	mov	r1, r9
 800a18c:	f7f6 f848 	bl	8000220 <__aeabi_dsub>
 800a190:	4604      	mov	r4, r0
 800a192:	460d      	mov	r5, r1
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4640      	mov	r0, r8
 800a19a:	4649      	mov	r1, r9
 800a19c:	f7f6 f9f8 	bl	8000590 <__aeabi_dmul>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	e9cd 0100 	strd	r0, r1, [sp]
 800a1a6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	4629      	mov	r1, r5
 800a1ae:	f7f6 f837 	bl	8000220 <__aeabi_dsub>
 800a1b2:	4602      	mov	r2, r0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1ba:	f7f6 fb13 	bl	80007e4 <__aeabi_ddiv>
 800a1be:	4632      	mov	r2, r6
 800a1c0:	4604      	mov	r4, r0
 800a1c2:	460d      	mov	r5, r1
 800a1c4:	463b      	mov	r3, r7
 800a1c6:	4640      	mov	r0, r8
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	f7f6 f9e1 	bl	8000590 <__aeabi_dmul>
 800a1ce:	4632      	mov	r2, r6
 800a1d0:	463b      	mov	r3, r7
 800a1d2:	f7f6 f827 	bl	8000224 <__adddf3>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	4620      	mov	r0, r4
 800a1dc:	4629      	mov	r1, r5
 800a1de:	f7f6 f81f 	bl	8000220 <__aeabi_dsub>
 800a1e2:	4642      	mov	r2, r8
 800a1e4:	464b      	mov	r3, r9
 800a1e6:	f7f6 f81b 	bl	8000220 <__aeabi_dsub>
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	493b      	ldr	r1, [pc, #236]	@ (800a2dc <__ieee754_pow+0xa6c>)
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	f7f6 f815 	bl	8000220 <__aeabi_dsub>
 800a1f6:	ec41 0b10 	vmov	d0, r0, r1
 800a1fa:	ee10 3a90 	vmov	r3, s1
 800a1fe:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a206:	da30      	bge.n	800a26a <__ieee754_pow+0x9fa>
 800a208:	4650      	mov	r0, sl
 800a20a:	f000 fa7d 	bl	800a708 <scalbn>
 800a20e:	ec51 0b10 	vmov	r0, r1, d0
 800a212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a216:	f7ff bbd2 	b.w	80099be <__ieee754_pow+0x14e>
 800a21a:	4c31      	ldr	r4, [pc, #196]	@ (800a2e0 <__ieee754_pow+0xa70>)
 800a21c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a220:	42a3      	cmp	r3, r4
 800a222:	d91a      	bls.n	800a25a <__ieee754_pow+0x9ea>
 800a224:	4b2f      	ldr	r3, [pc, #188]	@ (800a2e4 <__ieee754_pow+0xa74>)
 800a226:	440b      	add	r3, r1
 800a228:	4303      	orrs	r3, r0
 800a22a:	d009      	beq.n	800a240 <__ieee754_pow+0x9d0>
 800a22c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	f7f6 fc1e 	bl	8000a74 <__aeabi_dcmplt>
 800a238:	3800      	subs	r0, #0
 800a23a:	bf18      	it	ne
 800a23c:	2001      	movne	r0, #1
 800a23e:	e42b      	b.n	8009a98 <__ieee754_pow+0x228>
 800a240:	4642      	mov	r2, r8
 800a242:	464b      	mov	r3, r9
 800a244:	f7f5 ffec 	bl	8000220 <__aeabi_dsub>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	f7f6 fc26 	bl	8000a9c <__aeabi_dcmpge>
 800a250:	2800      	cmp	r0, #0
 800a252:	d1eb      	bne.n	800a22c <__ieee754_pow+0x9bc>
 800a254:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800a2f4 <__ieee754_pow+0xa84>
 800a258:	e6f7      	b.n	800a04a <__ieee754_pow+0x7da>
 800a25a:	469a      	mov	sl, r3
 800a25c:	4b22      	ldr	r3, [pc, #136]	@ (800a2e8 <__ieee754_pow+0xa78>)
 800a25e:	459a      	cmp	sl, r3
 800a260:	f63f aef3 	bhi.w	800a04a <__ieee754_pow+0x7da>
 800a264:	f8dd a010 	ldr.w	sl, [sp, #16]
 800a268:	e715      	b.n	800a096 <__ieee754_pow+0x826>
 800a26a:	ec51 0b10 	vmov	r0, r1, d0
 800a26e:	4619      	mov	r1, r3
 800a270:	e7cf      	b.n	800a212 <__ieee754_pow+0x9a2>
 800a272:	491a      	ldr	r1, [pc, #104]	@ (800a2dc <__ieee754_pow+0xa6c>)
 800a274:	2000      	movs	r0, #0
 800a276:	f7ff bb18 	b.w	80098aa <__ieee754_pow+0x3a>
 800a27a:	2000      	movs	r0, #0
 800a27c:	2100      	movs	r1, #0
 800a27e:	f7ff bb14 	b.w	80098aa <__ieee754_pow+0x3a>
 800a282:	4630      	mov	r0, r6
 800a284:	4639      	mov	r1, r7
 800a286:	f7ff bb10 	b.w	80098aa <__ieee754_pow+0x3a>
 800a28a:	460c      	mov	r4, r1
 800a28c:	f7ff bb5e 	b.w	800994c <__ieee754_pow+0xdc>
 800a290:	2400      	movs	r4, #0
 800a292:	f7ff bb49 	b.w	8009928 <__ieee754_pow+0xb8>
 800a296:	bf00      	nop
 800a298:	00000000 	.word	0x00000000
 800a29c:	3fe62e43 	.word	0x3fe62e43
 800a2a0:	fefa39ef 	.word	0xfefa39ef
 800a2a4:	3fe62e42 	.word	0x3fe62e42
 800a2a8:	0ca86c39 	.word	0x0ca86c39
 800a2ac:	be205c61 	.word	0xbe205c61
 800a2b0:	72bea4d0 	.word	0x72bea4d0
 800a2b4:	3e663769 	.word	0x3e663769
 800a2b8:	c5d26bf1 	.word	0xc5d26bf1
 800a2bc:	3ebbbd41 	.word	0x3ebbbd41
 800a2c0:	af25de2c 	.word	0xaf25de2c
 800a2c4:	3f11566a 	.word	0x3f11566a
 800a2c8:	16bebd93 	.word	0x16bebd93
 800a2cc:	3f66c16c 	.word	0x3f66c16c
 800a2d0:	5555553e 	.word	0x5555553e
 800a2d4:	3fc55555 	.word	0x3fc55555
 800a2d8:	fff00000 	.word	0xfff00000
 800a2dc:	3ff00000 	.word	0x3ff00000
 800a2e0:	4090cbff 	.word	0x4090cbff
 800a2e4:	3f6f3400 	.word	0x3f6f3400
 800a2e8:	3fe00000 	.word	0x3fe00000
 800a2ec:	652b82fe 	.word	0x652b82fe
 800a2f0:	3c971547 	.word	0x3c971547
 800a2f4:	4090cc00 	.word	0x4090cc00

0800a2f8 <fabs>:
 800a2f8:	ec51 0b10 	vmov	r0, r1, d0
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a302:	ec43 2b10 	vmov	d0, r2, r3
 800a306:	4770      	bx	lr

0800a308 <__ieee754_atan2f>:
 800a308:	ee10 2a90 	vmov	r2, s1
 800a30c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800a310:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a314:	b510      	push	{r4, lr}
 800a316:	eef0 7a40 	vmov.f32	s15, s0
 800a31a:	d806      	bhi.n	800a32a <__ieee754_atan2f+0x22>
 800a31c:	ee10 0a10 	vmov	r0, s0
 800a320:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800a324:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a328:	d904      	bls.n	800a334 <__ieee754_atan2f+0x2c>
 800a32a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800a32e:	eeb0 0a67 	vmov.f32	s0, s15
 800a332:	bd10      	pop	{r4, pc}
 800a334:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800a338:	d103      	bne.n	800a342 <__ieee754_atan2f+0x3a>
 800a33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33e:	f000 b905 	b.w	800a54c <atanf>
 800a342:	1794      	asrs	r4, r2, #30
 800a344:	f004 0402 	and.w	r4, r4, #2
 800a348:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800a34c:	b943      	cbnz	r3, 800a360 <__ieee754_atan2f+0x58>
 800a34e:	2c02      	cmp	r4, #2
 800a350:	d05e      	beq.n	800a410 <__ieee754_atan2f+0x108>
 800a352:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a424 <__ieee754_atan2f+0x11c>
 800a356:	2c03      	cmp	r4, #3
 800a358:	bf08      	it	eq
 800a35a:	eef0 7a47 	vmoveq.f32	s15, s14
 800a35e:	e7e6      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a360:	b941      	cbnz	r1, 800a374 <__ieee754_atan2f+0x6c>
 800a362:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800a428 <__ieee754_atan2f+0x120>
 800a366:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a42c <__ieee754_atan2f+0x124>
 800a36a:	2800      	cmp	r0, #0
 800a36c:	bfb8      	it	lt
 800a36e:	eef0 7a47 	vmovlt.f32	s15, s14
 800a372:	e7dc      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a374:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a378:	d110      	bne.n	800a39c <__ieee754_atan2f+0x94>
 800a37a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a37e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a382:	d107      	bne.n	800a394 <__ieee754_atan2f+0x8c>
 800a384:	2c02      	cmp	r4, #2
 800a386:	d846      	bhi.n	800a416 <__ieee754_atan2f+0x10e>
 800a388:	4b29      	ldr	r3, [pc, #164]	@ (800a430 <__ieee754_atan2f+0x128>)
 800a38a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a38e:	edd3 7a00 	vldr	s15, [r3]
 800a392:	e7cc      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a394:	2c02      	cmp	r4, #2
 800a396:	d841      	bhi.n	800a41c <__ieee754_atan2f+0x114>
 800a398:	4b26      	ldr	r3, [pc, #152]	@ (800a434 <__ieee754_atan2f+0x12c>)
 800a39a:	e7f6      	b.n	800a38a <__ieee754_atan2f+0x82>
 800a39c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a3a0:	d0df      	beq.n	800a362 <__ieee754_atan2f+0x5a>
 800a3a2:	1a5b      	subs	r3, r3, r1
 800a3a4:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800a3a8:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800a3ac:	da1a      	bge.n	800a3e4 <__ieee754_atan2f+0xdc>
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	da01      	bge.n	800a3b6 <__ieee754_atan2f+0xae>
 800a3b2:	313c      	adds	r1, #60	@ 0x3c
 800a3b4:	db19      	blt.n	800a3ea <__ieee754_atan2f+0xe2>
 800a3b6:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800a3ba:	f000 f99b 	bl	800a6f4 <fabsf>
 800a3be:	f000 f8c5 	bl	800a54c <atanf>
 800a3c2:	eef0 7a40 	vmov.f32	s15, s0
 800a3c6:	2c01      	cmp	r4, #1
 800a3c8:	d012      	beq.n	800a3f0 <__ieee754_atan2f+0xe8>
 800a3ca:	2c02      	cmp	r4, #2
 800a3cc:	d017      	beq.n	800a3fe <__ieee754_atan2f+0xf6>
 800a3ce:	2c00      	cmp	r4, #0
 800a3d0:	d0ad      	beq.n	800a32e <__ieee754_atan2f+0x26>
 800a3d2:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800a438 <__ieee754_atan2f+0x130>
 800a3d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a3da:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800a43c <__ieee754_atan2f+0x134>
 800a3de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a3e2:	e7a4      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a3e4:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800a428 <__ieee754_atan2f+0x120>
 800a3e8:	e7ed      	b.n	800a3c6 <__ieee754_atan2f+0xbe>
 800a3ea:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800a440 <__ieee754_atan2f+0x138>
 800a3ee:	e7ea      	b.n	800a3c6 <__ieee754_atan2f+0xbe>
 800a3f0:	ee17 3a90 	vmov	r3, s15
 800a3f4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800a3f8:	ee07 3a90 	vmov	s15, r3
 800a3fc:	e797      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a3fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800a438 <__ieee754_atan2f+0x130>
 800a402:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a406:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800a43c <__ieee754_atan2f+0x134>
 800a40a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a40e:	e78e      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a410:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800a43c <__ieee754_atan2f+0x134>
 800a414:	e78b      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a416:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800a444 <__ieee754_atan2f+0x13c>
 800a41a:	e788      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a41c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800a440 <__ieee754_atan2f+0x138>
 800a420:	e785      	b.n	800a32e <__ieee754_atan2f+0x26>
 800a422:	bf00      	nop
 800a424:	c0490fdb 	.word	0xc0490fdb
 800a428:	3fc90fdb 	.word	0x3fc90fdb
 800a42c:	bfc90fdb 	.word	0xbfc90fdb
 800a430:	0800abfc 	.word	0x0800abfc
 800a434:	0800abf0 	.word	0x0800abf0
 800a438:	33bbbd2e 	.word	0x33bbbd2e
 800a43c:	40490fdb 	.word	0x40490fdb
 800a440:	00000000 	.word	0x00000000
 800a444:	3f490fdb 	.word	0x3f490fdb

0800a448 <__ieee754_fmodf>:
 800a448:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a44a:	ee10 5a90 	vmov	r5, s1
 800a44e:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800a452:	1e43      	subs	r3, r0, #1
 800a454:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800a458:	d206      	bcs.n	800a468 <__ieee754_fmodf+0x20>
 800a45a:	ee10 3a10 	vmov	r3, s0
 800a45e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800a462:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800a466:	d304      	bcc.n	800a472 <__ieee754_fmodf+0x2a>
 800a468:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a46c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a470:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a472:	4286      	cmp	r6, r0
 800a474:	dbfc      	blt.n	800a470 <__ieee754_fmodf+0x28>
 800a476:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800a47a:	d105      	bne.n	800a488 <__ieee754_fmodf+0x40>
 800a47c:	4b32      	ldr	r3, [pc, #200]	@ (800a548 <__ieee754_fmodf+0x100>)
 800a47e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800a482:	ed93 0a00 	vldr	s0, [r3]
 800a486:	e7f3      	b.n	800a470 <__ieee754_fmodf+0x28>
 800a488:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a48c:	d140      	bne.n	800a510 <__ieee754_fmodf+0xc8>
 800a48e:	0232      	lsls	r2, r6, #8
 800a490:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800a494:	2a00      	cmp	r2, #0
 800a496:	dc38      	bgt.n	800a50a <__ieee754_fmodf+0xc2>
 800a498:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800a49c:	d13e      	bne.n	800a51c <__ieee754_fmodf+0xd4>
 800a49e:	0207      	lsls	r7, r0, #8
 800a4a0:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800a4a4:	2f00      	cmp	r7, #0
 800a4a6:	da36      	bge.n	800a516 <__ieee754_fmodf+0xce>
 800a4a8:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800a4ac:	bfb9      	ittee	lt
 800a4ae:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800a4b2:	1a5b      	sublt	r3, r3, r1
 800a4b4:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800a4b8:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800a4bc:	bfb8      	it	lt
 800a4be:	fa06 f303 	lsllt.w	r3, r6, r3
 800a4c2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a4c6:	bfb5      	itete	lt
 800a4c8:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800a4cc:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800a4d0:	1aad      	sublt	r5, r5, r2
 800a4d2:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800a4d6:	bfb8      	it	lt
 800a4d8:	40a8      	lsllt	r0, r5
 800a4da:	1a89      	subs	r1, r1, r2
 800a4dc:	1a1d      	subs	r5, r3, r0
 800a4de:	bb01      	cbnz	r1, 800a522 <__ieee754_fmodf+0xda>
 800a4e0:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800a4e4:	bf38      	it	cc
 800a4e6:	462b      	movcc	r3, r5
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d0c7      	beq.n	800a47c <__ieee754_fmodf+0x34>
 800a4ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a4f0:	db1f      	blt.n	800a532 <__ieee754_fmodf+0xea>
 800a4f2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a4f6:	db1f      	blt.n	800a538 <__ieee754_fmodf+0xf0>
 800a4f8:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800a4fc:	327f      	adds	r2, #127	@ 0x7f
 800a4fe:	4323      	orrs	r3, r4
 800a500:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a504:	ee00 3a10 	vmov	s0, r3
 800a508:	e7b2      	b.n	800a470 <__ieee754_fmodf+0x28>
 800a50a:	3901      	subs	r1, #1
 800a50c:	0052      	lsls	r2, r2, #1
 800a50e:	e7c1      	b.n	800a494 <__ieee754_fmodf+0x4c>
 800a510:	15f1      	asrs	r1, r6, #23
 800a512:	397f      	subs	r1, #127	@ 0x7f
 800a514:	e7c0      	b.n	800a498 <__ieee754_fmodf+0x50>
 800a516:	3a01      	subs	r2, #1
 800a518:	007f      	lsls	r7, r7, #1
 800a51a:	e7c3      	b.n	800a4a4 <__ieee754_fmodf+0x5c>
 800a51c:	15c2      	asrs	r2, r0, #23
 800a51e:	3a7f      	subs	r2, #127	@ 0x7f
 800a520:	e7c2      	b.n	800a4a8 <__ieee754_fmodf+0x60>
 800a522:	2d00      	cmp	r5, #0
 800a524:	da02      	bge.n	800a52c <__ieee754_fmodf+0xe4>
 800a526:	005b      	lsls	r3, r3, #1
 800a528:	3901      	subs	r1, #1
 800a52a:	e7d7      	b.n	800a4dc <__ieee754_fmodf+0x94>
 800a52c:	d0a6      	beq.n	800a47c <__ieee754_fmodf+0x34>
 800a52e:	006b      	lsls	r3, r5, #1
 800a530:	e7fa      	b.n	800a528 <__ieee754_fmodf+0xe0>
 800a532:	005b      	lsls	r3, r3, #1
 800a534:	3a01      	subs	r2, #1
 800a536:	e7d9      	b.n	800a4ec <__ieee754_fmodf+0xa4>
 800a538:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800a53c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a540:	3282      	adds	r2, #130	@ 0x82
 800a542:	4113      	asrs	r3, r2
 800a544:	4323      	orrs	r3, r4
 800a546:	e7dd      	b.n	800a504 <__ieee754_fmodf+0xbc>
 800a548:	0800ac08 	.word	0x0800ac08

0800a54c <atanf>:
 800a54c:	b538      	push	{r3, r4, r5, lr}
 800a54e:	ee10 5a10 	vmov	r5, s0
 800a552:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800a556:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800a55a:	eef0 7a40 	vmov.f32	s15, s0
 800a55e:	d310      	bcc.n	800a582 <atanf+0x36>
 800a560:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800a564:	d904      	bls.n	800a570 <atanf+0x24>
 800a566:	ee70 7a00 	vadd.f32	s15, s0, s0
 800a56a:	eeb0 0a67 	vmov.f32	s0, s15
 800a56e:	bd38      	pop	{r3, r4, r5, pc}
 800a570:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800a6a8 <atanf+0x15c>
 800a574:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800a6ac <atanf+0x160>
 800a578:	2d00      	cmp	r5, #0
 800a57a:	bfc8      	it	gt
 800a57c:	eef0 7a47 	vmovgt.f32	s15, s14
 800a580:	e7f3      	b.n	800a56a <atanf+0x1e>
 800a582:	4b4b      	ldr	r3, [pc, #300]	@ (800a6b0 <atanf+0x164>)
 800a584:	429c      	cmp	r4, r3
 800a586:	d810      	bhi.n	800a5aa <atanf+0x5e>
 800a588:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800a58c:	d20a      	bcs.n	800a5a4 <atanf+0x58>
 800a58e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 800a6b4 <atanf+0x168>
 800a592:	ee30 7a07 	vadd.f32	s14, s0, s14
 800a596:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a59a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800a59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5a2:	dce2      	bgt.n	800a56a <atanf+0x1e>
 800a5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5a8:	e013      	b.n	800a5d2 <atanf+0x86>
 800a5aa:	f000 f8a3 	bl	800a6f4 <fabsf>
 800a5ae:	4b42      	ldr	r3, [pc, #264]	@ (800a6b8 <atanf+0x16c>)
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	d84f      	bhi.n	800a654 <atanf+0x108>
 800a5b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800a5b8:	429c      	cmp	r4, r3
 800a5ba:	d841      	bhi.n	800a640 <atanf+0xf4>
 800a5bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800a5c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a5c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a5ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800a5d8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800a6bc <atanf+0x170>
 800a5dc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 800a6c0 <atanf+0x174>
 800a5e0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 800a6c4 <atanf+0x178>
 800a5e4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800a5e8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800a5ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800a6c8 <atanf+0x17c>
 800a5f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a5f4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800a6cc <atanf+0x180>
 800a5f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a5fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800a6d0 <atanf+0x184>
 800a600:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800a604:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800a6d4 <atanf+0x188>
 800a608:	eee7 5a26 	vfma.f32	s11, s14, s13
 800a60c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800a6d8 <atanf+0x18c>
 800a610:	eea6 5a87 	vfma.f32	s10, s13, s14
 800a614:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800a6dc <atanf+0x190>
 800a618:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a61c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 800a6e0 <atanf+0x194>
 800a620:	eea7 5a26 	vfma.f32	s10, s14, s13
 800a624:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 800a6e4 <atanf+0x198>
 800a628:	eea5 7a26 	vfma.f32	s14, s10, s13
 800a62c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a630:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a634:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a638:	d121      	bne.n	800a67e <atanf+0x132>
 800a63a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a63e:	e794      	b.n	800a56a <atanf+0x1e>
 800a640:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800a644:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a648:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a64c:	2301      	movs	r3, #1
 800a64e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a652:	e7be      	b.n	800a5d2 <atanf+0x86>
 800a654:	4b24      	ldr	r3, [pc, #144]	@ (800a6e8 <atanf+0x19c>)
 800a656:	429c      	cmp	r4, r3
 800a658:	d80b      	bhi.n	800a672 <atanf+0x126>
 800a65a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800a65e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a662:	eea0 7a27 	vfma.f32	s14, s0, s15
 800a666:	2302      	movs	r3, #2
 800a668:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a66c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a670:	e7af      	b.n	800a5d2 <atanf+0x86>
 800a672:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800a676:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800a67a:	2303      	movs	r3, #3
 800a67c:	e7a9      	b.n	800a5d2 <atanf+0x86>
 800a67e:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ec <atanf+0x1a0>)
 800a680:	491b      	ldr	r1, [pc, #108]	@ (800a6f0 <atanf+0x1a4>)
 800a682:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800a686:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800a68a:	edd3 6a00 	vldr	s13, [r3]
 800a68e:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a692:	2d00      	cmp	r5, #0
 800a694:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a698:	edd2 7a00 	vldr	s15, [r2]
 800a69c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6a0:	bfb8      	it	lt
 800a6a2:	eef1 7a67 	vneglt.f32	s15, s15
 800a6a6:	e760      	b.n	800a56a <atanf+0x1e>
 800a6a8:	bfc90fdb 	.word	0xbfc90fdb
 800a6ac:	3fc90fdb 	.word	0x3fc90fdb
 800a6b0:	3edfffff 	.word	0x3edfffff
 800a6b4:	7149f2ca 	.word	0x7149f2ca
 800a6b8:	3f97ffff 	.word	0x3f97ffff
 800a6bc:	3c8569d7 	.word	0x3c8569d7
 800a6c0:	3d4bda59 	.word	0x3d4bda59
 800a6c4:	bd6ef16b 	.word	0xbd6ef16b
 800a6c8:	3d886b35 	.word	0x3d886b35
 800a6cc:	3dba2e6e 	.word	0x3dba2e6e
 800a6d0:	3e124925 	.word	0x3e124925
 800a6d4:	3eaaaaab 	.word	0x3eaaaaab
 800a6d8:	bd15a221 	.word	0xbd15a221
 800a6dc:	bd9d8795 	.word	0xbd9d8795
 800a6e0:	bde38e38 	.word	0xbde38e38
 800a6e4:	be4ccccd 	.word	0xbe4ccccd
 800a6e8:	401bffff 	.word	0x401bffff
 800a6ec:	0800ac20 	.word	0x0800ac20
 800a6f0:	0800ac10 	.word	0x0800ac10

0800a6f4 <fabsf>:
 800a6f4:	ee10 3a10 	vmov	r3, s0
 800a6f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a6fc:	ee00 3a10 	vmov	s0, r3
 800a700:	4770      	bx	lr
 800a702:	0000      	movs	r0, r0
 800a704:	0000      	movs	r0, r0
	...

0800a708 <scalbn>:
 800a708:	b570      	push	{r4, r5, r6, lr}
 800a70a:	ec55 4b10 	vmov	r4, r5, d0
 800a70e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800a712:	4606      	mov	r6, r0
 800a714:	462b      	mov	r3, r5
 800a716:	b991      	cbnz	r1, 800a73e <scalbn+0x36>
 800a718:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800a71c:	4323      	orrs	r3, r4
 800a71e:	d03d      	beq.n	800a79c <scalbn+0x94>
 800a720:	4b35      	ldr	r3, [pc, #212]	@ (800a7f8 <scalbn+0xf0>)
 800a722:	4620      	mov	r0, r4
 800a724:	4629      	mov	r1, r5
 800a726:	2200      	movs	r2, #0
 800a728:	f7f5 ff32 	bl	8000590 <__aeabi_dmul>
 800a72c:	4b33      	ldr	r3, [pc, #204]	@ (800a7fc <scalbn+0xf4>)
 800a72e:	429e      	cmp	r6, r3
 800a730:	4604      	mov	r4, r0
 800a732:	460d      	mov	r5, r1
 800a734:	da0f      	bge.n	800a756 <scalbn+0x4e>
 800a736:	a328      	add	r3, pc, #160	@ (adr r3, 800a7d8 <scalbn+0xd0>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	e01e      	b.n	800a77c <scalbn+0x74>
 800a73e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800a742:	4291      	cmp	r1, r2
 800a744:	d10b      	bne.n	800a75e <scalbn+0x56>
 800a746:	4622      	mov	r2, r4
 800a748:	4620      	mov	r0, r4
 800a74a:	4629      	mov	r1, r5
 800a74c:	f7f5 fd6a 	bl	8000224 <__adddf3>
 800a750:	4604      	mov	r4, r0
 800a752:	460d      	mov	r5, r1
 800a754:	e022      	b.n	800a79c <scalbn+0x94>
 800a756:	460b      	mov	r3, r1
 800a758:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800a75c:	3936      	subs	r1, #54	@ 0x36
 800a75e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800a762:	4296      	cmp	r6, r2
 800a764:	dd0d      	ble.n	800a782 <scalbn+0x7a>
 800a766:	2d00      	cmp	r5, #0
 800a768:	a11d      	add	r1, pc, #116	@ (adr r1, 800a7e0 <scalbn+0xd8>)
 800a76a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a76e:	da02      	bge.n	800a776 <scalbn+0x6e>
 800a770:	a11d      	add	r1, pc, #116	@ (adr r1, 800a7e8 <scalbn+0xe0>)
 800a772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a776:	a31a      	add	r3, pc, #104	@ (adr r3, 800a7e0 <scalbn+0xd8>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f5 ff08 	bl	8000590 <__aeabi_dmul>
 800a780:	e7e6      	b.n	800a750 <scalbn+0x48>
 800a782:	1872      	adds	r2, r6, r1
 800a784:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800a788:	428a      	cmp	r2, r1
 800a78a:	dcec      	bgt.n	800a766 <scalbn+0x5e>
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	dd08      	ble.n	800a7a2 <scalbn+0x9a>
 800a790:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a794:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a798:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a79c:	ec45 4b10 	vmov	d0, r4, r5
 800a7a0:	bd70      	pop	{r4, r5, r6, pc}
 800a7a2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800a7a6:	da08      	bge.n	800a7ba <scalbn+0xb2>
 800a7a8:	2d00      	cmp	r5, #0
 800a7aa:	a10b      	add	r1, pc, #44	@ (adr r1, 800a7d8 <scalbn+0xd0>)
 800a7ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b0:	dac1      	bge.n	800a736 <scalbn+0x2e>
 800a7b2:	a10f      	add	r1, pc, #60	@ (adr r1, 800a7f0 <scalbn+0xe8>)
 800a7b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7b8:	e7bd      	b.n	800a736 <scalbn+0x2e>
 800a7ba:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a7be:	3236      	adds	r2, #54	@ 0x36
 800a7c0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a7c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800a800 <scalbn+0xf8>)
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	e7d4      	b.n	800a77c <scalbn+0x74>
 800a7d2:	bf00      	nop
 800a7d4:	f3af 8000 	nop.w
 800a7d8:	c2f8f359 	.word	0xc2f8f359
 800a7dc:	01a56e1f 	.word	0x01a56e1f
 800a7e0:	8800759c 	.word	0x8800759c
 800a7e4:	7e37e43c 	.word	0x7e37e43c
 800a7e8:	8800759c 	.word	0x8800759c
 800a7ec:	fe37e43c 	.word	0xfe37e43c
 800a7f0:	c2f8f359 	.word	0xc2f8f359
 800a7f4:	81a56e1f 	.word	0x81a56e1f
 800a7f8:	43500000 	.word	0x43500000
 800a7fc:	ffff3cb0 	.word	0xffff3cb0
 800a800:	3c900000 	.word	0x3c900000

0800a804 <with_errno>:
 800a804:	b510      	push	{r4, lr}
 800a806:	ed2d 8b02 	vpush	{d8}
 800a80a:	eeb0 8a40 	vmov.f32	s16, s0
 800a80e:	eef0 8a60 	vmov.f32	s17, s1
 800a812:	4604      	mov	r4, r0
 800a814:	f000 f92a 	bl	800aa6c <__errno>
 800a818:	eeb0 0a48 	vmov.f32	s0, s16
 800a81c:	eef0 0a68 	vmov.f32	s1, s17
 800a820:	ecbd 8b02 	vpop	{d8}
 800a824:	6004      	str	r4, [r0, #0]
 800a826:	bd10      	pop	{r4, pc}

0800a828 <xflow>:
 800a828:	4603      	mov	r3, r0
 800a82a:	b507      	push	{r0, r1, r2, lr}
 800a82c:	ec51 0b10 	vmov	r0, r1, d0
 800a830:	b183      	cbz	r3, 800a854 <xflow+0x2c>
 800a832:	4602      	mov	r2, r0
 800a834:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a838:	e9cd 2300 	strd	r2, r3, [sp]
 800a83c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a840:	f7f5 fea6 	bl	8000590 <__aeabi_dmul>
 800a844:	ec41 0b10 	vmov	d0, r0, r1
 800a848:	2022      	movs	r0, #34	@ 0x22
 800a84a:	b003      	add	sp, #12
 800a84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a850:	f7ff bfd8 	b.w	800a804 <with_errno>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	e7ee      	b.n	800a838 <xflow+0x10>
 800a85a:	0000      	movs	r0, r0
 800a85c:	0000      	movs	r0, r0
	...

0800a860 <__math_uflow>:
 800a860:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a868 <__math_uflow+0x8>
 800a864:	f7ff bfe0 	b.w	800a828 <xflow>
 800a868:	00000000 	.word	0x00000000
 800a86c:	10000000 	.word	0x10000000

0800a870 <__math_oflow>:
 800a870:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a878 <__math_oflow+0x8>
 800a874:	f7ff bfd8 	b.w	800a828 <xflow>
 800a878:	00000000 	.word	0x00000000
 800a87c:	70000000 	.word	0x70000000

0800a880 <__ieee754_sqrt>:
 800a880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	4a68      	ldr	r2, [pc, #416]	@ (800aa28 <__ieee754_sqrt+0x1a8>)
 800a886:	ec55 4b10 	vmov	r4, r5, d0
 800a88a:	43aa      	bics	r2, r5
 800a88c:	462b      	mov	r3, r5
 800a88e:	4621      	mov	r1, r4
 800a890:	d110      	bne.n	800a8b4 <__ieee754_sqrt+0x34>
 800a892:	4622      	mov	r2, r4
 800a894:	4620      	mov	r0, r4
 800a896:	4629      	mov	r1, r5
 800a898:	f7f5 fe7a 	bl	8000590 <__aeabi_dmul>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	4629      	mov	r1, r5
 800a8a4:	f7f5 fcbe 	bl	8000224 <__adddf3>
 800a8a8:	4604      	mov	r4, r0
 800a8aa:	460d      	mov	r5, r1
 800a8ac:	ec45 4b10 	vmov	d0, r4, r5
 800a8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	2d00      	cmp	r5, #0
 800a8b6:	dc0e      	bgt.n	800a8d6 <__ieee754_sqrt+0x56>
 800a8b8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a8bc:	4322      	orrs	r2, r4
 800a8be:	d0f5      	beq.n	800a8ac <__ieee754_sqrt+0x2c>
 800a8c0:	b19d      	cbz	r5, 800a8ea <__ieee754_sqrt+0x6a>
 800a8c2:	4622      	mov	r2, r4
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	4629      	mov	r1, r5
 800a8c8:	f7f5 fcaa 	bl	8000220 <__aeabi_dsub>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	f7f5 ff88 	bl	80007e4 <__aeabi_ddiv>
 800a8d4:	e7e8      	b.n	800a8a8 <__ieee754_sqrt+0x28>
 800a8d6:	152a      	asrs	r2, r5, #20
 800a8d8:	d115      	bne.n	800a906 <__ieee754_sqrt+0x86>
 800a8da:	2000      	movs	r0, #0
 800a8dc:	e009      	b.n	800a8f2 <__ieee754_sqrt+0x72>
 800a8de:	0acb      	lsrs	r3, r1, #11
 800a8e0:	3a15      	subs	r2, #21
 800a8e2:	0549      	lsls	r1, r1, #21
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d0fa      	beq.n	800a8de <__ieee754_sqrt+0x5e>
 800a8e8:	e7f7      	b.n	800a8da <__ieee754_sqrt+0x5a>
 800a8ea:	462a      	mov	r2, r5
 800a8ec:	e7fa      	b.n	800a8e4 <__ieee754_sqrt+0x64>
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	3001      	adds	r0, #1
 800a8f2:	02dc      	lsls	r4, r3, #11
 800a8f4:	d5fb      	bpl.n	800a8ee <__ieee754_sqrt+0x6e>
 800a8f6:	1e44      	subs	r4, r0, #1
 800a8f8:	1b12      	subs	r2, r2, r4
 800a8fa:	f1c0 0420 	rsb	r4, r0, #32
 800a8fe:	fa21 f404 	lsr.w	r4, r1, r4
 800a902:	4323      	orrs	r3, r4
 800a904:	4081      	lsls	r1, r0
 800a906:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a90a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a90e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a912:	07d2      	lsls	r2, r2, #31
 800a914:	bf5c      	itt	pl
 800a916:	005b      	lslpl	r3, r3, #1
 800a918:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a91c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a920:	bf58      	it	pl
 800a922:	0049      	lslpl	r1, r1, #1
 800a924:	2600      	movs	r6, #0
 800a926:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a92a:	106d      	asrs	r5, r5, #1
 800a92c:	0049      	lsls	r1, r1, #1
 800a92e:	2016      	movs	r0, #22
 800a930:	4632      	mov	r2, r6
 800a932:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a936:	1917      	adds	r7, r2, r4
 800a938:	429f      	cmp	r7, r3
 800a93a:	bfde      	ittt	le
 800a93c:	193a      	addle	r2, r7, r4
 800a93e:	1bdb      	suble	r3, r3, r7
 800a940:	1936      	addle	r6, r6, r4
 800a942:	0fcf      	lsrs	r7, r1, #31
 800a944:	3801      	subs	r0, #1
 800a946:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a94a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a94e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a952:	d1f0      	bne.n	800a936 <__ieee754_sqrt+0xb6>
 800a954:	4604      	mov	r4, r0
 800a956:	2720      	movs	r7, #32
 800a958:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a95c:	429a      	cmp	r2, r3
 800a95e:	eb00 0e0c 	add.w	lr, r0, ip
 800a962:	db02      	blt.n	800a96a <__ieee754_sqrt+0xea>
 800a964:	d113      	bne.n	800a98e <__ieee754_sqrt+0x10e>
 800a966:	458e      	cmp	lr, r1
 800a968:	d811      	bhi.n	800a98e <__ieee754_sqrt+0x10e>
 800a96a:	f1be 0f00 	cmp.w	lr, #0
 800a96e:	eb0e 000c 	add.w	r0, lr, ip
 800a972:	da42      	bge.n	800a9fa <__ieee754_sqrt+0x17a>
 800a974:	2800      	cmp	r0, #0
 800a976:	db40      	blt.n	800a9fa <__ieee754_sqrt+0x17a>
 800a978:	f102 0801 	add.w	r8, r2, #1
 800a97c:	1a9b      	subs	r3, r3, r2
 800a97e:	458e      	cmp	lr, r1
 800a980:	bf88      	it	hi
 800a982:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a986:	eba1 010e 	sub.w	r1, r1, lr
 800a98a:	4464      	add	r4, ip
 800a98c:	4642      	mov	r2, r8
 800a98e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a992:	3f01      	subs	r7, #1
 800a994:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a998:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a99c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a9a0:	d1dc      	bne.n	800a95c <__ieee754_sqrt+0xdc>
 800a9a2:	4319      	orrs	r1, r3
 800a9a4:	d01b      	beq.n	800a9de <__ieee754_sqrt+0x15e>
 800a9a6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800aa2c <__ieee754_sqrt+0x1ac>
 800a9aa:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800aa30 <__ieee754_sqrt+0x1b0>
 800a9ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9b6:	f7f5 fc33 	bl	8000220 <__aeabi_dsub>
 800a9ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800a9be:	4602      	mov	r2, r0
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	4640      	mov	r0, r8
 800a9c4:	4649      	mov	r1, r9
 800a9c6:	f7f6 f85f 	bl	8000a88 <__aeabi_dcmple>
 800a9ca:	b140      	cbz	r0, 800a9de <__ieee754_sqrt+0x15e>
 800a9cc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a9d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800a9d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800a9d8:	d111      	bne.n	800a9fe <__ieee754_sqrt+0x17e>
 800a9da:	3601      	adds	r6, #1
 800a9dc:	463c      	mov	r4, r7
 800a9de:	1072      	asrs	r2, r6, #1
 800a9e0:	0863      	lsrs	r3, r4, #1
 800a9e2:	07f1      	lsls	r1, r6, #31
 800a9e4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a9e8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a9ec:	bf48      	it	mi
 800a9ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a9f2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	e756      	b.n	800a8a8 <__ieee754_sqrt+0x28>
 800a9fa:	4690      	mov	r8, r2
 800a9fc:	e7be      	b.n	800a97c <__ieee754_sqrt+0xfc>
 800a9fe:	f7f5 fc11 	bl	8000224 <__adddf3>
 800aa02:	e9da 8900 	ldrd	r8, r9, [sl]
 800aa06:	4602      	mov	r2, r0
 800aa08:	460b      	mov	r3, r1
 800aa0a:	4640      	mov	r0, r8
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	f7f6 f831 	bl	8000a74 <__aeabi_dcmplt>
 800aa12:	b120      	cbz	r0, 800aa1e <__ieee754_sqrt+0x19e>
 800aa14:	1ca0      	adds	r0, r4, #2
 800aa16:	bf08      	it	eq
 800aa18:	3601      	addeq	r6, #1
 800aa1a:	3402      	adds	r4, #2
 800aa1c:	e7df      	b.n	800a9de <__ieee754_sqrt+0x15e>
 800aa1e:	1c63      	adds	r3, r4, #1
 800aa20:	f023 0401 	bic.w	r4, r3, #1
 800aa24:	e7db      	b.n	800a9de <__ieee754_sqrt+0x15e>
 800aa26:	bf00      	nop
 800aa28:	7ff00000 	.word	0x7ff00000
 800aa2c:	200000c8 	.word	0x200000c8
 800aa30:	200000c0 	.word	0x200000c0

0800aa34 <free>:
 800aa34:	4b02      	ldr	r3, [pc, #8]	@ (800aa40 <free+0xc>)
 800aa36:	4601      	mov	r1, r0
 800aa38:	6818      	ldr	r0, [r3, #0]
 800aa3a:	f000 b843 	b.w	800aac4 <_free_r>
 800aa3e:	bf00      	nop
 800aa40:	200000d0 	.word	0x200000d0

0800aa44 <__malloc_lock>:
 800aa44:	4801      	ldr	r0, [pc, #4]	@ (800aa4c <__malloc_lock+0x8>)
 800aa46:	f000 b83b 	b.w	800aac0 <__retarget_lock_acquire_recursive>
 800aa4a:	bf00      	nop
 800aa4c:	20000770 	.word	0x20000770

0800aa50 <__malloc_unlock>:
 800aa50:	4801      	ldr	r0, [pc, #4]	@ (800aa58 <__malloc_unlock+0x8>)
 800aa52:	f000 b836 	b.w	800aac2 <__retarget_lock_release_recursive>
 800aa56:	bf00      	nop
 800aa58:	20000770 	.word	0x20000770

0800aa5c <memset>:
 800aa5c:	4402      	add	r2, r0
 800aa5e:	4603      	mov	r3, r0
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d100      	bne.n	800aa66 <memset+0xa>
 800aa64:	4770      	bx	lr
 800aa66:	f803 1b01 	strb.w	r1, [r3], #1
 800aa6a:	e7f9      	b.n	800aa60 <memset+0x4>

0800aa6c <__errno>:
 800aa6c:	4b01      	ldr	r3, [pc, #4]	@ (800aa74 <__errno+0x8>)
 800aa6e:	6818      	ldr	r0, [r3, #0]
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	200000d0 	.word	0x200000d0

0800aa78 <__libc_init_array>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4d0d      	ldr	r5, [pc, #52]	@ (800aab0 <__libc_init_array+0x38>)
 800aa7c:	4c0d      	ldr	r4, [pc, #52]	@ (800aab4 <__libc_init_array+0x3c>)
 800aa7e:	1b64      	subs	r4, r4, r5
 800aa80:	10a4      	asrs	r4, r4, #2
 800aa82:	2600      	movs	r6, #0
 800aa84:	42a6      	cmp	r6, r4
 800aa86:	d109      	bne.n	800aa9c <__libc_init_array+0x24>
 800aa88:	4d0b      	ldr	r5, [pc, #44]	@ (800aab8 <__libc_init_array+0x40>)
 800aa8a:	4c0c      	ldr	r4, [pc, #48]	@ (800aabc <__libc_init_array+0x44>)
 800aa8c:	f000 f864 	bl	800ab58 <_init>
 800aa90:	1b64      	subs	r4, r4, r5
 800aa92:	10a4      	asrs	r4, r4, #2
 800aa94:	2600      	movs	r6, #0
 800aa96:	42a6      	cmp	r6, r4
 800aa98:	d105      	bne.n	800aaa6 <__libc_init_array+0x2e>
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa0:	4798      	blx	r3
 800aaa2:	3601      	adds	r6, #1
 800aaa4:	e7ee      	b.n	800aa84 <__libc_init_array+0xc>
 800aaa6:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaaa:	4798      	blx	r3
 800aaac:	3601      	adds	r6, #1
 800aaae:	e7f2      	b.n	800aa96 <__libc_init_array+0x1e>
 800aab0:	0800ac30 	.word	0x0800ac30
 800aab4:	0800ac30 	.word	0x0800ac30
 800aab8:	0800ac30 	.word	0x0800ac30
 800aabc:	0800ac3c 	.word	0x0800ac3c

0800aac0 <__retarget_lock_acquire_recursive>:
 800aac0:	4770      	bx	lr

0800aac2 <__retarget_lock_release_recursive>:
 800aac2:	4770      	bx	lr

0800aac4 <_free_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4605      	mov	r5, r0
 800aac8:	2900      	cmp	r1, #0
 800aaca:	d041      	beq.n	800ab50 <_free_r+0x8c>
 800aacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad0:	1f0c      	subs	r4, r1, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfb8      	it	lt
 800aad6:	18e4      	addlt	r4, r4, r3
 800aad8:	f7ff ffb4 	bl	800aa44 <__malloc_lock>
 800aadc:	4a1d      	ldr	r2, [pc, #116]	@ (800ab54 <_free_r+0x90>)
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	b933      	cbnz	r3, 800aaf0 <_free_r+0x2c>
 800aae2:	6063      	str	r3, [r4, #4]
 800aae4:	6014      	str	r4, [r2, #0]
 800aae6:	4628      	mov	r0, r5
 800aae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aaec:	f7ff bfb0 	b.w	800aa50 <__malloc_unlock>
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d908      	bls.n	800ab06 <_free_r+0x42>
 800aaf4:	6820      	ldr	r0, [r4, #0]
 800aaf6:	1821      	adds	r1, r4, r0
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	bf01      	itttt	eq
 800aafc:	6819      	ldreq	r1, [r3, #0]
 800aafe:	685b      	ldreq	r3, [r3, #4]
 800ab00:	1809      	addeq	r1, r1, r0
 800ab02:	6021      	streq	r1, [r4, #0]
 800ab04:	e7ed      	b.n	800aae2 <_free_r+0x1e>
 800ab06:	461a      	mov	r2, r3
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	b10b      	cbz	r3, 800ab10 <_free_r+0x4c>
 800ab0c:	42a3      	cmp	r3, r4
 800ab0e:	d9fa      	bls.n	800ab06 <_free_r+0x42>
 800ab10:	6811      	ldr	r1, [r2, #0]
 800ab12:	1850      	adds	r0, r2, r1
 800ab14:	42a0      	cmp	r0, r4
 800ab16:	d10b      	bne.n	800ab30 <_free_r+0x6c>
 800ab18:	6820      	ldr	r0, [r4, #0]
 800ab1a:	4401      	add	r1, r0
 800ab1c:	1850      	adds	r0, r2, r1
 800ab1e:	4283      	cmp	r3, r0
 800ab20:	6011      	str	r1, [r2, #0]
 800ab22:	d1e0      	bne.n	800aae6 <_free_r+0x22>
 800ab24:	6818      	ldr	r0, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	6053      	str	r3, [r2, #4]
 800ab2a:	4408      	add	r0, r1
 800ab2c:	6010      	str	r0, [r2, #0]
 800ab2e:	e7da      	b.n	800aae6 <_free_r+0x22>
 800ab30:	d902      	bls.n	800ab38 <_free_r+0x74>
 800ab32:	230c      	movs	r3, #12
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	e7d6      	b.n	800aae6 <_free_r+0x22>
 800ab38:	6820      	ldr	r0, [r4, #0]
 800ab3a:	1821      	adds	r1, r4, r0
 800ab3c:	428b      	cmp	r3, r1
 800ab3e:	bf04      	itt	eq
 800ab40:	6819      	ldreq	r1, [r3, #0]
 800ab42:	685b      	ldreq	r3, [r3, #4]
 800ab44:	6063      	str	r3, [r4, #4]
 800ab46:	bf04      	itt	eq
 800ab48:	1809      	addeq	r1, r1, r0
 800ab4a:	6021      	streq	r1, [r4, #0]
 800ab4c:	6054      	str	r4, [r2, #4]
 800ab4e:	e7ca      	b.n	800aae6 <_free_r+0x22>
 800ab50:	bd38      	pop	{r3, r4, r5, pc}
 800ab52:	bf00      	nop
 800ab54:	20000634 	.word	0x20000634

0800ab58 <_init>:
 800ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5a:	bf00      	nop
 800ab5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5e:	bc08      	pop	{r3}
 800ab60:	469e      	mov	lr, r3
 800ab62:	4770      	bx	lr

0800ab64 <_fini>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr
