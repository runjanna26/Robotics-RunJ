
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1d0  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  0800d3a8  0800d3a8  0000e3a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d0  0800d4d0  0000f160  2**0
                  CONTENTS
  4 .ARM          00000000  0800d4d0  0800d4d0  0000f160  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d4d0  0800d4d0  0000f160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800d4d0  0800d4d0  0000e4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800d4dc  0800d4dc  0000e4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800d4e4  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000081c  20000160  0800d644  0000f160  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000097c  0800d644  0000f97c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY
 12 .debug_info   000331a2  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006336  00000000  00000000  00042332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de0  00000000  00000000  00048668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016d6  00000000  00000000  0004a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e33  00000000  00000000  0004bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f33  00000000  00000000  00075951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1528  00000000  00000000  0009e884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018fdac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a04  00000000  00000000  0018fdf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001987f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000160 	.word	0x20000160
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800d390 	.word	0x0800d390

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000164 	.word	0x20000164
 8000214:	0800d390 	.word	0x0800d390

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000b9e:	eef0 7ae7 	vabs.f32	s15, s15
 8000ba2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000bb0:	b590      	push	{r4, r7, lr}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	4a2e      	ldr	r2, [pc, #184]	@ (8000c74 <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f04f 0200 	mov.w	r2, #0
 8000bc4:	61da      	str	r2, [r3, #28]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	621a      	str	r2, [r3, #32]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f04f 0200 	mov.w	r2, #0
 8000bd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f04f 0200 	mov.w	r2, #0
 8000be0:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	f04f 0200 	mov.w	r2, #0
 8000be8:	631a      	str	r2, [r3, #48]	@ 0x30
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	@ 0x38
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	f04f 0200 	mov.w	r2, #0
 8000c04:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a1b      	ldr	r2, [pc, #108]	@ (8000c78 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8000c0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c7c <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 8000c10:	649a      	str	r2, [r3, #72]	@ 0x48
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	334c      	adds	r3, #76	@ 0x4c
 8000c16:	2201      	movs	r2, #1
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fdf2 	bl	8001804 <_ZN3EKFC1Eii>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a17      	ldr	r2, [pc, #92]	@ (8000c80 <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8000c24:	3360      	adds	r3, #96	@ 0x60
 8000c26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c2a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	4a14      	ldr	r2, [pc, #80]	@ (8000c84 <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 8000c32:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8000c36:	4613      	mov	r3, r2
 8000c38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4a11      	ldr	r2, [pc, #68]	@ (8000c88 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 8000c42:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a10      	ldr	r2, [pc, #64]	@ (8000c8c <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8000c4a:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8000c4e:	4613      	mov	r3, r2
 8000c50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000c5c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f04f 0200 	mov.w	r2, #0
 8000c66:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	// TODO Auto-generated constructor stub

}
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	0800d42c 	.word	0x0800d42c
 8000c78:	c640e400 	.word	0xc640e400
 8000c7c:	ffffcfc7 	.word	0xffffcfc7
 8000c80:	0800d3a8 	.word	0x0800d3a8
 8000c84:	0800d3b0 	.word	0x0800d3b0
 8000c88:	3089705f 	.word	0x3089705f
 8000c8c:	0800d3c0 	.word	0x0800d3c0

08000c90 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <_ZN17AS5048A_interfaceD1Ev+0x24>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	334c      	adds	r3, #76	@ 0x4c
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fdc6 	bl	8001834 <_ZN3EKFD1Ev>
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	4618      	mov	r0, r3
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	0800d42c 	.word	0x0800d42c

08000cb8 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
}
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe5 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 8000cc6:	21ac      	movs	r1, #172	@ 0xac
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f00b f931 	bl	800bf30 <_ZdlPvj>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000cd8:	b5b0      	push	{r4, r5, r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000ce2:	f107 040c 	add.w	r4, r7, #12
 8000ce6:	461d      	mov	r5, r3
 8000ce8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000cea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cec:	682b      	ldr	r3, [r5, #0]
 8000cee:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	e001      	b.n	8000cfe <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000cfa:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	4619      	mov	r1, r3
 8000d06:	2002      	movs	r0, #2
 8000d08:	f000 fa85 	bl	8001216 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000d0c:	ec53 2b10 	vmov	r2, r3, d0
 8000d10:	4610      	mov	r0, r2
 8000d12:	4619      	mov	r1, r3
 8000d14:	f7ff feec 	bl	8000af0 <__aeabi_d2f>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000d24:	69fa      	ldr	r2, [r7, #28]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2110      	movs	r1, #16
 8000d3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d3e:	f008 f8a3 	bl	8008e88 <HAL_GPIO_WritePin>
}
 8000d42:	bf00      	nop
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000000 	.word	0x20000000

08000d50 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8cb 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f000 f8c8 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d64:	eef0 7a40 	vmov.f32	s15, s0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000d6e:	f000 f935 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d72:	4603      	mov	r3, r0
 8000d74:	461a      	mov	r2, r3
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000d7a:	2001      	movs	r0, #1
 8000d7c:	f004 fd64 	bl	8005848 <HAL_Delay>
	getSensorAngle();
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b7 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 f8b4 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 8000d8c:	eef0 7a40 	vmov.f32	s15, s0
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000d96:	f000 f921 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	3360      	adds	r3, #96	@ 0x60
 8000db2:	461a      	mov	r2, r3
 8000db4:	f000 fd5e 	bl	8001874 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	73bb      	strb	r3, [r7, #14]
 8000dd4:	e00d      	b.n	8000df2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d002      	beq.n	8000de6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000de0:	7bfb      	ldrb	r3, [r7, #15]
 8000de2:	3301      	adds	r3, #1
 8000de4:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000de6:	887b      	ldrh	r3, [r7, #2]
 8000de8:	085b      	lsrs	r3, r3, #1
 8000dea:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000dec:	7bbb      	ldrb	r3, [r7, #14]
 8000dee:	3301      	adds	r3, #1
 8000df0:	73bb      	strb	r3, [r7, #14]
 8000df2:	7bbb      	ldrb	r3, [r7, #14]
 8000df4:	2b0f      	cmp	r3, #15
 8000df6:	d9ee      	bls.n	8000dd6 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000e18:	887b      	ldrh	r3, [r7, #2]
 8000e1a:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dd0b      	ble.n	8000e3c <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	691b      	ldr	r3, [r3, #16]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	b21a      	sxth	r2, r3
 8000e30:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dd11      	ble.n	8000e68 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000e44:	897b      	ldrh	r3, [r7, #10]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ffb9 	bl	8000dc0 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	461a      	mov	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	b21a      	sxth	r2, r3
 8000e5c:	897b      	ldrh	r3, [r7, #10]
 8000e5e:	b21b      	sxth	r3, r3
 8000e60:	4313      	orrs	r3, r2
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e70:	f008 f80a 	bl	8008e88 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000e74:	f107 020c 	add.w	r2, r7, #12
 8000e78:	f107 010a 	add.w	r1, r7, #10
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	2301      	movs	r3, #1
 8000e82:	4813      	ldr	r0, [pc, #76]	@ (8000ed0 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000e84:	f009 f8a9 	bl	8009fda <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000e88:	2201      	movs	r2, #1
 8000e8a:	2110      	movs	r1, #16
 8000e8c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e90:	f007 fffa 	bl	8008e88 <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000e94:	89bb      	ldrh	r3, [r7, #12]
 8000e96:	4619      	mov	r1, r3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	1c5a      	adds	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	fa41 f303 	asr.w	r3, r1, r3
 8000ea8:	b29b      	uxth	r3, r3
 8000eaa:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f1c3 0310 	rsb	r3, r3, #16
 8000eb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb8:	fa42 f303 	asr.w	r3, r2, r3
 8000ebc:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000ebe:	89ba      	ldrh	r2, [r7, #12]
 8000ec0:	89fb      	ldrh	r3, [r7, #14]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b29b      	uxth	r3, r3
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000708 	.word	0x20000708

08000ed4 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff ff91 	bl	8000e0c <_ZN17AS5048A_interface4readEt>
 8000eea:	4603      	mov	r3, r0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	f7ff ffe9 	bl	8000ed4 <_ZN17AS5048A_interface11getRawCountEv>
 8000f02:	ee07 0a90 	vmov	s15, r0
 8000f06:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f14:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000f28 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000f18:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40c90fdb 	.word	0x40c90fdb

08000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f38:	ee07 3a90 	vmov	s15, r3
 8000f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f40:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f60 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000f44:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8000f4e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f52:	eeb0 0a67 	vmov.f32	s0, s15
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40c90fdb 	.word	0x40c90fdb

08000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	69db      	ldr	r3, [r3, #28]
 8000f70:	ee07 3a90 	vmov	s15, r3
}
 8000f74:	eeb0 0a67 	vmov.f32	s0, s15
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	ed2d 8b02 	vpush	{d8}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f94:	4a10      	ldr	r2, [pc, #64]	@ (8000fd8 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 8000f96:	6812      	ldr	r2, [r2, #0]
 8000f98:	fb02 f303 	mul.w	r3, r2, r3
 8000f9c:	ee07 3a90 	vmov	s15, r3
 8000fa0:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffdd 	bl	8000f64 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8000faa:	eef0 7a40 	vmov.f32	s15, s0
 8000fae:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8000fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fbc:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc0:	f001 fd76 	bl	8002ab0 <_Z15_normalizeAnglef>
 8000fc4:	eef0 7a40 	vmov.f32	s15, s0
}
 8000fc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	ecbd 8b02 	vpop	{d8}
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000a8 	.word	0x200000a8

08000fdc <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000fe0:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <_ZN17AS5048A_interface6microsEv+0x24>)
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4b07      	ldr	r3, [pc, #28]	@ (8001004 <_ZN17AS5048A_interface6microsEv+0x28>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4907      	ldr	r1, [pc, #28]	@ (8001008 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8000fea:	fba1 1303 	umull	r1, r3, r1, r3
 8000fee:	0c9b      	lsrs	r3, r3, #18
 8000ff0:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e0001000 	.word	0xe0001000
 8001004:	200000f4 	.word	0x200000f4
 8001008:	431bde83 	.word	0x431bde83

0800100c <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff6d 	bl	8000ef4 <_ZN17AS5048A_interface14getSensorAngleEv>
 800101a:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800101e:	f7ff ffdd 	bl	8000fdc <_ZN17AS5048A_interface6microsEv>
 8001022:	4603      	mov	r3, r0
 8001024:	461a      	mov	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001030:	ed97 7a03 	vldr	s14, [r7, #12]
 8001034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 800103c:	ed97 0a02 	vldr	s0, [r7, #8]
 8001040:	f7ff fda6 	bl	8000b90 <_ZSt3absf>
 8001044:	eef0 7a40 	vmov.f32	s15, s0
 8001048:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001090 <_ZN17AS5048A_interface12updateSensorEv+0x84>
 800104c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001054:	bfcc      	ite	gt
 8001056:	2301      	movgt	r3, #1
 8001058:	2300      	movle	r3, #0
 800105a:	b2db      	uxtb	r3, r3
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00f      	beq.n	8001080 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001064:	edd7 7a02 	vldr	s15, [r7, #8]
 8001068:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	dd02      	ble.n	8001078 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	e000      	b.n	800107a <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001078:	2201      	movs	r2, #1
 800107a:	441a      	add	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40a0d97c 	.word	0x40a0d97c

08001094 <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 8001094:	b5b0      	push	{r4, r5, r7, lr}
 8001096:	b08a      	sub	sp, #40	@ 0x28
 8001098:	af02      	add	r7, sp, #8
 800109a:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 800109c:	4b3f      	ldr	r3, [pc, #252]	@ (800119c <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 800109e:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff ff43 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80010a6:	eef0 7a40 	vmov.f32	s15, s0
 80010aa:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   // Angle update
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010b2:	ed93 7a00 	vldr	s14, [r3]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010ba:	3304      	adds	r3, #4
 80010bc:	edd3 6a00 	vldr	s13, [r3]
 80010c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80010c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010cc:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    // Velocity remains the same
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3380      	adds	r3, #128	@ 0x80
 80010ee:	f107 0210 	add.w	r2, r7, #16
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	4623      	mov	r3, r4
 80010f6:	f000 fc24 	bl	8001942 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	33a4      	adds	r3, #164	@ 0xa4
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	3290      	adds	r2, #144	@ 0x90
 8001116:	f107 0508 	add.w	r5, r7, #8
 800111a:	f107 0418 	add.w	r4, r7, #24
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	462b      	mov	r3, r5
 8001124:	4622      	mov	r2, r4
 8001126:	f000 fd18 	bl	8001b5a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112e:	3304      	adds	r3, #4
 8001130:	edd3 7a00 	vldr	s15, [r3]
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	4819      	ldr	r0, [pc, #100]	@ (80011a0 <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 800113a:	f001 fd3f 	bl	8002bbc <_ZN13LowPassFilterclEf>
 800113e:	eef0 7a40 	vmov.f32	s15, s0
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	ee07 3a90 	vmov	s15, r3
 8001156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800115a:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80011a4 <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 800115e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	edd3 6a07 	vldr	s13, [r3, #28]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800116e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001172:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001176:	ed97 7a07 	vldr	s14, [r7, #28]
 800117a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69da      	ldr	r2, [r3, #28]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 8001194:	bf00      	nop
 8001196:	3720      	adds	r7, #32
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	3a83126f 	.word	0x3a83126f
 80011a0:	20000230 	.word	0x20000230
 80011a4:	40c90fdb 	.word	0x40c90fdb

080011a8 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	ed2d 8b02 	vpush	{d8}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011b8:	ee07 3a90 	vmov	s15, r3
 80011bc:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff feb3 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80011c6:	eef0 7a40 	vmov.f32	s15, s0
 80011ca:	eeb0 0a67 	vmov.f32	s0, s15
 80011ce:	4809      	ldr	r0, [pc, #36]	@ (80011f4 <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 80011d0:	f001 fcf4 	bl	8002bbc <_ZN13LowPassFilterclEf>
 80011d4:	eef0 7a40 	vmov.f32	s15, s0
 80011d8:	ee28 7a27 	vmul.f32	s14, s16, s15
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80011e2:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80011e6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ea:	3708      	adds	r7, #8
 80011ec:	46bd      	mov	sp, r7
 80011ee:	ecbd 8b02 	vpop	{d8}
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000224 	.word	0x20000224

080011f8 <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
	return vel_prev_EKF;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001204:	ee07 3a90 	vmov	s15, r3
}
 8001208:	eeb0 0a67 	vmov.f32	s0, s15
 800120c:	370c      	adds	r7, #12
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001216:	b5b0      	push	{r4, r5, r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
 800121e:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff f94b 	bl	80004bc <__aeabi_i2d>
 8001226:	4604      	mov	r4, r0
 8001228:	460d      	mov	r5, r1
 800122a:	6838      	ldr	r0, [r7, #0]
 800122c:	f7ff f946 	bl	80004bc <__aeabi_i2d>
 8001230:	4602      	mov	r2, r0
 8001232:	460b      	mov	r3, r1
 8001234:	ec43 2b11 	vmov	d1, r2, r3
 8001238:	ec45 4b10 	vmov	d0, r4, r5
 800123c:	f00a fe9a 	bl	800bf74 <pow>
 8001240:	eeb0 7a40 	vmov.f32	s14, s0
 8001244:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001248:	eeb0 0a47 	vmov.f32	s0, s14
 800124c:	eef0 0a67 	vmov.f32	s1, s15
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001258 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001258:	b5b0      	push	{r4, r5, r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	4a4d      	ldr	r2, [pc, #308]	@ (8001398 <_ZN12CurrentSenseC1Ev+0x140>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	601a      	str	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	334c      	adds	r3, #76	@ 0x4c
 800126a:	2201      	movs	r2, #1
 800126c:	2102      	movs	r1, #2
 800126e:	4618      	mov	r0, r3
 8001270:	f000 fac8 	bl	8001804 <_ZN3EKFC1Eii>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a49      	ldr	r2, [pc, #292]	@ (800139c <_ZN12CurrentSenseC1Ev+0x144>)
 8001278:	3360      	adds	r3, #96	@ 0x60
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a47      	ldr	r2, [pc, #284]	@ (80013a0 <_ZN12CurrentSenseC1Ev+0x148>)
 8001284:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 8001288:	4615      	mov	r5, r2
 800128a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800128c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800128e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001292:	682b      	ldr	r3, [r5, #0]
 8001294:	6023      	str	r3, [r4, #0]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	4a41      	ldr	r2, [pc, #260]	@ (80013a0 <_ZN12CurrentSenseC1Ev+0x148>)
 800129a:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 800129e:	4615      	mov	r5, r2
 80012a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	682b      	ldr	r3, [r5, #0]
 80012aa:	6023      	str	r3, [r4, #0]
 80012ac:	4b3d      	ldr	r3, [pc, #244]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012ae:	ed93 7a00 	vldr	s14, [r3]
 80012b2:	4b3d      	ldr	r3, [pc, #244]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 80012b4:	edd3 7a00 	vldr	s15, [r3]
 80012b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012bc:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 80012c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 80012c6:	ed93 7a00 	vldr	s14, [r3]
 80012ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80012d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f04f 0200 	mov.w	r2, #0
 80012ec:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 80012fa:	4b2a      	ldr	r3, [pc, #168]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 80012fc:	ed93 7a00 	vldr	s14, [r3]
 8001300:	4b29      	ldr	r3, [pc, #164]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 8001302:	edd3 7a00 	vldr	s15, [r3]
 8001306:	ee77 7a27 	vadd.f32	s15, s14, s15
 800130a:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 800130e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 8001314:	ed93 7a00 	vldr	s14, [r3]
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001320:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f04f 0200 	mov.w	r2, #0
 8001344:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <_ZN12CurrentSenseC1Ev+0x14c>)
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <_ZN12CurrentSenseC1Ev+0x150>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001358:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80013ac <_ZN12CurrentSenseC1Ev+0x154>
 800135c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001360:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <_ZN12CurrentSenseC1Ev+0x158>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800136a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800136e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a0e      	ldr	r2, [pc, #56]	@ (80013b4 <_ZN12CurrentSenseC1Ev+0x15c>)
 800137c:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8001380:	4615      	mov	r5, r2
 8001382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001386:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001388:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	6023      	str	r3, [r4, #0]
{
	
}
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	0800d43c 	.word	0x0800d43c
 800139c:	0800d3d0 	.word	0x0800d3d0
 80013a0:	0800d3dc 	.word	0x0800d3dc
 80013a4:	20000098 	.word	0x20000098
 80013a8:	200000a0 	.word	0x200000a0
 80013ac:	3a83126f 	.word	0x3a83126f
 80013b0:	200000a4 	.word	0x200000a4
 80013b4:	0800d400 	.word	0x0800d400

080013b8 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4a06      	ldr	r2, [pc, #24]	@ (80013dc <_ZN12CurrentSenseD1Ev+0x24>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	334c      	adds	r3, #76	@ 0x4c
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fa32 	bl	8001834 <_ZN3EKFD1Ev>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	0800d43c 	.word	0x0800d43c

080013e0 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
}
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ffe5 	bl	80013b8 <_ZN12CurrentSenseD1Ev>
 80013ee:	f44f 7198 	mov.w	r1, #304	@ 0x130
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f00a fd9c 	bl	800bf30 <_ZdlPvj>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001410:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	3304      	adds	r3, #4
 8001418:	2201      	movs	r2, #1
 800141a:	4619      	mov	r1, r3
 800141c:	480c      	ldr	r0, [pc, #48]	@ (8001450 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 800141e:	f004 fe23 	bl	8006068 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3308      	adds	r3, #8
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	480a      	ldr	r0, [pc, #40]	@ (8001454 <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 800142c:	f004 fe1c 	bl	8006068 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	635a      	str	r2, [r3, #52]	@ 0x34
	gain_a = _gain;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	629a      	str	r2, [r3, #40]	@ 0x28
	gain_b = _gain;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_c = _gain;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	687a      	ldr	r2, [r7, #4]
 8001446:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000488 	.word	0x20000488
 8001454:	200004f4 	.word	0x200004f4

08001458 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 8001460:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001464:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ib = 0;
 8001474:	6879      	ldr	r1, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	offset_ic = 0;
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	e9c1 2308 	strd	r2, r3, [r1, #32]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	e02b      	b.n	80014ee <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7fe fffb 	bl	800049c <__aeabi_ui2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	4620      	mov	r0, r4
 80014ac:	4629      	mov	r1, r5
 80014ae:	f7fe feb9 	bl	8000224 <__adddf3>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	6879      	ldr	r1, [r7, #4]
 80014b8:	e9c1 2304 	strd	r2, r3, [r1, #16]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7fe ffe8 	bl	800049c <__aeabi_ui2d>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	4620      	mov	r0, r4
 80014d2:	4629      	mov	r1, r5
 80014d4:	f7fe fea6 	bl	8000224 <__adddf3>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	6879      	ldr	r1, [r7, #4]
 80014de:	e9c1 2308 	strd	r2, r3, [r1, #32]
		HAL_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f004 f9b0 	bl	8005848 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3301      	adds	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014f4:	dbcf      	blt.n	8001496 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	4b0c      	ldr	r3, [pc, #48]	@ (8001534 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 8001502:	f7ff f96f 	bl	80007e4 <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	e9c1 2304 	strd	r2, r3, [r1, #16]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 800151c:	f7ff f962 	bl	80007e4 <__aeabi_ddiv>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	6879      	ldr	r1, [r7, #4]
 8001526:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 800152a:	bf00      	nop
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bdb0      	pop	{r4, r5, r7, pc}
 8001532:	bf00      	nop
 8001534:	408f4000 	.word	0x408f4000

08001538 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001538:	b5b0      	push	{r4, r5, r7, lr}
 800153a:	b08a      	sub	sp, #40	@ 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4618      	mov	r0, r3
 800154c:	f7fe ffa6 	bl	800049c <__aeabi_ui2d>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4620      	mov	r0, r4
 8001556:	4629      	mov	r1, r5
 8001558:	f7fe fe62 	bl	8000220 <__aeabi_dsub>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	a33a      	add	r3, pc, #232	@ (adr r3, 8001650 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156a:	f7ff f811 	bl	8000590 <__aeabi_dmul>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4614      	mov	r4, r2
 8001574:	461d      	mov	r5, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001582:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001586:	ee17 0a90 	vmov	r0, s15
 800158a:	f7fe ffa9 	bl	80004e0 <__aeabi_f2d>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff f925 	bl	80007e4 <__aeabi_ddiv>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff faa5 	bl	8000af0 <__aeabi_d2f>
 80015a6:	4602      	mov	r2, r0
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	639a      	str	r2, [r3, #56]	@ 0x38
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff70 	bl	800049c <__aeabi_ui2d>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4620      	mov	r0, r4
 80015c2:	4629      	mov	r1, r5
 80015c4:	f7fe fe2c 	bl	8000220 <__aeabi_dsub>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	a31f      	add	r3, pc, #124	@ (adr r3, 8001650 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 80015d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d6:	f7fe ffdb 	bl	8000590 <__aeabi_dmul>
 80015da:	4602      	mov	r2, r0
 80015dc:	460b      	mov	r3, r1
 80015de:	4614      	mov	r4, r2
 80015e0:	461d      	mov	r5, r3
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	ee17 0a90 	vmov	r0, s15
 80015f6:	f7fe ff73 	bl	80004e0 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4620      	mov	r0, r4
 8001600:	4629      	mov	r1, r5
 8001602:	f7ff f8ef 	bl	80007e4 <__aeabi_ddiv>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4610      	mov	r0, r2
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fa6f 	bl	8000af0 <__aeabi_d2f>
 8001612:	4602      	mov	r2, r0
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
//    current.b = - current.a  - current.c; // --(1)
	return current;
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	f107 031c 	add.w	r3, r7, #28
 800161e:	3238      	adds	r2, #56	@ 0x38
 8001620:	ca07      	ldmia	r2, {r0, r1, r2}
 8001622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001626:	69f9      	ldr	r1, [r7, #28]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	ee06 1a90 	vmov	s13, r1
 8001630:	ee07 2a10 	vmov	s14, r2
 8001634:	ee07 3a90 	vmov	s15, r3
}
 8001638:	eeb0 0a66 	vmov.f32	s0, s13
 800163c:	eef0 0a47 	vmov.f32	s1, s14
 8001640:	eeb0 1a67 	vmov.f32	s2, s15
 8001644:	3728      	adds	r7, #40	@ 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	66666666 	.word	0x66666666
 8001654:	3f4a6666 	.word	0x3f4a6666

08001658 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b08b      	sub	sp, #44	@ 0x2c
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 8001664:	68fc      	ldr	r4, [r7, #12]
 8001666:	68f8      	ldr	r0, [r7, #12]
 8001668:	f7ff ff66 	bl	8001538 <_ZN12CurrentSense16getPhaseCurrentsEv>
 800166c:	eef0 6a40 	vmov.f32	s13, s0
 8001670:	eeb0 7a60 	vmov.f32	s14, s1
 8001674:	eef0 7a41 	vmov.f32	s15, s2
 8001678:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
 800167c:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
 8001680:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001688:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001690:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001734 <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 8001694:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800169e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001738 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 80016a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80016a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016aa:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 80016ae:	ed97 0a02 	vldr	s0, [r7, #8]
 80016b2:	f001 f91d 	bl	80028f0 <_Z4_cosf>
 80016b6:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 80016ba:	ed97 0a02 	vldr	s0, [r7, #8]
 80016be:	f001 f89f 	bl	8002800 <_Z4_sinf>
 80016c2:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 80016c6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80016ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80016ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016d2:	edd7 6a08 	vldr	s13, [r7, #32]
 80016d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80016da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	dq_current.q = i_beta  * ct - i_alpha * st;
 80016e8:	ed97 7a08 	vldr	s14, [r7, #32]
 80016ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016f4:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 80016f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80016fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	return dq_current;
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	3244      	adds	r2, #68	@ 0x44
 8001712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001716:	e883 0003 	stmia.w	r3, {r0, r1}
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	ee07 2a10 	vmov	s14, r2
 8001722:	ee07 3a90 	vmov	s15, r3
}
 8001726:	eeb0 0a47 	vmov.f32	s0, s14
 800172a:	eef0 0a67 	vmov.f32	s1, s15
 800172e:	372c      	adds	r7, #44	@ 0x2c
 8001730:	46bd      	mov	sp, r7
 8001732:	bd90      	pop	{r4, r7, pc}
 8001734:	bf13cd3a 	.word	0xbf13cd3a
 8001738:	bf93cd3a 	.word	0xbf93cd3a

0800173c <_ZN6can_fdC1Ei>:
 *      Author: WINDOWS 11
 */

#include <can_fd.h>

can_fd::can_fd(int can_id)
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
{
	motor_id = can_id;
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
}
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_ZN6can_fd6ConfigEv>:

void can_fd::Config()
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	// Configure the filter to accept all messages (optional, adjust as needed)
	FDCAN_FilterTypeDef filterConfig;
    filterConfig.IdType = FDCAN_STANDARD_ID;       // Standard Identifier (11 bits)
 8001764:	2300      	movs	r3, #0
 8001766:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterIndex = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterType = FDCAN_FILTER_MASK;
 800176c:	2302      	movs	r3, #2
 800176e:	613b      	str	r3, [r7, #16]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001770:	2301      	movs	r3, #1
 8001772:	617b      	str	r3, [r7, #20]
    filterConfig.FilterID1 = 0x1;               // Accept all IDs
 8001774:	2301      	movs	r3, #1
 8001776:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID2 = 0x7ff;               // Mask for all bits
 8001778:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800177c:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filterConfig) != HAL_OK)
 800177e:	f107 0308 	add.w	r3, r7, #8
 8001782:	4619      	mov	r1, r3
 8001784:	4816      	ldr	r0, [pc, #88]	@ (80017e0 <_ZN6can_fd6ConfigEv+0x84>)
 8001786:	f006 fc31 	bl	8007fec <HAL_FDCAN_ConfigFilter>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	bf14      	ite	ne
 8001790:	2301      	movne	r3, #1
 8001792:	2300      	moveq	r3, #0
 8001794:	b2db      	uxtb	r3, r3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <_ZN6can_fd6ConfigEv+0x42>
    {
        Error_Handler();
 800179a:	f003 fbef 	bl	8004f7c <Error_Handler>
    }
    // Start the FDCAN module
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800179e:	4810      	ldr	r0, [pc, #64]	@ (80017e0 <_ZN6can_fd6ConfigEv+0x84>)
 80017a0:	f006 fc7e 	bl	80080a0 <HAL_FDCAN_Start>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <_ZN6can_fd6ConfigEv+0x5c>
    {
        Error_Handler();
 80017b4:	f003 fbe2 	bl	8004f7c <Error_Handler>
    }
    // Activate the notification for RX FIFO 0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80017b8:	2200      	movs	r2, #0
 80017ba:	2101      	movs	r1, #1
 80017bc:	4808      	ldr	r0, [pc, #32]	@ (80017e0 <_ZN6can_fd6ConfigEv+0x84>)
 80017be:	f006 fde3 	bl	8008388 <HAL_FDCAN_ActivateNotification>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	bf14      	ite	ne
 80017c8:	2301      	movne	r3, #1
 80017ca:	2300      	moveq	r3, #0
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <_ZN6can_fd6ConfigEv+0x7a>
    {
        Error_Handler();
 80017d2:	f003 fbd3 	bl	8004f7c <Error_Handler>
    }
}
 80017d6:	bf00      	nop
 80017d8:	3720      	adds	r7, #32
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	2000066c 	.word	0x2000066c

080017e4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ee:	ed97 0a01 	vldr	s0, [r7, #4]
 80017f2:	f00a fc4f 	bl	800c094 <sqrtf>
 80017f6:	eef0 7a40 	vmov.f32	s15, s0
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m){}
 8001804:	b480      	push	{r7}
 8001806:	b085      	sub	sp, #20
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	4a07      	ldr	r2, [pc, #28]	@ (8001830 <_ZN3EKFC1Eii+0x2c>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	605a      	str	r2, [r3, #4]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4618      	mov	r0, r3
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	0800d44c 	.word	0x0800d44c

08001834 <_ZN3EKFD1Ev>:

EKF::~EKF(){}
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	4a04      	ldr	r2, [pc, #16]	@ (8001850 <_ZN3EKFD1Ev+0x1c>)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	0800d44c 	.word	0x0800d44c

08001854 <_ZN3EKFD0Ev>:
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe9 	bl	8001834 <_ZN3EKFD1Ev>
 8001862:	210c      	movs	r1, #12
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f00a fb63 	bl	800bf30 <_ZdlPvj>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) 
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001888:	4293      	cmp	r3, r2
 800188a:	d201      	bcs.n	8001890 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	e001      	b.n	8001894 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 8001890:	f04f 33ff 	mov.w	r3, #4294967295
 8001894:	4618      	mov	r0, r3
 8001896:	f00a fb4f 	bl	800bf38 <_Znaj>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	68fa      	ldr	r2, [r7, #12]
 80018a8:	6852      	ldr	r2, [r2, #4]
 80018aa:	fb02 f303 	mul.w	r3, r2, r3
 80018ae:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d201      	bcs.n	80018ba <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	e001      	b.n	80018be <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	4618      	mov	r0, r3
 80018c0:	f00a fb3a 	bl	800bf38 <_Znaj>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) 
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e02d      	b.n	800192e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
    {
        for (int j = 0; j < EKF_N; ++j) 
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	e01a      	b.n	800190e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
        {
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d105      	bne.n	80018ec <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	e001      	b.n	80018f0 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	6851      	ldr	r1, [r2, #4]
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	6852      	ldr	r2, [r2, #4]
 80018f8:	6978      	ldr	r0, [r7, #20]
 80018fa:	fb02 f000 	mul.w	r0, r2, r0
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	4402      	add	r2, r0
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	440a      	add	r2, r1
 8001906:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) 
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	3301      	adds	r3, #1
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbdf      	blt.n	80018d8 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) 
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	429a      	cmp	r2, r3
 8001936:	dbcc      	blt.n	80018d2 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}

08001942 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:
  * @param F Jacobian of state-transition function
  * @param Q process noise matrix
  *
  */
void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) 
{
 8001942:	b590      	push	{r4, r7, lr}
 8001944:	b08d      	sub	sp, #52	@ 0x34
 8001946:	af04      	add	r7, sp, #16
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
 800194e:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	461a      	mov	r2, r3
 800195c:	6879      	ldr	r1, [r7, #4]
 800195e:	f00b fcbf 	bl	800d2e0 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
    _float_t* FP = new _float_t[EKF_N * EKF_N]();
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	6852      	ldr	r2, [r2, #4]
 800196a:	fb02 f303 	mul.w	r3, r2, r3
 800196e:	461c      	mov	r4, r3
 8001970:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001974:	429c      	cmp	r4, r3
 8001976:	d201      	bcs.n	800197c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3a>
 8001978:	00a3      	lsls	r3, r4, #2
 800197a:	e001      	b.n	8001980 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3e>
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
 8001980:	4618      	mov	r0, r3
 8001982:	f00a fad9 	bl	800bf38 <_Znaj>
 8001986:	4603      	mov	r3, r0
 8001988:	4618      	mov	r0, r3
 800198a:	4602      	mov	r2, r0
 800198c:	1e63      	subs	r3, r4, #1
 800198e:	e004      	b.n	800199a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x58>
 8001990:	f04f 0100 	mov.w	r1, #0
 8001994:	6011      	str	r1, [r2, #0]
 8001996:	3b01      	subs	r3, #1
 8001998:	3204      	adds	r2, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	daf8      	bge.n	8001990 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x4e>
 800199e:	61f8      	str	r0, [r7, #28]
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	6858      	ldr	r0, [r3, #4]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	6852      	ldr	r2, [r2, #4]
 80019ac:	68f9      	ldr	r1, [r7, #12]
 80019ae:	6849      	ldr	r1, [r1, #4]
 80019b0:	9102      	str	r1, [sp, #8]
 80019b2:	9201      	str	r2, [sp, #4]
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	4602      	mov	r2, r0
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fa8d 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _float_t* Ft = new _float_t[EKF_N * EKF_N]();
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	68fa      	ldr	r2, [r7, #12]
 80019c8:	6852      	ldr	r2, [r2, #4]
 80019ca:	fb02 f303 	mul.w	r3, r2, r3
 80019ce:	461c      	mov	r4, r3
 80019d0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80019d4:	429c      	cmp	r4, r3
 80019d6:	d201      	bcs.n	80019dc <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9a>
 80019d8:	00a3      	lsls	r3, r4, #2
 80019da:	e001      	b.n	80019e0 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9e>
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	4618      	mov	r0, r3
 80019e2:	f00a faa9 	bl	800bf38 <_Znaj>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4618      	mov	r0, r3
 80019ea:	4602      	mov	r2, r0
 80019ec:	1e63      	subs	r3, r4, #1
 80019ee:	e004      	b.n	80019fa <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xb8>
 80019f0:	f04f 0100 	mov.w	r1, #0
 80019f4:	6011      	str	r1, [r2, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	3204      	adds	r2, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	daf8      	bge.n	80019f0 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xae>
 80019fe:	61b8      	str	r0, [r7, #24]
    _transpose(F, Ft, EKF_N, EKF_N);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	6839      	ldr	r1, [r7, #0]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 fb15 	bl	8002040 <_ZN3EKF10_transposeEPKfPfii>

    _float_t* FPFt = new _float_t[EKF_N * EKF_N]();
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	6852      	ldr	r2, [r2, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	461c      	mov	r4, r3
 8001a24:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001a28:	429c      	cmp	r4, r3
 8001a2a:	d201      	bcs.n	8001a30 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xee>
 8001a2c:	00a3      	lsls	r3, r4, #2
 8001a2e:	e001      	b.n	8001a34 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xf2>
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	4618      	mov	r0, r3
 8001a36:	f00a fa7f 	bl	800bf38 <_Znaj>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	4602      	mov	r2, r0
 8001a40:	1e63      	subs	r3, r4, #1
 8001a42:	e004      	b.n	8001a4e <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x10c>
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	6011      	str	r1, [r2, #0]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	3204      	adds	r2, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	daf8      	bge.n	8001a44 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x102>
 8001a52:	6178      	str	r0, [r7, #20]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6852      	ldr	r2, [r2, #4]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	6849      	ldr	r1, [r1, #4]
 8001a60:	9102      	str	r1, [sp, #8]
 8001a62:	9201      	str	r2, [sp, #4]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	69f9      	ldr	r1, [r7, #28]
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fa35 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	6859      	ldr	r1, [r3, #4]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	6852      	ldr	r2, [r2, #4]
 8001a7e:	9201      	str	r2, [sp, #4]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	460b      	mov	r3, r1
 8001a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a86:	6979      	ldr	r1, [r7, #20]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fb0f 	bl	80020ac <_ZN3EKF7_addmatEPKfS1_Pfii>

    delete[] FP;
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d002      	beq.n	8001a9a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x158>
 8001a94:	69f8      	ldr	r0, [r7, #28]
 8001a96:	f00a fa4d 	bl	800bf34 <_ZdaPv>
    delete[] Ft;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x164>
 8001aa0:	69b8      	ldr	r0, [r7, #24]
 8001aa2:	f00a fa47 	bl	800bf34 <_ZdaPv>
    delete[] FPFt;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x170>
 8001aac:	6978      	ldr	r0, [r7, #20]
 8001aae:	f00a fa41 	bl	800bf34 <_ZdaPv>
}
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd90      	pop	{r4, r7, pc}

08001aba <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:



void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) 
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b08a      	sub	sp, #40	@ 0x28
 8001abe:	af04      	add	r7, sp, #16
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
    _negate(GH, EKF_N, EKF_N);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f000 fb30 	bl	8002136 <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	461a      	mov	r2, r3
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f000 fb63 	bl	80021aa <_ZN3EKF7_addeyeEPfi>
    _float_t* GHP = new _float_t[EKF_N * EKF_N];
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	6852      	ldr	r2, [r2, #4]
 8001aec:	fb02 f303 	mul.w	r3, r2, r3
 8001af0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d201      	bcs.n	8001afc <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x42>
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	e001      	b.n	8001b00 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x46>
 8001afc:	f04f 33ff 	mov.w	r3, #4294967295
 8001b00:	4618      	mov	r0, r3
 8001b02:	f00a fa19 	bl	800bf38 <_Znaj>
 8001b06:	4603      	mov	r3, r0
 8001b08:	617b      	str	r3, [r7, #20]
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	6858      	ldr	r0, [r3, #4]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	6852      	ldr	r2, [r2, #4]
 8001b16:	68f9      	ldr	r1, [r7, #12]
 8001b18:	6849      	ldr	r1, [r1, #4]
 8001b1a:	9102      	str	r1, [sp, #8]
 8001b1c:	9201      	str	r2, [sp, #4]
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	4602      	mov	r2, r0
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f000 f9d8 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	6858      	ldr	r0, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	68fa      	ldr	r2, [r7, #12]
 8001b36:	6852      	ldr	r2, [r2, #4]
 8001b38:	fb02 f303 	mul.w	r3, r2, r3
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	461a      	mov	r2, r3
 8001b40:	6979      	ldr	r1, [r7, #20]
 8001b42:	f00b fbcd 	bl	800d2e0 <memcpy>
    delete[] GHP;
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x98>
 8001b4c:	6978      	ldr	r0, [r7, #20]
 8001b4e:	f00a f9f1 	bl	800bf34 <_ZdaPv>
}
 8001b52:	bf00      	nop
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:
  * @param H sensor-function Jacobian matrix
  * @param R measurement-noise matrix
  *
  */
bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) 
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b092      	sub	sp, #72	@ 0x48
 8001b5e:	af04      	add	r7, sp, #16
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	60b9      	str	r1, [r7, #8]
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	603b      	str	r3, [r7, #0]
     // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t* G = new _float_t[EKF_N * EKF_M];
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	6892      	ldr	r2, [r2, #8]
 8001b70:	fb02 f303 	mul.w	r3, r2, r3
 8001b74:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d201      	bcs.n	8001b80 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x26>
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	e001      	b.n	8001b84 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a>
 8001b80:	f04f 33ff 	mov.w	r3, #4294967295
 8001b84:	4618      	mov	r0, r3
 8001b86:	f00a f9d7 	bl	800bf38 <_Znaj>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	637b      	str	r3, [r7, #52]	@ 0x34
    _float_t* Ht = new _float_t[EKF_N * EKF_M];
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	6892      	ldr	r2, [r2, #8]
 8001b96:	fb02 f303 	mul.w	r3, r2, r3
 8001b9a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d201      	bcs.n	8001ba6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4c>
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	e001      	b.n	8001baa <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x50>
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	4618      	mov	r0, r3
 8001bac:	f00a f9c4 	bl	800bf38 <_Znaj>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	633b      	str	r3, [r7, #48]	@ 0x30
    _transpose(H, Ht, EKF_M, EKF_N);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bc2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001bc4:	68f8      	ldr	r0, [r7, #12]
 8001bc6:	f000 fa3b 	bl	8002040 <_ZN3EKF10_transposeEPKfPfii>
    _float_t* PHt = new _float_t[EKF_N * EKF_M];
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	68fa      	ldr	r2, [r7, #12]
 8001bd0:	6892      	ldr	r2, [r2, #8]
 8001bd2:	fb02 f303 	mul.w	r3, r2, r3
 8001bd6:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d201      	bcs.n	8001be2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x88>
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	e001      	b.n	8001be6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x8c>
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00a f9a6 	bl	800bf38 <_Znaj>
 8001bec:	4603      	mov	r3, r0
 8001bee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	6858      	ldr	r0, [r3, #4]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	6852      	ldr	r2, [r2, #4]
 8001bfc:	68f9      	ldr	r1, [r7, #12]
 8001bfe:	6889      	ldr	r1, [r1, #8]
 8001c00:	9102      	str	r1, [sp, #8]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c0a:	4601      	mov	r1, r0
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f000 f965 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HP = new _float_t[EKF_M * EKF_N];
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	6852      	ldr	r2, [r2, #4]
 8001c1a:	fb02 f303 	mul.w	r3, r2, r3
 8001c1e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d201      	bcs.n	8001c2a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd0>
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	e001      	b.n	8001c2e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd4>
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f00a f982 	bl	800bf38 <_Znaj>
 8001c34:	4603      	mov	r3, r0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6858      	ldr	r0, [r3, #4]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	6852      	ldr	r2, [r2, #4]
 8001c44:	68f9      	ldr	r1, [r7, #12]
 8001c46:	6849      	ldr	r1, [r1, #4]
 8001c48:	9102      	str	r1, [sp, #8]
 8001c4a:	9201      	str	r2, [sp, #4]
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c50:	4602      	mov	r2, r0
 8001c52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c54:	68f8      	ldr	r0, [r7, #12]
 8001c56:	f000 f941 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHt = new _float_t[EKF_M * EKF_M];
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	6892      	ldr	r2, [r2, #8]
 8001c62:	fb02 f303 	mul.w	r3, r2, r3
 8001c66:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d201      	bcs.n	8001c72 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x118>
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	e001      	b.n	8001c76 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x11c>
 8001c72:	f04f 33ff 	mov.w	r3, #4294967295
 8001c76:	4618      	mov	r0, r3
 8001c78:	f00a f95e 	bl	800bf38 <_Znaj>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	6852      	ldr	r2, [r2, #4]
 8001c88:	68f9      	ldr	r1, [r7, #12]
 8001c8a:	6889      	ldr	r1, [r1, #8]
 8001c8c:	9102      	str	r1, [sp, #8]
 8001c8e:	9201      	str	r2, [sp, #4]
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f000 f91f 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHtR = new _float_t[EKF_M * EKF_M];
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	6892      	ldr	r2, [r2, #8]
 8001ca6:	fb02 f303 	mul.w	r3, r2, r3
 8001caa:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d201      	bcs.n	8001cb6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x15c>
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	e001      	b.n	8001cba <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x160>
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f00a f93c 	bl	800bf38 <_Znaj>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	623b      	str	r3, [r7, #32]
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	68fa      	ldr	r2, [r7, #12]
 8001cca:	6892      	ldr	r2, [r2, #8]
 8001ccc:	9201      	str	r2, [sp, #4]
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cd6:	68f8      	ldr	r0, [r7, #12]
 8001cd8:	f000 f9e8 	bl	80020ac <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t* HPHtRinv = new _float_t[EKF_M * EKF_M];
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	6892      	ldr	r2, [r2, #8]
 8001ce4:	fb02 f303 	mul.w	r3, r2, r3
 8001ce8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d201      	bcs.n	8001cf4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19a>
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e001      	b.n	8001cf8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19e>
 8001cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00a f91d 	bl	800bf38 <_Znaj>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	61fb      	str	r3, [r7, #28]
    if (!invert(HpHtR, HPHtRinv)) {
 8001d02:	69fa      	ldr	r2, [r7, #28]
 8001d04:	6a39      	ldr	r1, [r7, #32]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fd1d 	bl	8002746 <_ZN3EKF6invertEPKfPf>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	f083 0301 	eor.w	r3, r3, #1
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d02b      	beq.n	8001d70 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x216>
        delete[] G;
 8001d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ca>
 8001d1e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d20:	f00a f908 	bl	800bf34 <_ZdaPv>
        delete[] Ht;
 8001d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d6>
 8001d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d2c:	f00a f902 	bl	800bf34 <_ZdaPv>
        delete[] PHt;
 8001d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d002      	beq.n	8001d3c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8001d36:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d38:	f00a f8fc 	bl	800bf34 <_ZdaPv>
        delete[] HP;
 8001d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ee>
 8001d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d44:	f00a f8f6 	bl	800bf34 <_ZdaPv>
        delete[] HpHt;
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1fa>
 8001d4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d50:	f00a f8f0 	bl	800bf34 <_ZdaPv>
        delete[] HpHtR;
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d002      	beq.n	8001d60 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x206>
 8001d5a:	6a38      	ldr	r0, [r7, #32]
 8001d5c:	f00a f8ea 	bl	800bf34 <_ZdaPv>
        delete[] HPHtRinv;
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d002      	beq.n	8001d6c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x212>
 8001d66:	69f8      	ldr	r0, [r7, #28]
 8001d68:	f00a f8e4 	bl	800bf34 <_ZdaPv>
        return false;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	e0b1      	b.n	8001ed4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x37a>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	6892      	ldr	r2, [r2, #8]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	6889      	ldr	r1, [r1, #8]
 8001d7c:	9102      	str	r1, [sp, #8]
 8001d7e:	9201      	str	r2, [sp, #4]
 8001d80:	9300      	str	r3, [sp, #0]
 8001d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d84:	69fa      	ldr	r2, [r7, #28]
 8001d86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 f8a7 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t* z_hx = new _float_t[EKF_M];
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d201      	bcs.n	8001d9e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x244>
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	e001      	b.n	8001da2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x248>
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001da2:	4618      	mov	r0, r3
 8001da4:	f00a f8c8 	bl	800bf38 <_Znaj>
 8001da8:	4603      	mov	r3, r0
 8001daa:	61bb      	str	r3, [r7, #24]
    _sub(z, hx, z_hx, EKF_M);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 fc98 	bl	80026ee <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t* Gz_hx = new _float_t[EKF_N];
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d201      	bcs.n	8001dce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x274>
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	e001      	b.n	8001dd2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x278>
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f00a f8b0 	bl	800bf38 <_Znaj>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	617b      	str	r3, [r7, #20]
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	6892      	ldr	r2, [r2, #8]
 8001de4:	9201      	str	r2, [sp, #4]
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f000 f8dc 	bl	8001fac <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	6819      	ldr	r1, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	4613      	mov	r3, r2
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	68f8      	ldr	r0, [r7, #12]
 8001e08:	f000 fc45 	bl	8002696 <_ZN3EKF7_addvecEPKfS1_Pfi>

    // P_k = (I - G_k H_k) P_k
    _float_t* GH = new _float_t[EKF_N * EKF_N];
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	68fa      	ldr	r2, [r7, #12]
 8001e12:	6852      	ldr	r2, [r2, #4]
 8001e14:	fb02 f303 	mul.w	r3, r2, r3
 8001e18:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d201      	bcs.n	8001e24 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ca>
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	e001      	b.n	8001e28 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ce>
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f00a f885 	bl	800bf38 <_Znaj>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	613b      	str	r3, [r7, #16]
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	6892      	ldr	r2, [r2, #8]
 8001e3a:	68f9      	ldr	r1, [r7, #12]
 8001e3c:	6849      	ldr	r1, [r1, #4]
 8001e3e:	9102      	str	r1, [sp, #8]
 8001e40:	9201      	str	r2, [sp, #4]
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e48:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f000 f846 	bl	8001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff fe30 	bl	8001aba <_ZN3EKF16ekf_update_step3EP5ekf_tPf>

    delete[] G;
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x30c>
 8001e60:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e62:	f00a f867 	bl	800bf34 <_ZdaPv>
    delete[] Ht;
 8001e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x318>
 8001e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e6e:	f00a f861 	bl	800bf34 <_ZdaPv>
    delete[] PHt;
 8001e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x324>
 8001e78:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e7a:	f00a f85b 	bl	800bf34 <_ZdaPv>
    delete[] HP;
 8001e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d002      	beq.n	8001e8a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x330>
 8001e84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e86:	f00a f855 	bl	800bf34 <_ZdaPv>
    delete[] HpHt;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x33c>
 8001e90:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e92:	f00a f84f 	bl	800bf34 <_ZdaPv>
    delete[] HpHtR;
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d002      	beq.n	8001ea2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x348>
 8001e9c:	6a38      	ldr	r0, [r7, #32]
 8001e9e:	f00a f849 	bl	800bf34 <_ZdaPv>
    delete[] HPHtRinv;
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d002      	beq.n	8001eae <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x354>
 8001ea8:	69f8      	ldr	r0, [r7, #28]
 8001eaa:	f00a f843 	bl	800bf34 <_ZdaPv>
    delete[] z_hx;
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
 8001eb4:	69b8      	ldr	r0, [r7, #24]
 8001eb6:	f00a f83d 	bl	800bf34 <_ZdaPv>
    delete[] Gz_hx;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36c>
 8001ec0:	6978      	ldr	r0, [r7, #20]
 8001ec2:	f00a f837 	bl	800bf34 <_ZdaPv>
    delete[] GH;
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d002      	beq.n	8001ed2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x378>
 8001ecc:	6938      	ldr	r0, [r7, #16]
 8001ece:	f00a f831 	bl	800bf34 <_ZdaPv>

    // success
    return true;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3738      	adds	r7, #56	@ 0x38
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <_ZN3EKF7_mulmatEPKfS1_Pfiii>:
        const _float_t * b,
        _float_t * c,
        const int arows,
        const int acols,
        const int bcols)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	@ 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
 8001ee8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
 8001eee:	e052      	b.n	8001f96 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j=0; j<bcols; ++j) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	e048      	b.n	8001f88 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i*bcols+j] = 0;
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001efa:	fb03 f202 	mul.w	r2, r3, r2
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001f0e:	2300      	movs	r3, #0
 8001f10:	617b      	str	r3, [r7, #20]
 8001f12:	e032      	b.n	8001f7a <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f18:	fb03 f202 	mul.w	r2, r3, r2
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	ed93 7a00 	vldr	s14, [r3]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f2e:	fb03 f202 	mul.w	r2, r3, r2
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	4413      	add	r3, r2
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	edd3 6a00 	vldr	s13, [r3]
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f44:	fb03 f202 	mul.w	r2, r3, r2
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	4413      	add	r3, r2
 8001f52:	edd3 7a00 	vldr	s15, [r3]
 8001f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5e:	fb03 f202 	mul.w	r2, r3, r2
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4413      	add	r3, r2
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f70:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	3301      	adds	r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	dbc8      	blt.n	8001f14 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j=0; j<bcols; ++j) {
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61bb      	str	r3, [r7, #24]
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	dbb2      	blt.n	8001ef6 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i=0; i<arows; ++i) {
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	3301      	adds	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dba8      	blt.n	8001ef0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 8001f9e:	bf00      	nop
 8001fa0:	bf00      	nop
 8001fa2:	3724      	adds	r7, #36	@ 0x24
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <_ZN3EKF7_mulvecEPKfS1_Pfii>:
        const _float_t * a,
        const _float_t * x,
        _float_t * y,
        const int m,
        const int n)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
 8001fb8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e034      	b.n	800202a <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e023      	b.n	800201c <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i*n+j];
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	4413      	add	r3, r2
 8001fdc:	ed93 7a00 	vldr	s14, [r3]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	edd3 6a00 	vldr	s13, [r3]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	fb03 f202 	mul.w	r2, r3, r2
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	4413      	add	r3, r2
 800200e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002012:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	3301      	adds	r3, #1
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	429a      	cmp	r2, r3
 8002022:	dbd7      	blt.n	8001fd4 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i=0; i<m; ++i) {
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	6a3b      	ldr	r3, [r7, #32]
 800202e:	429a      	cmp	r2, r3
 8002030:	dbc6      	blt.n	8001fc0 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
    }
}
 8002032:	bf00      	nop
 8002034:	bf00      	nop
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <_ZN3EKF10_transposeEPKfPfii>:

/// @private
 void EKF::_transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 800204e:	2300      	movs	r3, #0
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e020      	b.n	8002096 <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j=0; j<n; ++j) {
 8002054:	2300      	movs	r3, #0
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e016      	b.n	8002088 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j*m+i] = a[i*n+j];
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	6a3a      	ldr	r2, [r7, #32]
 800205e:	fb03 f202 	mul.w	r2, r3, r2
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	68ba      	ldr	r2, [r7, #8]
 800206a:	441a      	add	r2, r3
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	6839      	ldr	r1, [r7, #0]
 8002070:	fb03 f101 	mul.w	r1, r3, r1
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	440b      	add	r3, r1
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	440b      	add	r3, r1
 800207e:	6812      	ldr	r2, [r2, #0]
 8002080:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	3301      	adds	r3, #1
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	429a      	cmp	r2, r3
 800208e:	dbe4      	blt.n	800205a <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i=0; i<m; ++i)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	3301      	adds	r3, #1
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697a      	ldr	r2, [r7, #20]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	dbda      	blt.n	8002054 <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
}
 800209e:	bf00      	nop
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
 void EKF::_addmat(
        const _float_t * a, const _float_t * b, _float_t * c,
        const int m, const int n)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b087      	sub	sp, #28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
 80020be:	e02f      	b.n	8002120 <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j=0; j<n; ++j) {
 80020c0:	2300      	movs	r3, #0
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	e025      	b.n	8002112 <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ca:	fb03 f202 	mul.w	r2, r3, r2
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	68ba      	ldr	r2, [r7, #8]
 80020d6:	4413      	add	r3, r2
 80020d8:	ed93 7a00 	vldr	s14, [r3]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e0:	fb03 f202 	mul.w	r2, r3, r2
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	687a      	ldr	r2, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f6:	fb03 f202 	mul.w	r2, r3, r2
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	4413      	add	r3, r2
 8002104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002108:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3301      	adds	r3, #1
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002116:	429a      	cmp	r2, r3
 8002118:	dbd5      	blt.n	80020c6 <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i=0; i<m; ++i) {
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	3301      	adds	r3, #1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	697a      	ldr	r2, [r7, #20]
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	429a      	cmp	r2, r3
 8002126:	dbcb      	blt.n	80020c0 <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	371c      	adds	r7, #28
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <_ZN3EKF7_negateEPfii>:

/// @private
 void EKF::_negate(_float_t * a, const int m, const int n)
{
 8002136:	b480      	push	{r7}
 8002138:	b087      	sub	sp, #28
 800213a:	af00      	add	r7, sp, #0
 800213c:	60f8      	str	r0, [r7, #12]
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e024      	b.n	8002194 <_ZN3EKF7_negateEPfii+0x5e>
        for (int j=0; j<n; ++j) {
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	e01a      	b.n	8002186 <_ZN3EKF7_negateEPfii+0x50>
            a[i*n+j] = -a[i*n+j];
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	fb03 f202 	mul.w	r2, r3, r2
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	4413      	add	r3, r2
 8002162:	edd3 7a00 	vldr	s15, [r3]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	fb03 f202 	mul.w	r2, r3, r2
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4413      	add	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	4413      	add	r3, r2
 8002178:	eef1 7a67 	vneg.f32	s15, s15
 800217c:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3301      	adds	r3, #1
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	dbe0      	blt.n	8002150 <_ZN3EKF7_negateEPfii+0x1a>
    for (int i=0; i<m; ++i) {
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	3301      	adds	r3, #1
 8002192:	617b      	str	r3, [r7, #20]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	429a      	cmp	r2, r3
 800219a:	dbd6      	blt.n	800214a <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_ZN3EKF7_addeyeEPfi>:

/// @private
 void EKF::_addeye(_float_t * a, const int n)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b087      	sub	sp, #28
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	60f8      	str	r0, [r7, #12]
 80021b2:	60b9      	str	r1, [r7, #8]
 80021b4:	607a      	str	r2, [r7, #4]
    for (int i=0; i<n; ++i) {
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
 80021ba:	e01c      	b.n	80021f6 <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i*n+i] += 1;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	fb03 f202 	mul.w	r2, r3, r2
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	4413      	add	r3, r2
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	68ba      	ldr	r2, [r7, #8]
 80021cc:	4413      	add	r3, r2
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	fb03 f202 	mul.w	r2, r3, r2
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	4413      	add	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4413      	add	r3, r2
 80021e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021ec:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	3301      	adds	r3, #1
 80021f4:	617b      	str	r3, [r7, #20]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dbde      	blt.n	80021bc <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 80021fe:	bf00      	nop
 8002200:	bf00      	nop
 8002202:	371c      	adds	r7, #28
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 800220c:	b590      	push	{r4, r7, lr}
 800220e:	b089      	sub	sp, #36	@ 0x24
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
 800221e:	e06e      	b.n	80022fe <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	61bb      	str	r3, [r7, #24]
 8002224:	e064      	b.n	80022f0 <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	fb03 f202 	mul.w	r2, r3, r2
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	4413      	add	r3, r2
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	3b01      	subs	r3, #1
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	e020      	b.n	8002286 <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	fb03 f202 	mul.w	r2, r3, r2
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	4413      	add	r3, r2
 8002256:	ed93 7a00 	vldr	s14, [r3]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	fb03 f202 	mul.w	r2, r3, r2
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4413      	add	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4413      	add	r3, r2
 800226c:	edd3 7a00 	vldr	s15, [r3]
 8002270:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002274:	ed97 7a05 	vldr	s14, [r7, #20]
 8002278:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227c:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	3b01      	subs	r3, #1
 8002284:	613b      	str	r3, [r7, #16]
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	2b00      	cmp	r3, #0
 800228a:	dadb      	bge.n	8002244 <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 800228c:	69fa      	ldr	r2, [r7, #28]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	429a      	cmp	r2, r3
 8002292:	d115      	bne.n	80022c0 <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 8002294:	edd7 7a05 	vldr	s15, [r7, #20]
 8002298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800229c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022a0:	d801      	bhi.n	80022a6 <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 80022a2:	2301      	movs	r3, #1
 80022a4:	e030      	b.n	8002308 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	18d4      	adds	r4, r2, r3
 80022ae:	ed97 0a05 	vldr	s0, [r7, #20]
 80022b2:	f7ff fa97 	bl	80017e4 <_ZSt4sqrtf>
 80022b6:	eef0 7a40 	vmov.f32	s15, s0
 80022ba:	edc4 7a00 	vstr	s15, [r4]
 80022be:	e014      	b.n	80022ea <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	4413      	add	r3, r2
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	fb03 f202 	mul.w	r2, r3, r2
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	edd7 6a05 	vldr	s13, [r7, #20]
 80022e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022e6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	3301      	adds	r3, #1
 80022ee:	61bb      	str	r3, [r7, #24]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	db96      	blt.n	8002226 <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	3301      	adds	r3, #1
 80022fc:	61fb      	str	r3, [r7, #28]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	db8c      	blt.n	8002220 <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3724      	adds	r7, #36	@ 0x24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}

08002310 <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b08a      	sub	sp, #40	@ 0x28
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 800231e:	2300      	movs	r3, #0
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
 8002322:	e020      	b.n	8002366 <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 8002324:	2300      	movs	r3, #0
 8002326:	623b      	str	r3, [r7, #32]
 8002328:	e016      	b.n	8002358 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800232e:	fb03 f202 	mul.w	r2, r3, r2
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	4413      	add	r3, r2
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	441a      	add	r2, r3
 800233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002340:	fb03 f101 	mul.w	r1, r3, r1
 8002344:	6a3b      	ldr	r3, [r7, #32]
 8002346:	440b      	add	r3, r1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	440b      	add	r3, r1
 800234e:	6812      	ldr	r2, [r2, #0]
 8002350:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 8002352:	6a3b      	ldr	r3, [r7, #32]
 8002354:	3301      	adds	r3, #1
 8002356:	623b      	str	r3, [r7, #32]
 8002358:	6a3a      	ldr	r2, [r7, #32]
 800235a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235c:	429a      	cmp	r2, r3
 800235e:	dbe4      	blt.n	800232a <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	3301      	adds	r3, #1
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
 8002366:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800236a:	429a      	cmp	r2, r3
 800236c:	dbda      	blt.n	8002324 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 800236e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f7ff ff49 	bl	800220c <_ZN3EKF8_choldc1EPfS0_i>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	bf14      	ite	ne
 8002380:	2301      	movne	r3, #1
 8002382:	2300      	moveq	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 800238a:	2301      	movs	r3, #1
 800238c:	e06a      	b.n	8002464 <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e062      	b.n	800245a <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	4413      	add	r3, r2
 800239c:	ed93 7a00 	vldr	s14, [r3]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a4:	fb03 f202 	mul.w	r2, r3, r2
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023ba:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3301      	adds	r3, #1
 80023c2:	61bb      	str	r3, [r7, #24]
 80023c4:	e042      	b.n	800244c <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	e020      	b.n	8002414 <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 80023d2:	69bb      	ldr	r3, [r7, #24]
 80023d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023d6:	fb03 f202 	mul.w	r2, r3, r2
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	ed93 7a00 	vldr	s14, [r3]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023ec:	fb03 f202 	mul.w	r2, r3, r2
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	edd3 7a00 	vldr	s15, [r3]
 80023fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002402:	ed97 7a05 	vldr	s14, [r7, #20]
 8002406:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240a:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3301      	adds	r3, #1
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	429a      	cmp	r2, r3
 800241a:	dbda      	blt.n	80023d2 <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	ed93 7a00 	vldr	s14, [r3]
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800242c:	fb03 f202 	mul.w	r2, r3, r2
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	4413      	add	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	4413      	add	r3, r2
 800243a:	edd7 6a05 	vldr	s13, [r7, #20]
 800243e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002442:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	3301      	adds	r3, #1
 800244a:	61bb      	str	r3, [r7, #24]
 800244c:	69ba      	ldr	r2, [r7, #24]
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	429a      	cmp	r2, r3
 8002452:	dbb8      	blt.n	80023c6 <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	3301      	adds	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
 800245a:	69fa      	ldr	r2, [r7, #28]
 800245c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245e:	429a      	cmp	r2, r3
 8002460:	db98      	blt.n	8002394 <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3728      	adds	r7, #40	@ 0x28
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	@ 0x38
 8002470:	af02      	add	r7, sp, #8
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 800247a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f7ff ff43 	bl	8002310 <_ZN3EKF9_choldcslEPKfPfS2_i>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	bf14      	ite	ne
 8002490:	2301      	movne	r3, #1
 8002492:	2300      	moveq	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 800249a:	2301      	movs	r3, #1
 800249c:	e0f7      	b.n	800268e <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 800249e:	2300      	movs	r3, #0
 80024a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024a2:	e019      	b.n	80024d8 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 80024a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a6:	3301      	adds	r3, #1
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	e00e      	b.n	80024ca <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024b0:	fb03 f202 	mul.w	r2, r3, r2
 80024b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	3301      	adds	r3, #1
 80024c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ce:	429a      	cmp	r2, r3
 80024d0:	dbec      	blt.n	80024ac <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 80024d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024d4:	3301      	adds	r3, #1
 80024d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbe1      	blt.n	80024a4 <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 80024e0:	2300      	movs	r3, #0
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e4:	e0a5      	b.n	8002632 <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024ea:	fb03 f202 	mul.w	r2, r3, r2
 80024ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f0:	4413      	add	r3, r2
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	4413      	add	r3, r2
 80024f8:	ed93 7a00 	vldr	s14, [r3]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002500:	fb03 f202 	mul.w	r2, r3, r2
 8002504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	edd3 7a00 	vldr	s15, [r3]
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002516:	fb03 f202 	mul.w	r2, r3, r2
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	4413      	add	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	4413      	add	r3, r2
 8002524:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002528:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 800252c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800252e:	3301      	adds	r3, #1
 8002530:	623b      	str	r3, [r7, #32]
 8002532:	e032      	b.n	800259a <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 8002534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002536:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002538:	fb03 f202 	mul.w	r2, r3, r2
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	4413      	add	r3, r2
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4413      	add	r3, r2
 8002546:	ed93 7a00 	vldr	s14, [r3]
 800254a:	6a3b      	ldr	r3, [r7, #32]
 800254c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800254e:	fb03 f202 	mul.w	r2, r3, r2
 8002552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	4413      	add	r3, r2
 800255c:	edd3 6a00 	vldr	s13, [r3]
 8002560:	6a3b      	ldr	r3, [r7, #32]
 8002562:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002564:	fb03 f202 	mul.w	r2, r3, r2
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	4413      	add	r3, r2
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	4413      	add	r3, r2
 8002572:	edd3 7a00 	vldr	s15, [r3]
 8002576:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800257a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800257e:	fb03 f202 	mul.w	r2, r3, r2
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	4413      	add	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	4413      	add	r3, r2
 800258c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002590:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	3301      	adds	r3, #1
 8002598:	623b      	str	r3, [r7, #32]
 800259a:	6a3a      	ldr	r2, [r7, #32]
 800259c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800259e:	429a      	cmp	r2, r3
 80025a0:	dbc8      	blt.n	8002534 <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 80025a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a4:	3301      	adds	r3, #1
 80025a6:	61fb      	str	r3, [r7, #28]
 80025a8:	e03c      	b.n	8002624 <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	61bb      	str	r3, [r7, #24]
 80025ae:	e032      	b.n	8002616 <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025b4:	fb03 f202 	mul.w	r2, r3, r2
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	4413      	add	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	ed93 7a00 	vldr	s14, [r3]
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025ca:	fb03 f202 	mul.w	r2, r3, r2
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	edd3 6a00 	vldr	s13, [r3]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025e0:	fb03 f202 	mul.w	r2, r3, r2
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4413      	add	r3, r2
 80025ee:	edd3 7a00 	vldr	s15, [r3]
 80025f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025fa:	fb03 f202 	mul.w	r2, r3, r2
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	4413      	add	r3, r2
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	3301      	adds	r3, #1
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800261a:	429a      	cmp	r2, r3
 800261c:	dbc8      	blt.n	80025b0 <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002628:	429a      	cmp	r2, r3
 800262a:	dbbe      	blt.n	80025aa <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	3301      	adds	r3, #1
 8002630:	627b      	str	r3, [r7, #36]	@ 0x24
 8002632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002636:	429a      	cmp	r2, r3
 8002638:	f6ff af55 	blt.w	80024e6 <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	e020      	b.n	8002684 <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 8002642:	2300      	movs	r3, #0
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	e016      	b.n	8002676 <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800264c:	fb03 f202 	mul.w	r2, r3, r2
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	441a      	add	r2, r3
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800265e:	fb03 f101 	mul.w	r1, r3, r1
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	440b      	add	r3, r1
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	440b      	add	r3, r1
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	3301      	adds	r3, #1
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbe4      	blt.n	8002648 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	3301      	adds	r3, #1
 8002682:	617b      	str	r3, [r7, #20]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002688:	429a      	cmp	r2, r3
 800268a:	dbda      	blt.n	8002642 <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3730      	adds	r7, #48	@ 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_ZN3EKF7_addvecEPKfS1_Pfi>:

/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8002696:	b480      	push	{r7}
 8002698:	b087      	sub	sp, #28
 800269a:	af00      	add	r7, sp, #0
 800269c:	60f8      	str	r0, [r7, #12]
 800269e:	60b9      	str	r1, [r7, #8]
 80026a0:	607a      	str	r2, [r7, #4]
 80026a2:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80026a4:	2300      	movs	r3, #0
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	e016      	b.n	80026d8 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	4413      	add	r3, r2
 80026b2:	ed93 7a00 	vldr	s14, [r3]
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	4413      	add	r3, r2
 80026be:	edd3 7a00 	vldr	s15, [r3]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ce:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3301      	adds	r3, #1
 80026d6:	617b      	str	r3, [r7, #20]
 80026d8:	697a      	ldr	r2, [r7, #20]
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	429a      	cmp	r2, r3
 80026de:	dbe4      	blt.n	80026aa <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	371c      	adds	r7, #28
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80026ee:	b480      	push	{r7}
 80026f0:	b087      	sub	sp, #28
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	e016      	b.n	8002730 <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	68ba      	ldr	r2, [r7, #8]
 8002708:	4413      	add	r3, r2
 800270a:	ed93 7a00 	vldr	s14, [r3]
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	4413      	add	r3, r2
 8002716:	edd3 7a00 	vldr	s15, [r3]
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	3301      	adds	r3, #1
 800272e:	617b      	str	r3, [r7, #20]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	429a      	cmp	r2, r3
 8002736:	dbe4      	blt.n	8002702 <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <_ZN3EKF6invertEPKfPf>:

/// @private
 bool EKF::invert(const _float_t * a, _float_t * ainv)
{
 8002746:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800274a:	b089      	sub	sp, #36	@ 0x24
 800274c:	af02      	add	r7, sp, #8
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 8002754:	466b      	mov	r3, sp
 8002756:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6899      	ldr	r1, [r3, #8]
 800275c:	1e4b      	subs	r3, r1, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	460a      	mov	r2, r1
 8002762:	2300      	movs	r3, #0
 8002764:	4690      	mov	r8, r2
 8002766:	4699      	mov	r9, r3
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002774:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002778:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800277c:	460a      	mov	r2, r1
 800277e:	2300      	movs	r3, #0
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	f04f 0200 	mov.w	r2, #0
 8002788:	f04f 0300 	mov.w	r3, #0
 800278c:	016b      	lsls	r3, r5, #5
 800278e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002792:	0162      	lsls	r2, r4, #5
 8002794:	460b      	mov	r3, r1
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3307      	adds	r3, #7
 800279a:	08db      	lsrs	r3, r3, #3
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	ebad 0d03 	sub.w	sp, sp, r3
 80027a2:	ab02      	add	r3, sp, #8
 80027a4:	3303      	adds	r3, #3
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	68b9      	ldr	r1, [r7, #8]
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f7ff fe57 	bl	800246c <_ZN3EKF7_cholslEPKfPfS2_i>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	46b5      	mov	sp, r6
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	371c      	adds	r7, #28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027d6 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80027e0:	edc7 0a00 	vstr	s1, [r7]
 80027e4:	edd7 0a00 	vldr	s1, [r7]
 80027e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80027ec:	f009 fc32 	bl	800c054 <fmodf>
 80027f0:	eef0 7a40 	vmov.f32	s15, s0
 80027f4:	eeb0 0a67 	vmov.f32	s0, s15
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
	...

08002800 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 800280a:	edd7 7a01 	vldr	s15, [r7, #4]
 800280e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80028e4 <_Z4_sinf+0xe4>
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281a:	ee17 3a90 	vmov	r3, s15
 800281e:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	b2db      	uxtb	r3, r3
 8002824:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	b2db      	uxtb	r3, r3
 800282c:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b3f      	cmp	r3, #63	@ 0x3f
 8002832:	d80b      	bhi.n	800284c <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 8002834:	4a2c      	ldr	r2, [pc, #176]	@ (80028e8 <_Z4_sinf+0xe8>)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	3301      	adds	r3, #1
 8002842:	4a29      	ldr	r2, [pc, #164]	@ (80028e8 <_Z4_sinf+0xe8>)
 8002844:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002848:	613b      	str	r3, [r7, #16]
 800284a:	e033      	b.n	80028b4 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002850:	d80e      	bhi.n	8002870 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002858:	4a23      	ldr	r2, [pc, #140]	@ (80028e8 <_Z4_sinf+0xe8>)
 800285a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800285e:	617b      	str	r3, [r7, #20]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002866:	4a20      	ldr	r2, [pc, #128]	@ (80028e8 <_Z4_sinf+0xe8>)
 8002868:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800286c:	613b      	str	r3, [r7, #16]
 800286e:	e021      	b.n	80028b4 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2bbf      	cmp	r3, #191	@ 0xbf
 8002874:	d80e      	bhi.n	8002894 <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	3b80      	subs	r3, #128	@ 0x80
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <_Z4_sinf+0xe8>)
 800287c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002880:	425b      	negs	r3, r3
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3b7f      	subs	r3, #127	@ 0x7f
 8002888:	4a17      	ldr	r2, [pc, #92]	@ (80028e8 <_Z4_sinf+0xe8>)
 800288a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800288e:	425b      	negs	r3, r3
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	e00f      	b.n	80028b4 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800289a:	4a13      	ldr	r2, [pc, #76]	@ (80028e8 <_Z4_sinf+0xe8>)
 800289c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028a0:	425b      	negs	r3, r3
 80028a2:	617b      	str	r3, [r7, #20]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80028aa:	4a0f      	ldr	r2, [pc, #60]	@ (80028e8 <_Z4_sinf+0xe8>)
 80028ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028b0:	425b      	negs	r3, r3
 80028b2:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	fb02 f303 	mul.w	r3, r2, r3
 80028c0:	121a      	asrs	r2, r3, #8
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4413      	add	r3, r2
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ce:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80028ec <_Z4_sinf+0xec>
 80028d2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	371c      	adds	r7, #28
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	4622f983 	.word	0x4622f983
 80028e8:	20000014 	.word	0x20000014
 80028ec:	38000000 	.word	0x38000000

080028f0 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 80028fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80028fe:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002948 <_Z4_cosf+0x58>
 8002902:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002906:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 800290a:	edd7 7a03 	vldr	s15, [r7, #12]
 800290e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800294c <_Z4_cosf+0x5c>
 8002912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291a:	dd06      	ble.n	800292a <_Z4_cosf+0x3a>
 800291c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002920:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800294c <_Z4_cosf+0x5c>
 8002924:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002928:	e001      	b.n	800292e <_Z4_cosf+0x3e>
 800292a:	edd7 7a03 	vldr	s15, [r7, #12]
 800292e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8002932:	ed97 0a03 	vldr	s0, [r7, #12]
 8002936:	f7ff ff63 	bl	8002800 <_Z4_sinf>
 800293a:	eef0 7a40 	vmov.f32	s15, s0
}
 800293e:	eeb0 0a67 	vmov.f32	s0, s15
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	3fc90fdb 	.word	0x3fc90fdb
 800294c:	40c90fdb 	.word	0x40c90fdb

08002950 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	ed93 7a00 	vldr	s14, [r3]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800296a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800296e:	d501      	bpl.n	8002974 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	e000      	b.n	8002976 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002974:	687b      	ldr	r3, [r7, #4]
    }
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <_Z6_atan2ff>:
// Via Odrive project
// https://github.com/odriverobotics/ODrive/blob/master/Firmware/MotorControl/utils.cpp
// This function is MIT licenced, copyright Oskar Weigl/Odrive Robotics
// The origin for Odrive atan2 is public domain. Thanks to Odrive for making
// it easy to borrow.
__attribute__((weak)) float _atan2(float y, float x) {
 8002984:	b580      	push	{r7, lr}
 8002986:	ed2d 8b02 	vpush	{d8}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002992:	edc7 0a00 	vstr	s1, [r7]
    // a := min (|x|, |y|) / max (|x|, |y|)
    float abs_y = fabsf(y);
 8002996:	edd7 7a01 	vldr	s15, [r7, #4]
 800299a:	eef0 7ae7 	vabs.f32	s15, s15
 800299e:	edc7 7a04 	vstr	s15, [r7, #16]
    float abs_x = fabsf(x);
 80029a2:	edd7 7a00 	vldr	s15, [r7]
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	edc7 7a03 	vstr	s15, [r7, #12]
    // inject FLT_MIN in denominator to avoid division by zero
    float a = min(abs_x, abs_y) / (max(abs_x, abs_y));
 80029ae:	f107 0210 	add.w	r2, r7, #16
 80029b2:	f107 030c 	add.w	r3, r7, #12
 80029b6:	4611      	mov	r1, r2
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ffc9 	bl	8002950 <_ZSt3minIfERKT_S2_S2_>
 80029be:	4603      	mov	r3, r0
 80029c0:	ed93 8a00 	vldr	s16, [r3]
 80029c4:	f107 0210 	add.w	r2, r7, #16
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 f8c4 	bl	8002b5c <_ZSt3maxIfERKT_S2_S2_>
 80029d4:	4603      	mov	r3, r0
 80029d6:	ed93 7a00 	vldr	s14, [r3]
 80029da:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80029de:	edc7 7a06 	vstr	s15, [r7, #24]
    // s := a * a
    float s = a * a;
 80029e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80029e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ea:	edc7 7a05 	vstr	s15, [r7, #20]
    // r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a
    float r =
        ((-0.0464964749f * s + 0.15931422f) * s - 0.327622764f) * s * a + a;
 80029ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002a9c <_Z6_atan2ff+0x118>
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002aa0 <_Z6_atan2ff+0x11c>
 80029fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002a02:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0a:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002aa4 <_Z6_atan2ff+0x120>
 8002a0e:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002a12:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a1a:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a1e:	ee67 7a27 	vmul.f32	s15, s14, s15
    float r =
 8002a22:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a2a:	edc7 7a07 	vstr	s15, [r7, #28]
    // if |y| > |x| then r := 1.57079637 - r
    if (abs_y > abs_x) r = 1.57079637f - r;
 8002a2e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a32:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3e:	dd07      	ble.n	8002a50 <_Z6_atan2ff+0xcc>
 8002a40:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002aa8 <_Z6_atan2ff+0x124>
 8002a44:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4c:	edc7 7a07 	vstr	s15, [r7, #28]
    // if x < 0 then r := 3.14159274 - r
    if (x < 0.0f) r = 3.14159274f - r;
 8002a50:	edd7 7a00 	vldr	s15, [r7]
 8002a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5c:	d507      	bpl.n	8002a6e <_Z6_atan2ff+0xea>
 8002a5e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002aac <_Z6_atan2ff+0x128>
 8002a62:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
    // if y < 0 then r := -r
    if (y < 0.0f) r = -r;
 8002a6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	d505      	bpl.n	8002a88 <_Z6_atan2ff+0x104>
 8002a7c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a80:	eef1 7a67 	vneg.f32	s15, s15
 8002a84:	edc7 7a07 	vstr	s15, [r7, #28]

    return r;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	ee07 3a90 	vmov	s15, r3
  }
 8002a8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a92:	3720      	adds	r7, #32
 8002a94:	46bd      	mov	sp, r7
 8002a96:	ecbd 8b02 	vpop	{d8}
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	bd3e7316 	.word	0xbd3e7316
 8002aa0:	3e232344 	.word	0x3e232344
 8002aa4:	3ea7be2c 	.word	0x3ea7be2c
 8002aa8:	3fc90fdb 	.word	0x3fc90fdb
 8002aac:	40490fdb 	.word	0x40490fdb

08002ab0 <_Z15_normalizeAnglef>:


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002aba:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002af4 <_Z15_normalizeAnglef+0x44>
 8002abe:	ed97 0a01 	vldr	s0, [r7, #4]
 8002ac2:	f7ff fe88 	bl	80027d6 <_ZSt4fmodff>
 8002ac6:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8002aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ace:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ad6:	db02      	blt.n	8002ade <_Z15_normalizeAnglef+0x2e>
 8002ad8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002adc:	e005      	b.n	8002aea <_Z15_normalizeAnglef+0x3a>
 8002ade:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ae2:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002af4 <_Z15_normalizeAnglef+0x44>
 8002ae6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002aea:	eeb0 0a67 	vmov.f32	s0, s15
 8002aee:	3710      	adds	r7, #16
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	40c90fdb 	.word	0x40c90fdb

08002af8 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002b02:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002b16:	eeb0 0a67 	vmov.f32	s0, s15
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	085a      	lsrs	r2, r3, #1
 8002b36:	4b08      	ldr	r3, [pc, #32]	@ (8002b58 <_Z11_sqrtApproxf+0x34>)
 8002b38:	1a9b      	subs	r3, r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8002b3c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b40:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002b48:	eeb0 0a67 	vmov.f32	s0, s15
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	5f375a86 	.word	0x5f375a86

08002b5c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	ed93 7a00 	vldr	s14, [r3]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	edd3 7a00 	vldr	s15, [r3]
 8002b72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b7a:	d501      	bpl.n	8002b80 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	e000      	b.n	8002b82 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002b80:	687b      	ldr	r3, [r7, #4]
    }
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 8002ba8:	f000 f872 	bl	8002c90 <_ZN13LowPassFilter6microsEv>
 8002bac:	4602      	mov	r2, r0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	605a      	str	r2, [r3, #4]
}
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8002bc8:	f000 f862 	bl	8002c90 <_ZN13LowPassFilter6microsEv>
 8002bcc:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bde:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002c84 <_ZN13LowPassFilterclEf+0xc8>
 8002be2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be6:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8002bea:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d502      	bpl.n	8002bfe <_ZN13LowPassFilterclEf+0x42>
 8002bf8:	4b23      	ldr	r3, [pc, #140]	@ (8002c88 <_ZN13LowPassFilterclEf+0xcc>)
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e010      	b.n	8002c20 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 8002bfe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c02:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002c8c <_ZN13LowPassFilterclEf+0xd0>
 8002c06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	dd07      	ble.n	8002c20 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	605a      	str	r2, [r3, #4]
        return x;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	e029      	b.n	8002c74 <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	edd3 6a00 	vldr	s13, [r3]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	ed93 7a00 	vldr	s14, [r3]
 8002c2c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c38:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c42:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c52:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c56:	edd7 7a00 	vldr	s15, [r7]
 8002c5a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c62:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	68ba      	ldr	r2, [r7, #8]
 8002c6a:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	605a      	str	r2, [r3, #4]
    return y;
 8002c72:	68bb      	ldr	r3, [r7, #8]
}
 8002c74:	ee07 3a90 	vmov	s15, r3
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	358637bd 	.word	0x358637bd
 8002c88:	3a83126f 	.word	0x3a83126f
 8002c8c:	3e99999a 	.word	0x3e99999a

08002c90 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002c94:	4b07      	ldr	r3, [pc, #28]	@ (8002cb4 <_ZN13LowPassFilter6microsEv+0x24>)
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	4b07      	ldr	r3, [pc, #28]	@ (8002cb8 <_ZN13LowPassFilter6microsEv+0x28>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4907      	ldr	r1, [pc, #28]	@ (8002cbc <_ZN13LowPassFilter6microsEv+0x2c>)
 8002c9e:	fba1 1303 	umull	r1, r3, r1, r3
 8002ca2:	0c9b      	lsrs	r3, r3, #18
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	e0001000 	.word	0xe0001000
 8002cb8:	200000f4 	.word	0x200000f4
 8002cbc:	431bde83 	.word	0x431bde83

08002cc0 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};

LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
LowPassFilter LPF_position	{0.01}; // 1 is very slow
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d158      	bne.n	8002d82 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d153      	bne.n	8002d82 <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8002cda:	4b2c      	ldr	r3, [pc, #176]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	eeb0 2a67 	vmov.f32	s4, s15
 8002ce4:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8002d90 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ce8:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002cec:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002cf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002cf4:	4828      	ldr	r0, [pc, #160]	@ (8002d98 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002cf6:	f000 f871 	bl	8002ddc <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1.0, 1.0, 0.0, 1000.0, voltage_limit};
 8002cfa:	4b24      	ldr	r3, [pc, #144]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	eeb0 2a67 	vmov.f32	s4, s15
 8002d04:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8002d90 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002d08:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d0c:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002d10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d14:	4821      	ldr	r0, [pc, #132]	@ (8002d9c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002d16:	f000 f861 	bl	8002ddc <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {1.0, 0.1, 0.1, 1000.0, current_limit};
 8002d1a:	4b21      	ldr	r3, [pc, #132]	@ (8002da0 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eeb0 2a67 	vmov.f32	s4, s15
 8002d24:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8002d90 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002d28:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8002da4 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d2c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002da4 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d34:	481c      	ldr	r0, [pc, #112]	@ (8002da8 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002d36:	f000 f851 	bl	8002ddc <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dac <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002d3c:	edd3 7a00 	vldr	s15, [r3]
 8002d40:	eeb0 2a67 	vmov.f32	s4, s15
 8002d44:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d48:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002db0 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002d4c:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d50:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002d54:	4817      	ldr	r0, [pc, #92]	@ (8002db4 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002d56:	f000 f841 	bl	8002ddc <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 8002d5a:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002da4 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d5e:	4816      	ldr	r0, [pc, #88]	@ (8002db8 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002d60:	f7ff ff15 	bl	8002b8e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 8002d64:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8002da4 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d68:	4814      	ldr	r0, [pc, #80]	@ (8002dbc <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002d6a:	f7ff ff10 	bl	8002b8e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.01}; // 1 is very slow
 8002d6e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002dc0 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8002d72:	4814      	ldr	r0, [pc, #80]	@ (8002dc4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002d74:	f7ff ff0b 	bl	8002b8e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002d78:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002d94 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d7c:	4812      	ldr	r0, [pc, #72]	@ (8002dc8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002d7e:	f7ff ff06 	bl	8002b8e <_ZN13LowPassFilterC1Ef>
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200000b0 	.word	0x200000b0
 8002d90:	447a0000 	.word	0x447a0000
 8002d94:	00000000 	.word	0x00000000
 8002d98:	2000017c 	.word	0x2000017c
 8002d9c:	200001a0 	.word	0x200001a0
 8002da0:	200000b4 	.word	0x200000b4
 8002da4:	3dcccccd 	.word	0x3dcccccd
 8002da8:	200001c4 	.word	0x200001c4
 8002dac:	200000b8 	.word	0x200000b8
 8002db0:	3e4ccccd 	.word	0x3e4ccccd
 8002db4:	200001e8 	.word	0x200001e8
 8002db8:	2000020c 	.word	0x2000020c
 8002dbc:	20000218 	.word	0x20000218
 8002dc0:	3c23d70a 	.word	0x3c23d70a
 8002dc4:	20000224 	.word	0x20000224
 8002dc8:	20000230 	.word	0x20000230

08002dcc <_GLOBAL__sub_I_CurrentSense_resistance>:
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002dd4:	2001      	movs	r0, #1
 8002dd6:	f7ff ff73 	bl	8002cc0 <_Z41__static_initialization_and_destruction_0ii>
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6178      	str	r0, [r7, #20]
 8002de4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002de8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002dec:	ed87 1a02 	vstr	s2, [r7, #8]
 8002df0:	edc7 1a01 	vstr	s3, [r7, #4]
 8002df4:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	601a      	str	r2, [r3, #0]
    , I(I)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	68fa      	ldr	r2, [r7, #12]
 8002e02:	605a      	str	r2, [r3, #4]
    , D(D)
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	683a      	ldr	r2, [r7, #0]
 8002e14:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002e2e:	f000 f91d 	bl	800306c <_ZN13PIDController6microsEv>
 8002e32:	4602      	mov	r2, r0
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	621a      	str	r2, [r3, #32]
}
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08a      	sub	sp, #40	@ 0x28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002e50:	f000 f90c 	bl	800306c <_ZN13PIDController6microsEv>
 8002e54:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a1b      	ldr	r3, [r3, #32]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003064 <_ZN13PIDControllerclEf+0x220>
 8002e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e6e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002e72:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7e:	d908      	bls.n	8002e92 <_ZN13PIDControllerclEf+0x4e>
 8002e80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e84:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e88:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e90:	dd01      	ble.n	8002e96 <_ZN13PIDControllerclEf+0x52>
 8002e92:	4b75      	ldr	r3, [pc, #468]	@ (8003068 <_ZN13PIDControllerclEf+0x224>)
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	edd3 7a00 	vldr	s15, [r3]
 8002e9c:	ed97 7a00 	vldr	s14, [r7]
 8002ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea4:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	ed93 7a07 	vldr	s14, [r3, #28]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	edd3 6a01 	vldr	s13, [r3, #4]
 8002eb4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002eb8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ebc:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002ec0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	ed93 6a05 	vldr	s12, [r3, #20]
 8002eca:	edd7 7a00 	vldr	s15, [r7]
 8002ece:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002ed2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee4:	eef1 7a67 	vneg.f32	s15, s15
 8002ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	d505      	bpl.n	8002f02 <_ZN13PIDControllerclEf+0xbe>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002efc:	eef1 7a67 	vneg.f32	s15, s15
 8002f00:	e00f      	b.n	8002f22 <_ZN13PIDControllerclEf+0xde>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f08:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f14:	dd03      	ble.n	8002f1e <_ZN13PIDControllerclEf+0xda>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f1c:	e001      	b.n	8002f22 <_ZN13PIDControllerclEf+0xde>
 8002f1e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f22:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f32:	edd7 6a00 	vldr	s13, [r7]
 8002f36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f3a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f3e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f46:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002f4a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f4e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f56:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f5e:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f68:	eef1 7a67 	vneg.f32	s15, s15
 8002f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	d505      	bpl.n	8002f86 <_ZN13PIDControllerclEf+0x142>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f80:	eef1 7a67 	vneg.f32	s15, s15
 8002f84:	e00f      	b.n	8002fa6 <_ZN13PIDControllerclEf+0x162>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f8c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	dd03      	ble.n	8002fa2 <_ZN13PIDControllerclEf+0x15e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002fa0:	e001      	b.n	8002fa6 <_ZN13PIDControllerclEf+0x162>
 8002fa2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fa6:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fb8:	dd3f      	ble.n	800303a <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fc0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fc4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002fc8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002fcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fd0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fda:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe6:	dd0e      	ble.n	8003006 <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	ed93 7a06 	vldr	s14, [r3, #24]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002ff4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ff8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003000:	edc7 7a08 	vstr	s15, [r7, #32]
 8003004:	e019      	b.n	800303a <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	edd3 7a03 	vldr	s15, [r3, #12]
 800300c:	eef1 7a67 	vneg.f32	s15, s15
 8003010:	ed97 7a03 	vldr	s14, [r7, #12]
 8003014:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d50d      	bpl.n	800303a <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	ed93 7a06 	vldr	s14, [r3, #24]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	edd3 6a03 	vldr	s13, [r3, #12]
 800302a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800302e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003036:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a3a      	ldr	r2, [r7, #32]
 8003044:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	621a      	str	r2, [r3, #32]
    return output;
 8003052:	6a3b      	ldr	r3, [r7, #32]
 8003054:	ee07 3a90 	vmov	s15, r3
}
 8003058:	eeb0 0a67 	vmov.f32	s0, s15
 800305c:	3728      	adds	r7, #40	@ 0x28
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	358637bd 	.word	0x358637bd
 8003068:	3a83126f 	.word	0x3a83126f

0800306c <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003070:	4b07      	ldr	r3, [pc, #28]	@ (8003090 <_ZN13PIDController6microsEv+0x24>)
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	4b07      	ldr	r3, [pc, #28]	@ (8003094 <_ZN13PIDController6microsEv+0x28>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4907      	ldr	r1, [pc, #28]	@ (8003098 <_ZN13PIDController6microsEv+0x2c>)
 800307a:	fba1 1303 	umull	r1, r3, r1, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003084:	4618      	mov	r0, r3
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e0001000 	.word	0xe0001000
 8003094:	200000f4 	.word	0x200000f4
 8003098:	431bde83 	.word	0x431bde83

0800309c <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80030a6:	ed97 0a01 	vldr	s0, [r7, #4]
 80030aa:	f009 f89f 	bl	800c1ec <floorf>
 80030ae:	eef0 7a40 	vmov.f32	s15, s0
 80030b2:	eeb0 0a67 	vmov.f32	s0, s15
 80030b6:	3708      	adds	r7, #8
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <_ZN11pwm_driversC1Ev+0x1c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	0800d45c 	.word	0x0800d45c

080030dc <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	4a04      	ldr	r2, [pc, #16]	@ (80030f8 <_ZN11pwm_driversD1Ev+0x1c>)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	0800d45c 	.word	0x0800d45c

080030fc <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
}
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f7ff ffe9 	bl	80030dc <_ZN11pwm_driversD1Ev>
 800310a:	2110      	movs	r1, #16
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f008 ff0f 	bl	800bf30 <_ZdlPvj>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <_ZN11pwm_drivers10initDriverEv>:

void pwm_drivers::initDriver()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8003124:	2100      	movs	r1, #0
 8003126:	4807      	ldr	r0, [pc, #28]	@ (8003144 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003128:	f007 fc68 	bl	800a9fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 800312c:	2104      	movs	r1, #4
 800312e:	4805      	ldr	r0, [pc, #20]	@ (8003144 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003130:	f007 fc64 	bl	800a9fc <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8003134:	2108      	movs	r1, #8
 8003136:	4803      	ldr	r0, [pc, #12]	@ (8003144 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003138:	f007 fc60 	bl	800a9fc <HAL_TIM_PWM_Start>
}
 800313c:	bf00      	nop
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	2000076c 	.word	0x2000076c

08003148 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	ed87 0a02 	vstr	s0, [r7, #8]
 8003154:	edc7 0a01 	vstr	s1, [r7, #4]
 8003158:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 800315c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003160:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80031b8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003164:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003168:	4b14      	ldr	r3, [pc, #80]	@ (80031bc <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003170:	ee17 2a90 	vmov	r2, s15
 8003174:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8003176:	edd7 7a01 	vldr	s15, [r7, #4]
 800317a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 80031b8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 800317e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003182:	4b0e      	ldr	r3, [pc, #56]	@ (80031bc <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318a:	ee17 2a90 	vmov	r2, s15
 800318e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8003190:	edd7 7a00 	vldr	s15, [r7]
 8003194:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80031b8 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800319c:	4b07      	ldr	r3, [pc, #28]	@ (80031bc <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a4:	ee17 2a90 	vmov	r2, s15
 80031a8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80031aa:	bf00      	nop
 80031ac:	3714      	adds	r7, #20
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	45610000 	.word	0x45610000
 80031bc:	2000076c 	.word	0x2000076c

080031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b090      	sub	sp, #64	@ 0x40
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80031d0:	ed87 1a00 	vstr	s2, [r7]


// ===========================================================================[Old]
	float Uout;
	// a bit of optitmisation
	if (Ud)
 80031d4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031d8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031e0:	d029      	beq.n	8003236 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 80031e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031e6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	eeb0 0a67 	vmov.f32	s0, s15
 80031fa:	f7ff fc93 	bl	8002b24 <_Z11_sqrtApproxf>
 80031fe:	eef0 6a40 	vmov.f32	s13, s0
 8003202:	4be8      	ldr	r3, [pc, #928]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003204:	ed93 7a00 	vldr	s14, [r3]
 8003208:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800320c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _atan2(Uq, Ud));
 8003210:	edd7 0a01 	vldr	s1, [r7, #4]
 8003214:	ed97 0a02 	vldr	s0, [r7, #8]
 8003218:	f7ff fbb4 	bl	8002984 <_Z6_atan2ff>
 800321c:	eeb0 7a40 	vmov.f32	s14, s0
 8003220:	edd7 7a00 	vldr	s15, [r7]
 8003224:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003228:	eeb0 0a67 	vmov.f32	s0, s15
 800322c:	f7ff fc40 	bl	8002ab0 <_Z15_normalizeAnglef>
 8003230:	ed87 0a00 	vstr	s0, [r7]
 8003234:	e014      	b.n	8003260 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 8003236:	4bdb      	ldr	r3, [pc, #876]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003238:	ed93 7a00 	vldr	s14, [r3]
 800323c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003244:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8003248:	edd7 7a00 	vldr	s15, [r7]
 800324c:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 80035a8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8003250:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003254:	eeb0 0a67 	vmov.f32	s0, s15
 8003258:	f7ff fc2a 	bl	8002ab0 <_Z15_normalizeAnglef>
 800325c:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8003260:	edd7 7a00 	vldr	s15, [r7]
 8003264:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 80035ac <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003268:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800326c:	eeb0 0a47 	vmov.f32	s0, s14
 8003270:	f7ff ff14 	bl	800309c <_ZSt5floorf>
 8003274:	eef0 7a40 	vmov.f32	s15, s0
 8003278:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800327c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003280:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003284:	ee17 3a90 	vmov	r3, s15
 8003288:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 800328a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003294:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 80035ac <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003298:	ee27 7a87 	vmul.f32	s14, s15, s14
 800329c:	edd7 7a00 	vldr	s15, [r7]
 80032a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032a4:	eeb0 0a67 	vmov.f32	s0, s15
 80032a8:	f7ff faaa 	bl	8002800 <_Z4_sinf>
 80032ac:	eef0 7a40 	vmov.f32	s15, s0
 80032b0:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 80035b0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80032b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032b8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 80032c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032d6:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 80035ac <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 80032da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032de:	ed97 7a00 	vldr	s14, [r7]
 80032e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032e6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ea:	f7ff fa89 	bl	8002800 <_Z4_sinf>
 80032ee:	eef0 7a40 	vmov.f32	s15, s0
 80032f2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 80035b0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80032f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032fa:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 8003306:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800330a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800330e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003312:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331a:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 800331e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003320:	3b01      	subs	r3, #1
 8003322:	2b05      	cmp	r3, #5
 8003324:	f200 80ee 	bhi.w	8003504 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 8003328:	a201      	add	r2, pc, #4	@ (adr r2, 8003330 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 800332a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332e:	bf00      	nop
 8003330:	08003349 	.word	0x08003349
 8003334:	08003393 	.word	0x08003393
 8003338:	080033dd 	.word	0x080033dd
 800333c:	08003427 	.word	0x08003427
 8003340:	08003471 	.word	0x08003471
 8003344:	080034bb 	.word	0x080034bb
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8003348:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800334c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003354:	edd7 6a08 	vldr	s13, [r7, #32]
 8003358:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800335c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003364:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8003368:	ed97 7a08 	vldr	s14, [r7, #32]
 800336c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003370:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003374:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8003380:	ed97 7a08 	vldr	s14, [r7, #32]
 8003384:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003388:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800338c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003390:	e0c1      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8003392:	ed97 7a08 	vldr	s14, [r7, #32]
 8003396:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800339a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800339e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 80033aa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033ae:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033b6:	edd7 6a08 	vldr	s13, [r7, #32]
 80033ba:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80033be:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033c6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 80033ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80033ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80033da:	e09c      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 80033dc:	ed97 7a08 	vldr	s14, [r7, #32]
 80033e0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 80033ec:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033f0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	edd7 6a08 	vldr	s13, [r7, #32]
 80033fc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003400:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003404:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003408:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 800340c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003410:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003414:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003418:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800341c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003420:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003424:	e077      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 8003426:	ed97 7a08 	vldr	s14, [r7, #32]
 800342a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800342e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003432:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 8003436:	ed97 7a08 	vldr	s14, [r7, #32]
 800343a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800343e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003442:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 800344e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003452:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003456:	ee37 7a27 	vadd.f32	s14, s14, s15
 800345a:	edd7 6a08 	vldr	s13, [r7, #32]
 800345e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003462:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003466:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800346e:	e052      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 8003470:	ed97 7a08 	vldr	s14, [r7, #32]
 8003474:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003478:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800347c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003480:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003484:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8003488:	ed97 7a08 	vldr	s14, [r7, #32]
 800348c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003490:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003494:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8003498:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800349c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	edd7 6a08 	vldr	s13, [r7, #32]
 80034a8:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80034ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b4:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80034b8:	e02d      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 80034ba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034be:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034c2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034c6:	edd7 6a08 	vldr	s13, [r7, #32]
 80034ca:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80034ce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 80034da:	ed97 7a08 	vldr	s14, [r7, #32]
 80034de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034e6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 80034ea:	ed97 7a08 	vldr	s14, [r7, #32]
 80034ee:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034f6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034fe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003502:	e008      	b.n	8003516 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 8003516:	4b23      	ldr	r3, [pc, #140]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003518:	ed93 7a00 	vldr	s14, [r3]
 800351c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 800352a:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 800352c:	ed93 7a00 	vldr	s14, [r3]
 8003530:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 800353e:	4b19      	ldr	r3, [pc, #100]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003540:	ed93 7a00 	vldr	s14, [r3]
 8003544:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	edd3 7a01 	vldr	s15, [r3, #4]
 8003558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800355c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003560:	d502      	bpl.n	8003568 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 8003562:	f04f 0300 	mov.w	r3, #0
 8003566:	e00f      	b.n	8003588 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	ed93 7a01 	vldr	s14, [r3, #4]
 800356e:	4b0d      	ldr	r3, [pc, #52]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003570:	edd3 7a00 	vldr	s15, [r3]
 8003574:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357c:	dd02      	ble.n	8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 800357e:	4b09      	ldr	r3, [pc, #36]	@ (80035a4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e001      	b.n	8003588 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003592:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800359a:	d50b      	bpl.n	80035b4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e018      	b.n	80035d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80035a2:	bf00      	nop
 80035a4:	200000b0 	.word	0x200000b0
 80035a8:	3fc90fdb 	.word	0x3fc90fdb
 80035ac:	3f860a92 	.word	0x3f860a92
 80035b0:	3fddb3d7 	.word	0x3fddb3d7
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	ed93 7a02 	vldr	s14, [r3, #8]
 80035ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003734 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035bc:	edd3 7a00 	vldr	s15, [r3]
 80035c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c8:	dd02      	ble.n	80035d0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 80035ca:	4b5a      	ldr	r3, [pc, #360]	@ (8003734 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	e001      	b.n	80035d4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	edd3 7a03 	vldr	s15, [r3, #12]
 80035de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e6:	d502      	bpl.n	80035ee <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 80035e8:	f04f 0300 	mov.w	r3, #0
 80035ec:	e00f      	b.n	800360e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	ed93 7a03 	vldr	s14, [r3, #12]
 80035f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003734 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035f6:	edd3 7a00 	vldr	s15, [r3]
 80035fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003602:	dd02      	ble.n	800360a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 8003604:	4b4b      	ldr	r3, [pc, #300]	@ (8003734 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	e001      	b.n	800360e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	edd3 6a01 	vldr	s13, [r3, #4]
 8003618:	4b47      	ldr	r3, [pc, #284]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800361a:	ed93 7a00 	vldr	s14, [r3]
 800361e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003622:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	d502      	bpl.n	8003632 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 800362c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800373c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003630:	e019      	b.n	8003666 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	edd3 6a01 	vldr	s13, [r3, #4]
 8003638:	4b3f      	ldr	r3, [pc, #252]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800363a:	ed93 7a00 	vldr	s14, [r3]
 800363e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003642:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	dd02      	ble.n	8003656 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 8003650:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003654:	e007      	b.n	8003666 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	edd3 6a01 	vldr	s13, [r3, #4]
 800365c:	4b36      	ldr	r3, [pc, #216]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800365e:	ed93 7a00 	vldr	s14, [r3]
 8003662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003666:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003670:	4b31      	ldr	r3, [pc, #196]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800367e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003682:	d502      	bpl.n	800368a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 8003684:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800373c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003688:	e019      	b.n	80036be <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003690:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800369e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036a6:	dd02      	ble.n	80036ae <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 80036a8:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80036ac:	e007      	b.n	80036be <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	edd3 6a02 	vldr	s13, [r3, #8]
 80036b4:	4b20      	ldr	r3, [pc, #128]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036b6:	ed93 7a00 	vldr	s14, [r3]
 80036ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036be:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80036c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036ca:	ed93 7a00 	vldr	s14, [r3]
 80036ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	d502      	bpl.n	80036e2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 80036dc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800373c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80036e0:	e019      	b.n	8003716 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	edd3 6a03 	vldr	s13, [r3, #12]
 80036e8:	4b13      	ldr	r3, [pc, #76]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036ea:	ed93 7a00 	vldr	s14, [r3]
 80036ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80036f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fe:	dd02      	ble.n	8003706 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 8003700:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003740 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003704:	e007      	b.n	8003716 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	edd3 6a03 	vldr	s13, [r3, #12]
 800370c:	4b0a      	ldr	r3, [pc, #40]	@ (8003738 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800370e:	ed93 7a00 	vldr	s14, [r3]
 8003712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003716:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 800371a:	ed97 1a05 	vldr	s2, [r7, #20]
 800371e:	edd7 0a06 	vldr	s1, [r7, #24]
 8003722:	ed97 0a07 	vldr	s0, [r7, #28]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f7ff fd0e 	bl	8003148 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 800372c:	bf00      	nop
 800372e:	3740      	adds	r7, #64	@ 0x40
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200000b0 	.word	0x200000b0
 8003738:	200000ac 	.word	0x200000ac
 800373c:	00000000 	.word	0x00000000
 8003740:	3f70a3d7 	.word	0x3f70a3d7

08003744 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	ed87 0a01 	vstr	s0, [r7, #4]
 800374e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003752:	eef0 7ae7 	vabs.f32	s15, s15
 8003756:	eeb0 0a67 	vmov.f32	s0, s15
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	4a0f      	ldr	r2, [pc, #60]	@ (80037ac <_ZN9simpleFOCC1Ev+0x48>)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3314      	adds	r3, #20
 8003776:	4618      	mov	r0, r3
 8003778:	f7fd fa1a 	bl	8000bb0 <_ZN17AS5048A_interfaceC1Ev>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	33c0      	adds	r3, #192	@ 0xc0
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd fd69 	bl	8001258 <_ZN12CurrentSenseC1Ev>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fc95 	bl	80030bc <_ZN11pwm_driversC1Ev>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a06      	ldr	r2, [pc, #24]	@ (80037b0 <_ZN9simpleFOCC1Ev+0x4c>)
 8003796:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a04      	ldr	r2, [pc, #16]	@ (80037b0 <_ZN9simpleFOCC1Ev+0x4c>)
 800379e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
{

}
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	0800d46c 	.word	0x0800d46c
 80037b0:	40400000 	.word	0x40400000

080037b4 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	4a0b      	ldr	r2, [pc, #44]	@ (80037ec <_ZN9simpleFOCD1Ev+0x38>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fc87 	bl	80030dc <_ZN11pwm_driversD1Ev>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	33c0      	adds	r3, #192	@ 0xc0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7fd fdf0 	bl	80013b8 <_ZN12CurrentSenseD1Ev>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3314      	adds	r3, #20
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fd fa57 	bl	8000c90 <_ZN17AS5048A_interfaceD1Ev>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4618      	mov	r0, r3
 80037e6:	3708      	adds	r7, #8
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	0800d46c 	.word	0x0800d46c

080037f0 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
}
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff ffdb 	bl	80037b4 <_ZN9simpleFOCD1Ev>
 80037fe:	f44f 710e 	mov.w	r1, #568	@ 0x238
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f008 fb94 	bl	800bf30 <_ZdlPvj>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4618      	mov	r0, r3
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
	driver.initDriver();
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff fc7a 	bl	800311c <_ZN11pwm_drivers10initDriverEv>
	Encoder.MagneticSensorSPI_init();
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3314      	adds	r3, #20
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fa53 	bl	8000cd8 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	3314      	adds	r3, #20
 8003836:	4618      	mov	r0, r3
 8003838:	f7fd fa8a 	bl	8000d50 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	33c0      	adds	r3, #192	@ 0xc0
 8003840:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <_ZN9simpleFOC11initSensorsEv+0x58>)
 8003842:	edd2 7a00 	vldr	s15, [r2]
 8003846:	4a0a      	ldr	r2, [pc, #40]	@ (8003870 <_ZN9simpleFOC11initSensorsEv+0x5c>)
 8003848:	ed92 7a00 	vldr	s14, [r2]
 800384c:	eef0 0a47 	vmov.f32	s1, s14
 8003850:	eeb0 0a67 	vmov.f32	s0, s15
 8003854:	4618      	mov	r0, r3
 8003856:	f7fd fdd5 	bl	8001404 <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	33c0      	adds	r3, #192	@ 0xc0
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd fdfa 	bl	8001458 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 8003864:	bf00      	nop
 8003866:	3708      	adds	r7, #8
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	20000098 	.word	0x20000098
 8003870:	2000009c 	.word	0x2000009c

08003874 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
	...

0800388c <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8003894:	4b29      	ldr	r3, [pc, #164]	@ (800393c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 800389a:	4b29      	ldr	r3, [pc, #164]	@ (8003940 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 80038a6:	4a25      	ldr	r2, [pc, #148]	@ (800393c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80038a8:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 80038b0:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80038b2:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 80038bc:	e009      	b.n	80038d2 <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 80038be:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003944 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 faf8 	bl	8003eb8 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3314      	adds	r3, #20
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fd fb2d 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7ff ffce 	bl	8003874 <_ZN9simpleFOC11needsSearchEv>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00b      	beq.n	80038f6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038e4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003948 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80038e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038f0:	d501      	bpl.n	80038f6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80038f2:	2301      	movs	r3, #1
 80038f4:	e000      	b.n	80038f8 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 80038f6:	2300      	movs	r3, #0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e0      	bne.n	80038be <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003902:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800394c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 8003906:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800394c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800390a:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800394c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fc56 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 8003914:	4a09      	ldr	r2, [pc, #36]	@ (800393c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 800391a:	4a09      	ldr	r2, [pc, #36]	@ (8003940 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ffa7 	bl	8003874 <_ZN9simpleFOC11needsSearchEv>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
}
 8003932:	4618      	mov	r0, r3
 8003934:	3710      	adds	r7, #16
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	200000b8 	.word	0x200000b8
 8003940:	200000b0 	.word	0x200000b0
 8003944:	4116cbe4 	.word	0x4116cbe4
 8003948:	40c90fdb 	.word	0x40c90fdb
 800394c:	00000000 	.word	0x00000000

08003950 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8003950:	b580      	push	{r7, lr}
 8003952:	ed2d 8b02 	vpush	{d8}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 800395c:	2301      	movs	r3, #1
 800395e:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396c:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8003c48 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003970:	eef4 7a47 	vcmp.f32	s15, s14
 8003974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003978:	f040 810a 	bne.w	8003b90 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ff79 	bl	8003874 <_ZN9simpleFOC11needsSearchEv>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	bf14      	ite	ne
 8003988:	2301      	movne	r3, #1
 800398a:	2300      	moveq	r3, #0
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff7a 	bl	800388c <_ZN9simpleFOC18absoluteZeroSearchEv>
 8003998:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399c:	2b00      	cmp	r3, #0
 800399e:	d101      	bne.n	80039a4 <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 80039a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a2:	e146      	b.n	8003c32 <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 80039a4:	2300      	movs	r3, #0
 80039a6:	623b      	str	r3, [r7, #32]
 80039a8:	e037      	b.n	8003a1a <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	ee07 3a90 	vmov	s15, r3
 80039b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039b4:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003c4c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80039b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80039bc:	ee17 0a90 	vmov	r0, s15
 80039c0:	f7fc fd8e 	bl	80004e0 <__aeabi_f2d>
 80039c4:	f04f 0200 	mov.w	r2, #0
 80039c8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c50 <_ZN9simpleFOC11alignSensorEv+0x300>)
 80039ca:	f7fc ff0b 	bl	80007e4 <__aeabi_ddiv>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4610      	mov	r0, r2
 80039d4:	4619      	mov	r1, r3
 80039d6:	a39a      	add	r3, pc, #616	@ (adr r3, 8003c40 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f7fc fc22 	bl	8000224 <__adddf3>
 80039e0:	4602      	mov	r2, r0
 80039e2:	460b      	mov	r3, r1
 80039e4:	4610      	mov	r0, r2
 80039e6:	4619      	mov	r1, r3
 80039e8:	f7fd f882 	bl	8000af0 <__aeabi_d2f>
 80039ec:	4603      	mov	r3, r0
 80039ee:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	edd3 7a8b 	vldr	s15, [r3, #556]	@ 0x22c
 80039fc:	ed97 1a02 	vldr	s2, [r7, #8]
 8003a00:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a04:	eeb0 0a67 	vmov.f32	s0, s15
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7ff fbd9 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8003a0e:	2002      	movs	r0, #2
 8003a10:	f001 ff1a 	bl	8005848 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	3301      	adds	r3, #1
 8003a18:	623b      	str	r3, [r7, #32]
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a20:	ddc3      	ble.n	80039aa <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	3314      	adds	r3, #20
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd faf0 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fd fa7b 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003a36:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8003a3a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e037      	b.n	8003ab2 <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	ee07 3a90 	vmov	s15, r3
 8003a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a4c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003c4c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003a50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a54:	ee17 0a90 	vmov	r0, s15
 8003a58:	f7fc fd42 	bl	80004e0 <__aeabi_f2d>
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	4b7b      	ldr	r3, [pc, #492]	@ (8003c50 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8003a62:	f7fc febf 	bl	80007e4 <__aeabi_ddiv>
 8003a66:	4602      	mov	r2, r0
 8003a68:	460b      	mov	r3, r1
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	a374      	add	r3, pc, #464	@ (adr r3, 8003c40 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a74:	f7fc fbd6 	bl	8000224 <__adddf3>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	4619      	mov	r1, r3
 8003a80:	f7fd f836 	bl	8000af0 <__aeabi_d2f>
 8003a84:	4603      	mov	r3, r0
 8003a86:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	edd3 7a8b 	vldr	s15, [r3, #556]	@ 0x22c
 8003a94:	ed97 1a03 	vldr	s2, [r7, #12]
 8003a98:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a9c:	eeb0 0a67 	vmov.f32	s0, s15
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7ff fb8d 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8003aa6:	2002      	movs	r0, #2
 8003aa8:	f001 fece 	bl	8005848 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	dac4      	bge.n	8003a42 <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	3314      	adds	r3, #20
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fd faa5 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	3314      	adds	r3, #20
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fd fa30 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003acc:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003ad6:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003ada:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003ade:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f7ff fb6c 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003ae8:	20c8      	movs	r0, #200	@ 0xc8
 8003aea:	f001 fead 	bl	8005848 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8003aee:	ed97 7a06 	vldr	s14, [r7, #24]
 8003af2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003af6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afe:	d101      	bne.n	8003b04 <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 8003b00:	2300      	movs	r3, #0
 8003b02:	e096      	b.n	8003c32 <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 8003b04:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	d504      	bpl.n	8003b20 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f04f 32ff 	mov.w	r2, #4294967295
 8003b1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b1e:	e002      	b.n	8003b26 <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	65da      	str	r2, [r3, #92]	@ 0x5c
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8003b26:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b2a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b32:	eeb0 0a67 	vmov.f32	s0, s15
 8003b36:	f7ff fe05 	bl	8003744 <_ZSt4fabsf>
 8003b3a:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8003b3e:	4b46      	ldr	r3, [pc, #280]	@ (8003c58 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b4a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b52:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003c4c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003b56:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5e:	f7ff fdf1 	bl	8003744 <_ZSt4fabsf>
 8003b62:	eef0 7a40 	vmov.f32	s15, s0
 8003b66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	bfcc      	ite	gt
 8003b74:	2301      	movgt	r3, #1
 8003b76:	2300      	movle	r3, #0
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d008      	beq.n	8003b90 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8003b7e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003c4c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003b82:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	edc3 7a8a 	vstr	s15, [r3, #552]	@ 0x228
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 8003b96:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003c48 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003b9a:	eef4 7a47 	vcmp.f32	s15, s14
 8003b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ba2:	d145      	bne.n	8003c30 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	edd3 7a8b 	vldr	s15, [r3, #556]	@ 0x22c
 8003bb0:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8003c5c <_ZN9simpleFOC11alignSensorEv+0x30c>
 8003bb4:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003bb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f7ff faff 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 8003bc2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003bc6:	f001 fe3f 	bl	8005848 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3314      	adds	r3, #20
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fd f9a6 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003be0:	eef0 7a40 	vmov.f32	s15, s0
 8003be4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003be8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c58 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4618      	mov	r0, r3
 8003bee:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf2:	f7fe ff81 	bl	8002af8 <_Z16_electricalAnglefi>
 8003bf6:	eef0 7a40 	vmov.f32	s15, s0
 8003bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bfe:	f7fe ff57 	bl	8002ab0 <_Z15_normalizeAnglef>
 8003c02:	eef0 7a40 	vmov.f32	s15, s0
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		HAL_Delay(20);
 8003c0c:	2014      	movs	r0, #20
 8003c0e:	f001 fe1b 	bl	8005848 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f503 73f8 	add.w	r3, r3, #496	@ 0x1f0
 8003c18:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003c1c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003c20:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003c54 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7ff facb 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003c2a:	20c8      	movs	r0, #200	@ 0xc8
 8003c2c:	f001 fe0c 	bl	8005848 <HAL_Delay>
	}
	return exit_flag;
 8003c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3728      	adds	r7, #40	@ 0x28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	ecbd 8b02 	vpop	{d8}
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	80000000 	.word	0x80000000
 8003c44:	4012d97c 	.word	0x4012d97c
 8003c48:	c640e400 	.word	0xc640e400
 8003c4c:	40c90fdb 	.word	0x40c90fdb
 8003c50:	407f4000 	.word	0x407f4000
 8003c54:	00000000 	.word	0x00000000
 8003c58:	200000a8 	.word	0x200000a8
 8003c5c:	4096cbe4 	.word	0x4096cbe4

08003c60 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8003c70:	2301      	movs	r3, #1
 8003c72:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8003c74:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c78:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003ccc <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8003c7c:	eef4 7a47 	vcmp.f32	s15, s14
 8003c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c84:	d006      	beq.n	8003c94 <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	659a      	str	r2, [r3, #88]	@ 0x58
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8003c8c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f7ff fe5b 	bl	8003950 <_ZN9simpleFOC11alignSensorEv>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ca2:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3314      	adds	r3, #20
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fd f93f 	bl	8000f2c <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003cae:	eef0 7a40 	vmov.f32	s15, s0
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8003cb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003cbc:	f001 fdc4 	bl	8005848 <HAL_Delay>

	return exit_flag;
 8003cc0:	697b      	ldr	r3, [r7, #20]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3718      	adds	r7, #24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	c640e400 	.word	0xc640e400

08003cd0 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8003cd0:	b590      	push	{r4, r7, lr}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fd f995 	bl	800100c <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3314      	adds	r3, #20
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7fd fa5e 	bl	80011a8 <_ZN17AS5048A_interface13getShaftAngleEv>
 8003cec:	eef0 7a40 	vmov.f32	s15, s0
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3314      	adds	r3, #20
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd f942 	bl	8000f84 <_ZN17AS5048A_interface15electricalAngleEv>
 8003d00:	eef0 7a40 	vmov.f32	s15, s0
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	edd3 7a81 	vldr	s15, [r3, #516]	@ 0x204
 8003d16:	687c      	ldr	r4, [r7, #4]
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	f7fd fc9b 	bl	8001658 <_ZN12CurrentSense14getFOCCurrentsEf>
 8003d22:	eeb0 7a40 	vmov.f32	s14, s0
 8003d26:	eef0 7a60 	vmov.f32	s15, s1
 8003d2a:	ed84 7a87 	vstr	s14, [r4, #540]	@ 0x21c
 8003d2e:	edc4 7a88 	vstr	s15, [r4, #544]	@ 0x220

	current_LPF.q = LPF_current_q(current.q);   // filter values
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	edd3 7a88 	vldr	s15, [r3, #544]	@ 0x220
 8003d38:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3c:	4828      	ldr	r0, [pc, #160]	@ (8003de0 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8003d3e:	f7fe ff3d 	bl	8002bbc <_ZN13LowPassFilterclEf>
 8003d42:	eef0 7a40 	vmov.f32	s15, s0
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	edc3 7a04 	vstr	s15, [r3, #16]
	current_LPF.d = LPF_current_d(current.d);   // filter values
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003d52:	eeb0 0a67 	vmov.f32	s0, s15
 8003d56:	4823      	ldr	r0, [pc, #140]	@ (8003de4 <_ZN9simpleFOC7loopFOCEv+0x114>)
 8003d58:	f7fe ff30 	bl	8002bbc <_ZN13LowPassFilterclEf>
 8003d5c:	eef0 7a40 	vmov.f32	s15, s0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	edc3 7a03 	vstr	s15, [r3, #12]

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current_LPF.q);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	ed93 7a82 	vldr	s14, [r3, #520]	@ 0x208
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d76:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7a:	481b      	ldr	r0, [pc, #108]	@ (8003de8 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8003d7c:	f7ff f862 	bl	8002e44 <_ZN13PIDControllerclEf>
 8003d80:	eef0 7a40 	vmov.f32	s15, s0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218
	voltage.d = PID_current_d(0 - current.d);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003d90:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003dec <_ZN9simpleFOC7loopFOCEv+0x11c>
 8003d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d98:	eeb0 0a67 	vmov.f32	s0, s15
 8003d9c:	4814      	ldr	r0, [pc, #80]	@ (8003df0 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8003d9e:	f7ff f851 	bl	8002e44 <_ZN13PIDControllerclEf>
 8003da2:	eef0 7a40 	vmov.f32	s15, s0
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 72f8 	add.w	r2, r3, #496	@ 0x1f0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	ed93 7a85 	vldr	s14, [r3, #532]	@ 0x214
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	edd3 6a81 	vldr	s13, [r3, #516]	@ 0x204
 8003dc4:	eeb0 1a66 	vmov.f32	s2, s13
 8003dc8:	eef0 0a47 	vmov.f32	s1, s14
 8003dcc:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd0:	4610      	mov	r0, r2
 8003dd2:	f7ff f9f5 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd90      	pop	{r4, r7, pc}
 8003dde:	bf00      	nop
 8003de0:	2000020c 	.word	0x2000020c
 8003de4:	20000218 	.word	0x20000218
 8003de8:	200001a0 	.word	0x200001a0
 8003dec:	00000000 	.word	0x00000000
 8003df0:	2000017c 	.word	0x2000017c

08003df4 <_ZN9simpleFOC10move_angleEffff>:
	voltage.q = current_sp*phase_resistance;
	voltage.d = 0;
}

void simpleFOC::move_angle(float new_target, float kp, float kd, float tau_ff)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6178      	str	r0, [r7, #20]
 8003dfc:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e00:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e04:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e08:	edc7 1a01 	vstr	s3, [r7, #4]
	// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated // checked
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	3314      	adds	r3, #20
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fd f9f1 	bl	80011f8 <_ZN17AS5048A_interface16getShaftVelocityEv>
 8003e16:	eef0 7a40 	vmov.f32	s15, s0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	edc3 7a02 	vstr	s15, [r3, #8]

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
 8003e20:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e24:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003ea8 <_ZN9simpleFOC10move_angleEffff+0xb4>
 8003e28:	eef4 7a47 	vcmp.f32	s15, s14
 8003e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e30:	d003      	beq.n	8003e3a <_ZN9simpleFOC10move_angleEffff+0x46>
		  target = new_target;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200


	PID_position.P = kp;
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8003eac <_ZN9simpleFOC10move_angleEffff+0xb8>)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6013      	str	r3, [r2, #0]
	PID_position.D = kd;
 8003e40:	4a1a      	ldr	r2, [pc, #104]	@ (8003eac <_ZN9simpleFOC10move_angleEffff+0xb8>)
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6093      	str	r3, [r2, #8]


	// angle set point
	shaft_angle_sp = target;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	// calculate velocity set point
	current_sp = PID_position(shaft_angle_sp - shaft_angle) + tau_ff;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e62:	eeb0 0a67 	vmov.f32	s0, s15
 8003e66:	4811      	ldr	r0, [pc, #68]	@ (8003eac <_ZN9simpleFOC10move_angleEffff+0xb8>)
 8003e68:	f7fe ffec 	bl	8002e44 <_ZN13PIDControllerclEf>
 8003e6c:	eeb0 7a40 	vmov.f32	s14, s0
 8003e70:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	edc3 7a82 	vstr	s15, [r3, #520]	@ 0x208

//	// calculate the torque command
//	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);

	voltage.q = current_sp*phase_resistance;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	ed93 7a82 	vldr	s14, [r3, #520]	@ 0x208
 8003e84:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb0 <_ZN9simpleFOC10move_angleEffff+0xbc>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	edc3 7a86 	vstr	s15, [r3, #536]	@ 0x218
	voltage.d = 0;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
}
 8003e9e:	bf00      	nop
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	c640e400 	.word	0xc640e400
 8003eac:	200001e8 	.word	0x200001e8
 8003eb0:	200000a0 	.word	0x200000a0
 8003eb4:	00000000 	.word	0x00000000

08003eb8 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	ed2d 8b02 	vpush	{d8}
 8003ebe:	b087      	sub	sp, #28
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8003ec8:	f000 f8e2 	bl	8004090 <_ZN9simpleFOC6microsEv>
 8003ecc:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1a9b      	subs	r3, r3, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fade 	bl	800049c <__aeabi_ui2d>
 8003ee0:	a369      	add	r3, pc, #420	@ (adr r3, 8004088 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc fb53 	bl	8000590 <__aeabi_dmul>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4610      	mov	r0, r2
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	f7fc fdfd 	bl	8000af0 <__aeabi_d2f>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003efa:	edd7 7a05 	vldr	s15, [r7, #20]
 8003efe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f06:	d908      	bls.n	8003f1a <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8003f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f0c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003f10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f18:	dd01      	ble.n	8003f1e <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8003f1a:	4b53      	ldr	r3, [pc, #332]	@ (8004068 <_ZN9simpleFOC13angleOpenloopEf+0x1b0>)
 8003f1c:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f24:	ed97 7a00 	vldr	s14, [r7]
 8003f28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8003f30:	f7fc fe2e 	bl	8000b90 <_ZSt3absf>
 8003f34:	eeb0 8a40 	vmov.f32	s16, s0
 8003f38:	4b4c      	ldr	r3, [pc, #304]	@ (800406c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8003f3a:	ed93 7a00 	vldr	s14, [r3]
 8003f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f46:	eeb0 0a67 	vmov.f32	s0, s15
 8003f4a:	f7fc fe21 	bl	8000b90 <_ZSt3absf>
 8003f4e:	eef0 7a40 	vmov.f32	s15, s0
 8003f52:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f5a:	bfcc      	ite	gt
 8003f5c:	2301      	movgt	r3, #1
 8003f5e:	2300      	movle	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d03b      	beq.n	8003fde <_ZN9simpleFOC13angleOpenloopEf+0x126>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f6c:	ed97 7a00 	vldr	s14, [r7]
 8003f70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f74:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7c:	d502      	bpl.n	8003f84 <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8003f7e:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003f82:	e010      	b.n	8003fa6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f8a:	ed97 7a00 	vldr	s14, [r7]
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	dd02      	ble.n	8003fa2 <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8003f9c:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003fa0:	e001      	b.n	8003fa6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003fa2:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 8004070 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>
 8003fa6:	4b31      	ldr	r3, [pc, #196]	@ (800406c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8003fa8:	edd3 7a00 	vldr	s15, [r3]
 8003fac:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb0:	f7fc fdee 	bl	8000b90 <_ZSt3absf>
 8003fb4:	eef0 7a40 	vmov.f32	s15, s0
 8003fb8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003fbc:	edd7 7a05 	vldr	s15, [r7, #20]
 8003fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8003fd4:	4b25      	ldr	r3, [pc, #148]	@ (800406c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e006      	b.n	8003fec <_ZN9simpleFOC13angleOpenloopEf+0x134>
	}
	else
	{
		shaft_angle = target_angle;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	609a      	str	r2, [r3, #8]
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003fec:	4b21      	ldr	r3, [pc, #132]	@ (8004074 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8003ff2:	4b21      	ldr	r3, [pc, #132]	@ (8004078 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>)
 8003ff4:	edd3 7a00 	vldr	s15, [r3]
 8003ff8:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800407c <_ZN9simpleFOC13angleOpenloopEf+0x1c4>
 8003ffc:	eef4 7a47 	vcmp.f32	s15, s14
 8004000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004004:	d009      	beq.n	800401a <_ZN9simpleFOC13angleOpenloopEf+0x162>
		Uq =  current_limit*phase_resistance;
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8004008:	ed93 7a00 	vldr	s14, [r3]
 800400c:	4b1a      	ldr	r3, [pc, #104]	@ (8004078 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>)
 800400e:	edd3 7a00 	vldr	s15, [r3]
 8004012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004016:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f503 74f8 	add.w	r4, r3, #496	@ 0x1f0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	edd3 7a01 	vldr	s15, [r3, #4]
 8004026:	4b17      	ldr	r3, [pc, #92]	@ (8004084 <_ZN9simpleFOC13angleOpenloopEf+0x1cc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	eeb0 0a67 	vmov.f32	s0, s15
 8004030:	f7fe fd62 	bl	8002af8 <_Z16_electricalAnglefi>
 8004034:	eef0 7a40 	vmov.f32	s15, s0
 8004038:	eeb0 1a67 	vmov.f32	s2, s15
 800403c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8004070 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>
 8004040:	ed97 0a04 	vldr	s0, [r7, #16]
 8004044:	4620      	mov	r0, r4
 8004046:	f7ff f8bb 	bl	80031c0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
	return Uq;
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	ee07 3a90 	vmov	s15, r3
}
 8004058:	eeb0 0a67 	vmov.f32	s0, s15
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	ecbd 8b02 	vpop	{d8}
 8004064:	bd90      	pop	{r4, r7, pc}
 8004066:	bf00      	nop
 8004068:	3a83126f 	.word	0x3a83126f
 800406c:	200000b8 	.word	0x200000b8
 8004070:	00000000 	.word	0x00000000
 8004074:	200000b0 	.word	0x200000b0
 8004078:	200000a0 	.word	0x200000a0
 800407c:	c640e400 	.word	0xc640e400
 8004080:	200000b4 	.word	0x200000b4
 8004084:	200000a8 	.word	0x200000a8
 8004088:	a0b5ed8d 	.word	0xa0b5ed8d
 800408c:	3eb0c6f7 	.word	0x3eb0c6f7

08004090 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004094:	4b07      	ldr	r3, [pc, #28]	@ (80040b4 <_ZN9simpleFOC6microsEv+0x24>)
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <_ZN9simpleFOC6microsEv+0x28>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4907      	ldr	r1, [pc, #28]	@ (80040bc <_ZN9simpleFOC6microsEv+0x2c>)
 800409e:	fba1 1303 	umull	r1, r3, r1, r3
 80040a2:	0c9b      	lsrs	r3, r3, #18
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e0001000 	.word	0xe0001000
 80040b8:	200000f4 	.word	0x200000f4
 80040bc:	431bde83 	.word	0x431bde83

080040c0 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 80040c4:	4b06      	ldr	r3, [pc, #24]	@ (80040e0 <MX_CORDIC_Init+0x20>)
 80040c6:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <MX_CORDIC_Init+0x24>)
 80040c8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80040ca:	4805      	ldr	r0, [pc, #20]	@ (80040e0 <MX_CORDIC_Init+0x20>)
 80040cc:	f003 f98e 	bl	80073ec <HAL_CORDIC_Init>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 80040d6:	f000 ff51 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 80040da:	bf00      	nop
 80040dc:	bd80      	pop	{r7, pc}
 80040de:	bf00      	nop
 80040e0:	20000620 	.word	0x20000620
 80040e4:	40020c00 	.word	0x40020c00

080040e8 <_ZL11limit_valuefff>:
void send_motor_states(float position_fb, float velocity_fb, float current_fb);


// Limit the value to be within min and max
static float limit_value(float value, float min_value, float max_value)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b084      	sub	sp, #16
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	ed87 0a03 	vstr	s0, [r7, #12]
 80040f2:	edc7 0a02 	vstr	s1, [r7, #8]
 80040f6:	ed87 1a01 	vstr	s2, [r7, #4]
	return std::max(min_value, std::min(value, max_value));
 80040fa:	1d3a      	adds	r2, r7, #4
 80040fc:	f107 030c 	add.w	r3, r7, #12
 8004100:	4611      	mov	r1, r2
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fc24 	bl	8002950 <_ZSt3minIfERKT_S2_S2_>
 8004108:	4602      	mov	r2, r0
 800410a:	f107 0308 	add.w	r3, r7, #8
 800410e:	4611      	mov	r1, r2
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fd23 	bl	8002b5c <_ZSt3maxIfERKT_S2_S2_>
 8004116:	4603      	mov	r3, r0
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	ee07 3a90 	vmov	s15, r3
}
 800411e:	eeb0 0a67 	vmov.f32	s0, s15
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <_ZL13float_to_uintfffi>:

static unsigned int float_to_uint(float x, float x_min, float x_max, int num_bits)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b088      	sub	sp, #32
 800412c:	af00      	add	r7, sp, #0
 800412e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004132:	edc7 0a02 	vstr	s1, [r7, #8]
 8004136:	ed87 1a01 	vstr	s2, [r7, #4]
 800413a:	6038      	str	r0, [r7, #0]
    float span = x_max - x_min;
 800413c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004140:	edd7 7a02 	vldr	s15, [r7, #8]
 8004144:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004148:	edc7 7a07 	vstr	s15, [r7, #28]
    float bitratio = float((1 << num_bits) / span);
 800414c:	2201      	movs	r2, #1
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	fa02 f303 	lsl.w	r3, r2, r3
 8004154:	ee07 3a90 	vmov	s15, r3
 8004158:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800415c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004164:	edc7 7a06 	vstr	s15, [r7, #24]

    // Clamp the value to ensure it is within range
    x = limit_value(x, x_min, x_max - (2.0f / bitratio));
 8004168:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800416c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004174:	ed97 7a01 	vldr	s14, [r7, #4]
 8004178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800417c:	eeb0 1a67 	vmov.f32	s2, s15
 8004180:	edd7 0a02 	vldr	s1, [r7, #8]
 8004184:	ed97 0a03 	vldr	s0, [r7, #12]
 8004188:	f7ff ffae 	bl	80040e8 <_ZL11limit_valuefff>
 800418c:	ed87 0a03 	vstr	s0, [r7, #12]

    // Perform the conversion
    unsigned int result = static_cast<unsigned int>((x - x_min) * bitratio);
 8004190:	ed97 7a03 	vldr	s14, [r7, #12]
 8004194:	edd7 7a02 	vldr	s15, [r7, #8]
 8004198:	ee37 7a67 	vsub.f32	s14, s14, s15
 800419c:	edd7 7a06 	vldr	s15, [r7, #24]
 80041a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a8:	ee17 3a90 	vmov	r3, s15
 80041ac:	617b      	str	r3, [r7, #20]

    // Ensure the result is within the unsigned integer range
    return limit_value(result, 0, static_cast<unsigned int>((x_max - x_min) * bitratio));
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	ee07 3a90 	vmov	s15, r3
 80041b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041b8:	ed97 7a01 	vldr	s14, [r7, #4]
 80041bc:	edd7 7a02 	vldr	s15, [r7, #8]
 80041c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80041c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d4:	eeb0 1a67 	vmov.f32	s2, s15
 80041d8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 80041f8 <_ZL13float_to_uintfffi+0xd0>
 80041dc:	eeb0 0a66 	vmov.f32	s0, s13
 80041e0:	f7ff ff82 	bl	80040e8 <_ZL11limit_valuefff>
 80041e4:	eef0 7a40 	vmov.f32	s15, s0
 80041e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ec:	ee17 3a90 	vmov	r3, s15
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	00000000 	.word	0x00000000

080041fc <_ZL13uint_to_floatjffi>:

static float uint_to_float(unsigned int x, float x_min, float x_max, int num_bits)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	ed87 0a02 	vstr	s0, [r7, #8]
 8004208:	edc7 0a01 	vstr	s1, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
    float span = x_max - x_min;
 800420e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004212:	edd7 7a02 	vldr	s15, [r7, #8]
 8004216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800421a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Perform the conversion
    return static_cast<float>(x) * span / ((1 << num_bits) - 1) + x_min;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004228:	edd7 7a05 	vldr	s15, [r7, #20]
 800422c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004230:	2201      	movs	r2, #1
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	fa02 f303 	lsl.w	r3, r2, r3
 8004238:	3b01      	subs	r3, #1
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004246:	edd7 7a02 	vldr	s15, [r7, #8]
 800424a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800424e:	eeb0 0a67 	vmov.f32	s0, s15
 8004252:	371c      	adds	r7, #28
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_FDCAN_RxFifo0Callback>:


float position_des, velocity_des, kp_des, kd_des, tau_des;
// Callback function for received messages
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b09a      	sub	sp, #104	@ 0x68
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80ba 	beq.w	80043e6 <HAL_FDCAN_RxFifo0Callback+0x18a>
    {
    	uint8_t rxData[8];
        // Retrieve the message from RX FIFO 0
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	f107 0214 	add.w	r2, r7, #20
 800427a:	2140      	movs	r1, #64	@ 0x40
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f003 ff7b 	bl	8008178 <HAL_FDCAN_GetRxMessage>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	bf14      	ite	ne
 8004288:	2301      	movne	r3, #1
 800428a:	2300      	moveq	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <HAL_FDCAN_RxFifo0Callback+0x3a>
        {
            Error_Handler();
 8004292:	f000 fe73 	bl	8004f7c <Error_Handler>
        }

        // Recieved command from main controller
        if (rxHeader.Identifier == CANFD.motor_id)
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	4b5d      	ldr	r3, [pc, #372]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	429a      	cmp	r2, r3
 800429e:	f040 80a2 	bne.w	80043e6 <HAL_FDCAN_RxFifo0Callback+0x18a>
        {
            for (int i = 0; i < rxHeader.DataLength; i++)
 80042a2:	2300      	movs	r3, #0
 80042a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80042a6:	e00c      	b.n	80042c2 <HAL_FDCAN_RxFifo0Callback+0x66>
            {
            	CANFD.Data[i] = rxData[i];
 80042a8:	f107 020c 	add.w	r2, r7, #12
 80042ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042ae:	4413      	add	r3, r2
 80042b0:	7819      	ldrb	r1, [r3, #0]
 80042b2:	4a57      	ldr	r2, [pc, #348]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042b6:	4413      	add	r3, r2
 80042b8:	460a      	mov	r2, r1
 80042ba:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < rxHeader.DataLength; i++)
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	3301      	adds	r3, #1
 80042c0:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c2:	6a3a      	ldr	r2, [r7, #32]
 80042c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d8ee      	bhi.n	80042a8 <HAL_FDCAN_RxFifo0Callback+0x4c>
            }
            unsigned int position_uint = (unsigned int)  CANFD.Data[0] << 8 | CANFD.Data[1];
 80042ca:	4b51      	ldr	r3, [pc, #324]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	4a4f      	ldr	r2, [pc, #316]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042d2:	7852      	ldrb	r2, [r2, #1]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	663b      	str	r3, [r7, #96]	@ 0x60
            unsigned int velocity_uint = (unsigned int) ((CANFD.Data[2] << 8) | (CANFD.Data[3] >> 4) <<4 ) >> 4;
 80042d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042da:	789b      	ldrb	r3, [r3, #2]
 80042dc:	021a      	lsls	r2, r3, #8
 80042de:	4b4c      	ldr	r3, [pc, #304]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042e0:	78db      	ldrb	r3, [r3, #3]
 80042e2:	091b      	lsrs	r3, r3, #4
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	011b      	lsls	r3, r3, #4
 80042e8:	4313      	orrs	r3, r2
 80042ea:	091b      	lsrs	r3, r3, #4
 80042ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
            unsigned int kp_uint       = (unsigned int) ((CANFD.Data[3] & 0x0F) << 8) | CANFD.Data[4];
 80042ee:	4b48      	ldr	r3, [pc, #288]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042f0:	78db      	ldrb	r3, [r3, #3]
 80042f2:	021b      	lsls	r3, r3, #8
 80042f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042f8:	4a45      	ldr	r2, [pc, #276]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 80042fa:	7912      	ldrb	r2, [r2, #4]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	65bb      	str	r3, [r7, #88]	@ 0x58
            unsigned int kd_uint       = (unsigned int) ((CANFD.Data[5] << 8) | (CANFD.Data[6] >> 4) <<4 ) >> 4;
 8004300:	4b43      	ldr	r3, [pc, #268]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004302:	795b      	ldrb	r3, [r3, #5]
 8004304:	021a      	lsls	r2, r3, #8
 8004306:	4b42      	ldr	r3, [pc, #264]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004308:	799b      	ldrb	r3, [r3, #6]
 800430a:	091b      	lsrs	r3, r3, #4
 800430c:	b2db      	uxtb	r3, r3
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	4313      	orrs	r3, r2
 8004312:	091b      	lsrs	r3, r3, #4
 8004314:	657b      	str	r3, [r7, #84]	@ 0x54
            unsigned int tau_uint      = (unsigned int) ((CANFD.Data[6] & 0x0F) << 8) | CANFD.Data[7];
 8004316:	4b3e      	ldr	r3, [pc, #248]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004318:	799b      	ldrb	r3, [r3, #6]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004320:	4a3b      	ldr	r2, [pc, #236]	@ (8004410 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004322:	79d2      	ldrb	r2, [r2, #7]
 8004324:	4313      	orrs	r3, r2
 8004326:	653b      	str	r3, [r7, #80]	@ 0x50

            float position = (float) uint_to_float(position_uint, BE8108.P_min,  BE8108.P_max,  16);
 8004328:	4b3a      	ldr	r3, [pc, #232]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800432a:	edd3 7a00 	vldr	s15, [r3]
 800432e:	4b39      	ldr	r3, [pc, #228]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004330:	ed93 7a01 	vldr	s14, [r3, #4]
 8004334:	2110      	movs	r1, #16
 8004336:	eef0 0a47 	vmov.f32	s1, s14
 800433a:	eeb0 0a67 	vmov.f32	s0, s15
 800433e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004340:	f7ff ff5c 	bl	80041fc <_ZL13uint_to_floatjffi>
 8004344:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
            float velocity = (float) uint_to_float(velocity_uint, BE8108.V_min,  BE8108.V_max,  12);
 8004348:	4b32      	ldr	r3, [pc, #200]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800434a:	edd3 7a02 	vldr	s15, [r3, #8]
 800434e:	4b31      	ldr	r3, [pc, #196]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004350:	ed93 7a03 	vldr	s14, [r3, #12]
 8004354:	210c      	movs	r1, #12
 8004356:	eef0 0a47 	vmov.f32	s1, s14
 800435a:	eeb0 0a67 	vmov.f32	s0, s15
 800435e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004360:	f7ff ff4c 	bl	80041fc <_ZL13uint_to_floatjffi>
 8004364:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
            float kp       = (float) uint_to_float(kp_uint,       BE8108.Kp_min, BE8108.Kp_max, 12);
 8004368:	4b2a      	ldr	r3, [pc, #168]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800436a:	edd3 7a06 	vldr	s15, [r3, #24]
 800436e:	4b29      	ldr	r3, [pc, #164]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004370:	ed93 7a07 	vldr	s14, [r3, #28]
 8004374:	210c      	movs	r1, #12
 8004376:	eef0 0a47 	vmov.f32	s1, s14
 800437a:	eeb0 0a67 	vmov.f32	s0, s15
 800437e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004380:	f7ff ff3c 	bl	80041fc <_ZL13uint_to_floatjffi>
 8004384:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
            float kd       = (float) uint_to_float(kd_uint,       BE8108.Kd_min, BE8108.Kd_max, 12);
 8004388:	4b22      	ldr	r3, [pc, #136]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 800438a:	edd3 7a08 	vldr	s15, [r3, #32]
 800438e:	4b21      	ldr	r3, [pc, #132]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004390:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004394:	210c      	movs	r1, #12
 8004396:	eef0 0a47 	vmov.f32	s1, s14
 800439a:	eeb0 0a67 	vmov.f32	s0, s15
 800439e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80043a0:	f7ff ff2c 	bl	80041fc <_ZL13uint_to_floatjffi>
 80043a4:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
            float tau      = (float) uint_to_float(tau_uint,      BE8108.T_min,  BE8108.T_max,  12);
 80043a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80043aa:	edd3 7a04 	vldr	s15, [r3, #16]
 80043ae:	4b19      	ldr	r3, [pc, #100]	@ (8004414 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 80043b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80043b4:	210c      	movs	r1, #12
 80043b6:	eef0 0a47 	vmov.f32	s1, s14
 80043ba:	eeb0 0a67 	vmov.f32	s0, s15
 80043be:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80043c0:	f7ff ff1c 	bl	80041fc <_ZL13uint_to_floatjffi>
 80043c4:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

            position_des = position;
 80043c8:	4a13      	ldr	r2, [pc, #76]	@ (8004418 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 80043ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80043cc:	6013      	str	r3, [r2, #0]
            velocity_des = velocity;
 80043ce:	4a13      	ldr	r2, [pc, #76]	@ (800441c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 80043d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043d2:	6013      	str	r3, [r2, #0]
            kp_des = kp;
 80043d4:	4a12      	ldr	r2, [pc, #72]	@ (8004420 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 80043d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043d8:	6013      	str	r3, [r2, #0]
            kd_des = kd;
 80043da:	4a12      	ldr	r2, [pc, #72]	@ (8004424 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 80043dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043de:	6013      	str	r3, [r2, #0]
            tau_des = tau;
 80043e0:	4a11      	ldr	r2, [pc, #68]	@ (8004428 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 80043e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80043e4:	6013      	str	r3, [r2, #0]
        }

    }
    // Send the motor states feedback when motor has received command
    send_motor_states(simpleFOC.shaft_angle, simpleFOC.shaft_velocity, simpleFOC.current_LPF.q);
 80043e6:	4b11      	ldr	r3, [pc, #68]	@ (800442c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80043e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80043ec:	4b0f      	ldr	r3, [pc, #60]	@ (800442c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80043ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80043f2:	4b0e      	ldr	r3, [pc, #56]	@ (800442c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 80043f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80043f8:	eeb0 1a66 	vmov.f32	s2, s13
 80043fc:	eef0 0a47 	vmov.f32	s1, s14
 8004400:	eeb0 0a67 	vmov.f32	s0, s15
 8004404:	f000 f83c 	bl	8004480 <_Z17send_motor_statesfff>

}
 8004408:	bf00      	nop
 800440a:	3768      	adds	r7, #104	@ 0x68
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20000478 	.word	0x20000478
 8004414:	200000bc 	.word	0x200000bc
 8004418:	20000804 	.word	0x20000804
 800441c:	20000808 	.word	0x20000808
 8004420:	2000080c 	.word	0x2000080c
 8004424:	20000810 	.word	0x20000810
 8004428:	20000814 	.word	0x20000814
 800442c:	20000240 	.word	0x20000240

08004430 <_Z16send_can_messagemPhh>:

void send_can_message(uint32_t message_id, uint8_t *data, uint8_t data_length)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08e      	sub	sp, #56	@ 0x38
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
    FDCAN_TxHeaderTypeDef txHeader;
    HAL_StatusTypeDef status;

    // Configure the CAN message
    txHeader.Identifier = message_id;               // Set the CAN ID
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	613b      	str	r3, [r7, #16]
    txHeader.IdType = FDCAN_STANDARD_ID;            // Standard 11-bit ID
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;        // Data frame
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
    txHeader.DataLength = FDCAN_DLC_BYTES_0 + data_length;      // Set data length (DLC)
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	61fb      	str	r3, [r7, #28]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800444e:	2300      	movs	r3, #0
 8004450:	623b      	str	r3, [r7, #32]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;         // No bitrate switch
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Classic CAN format
 8004456:	2300      	movs	r3, #0
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800445a:	2300      	movs	r3, #0
 800445c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Transmit the message
    status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data);
 800445e:	f107 0310 	add.w	r3, r7, #16
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4619      	mov	r1, r3
 8004466:	4805      	ldr	r0, [pc, #20]	@ (800447c <_Z16send_can_messagemPhh+0x4c>)
 8004468:	f003 fe42 	bl	80080f0 <HAL_FDCAN_AddMessageToTxFifoQ>
 800446c:	4603      	mov	r3, r0
 800446e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    else
    {
//        printf("Failed to send CAN message: %d\n", status);
    }
}
 8004472:	bf00      	nop
 8004474:	3738      	adds	r7, #56	@ 0x38
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	2000066c 	.word	0x2000066c

08004480 <_Z17send_motor_statesfff>:


void send_motor_states(float position_fb, float velocity_fb, float current_fb)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08a      	sub	sp, #40	@ 0x28
 8004484:	af00      	add	r7, sp, #0
 8004486:	ed87 0a03 	vstr	s0, [r7, #12]
 800448a:	edc7 0a02 	vstr	s1, [r7, #8]
 800448e:	ed87 1a01 	vstr	s2, [r7, #4]
	unsigned int position_fb_uint = float_to_uint(position_fb, BE8108.P_min,  BE8108.P_max, 16);
 8004492:	4b2c      	ldr	r3, [pc, #176]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 8004494:	edd3 7a00 	vldr	s15, [r3]
 8004498:	4b2a      	ldr	r3, [pc, #168]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 800449a:	ed93 7a01 	vldr	s14, [r3, #4]
 800449e:	2010      	movs	r0, #16
 80044a0:	eeb0 1a47 	vmov.f32	s2, s14
 80044a4:	eef0 0a67 	vmov.f32	s1, s15
 80044a8:	ed97 0a03 	vldr	s0, [r7, #12]
 80044ac:	f7ff fe3c 	bl	8004128 <_ZL13float_to_uintfffi>
 80044b0:	6278      	str	r0, [r7, #36]	@ 0x24
	unsigned int velocity_fb_uint = float_to_uint(velocity_fb, BE8108.V_min,  BE8108.V_max, 16);
 80044b2:	4b24      	ldr	r3, [pc, #144]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 80044b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80044b8:	4b22      	ldr	r3, [pc, #136]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 80044ba:	ed93 7a03 	vldr	s14, [r3, #12]
 80044be:	2010      	movs	r0, #16
 80044c0:	eeb0 1a47 	vmov.f32	s2, s14
 80044c4:	eef0 0a67 	vmov.f32	s1, s15
 80044c8:	ed97 0a02 	vldr	s0, [r7, #8]
 80044cc:	f7ff fe2c 	bl	8004128 <_ZL13float_to_uintfffi>
 80044d0:	6238      	str	r0, [r7, #32]
	unsigned int current_fb_uint  = float_to_uint(current_fb,  BE8108.T_min,  BE8108.T_max, 16);
 80044d2:	4b1c      	ldr	r3, [pc, #112]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 80044d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80044d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004544 <_Z17send_motor_statesfff+0xc4>)
 80044da:	ed93 7a05 	vldr	s14, [r3, #20]
 80044de:	2010      	movs	r0, #16
 80044e0:	eeb0 1a47 	vmov.f32	s2, s14
 80044e4:	eef0 0a67 	vmov.f32	s1, s15
 80044e8:	ed97 0a01 	vldr	s0, [r7, #4]
 80044ec:	f7ff fe1c 	bl	8004128 <_ZL13float_to_uintfffi>
 80044f0:	61f8      	str	r0, [r7, #28]

	uint8_t data[8] = {(uint8_t)(position_fb_uint >> 8 & 0xff),
 80044f2:	f107 0314 	add.w	r3, r7, #20
 80044f6:	2200      	movs	r2, #0
 80044f8:	601a      	str	r2, [r3, #0]
 80044fa:	605a      	str	r2, [r3, #4]
 80044fc:	23ff      	movs	r3, #255	@ 0xff
 80044fe:	76bb      	strb	r3, [r7, #26]
 8004500:	23ff      	movs	r3, #255	@ 0xff
 8004502:	76fb      	strb	r3, [r7, #27]
 8004504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004506:	0a1b      	lsrs	r3, r3, #8
					   (uint8_t)(velocity_fb_uint >> 8 & 0xff),
					   (uint8_t)(velocity_fb_uint & 0x00ff),
					   (uint8_t)(current_fb_uint >> 8 & 0xff),
					   (uint8_t)(current_fb_uint & 0x00ff),
					   0xff,
					   0xff};
 8004508:	b2db      	uxtb	r3, r3
 800450a:	753b      	strb	r3, [r7, #20]
 800450c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450e:	b2db      	uxtb	r3, r3
 8004510:	757b      	strb	r3, [r7, #21]
					   (uint8_t)(velocity_fb_uint >> 8 & 0xff),
 8004512:	6a3b      	ldr	r3, [r7, #32]
 8004514:	0a1b      	lsrs	r3, r3, #8
					   0xff};
 8004516:	b2db      	uxtb	r3, r3
 8004518:	75bb      	strb	r3, [r7, #22]
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	b2db      	uxtb	r3, r3
 800451e:	75fb      	strb	r3, [r7, #23]
					   (uint8_t)(current_fb_uint >> 8 & 0xff),
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	0a1b      	lsrs	r3, r3, #8
					   0xff};
 8004524:	b2db      	uxtb	r3, r3
 8004526:	763b      	strb	r3, [r7, #24]
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	767b      	strb	r3, [r7, #25]
	send_can_message(motor_ID, data, 8);
 800452e:	f107 0314 	add.w	r3, r7, #20
 8004532:	2208      	movs	r2, #8
 8004534:	4619      	mov	r1, r3
 8004536:	2001      	movs	r0, #1
 8004538:	f7ff ff7a 	bl	8004430 <_Z16send_can_messagemPhh>
}
 800453c:	bf00      	nop
 800453e:	3728      	adds	r7, #40	@ 0x28
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	200000bc 	.word	0x200000bc

08004548 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800454c:	f001 f90b 	bl	8005766 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004550:	f000 f890 	bl	8004674 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004554:	f000 fc6a 	bl	8004e2c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004558:	f000 fc00 	bl	8004d5c <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 800455c:	f000 fa62 	bl	8004a24 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8004560:	f000 f8de 	bl	8004720 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8004564:	f000 f9fa 	bl	800495c <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 8004568:	f000 fa9e 	bl	8004aa8 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 800456c:	f000 f95e 	bl	800482c <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8004570:	f7ff fda6 	bl	80040c0 <MX_CORDIC_Init>
  MX_CRC_Init();
 8004574:	f000 f9ca 	bl	800490c <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 8004578:	f000 fa3c 	bl	80049f4 <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 800457c:	f000 fb92 	bl	8004ca4 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  //  Delay SETUP
	DWT_Init();
 8004580:	f000 fcb4 	bl	8004eec <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
	HAL_TIM_Base_Start_IT(&htim2);
 8004584:	482e      	ldr	r0, [pc, #184]	@ (8004640 <main+0xf8>)
 8004586:	f006 f907 	bl	800a798 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 800458a:	2201      	movs	r2, #1
 800458c:	2101      	movs	r1, #1
 800458e:	482d      	ldr	r0, [pc, #180]	@ (8004644 <main+0xfc>)
 8004590:	f004 fc7a 	bl	8008e88 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//SPI SETUP
	simpleFOC.initSensors();
 8004594:	482c      	ldr	r0, [pc, #176]	@ (8004648 <main+0x100>)
 8004596:	f7ff f93d 	bl	8003814 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
	simpleFOC.initFOC(5.26846504, CW);
 800459a:	2101      	movs	r1, #1
 800459c:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 800464c <main+0x104>
 80045a0:	4829      	ldr	r0, [pc, #164]	@ (8004648 <main+0x100>)
 80045a2:	f7ff fb5d 	bl	8003c60 <_ZN9simpleFOC7initFOCEf9Direction>
//	simpleFOC.initFOC(NOT_SET, UNKNOWN);



  // Configure FDCAN
    CANFD.Config();
 80045a6:	482a      	ldr	r0, [pc, #168]	@ (8004650 <main+0x108>)
 80045a8:	f7fd f8d8 	bl	800175c <_ZN6can_fd6ConfigEv>
//	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
//	  simpleFOC.move_velocity(setpoint_cmd);		// 21 us  maximum 100 rad/s --> 950 rpm
//	  simpleFOC.move_angle(setpoint_cmd);			// 26 us  a lot of noise in q,d current


	  simpleFOC.move_angle(position_des, kp_des, kd_des, tau_des);
 80045ac:	4b29      	ldr	r3, [pc, #164]	@ (8004654 <main+0x10c>)
 80045ae:	edd3 7a00 	vldr	s15, [r3]
 80045b2:	4b29      	ldr	r3, [pc, #164]	@ (8004658 <main+0x110>)
 80045b4:	ed93 7a00 	vldr	s14, [r3]
 80045b8:	4b28      	ldr	r3, [pc, #160]	@ (800465c <main+0x114>)
 80045ba:	edd3 6a00 	vldr	s13, [r3]
 80045be:	4b28      	ldr	r3, [pc, #160]	@ (8004660 <main+0x118>)
 80045c0:	ed93 6a00 	vldr	s12, [r3]
 80045c4:	eef0 1a46 	vmov.f32	s3, s12
 80045c8:	eeb0 1a66 	vmov.f32	s2, s13
 80045cc:	eef0 0a47 	vmov.f32	s1, s14
 80045d0:	eeb0 0a67 	vmov.f32	s0, s15
 80045d4:	481c      	ldr	r0, [pc, #112]	@ (8004648 <main+0x100>)
 80045d6:	f7ff fc0d 	bl	8003df4 <_ZN9simpleFOC10move_angleEffff>
	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();							// 115 us
 80045da:	481b      	ldr	r0, [pc, #108]	@ (8004648 <main+0x100>)
 80045dc:	f7ff fb78 	bl	8003cd0 <_ZN9simpleFOC7loopFOCEv>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 80045e0:	f000 fc9c 	bl	8004f1c <_ZL6microsv>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b1f      	ldr	r3, [pc, #124]	@ (8004664 <main+0x11c>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	4a1e      	ldr	r2, [pc, #120]	@ (8004668 <main+0x120>)
 80045ee:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 80045f0:	f000 fc94 	bl	8004f1c <_ZL6microsv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004664 <main+0x11c>)
 80045f8:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 80045fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <main+0x120>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fb ff4c 	bl	800049c <__aeabi_ui2d>
 8004604:	a30c      	add	r3, pc, #48	@ (adr r3, 8004638 <main+0xf0>)
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f7fb ffc1 	bl	8000590 <__aeabi_dmul>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	f04f 0000 	mov.w	r0, #0
 8004616:	4915      	ldr	r1, [pc, #84]	@ (800466c <main+0x124>)
 8004618:	f7fc f8e4 	bl	80007e4 <__aeabi_ddiv>
 800461c:	4602      	mov	r2, r0
 800461e:	460b      	mov	r3, r1
 8004620:	4610      	mov	r0, r2
 8004622:	4619      	mov	r1, r3
 8004624:	f7fc fa64 	bl	8000af0 <__aeabi_d2f>
 8004628:	4603      	mov	r3, r0
 800462a:	4a11      	ldr	r2, [pc, #68]	@ (8004670 <main+0x128>)
 800462c:	6013      	str	r3, [r2, #0]
	  simpleFOC.move_angle(position_des, kp_des, kd_des, tau_des);
 800462e:	bf00      	nop
 8004630:	e7bc      	b.n	80045ac <main+0x64>
 8004632:	bf00      	nop
 8004634:	f3af 8000 	nop.w
 8004638:	a0b5ed8d 	.word	0xa0b5ed8d
 800463c:	3eb0c6f7 	.word	0x3eb0c6f7
 8004640:	200007b8 	.word	0x200007b8
 8004644:	48000400 	.word	0x48000400
 8004648:	20000240 	.word	0x20000240
 800464c:	40a89744 	.word	0x40a89744
 8004650:	20000478 	.word	0x20000478
 8004654:	20000804 	.word	0x20000804
 8004658:	2000080c 	.word	0x2000080c
 800465c:	20000810 	.word	0x20000810
 8004660:	20000814 	.word	0x20000814
 8004664:	20000818 	.word	0x20000818
 8004668:	2000081c 	.word	0x2000081c
 800466c:	3ff00000 	.word	0x3ff00000
 8004670:	20000820 	.word	0x20000820

08004674 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b094      	sub	sp, #80	@ 0x50
 8004678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800467a:	f107 0318 	add.w	r3, r7, #24
 800467e:	2238      	movs	r2, #56	@ 0x38
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f008 fda4 	bl	800d1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004688:	1d3b      	adds	r3, r7, #4
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]
 8004690:	609a      	str	r2, [r3, #8]
 8004692:	60da      	str	r2, [r3, #12]
 8004694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8004696:	2000      	movs	r0, #0
 8004698:	f004 fc0e 	bl	8008eb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800469c:	2302      	movs	r3, #2
 800469e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046a6:	2340      	movs	r3, #64	@ 0x40
 80046a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046aa:	2302      	movs	r3, #2
 80046ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80046ae:	2302      	movs	r3, #2
 80046b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80046b2:	2304      	movs	r3, #4
 80046b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80046b6:	2355      	movs	r3, #85	@ 0x55
 80046b8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80046ba:	2302      	movs	r3, #2
 80046bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80046be:	2302      	movs	r3, #2
 80046c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80046c2:	2302      	movs	r3, #2
 80046c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80046c6:	f107 0318 	add.w	r3, r7, #24
 80046ca:	4618      	mov	r0, r3
 80046cc:	f004 fca8 	bl	8009020 <HAL_RCC_OscConfig>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80046e0:	f000 fc4c 	bl	8004f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80046e4:	230f      	movs	r3, #15
 80046e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80046e8:	2303      	movs	r3, #3
 80046ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80046f0:	2300      	movs	r3, #0
 80046f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80046f8:	1d3b      	adds	r3, r7, #4
 80046fa:	2104      	movs	r1, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 ffa1 	bl	8009644 <HAL_RCC_ClockConfig>
 8004702:	4603      	mov	r3, r0
 8004704:	2b00      	cmp	r3, #0
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8004712:	f000 fc33 	bl	8004f7c <Error_Handler>
  }
}
 8004716:	bf00      	nop
 8004718:	3750      	adds	r7, #80	@ 0x50
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	@ 0x30
 8004724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8004726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800472a:	2200      	movs	r2, #0
 800472c:	601a      	str	r2, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
 8004730:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	2220      	movs	r2, #32
 8004736:	2100      	movs	r1, #0
 8004738:	4618      	mov	r0, r3
 800473a:	f008 fd49 	bl	800d1d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800473e:	4b39      	ldr	r3, [pc, #228]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004740:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8004744:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004746:	4b37      	ldr	r3, [pc, #220]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004748:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800474c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800474e:	4b35      	ldr	r3, [pc, #212]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004750:	2200      	movs	r2, #0
 8004752:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004754:	4b33      	ldr	r3, [pc, #204]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004756:	2200      	movs	r2, #0
 8004758:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800475a:	4b32      	ldr	r3, [pc, #200]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 800475c:	2200      	movs	r2, #0
 800475e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004760:	4b30      	ldr	r3, [pc, #192]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004762:	2200      	movs	r2, #0
 8004764:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004766:	4b2f      	ldr	r3, [pc, #188]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004768:	2204      	movs	r2, #4
 800476a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800476c:	4b2d      	ldr	r3, [pc, #180]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 800476e:	2200      	movs	r2, #0
 8004770:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004772:	4b2c      	ldr	r3, [pc, #176]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004774:	2201      	movs	r2, #1
 8004776:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8004778:	4b2a      	ldr	r3, [pc, #168]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 800477a:	2201      	movs	r2, #1
 800477c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800477e:	4b29      	ldr	r3, [pc, #164]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004780:	2200      	movs	r2, #0
 8004782:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004786:	4b27      	ldr	r3, [pc, #156]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004788:	2200      	movs	r2, #0
 800478a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800478c:	4b25      	ldr	r3, [pc, #148]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 800478e:	2200      	movs	r2, #0
 8004790:	631a      	str	r2, [r3, #48]	@ 0x30

//  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
//  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;		// Use TIM1 TRGO

  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800479a:	4b22      	ldr	r3, [pc, #136]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 800479c:	2200      	movs	r2, #0
 800479e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80047a0:	4b20      	ldr	r3, [pc, #128]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80047a8:	481e      	ldr	r0, [pc, #120]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 80047aa:	f001 faaf 	bl	8005d0c <HAL_ADC_Init>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	bf14      	ite	ne
 80047b4:	2301      	movne	r3, #1
 80047b6:	2300      	moveq	r3, #0
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80047be:	f000 fbdd 	bl	8004f7c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047c2:	2300      	movs	r3, #0
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047ca:	4619      	mov	r1, r3
 80047cc:	4815      	ldr	r0, [pc, #84]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 80047ce:	f002 fd25 	bl	800721c <HAL_ADCEx_MultiModeConfigChannel>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 80047e2:	f000 fbcb 	bl	8004f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80047e6:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <_ZL12MX_ADC1_Initv+0x108>)
 80047e8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047ea:	2306      	movs	r3, #6
 80047ec:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80047ee:	2307      	movs	r3, #7
 80047f0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047f2:	237f      	movs	r3, #127	@ 0x7f
 80047f4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047f6:	2304      	movs	r3, #4
 80047f8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047fe:	1d3b      	adds	r3, r7, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4808      	ldr	r0, [pc, #32]	@ (8004824 <_ZL12MX_ADC1_Initv+0x104>)
 8004804:	f001 ff5c 	bl	80066c0 <HAL_ADC_ConfigChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8004818:	f000 fbb0 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800481c:	bf00      	nop
 800481e:	3730      	adds	r7, #48	@ 0x30
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	20000488 	.word	0x20000488
 8004828:	04300002 	.word	0x04300002

0800482c <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b088      	sub	sp, #32
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004832:	463b      	mov	r3, r7
 8004834:	2220      	movs	r2, #32
 8004836:	2100      	movs	r1, #0
 8004838:	4618      	mov	r0, r3
 800483a:	f008 fcc9 	bl	800d1d0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800483e:	4b30      	ldr	r3, [pc, #192]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004840:	4a30      	ldr	r2, [pc, #192]	@ (8004904 <_ZL12MX_ADC2_Initv+0xd8>)
 8004842:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004844:	4b2e      	ldr	r3, [pc, #184]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004846:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800484a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800484c:	4b2c      	ldr	r3, [pc, #176]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800484e:	2200      	movs	r2, #0
 8004850:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004852:	4b2b      	ldr	r3, [pc, #172]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004854:	2200      	movs	r2, #0
 8004856:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004858:	4b29      	ldr	r3, [pc, #164]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800485a:	2200      	movs	r2, #0
 800485c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800485e:	4b28      	ldr	r3, [pc, #160]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004860:	2200      	movs	r2, #0
 8004862:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004864:	4b26      	ldr	r3, [pc, #152]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004866:	2204      	movs	r2, #4
 8004868:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800486a:	4b25      	ldr	r3, [pc, #148]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800486c:	2200      	movs	r2, #0
 800486e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004870:	4b23      	ldr	r3, [pc, #140]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004872:	2201      	movs	r2, #1
 8004874:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8004876:	4b22      	ldr	r3, [pc, #136]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004878:	2201      	movs	r2, #1
 800487a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800487c:	4b20      	ldr	r3, [pc, #128]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004884:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004886:	2200      	movs	r2, #0
 8004888:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800488a:	4b1d      	ldr	r3, [pc, #116]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004890:	4b1b      	ldr	r3, [pc, #108]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004898:	4b19      	ldr	r3, [pc, #100]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 800489a:	2200      	movs	r2, #0
 800489c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800489e:	4b18      	ldr	r3, [pc, #96]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80048a6:	4816      	ldr	r0, [pc, #88]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 80048a8:	f001 fa30 	bl	8005d0c <HAL_ADC_Init>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 80048bc:	f000 fb5e 	bl	8004f7c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80048c0:	4b11      	ldr	r3, [pc, #68]	@ (8004908 <_ZL12MX_ADC2_Initv+0xdc>)
 80048c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048c4:	2306      	movs	r3, #6
 80048c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80048c8:	2307      	movs	r3, #7
 80048ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80048cc:	237f      	movs	r3, #127	@ 0x7f
 80048ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80048d0:	2304      	movs	r3, #4
 80048d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80048d8:	463b      	mov	r3, r7
 80048da:	4619      	mov	r1, r3
 80048dc:	4808      	ldr	r0, [pc, #32]	@ (8004900 <_ZL12MX_ADC2_Initv+0xd4>)
 80048de:	f001 feef 	bl	80066c0 <HAL_ADC_ConfigChannel>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 80048f2:	f000 fb43 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80048f6:	bf00      	nop
 80048f8:	3720      	adds	r7, #32
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200004f4 	.word	0x200004f4
 8004904:	50000100 	.word	0x50000100
 8004908:	08600004 	.word	0x08600004

0800490c <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004910:	4b10      	ldr	r3, [pc, #64]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 8004912:	4a11      	ldr	r2, [pc, #68]	@ (8004958 <_ZL11MX_CRC_Initv+0x4c>)
 8004914:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8004916:	4b0f      	ldr	r3, [pc, #60]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 8004918:	2200      	movs	r2, #0
 800491a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800491c:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 800491e:	2200      	movs	r2, #0
 8004920:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8004922:	4b0c      	ldr	r3, [pc, #48]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 8004924:	2200      	movs	r2, #0
 8004926:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004928:	4b0a      	ldr	r3, [pc, #40]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 800492a:	2200      	movs	r2, #0
 800492c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800492e:	4b09      	ldr	r3, [pc, #36]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 8004930:	2201      	movs	r2, #1
 8004932:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8004934:	4807      	ldr	r0, [pc, #28]	@ (8004954 <_ZL11MX_CRC_Initv+0x48>)
 8004936:	f002 fe9b 	bl	8007670 <HAL_CRC_Init>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 800494a:	f000 fb17 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800494e:	bf00      	nop
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000648 	.word	0x20000648
 8004958:	40023000 	.word	0x40023000

0800495c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004960:	4b22      	ldr	r3, [pc, #136]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004962:	4a23      	ldr	r2, [pc, #140]	@ (80049f0 <_ZL14MX_FDCAN1_Initv+0x94>)
 8004964:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004968:	2200      	movs	r2, #0
 800496a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800496c:	4b1f      	ldr	r3, [pc, #124]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800496e:	2200      	movs	r2, #0
 8004970:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8004972:	4b1e      	ldr	r3, [pc, #120]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004974:	2200      	movs	r2, #0
 8004976:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8004978:	4b1c      	ldr	r3, [pc, #112]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800497a:	2200      	movs	r2, #0
 800497c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800497e:	4b1b      	ldr	r3, [pc, #108]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004980:	2200      	movs	r2, #0
 8004982:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8004984:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004986:	2200      	movs	r2, #0
 8004988:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 800498a:	4b18      	ldr	r3, [pc, #96]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800498c:	2202      	movs	r2, #2
 800498e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 8004990:	4b16      	ldr	r3, [pc, #88]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004992:	220b      	movs	r2, #11
 8004994:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 8004996:	4b15      	ldr	r3, [pc, #84]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 8004998:	2249      	movs	r2, #73	@ 0x49
 800499a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 800499c:	4b13      	ldr	r3, [pc, #76]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 800499e:	220b      	movs	r2, #11
 80049a0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 80049a2:	4b12      	ldr	r3, [pc, #72]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049a4:	2205      	movs	r2, #5
 80049a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049aa:	220f      	movs	r2, #15
 80049ac:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 80049ae:	4b0f      	ldr	r3, [pc, #60]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049b0:	2212      	movs	r2, #18
 80049b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80049b4:	4b0d      	ldr	r3, [pc, #52]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049b6:	220f      	movs	r2, #15
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80049ba:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049bc:	220a      	movs	r2, #10
 80049be:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80049c0:	4b0a      	ldr	r3, [pc, #40]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80049cc:	4807      	ldr	r0, [pc, #28]	@ (80049ec <_ZL14MX_FDCAN1_Initv+0x90>)
 80049ce:	f003 f9b3 	bl	8007d38 <HAL_FDCAN_Init>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	bf14      	ite	ne
 80049d8:	2301      	movne	r3, #1
 80049da:	2300      	moveq	r3, #0
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d001      	beq.n	80049e6 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80049e2:	f000 facb 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80049e6:	bf00      	nop
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	2000066c 	.word	0x2000066c
 80049f0:	40006400 	.word	0x40006400

080049f4 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 80049f8:	4b08      	ldr	r3, [pc, #32]	@ (8004a1c <_ZL12MX_FMAC_Initv+0x28>)
 80049fa:	4a09      	ldr	r2, [pc, #36]	@ (8004a20 <_ZL12MX_FMAC_Initv+0x2c>)
 80049fc:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 80049fe:	4807      	ldr	r0, [pc, #28]	@ (8004a1c <_ZL12MX_FMAC_Initv+0x28>)
 8004a00:	f004 f814 	bl	8008a2c <HAL_FMAC_Init>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	bf14      	ite	ne
 8004a0a:	2301      	movne	r3, #1
 8004a0c:	2300      	moveq	r3, #0
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8004a14:	f000 fab2 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004a18:	bf00      	nop
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	200006d0 	.word	0x200006d0
 8004a20:	40021400 	.word	0x40021400

08004a24 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004a28:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8004aa4 <_ZL12MX_SPI1_Initv+0x80>)
 8004a2c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004a2e:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8004a34:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004a36:	4b1a      	ldr	r3, [pc, #104]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004a3c:	4b18      	ldr	r3, [pc, #96]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a3e:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 8004a42:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a44:	4b16      	ldr	r3, [pc, #88]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004a50:	4b13      	ldr	r3, [pc, #76]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a56:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004a58:	4b11      	ldr	r3, [pc, #68]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a5a:	2218      	movs	r2, #24
 8004a5c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a5e:	4b10      	ldr	r3, [pc, #64]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a64:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a70:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a72:	2207      	movs	r2, #7
 8004a74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a7c:	4b08      	ldr	r3, [pc, #32]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a82:	4807      	ldr	r0, [pc, #28]	@ (8004aa0 <_ZL12MX_SPI1_Initv+0x7c>)
 8004a84:	f005 f9fe 	bl	8009e84 <HAL_SPI_Init>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	bf14      	ite	ne
 8004a8e:	2301      	movne	r3, #1
 8004a90:	2300      	moveq	r3, #0
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 8004a98:	f000 fa70 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a9c:	bf00      	nop
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000708 	.word	0x20000708
 8004aa4:	40013000 	.word	0x40013000

08004aa8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b09c      	sub	sp, #112	@ 0x70
 8004aac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004aae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004abc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ac8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
 8004ad8:	615a      	str	r2, [r3, #20]
 8004ada:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004adc:	1d3b      	adds	r3, r7, #4
 8004ade:	2234      	movs	r2, #52	@ 0x34
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f008 fb74 	bl	800d1d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004aea:	4a6d      	ldr	r2, [pc, #436]	@ (8004ca0 <_ZL12MX_TIM1_Initv+0x1f8>)
 8004aec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004aee:	4b6b      	ldr	r3, [pc, #428]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8004af4:	4b69      	ldr	r3, [pc, #420]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004af6:	2220      	movs	r2, #32
 8004af8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8004afa:	4b68      	ldr	r3, [pc, #416]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004afc:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004b00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004b02:	4b66      	ldr	r3, [pc, #408]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8004b08:	4b64      	ldr	r3, [pc, #400]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004b0e:	4b63      	ldr	r3, [pc, #396]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b10:	2280      	movs	r2, #128	@ 0x80
 8004b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004b14:	4861      	ldr	r0, [pc, #388]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b16:	f005 fde7 	bl	800a6e8 <HAL_TIM_Base_Init>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	bf14      	ite	ne
 8004b20:	2301      	movne	r3, #1
 8004b22:	2300      	moveq	r3, #0
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8004b2a:	f000 fa27 	bl	8004f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004b2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b32:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004b34:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4858      	ldr	r0, [pc, #352]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b3c:	f006 face 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8004b50:	f000 fa14 	bl	8004f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004b54:	4851      	ldr	r0, [pc, #324]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b56:	f005 fef0 	bl	800a93a <HAL_TIM_PWM_Init>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bf14      	ite	ne
 8004b60:	2301      	movne	r3, #1
 8004b62:	2300      	moveq	r3, #0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8004b6a:	f000 fa07 	bl	8004f7c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004b6e:	484b      	ldr	r0, [pc, #300]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b70:	f005 fe82 	bl	800a878 <HAL_TIM_OC_Init>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	bf14      	ite	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	2300      	moveq	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 8004b84:	f000 f9fa 	bl	8004f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 8004b8c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004b90:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004b92:	2300      	movs	r3, #0
 8004b94:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004b96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	483f      	ldr	r0, [pc, #252]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004b9e:	f007 f85f 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf14      	ite	ne
 8004ba8:	2301      	movne	r3, #1
 8004baa:	2300      	moveq	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8004bb2:	f000 f9e3 	bl	8004f7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004bb6:	2360      	movs	r3, #96	@ 0x60
 8004bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004bc6:	2304      	movs	r3, #4
 8004bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004bd2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4830      	ldr	r0, [pc, #192]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004bdc:	f006 f96a 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8004be0:	4603      	mov	r3, r0
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	bf14      	ite	ne
 8004be6:	2301      	movne	r3, #1
 8004be8:	2300      	moveq	r3, #0
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8004bf0:	f000 f9c4 	bl	8004f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004bf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004bf8:	2204      	movs	r2, #4
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	4827      	ldr	r0, [pc, #156]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004bfe:	f006 f959 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf14      	ite	ne
 8004c08:	2301      	movne	r3, #1
 8004c0a:	2300      	moveq	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8004c12:	f000 f9b3 	bl	8004f7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004c16:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004c1a:	2208      	movs	r2, #8
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	481f      	ldr	r0, [pc, #124]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004c20:	f006 f948 	bl	800aeb4 <HAL_TIM_PWM_ConfigChannel>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	bf14      	ite	ne
 8004c2a:	2301      	movne	r3, #1
 8004c2c:	2300      	moveq	r3, #0
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d001      	beq.n	8004c38 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8004c34:	f000 f9a2 	bl	8004f7c <Error_Handler>
  }

  // =================================================================================

  // =================================================================================
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004c40:	2300      	movs	r3, #0
 8004c42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004c44:	2300      	movs	r3, #0
 8004c46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004c4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8004c56:	2300      	movs	r3, #0
 8004c58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004c5e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c62:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004c70:	1d3b      	adds	r3, r7, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4809      	ldr	r0, [pc, #36]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004c76:	f007 f881 	bl	800bd7c <HAL_TIMEx_ConfigBreakDeadTime>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	bf14      	ite	ne
 8004c80:	2301      	movne	r3, #1
 8004c82:	2300      	moveq	r3, #0
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <_ZL12MX_TIM1_Initv+0x1e6>
  {
    Error_Handler();
 8004c8a:	f000 f977 	bl	8004f7c <Error_Handler>
  }
  // =================================================================================
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004c8e:	4803      	ldr	r0, [pc, #12]	@ (8004c9c <_ZL12MX_TIM1_Initv+0x1f4>)
 8004c90:	f000 fc2c 	bl	80054ec <HAL_TIM_MspPostInit>

}
 8004c94:	bf00      	nop
 8004c96:	3770      	adds	r7, #112	@ 0x70
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	2000076c 	.word	0x2000076c
 8004ca0:	40012c00 	.word	0x40012c00

08004ca4 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004caa:	f107 0310 	add.w	r3, r7, #16
 8004cae:	2200      	movs	r2, #0
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
 8004cb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004cb8:	1d3b      	adds	r3, r7, #4
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	605a      	str	r2, [r3, #4]
 8004cc0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004cc2:	4b25      	ldr	r3, [pc, #148]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004cc4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004cc8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 8004cca:	4b23      	ldr	r3, [pc, #140]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004ccc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8004cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cd2:	4b21      	ldr	r3, [pc, #132]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004cd8:	4b1f      	ldr	r3, [pc, #124]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004cda:	2263      	movs	r2, #99	@ 0x63
 8004cdc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cde:	4b1e      	ldr	r3, [pc, #120]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cea:	481b      	ldr	r0, [pc, #108]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004cec:	f005 fcfc 	bl	800a6e8 <HAL_TIM_Base_Init>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	bf14      	ite	ne
 8004cf6:	2301      	movne	r3, #1
 8004cf8:	2300      	moveq	r3, #0
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d001      	beq.n	8004d04 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8004d00:	f000 f93c 	bl	8004f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004d04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004d08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004d0a:	f107 0310 	add.w	r3, r7, #16
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4811      	ldr	r0, [pc, #68]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004d12:	f006 f9e3 	bl	800b0dc <HAL_TIM_ConfigClockSource>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	bf14      	ite	ne
 8004d1c:	2301      	movne	r3, #1
 8004d1e:	2300      	moveq	r3, #0
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 8004d26:	f000 f929 	bl	8004f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4808      	ldr	r0, [pc, #32]	@ (8004d58 <_ZL12MX_TIM2_Initv+0xb4>)
 8004d38:	f006 ff92 	bl	800bc60 <HAL_TIMEx_MasterConfigSynchronization>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	bf14      	ite	ne
 8004d42:	2301      	movne	r3, #1
 8004d44:	2300      	moveq	r3, #0
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8004d4c:	f000 f916 	bl	8004f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d50:	bf00      	nop
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	200007b8 	.word	0x200007b8

08004d5c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b082      	sub	sp, #8
 8004d60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004d62:	4b2e      	ldr	r3, [pc, #184]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d66:	4a2d      	ldr	r2, [pc, #180]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d68:	f043 0304 	orr.w	r3, r3, #4
 8004d6c:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	607b      	str	r3, [r7, #4]
 8004d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d7a:	4b28      	ldr	r3, [pc, #160]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d7e:	4a27      	ldr	r2, [pc, #156]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d80:	f043 0301 	orr.w	r3, r3, #1
 8004d84:	6493      	str	r3, [r2, #72]	@ 0x48
 8004d86:	4b25      	ldr	r3, [pc, #148]	@ (8004e1c <_ZL11MX_DMA_Initv+0xc0>)
 8004d88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	603b      	str	r3, [r7, #0]
 8004d90:	683b      	ldr	r3, [r7, #0]


  hdma_adc1.Instance = DMA1_Channel1;
 8004d92:	4b23      	ldr	r3, [pc, #140]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004d94:	4a23      	ldr	r2, [pc, #140]	@ (8004e24 <_ZL11MX_DMA_Initv+0xc8>)
 8004d96:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d98:	4b21      	ldr	r3, [pc, #132]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004d9a:	2205      	movs	r2, #5
 8004d9c:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d9e:	4b20      	ldr	r3, [pc, #128]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004da4:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004daa:	4b1d      	ldr	r3, [pc, #116]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dac:	2280      	movs	r2, #128	@ 0x80
 8004dae:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004db0:	4b1b      	ldr	r3, [pc, #108]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004db2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004db6:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004db8:	4b19      	ldr	r3, [pc, #100]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004dbe:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004dc0:	4b17      	ldr	r3, [pc, #92]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8004dc6:	4b16      	ldr	r3, [pc, #88]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dc8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004dcc:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004dce:	4814      	ldr	r0, [pc, #80]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dd0:	f002 fd40 	bl	8007854 <HAL_DMA_Init>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	bf14      	ite	ne
 8004dda:	2301      	movne	r3, #1
 8004ddc:	2300      	moveq	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <_ZL11MX_DMA_Initv+0x8c>
  {
      Error_Handler();
 8004de4:	f000 f8ca 	bl	8004f7c <Error_Handler>
  }
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8004de8:	4b0f      	ldr	r3, [pc, #60]	@ (8004e28 <_ZL11MX_DMA_Initv+0xcc>)
 8004dea:	4a0d      	ldr	r2, [pc, #52]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004dec:	655a      	str	r2, [r3, #84]	@ 0x54
 8004dee:	4b0c      	ldr	r3, [pc, #48]	@ (8004e20 <_ZL11MX_DMA_Initv+0xc4>)
 8004df0:	4a0d      	ldr	r2, [pc, #52]	@ (8004e28 <_ZL11MX_DMA_Initv+0xcc>)
 8004df2:	629a      	str	r2, [r3, #40]	@ 0x28



  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration --> ADC_1 */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	200b      	movs	r0, #11
 8004dfa:	f002 fc04 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004dfe:	200b      	movs	r0, #11
 8004e00:	f002 fc1b 	bl	800763a <HAL_NVIC_EnableIRQ>




  /* DMA1_Channel2_IRQn interrupt configuration --> ADC_2*/
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004e04:	2200      	movs	r2, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	200c      	movs	r0, #12
 8004e0a:	f002 fbfc 	bl	8007606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004e0e:	200c      	movs	r0, #12
 8004e10:	f002 fc13 	bl	800763a <HAL_NVIC_EnableIRQ>

}
 8004e14:	bf00      	nop
 8004e16:	3708      	adds	r7, #8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40021000 	.word	0x40021000
 8004e20:	20000560 	.word	0x20000560
 8004e24:	40020008 	.word	0x40020008
 8004e28:	20000488 	.word	0x20000488

08004e2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b088      	sub	sp, #32
 8004e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e32:	f107 030c 	add.w	r3, r7, #12
 8004e36:	2200      	movs	r2, #0
 8004e38:	601a      	str	r2, [r3, #0]
 8004e3a:	605a      	str	r2, [r3, #4]
 8004e3c:	609a      	str	r2, [r3, #8]
 8004e3e:	60da      	str	r2, [r3, #12]
 8004e40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e42:	4b28      	ldr	r3, [pc, #160]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e46:	4a27      	ldr	r2, [pc, #156]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e48:	f043 0320 	orr.w	r3, r3, #32
 8004e4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e4e:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e52:	f003 0320 	and.w	r3, r3, #32
 8004e56:	60bb      	str	r3, [r7, #8]
 8004e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e5e:	4a21      	ldr	r2, [pc, #132]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e60:	f043 0301 	orr.w	r3, r3, #1
 8004e64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e66:	4b1f      	ldr	r3, [pc, #124]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	607b      	str	r3, [r7, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e72:	4b1c      	ldr	r3, [pc, #112]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e78:	f043 0302 	orr.w	r3, r3, #2
 8004e7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e7e:	4b19      	ldr	r3, [pc, #100]	@ (8004ee4 <_ZL12MX_GPIO_Initv+0xb8>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	603b      	str	r3, [r7, #0]
 8004e88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2110      	movs	r1, #16
 8004e8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004e92:	f003 fff9 	bl	8008e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8004e96:	2200      	movs	r2, #0
 8004e98:	2101      	movs	r1, #1
 8004e9a:	4813      	ldr	r0, [pc, #76]	@ (8004ee8 <_ZL12MX_GPIO_Initv+0xbc>)
 8004e9c:	f003 fff4 	bl	8008e88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8004ea0:	2310      	movs	r3, #16
 8004ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eac:	2300      	movs	r3, #0
 8004eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8004eb0:	f107 030c 	add.w	r3, r7, #12
 8004eb4:	4619      	mov	r1, r3
 8004eb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004eba:	f003 fe63 	bl	8008b84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4804      	ldr	r0, [pc, #16]	@ (8004ee8 <_ZL12MX_GPIO_Initv+0xbc>)
 8004ed6:	f003 fe55 	bl	8008b84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	48000400 	.word	0x48000400

08004eec <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004ef0:	4b08      	ldr	r3, [pc, #32]	@ (8004f14 <_ZL8DWT_Initv+0x28>)
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	4a07      	ldr	r2, [pc, #28]	@ (8004f14 <_ZL8DWT_Initv+0x28>)
 8004ef6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004efa:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8004efc:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <_ZL8DWT_Initv+0x2c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a05      	ldr	r2, [pc, #20]	@ (8004f18 <_ZL8DWT_Initv+0x2c>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6013      	str	r3, [r2, #0]
}
 8004f08:	bf00      	nop
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	e000edf0 	.word	0xe000edf0
 8004f18:	e0001000 	.word	0xe0001000

08004f1c <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004f20:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <_ZL6microsv+0x24>)
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	4b07      	ldr	r3, [pc, #28]	@ (8004f44 <_ZL6microsv+0x28>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4907      	ldr	r1, [pc, #28]	@ (8004f48 <_ZL6microsv+0x2c>)
 8004f2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004f2e:	0c9b      	lsrs	r3, r3, #18
 8004f30:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e0001000 	.word	0xe0001000
 8004f44:	200000f4 	.word	0x200000f4
 8004f48:	431bde83 	.word	0x431bde83

08004f4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f5c:	d105      	bne.n	8004f6a <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  CANFD.test = true;
 8004f5e:	4b05      	ldr	r3, [pc, #20]	@ (8004f74 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004f60:	2201      	movs	r2, #1
 8004f62:	731a      	strb	r2, [r3, #12]
	  simpleFOC.Encoder.updateVelocity();
 8004f64:	4804      	ldr	r0, [pc, #16]	@ (8004f78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004f66:	f7fc f895 	bl	8001094 <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 8004f6a:	bf00      	nop
 8004f6c:	3708      	adds	r7, #8
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	20000478 	.word	0x20000478
 8004f78:	20000254 	.word	0x20000254

08004f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004f80:	b672      	cpsid	i
}
 8004f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <Error_Handler+0x8>

08004f88 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d10b      	bne.n	8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d106      	bne.n	8004fb0 <_Z41__static_initialization_and_destruction_0ii+0x28>
simpleFOC simpleFOC;
 8004fa2:	480b      	ldr	r0, [pc, #44]	@ (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004fa4:	f7fe fbde 	bl	8003764 <_ZN9simpleFOCC1Ev>
can_fd CANFD(motor_ID);
 8004fa8:	2101      	movs	r1, #1
 8004faa:	480a      	ldr	r0, [pc, #40]	@ (8004fd4 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8004fac:	f7fc fbc6 	bl	800173c <_ZN6can_fdC1Ei>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d107      	bne.n	8004fc6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d102      	bne.n	8004fc6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
simpleFOC simpleFOC;
 8004fc0:	4803      	ldr	r0, [pc, #12]	@ (8004fd0 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004fc2:	f7fe fbf7 	bl	80037b4 <_ZN9simpleFOCD1Ev>
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000240 	.word	0x20000240
 8004fd4:	20000478 	.word	0x20000478

08004fd8 <_GLOBAL__sub_I_simpleFOC>:
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004fe0:	2001      	movs	r0, #1
 8004fe2:	f7ff ffd1 	bl	8004f88 <_Z41__static_initialization_and_destruction_0ii>
 8004fe6:	bd80      	pop	{r7, pc}

08004fe8 <_GLOBAL__sub_D_simpleFOC>:
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	f7ff ffc9 	bl	8004f88 <_Z41__static_initialization_and_destruction_0ii>
 8004ff6:	bd80      	pop	{r7, pc}

08004ff8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b082      	sub	sp, #8
 8004ffc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800503c <HAL_MspInit+0x44>)
 8005000:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005002:	4a0e      	ldr	r2, [pc, #56]	@ (800503c <HAL_MspInit+0x44>)
 8005004:	f043 0301 	orr.w	r3, r3, #1
 8005008:	6613      	str	r3, [r2, #96]	@ 0x60
 800500a:	4b0c      	ldr	r3, [pc, #48]	@ (800503c <HAL_MspInit+0x44>)
 800500c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	607b      	str	r3, [r7, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005016:	4b09      	ldr	r3, [pc, #36]	@ (800503c <HAL_MspInit+0x44>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	4a08      	ldr	r2, [pc, #32]	@ (800503c <HAL_MspInit+0x44>)
 800501c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005020:	6593      	str	r3, [r2, #88]	@ 0x58
 8005022:	4b06      	ldr	r3, [pc, #24]	@ (800503c <HAL_MspInit+0x44>)
 8005024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800502e:	f003 ffe7 	bl	8009000 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005032:	bf00      	nop
 8005034:	3708      	adds	r7, #8
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40021000 	.word	0x40021000

08005040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b0a0      	sub	sp, #128	@ 0x80
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005048:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800504c:	2200      	movs	r2, #0
 800504e:	601a      	str	r2, [r3, #0]
 8005050:	605a      	str	r2, [r3, #4]
 8005052:	609a      	str	r2, [r3, #8]
 8005054:	60da      	str	r2, [r3, #12]
 8005056:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005058:	f107 031c 	add.w	r3, r7, #28
 800505c:	2250      	movs	r2, #80	@ 0x50
 800505e:	2100      	movs	r1, #0
 8005060:	4618      	mov	r0, r3
 8005062:	f008 f8b5 	bl	800d1d0 <memset>
  if(hadc->Instance==ADC1)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800506e:	d171      	bne.n	8005154 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005070:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005074:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005076:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800507a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800507c:	f107 031c 	add.w	r3, r7, #28
 8005080:	4618      	mov	r0, r3
 8005082:	f004 fcc3 	bl	8009a0c <HAL_RCCEx_PeriphCLKConfig>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d001      	beq.n	8005090 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800508c:	f7ff ff76 	bl	8004f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005090:	4b6d      	ldr	r3, [pc, #436]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	4a6c      	ldr	r2, [pc, #432]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 8005098:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800509a:	4b6b      	ldr	r3, [pc, #428]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d10b      	bne.n	80050ba <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80050a2:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a6:	4a69      	ldr	r2, [pc, #420]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80050ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050ae:	4b67      	ldr	r3, [pc, #412]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ba:	4b64      	ldr	r3, [pc, #400]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050be:	4a63      	ldr	r2, [pc, #396]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050c0:	f043 0301 	orr.w	r3, r3, #1
 80050c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80050c6:	4b61      	ldr	r3, [pc, #388]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80050c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	617b      	str	r3, [r7, #20]
 80050d0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 80050d2:	2301      	movs	r3, #1
 80050d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050d6:	2303      	movs	r3, #3
 80050d8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 80050de:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80050e2:	4619      	mov	r1, r3
 80050e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80050e8:	f003 fd4c 	bl	8008b84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80050ec:	4b58      	ldr	r3, [pc, #352]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 80050ee:	4a59      	ldr	r2, [pc, #356]	@ (8005254 <HAL_ADC_MspInit+0x214>)
 80050f0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80050f2:	4b57      	ldr	r3, [pc, #348]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 80050f4:	2205      	movs	r2, #5
 80050f6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050f8:	4b55      	ldr	r3, [pc, #340]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050fe:	4b54      	ldr	r3, [pc, #336]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 8005100:	2200      	movs	r2, #0
 8005102:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005104:	4b52      	ldr	r3, [pc, #328]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 8005106:	2280      	movs	r2, #128	@ 0x80
 8005108:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800510a:	4b51      	ldr	r3, [pc, #324]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 800510c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005110:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005112:	4b4f      	ldr	r3, [pc, #316]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 8005114:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005118:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800511a:	4b4d      	ldr	r3, [pc, #308]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 800511c:	2220      	movs	r2, #32
 800511e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005120:	4b4b      	ldr	r3, [pc, #300]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 8005122:	2200      	movs	r2, #0
 8005124:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005126:	484a      	ldr	r0, [pc, #296]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 8005128:	f002 fb94 	bl	8007854 <HAL_DMA_Init>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8005132:	f7ff ff23 	bl	8004f7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a45      	ldr	r2, [pc, #276]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 800513a:	655a      	str	r2, [r3, #84]	@ 0x54
 800513c:	4a44      	ldr	r2, [pc, #272]	@ (8005250 <HAL_ADC_MspInit+0x210>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005142:	2200      	movs	r2, #0
 8005144:	2100      	movs	r1, #0
 8005146:	2012      	movs	r0, #18
 8005148:	f002 fa5d 	bl	8007606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800514c:	2012      	movs	r0, #18
 800514e:	f002 fa74 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005152:	e075      	b.n	8005240 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a3f      	ldr	r2, [pc, #252]	@ (8005258 <HAL_ADC_MspInit+0x218>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d170      	bne.n	8005240 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800515e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005162:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005164:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005168:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800516a:	f107 031c 	add.w	r3, r7, #28
 800516e:	4618      	mov	r0, r3
 8005170:	f004 fc4c 	bl	8009a0c <HAL_RCCEx_PeriphCLKConfig>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 800517a:	f7ff feff 	bl	8004f7c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800517e:	4b32      	ldr	r3, [pc, #200]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3301      	adds	r3, #1
 8005184:	4a30      	ldr	r2, [pc, #192]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 8005186:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005188:	4b2f      	ldr	r3, [pc, #188]	@ (8005248 <HAL_ADC_MspInit+0x208>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10b      	bne.n	80051a8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005190:	4b2e      	ldr	r3, [pc, #184]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 8005192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005194:	4a2d      	ldr	r2, [pc, #180]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 8005196:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800519a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800519c:	4b2b      	ldr	r3, [pc, #172]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 800519e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051a4:	613b      	str	r3, [r7, #16]
 80051a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051a8:	4b28      	ldr	r3, [pc, #160]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80051aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ac:	4a27      	ldr	r2, [pc, #156]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051b4:	4b25      	ldr	r3, [pc, #148]	@ (800524c <HAL_ADC_MspInit+0x20c>)
 80051b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
 80051be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 80051c0:	2302      	movs	r3, #2
 80051c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051c4:	2303      	movs	r3, #3
 80051c6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 80051cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80051d0:	4619      	mov	r1, r3
 80051d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80051d6:	f003 fcd5 	bl	8008b84 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80051da:	4b20      	ldr	r3, [pc, #128]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051dc:	4a20      	ldr	r2, [pc, #128]	@ (8005260 <HAL_ADC_MspInit+0x220>)
 80051de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80051e0:	4b1e      	ldr	r3, [pc, #120]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051e6:	4b1d      	ldr	r3, [pc, #116]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80051ec:	4b1b      	ldr	r3, [pc, #108]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051ee:	2200      	movs	r2, #0
 80051f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80051f2:	4b1a      	ldr	r3, [pc, #104]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051f4:	2280      	movs	r2, #128	@ 0x80
 80051f6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80051f8:	4b18      	ldr	r3, [pc, #96]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 80051fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80051fe:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005200:	4b16      	ldr	r3, [pc, #88]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 8005202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005206:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005208:	4b14      	ldr	r3, [pc, #80]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 800520a:	2220      	movs	r2, #32
 800520c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800520e:	4b13      	ldr	r3, [pc, #76]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 8005210:	2200      	movs	r2, #0
 8005212:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005214:	4811      	ldr	r0, [pc, #68]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 8005216:	f002 fb1d 	bl	8007854 <HAL_DMA_Init>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8005220:	f7ff feac 	bl	8004f7c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a0d      	ldr	r2, [pc, #52]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 8005228:	655a      	str	r2, [r3, #84]	@ 0x54
 800522a:	4a0c      	ldr	r2, [pc, #48]	@ (800525c <HAL_ADC_MspInit+0x21c>)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005230:	2200      	movs	r2, #0
 8005232:	2100      	movs	r1, #0
 8005234:	2012      	movs	r0, #18
 8005236:	f002 f9e6 	bl	8007606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800523a:	2012      	movs	r0, #18
 800523c:	f002 f9fd 	bl	800763a <HAL_NVIC_EnableIRQ>
}
 8005240:	bf00      	nop
 8005242:	3780      	adds	r7, #128	@ 0x80
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000824 	.word	0x20000824
 800524c:	40021000 	.word	0x40021000
 8005250:	20000560 	.word	0x20000560
 8005254:	40020008 	.word	0x40020008
 8005258:	50000100 	.word	0x50000100
 800525c:	200005c0 	.word	0x200005c0
 8005260:	4002001c 	.word	0x4002001c

08005264 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a0a      	ldr	r2, [pc, #40]	@ (800529c <HAL_CORDIC_MspInit+0x38>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10b      	bne.n	800528e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005276:	4b0a      	ldr	r3, [pc, #40]	@ (80052a0 <HAL_CORDIC_MspInit+0x3c>)
 8005278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800527a:	4a09      	ldr	r2, [pc, #36]	@ (80052a0 <HAL_CORDIC_MspInit+0x3c>)
 800527c:	f043 0308 	orr.w	r3, r3, #8
 8005280:	6493      	str	r3, [r2, #72]	@ 0x48
 8005282:	4b07      	ldr	r3, [pc, #28]	@ (80052a0 <HAL_CORDIC_MspInit+0x3c>)
 8005284:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005286:	f003 0308 	and.w	r3, r3, #8
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 800528e:	bf00      	nop
 8005290:	3714      	adds	r7, #20
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40020c00 	.word	0x40020c00
 80052a0:	40021000 	.word	0x40021000

080052a4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <HAL_CRC_MspInit+0x38>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d10b      	bne.n	80052ce <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80052b6:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <HAL_CRC_MspInit+0x3c>)
 80052b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052ba:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <HAL_CRC_MspInit+0x3c>)
 80052bc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80052c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <HAL_CRC_MspInit+0x3c>)
 80052c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80052ca:	60fb      	str	r3, [r7, #12]
 80052cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80052ce:	bf00      	nop
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40023000 	.word	0x40023000
 80052e0:	40021000 	.word	0x40021000

080052e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b09e      	sub	sp, #120	@ 0x78
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ec:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
 80052f4:	605a      	str	r2, [r3, #4]
 80052f6:	609a      	str	r2, [r3, #8]
 80052f8:	60da      	str	r2, [r3, #12]
 80052fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052fc:	f107 0314 	add.w	r3, r7, #20
 8005300:	2250      	movs	r2, #80	@ 0x50
 8005302:	2100      	movs	r1, #0
 8005304:	4618      	mov	r0, r3
 8005306:	f007 ff63 	bl	800d1d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a24      	ldr	r2, [pc, #144]	@ (80053a0 <HAL_FDCAN_MspInit+0xbc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d141      	bne.n	8005398 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005318:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800531a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005320:	f107 0314 	add.w	r3, r7, #20
 8005324:	4618      	mov	r0, r3
 8005326:	f004 fb71 	bl	8009a0c <HAL_RCCEx_PeriphCLKConfig>
 800532a:	4603      	mov	r3, r0
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8005330:	f7ff fe24 	bl	8004f7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005334:	4b1b      	ldr	r3, [pc, #108]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 8005336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005338:	4a1a      	ldr	r2, [pc, #104]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 800533a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800533e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005340:	4b18      	ldr	r3, [pc, #96]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 8005342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005348:	613b      	str	r3, [r7, #16]
 800534a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800534c:	4b15      	ldr	r3, [pc, #84]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 800534e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005350:	4a14      	ldr	r2, [pc, #80]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 8005352:	f043 0301 	orr.w	r3, r3, #1
 8005356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005358:	4b12      	ldr	r3, [pc, #72]	@ (80053a4 <HAL_FDCAN_MspInit+0xc0>)
 800535a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
 8005362:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005364:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005368:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800536a:	2302      	movs	r3, #2
 800536c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800536e:	2300      	movs	r3, #0
 8005370:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005372:	2300      	movs	r3, #0
 8005374:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005376:	2309      	movs	r3, #9
 8005378:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800537a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800537e:	4619      	mov	r1, r3
 8005380:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005384:	f003 fbfe 	bl	8008b84 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005388:	2200      	movs	r2, #0
 800538a:	2100      	movs	r1, #0
 800538c:	2015      	movs	r0, #21
 800538e:	f002 f93a 	bl	8007606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005392:	2015      	movs	r0, #21
 8005394:	f002 f951 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005398:	bf00      	nop
 800539a:	3778      	adds	r7, #120	@ 0x78
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40006400 	.word	0x40006400
 80053a4:	40021000 	.word	0x40021000

080053a8 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b085      	sub	sp, #20
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0a      	ldr	r2, [pc, #40]	@ (80053e0 <HAL_FMAC_MspInit+0x38>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d10b      	bne.n	80053d2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 80053ba:	4b0a      	ldr	r3, [pc, #40]	@ (80053e4 <HAL_FMAC_MspInit+0x3c>)
 80053bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053be:	4a09      	ldr	r2, [pc, #36]	@ (80053e4 <HAL_FMAC_MspInit+0x3c>)
 80053c0:	f043 0310 	orr.w	r3, r3, #16
 80053c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80053c6:	4b07      	ldr	r3, [pc, #28]	@ (80053e4 <HAL_FMAC_MspInit+0x3c>)
 80053c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053ca:	f003 0310 	and.w	r3, r3, #16
 80053ce:	60fb      	str	r3, [r7, #12]
 80053d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 80053d2:	bf00      	nop
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	40021400 	.word	0x40021400
 80053e4:	40021000 	.word	0x40021000

080053e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08a      	sub	sp, #40	@ 0x28
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f0:	f107 0314 	add.w	r3, r7, #20
 80053f4:	2200      	movs	r2, #0
 80053f6:	601a      	str	r2, [r3, #0]
 80053f8:	605a      	str	r2, [r3, #4]
 80053fa:	609a      	str	r2, [r3, #8]
 80053fc:	60da      	str	r2, [r3, #12]
 80053fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a17      	ldr	r2, [pc, #92]	@ (8005464 <HAL_SPI_MspInit+0x7c>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d128      	bne.n	800545c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800540a:	4b17      	ldr	r3, [pc, #92]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 800540c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800540e:	4a16      	ldr	r2, [pc, #88]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 8005410:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005414:	6613      	str	r3, [r2, #96]	@ 0x60
 8005416:	4b14      	ldr	r3, [pc, #80]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 8005418:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800541a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005422:	4b11      	ldr	r3, [pc, #68]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005426:	4a10      	ldr	r2, [pc, #64]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 8005428:	f043 0301 	orr.w	r3, r3, #1
 800542c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800542e:	4b0e      	ldr	r3, [pc, #56]	@ (8005468 <HAL_SPI_MspInit+0x80>)
 8005430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800543a:	23e0      	movs	r3, #224	@ 0xe0
 800543c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800543e:	2302      	movs	r3, #2
 8005440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005442:	2300      	movs	r3, #0
 8005444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005446:	2302      	movs	r3, #2
 8005448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800544a:	2305      	movs	r3, #5
 800544c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800544e:	f107 0314 	add.w	r3, r7, #20
 8005452:	4619      	mov	r1, r3
 8005454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005458:	f003 fb94 	bl	8008b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800545c:	bf00      	nop
 800545e:	3728      	adds	r7, #40	@ 0x28
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}
 8005464:	40013000 	.word	0x40013000
 8005468:	40021000 	.word	0x40021000

0800546c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a1a      	ldr	r2, [pc, #104]	@ (80054e4 <HAL_TIM_Base_MspInit+0x78>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d114      	bne.n	80054a8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800547e:	4b1a      	ldr	r3, [pc, #104]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 8005480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005482:	4a19      	ldr	r2, [pc, #100]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 8005484:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005488:	6613      	str	r3, [r2, #96]	@ 0x60
 800548a:	4b17      	ldr	r3, [pc, #92]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 800548c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800548e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005496:	2200      	movs	r2, #0
 8005498:	2100      	movs	r1, #0
 800549a:	201b      	movs	r0, #27
 800549c:	f002 f8b3 	bl	8007606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80054a0:	201b      	movs	r0, #27
 80054a2:	f002 f8ca 	bl	800763a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80054a6:	e018      	b.n	80054da <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b0:	d113      	bne.n	80054da <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b2:	4b0d      	ldr	r3, [pc, #52]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 80054b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054b6:	4a0c      	ldr	r2, [pc, #48]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 80054b8:	f043 0301 	orr.w	r3, r3, #1
 80054bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80054be:	4b0a      	ldr	r3, [pc, #40]	@ (80054e8 <HAL_TIM_Base_MspInit+0x7c>)
 80054c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	60bb      	str	r3, [r7, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	201c      	movs	r0, #28
 80054d0:	f002 f899 	bl	8007606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80054d4:	201c      	movs	r0, #28
 80054d6:	f002 f8b0 	bl	800763a <HAL_NVIC_EnableIRQ>
}
 80054da:	bf00      	nop
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40021000 	.word	0x40021000

080054ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f4:	f107 030c 	add.w	r3, r7, #12
 80054f8:	2200      	movs	r2, #0
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	605a      	str	r2, [r3, #4]
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	60da      	str	r2, [r3, #12]
 8005502:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a12      	ldr	r2, [pc, #72]	@ (8005554 <HAL_TIM_MspPostInit+0x68>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d11d      	bne.n	800554a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550e:	4b12      	ldr	r3, [pc, #72]	@ (8005558 <HAL_TIM_MspPostInit+0x6c>)
 8005510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005512:	4a11      	ldr	r2, [pc, #68]	@ (8005558 <HAL_TIM_MspPostInit+0x6c>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800551a:	4b0f      	ldr	r3, [pc, #60]	@ (8005558 <HAL_TIM_MspPostInit+0x6c>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800551e:	f003 0301 	and.w	r3, r3, #1
 8005522:	60bb      	str	r3, [r7, #8]
 8005524:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8005526:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800552a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005534:	2303      	movs	r3, #3
 8005536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005538:	2306      	movs	r3, #6
 800553a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553c:	f107 030c 	add.w	r3, r7, #12
 8005540:	4619      	mov	r1, r3
 8005542:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005546:	f003 fb1d 	bl	8008b84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800554a:	bf00      	nop
 800554c:	3720      	adds	r7, #32
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40012c00 	.word	0x40012c00
 8005558:	40021000 	.word	0x40021000

0800555c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005560:	bf00      	nop
 8005562:	e7fd      	b.n	8005560 <NMI_Handler+0x4>

08005564 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005568:	bf00      	nop
 800556a:	e7fd      	b.n	8005568 <HardFault_Handler+0x4>

0800556c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800556c:	b480      	push	{r7}
 800556e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005570:	bf00      	nop
 8005572:	e7fd      	b.n	8005570 <MemManage_Handler+0x4>

08005574 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005574:	b480      	push	{r7}
 8005576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005578:	bf00      	nop
 800557a:	e7fd      	b.n	8005578 <BusFault_Handler+0x4>

0800557c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005580:	bf00      	nop
 8005582:	e7fd      	b.n	8005580 <UsageFault_Handler+0x4>

08005584 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005584:	b480      	push	{r7}
 8005586:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr

08005592 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005592:	b480      	push	{r7}
 8005594:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005596:	bf00      	nop
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80055a0:	b480      	push	{r7}
 80055a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80055a4:	bf00      	nop
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80055b2:	f000 f92b 	bl	800580c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055b6:	bf00      	nop
 80055b8:	bd80      	pop	{r7, pc}
	...

080055bc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80055c0:	4802      	ldr	r0, [pc, #8]	@ (80055cc <DMA1_Channel1_IRQHandler+0x10>)
 80055c2:	f002 fa6a 	bl	8007a9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80055c6:	bf00      	nop
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20000560 	.word	0x20000560

080055d0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80055d4:	4802      	ldr	r0, [pc, #8]	@ (80055e0 <DMA1_Channel2_IRQHandler+0x10>)
 80055d6:	f002 fa60 	bl	8007a9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80055da:	bf00      	nop
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	200005c0 	.word	0x200005c0

080055e4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80055e8:	4803      	ldr	r0, [pc, #12]	@ (80055f8 <ADC1_2_IRQHandler+0x14>)
 80055ea:	f000 fe07 	bl	80061fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80055ee:	4803      	ldr	r0, [pc, #12]	@ (80055fc <ADC1_2_IRQHandler+0x18>)
 80055f0:	f000 fe04 	bl	80061fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80055f4:	bf00      	nop
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20000488 	.word	0x20000488
 80055fc:	200004f4 	.word	0x200004f4

08005600 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005604:	4802      	ldr	r0, [pc, #8]	@ (8005610 <FDCAN1_IT0_IRQHandler+0x10>)
 8005606:	f002 ffa5 	bl	8008554 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800560a:	bf00      	nop
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	2000066c 	.word	0x2000066c

08005614 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005618:	4802      	ldr	r0, [pc, #8]	@ (8005624 <TIM1_CC_IRQHandler+0x10>)
 800561a:	f005 fafb 	bl	800ac14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800561e:	bf00      	nop
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	2000076c 	.word	0x2000076c

08005628 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800562c:	4802      	ldr	r0, [pc, #8]	@ (8005638 <TIM2_IRQHandler+0x10>)
 800562e:	f005 faf1 	bl	800ac14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005632:	bf00      	nop
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	200007b8 	.word	0x200007b8

0800563c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800563c:	b480      	push	{r7}
 800563e:	af00      	add	r7, sp, #0
  return 1;
 8005640:	2301      	movs	r3, #1
}
 8005642:	4618      	mov	r0, r3
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <_kill>:

int _kill(int pid, int sig)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005656:	f007 fe17 	bl	800d288 <__errno>
 800565a:	4603      	mov	r3, r0
 800565c:	2216      	movs	r2, #22
 800565e:	601a      	str	r2, [r3, #0]
  return -1;
 8005660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_exit>:

void _exit (int status)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005674:	f04f 31ff 	mov.w	r1, #4294967295
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ffe7 	bl	800564c <_kill>
  while (1) {}    /* Make sure we hang here */
 800567e:	bf00      	nop
 8005680:	e7fd      	b.n	800567e <_exit+0x12>
	...

08005684 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800568c:	4a14      	ldr	r2, [pc, #80]	@ (80056e0 <_sbrk+0x5c>)
 800568e:	4b15      	ldr	r3, [pc, #84]	@ (80056e4 <_sbrk+0x60>)
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005698:	4b13      	ldr	r3, [pc, #76]	@ (80056e8 <_sbrk+0x64>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80056a0:	4b11      	ldr	r3, [pc, #68]	@ (80056e8 <_sbrk+0x64>)
 80056a2:	4a12      	ldr	r2, [pc, #72]	@ (80056ec <_sbrk+0x68>)
 80056a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80056a6:	4b10      	ldr	r3, [pc, #64]	@ (80056e8 <_sbrk+0x64>)
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4413      	add	r3, r2
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d207      	bcs.n	80056c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80056b4:	f007 fde8 	bl	800d288 <__errno>
 80056b8:	4603      	mov	r3, r0
 80056ba:	220c      	movs	r2, #12
 80056bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	e009      	b.n	80056d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80056c4:	4b08      	ldr	r3, [pc, #32]	@ (80056e8 <_sbrk+0x64>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80056ca:	4b07      	ldr	r3, [pc, #28]	@ (80056e8 <_sbrk+0x64>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4413      	add	r3, r2
 80056d2:	4a05      	ldr	r2, [pc, #20]	@ (80056e8 <_sbrk+0x64>)
 80056d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80056d6:	68fb      	ldr	r3, [r7, #12]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	2001c000 	.word	0x2001c000
 80056e4:	00000400 	.word	0x00000400
 80056e8:	20000828 	.word	0x20000828
 80056ec:	20000980 	.word	0x20000980

080056f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80056f4:	4b06      	ldr	r3, [pc, #24]	@ (8005710 <SystemInit+0x20>)
 80056f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056fa:	4a05      	ldr	r2, [pc, #20]	@ (8005710 <SystemInit+0x20>)
 80056fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000ed00 	.word	0xe000ed00

08005714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005714:	480d      	ldr	r0, [pc, #52]	@ (800574c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005716:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005718:	f7ff ffea 	bl	80056f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800571c:	480c      	ldr	r0, [pc, #48]	@ (8005750 <LoopForever+0x6>)
  ldr r1, =_edata
 800571e:	490d      	ldr	r1, [pc, #52]	@ (8005754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005720:	4a0d      	ldr	r2, [pc, #52]	@ (8005758 <LoopForever+0xe>)
  movs r3, #0
 8005722:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005724:	e002      	b.n	800572c <LoopCopyDataInit>

08005726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800572a:	3304      	adds	r3, #4

0800572c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800572c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800572e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005730:	d3f9      	bcc.n	8005726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005732:	4a0a      	ldr	r2, [pc, #40]	@ (800575c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005734:	4c0a      	ldr	r4, [pc, #40]	@ (8005760 <LoopForever+0x16>)
  movs r3, #0
 8005736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005738:	e001      	b.n	800573e <LoopFillZerobss>

0800573a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800573a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800573c:	3204      	adds	r2, #4

0800573e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800573e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005740:	d3fb      	bcc.n	800573a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005742:	f007 fda7 	bl	800d294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005746:	f7fe feff 	bl	8004548 <main>

0800574a <LoopForever>:

LoopForever:
    b LoopForever
 800574a:	e7fe      	b.n	800574a <LoopForever>
  ldr   r0, =_estack
 800574c:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005754:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8005758:	0800d4e4 	.word	0x0800d4e4
  ldr r2, =_sbss
 800575c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8005760:	2000097c 	.word	0x2000097c

08005764 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005764:	e7fe      	b.n	8005764 <ADC3_IRQHandler>

08005766 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800576c:	2300      	movs	r3, #0
 800576e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005770:	2003      	movs	r0, #3
 8005772:	f001 ff3d 	bl	80075f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005776:	200f      	movs	r0, #15
 8005778:	f000 f80e 	bl	8005798 <HAL_InitTick>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d002      	beq.n	8005788 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	71fb      	strb	r3, [r7, #7]
 8005786:	e001      	b.n	800578c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005788:	f7ff fc36 	bl	8004ff8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800578c:	79fb      	ldrb	r3, [r7, #7]

}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80057a4:	4b16      	ldr	r3, [pc, #88]	@ (8005800 <HAL_InitTick+0x68>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d022      	beq.n	80057f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80057ac:	4b15      	ldr	r3, [pc, #84]	@ (8005804 <HAL_InitTick+0x6c>)
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	4b13      	ldr	r3, [pc, #76]	@ (8005800 <HAL_InitTick+0x68>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80057b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80057bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c0:	4618      	mov	r0, r3
 80057c2:	f001 ff48 	bl	8007656 <HAL_SYSTICK_Config>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d809      	bhi.n	80057e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057d2:	2200      	movs	r2, #0
 80057d4:	6879      	ldr	r1, [r7, #4]
 80057d6:	f04f 30ff 	mov.w	r0, #4294967295
 80057da:	f001 ff14 	bl	8007606 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057de:	4a0a      	ldr	r2, [pc, #40]	@ (8005808 <HAL_InitTick+0x70>)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6013      	str	r3, [r2, #0]
 80057e4:	e007      	b.n	80057f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	73fb      	strb	r3, [r7, #15]
 80057ea:	e004      	b.n	80057f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	73fb      	strb	r3, [r7, #15]
 80057f0:	e001      	b.n	80057f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200000fc 	.word	0x200000fc
 8005804:	200000f4 	.word	0x200000f4
 8005808:	200000f8 	.word	0x200000f8

0800580c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005810:	4b05      	ldr	r3, [pc, #20]	@ (8005828 <HAL_IncTick+0x1c>)
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_IncTick+0x20>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4413      	add	r3, r2
 800581a:	4a03      	ldr	r2, [pc, #12]	@ (8005828 <HAL_IncTick+0x1c>)
 800581c:	6013      	str	r3, [r2, #0]
}
 800581e:	bf00      	nop
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	2000082c 	.word	0x2000082c
 800582c:	200000fc 	.word	0x200000fc

08005830 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
  return uwTick;
 8005834:	4b03      	ldr	r3, [pc, #12]	@ (8005844 <HAL_GetTick+0x14>)
 8005836:	681b      	ldr	r3, [r3, #0]
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	2000082c 	.word	0x2000082c

08005848 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005850:	f7ff ffee 	bl	8005830 <HAL_GetTick>
 8005854:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d004      	beq.n	800586c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005862:	4b09      	ldr	r3, [pc, #36]	@ (8005888 <HAL_Delay+0x40>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800586c:	bf00      	nop
 800586e:	f7ff ffdf 	bl	8005830 <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d8f7      	bhi.n	800586e <HAL_Delay+0x26>
  {
  }
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	200000fc 	.word	0x200000fc

0800588c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	609a      	str	r2, [r3, #8]
}
 80058a6:	bf00      	nop
 80058a8:	370c      	adds	r7, #12
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b083      	sub	sp, #12
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	609a      	str	r2, [r3, #8]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	60f8      	str	r0, [r7, #12]
 80058fc:	60b9      	str	r1, [r7, #8]
 80058fe:	607a      	str	r2, [r7, #4]
 8005900:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	3360      	adds	r3, #96	@ 0x60
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	4b08      	ldr	r3, [pc, #32]	@ (8005938 <LL_ADC_SetOffset+0x44>)
 8005916:	4013      	ands	r3, r2
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800591e:	683a      	ldr	r2, [r7, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800592c:	bf00      	nop
 800592e:	371c      	adds	r7, #28
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	03fff000 	.word	0x03fff000

0800593c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	3360      	adds	r3, #96	@ 0x60
 800594a:	461a      	mov	r2, r3
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005968:	b480      	push	{r7}
 800596a:	b087      	sub	sp, #28
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3360      	adds	r3, #96	@ 0x60
 8005978:	461a      	mov	r2, r3
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	431a      	orrs	r2, r3
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005992:	bf00      	nop
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800599e:	b480      	push	{r7}
 80059a0:	b087      	sub	sp, #28
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	3360      	adds	r3, #96	@ 0x60
 80059ae:	461a      	mov	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	4413      	add	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	431a      	orrs	r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	3360      	adds	r3, #96	@ 0x60
 80059e4:	461a      	mov	r2, r3
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	431a      	orrs	r2, r3
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80059fe:	bf00      	nop
 8005a00:	371c      	adds	r7, #28
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
 8005a12:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	695b      	ldr	r3, [r3, #20]
 8005a18:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	615a      	str	r2, [r3, #20]
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005a44:	2301      	movs	r3, #1
 8005a46:	e000      	b.n	8005a4a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	370c      	adds	r7, #12
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b087      	sub	sp, #28
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3330      	adds	r3, #48	@ 0x30
 8005a66:	461a      	mov	r2, r3
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	0a1b      	lsrs	r3, r3, #8
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	f003 030c 	and.w	r3, r3, #12
 8005a72:	4413      	add	r3, r2
 8005a74:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	f003 031f 	and.w	r3, r3, #31
 8005a80:	211f      	movs	r1, #31
 8005a82:	fa01 f303 	lsl.w	r3, r1, r3
 8005a86:	43db      	mvns	r3, r3
 8005a88:	401a      	ands	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	0e9b      	lsrs	r3, r3, #26
 8005a8e:	f003 011f 	and.w	r1, r3, #31
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f003 031f 	and.w	r3, r3, #31
 8005a98:	fa01 f303 	lsl.w	r3, r1, r3
 8005a9c:	431a      	orrs	r2, r3
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005aa2:	bf00      	nop
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005aae:	b480      	push	{r7}
 8005ab0:	b083      	sub	sp, #12
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005aba:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b087      	sub	sp, #28
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	3314      	adds	r3, #20
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	0e5b      	lsrs	r3, r3, #25
 8005aea:	009b      	lsls	r3, r3, #2
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	4413      	add	r3, r2
 8005af2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	0d1b      	lsrs	r3, r3, #20
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2107      	movs	r1, #7
 8005b02:	fa01 f303 	lsl.w	r3, r1, r3
 8005b06:	43db      	mvns	r3, r3
 8005b08:	401a      	ands	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	0d1b      	lsrs	r3, r3, #20
 8005b0e:	f003 031f 	and.w	r3, r3, #31
 8005b12:	6879      	ldr	r1, [r7, #4]
 8005b14:	fa01 f303 	lsl.w	r3, r1, r3
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
	...

08005b2c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b44:	43db      	mvns	r3, r3
 8005b46:	401a      	ands	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0318 	and.w	r3, r3, #24
 8005b4e:	4908      	ldr	r1, [pc, #32]	@ (8005b70 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005b50:	40d9      	lsrs	r1, r3
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	400b      	ands	r3, r1
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005b62:	bf00      	nop
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr
 8005b6e:	bf00      	nop
 8005b70:	0007ffff 	.word	0x0007ffff

08005b74 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f003 031f 	and.w	r3, r3, #31
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005bbc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	6093      	str	r3, [r2, #8]
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d101      	bne.n	8005bea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8005c08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c0c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c34:	d101      	bne.n	8005c3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr

08005c48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b083      	sub	sp, #12
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005c58:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c5c:	f043 0201 	orr.w	r2, r3, #1
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <LL_ADC_IsEnabled+0x18>
 8005c84:	2301      	movs	r3, #1
 8005c86:	e000      	b.n	8005c8a <LL_ADC_IsEnabled+0x1a>
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ca6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d101      	bne.n	8005cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	f003 0308 	and.w	r3, r3, #8
 8005cf4:	2b08      	cmp	r3, #8
 8005cf6:	d101      	bne.n	8005cfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e000      	b.n	8005cfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005cfc:	2300      	movs	r3, #0
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	370c      	adds	r7, #12
 8005d02:	46bd      	mov	sp, r7
 8005d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d08:	4770      	bx	lr
	...

08005d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005d0c:	b590      	push	{r4, r7, lr}
 8005d0e:	b089      	sub	sp, #36	@ 0x24
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005d14:	2300      	movs	r3, #0
 8005d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e19b      	b.n	800605e <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695b      	ldr	r3, [r3, #20]
 8005d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d109      	bne.n	8005d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff f983 	bl	8005040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff ff3f 	bl	8005bd0 <LL_ADC_IsDeepPowerDownEnabled>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7ff ff25 	bl	8005bac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff ff5a 	bl	8005c20 <LL_ADC_IsInternalRegulatorEnabled>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d115      	bne.n	8005d9e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff ff3e 	bl	8005bf8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d7c:	4b97      	ldr	r3, [pc, #604]	@ (8005fdc <HAL_ADC_Init+0x2d0>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	099b      	lsrs	r3, r3, #6
 8005d82:	4a97      	ldr	r2, [pc, #604]	@ (8005fe0 <HAL_ADC_Init+0x2d4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	099b      	lsrs	r3, r3, #6
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d90:	e002      	b.n	8005d98 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f9      	bne.n	8005d92 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff ff3c 	bl	8005c20 <LL_ADC_IsInternalRegulatorEnabled>
 8005da8:	4603      	mov	r3, r0
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10d      	bne.n	8005dca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005db2:	f043 0210 	orr.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005dbe:	f043 0201 	orr.w	r2, r3, #1
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff ff75 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 8005dd4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8134 	bne.w	800604c <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8130 	bne.w	800604c <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005df0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005df4:	f043 0202 	orr.w	r2, r3, #2
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f7ff ff35 	bl	8005c70 <LL_ADC_IsEnabled>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d137      	bne.n	8005e7c <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e14:	d004      	beq.n	8005e20 <HAL_ADC_Init+0x114>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a72      	ldr	r2, [pc, #456]	@ (8005fe4 <HAL_ADC_Init+0x2d8>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d10f      	bne.n	8005e40 <HAL_ADC_Init+0x134>
 8005e20:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005e24:	f7ff ff24 	bl	8005c70 <LL_ADC_IsEnabled>
 8005e28:	4604      	mov	r4, r0
 8005e2a:	486e      	ldr	r0, [pc, #440]	@ (8005fe4 <HAL_ADC_Init+0x2d8>)
 8005e2c:	f7ff ff20 	bl	8005c70 <LL_ADC_IsEnabled>
 8005e30:	4603      	mov	r3, r0
 8005e32:	4323      	orrs	r3, r4
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	bf0c      	ite	eq
 8005e38:	2301      	moveq	r3, #1
 8005e3a:	2300      	movne	r3, #0
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	e008      	b.n	8005e52 <HAL_ADC_Init+0x146>
 8005e40:	4869      	ldr	r0, [pc, #420]	@ (8005fe8 <HAL_ADC_Init+0x2dc>)
 8005e42:	f7ff ff15 	bl	8005c70 <LL_ADC_IsEnabled>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	bf0c      	ite	eq
 8005e4c:	2301      	moveq	r3, #1
 8005e4e:	2300      	movne	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d012      	beq.n	8005e7c <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e5e:	d004      	beq.n	8005e6a <HAL_ADC_Init+0x15e>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a5f      	ldr	r2, [pc, #380]	@ (8005fe4 <HAL_ADC_Init+0x2d8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d101      	bne.n	8005e6e <HAL_ADC_Init+0x162>
 8005e6a:	4a60      	ldr	r2, [pc, #384]	@ (8005fec <HAL_ADC_Init+0x2e0>)
 8005e6c:	e000      	b.n	8005e70 <HAL_ADC_Init+0x164>
 8005e6e:	4a60      	ldr	r2, [pc, #384]	@ (8005ff0 <HAL_ADC_Init+0x2e4>)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7ff fd08 	bl	800588c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	7f5b      	ldrb	r3, [r3, #29]
 8005e80:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e86:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005e8c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005e92:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005e9a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d106      	bne.n	8005eb8 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	045b      	lsls	r3, r3, #17
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d009      	beq.n	8005ed4 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ecc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68da      	ldr	r2, [r3, #12]
 8005eda:	4b46      	ldr	r3, [pc, #280]	@ (8005ff4 <HAL_ADC_Init+0x2e8>)
 8005edc:	4013      	ands	r3, r2
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	69b9      	ldr	r1, [r7, #24]
 8005ee4:	430b      	orrs	r3, r1
 8005ee6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	430a      	orrs	r2, r1
 8005efc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff feee 	bl	8005ce4 <LL_ADC_INJ_IsConversionOngoing>
 8005f08:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d17b      	bne.n	8006008 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d178      	bne.n	8006008 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005f1a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f22:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005f24:	4313      	orrs	r3, r2
 8005f26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005f32:	f023 0302 	bic.w	r3, r3, #2
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	6812      	ldr	r2, [r2, #0]
 8005f3a:	69b9      	ldr	r1, [r7, #24]
 8005f3c:	430b      	orrs	r3, r1
 8005f3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d017      	beq.n	8005f78 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691a      	ldr	r2, [r3, #16]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005f56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f60:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6911      	ldr	r1, [r2, #16]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	430b      	orrs	r3, r1
 8005f72:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005f76:	e013      	b.n	8005fa0 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691a      	ldr	r2, [r3, #16]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005f86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6812      	ldr	r2, [r2, #0]
 8005f94:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005f98:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005f9c:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d126      	bne.n	8005ff8 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005fb4:	f023 0304 	bic.w	r3, r3, #4
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005fc0:	4311      	orrs	r1, r2
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005fc6:	4311      	orrs	r1, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005fcc:	430a      	orrs	r2, r1
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f042 0201 	orr.w	r2, r2, #1
 8005fd8:	611a      	str	r2, [r3, #16]
 8005fda:	e015      	b.n	8006008 <HAL_ADC_Init+0x2fc>
 8005fdc:	200000f4 	.word	0x200000f4
 8005fe0:	053e2d63 	.word	0x053e2d63
 8005fe4:	50000100 	.word	0x50000100
 8005fe8:	50000400 	.word	0x50000400
 8005fec:	50000300 	.word	0x50000300
 8005ff0:	50000700 	.word	0x50000700
 8005ff4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	691a      	ldr	r2, [r3, #16]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f022 0201 	bic.w	r2, r2, #1
 8006006:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	695b      	ldr	r3, [r3, #20]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d10c      	bne.n	800602a <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006016:	f023 010f 	bic.w	r1, r3, #15
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	1e5a      	subs	r2, r3, #1
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	631a      	str	r2, [r3, #48]	@ 0x30
 8006028:	e007      	b.n	800603a <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 020f 	bic.w	r2, r2, #15
 8006038:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603e:	f023 0303 	bic.w	r3, r3, #3
 8006042:	f043 0201 	orr.w	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	65da      	str	r2, [r3, #92]	@ 0x5c
 800604a:	e007      	b.n	800605c <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006050:	f043 0210 	orr.w	r2, r3, #16
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800605c:	7ffb      	ldrb	r3, [r7, #31]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3724      	adds	r7, #36	@ 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	bf00      	nop

08006068 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800607c:	d004      	beq.n	8006088 <HAL_ADC_Start_DMA+0x20>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a57      	ldr	r2, [pc, #348]	@ (80061e0 <HAL_ADC_Start_DMA+0x178>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d101      	bne.n	800608c <HAL_ADC_Start_DMA+0x24>
 8006088:	4b56      	ldr	r3, [pc, #344]	@ (80061e4 <HAL_ADC_Start_DMA+0x17c>)
 800608a:	e000      	b.n	800608e <HAL_ADC_Start_DMA+0x26>
 800608c:	4b56      	ldr	r3, [pc, #344]	@ (80061e8 <HAL_ADC_Start_DMA+0x180>)
 800608e:	4618      	mov	r0, r3
 8006090:	f7ff fd70 	bl	8005b74 <LL_ADC_GetMultimode>
 8006094:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4618      	mov	r0, r3
 800609c:	f7ff fe0f 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f040 8094 	bne.w	80061d0 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_ADC_Start_DMA+0x4e>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e08f      	b.n	80061d6 <HAL_ADC_Start_DMA+0x16e>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a4a      	ldr	r2, [pc, #296]	@ (80061ec <HAL_ADC_Start_DMA+0x184>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d008      	beq.n	80060da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d005      	beq.n	80060da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	2b05      	cmp	r3, #5
 80060d2:	d002      	beq.n	80060da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	2b09      	cmp	r3, #9
 80060d8:	d173      	bne.n	80061c2 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 ff1c 	bl	8006f18 <ADC_Enable>
 80060e0:	4603      	mov	r3, r0
 80060e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d166      	bne.n	80061b8 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060ee:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80060f2:	f023 0301 	bic.w	r3, r3, #1
 80060f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a37      	ldr	r2, [pc, #220]	@ (80061e0 <HAL_ADC_Start_DMA+0x178>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d002      	beq.n	800610e <HAL_ADC_Start_DMA+0xa6>
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	e001      	b.n	8006112 <HAL_ADC_Start_DMA+0xaa>
 800610e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	6812      	ldr	r2, [r2, #0]
 8006116:	4293      	cmp	r3, r2
 8006118:	d002      	beq.n	8006120 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d105      	bne.n	800612c <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006124:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006130:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800613c:	f023 0206 	bic.w	r2, r3, #6
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	661a      	str	r2, [r3, #96]	@ 0x60
 8006144:	e002      	b.n	800614c <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	4a27      	ldr	r2, [pc, #156]	@ (80061f0 <HAL_ADC_Start_DMA+0x188>)
 8006152:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	4a26      	ldr	r2, [pc, #152]	@ (80061f4 <HAL_ADC_Start_DMA+0x18c>)
 800615a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006160:	4a25      	ldr	r2, [pc, #148]	@ (80061f8 <HAL_ADC_Start_DMA+0x190>)
 8006162:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	221c      	movs	r2, #28
 800616a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685a      	ldr	r2, [r3, #4]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0210 	orr.w	r2, r2, #16
 8006182:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0201 	orr.w	r2, r2, #1
 8006192:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3340      	adds	r3, #64	@ 0x40
 800619e:	4619      	mov	r1, r3
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f001 fbfe 	bl	80079a4 <HAL_DMA_Start_IT>
 80061a8:	4603      	mov	r3, r0
 80061aa:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7ff fd70 	bl	8005c96 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80061b6:	e00d      	b.n	80061d4 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80061c0:	e008      	b.n	80061d4 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80061ce:	e001      	b.n	80061d4 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80061d0:	2302      	movs	r3, #2
 80061d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80061d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	50000100 	.word	0x50000100
 80061e4:	50000300 	.word	0x50000300
 80061e8:	50000700 	.word	0x50000700
 80061ec:	50000400 	.word	0x50000400
 80061f0:	08007045 	.word	0x08007045
 80061f4:	0800711d 	.word	0x0800711d
 80061f8:	08007139 	.word	0x08007139

080061fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08a      	sub	sp, #40	@ 0x28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006204:	2300      	movs	r3, #0
 8006206:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006220:	d004      	beq.n	800622c <HAL_ADC_IRQHandler+0x30>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a87      	ldr	r2, [pc, #540]	@ (8006444 <HAL_ADC_IRQHandler+0x248>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d101      	bne.n	8006230 <HAL_ADC_IRQHandler+0x34>
 800622c:	4b86      	ldr	r3, [pc, #536]	@ (8006448 <HAL_ADC_IRQHandler+0x24c>)
 800622e:	e000      	b.n	8006232 <HAL_ADC_IRQHandler+0x36>
 8006230:	4b86      	ldr	r3, [pc, #536]	@ (800644c <HAL_ADC_IRQHandler+0x250>)
 8006232:	4618      	mov	r0, r3
 8006234:	f7ff fc9e 	bl	8005b74 <LL_ADC_GetMultimode>
 8006238:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_ADC_IRQHandler+0x78>
 8006244:	69bb      	ldr	r3, [r7, #24]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d012      	beq.n	8006274 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006252:	f003 0310 	and.w	r3, r3, #16
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 ffce 	bl	8007208 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2202      	movs	r2, #2
 8006272:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	f003 0304 	and.w	r3, r3, #4
 800627a:	2b00      	cmp	r3, #0
 800627c:	d004      	beq.n	8006288 <HAL_ADC_IRQHandler+0x8c>
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10a      	bne.n	800629e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800628e:	2b00      	cmp	r3, #0
 8006290:	f000 8085 	beq.w	800639e <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d07f      	beq.n	800639e <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062a2:	f003 0310 	and.w	r3, r3, #16
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d105      	bne.n	80062b6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7ff fbb8 	bl	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d064      	beq.n	8006390 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a5e      	ldr	r2, [pc, #376]	@ (8006444 <HAL_ADC_IRQHandler+0x248>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d002      	beq.n	80062d6 <HAL_ADC_IRQHandler+0xda>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	e001      	b.n	80062da <HAL_ADC_IRQHandler+0xde>
 80062d6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	4293      	cmp	r3, r2
 80062e0:	d008      	beq.n	80062f4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d005      	beq.n	80062f4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2b05      	cmp	r3, #5
 80062ec:	d002      	beq.n	80062f4 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b09      	cmp	r3, #9
 80062f2:	d104      	bne.n	80062fe <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	623b      	str	r3, [r7, #32]
 80062fc:	e00d      	b.n	800631a <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a50      	ldr	r2, [pc, #320]	@ (8006444 <HAL_ADC_IRQHandler+0x248>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d002      	beq.n	800630e <HAL_ADC_IRQHandler+0x112>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	e001      	b.n	8006312 <HAL_ADC_IRQHandler+0x116>
 800630e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006312:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006320:	2b00      	cmp	r3, #0
 8006322:	d135      	bne.n	8006390 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0308 	and.w	r3, r3, #8
 800632e:	2b08      	cmp	r3, #8
 8006330:	d12e      	bne.n	8006390 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4618      	mov	r0, r3
 8006338:	f7ff fcc1 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d11a      	bne.n	8006378 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 020c 	bic.w	r2, r2, #12
 8006350:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006356:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006362:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d112      	bne.n	8006390 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800636e:	f043 0201 	orr.w	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006376:	e00b      	b.n	8006390 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800637c:	f043 0210 	orr.w	r2, r3, #16
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006388:	f043 0201 	orr.w	r2, r3, #1
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f96d 	bl	8006670 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	220c      	movs	r2, #12
 800639c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800639e:	69fb      	ldr	r3, [r7, #28]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d004      	beq.n	80063b2 <HAL_ADC_IRQHandler+0x1b6>
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	f003 0320 	and.w	r3, r3, #32
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80a1 	beq.w	8006500 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 809b 	beq.w	8006500 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ce:	f003 0310 	and.w	r3, r3, #16
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d105      	bne.n	80063e2 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063da:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7ff fb61 	bl	8005aae <LL_ADC_INJ_IsTriggerSourceSWStart>
 80063ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7ff fb1c 	bl	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 80063f8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a11      	ldr	r2, [pc, #68]	@ (8006444 <HAL_ADC_IRQHandler+0x248>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d002      	beq.n	800640a <HAL_ADC_IRQHandler+0x20e>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	e001      	b.n	800640e <HAL_ADC_IRQHandler+0x212>
 800640a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	6812      	ldr	r2, [r2, #0]
 8006412:	4293      	cmp	r3, r2
 8006414:	d008      	beq.n	8006428 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b06      	cmp	r3, #6
 8006420:	d002      	beq.n	8006428 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	2b07      	cmp	r3, #7
 8006426:	d104      	bne.n	8006432 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	68db      	ldr	r3, [r3, #12]
 800642e:	623b      	str	r3, [r7, #32]
 8006430:	e014      	b.n	800645c <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a03      	ldr	r2, [pc, #12]	@ (8006444 <HAL_ADC_IRQHandler+0x248>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d009      	beq.n	8006450 <HAL_ADC_IRQHandler+0x254>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	e008      	b.n	8006454 <HAL_ADC_IRQHandler+0x258>
 8006442:	bf00      	nop
 8006444:	50000100 	.word	0x50000100
 8006448:	50000300 	.word	0x50000300
 800644c:	50000700 	.word	0x50000700
 8006450:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006454:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d047      	beq.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d007      	beq.n	800647c <HAL_ADC_IRQHandler+0x280>
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03f      	beq.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006472:	6a3b      	ldr	r3, [r7, #32]
 8006474:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006478:	2b00      	cmp	r3, #0
 800647a:	d13a      	bne.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006486:	2b40      	cmp	r3, #64	@ 0x40
 8006488:	d133      	bne.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d12e      	bne.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4618      	mov	r0, r3
 800649a:	f7ff fc23 	bl	8005ce4 <LL_ADC_INJ_IsConversionOngoing>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11a      	bne.n	80064da <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80064b2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d112      	bne.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d0:	f043 0201 	orr.w	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064d8:	e00b      	b.n	80064f2 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064de:	f043 0210 	orr.w	r2, r3, #16
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ea:	f043 0201 	orr.w	r2, r3, #1
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fe60 	bl	80071b8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2260      	movs	r2, #96	@ 0x60
 80064fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006506:	2b00      	cmp	r3, #0
 8006508:	d011      	beq.n	800652e <HAL_ADC_IRQHandler+0x332>
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00c      	beq.n	800652e <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006518:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f8b9 	bl	8006698 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006534:	2b00      	cmp	r3, #0
 8006536:	d012      	beq.n	800655e <HAL_ADC_IRQHandler+0x362>
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00d      	beq.n	800655e <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006546:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fe46 	bl	80071e0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800655c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006564:	2b00      	cmp	r3, #0
 8006566:	d012      	beq.n	800658e <HAL_ADC_IRQHandler+0x392>
 8006568:	69bb      	ldr	r3, [r7, #24]
 800656a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006576:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fe38 	bl	80071f4 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800658c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0310 	and.w	r3, r3, #16
 8006594:	2b00      	cmp	r3, #0
 8006596:	d043      	beq.n	8006620 <HAL_ADC_IRQHandler+0x424>
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	f003 0310 	and.w	r3, r3, #16
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d03e      	beq.n	8006620 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 80065aa:	2301      	movs	r3, #1
 80065ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ae:	e021      	b.n	80065f4 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d015      	beq.n	80065e2 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80065be:	d004      	beq.n	80065ca <HAL_ADC_IRQHandler+0x3ce>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a27      	ldr	r2, [pc, #156]	@ (8006664 <HAL_ADC_IRQHandler+0x468>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d101      	bne.n	80065ce <HAL_ADC_IRQHandler+0x3d2>
 80065ca:	4b27      	ldr	r3, [pc, #156]	@ (8006668 <HAL_ADC_IRQHandler+0x46c>)
 80065cc:	e000      	b.n	80065d0 <HAL_ADC_IRQHandler+0x3d4>
 80065ce:	4b27      	ldr	r3, [pc, #156]	@ (800666c <HAL_ADC_IRQHandler+0x470>)
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff fadd 	bl	8005b90 <LL_ADC_GetMultiDMATransfer>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00b      	beq.n	80065f4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80065dc:	2301      	movs	r3, #1
 80065de:	627b      	str	r3, [r7, #36]	@ 0x24
 80065e0:	e008      	b.n	80065f4 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80065f0:	2301      	movs	r3, #1
 80065f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80065f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d10e      	bne.n	8006618 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065fe:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660a:	f043 0202 	orr.w	r2, r3, #2
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f84a 	bl	80066ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2210      	movs	r2, #16
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006626:	2b00      	cmp	r3, #0
 8006628:	d018      	beq.n	800665c <HAL_ADC_IRQHandler+0x460>
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006638:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006644:	f043 0208 	orr.w	r2, r3, #8
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006654:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fdb8 	bl	80071cc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800665c:	bf00      	nop
 800665e:	3728      	adds	r7, #40	@ 0x28
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	50000100 	.word	0x50000100
 8006668:	50000300 	.word	0x50000300
 800666c:	50000700 	.word	0x50000700

08006670 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006678:	bf00      	nop
 800667a:	370c      	adds	r7, #12
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr

08006684 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b0b6      	sub	sp, #216	@ 0xd8
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d102      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x24>
 80066de:	2302      	movs	r3, #2
 80066e0:	f000 bc04 	b.w	8006eec <HAL_ADC_ConfigChannel+0x82c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7ff fae4 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f040 83e8 	bne.w	8006ece <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6818      	ldr	r0, [r3, #0]
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f7ff f9a3 	bl	8005a56 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4618      	mov	r0, r3
 8006716:	f7ff fad2 	bl	8005cbe <LL_ADC_REG_IsConversionOngoing>
 800671a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4618      	mov	r0, r3
 8006724:	f7ff fade 	bl	8005ce4 <LL_ADC_INJ_IsConversionOngoing>
 8006728:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800672c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006730:	2b00      	cmp	r3, #0
 8006732:	f040 81d9 	bne.w	8006ae8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006736:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800673a:	2b00      	cmp	r3, #0
 800673c:	f040 81d4 	bne.w	8006ae8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006748:	d10f      	bne.n	800676a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	4619      	mov	r1, r3
 8006756:	f7ff f9bd 	bl	8005ad4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff f951 	bl	8005a0a <LL_ADC_SetSamplingTimeCommonConfig>
 8006768:	e00e      	b.n	8006788 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6818      	ldr	r0, [r3, #0]
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	6819      	ldr	r1, [r3, #0]
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	461a      	mov	r2, r3
 8006778:	f7ff f9ac 	bl	8005ad4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	2100      	movs	r1, #0
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff f941 	bl	8005a0a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695a      	ldr	r2, [r3, #20]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	08db      	lsrs	r3, r3, #3
 8006794:	f003 0303 	and.w	r3, r3, #3
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	fa02 f303 	lsl.w	r3, r2, r3
 800679e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	d022      	beq.n	80067f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6818      	ldr	r0, [r3, #0]
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	6919      	ldr	r1, [r3, #16]
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067ba:	f7ff f89b 	bl	80058f4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6919      	ldr	r1, [r3, #16]
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	461a      	mov	r2, r3
 80067cc:	f7ff f8e7 	bl	800599e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d102      	bne.n	80067e6 <HAL_ADC_ConfigChannel+0x126>
 80067e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80067e4:	e000      	b.n	80067e8 <HAL_ADC_ConfigChannel+0x128>
 80067e6:	2300      	movs	r3, #0
 80067e8:	461a      	mov	r2, r3
 80067ea:	f7ff f8f3 	bl	80059d4 <LL_ADC_SetOffsetSaturation>
 80067ee:	e17b      	b.n	8006ae8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2100      	movs	r1, #0
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff f8a0 	bl	800593c <LL_ADC_GetOffsetChannel>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006802:	2b00      	cmp	r3, #0
 8006804:	d10a      	bne.n	800681c <HAL_ADC_ConfigChannel+0x15c>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2100      	movs	r1, #0
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff f895 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006812:	4603      	mov	r3, r0
 8006814:	0e9b      	lsrs	r3, r3, #26
 8006816:	f003 021f 	and.w	r2, r3, #31
 800681a:	e01e      	b.n	800685a <HAL_ADC_ConfigChannel+0x19a>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2100      	movs	r1, #0
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff f88a 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006828:	4603      	mov	r3, r0
 800682a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006832:	fa93 f3a3 	rbit	r3, r3
 8006836:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800683a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800683e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006842:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800684a:	2320      	movs	r3, #32
 800684c:	e004      	b.n	8006858 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800684e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006852:	fab3 f383 	clz	r3, r3
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006862:	2b00      	cmp	r3, #0
 8006864:	d105      	bne.n	8006872 <HAL_ADC_ConfigChannel+0x1b2>
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	0e9b      	lsrs	r3, r3, #26
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	e018      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x1e4>
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800687e:	fa93 f3a3 	rbit	r3, r3
 8006882:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8006886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800688a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800688e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8006896:	2320      	movs	r3, #32
 8006898:	e004      	b.n	80068a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800689a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800689e:	fab3 f383 	clz	r3, r3
 80068a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d106      	bne.n	80068b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2100      	movs	r1, #0
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff f859 	bl	8005968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	2101      	movs	r1, #1
 80068bc:	4618      	mov	r0, r3
 80068be:	f7ff f83d 	bl	800593c <LL_ADC_GetOffsetChannel>
 80068c2:	4603      	mov	r3, r0
 80068c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <HAL_ADC_ConfigChannel+0x222>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	2101      	movs	r1, #1
 80068d2:	4618      	mov	r0, r3
 80068d4:	f7ff f832 	bl	800593c <LL_ADC_GetOffsetChannel>
 80068d8:	4603      	mov	r3, r0
 80068da:	0e9b      	lsrs	r3, r3, #26
 80068dc:	f003 021f 	and.w	r2, r3, #31
 80068e0:	e01e      	b.n	8006920 <HAL_ADC_ConfigChannel+0x260>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7ff f827 	bl	800593c <LL_ADC_GetOffsetChannel>
 80068ee:	4603      	mov	r3, r0
 80068f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80068f8:	fa93 f3a3 	rbit	r3, r3
 80068fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8006900:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006904:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8006908:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d101      	bne.n	8006914 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8006910:	2320      	movs	r3, #32
 8006912:	e004      	b.n	800691e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8006914:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006918:	fab3 f383 	clz	r3, r3
 800691c:	b2db      	uxtb	r3, r3
 800691e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006928:	2b00      	cmp	r3, #0
 800692a:	d105      	bne.n	8006938 <HAL_ADC_ConfigChannel+0x278>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	0e9b      	lsrs	r3, r3, #26
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	e018      	b.n	800696a <HAL_ADC_ConfigChannel+0x2aa>
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006940:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006944:	fa93 f3a3 	rbit	r3, r3
 8006948:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800694c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006950:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8006954:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006958:	2b00      	cmp	r3, #0
 800695a:	d101      	bne.n	8006960 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800695c:	2320      	movs	r3, #32
 800695e:	e004      	b.n	800696a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006960:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006964:	fab3 f383 	clz	r3, r3
 8006968:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800696a:	429a      	cmp	r2, r3
 800696c:	d106      	bne.n	800697c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2200      	movs	r2, #0
 8006974:	2101      	movs	r1, #1
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fff6 	bl	8005968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f7fe ffda 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006988:	4603      	mov	r3, r0
 800698a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <HAL_ADC_ConfigChannel+0x2e8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2102      	movs	r1, #2
 8006998:	4618      	mov	r0, r3
 800699a:	f7fe ffcf 	bl	800593c <LL_ADC_GetOffsetChannel>
 800699e:	4603      	mov	r3, r0
 80069a0:	0e9b      	lsrs	r3, r3, #26
 80069a2:	f003 021f 	and.w	r2, r3, #31
 80069a6:	e01e      	b.n	80069e6 <HAL_ADC_ConfigChannel+0x326>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2102      	movs	r1, #2
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7fe ffc4 	bl	800593c <LL_ADC_GetOffsetChannel>
 80069b4:	4603      	mov	r3, r0
 80069b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80069be:	fa93 f3a3 	rbit	r3, r3
 80069c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80069c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80069ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80069d6:	2320      	movs	r3, #32
 80069d8:	e004      	b.n	80069e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80069da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80069de:	fab3 f383 	clz	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d105      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x33e>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	0e9b      	lsrs	r3, r3, #26
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	e016      	b.n	8006a2c <HAL_ADC_ConfigChannel+0x36c>
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a06:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006a0a:	fa93 f3a3 	rbit	r3, r3
 8006a0e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8006a10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006a12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8006a16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006a1e:	2320      	movs	r3, #32
 8006a20:	e004      	b.n	8006a2c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8006a22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006a26:	fab3 f383 	clz	r3, r3
 8006a2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d106      	bne.n	8006a3e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2200      	movs	r2, #0
 8006a36:	2102      	movs	r1, #2
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f7fe ff95 	bl	8005968 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2103      	movs	r1, #3
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fe ff79 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10a      	bne.n	8006a6a <HAL_ADC_ConfigChannel+0x3aa>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2103      	movs	r1, #3
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe ff6e 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006a60:	4603      	mov	r3, r0
 8006a62:	0e9b      	lsrs	r3, r3, #26
 8006a64:	f003 021f 	and.w	r2, r3, #31
 8006a68:	e017      	b.n	8006a9a <HAL_ADC_ConfigChannel+0x3da>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	2103      	movs	r1, #3
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe ff63 	bl	800593c <LL_ADC_GetOffsetChannel>
 8006a76:	4603      	mov	r3, r0
 8006a78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a7c:	fa93 f3a3 	rbit	r3, r3
 8006a80:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8006a82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a84:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8006a86:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006a8c:	2320      	movs	r3, #32
 8006a8e:	e003      	b.n	8006a98 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006a90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a92:	fab3 f383 	clz	r3, r3
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <HAL_ADC_ConfigChannel+0x3f2>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	0e9b      	lsrs	r3, r3, #26
 8006aac:	f003 031f 	and.w	r3, r3, #31
 8006ab0:	e011      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0x416>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ab8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006aba:	fa93 f3a3 	rbit	r3, r3
 8006abe:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8006ac0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ac2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8006ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8006aca:	2320      	movs	r3, #32
 8006acc:	e003      	b.n	8006ad6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8006ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ad0:	fab3 f383 	clz	r3, r3
 8006ad4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d106      	bne.n	8006ae8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2103      	movs	r1, #3
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7fe ff40 	bl	8005968 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f7ff f8bf 	bl	8005c70 <LL_ADC_IsEnabled>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f040 813d 	bne.w	8006d74 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6818      	ldr	r0, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	6819      	ldr	r1, [r3, #0]
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f7ff f810 	bl	8005b2c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	4aa2      	ldr	r2, [pc, #648]	@ (8006d9c <HAL_ADC_ConfigChannel+0x6dc>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f040 812e 	bne.w	8006d74 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10b      	bne.n	8006b40 <HAL_ADC_ConfigChannel+0x480>
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	0e9b      	lsrs	r3, r3, #26
 8006b2e:	3301      	adds	r3, #1
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2b09      	cmp	r3, #9
 8006b36:	bf94      	ite	ls
 8006b38:	2301      	movls	r3, #1
 8006b3a:	2300      	movhi	r3, #0
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	e019      	b.n	8006b74 <HAL_ADC_ConfigChannel+0x4b4>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b48:	fa93 f3a3 	rbit	r3, r3
 8006b4c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b50:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8006b52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d101      	bne.n	8006b5c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006b58:	2320      	movs	r3, #32
 8006b5a:	e003      	b.n	8006b64 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006b5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006b5e:	fab3 f383 	clz	r3, r3
 8006b62:	b2db      	uxtb	r3, r3
 8006b64:	3301      	adds	r3, #1
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	2b09      	cmp	r3, #9
 8006b6c:	bf94      	ite	ls
 8006b6e:	2301      	movls	r3, #1
 8006b70:	2300      	movhi	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d079      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d107      	bne.n	8006b94 <HAL_ADC_ConfigChannel+0x4d4>
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	0e9b      	lsrs	r3, r3, #26
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	069b      	lsls	r3, r3, #26
 8006b8e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006b92:	e015      	b.n	8006bc0 <HAL_ADC_ConfigChannel+0x500>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b9c:	fa93 f3a3 	rbit	r3, r3
 8006ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ba4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8006ba6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006bac:	2320      	movs	r3, #32
 8006bae:	e003      	b.n	8006bb8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb2:	fab3 f383 	clz	r3, r3
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	3301      	adds	r3, #1
 8006bba:	069b      	lsls	r3, r3, #26
 8006bbc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d109      	bne.n	8006be0 <HAL_ADC_ConfigChannel+0x520>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	0e9b      	lsrs	r3, r3, #26
 8006bd2:	3301      	adds	r3, #1
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	e017      	b.n	8006c10 <HAL_ADC_ConfigChannel+0x550>
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006be6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006be8:	fa93 f3a3 	rbit	r3, r3
 8006bec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8006bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8006bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8006bf8:	2320      	movs	r3, #32
 8006bfa:	e003      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8006bfc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	3301      	adds	r3, #1
 8006c06:	f003 031f 	and.w	r3, r3, #31
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c10:	ea42 0103 	orr.w	r1, r2, r3
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d10a      	bne.n	8006c36 <HAL_ADC_ConfigChannel+0x576>
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	0e9b      	lsrs	r3, r3, #26
 8006c26:	3301      	adds	r3, #1
 8006c28:	f003 021f 	and.w	r2, r3, #31
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	005b      	lsls	r3, r3, #1
 8006c30:	4413      	add	r3, r2
 8006c32:	051b      	lsls	r3, r3, #20
 8006c34:	e018      	b.n	8006c68 <HAL_ADC_ConfigChannel+0x5a8>
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3e:	fa93 f3a3 	rbit	r3, r3
 8006c42:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8006c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d101      	bne.n	8006c52 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006c4e:	2320      	movs	r3, #32
 8006c50:	e003      	b.n	8006c5a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8006c52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c54:	fab3 f383 	clz	r3, r3
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	f003 021f 	and.w	r2, r3, #31
 8006c60:	4613      	mov	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	4413      	add	r3, r2
 8006c66:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006c68:	430b      	orrs	r3, r1
 8006c6a:	e07e      	b.n	8006d6a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_ADC_ConfigChannel+0x5c8>
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	0e9b      	lsrs	r3, r3, #26
 8006c7e:	3301      	adds	r3, #1
 8006c80:	069b      	lsls	r3, r3, #26
 8006c82:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006c86:	e015      	b.n	8006cb4 <HAL_ADC_ConfigChannel+0x5f4>
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c90:	fa93 f3a3 	rbit	r3, r3
 8006c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8006c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c98:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d101      	bne.n	8006ca4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006ca0:	2320      	movs	r3, #32
 8006ca2:	e003      	b.n	8006cac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca6:	fab3 f383 	clz	r3, r3
 8006caa:	b2db      	uxtb	r3, r3
 8006cac:	3301      	adds	r3, #1
 8006cae:	069b      	lsls	r3, r3, #26
 8006cb0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d109      	bne.n	8006cd4 <HAL_ADC_ConfigChannel+0x614>
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	0e9b      	lsrs	r3, r3, #26
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	f003 031f 	and.w	r3, r3, #31
 8006ccc:	2101      	movs	r1, #1
 8006cce:	fa01 f303 	lsl.w	r3, r1, r3
 8006cd2:	e017      	b.n	8006d04 <HAL_ADC_ConfigChannel+0x644>
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cda:	6a3b      	ldr	r3, [r7, #32]
 8006cdc:	fa93 f3a3 	rbit	r3, r3
 8006ce0:	61fb      	str	r3, [r7, #28]
  return result;
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d101      	bne.n	8006cf0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8006cec:	2320      	movs	r3, #32
 8006cee:	e003      	b.n	8006cf8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cf2:	fab3 f383 	clz	r3, r3
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	f003 031f 	and.w	r3, r3, #31
 8006cfe:	2101      	movs	r1, #1
 8006d00:	fa01 f303 	lsl.w	r3, r1, r3
 8006d04:	ea42 0103 	orr.w	r1, r2, r3
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10d      	bne.n	8006d30 <HAL_ADC_ConfigChannel+0x670>
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	0e9b      	lsrs	r3, r3, #26
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f003 021f 	and.w	r2, r3, #31
 8006d20:	4613      	mov	r3, r2
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	3b1e      	subs	r3, #30
 8006d28:	051b      	lsls	r3, r3, #20
 8006d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006d2e:	e01b      	b.n	8006d68 <HAL_ADC_ConfigChannel+0x6a8>
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	fa93 f3a3 	rbit	r3, r3
 8006d3c:	613b      	str	r3, [r7, #16]
  return result;
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d101      	bne.n	8006d4c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006d48:	2320      	movs	r3, #32
 8006d4a:	e003      	b.n	8006d54 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	fab3 f383 	clz	r3, r3
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	3301      	adds	r3, #1
 8006d56:	f003 021f 	and.w	r2, r3, #31
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	005b      	lsls	r3, r3, #1
 8006d5e:	4413      	add	r3, r2
 8006d60:	3b1e      	subs	r3, #30
 8006d62:	051b      	lsls	r3, r3, #20
 8006d64:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d68:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d6e:	4619      	mov	r1, r3
 8006d70:	f7fe feb0 	bl	8005ad4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b09      	ldr	r3, [pc, #36]	@ (8006da0 <HAL_ADC_ConfigChannel+0x6e0>)
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 80af 	beq.w	8006ee0 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d8a:	d004      	beq.n	8006d96 <HAL_ADC_ConfigChannel+0x6d6>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a04      	ldr	r2, [pc, #16]	@ (8006da4 <HAL_ADC_ConfigChannel+0x6e4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d10a      	bne.n	8006dac <HAL_ADC_ConfigChannel+0x6ec>
 8006d96:	4b04      	ldr	r3, [pc, #16]	@ (8006da8 <HAL_ADC_ConfigChannel+0x6e8>)
 8006d98:	e009      	b.n	8006dae <HAL_ADC_ConfigChannel+0x6ee>
 8006d9a:	bf00      	nop
 8006d9c:	407f0000 	.word	0x407f0000
 8006da0:	80080000 	.word	0x80080000
 8006da4:	50000100 	.word	0x50000100
 8006da8:	50000300 	.word	0x50000300
 8006dac:	4b51      	ldr	r3, [pc, #324]	@ (8006ef4 <HAL_ADC_ConfigChannel+0x834>)
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe fd92 	bl	80058d8 <LL_ADC_GetCommonPathInternalCh>
 8006db4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a4e      	ldr	r2, [pc, #312]	@ (8006ef8 <HAL_ADC_ConfigChannel+0x838>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d004      	beq.n	8006dcc <HAL_ADC_ConfigChannel+0x70c>
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a4d      	ldr	r2, [pc, #308]	@ (8006efc <HAL_ADC_ConfigChannel+0x83c>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d134      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006dcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006dd0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d12e      	bne.n	8006e36 <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006de0:	d17e      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006dea:	d004      	beq.n	8006df6 <HAL_ADC_ConfigChannel+0x736>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a43      	ldr	r2, [pc, #268]	@ (8006f00 <HAL_ADC_ConfigChannel+0x840>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d101      	bne.n	8006dfa <HAL_ADC_ConfigChannel+0x73a>
 8006df6:	4a43      	ldr	r2, [pc, #268]	@ (8006f04 <HAL_ADC_ConfigChannel+0x844>)
 8006df8:	e000      	b.n	8006dfc <HAL_ADC_ConfigChannel+0x73c>
 8006dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8006ef4 <HAL_ADC_ConfigChannel+0x834>)
 8006dfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e00:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7fe fd53 	bl	80058b2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006e0c:	4b3e      	ldr	r3, [pc, #248]	@ (8006f08 <HAL_ADC_ConfigChannel+0x848>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	099b      	lsrs	r3, r3, #6
 8006e12:	4a3e      	ldr	r2, [pc, #248]	@ (8006f0c <HAL_ADC_ConfigChannel+0x84c>)
 8006e14:	fba2 2303 	umull	r2, r3, r2, r3
 8006e18:	099b      	lsrs	r3, r3, #6
 8006e1a:	1c5a      	adds	r2, r3, #1
 8006e1c:	4613      	mov	r3, r2
 8006e1e:	005b      	lsls	r3, r3, #1
 8006e20:	4413      	add	r3, r2
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006e26:	e002      	b.n	8006e2e <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f9      	bne.n	8006e28 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006e34:	e054      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a35      	ldr	r2, [pc, #212]	@ (8006f10 <HAL_ADC_ConfigChannel+0x850>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d120      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d11a      	bne.n	8006e82 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e54:	d144      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006e5e:	d004      	beq.n	8006e6a <HAL_ADC_ConfigChannel+0x7aa>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4a26      	ldr	r2, [pc, #152]	@ (8006f00 <HAL_ADC_ConfigChannel+0x840>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d101      	bne.n	8006e6e <HAL_ADC_ConfigChannel+0x7ae>
 8006e6a:	4a26      	ldr	r2, [pc, #152]	@ (8006f04 <HAL_ADC_ConfigChannel+0x844>)
 8006e6c:	e000      	b.n	8006e70 <HAL_ADC_ConfigChannel+0x7b0>
 8006e6e:	4a21      	ldr	r2, [pc, #132]	@ (8006ef4 <HAL_ADC_ConfigChannel+0x834>)
 8006e70:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e78:	4619      	mov	r1, r3
 8006e7a:	4610      	mov	r0, r2
 8006e7c:	f7fe fd19 	bl	80058b2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006e80:	e02e      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a23      	ldr	r2, [pc, #140]	@ (8006f14 <HAL_ADC_ConfigChannel+0x854>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d129      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006e8c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006e90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d123      	bne.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a18      	ldr	r2, [pc, #96]	@ (8006f00 <HAL_ADC_ConfigChannel+0x840>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d01e      	beq.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006eaa:	d004      	beq.n	8006eb6 <HAL_ADC_ConfigChannel+0x7f6>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a13      	ldr	r2, [pc, #76]	@ (8006f00 <HAL_ADC_ConfigChannel+0x840>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d101      	bne.n	8006eba <HAL_ADC_ConfigChannel+0x7fa>
 8006eb6:	4a13      	ldr	r2, [pc, #76]	@ (8006f04 <HAL_ADC_ConfigChannel+0x844>)
 8006eb8:	e000      	b.n	8006ebc <HAL_ADC_ConfigChannel+0x7fc>
 8006eba:	4a0e      	ldr	r2, [pc, #56]	@ (8006ef4 <HAL_ADC_ConfigChannel+0x834>)
 8006ebc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ec0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4610      	mov	r0, r2
 8006ec8:	f7fe fcf3 	bl	80058b2 <LL_ADC_SetCommonPathInternalCh>
 8006ecc:	e008      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006ee8:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	37d8      	adds	r7, #216	@ 0xd8
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	50000700 	.word	0x50000700
 8006ef8:	c3210000 	.word	0xc3210000
 8006efc:	90c00010 	.word	0x90c00010
 8006f00:	50000100 	.word	0x50000100
 8006f04:	50000300 	.word	0x50000300
 8006f08:	200000f4 	.word	0x200000f4
 8006f0c:	053e2d63 	.word	0x053e2d63
 8006f10:	c7520000 	.word	0xc7520000
 8006f14:	cb840000 	.word	0xcb840000

08006f18 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006f20:	2300      	movs	r3, #0
 8006f22:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f7fe fea1 	bl	8005c70 <LL_ADC_IsEnabled>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d176      	bne.n	8007022 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	689a      	ldr	r2, [r3, #8]
 8006f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800702c <ADC_Enable+0x114>)
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00d      	beq.n	8006f5e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f46:	f043 0210 	orr.w	r2, r3, #16
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f52:	f043 0201 	orr.w	r2, r3, #1
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	e062      	b.n	8007024 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fe fe70 	bl	8005c48 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f70:	d004      	beq.n	8006f7c <ADC_Enable+0x64>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a2e      	ldr	r2, [pc, #184]	@ (8007030 <ADC_Enable+0x118>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d101      	bne.n	8006f80 <ADC_Enable+0x68>
 8006f7c:	4b2d      	ldr	r3, [pc, #180]	@ (8007034 <ADC_Enable+0x11c>)
 8006f7e:	e000      	b.n	8006f82 <ADC_Enable+0x6a>
 8006f80:	4b2d      	ldr	r3, [pc, #180]	@ (8007038 <ADC_Enable+0x120>)
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fca8 	bl	80058d8 <LL_ADC_GetCommonPathInternalCh>
 8006f88:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006f8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d013      	beq.n	8006fba <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006f92:	4b2a      	ldr	r3, [pc, #168]	@ (800703c <ADC_Enable+0x124>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	099b      	lsrs	r3, r3, #6
 8006f98:	4a29      	ldr	r2, [pc, #164]	@ (8007040 <ADC_Enable+0x128>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	099b      	lsrs	r3, r3, #6
 8006fa0:	1c5a      	adds	r2, r3, #1
 8006fa2:	4613      	mov	r3, r2
 8006fa4:	005b      	lsls	r3, r3, #1
 8006fa6:	4413      	add	r3, r2
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fac:	e002      	b.n	8006fb4 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1f9      	bne.n	8006fae <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006fba:	f7fe fc39 	bl	8005830 <HAL_GetTick>
 8006fbe:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fc0:	e028      	b.n	8007014 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fe fe52 	bl	8005c70 <LL_ADC_IsEnabled>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d104      	bne.n	8006fdc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fe36 	bl	8005c48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006fdc:	f7fe fc28 	bl	8005830 <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d914      	bls.n	8007014 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 0301 	and.w	r3, r3, #1
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d00d      	beq.n	8007014 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ffc:	f043 0210 	orr.w	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007008:	f043 0201 	orr.w	r2, r3, #1
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e007      	b.n	8007024 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0301 	and.w	r3, r3, #1
 800701e:	2b01      	cmp	r3, #1
 8007020:	d1cf      	bne.n	8006fc2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}
 800702c:	8000003f 	.word	0x8000003f
 8007030:	50000100 	.word	0x50000100
 8007034:	50000300 	.word	0x50000300
 8007038:	50000700 	.word	0x50000700
 800703c:	200000f4 	.word	0x200000f4
 8007040:	053e2d63 	.word	0x053e2d63

08007044 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007050:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007056:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800705a:	2b00      	cmp	r3, #0
 800705c:	d14b      	bne.n	80070f6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007062:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d021      	beq.n	80070bc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4618      	mov	r0, r3
 800707e:	f7fe fcd7 	bl	8005a30 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d032      	beq.n	80070ee <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68db      	ldr	r3, [r3, #12]
 800708e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d12b      	bne.n	80070ee <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11f      	bne.n	80070ee <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070b2:	f043 0201 	orr.w	r2, r3, #1
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070ba:	e018      	b.n	80070ee <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	f003 0302 	and.w	r3, r3, #2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d111      	bne.n	80070ee <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070ce:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d105      	bne.n	80070ee <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070e6:	f043 0201 	orr.w	r2, r3, #1
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80070ee:	68f8      	ldr	r0, [r7, #12]
 80070f0:	f7ff fabe 	bl	8006670 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80070f4:	e00e      	b.n	8007114 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070fa:	f003 0310 	and.w	r3, r3, #16
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d003      	beq.n	800710a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	f7ff fad2 	bl	80066ac <HAL_ADC_ErrorCallback>
}
 8007108:	e004      	b.n	8007114 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007128:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f7ff faaa 	bl	8006684 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007130:	bf00      	nop
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b084      	sub	sp, #16
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007144:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800714a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff faa4 	bl	80066ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007164:	bf00      	nop
 8007166:	3710      	adds	r7, #16
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <LL_ADC_IsEnabled>:
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	f003 0301 	and.w	r3, r3, #1
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <LL_ADC_IsEnabled+0x18>
 8007180:	2301      	movs	r3, #1
 8007182:	e000      	b.n	8007186 <LL_ADC_IsEnabled+0x1a>
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	370c      	adds	r7, #12
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr

08007192 <LL_ADC_REG_IsConversionOngoing>:
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b04      	cmp	r3, #4
 80071a4:	d101      	bne.n	80071aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80071a6:	2301      	movs	r3, #1
 80071a8:	e000      	b.n	80071ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80071aa:	2300      	movs	r3, #0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80071e8:	bf00      	nop
 80071ea:	370c      	adds	r7, #12
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80071fc:	bf00      	nop
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007210:	bf00      	nop
 8007212:	370c      	adds	r7, #12
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr

0800721c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800721c:	b590      	push	{r4, r7, lr}
 800721e:	b0a1      	sub	sp, #132	@ 0x84
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007232:	2b01      	cmp	r3, #1
 8007234:	d101      	bne.n	800723a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007236:	2302      	movs	r3, #2
 8007238:	e0cb      	b.n	80073d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007242:	2300      	movs	r3, #0
 8007244:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007246:	2300      	movs	r3, #0
 8007248:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007252:	d102      	bne.n	800725a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007254:	4b61      	ldr	r3, [pc, #388]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007256:	60bb      	str	r3, [r7, #8]
 8007258:	e001      	b.n	800725e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800725a:	2300      	movs	r3, #0
 800725c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d10b      	bne.n	800727c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007268:	f043 0220 	orr.w	r2, r3, #32
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	e0aa      	b.n	80073d2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4618      	mov	r0, r3
 8007280:	f7ff ff87 	bl	8007192 <LL_ADC_REG_IsConversionOngoing>
 8007284:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4618      	mov	r0, r3
 800728c:	f7ff ff81 	bl	8007192 <LL_ADC_REG_IsConversionOngoing>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	f040 808c 	bne.w	80073b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007298:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800729a:	2b00      	cmp	r3, #0
 800729c:	f040 8088 	bne.w	80073b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a8:	d004      	beq.n	80072b4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a4b      	ldr	r2, [pc, #300]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80072b4:	4b4a      	ldr	r3, [pc, #296]	@ (80073e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 80072b6:	e000      	b.n	80072ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80072b8:	4b4a      	ldr	r3, [pc, #296]	@ (80073e4 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 80072ba:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d041      	beq.n	8007348 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80072c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	6859      	ldr	r1, [r3, #4]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072d6:	035b      	lsls	r3, r3, #13
 80072d8:	430b      	orrs	r3, r1
 80072da:	431a      	orrs	r2, r3
 80072dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072de:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072e8:	d004      	beq.n	80072f4 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a3b      	ldr	r2, [pc, #236]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d10f      	bne.n	8007314 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 80072f4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80072f8:	f7ff ff38 	bl	800716c <LL_ADC_IsEnabled>
 80072fc:	4604      	mov	r4, r0
 80072fe:	4837      	ldr	r0, [pc, #220]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007300:	f7ff ff34 	bl	800716c <LL_ADC_IsEnabled>
 8007304:	4603      	mov	r3, r0
 8007306:	4323      	orrs	r3, r4
 8007308:	2b00      	cmp	r3, #0
 800730a:	bf0c      	ite	eq
 800730c:	2301      	moveq	r3, #1
 800730e:	2300      	movne	r3, #0
 8007310:	b2db      	uxtb	r3, r3
 8007312:	e008      	b.n	8007326 <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8007314:	4834      	ldr	r0, [pc, #208]	@ (80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007316:	f7ff ff29 	bl	800716c <LL_ADC_IsEnabled>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d04c      	beq.n	80073c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800732a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800732c:	689b      	ldr	r3, [r3, #8]
 800732e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007332:	f023 030f 	bic.w	r3, r3, #15
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	6811      	ldr	r1, [r2, #0]
 800733a:	683a      	ldr	r2, [r7, #0]
 800733c:	6892      	ldr	r2, [r2, #8]
 800733e:	430a      	orrs	r2, r1
 8007340:	431a      	orrs	r2, r3
 8007342:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007344:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007346:	e03d      	b.n	80073c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007348:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007350:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007352:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800735c:	d004      	beq.n	8007368 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a1e      	ldr	r2, [pc, #120]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d10f      	bne.n	8007388 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8007368:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800736c:	f7ff fefe 	bl	800716c <LL_ADC_IsEnabled>
 8007370:	4604      	mov	r4, r0
 8007372:	481a      	ldr	r0, [pc, #104]	@ (80073dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007374:	f7ff fefa 	bl	800716c <LL_ADC_IsEnabled>
 8007378:	4603      	mov	r3, r0
 800737a:	4323      	orrs	r3, r4
 800737c:	2b00      	cmp	r3, #0
 800737e:	bf0c      	ite	eq
 8007380:	2301      	moveq	r3, #1
 8007382:	2300      	movne	r3, #0
 8007384:	b2db      	uxtb	r3, r3
 8007386:	e008      	b.n	800739a <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8007388:	4817      	ldr	r0, [pc, #92]	@ (80073e8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 800738a:	f7ff feef 	bl	800716c <LL_ADC_IsEnabled>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	bf0c      	ite	eq
 8007394:	2301      	moveq	r3, #1
 8007396:	2300      	movne	r3, #0
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d012      	beq.n	80073c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800739e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80073a6:	f023 030f 	bic.w	r3, r3, #15
 80073aa:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80073ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073ae:	e009      	b.n	80073c4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073b4:	f043 0220 	orr.w	r2, r3, #32
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80073c2:	e000      	b.n	80073c6 <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80073c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80073ce:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3784      	adds	r7, #132	@ 0x84
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd90      	pop	{r4, r7, pc}
 80073da:	bf00      	nop
 80073dc:	50000100 	.word	0x50000100
 80073e0:	50000300 	.word	0x50000300
 80073e4:	50000700 	.word	0x50000700
 80073e8:	50000400 	.word	0x50000400

080073ec <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b082      	sub	sp, #8
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e023      	b.n	8007446 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d106      	bne.n	8007418 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fd ff26 	bl	8005264 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007444:	2300      	movs	r3, #0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
	...

08007450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f003 0307 	and.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007460:	4b0c      	ldr	r3, [pc, #48]	@ (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800746c:	4013      	ands	r3, r2
 800746e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800747c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007482:	4a04      	ldr	r2, [pc, #16]	@ (8007494 <__NVIC_SetPriorityGrouping+0x44>)
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	60d3      	str	r3, [r2, #12]
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	e000ed00 	.word	0xe000ed00

08007498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800749c:	4b04      	ldr	r3, [pc, #16]	@ (80074b0 <__NVIC_GetPriorityGrouping+0x18>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	0a1b      	lsrs	r3, r3, #8
 80074a2:	f003 0307 	and.w	r3, r3, #7
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	e000ed00 	.word	0xe000ed00

080074b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	4603      	mov	r3, r0
 80074bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	db0b      	blt.n	80074de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80074c6:	79fb      	ldrb	r3, [r7, #7]
 80074c8:	f003 021f 	and.w	r2, r3, #31
 80074cc:	4907      	ldr	r1, [pc, #28]	@ (80074ec <__NVIC_EnableIRQ+0x38>)
 80074ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80074d2:	095b      	lsrs	r3, r3, #5
 80074d4:	2001      	movs	r0, #1
 80074d6:	fa00 f202 	lsl.w	r2, r0, r2
 80074da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80074de:	bf00      	nop
 80074e0:	370c      	adds	r7, #12
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	e000e100 	.word	0xe000e100

080074f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	6039      	str	r1, [r7, #0]
 80074fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80074fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007500:	2b00      	cmp	r3, #0
 8007502:	db0a      	blt.n	800751a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	b2da      	uxtb	r2, r3
 8007508:	490c      	ldr	r1, [pc, #48]	@ (800753c <__NVIC_SetPriority+0x4c>)
 800750a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800750e:	0112      	lsls	r2, r2, #4
 8007510:	b2d2      	uxtb	r2, r2
 8007512:	440b      	add	r3, r1
 8007514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007518:	e00a      	b.n	8007530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	b2da      	uxtb	r2, r3
 800751e:	4908      	ldr	r1, [pc, #32]	@ (8007540 <__NVIC_SetPriority+0x50>)
 8007520:	79fb      	ldrb	r3, [r7, #7]
 8007522:	f003 030f 	and.w	r3, r3, #15
 8007526:	3b04      	subs	r3, #4
 8007528:	0112      	lsls	r2, r2, #4
 800752a:	b2d2      	uxtb	r2, r2
 800752c:	440b      	add	r3, r1
 800752e:	761a      	strb	r2, [r3, #24]
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	e000e100 	.word	0xe000e100
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007544:	b480      	push	{r7}
 8007546:	b089      	sub	sp, #36	@ 0x24
 8007548:	af00      	add	r7, sp, #0
 800754a:	60f8      	str	r0, [r7, #12]
 800754c:	60b9      	str	r1, [r7, #8]
 800754e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	f1c3 0307 	rsb	r3, r3, #7
 800755e:	2b04      	cmp	r3, #4
 8007560:	bf28      	it	cs
 8007562:	2304      	movcs	r3, #4
 8007564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	3304      	adds	r3, #4
 800756a:	2b06      	cmp	r3, #6
 800756c:	d902      	bls.n	8007574 <NVIC_EncodePriority+0x30>
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	3b03      	subs	r3, #3
 8007572:	e000      	b.n	8007576 <NVIC_EncodePriority+0x32>
 8007574:	2300      	movs	r3, #0
 8007576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007578:	f04f 32ff 	mov.w	r2, #4294967295
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	fa02 f303 	lsl.w	r3, r2, r3
 8007582:	43da      	mvns	r2, r3
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	401a      	ands	r2, r3
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800758c:	f04f 31ff 	mov.w	r1, #4294967295
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	fa01 f303 	lsl.w	r3, r1, r3
 8007596:	43d9      	mvns	r1, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800759c:	4313      	orrs	r3, r2
         );
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3724      	adds	r7, #36	@ 0x24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
	...

080075ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	3b01      	subs	r3, #1
 80075b8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80075bc:	d301      	bcc.n	80075c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80075be:	2301      	movs	r3, #1
 80075c0:	e00f      	b.n	80075e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80075c2:	4a0a      	ldr	r2, [pc, #40]	@ (80075ec <SysTick_Config+0x40>)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	3b01      	subs	r3, #1
 80075c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80075ca:	210f      	movs	r1, #15
 80075cc:	f04f 30ff 	mov.w	r0, #4294967295
 80075d0:	f7ff ff8e 	bl	80074f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <SysTick_Config+0x40>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80075da:	4b04      	ldr	r3, [pc, #16]	@ (80075ec <SysTick_Config+0x40>)
 80075dc:	2207      	movs	r2, #7
 80075de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3708      	adds	r7, #8
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	e000e010 	.word	0xe000e010

080075f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7ff ff29 	bl	8007450 <__NVIC_SetPriorityGrouping>
}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007606:	b580      	push	{r7, lr}
 8007608:	b086      	sub	sp, #24
 800760a:	af00      	add	r7, sp, #0
 800760c:	4603      	mov	r3, r0
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007614:	f7ff ff40 	bl	8007498 <__NVIC_GetPriorityGrouping>
 8007618:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800761a:	687a      	ldr	r2, [r7, #4]
 800761c:	68b9      	ldr	r1, [r7, #8]
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff90 	bl	8007544 <NVIC_EncodePriority>
 8007624:	4602      	mov	r2, r0
 8007626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7ff ff5f 	bl	80074f0 <__NVIC_SetPriority>
}
 8007632:	bf00      	nop
 8007634:	3718      	adds	r7, #24
 8007636:	46bd      	mov	sp, r7
 8007638:	bd80      	pop	{r7, pc}

0800763a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800763a:	b580      	push	{r7, lr}
 800763c:	b082      	sub	sp, #8
 800763e:	af00      	add	r7, sp, #0
 8007640:	4603      	mov	r3, r0
 8007642:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007644:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007648:	4618      	mov	r0, r3
 800764a:	f7ff ff33 	bl	80074b4 <__NVIC_EnableIRQ>
}
 800764e:	bf00      	nop
 8007650:	3708      	adds	r7, #8
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f7ff ffa4 	bl	80075ac <SysTick_Config>
 8007664:	4603      	mov	r3, r0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d101      	bne.n	8007682 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e054      	b.n	800772c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7f5b      	ldrb	r3, [r3, #29]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d105      	bne.n	8007698 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2200      	movs	r2, #0
 8007690:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7fd fe06 	bl	80052a4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2202      	movs	r2, #2
 800769c:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	791b      	ldrb	r3, [r3, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d10c      	bne.n	80076c0 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a22      	ldr	r2, [pc, #136]	@ (8007734 <HAL_CRC_Init+0xc4>)
 80076ac:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f022 0218 	bic.w	r2, r2, #24
 80076bc:	609a      	str	r2, [r3, #8]
 80076be:	e00c      	b.n	80076da <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6899      	ldr	r1, [r3, #8]
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	461a      	mov	r2, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 f834 	bl	8007738 <HAL_CRCEx_Polynomial_Set>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80076d6:	2301      	movs	r3, #1
 80076d8:	e028      	b.n	800772c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d105      	bne.n	80076ee <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f04f 32ff 	mov.w	r2, #4294967295
 80076ea:	611a      	str	r2, [r3, #16]
 80076ec:	e004      	b.n	80076f8 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	6912      	ldr	r2, [r2, #16]
 80076f6:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	695a      	ldr	r2, [r3, #20]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	430a      	orrs	r2, r1
 800770c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2201      	movs	r2, #1
 8007728:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	04c11db7 	.word	0x04c11db7

08007738 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007738:	b480      	push	{r7}
 800773a:	b087      	sub	sp, #28
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007748:	231f      	movs	r3, #31
 800774a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f003 0301 	and.w	r3, r3, #1
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]
 800775a:	e063      	b.n	8007824 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800775c:	bf00      	nop
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	613a      	str	r2, [r7, #16]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d009      	beq.n	800777c <HAL_CRCEx_Polynomial_Set+0x44>
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	68ba      	ldr	r2, [r7, #8]
 8007770:	fa22 f303 	lsr.w	r3, r2, r3
 8007774:	f003 0301 	and.w	r3, r3, #1
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0f0      	beq.n	800775e <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2b18      	cmp	r3, #24
 8007780:	d846      	bhi.n	8007810 <HAL_CRCEx_Polynomial_Set+0xd8>
 8007782:	a201      	add	r2, pc, #4	@ (adr r2, 8007788 <HAL_CRCEx_Polynomial_Set+0x50>)
 8007784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007788:	08007817 	.word	0x08007817
 800778c:	08007811 	.word	0x08007811
 8007790:	08007811 	.word	0x08007811
 8007794:	08007811 	.word	0x08007811
 8007798:	08007811 	.word	0x08007811
 800779c:	08007811 	.word	0x08007811
 80077a0:	08007811 	.word	0x08007811
 80077a4:	08007811 	.word	0x08007811
 80077a8:	08007805 	.word	0x08007805
 80077ac:	08007811 	.word	0x08007811
 80077b0:	08007811 	.word	0x08007811
 80077b4:	08007811 	.word	0x08007811
 80077b8:	08007811 	.word	0x08007811
 80077bc:	08007811 	.word	0x08007811
 80077c0:	08007811 	.word	0x08007811
 80077c4:	08007811 	.word	0x08007811
 80077c8:	080077f9 	.word	0x080077f9
 80077cc:	08007811 	.word	0x08007811
 80077d0:	08007811 	.word	0x08007811
 80077d4:	08007811 	.word	0x08007811
 80077d8:	08007811 	.word	0x08007811
 80077dc:	08007811 	.word	0x08007811
 80077e0:	08007811 	.word	0x08007811
 80077e4:	08007811 	.word	0x08007811
 80077e8:	080077ed 	.word	0x080077ed
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	2b06      	cmp	r3, #6
 80077f0:	d913      	bls.n	800781a <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80077f6:	e010      	b.n	800781a <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	2b07      	cmp	r3, #7
 80077fc:	d90f      	bls.n	800781e <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8007802:	e00c      	b.n	800781e <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d90b      	bls.n	8007822 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800780e:	e008      	b.n	8007822 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
        break;
 8007814:	e006      	b.n	8007824 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007816:	bf00      	nop
 8007818:	e004      	b.n	8007824 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800781a:	bf00      	nop
 800781c:	e002      	b.n	8007824 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800781e:	bf00      	nop
 8007820:	e000      	b.n	8007824 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007822:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8007824:	7dfb      	ldrb	r3, [r7, #23]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f023 0118 	bic.w	r1, r3, #24
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	430a      	orrs	r2, r1
 8007844:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
}
 8007848:	4618      	mov	r0, r3
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e08d      	b.n	8007982 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	4b47      	ldr	r3, [pc, #284]	@ (800798c <HAL_DMA_Init+0x138>)
 800786e:	429a      	cmp	r2, r3
 8007870:	d80f      	bhi.n	8007892 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	461a      	mov	r2, r3
 8007878:	4b45      	ldr	r3, [pc, #276]	@ (8007990 <HAL_DMA_Init+0x13c>)
 800787a:	4413      	add	r3, r2
 800787c:	4a45      	ldr	r2, [pc, #276]	@ (8007994 <HAL_DMA_Init+0x140>)
 800787e:	fba2 2303 	umull	r2, r3, r2, r3
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	009a      	lsls	r2, r3, #2
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a42      	ldr	r2, [pc, #264]	@ (8007998 <HAL_DMA_Init+0x144>)
 800788e:	641a      	str	r2, [r3, #64]	@ 0x40
 8007890:	e00e      	b.n	80078b0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	461a      	mov	r2, r3
 8007898:	4b40      	ldr	r3, [pc, #256]	@ (800799c <HAL_DMA_Init+0x148>)
 800789a:	4413      	add	r3, r2
 800789c:	4a3d      	ldr	r2, [pc, #244]	@ (8007994 <HAL_DMA_Init+0x140>)
 800789e:	fba2 2303 	umull	r2, r3, r2, r3
 80078a2:	091b      	lsrs	r3, r3, #4
 80078a4:	009a      	lsls	r2, r3, #2
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	4a3c      	ldr	r2, [pc, #240]	@ (80079a0 <HAL_DMA_Init+0x14c>)
 80078ae:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80078c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ca:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80078d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80078e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80078ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 f9b6 	bl	8007c74 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007910:	d102      	bne.n	8007918 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685a      	ldr	r2, [r3, #4]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007920:	b2d2      	uxtb	r2, r2
 8007922:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800792c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d010      	beq.n	8007958 <HAL_DMA_Init+0x104>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	2b04      	cmp	r3, #4
 800793c:	d80c      	bhi.n	8007958 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f9d6 	bl	8007cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007948:	2200      	movs	r2, #0
 800794a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	e008      	b.n	800796a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2201      	movs	r2, #1
 8007974:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007980:	2300      	movs	r3, #0
}
 8007982:	4618      	mov	r0, r3
 8007984:	3710      	adds	r7, #16
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	40020407 	.word	0x40020407
 8007990:	bffdfff8 	.word	0xbffdfff8
 8007994:	cccccccd 	.word	0xcccccccd
 8007998:	40020000 	.word	0x40020000
 800799c:	bffdfbf8 	.word	0xbffdfbf8
 80079a0:	40020400 	.word	0x40020400

080079a4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
 80079b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079b2:	2300      	movs	r3, #0
 80079b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d101      	bne.n	80079c4 <HAL_DMA_Start_IT+0x20>
 80079c0:	2302      	movs	r3, #2
 80079c2:	e066      	b.n	8007a92 <HAL_DMA_Start_IT+0xee>
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80079d2:	b2db      	uxtb	r3, r3
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d155      	bne.n	8007a84 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0201 	bic.w	r2, r2, #1
 80079f4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	68b9      	ldr	r1, [r7, #8]
 80079fc:	68f8      	ldr	r0, [r7, #12]
 80079fe:	f000 f8fb 	bl	8007bf8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d008      	beq.n	8007a1c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 020e 	orr.w	r2, r2, #14
 8007a18:	601a      	str	r2, [r3, #0]
 8007a1a:	e00f      	b.n	8007a3c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681a      	ldr	r2, [r3, #0]
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 0204 	bic.w	r2, r2, #4
 8007a2a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f042 020a 	orr.w	r2, r2, #10
 8007a3a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a58:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d007      	beq.n	8007a72 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a6c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a70:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f042 0201 	orr.w	r2, r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	e005      	b.n	8007a90 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2200      	movs	r2, #0
 8007a88:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007a8c:	2302      	movs	r3, #2
 8007a8e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007a90:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3718      	adds	r7, #24
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007ab6:	f003 031f 	and.w	r3, r3, #31
 8007aba:	2204      	movs	r2, #4
 8007abc:	409a      	lsls	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d026      	beq.n	8007b14 <HAL_DMA_IRQHandler+0x7a>
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	f003 0304 	and.w	r3, r3, #4
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d021      	beq.n	8007b14 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d107      	bne.n	8007aee <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	681a      	ldr	r2, [r3, #0]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0204 	bic.w	r2, r2, #4
 8007aec:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007af2:	f003 021f 	and.w	r2, r3, #31
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007afa:	2104      	movs	r1, #4
 8007afc:	fa01 f202 	lsl.w	r2, r1, r2
 8007b00:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d071      	beq.n	8007bee <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007b12:	e06c      	b.n	8007bee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b18:	f003 031f 	and.w	r3, r3, #31
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	4013      	ands	r3, r2
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d02e      	beq.n	8007b86 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d029      	beq.n	8007b86 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d10b      	bne.n	8007b58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f022 020a 	bic.w	r2, r2, #10
 8007b4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b5c:	f003 021f 	and.w	r2, r3, #31
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b64:	2102      	movs	r1, #2
 8007b66:	fa01 f202 	lsl.w	r2, r1, r2
 8007b6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d038      	beq.n	8007bee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007b84:	e033      	b.n	8007bee <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b8a:	f003 031f 	and.w	r3, r3, #31
 8007b8e:	2208      	movs	r2, #8
 8007b90:	409a      	lsls	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	4013      	ands	r3, r2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d02a      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d025      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 020e 	bic.w	r2, r2, #14
 8007bb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bb8:	f003 021f 	and.w	r2, r3, #31
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	fa01 f202 	lsl.w	r2, r1, r2
 8007bc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
}
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	60f8      	str	r0, [r7, #12]
 8007c00:	60b9      	str	r1, [r7, #8]
 8007c02:	607a      	str	r2, [r7, #4]
 8007c04:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c0e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d004      	beq.n	8007c22 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007c20:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c26:	f003 021f 	and.w	r2, r3, #31
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c2e:	2101      	movs	r1, #1
 8007c30:	fa01 f202 	lsl.w	r2, r1, r2
 8007c34:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	683a      	ldr	r2, [r7, #0]
 8007c3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	d108      	bne.n	8007c58 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007c56:	e007      	b.n	8007c68 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68ba      	ldr	r2, [r7, #8]
 8007c5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	60da      	str	r2, [r3, #12]
}
 8007c68:	bf00      	nop
 8007c6a:	3714      	adds	r7, #20
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b087      	sub	sp, #28
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	461a      	mov	r2, r3
 8007c82:	4b16      	ldr	r3, [pc, #88]	@ (8007cdc <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d802      	bhi.n	8007c8e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007c88:	4b15      	ldr	r3, [pc, #84]	@ (8007ce0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e001      	b.n	8007c92 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007c8e:	4b15      	ldr	r3, [pc, #84]	@ (8007ce4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007c90:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	3b08      	subs	r3, #8
 8007c9e:	4a12      	ldr	r2, [pc, #72]	@ (8007ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca4:	091b      	lsrs	r3, r3, #4
 8007ca6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007cac:	089b      	lsrs	r3, r3, #2
 8007cae:	009a      	lsls	r2, r3, #2
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	461a      	mov	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8007cec <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007cbe:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f003 031f 	and.w	r3, r3, #31
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	409a      	lsls	r2, r3
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007cce:	bf00      	nop
 8007cd0:	371c      	adds	r7, #28
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	40020407 	.word	0x40020407
 8007ce0:	40020800 	.word	0x40020800
 8007ce4:	40020820 	.word	0x40020820
 8007ce8:	cccccccd 	.word	0xcccccccd
 8007cec:	40020880 	.word	0x40020880

08007cf0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007d00:	68fa      	ldr	r2, [r7, #12]
 8007d02:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	461a      	mov	r2, r3
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	4a08      	ldr	r2, [pc, #32]	@ (8007d34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007d12:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	409a      	lsls	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007d24:	bf00      	nop
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr
 8007d30:	1000823f 	.word	0x1000823f
 8007d34:	40020940 	.word	0x40020940

08007d38 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e147      	b.n	8007fda <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007d50:	b2db      	uxtb	r3, r3
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d106      	bne.n	8007d64 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f7fd fac0 	bl	80052e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0210 	bic.w	r2, r2, #16
 8007d72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d74:	f7fd fd5c 	bl	8005830 <HAL_GetTick>
 8007d78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007d7a:	e012      	b.n	8007da2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007d7c:	f7fd fd58 	bl	8005830 <HAL_GetTick>
 8007d80:	4602      	mov	r2, r0
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b0a      	cmp	r3, #10
 8007d88:	d90b      	bls.n	8007da2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d8e:	f043 0201 	orr.w	r2, r3, #1
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2203      	movs	r2, #3
 8007d9a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e11b      	b.n	8007fda <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d0e5      	beq.n	8007d7c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	699a      	ldr	r2, [r3, #24]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007dc0:	f7fd fd36 	bl	8005830 <HAL_GetTick>
 8007dc4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007dc6:	e012      	b.n	8007dee <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007dc8:	f7fd fd32 	bl	8005830 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	1ad3      	subs	r3, r2, r3
 8007dd2:	2b0a      	cmp	r3, #10
 8007dd4:	d90b      	bls.n	8007dee <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dda:	f043 0201 	orr.w	r2, r3, #1
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2203      	movs	r2, #3
 8007de6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e0f5      	b.n	8007fda <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f003 0301 	and.w	r3, r3, #1
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0e5      	beq.n	8007dc8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	f042 0202 	orr.w	r2, r2, #2
 8007e0a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a74      	ldr	r2, [pc, #464]	@ (8007fe4 <HAL_FDCAN_Init+0x2ac>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d103      	bne.n	8007e1e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007e16:	4a74      	ldr	r2, [pc, #464]	@ (8007fe8 <HAL_FDCAN_Init+0x2b0>)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	7c1b      	ldrb	r3, [r3, #16]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d108      	bne.n	8007e38 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	699a      	ldr	r2, [r3, #24]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e34:	619a      	str	r2, [r3, #24]
 8007e36:	e007      	b.n	8007e48 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e46:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	7c5b      	ldrb	r3, [r3, #17]
 8007e4c:	2b01      	cmp	r3, #1
 8007e4e:	d108      	bne.n	8007e62 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	699a      	ldr	r2, [r3, #24]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007e5e:	619a      	str	r2, [r3, #24]
 8007e60:	e007      	b.n	8007e72 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699a      	ldr	r2, [r3, #24]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007e70:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	7c9b      	ldrb	r3, [r3, #18]
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d108      	bne.n	8007e8c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	699a      	ldr	r2, [r3, #24]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007e88:	619a      	str	r2, [r3, #24]
 8007e8a:	e007      	b.n	8007e9c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699a      	ldr	r2, [r3, #24]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007e9a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	699b      	ldr	r3, [r3, #24]
 8007ea2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	689a      	ldr	r2, [r3, #8]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	699a      	ldr	r2, [r3, #24]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007ec0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	691a      	ldr	r2, [r3, #16]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0210 	bic.w	r2, r2, #16
 8007ed0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	68db      	ldr	r3, [r3, #12]
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d108      	bne.n	8007eec <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699a      	ldr	r2, [r3, #24]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f042 0204 	orr.w	r2, r2, #4
 8007ee8:	619a      	str	r2, [r3, #24]
 8007eea:	e02c      	b.n	8007f46 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d028      	beq.n	8007f46 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d01c      	beq.n	8007f36 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	699a      	ldr	r2, [r3, #24]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007f0a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	691a      	ldr	r2, [r3, #16]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f042 0210 	orr.w	r2, r2, #16
 8007f1a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d110      	bne.n	8007f46 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0220 	orr.w	r2, r2, #32
 8007f32:	619a      	str	r2, [r3, #24]
 8007f34:	e007      	b.n	8007f46 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	699a      	ldr	r2, [r3, #24]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f042 0220 	orr.w	r2, r2, #32
 8007f44:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	699b      	ldr	r3, [r3, #24]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	69db      	ldr	r3, [r3, #28]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f56:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
 8007f5c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007f5e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	3b01      	subs	r3, #1
 8007f68:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007f6e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007f70:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f7a:	d115      	bne.n	8007fa8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f86:	3b01      	subs	r3, #1
 8007f88:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007f8a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f90:	3b01      	subs	r3, #1
 8007f92:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007f94:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007fa4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007fa6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 fc56 	bl	8008870 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40006400 	.word	0x40006400
 8007fe8:	40006500 	.word	0x40006500

08007fec <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b087      	sub	sp, #28
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ffc:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ffe:	7dfb      	ldrb	r3, [r7, #23]
 8008000:	2b01      	cmp	r3, #1
 8008002:	d002      	beq.n	800800a <HAL_FDCAN_ConfigFilter+0x1e>
 8008004:	7dfb      	ldrb	r3, [r7, #23]
 8008006:	2b02      	cmp	r3, #2
 8008008:	d13d      	bne.n	8008086 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d119      	bne.n	8008046 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	689b      	ldr	r3, [r3, #8]
 8008016:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800801e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	691b      	ldr	r3, [r3, #16]
 8008024:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008026:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800802c:	4313      	orrs	r3, r2
 800802e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4413      	add	r3, r2
 800803c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	e01d      	b.n	8008082 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	075a      	lsls	r2, r3, #29
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	4313      	orrs	r3, r2
 8008052:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	689b      	ldr	r3, [r3, #8]
 8008058:	079a      	lsls	r2, r3, #30
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	695b      	ldr	r3, [r3, #20]
 800805e:	4313      	orrs	r3, r2
 8008060:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	00db      	lsls	r3, r3, #3
 800806c:	4413      	add	r3, r2
 800806e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	693a      	ldr	r2, [r7, #16]
 8008074:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3304      	adds	r3, #4
 800807a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	68fa      	ldr	r2, [r7, #12]
 8008080:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008082:	2300      	movs	r3, #0
 8008084:	e006      	b.n	8008094 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800808a:	f043 0202 	orr.w	r2, r3, #2
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
  }
}
 8008094:	4618      	mov	r0, r3
 8008096:	371c      	adds	r7, #28
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr

080080a0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80080a0:	b480      	push	{r7}
 80080a2:	b083      	sub	sp, #12
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d110      	bne.n	80080d6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	699a      	ldr	r2, [r3, #24]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0201 	bic.w	r2, r2, #1
 80080ca:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	e006      	b.n	80080e4 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80080da:	f043 0204 	orr.w	r2, r3, #4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	60f8      	str	r0, [r7, #12]
 80080f8:	60b9      	str	r1, [r7, #8]
 80080fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d12c      	bne.n	8008162 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d007      	beq.n	8008128 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800811c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008124:	2301      	movs	r3, #1
 8008126:	e023      	b.n	8008170 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f000 fbf8 	bl	8008934 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2101      	movs	r1, #1
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	fa01 f202 	lsl.w	r2, r1, r2
 8008150:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008154:	2201      	movs	r2, #1
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	409a      	lsls	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e006      	b.n	8008170 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008166:	f043 0208 	orr.w	r2, r3, #8
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
  }
}
 8008170:	4618      	mov	r0, r3
 8008172:	3718      	adds	r7, #24
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008178:	b480      	push	{r7}
 800817a:	b08b      	sub	sp, #44	@ 0x2c
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008190:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008192:	7efb      	ldrb	r3, [r7, #27]
 8008194:	2b02      	cmp	r3, #2
 8008196:	f040 80e8 	bne.w	800836a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	2b40      	cmp	r3, #64	@ 0x40
 800819e:	d137      	bne.n	8008210 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081a8:	f003 030f 	and.w	r3, r3, #15
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80081b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80081bc:	2301      	movs	r3, #1
 80081be:	e0db      	b.n	8008378 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081c8:	0e1b      	lsrs	r3, r3, #24
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d10a      	bne.n	80081e8 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80081da:	0a5b      	lsrs	r3, r3, #9
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d101      	bne.n	80081e8 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80081e4:	2301      	movs	r3, #1
 80081e6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081f0:	0a1b      	lsrs	r3, r3, #8
 80081f2:	f003 0303 	and.w	r3, r3, #3
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	4413      	add	r3, r2
 80081fa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008200:	69fa      	ldr	r2, [r7, #28]
 8008202:	4613      	mov	r3, r2
 8008204:	00db      	lsls	r3, r3, #3
 8008206:	4413      	add	r3, r2
 8008208:	00db      	lsls	r3, r3, #3
 800820a:	440b      	add	r3, r1
 800820c:	627b      	str	r3, [r7, #36]	@ 0x24
 800820e:	e036      	b.n	800827e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	2b00      	cmp	r3, #0
 800821e:	d107      	bne.n	8008230 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008224:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e0a3      	b.n	8008378 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008238:	0e1b      	lsrs	r3, r3, #24
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b01      	cmp	r3, #1
 8008240:	d10a      	bne.n	8008258 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800824a:	0a1b      	lsrs	r3, r3, #8
 800824c:	f003 0301 	and.w	r3, r3, #1
 8008250:	2b01      	cmp	r3, #1
 8008252:	d101      	bne.n	8008258 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008254:	2301      	movs	r3, #1
 8008256:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008260:	0a1b      	lsrs	r3, r3, #8
 8008262:	f003 0303 	and.w	r3, r3, #3
 8008266:	69fa      	ldr	r2, [r7, #28]
 8008268:	4413      	add	r3, r2
 800826a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008270:	69fa      	ldr	r2, [r7, #28]
 8008272:	4613      	mov	r3, r2
 8008274:	00db      	lsls	r3, r3, #3
 8008276:	4413      	add	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	440b      	add	r3, r1
 800827c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d107      	bne.n	80082a2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	0c9b      	lsrs	r3, r3, #18
 8008298:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	e005      	b.n	80082ae <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80082ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80082ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80082c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c8:	3304      	adds	r3, #4
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80082cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80082d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	0c1b      	lsrs	r3, r3, #16
 80082dc:	f003 020f 	and.w	r2, r3, #15
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80082e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80082f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80082fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	0fda      	lsrs	r2, r3, #31
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008316:	3304      	adds	r3, #4
 8008318:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800831e:	2300      	movs	r3, #0
 8008320:	623b      	str	r3, [r7, #32]
 8008322:	e00a      	b.n	800833a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008324:	697a      	ldr	r2, [r7, #20]
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	441a      	add	r2, r3
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	440b      	add	r3, r1
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008334:	6a3b      	ldr	r3, [r7, #32]
 8008336:	3301      	adds	r3, #1
 8008338:	623b      	str	r3, [r7, #32]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	68db      	ldr	r3, [r3, #12]
 800833e:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <HAL_FDCAN_GetRxMessage+0x20c>)
 8008340:	5cd3      	ldrb	r3, [r2, r3]
 8008342:	461a      	mov	r2, r3
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	4293      	cmp	r3, r2
 8008348:	d3ec      	bcc.n	8008324 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	2b40      	cmp	r3, #64	@ 0x40
 800834e:	d105      	bne.n	800835c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	69fa      	ldr	r2, [r7, #28]
 8008356:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800835a:	e004      	b.n	8008366 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	69fa      	ldr	r2, [r7, #28]
 8008362:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	e006      	b.n	8008378 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800836e:	f043 0208 	orr.w	r2, r3, #8
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008376:	2301      	movs	r3, #1
  }
}
 8008378:	4618      	mov	r0, r3
 800837a:	372c      	adds	r7, #44	@ 0x2c
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	0800d484 	.word	0x0800d484

08008388 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008388:	b480      	push	{r7}
 800838a:	b087      	sub	sp, #28
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800839a:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800839c:	7dfb      	ldrb	r3, [r7, #23]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d003      	beq.n	80083aa <HAL_FDCAN_ActivateNotification+0x22>
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	f040 80c8 	bne.w	800853a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083b0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f003 0307 	and.w	r3, r3, #7
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d004      	beq.n	80083c6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	f003 0301 	and.w	r3, r3, #1
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d03b      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d004      	beq.n	80083da <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f003 0302 	and.w	r3, r3, #2
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d031      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80083da:	68bb      	ldr	r3, [r7, #8]
 80083dc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d004      	beq.n	80083ee <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	f003 0304 	and.w	r3, r3, #4
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d027      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d004      	beq.n	8008402 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d01d      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008408:	2b00      	cmp	r3, #0
 800840a:	d004      	beq.n	8008416 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f003 0310 	and.w	r3, r3, #16
 8008412:	2b00      	cmp	r3, #0
 8008414:	d013      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	f003 0320 	and.w	r3, r3, #32
 8008426:	2b00      	cmp	r3, #0
 8008428:	d009      	beq.n	800843e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00c      	beq.n	800844e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	f003 0307 	and.w	r3, r3, #7
 8008454:	2b00      	cmp	r3, #0
 8008456:	d004      	beq.n	8008462 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	f003 0301 	and.w	r3, r3, #1
 800845e:	2b00      	cmp	r3, #0
 8008460:	d13b      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d131      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800847c:	2b00      	cmp	r3, #0
 800847e:	d004      	beq.n	800848a <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f003 0304 	and.w	r3, r3, #4
 8008486:	2b00      	cmp	r3, #0
 8008488:	d127      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	f003 0308 	and.w	r3, r3, #8
 800849a:	2b00      	cmp	r3, #0
 800849c:	d11d      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f003 0310 	and.w	r3, r3, #16
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d113      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d004      	beq.n	80084c6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80084bc:	693b      	ldr	r3, [r7, #16]
 80084be:	f003 0320 	and.w	r3, r3, #32
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00c      	beq.n	80084ea <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d007      	beq.n	80084ea <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 0202 	orr.w	r2, r2, #2
 80084e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d009      	beq.n	8008508 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	430a      	orrs	r2, r1
 8008504:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	430a      	orrs	r2, r1
 8008522:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	68ba      	ldr	r2, [r7, #8]
 8008532:	430a      	orrs	r2, r1
 8008534:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	e006      	b.n	8008548 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800853e:	f043 0202 	orr.w	r2, r3, #2
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
  }
}
 8008548:	4618      	mov	r0, r3
 800854a:	371c      	adds	r7, #28
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08c      	sub	sp, #48	@ 0x30
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008562:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8008566:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800856e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008570:	4013      	ands	r3, r2
 8008572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800857a:	f003 0307 	and.w	r3, r3, #7
 800857e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008586:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008588:	4013      	ands	r3, r2
 800858a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008592:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008596:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800859e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a0:	4013      	ands	r3, r2
 80085a2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085aa:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80085ae:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085b6:	6a3a      	ldr	r2, [r7, #32]
 80085b8:	4013      	ands	r3, r2
 80085ba:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80085c6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	4013      	ands	r3, r2
 80085d2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085da:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085e2:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00b      	beq.n	8008606 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d006      	beq.n	8008606 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2240      	movs	r2, #64	@ 0x40
 80085fe:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f916 	bl	8008832 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800860c:	2b00      	cmp	r3, #0
 800860e:	d019      	beq.n	8008644 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008610:	69bb      	ldr	r3, [r7, #24]
 8008612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008616:	2b00      	cmp	r3, #0
 8008618:	d014      	beq.n	8008644 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008622:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800862c:	693a      	ldr	r2, [r7, #16]
 800862e:	4013      	ands	r3, r2
 8008630:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800863a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800863c:	6939      	ldr	r1, [r7, #16]
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f8d8 	bl	80087f4 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8008644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008646:	2b00      	cmp	r3, #0
 8008648:	d007      	beq.n	800865a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008650:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8008652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8a2 	bl	800879e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	2b00      	cmp	r3, #0
 800865e:	d007      	beq.n	8008670 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008666:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8008668:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7fb fdf6 	bl	800425c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8008670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008672:	2b00      	cmp	r3, #0
 8008674:	d007      	beq.n	8008686 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800867c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800867e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 f897 	bl	80087b4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800868c:	2b00      	cmp	r3, #0
 800868e:	d00c      	beq.n	80086aa <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008696:	2b00      	cmp	r3, #0
 8008698:	d007      	beq.n	80086aa <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086a2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 f890 	bl	80087ca <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d018      	beq.n	80086e6 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80086b4:	69bb      	ldr	r3, [r7, #24]
 80086b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d013      	beq.n	80086e6 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80086c6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4013      	ands	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2280      	movs	r2, #128	@ 0x80
 80086dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f87c 	bl	80087de <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00c      	beq.n	800870a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80086f0:	69bb      	ldr	r3, [r7, #24]
 80086f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d007      	beq.n	800870a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008702:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f880 	bl	800880a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008726:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 f878 	bl	800881e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00f      	beq.n	8008758 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800874a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008750:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8008758:	69fb      	ldr	r3, [r7, #28]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d007      	beq.n	800876e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	69fa      	ldr	r2, [r7, #28]
 8008764:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8008766:	69f9      	ldr	r1, [r7, #28]
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 f876 	bl	800885a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800876e:	6a3b      	ldr	r3, [r7, #32]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d009      	beq.n	8008788 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6a3a      	ldr	r2, [r7, #32]
 800877a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008780:	6a3b      	ldr	r3, [r7, #32]
 8008782:	431a      	orrs	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800878c:	2b00      	cmp	r3, #0
 800878e:	d002      	beq.n	8008796 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f858 	bl	8008846 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8008796:	bf00      	nop
 8008798:	3730      	adds	r7, #48	@ 0x30
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80087be:	bf00      	nop
 80087c0:	370c      	adds	r7, #12
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80087d2:	bf00      	nop
 80087d4:	370c      	adds	r7, #12
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80087de:	b480      	push	{r7}
 80087e0:	b083      	sub	sp, #12
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	6078      	str	r0, [r7, #4]
 80087e6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b083      	sub	sp, #12
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80087fe:	bf00      	nop
 8008800:	370c      	adds	r7, #12
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr

0800880a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008832:	b480      	push	{r7}
 8008834:	b083      	sub	sp, #12
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800883a:	bf00      	nop
 800883c:	370c      	adds	r7, #12
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr

08008846 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008846:	b480      	push	{r7}
 8008848:	b083      	sub	sp, #12
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800884e:	bf00      	nop
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8008878:	4b2c      	ldr	r3, [pc, #176]	@ (800892c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 800887a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a2b      	ldr	r2, [pc, #172]	@ (8008930 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d103      	bne.n	800888e <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800888c:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889c:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a4:	041a      	lsls	r2, r3, #16
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	430a      	orrs	r2, r1
 80088ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ca:	061a      	lsls	r2, r3, #24
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	430a      	orrs	r2, r1
 80088d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	60fb      	str	r3, [r7, #12]
 8008902:	e005      	b.n	8008910 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3304      	adds	r3, #4
 800890e:	60fb      	str	r3, [r7, #12]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008916:	68fa      	ldr	r2, [r7, #12]
 8008918:	429a      	cmp	r2, r3
 800891a:	d3f3      	bcc.n	8008904 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	3714      	adds	r7, #20
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	4000a400 	.word	0x4000a400
 8008930:	40006800 	.word	0x40006800

08008934 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8008934:	b480      	push	{r7}
 8008936:	b089      	sub	sp, #36	@ 0x24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
 8008940:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10a      	bne.n	8008960 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8008952:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800895a:	4313      	orrs	r3, r2
 800895c:	61fb      	str	r3, [r7, #28]
 800895e:	e00a      	b.n	8008976 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8008968:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800896e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8008970:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008974:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	6a1b      	ldr	r3, [r3, #32]
 800897a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008980:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8008986:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800898c:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8008994:	4313      	orrs	r3, r2
 8008996:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800899c:	683a      	ldr	r2, [r7, #0]
 800899e:	4613      	mov	r3, r2
 80089a0:	00db      	lsls	r3, r3, #3
 80089a2:	4413      	add	r3, r2
 80089a4:	00db      	lsls	r3, r3, #3
 80089a6:	440b      	add	r3, r1
 80089a8:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	69fa      	ldr	r2, [r7, #28]
 80089ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089b0:	69bb      	ldr	r3, [r7, #24]
 80089b2:	3304      	adds	r3, #4
 80089b4:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80089bc:	69bb      	ldr	r3, [r7, #24]
 80089be:	3304      	adds	r3, #4
 80089c0:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80089c2:	2300      	movs	r3, #0
 80089c4:	617b      	str	r3, [r7, #20]
 80089c6:	e020      	b.n	8008a0a <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	3303      	adds	r3, #3
 80089cc:	687a      	ldr	r2, [r7, #4]
 80089ce:	4413      	add	r3, r2
 80089d0:	781b      	ldrb	r3, [r3, #0]
 80089d2:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	3302      	adds	r3, #2
 80089d8:	6879      	ldr	r1, [r7, #4]
 80089da:	440b      	add	r3, r1
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089e0:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	3301      	adds	r3, #1
 80089e6:	6879      	ldr	r1, [r7, #4]
 80089e8:	440b      	add	r3, r1
 80089ea:	781b      	ldrb	r3, [r3, #0]
 80089ec:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80089ee:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80089f0:	6879      	ldr	r1, [r7, #4]
 80089f2:	697a      	ldr	r2, [r7, #20]
 80089f4:	440a      	add	r2, r1
 80089f6:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80089f8:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80089fa:	69bb      	ldr	r3, [r7, #24]
 80089fc:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	3304      	adds	r3, #4
 8008a02:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	3304      	adds	r3, #4
 8008a08:	617b      	str	r3, [r7, #20]
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	4a06      	ldr	r2, [pc, #24]	@ (8008a28 <FDCAN_CopyMessageToRAM+0xf4>)
 8008a10:	5cd3      	ldrb	r3, [r2, r3]
 8008a12:	461a      	mov	r2, r3
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d3d6      	bcc.n	80089c8 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8008a1a:	bf00      	nop
 8008a1c:	bf00      	nop
 8008a1e:	3724      	adds	r7, #36	@ 0x24
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr
 8008a28:	0800d484 	.word	0x0800d484

08008a2c <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d101      	bne.n	8008a3e <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e033      	b.n	8008aa6 <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d106      	bne.n	8008a58 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 8008a52:	6878      	ldr	r0, [r7, #4]
 8008a54:	f7fc fca8 	bl	80053a8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 f854 	bl	8008b0c <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 f822 	bl	8008aae <FMAC_Reset>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	2b01      	cmp	r3, #1
 8008a6e:	d10c      	bne.n	8008a8a <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a74:	f043 0210 	orr.w	r2, r3, #16
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	22a0      	movs	r2, #160	@ 0xa0
 8008a80:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
 8008a88:	e008      	b.n	8008a9c <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8008aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b084      	sub	sp, #16
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008ab6:	f7fc febb 	bl	8005830 <HAL_GetTick>
 8008aba:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	691a      	ldr	r2, [r3, #16]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008aca:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008acc:	e00f      	b.n	8008aee <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8008ace:	f7fc feaf 	bl	8005830 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008adc:	d907      	bls.n	8008aee <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ae2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	e00a      	b.n	8008b04 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d1e8      	bne.n	8008ace <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3710      	adds	r7, #16
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 f807 	bl	8008b28 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f81b 	bl	8008b56 <FMAC_ResetOutputStateAndDataPointers>
}
 8008b20:	bf00      	nop
 8008b22:	3708      	adds	r7, #8
 8008b24:	46bd      	mov	sp, r7
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008b56:	b480      	push	{r7}
 8008b58:	b083      	sub	sp, #12
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2200      	movs	r2, #0
 8008b68:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2220      	movs	r2, #32
 8008b74:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008b92:	e15a      	b.n	8008e4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	2101      	movs	r1, #1
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8008ba0:	4013      	ands	r3, r2
 8008ba2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	f000 814c 	beq.w	8008e44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f003 0303 	and.w	r3, r3, #3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d005      	beq.n	8008bc4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d130      	bne.n	8008c26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	689b      	ldr	r3, [r3, #8]
 8008bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	005b      	lsls	r3, r3, #1
 8008bce:	2203      	movs	r2, #3
 8008bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd4:	43db      	mvns	r3, r3
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	4013      	ands	r3, r2
 8008bda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	fa02 f303 	lsl.w	r3, r2, r3
 8008be8:	693a      	ldr	r2, [r7, #16]
 8008bea:	4313      	orrs	r3, r2
 8008bec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	693a      	ldr	r2, [r7, #16]
 8008bf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008c02:	43db      	mvns	r3, r3
 8008c04:	693a      	ldr	r2, [r7, #16]
 8008c06:	4013      	ands	r3, r2
 8008c08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	685b      	ldr	r3, [r3, #4]
 8008c0e:	091b      	lsrs	r3, r3, #4
 8008c10:	f003 0201 	and.w	r2, r3, #1
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f003 0303 	and.w	r3, r3, #3
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d017      	beq.n	8008c62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	43db      	mvns	r3, r3
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	4013      	ands	r3, r2
 8008c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	005b      	lsls	r3, r3, #1
 8008c52:	fa02 f303 	lsl.w	r3, r2, r3
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	2b02      	cmp	r3, #2
 8008c6c:	d123      	bne.n	8008cb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	08da      	lsrs	r2, r3, #3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3208      	adds	r2, #8
 8008c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	220f      	movs	r2, #15
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	691a      	ldr	r2, [r3, #16]
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f003 0307 	and.w	r3, r3, #7
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca2:	693a      	ldr	r2, [r7, #16]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	08da      	lsrs	r2, r3, #3
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3208      	adds	r2, #8
 8008cb0:	6939      	ldr	r1, [r7, #16]
 8008cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	005b      	lsls	r3, r3, #1
 8008cc0:	2203      	movs	r2, #3
 8008cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc6:	43db      	mvns	r3, r3
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	4013      	ands	r3, r2
 8008ccc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	685b      	ldr	r3, [r3, #4]
 8008cd2:	f003 0203 	and.w	r2, r3, #3
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	005b      	lsls	r3, r3, #1
 8008cda:	fa02 f303 	lsl.w	r3, r2, r3
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 80a6 	beq.w	8008e44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008cf8:	4b5b      	ldr	r3, [pc, #364]	@ (8008e68 <HAL_GPIO_Init+0x2e4>)
 8008cfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cfc:	4a5a      	ldr	r2, [pc, #360]	@ (8008e68 <HAL_GPIO_Init+0x2e4>)
 8008cfe:	f043 0301 	orr.w	r3, r3, #1
 8008d02:	6613      	str	r3, [r2, #96]	@ 0x60
 8008d04:	4b58      	ldr	r3, [pc, #352]	@ (8008e68 <HAL_GPIO_Init+0x2e4>)
 8008d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d08:	f003 0301 	and.w	r3, r3, #1
 8008d0c:	60bb      	str	r3, [r7, #8]
 8008d0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d10:	4a56      	ldr	r2, [pc, #344]	@ (8008e6c <HAL_GPIO_Init+0x2e8>)
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	089b      	lsrs	r3, r3, #2
 8008d16:	3302      	adds	r3, #2
 8008d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008d1e:	697b      	ldr	r3, [r7, #20]
 8008d20:	f003 0303 	and.w	r3, r3, #3
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	220f      	movs	r2, #15
 8008d28:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2c:	43db      	mvns	r3, r3
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	4013      	ands	r3, r2
 8008d32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8008d3a:	d01f      	beq.n	8008d7c <HAL_GPIO_Init+0x1f8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a4c      	ldr	r2, [pc, #304]	@ (8008e70 <HAL_GPIO_Init+0x2ec>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d019      	beq.n	8008d78 <HAL_GPIO_Init+0x1f4>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a4b      	ldr	r2, [pc, #300]	@ (8008e74 <HAL_GPIO_Init+0x2f0>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d013      	beq.n	8008d74 <HAL_GPIO_Init+0x1f0>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8008e78 <HAL_GPIO_Init+0x2f4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d00d      	beq.n	8008d70 <HAL_GPIO_Init+0x1ec>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	4a49      	ldr	r2, [pc, #292]	@ (8008e7c <HAL_GPIO_Init+0x2f8>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d007      	beq.n	8008d6c <HAL_GPIO_Init+0x1e8>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a48      	ldr	r2, [pc, #288]	@ (8008e80 <HAL_GPIO_Init+0x2fc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d101      	bne.n	8008d68 <HAL_GPIO_Init+0x1e4>
 8008d64:	2305      	movs	r3, #5
 8008d66:	e00a      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d68:	2306      	movs	r3, #6
 8008d6a:	e008      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d6c:	2304      	movs	r3, #4
 8008d6e:	e006      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d70:	2303      	movs	r3, #3
 8008d72:	e004      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d74:	2302      	movs	r3, #2
 8008d76:	e002      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <HAL_GPIO_Init+0x1fa>
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	f002 0203 	and.w	r2, r2, #3
 8008d84:	0092      	lsls	r2, r2, #2
 8008d86:	4093      	lsls	r3, r2
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008d8e:	4937      	ldr	r1, [pc, #220]	@ (8008e6c <HAL_GPIO_Init+0x2e8>)
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	089b      	lsrs	r3, r3, #2
 8008d94:	3302      	adds	r3, #2
 8008d96:	693a      	ldr	r2, [r7, #16]
 8008d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008d9c:	4b39      	ldr	r3, [pc, #228]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	43db      	mvns	r3, r3
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4013      	ands	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d003      	beq.n	8008dc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008db8:	693a      	ldr	r2, [r7, #16]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008dc0:	4a30      	ldr	r2, [pc, #192]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008dc8:	68db      	ldr	r3, [r3, #12]
 8008dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	43db      	mvns	r3, r3
 8008dd0:	693a      	ldr	r2, [r7, #16]
 8008dd2:	4013      	ands	r3, r2
 8008dd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d003      	beq.n	8008dea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008dea:	4a26      	ldr	r2, [pc, #152]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008df0:	4b24      	ldr	r3, [pc, #144]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	693a      	ldr	r2, [r7, #16]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d003      	beq.n	8008e14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008e14:	4a1b      	ldr	r2, [pc, #108]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	43db      	mvns	r3, r3
 8008e24:	693a      	ldr	r2, [r7, #16]
 8008e26:	4013      	ands	r3, r2
 8008e28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d003      	beq.n	8008e3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008e3e:	4a11      	ldr	r2, [pc, #68]	@ (8008e84 <HAL_GPIO_Init+0x300>)
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3301      	adds	r3, #1
 8008e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	fa22 f303 	lsr.w	r3, r2, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f47f ae9d 	bne.w	8008b94 <HAL_GPIO_Init+0x10>
  }
}
 8008e5a:	bf00      	nop
 8008e5c:	bf00      	nop
 8008e5e:	371c      	adds	r7, #28
 8008e60:	46bd      	mov	sp, r7
 8008e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e66:	4770      	bx	lr
 8008e68:	40021000 	.word	0x40021000
 8008e6c:	40010000 	.word	0x40010000
 8008e70:	48000400 	.word	0x48000400
 8008e74:	48000800 	.word	0x48000800
 8008e78:	48000c00 	.word	0x48000c00
 8008e7c:	48001000 	.word	0x48001000
 8008e80:	48001400 	.word	0x48001400
 8008e84:	40010400 	.word	0x40010400

08008e88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008e88:	b480      	push	{r7}
 8008e8a:	b083      	sub	sp, #12
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	460b      	mov	r3, r1
 8008e92:	807b      	strh	r3, [r7, #2]
 8008e94:	4613      	mov	r3, r2
 8008e96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008e98:	787b      	ldrb	r3, [r7, #1]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008e9e:	887a      	ldrh	r2, [r7, #2]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008ea4:	e002      	b.n	8008eac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008ea6:	887a      	ldrh	r2, [r7, #2]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008eac:	bf00      	nop
 8008eae:	370c      	adds	r7, #12
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb6:	4770      	bx	lr

08008eb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b085      	sub	sp, #20
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d141      	bne.n	8008f4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ed2:	d131      	bne.n	8008f38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ed4:	4b47      	ldr	r3, [pc, #284]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eda:	4a46      	ldr	r2, [pc, #280]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008edc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ee0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ee4:	4b43      	ldr	r3, [pc, #268]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008eec:	4a41      	ldr	r2, [pc, #260]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008eee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ef2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ef4:	4b40      	ldr	r3, [pc, #256]	@ (8008ff8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2232      	movs	r2, #50	@ 0x32
 8008efa:	fb02 f303 	mul.w	r3, r2, r3
 8008efe:	4a3f      	ldr	r2, [pc, #252]	@ (8008ffc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f00:	fba2 2303 	umull	r2, r3, r2, r3
 8008f04:	0c9b      	lsrs	r3, r3, #18
 8008f06:	3301      	adds	r3, #1
 8008f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f0a:	e002      	b.n	8008f12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f12:	4b38      	ldr	r3, [pc, #224]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f1e:	d102      	bne.n	8008f26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1f2      	bne.n	8008f0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008f26:	4b33      	ldr	r3, [pc, #204]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f28:	695b      	ldr	r3, [r3, #20]
 8008f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f32:	d158      	bne.n	8008fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e057      	b.n	8008fe8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f38:	4b2e      	ldr	r3, [pc, #184]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f3e:	4a2d      	ldr	r2, [pc, #180]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008f48:	e04d      	b.n	8008fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f50:	d141      	bne.n	8008fd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008f52:	4b28      	ldr	r3, [pc, #160]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008f5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008f5e:	d131      	bne.n	8008fc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008f60:	4b24      	ldr	r3, [pc, #144]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f66:	4a23      	ldr	r2, [pc, #140]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008f70:	4b20      	ldr	r3, [pc, #128]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008f78:	4a1e      	ldr	r2, [pc, #120]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008f7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008f80:	4b1d      	ldr	r3, [pc, #116]	@ (8008ff8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2232      	movs	r2, #50	@ 0x32
 8008f86:	fb02 f303 	mul.w	r3, r2, r3
 8008f8a:	4a1c      	ldr	r2, [pc, #112]	@ (8008ffc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008f90:	0c9b      	lsrs	r3, r3, #18
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f96:	e002      	b.n	8008f9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	3b01      	subs	r3, #1
 8008f9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008f9e:	4b15      	ldr	r3, [pc, #84]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008faa:	d102      	bne.n	8008fb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d1f2      	bne.n	8008f98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008fb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fb4:	695b      	ldr	r3, [r3, #20]
 8008fb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008fba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008fbe:	d112      	bne.n	8008fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008fc0:	2303      	movs	r3, #3
 8008fc2:	e011      	b.n	8008fe8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fca:	4a0a      	ldr	r2, [pc, #40]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008fd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008fd4:	e007      	b.n	8008fe6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008fd6:	4b07      	ldr	r3, [pc, #28]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008fde:	4a05      	ldr	r2, [pc, #20]	@ (8008ff4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008fe0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008fe4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008fe6:	2300      	movs	r3, #0
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3714      	adds	r7, #20
 8008fec:	46bd      	mov	sp, r7
 8008fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff2:	4770      	bx	lr
 8008ff4:	40007000 	.word	0x40007000
 8008ff8:	200000f4 	.word	0x200000f4
 8008ffc:	431bde83 	.word	0x431bde83

08009000 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	4a04      	ldr	r2, [pc, #16]	@ (800901c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800900a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800900e:	6093      	str	r3, [r2, #8]
}
 8009010:	bf00      	nop
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	40007000 	.word	0x40007000

08009020 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
 8009030:	e2fe      	b.n	8009630 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d075      	beq.n	800912a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800903e:	4b97      	ldr	r3, [pc, #604]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	f003 030c 	and.w	r3, r3, #12
 8009046:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009048:	4b94      	ldr	r3, [pc, #592]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f003 0303 	and.w	r3, r3, #3
 8009050:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009052:	69bb      	ldr	r3, [r7, #24]
 8009054:	2b0c      	cmp	r3, #12
 8009056:	d102      	bne.n	800905e <HAL_RCC_OscConfig+0x3e>
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b03      	cmp	r3, #3
 800905c:	d002      	beq.n	8009064 <HAL_RCC_OscConfig+0x44>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	2b08      	cmp	r3, #8
 8009062:	d10b      	bne.n	800907c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009064:	4b8d      	ldr	r3, [pc, #564]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800906c:	2b00      	cmp	r3, #0
 800906e:	d05b      	beq.n	8009128 <HAL_RCC_OscConfig+0x108>
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d157      	bne.n	8009128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	e2d9      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009084:	d106      	bne.n	8009094 <HAL_RCC_OscConfig+0x74>
 8009086:	4b85      	ldr	r3, [pc, #532]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a84      	ldr	r2, [pc, #528]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 800908c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009090:	6013      	str	r3, [r2, #0]
 8009092:	e01d      	b.n	80090d0 <HAL_RCC_OscConfig+0xb0>
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800909c:	d10c      	bne.n	80090b8 <HAL_RCC_OscConfig+0x98>
 800909e:	4b7f      	ldr	r3, [pc, #508]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	4a7e      	ldr	r2, [pc, #504]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	4b7c      	ldr	r3, [pc, #496]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a7b      	ldr	r2, [pc, #492]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80090b4:	6013      	str	r3, [r2, #0]
 80090b6:	e00b      	b.n	80090d0 <HAL_RCC_OscConfig+0xb0>
 80090b8:	4b78      	ldr	r3, [pc, #480]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a77      	ldr	r2, [pc, #476]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	4b75      	ldr	r3, [pc, #468]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a74      	ldr	r2, [pc, #464]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d013      	beq.n	8009100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d8:	f7fc fbaa 	bl	8005830 <HAL_GetTick>
 80090dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090de:	e008      	b.n	80090f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80090e0:	f7fc fba6 	bl	8005830 <HAL_GetTick>
 80090e4:	4602      	mov	r2, r0
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	2b64      	cmp	r3, #100	@ 0x64
 80090ec:	d901      	bls.n	80090f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090ee:	2303      	movs	r3, #3
 80090f0:	e29e      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090f2:	4b6a      	ldr	r3, [pc, #424]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d0f0      	beq.n	80090e0 <HAL_RCC_OscConfig+0xc0>
 80090fe:	e014      	b.n	800912a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009100:	f7fc fb96 	bl	8005830 <HAL_GetTick>
 8009104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009106:	e008      	b.n	800911a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009108:	f7fc fb92 	bl	8005830 <HAL_GetTick>
 800910c:	4602      	mov	r2, r0
 800910e:	693b      	ldr	r3, [r7, #16]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	2b64      	cmp	r3, #100	@ 0x64
 8009114:	d901      	bls.n	800911a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009116:	2303      	movs	r3, #3
 8009118:	e28a      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800911a:	4b60      	ldr	r3, [pc, #384]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f0      	bne.n	8009108 <HAL_RCC_OscConfig+0xe8>
 8009126:	e000      	b.n	800912a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f003 0302 	and.w	r3, r3, #2
 8009132:	2b00      	cmp	r3, #0
 8009134:	d075      	beq.n	8009222 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009136:	4b59      	ldr	r3, [pc, #356]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f003 030c 	and.w	r3, r3, #12
 800913e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009140:	4b56      	ldr	r3, [pc, #344]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b0c      	cmp	r3, #12
 800914e:	d102      	bne.n	8009156 <HAL_RCC_OscConfig+0x136>
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d002      	beq.n	800915c <HAL_RCC_OscConfig+0x13c>
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	2b04      	cmp	r3, #4
 800915a:	d11f      	bne.n	800919c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800915c:	4b4f      	ldr	r3, [pc, #316]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009164:	2b00      	cmp	r3, #0
 8009166:	d005      	beq.n	8009174 <HAL_RCC_OscConfig+0x154>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d101      	bne.n	8009174 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009170:	2301      	movs	r3, #1
 8009172:	e25d      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009174:	4b49      	ldr	r3, [pc, #292]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	691b      	ldr	r3, [r3, #16]
 8009180:	061b      	lsls	r3, r3, #24
 8009182:	4946      	ldr	r1, [pc, #280]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009184:	4313      	orrs	r3, r2
 8009186:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009188:	4b45      	ldr	r3, [pc, #276]	@ (80092a0 <HAL_RCC_OscConfig+0x280>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4618      	mov	r0, r3
 800918e:	f7fc fb03 	bl	8005798 <HAL_InitTick>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d043      	beq.n	8009220 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009198:	2301      	movs	r3, #1
 800919a:	e249      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d023      	beq.n	80091ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80091a4:	4b3d      	ldr	r3, [pc, #244]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a3c      	ldr	r2, [pc, #240]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80091ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091b0:	f7fc fb3e 	bl	8005830 <HAL_GetTick>
 80091b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091b6:	e008      	b.n	80091ca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80091b8:	f7fc fb3a 	bl	8005830 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	d901      	bls.n	80091ca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80091c6:	2303      	movs	r3, #3
 80091c8:	e232      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80091ca:	4b34      	ldr	r3, [pc, #208]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d0f0      	beq.n	80091b8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091d6:	4b31      	ldr	r3, [pc, #196]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091d8:	685b      	ldr	r3, [r3, #4]
 80091da:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	061b      	lsls	r3, r3, #24
 80091e4:	492d      	ldr	r1, [pc, #180]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091e6:	4313      	orrs	r3, r2
 80091e8:	604b      	str	r3, [r1, #4]
 80091ea:	e01a      	b.n	8009222 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091ec:	4b2b      	ldr	r3, [pc, #172]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a2a      	ldr	r2, [pc, #168]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 80091f2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091f8:	f7fc fb1a 	bl	8005830 <HAL_GetTick>
 80091fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80091fe:	e008      	b.n	8009212 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009200:	f7fc fb16 	bl	8005830 <HAL_GetTick>
 8009204:	4602      	mov	r2, r0
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	1ad3      	subs	r3, r2, r3
 800920a:	2b02      	cmp	r3, #2
 800920c:	d901      	bls.n	8009212 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800920e:	2303      	movs	r3, #3
 8009210:	e20e      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009212:	4b22      	ldr	r3, [pc, #136]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800921a:	2b00      	cmp	r3, #0
 800921c:	d1f0      	bne.n	8009200 <HAL_RCC_OscConfig+0x1e0>
 800921e:	e000      	b.n	8009222 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009220:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0308 	and.w	r3, r3, #8
 800922a:	2b00      	cmp	r3, #0
 800922c:	d041      	beq.n	80092b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d01c      	beq.n	8009270 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009236:	4b19      	ldr	r3, [pc, #100]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009238:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800923c:	4a17      	ldr	r2, [pc, #92]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009246:	f7fc faf3 	bl	8005830 <HAL_GetTick>
 800924a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800924c:	e008      	b.n	8009260 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800924e:	f7fc faef 	bl	8005830 <HAL_GetTick>
 8009252:	4602      	mov	r2, r0
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	1ad3      	subs	r3, r2, r3
 8009258:	2b02      	cmp	r3, #2
 800925a:	d901      	bls.n	8009260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e1e7      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009260:	4b0e      	ldr	r3, [pc, #56]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0ef      	beq.n	800924e <HAL_RCC_OscConfig+0x22e>
 800926e:	e020      	b.n	80092b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009270:	4b0a      	ldr	r3, [pc, #40]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009272:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009276:	4a09      	ldr	r2, [pc, #36]	@ (800929c <HAL_RCC_OscConfig+0x27c>)
 8009278:	f023 0301 	bic.w	r3, r3, #1
 800927c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009280:	f7fc fad6 	bl	8005830 <HAL_GetTick>
 8009284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009286:	e00d      	b.n	80092a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009288:	f7fc fad2 	bl	8005830 <HAL_GetTick>
 800928c:	4602      	mov	r2, r0
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	1ad3      	subs	r3, r2, r3
 8009292:	2b02      	cmp	r3, #2
 8009294:	d906      	bls.n	80092a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009296:	2303      	movs	r3, #3
 8009298:	e1ca      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
 800929a:	bf00      	nop
 800929c:	40021000 	.word	0x40021000
 80092a0:	200000f8 	.word	0x200000f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80092a4:	4b8c      	ldr	r3, [pc, #560]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80092a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80092aa:	f003 0302 	and.w	r3, r3, #2
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1ea      	bne.n	8009288 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 80a6 	beq.w	800940c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80092c0:	2300      	movs	r3, #0
 80092c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80092c4:	4b84      	ldr	r3, [pc, #528]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80092c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d101      	bne.n	80092d4 <HAL_RCC_OscConfig+0x2b4>
 80092d0:	2301      	movs	r3, #1
 80092d2:	e000      	b.n	80092d6 <HAL_RCC_OscConfig+0x2b6>
 80092d4:	2300      	movs	r3, #0
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00d      	beq.n	80092f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80092da:	4b7f      	ldr	r3, [pc, #508]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80092dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092de:	4a7e      	ldr	r2, [pc, #504]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80092e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80092e6:	4b7c      	ldr	r3, [pc, #496]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80092e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80092ee:	60fb      	str	r3, [r7, #12]
 80092f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80092f2:	2301      	movs	r3, #1
 80092f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80092f6:	4b79      	ldr	r3, [pc, #484]	@ (80094dc <HAL_RCC_OscConfig+0x4bc>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d118      	bne.n	8009334 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009302:	4b76      	ldr	r3, [pc, #472]	@ (80094dc <HAL_RCC_OscConfig+0x4bc>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a75      	ldr	r2, [pc, #468]	@ (80094dc <HAL_RCC_OscConfig+0x4bc>)
 8009308:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800930c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800930e:	f7fc fa8f 	bl	8005830 <HAL_GetTick>
 8009312:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009314:	e008      	b.n	8009328 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009316:	f7fc fa8b 	bl	8005830 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	2b02      	cmp	r3, #2
 8009322:	d901      	bls.n	8009328 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009324:	2303      	movs	r3, #3
 8009326:	e183      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009328:	4b6c      	ldr	r3, [pc, #432]	@ (80094dc <HAL_RCC_OscConfig+0x4bc>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009330:	2b00      	cmp	r3, #0
 8009332:	d0f0      	beq.n	8009316 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d108      	bne.n	800934e <HAL_RCC_OscConfig+0x32e>
 800933c:	4b66      	ldr	r3, [pc, #408]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800933e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009342:	4a65      	ldr	r2, [pc, #404]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009344:	f043 0301 	orr.w	r3, r3, #1
 8009348:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800934c:	e024      	b.n	8009398 <HAL_RCC_OscConfig+0x378>
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	2b05      	cmp	r3, #5
 8009354:	d110      	bne.n	8009378 <HAL_RCC_OscConfig+0x358>
 8009356:	4b60      	ldr	r3, [pc, #384]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800935c:	4a5e      	ldr	r2, [pc, #376]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800935e:	f043 0304 	orr.w	r3, r3, #4
 8009362:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009366:	4b5c      	ldr	r3, [pc, #368]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009368:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800936c:	4a5a      	ldr	r2, [pc, #360]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800936e:	f043 0301 	orr.w	r3, r3, #1
 8009372:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009376:	e00f      	b.n	8009398 <HAL_RCC_OscConfig+0x378>
 8009378:	4b57      	ldr	r3, [pc, #348]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800937a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937e:	4a56      	ldr	r2, [pc, #344]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009380:	f023 0301 	bic.w	r3, r3, #1
 8009384:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009388:	4b53      	ldr	r3, [pc, #332]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800938a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800938e:	4a52      	ldr	r2, [pc, #328]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009390:	f023 0304 	bic.w	r3, r3, #4
 8009394:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d016      	beq.n	80093ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093a0:	f7fc fa46 	bl	8005830 <HAL_GetTick>
 80093a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093a6:	e00a      	b.n	80093be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093a8:	f7fc fa42 	bl	8005830 <HAL_GetTick>
 80093ac:	4602      	mov	r2, r0
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e138      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80093be:	4b46      	ldr	r3, [pc, #280]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c4:	f003 0302 	and.w	r3, r3, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d0ed      	beq.n	80093a8 <HAL_RCC_OscConfig+0x388>
 80093cc:	e015      	b.n	80093fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ce:	f7fc fa2f 	bl	8005830 <HAL_GetTick>
 80093d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093d4:	e00a      	b.n	80093ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093d6:	f7fc fa2b 	bl	8005830 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e121      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80093ec:	4b3a      	ldr	r3, [pc, #232]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80093ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f2:	f003 0302 	and.w	r3, r3, #2
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1ed      	bne.n	80093d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80093fa:	7ffb      	ldrb	r3, [r7, #31]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d105      	bne.n	800940c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009400:	4b35      	ldr	r3, [pc, #212]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009404:	4a34      	ldr	r2, [pc, #208]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800940a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f003 0320 	and.w	r3, r3, #32
 8009414:	2b00      	cmp	r3, #0
 8009416:	d03c      	beq.n	8009492 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d01c      	beq.n	800945a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009420:	4b2d      	ldr	r3, [pc, #180]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009426:	4a2c      	ldr	r2, [pc, #176]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009428:	f043 0301 	orr.w	r3, r3, #1
 800942c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009430:	f7fc f9fe 	bl	8005830 <HAL_GetTick>
 8009434:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009436:	e008      	b.n	800944a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009438:	f7fc f9fa 	bl	8005830 <HAL_GetTick>
 800943c:	4602      	mov	r2, r0
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	1ad3      	subs	r3, r2, r3
 8009442:	2b02      	cmp	r3, #2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e0f2      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800944a:	4b23      	ldr	r3, [pc, #140]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800944c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0ef      	beq.n	8009438 <HAL_RCC_OscConfig+0x418>
 8009458:	e01b      	b.n	8009492 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800945a:	4b1f      	ldr	r3, [pc, #124]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800945c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009460:	4a1d      	ldr	r2, [pc, #116]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009462:	f023 0301 	bic.w	r3, r3, #1
 8009466:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800946a:	f7fc f9e1 	bl	8005830 <HAL_GetTick>
 800946e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009470:	e008      	b.n	8009484 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009472:	f7fc f9dd 	bl	8005830 <HAL_GetTick>
 8009476:	4602      	mov	r2, r0
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	1ad3      	subs	r3, r2, r3
 800947c:	2b02      	cmp	r3, #2
 800947e:	d901      	bls.n	8009484 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009480:	2303      	movs	r3, #3
 8009482:	e0d5      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009484:	4b14      	ldr	r3, [pc, #80]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 8009486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800948a:	f003 0302 	and.w	r3, r3, #2
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1ef      	bne.n	8009472 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	69db      	ldr	r3, [r3, #28]
 8009496:	2b00      	cmp	r3, #0
 8009498:	f000 80c9 	beq.w	800962e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800949c:	4b0e      	ldr	r3, [pc, #56]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 800949e:	689b      	ldr	r3, [r3, #8]
 80094a0:	f003 030c 	and.w	r3, r3, #12
 80094a4:	2b0c      	cmp	r3, #12
 80094a6:	f000 8083 	beq.w	80095b0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	69db      	ldr	r3, [r3, #28]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d15e      	bne.n	8009570 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b2:	4b09      	ldr	r3, [pc, #36]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a08      	ldr	r2, [pc, #32]	@ (80094d8 <HAL_RCC_OscConfig+0x4b8>)
 80094b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80094bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094be:	f7fc f9b7 	bl	8005830 <HAL_GetTick>
 80094c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094c4:	e00c      	b.n	80094e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c6:	f7fc f9b3 	bl	8005830 <HAL_GetTick>
 80094ca:	4602      	mov	r2, r0
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b02      	cmp	r3, #2
 80094d2:	d905      	bls.n	80094e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80094d4:	2303      	movs	r3, #3
 80094d6:	e0ab      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
 80094d8:	40021000 	.word	0x40021000
 80094dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80094e0:	4b55      	ldr	r3, [pc, #340]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d1ec      	bne.n	80094c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094ec:	4b52      	ldr	r3, [pc, #328]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 80094ee:	68da      	ldr	r2, [r3, #12]
 80094f0:	4b52      	ldr	r3, [pc, #328]	@ (800963c <HAL_RCC_OscConfig+0x61c>)
 80094f2:	4013      	ands	r3, r2
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	6a11      	ldr	r1, [r2, #32]
 80094f8:	687a      	ldr	r2, [r7, #4]
 80094fa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80094fc:	3a01      	subs	r2, #1
 80094fe:	0112      	lsls	r2, r2, #4
 8009500:	4311      	orrs	r1, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8009506:	0212      	lsls	r2, r2, #8
 8009508:	4311      	orrs	r1, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800950e:	0852      	lsrs	r2, r2, #1
 8009510:	3a01      	subs	r2, #1
 8009512:	0552      	lsls	r2, r2, #21
 8009514:	4311      	orrs	r1, r2
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800951a:	0852      	lsrs	r2, r2, #1
 800951c:	3a01      	subs	r2, #1
 800951e:	0652      	lsls	r2, r2, #25
 8009520:	4311      	orrs	r1, r2
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009526:	06d2      	lsls	r2, r2, #27
 8009528:	430a      	orrs	r2, r1
 800952a:	4943      	ldr	r1, [pc, #268]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 800952c:	4313      	orrs	r3, r2
 800952e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009530:	4b41      	ldr	r3, [pc, #260]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a40      	ldr	r2, [pc, #256]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009536:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800953a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800953c:	4b3e      	ldr	r3, [pc, #248]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	4a3d      	ldr	r2, [pc, #244]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009542:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009546:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009548:	f7fc f972 	bl	8005830 <HAL_GetTick>
 800954c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800954e:	e008      	b.n	8009562 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009550:	f7fc f96e 	bl	8005830 <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b02      	cmp	r3, #2
 800955c:	d901      	bls.n	8009562 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800955e:	2303      	movs	r3, #3
 8009560:	e066      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009562:	4b35      	ldr	r3, [pc, #212]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800956a:	2b00      	cmp	r3, #0
 800956c:	d0f0      	beq.n	8009550 <HAL_RCC_OscConfig+0x530>
 800956e:	e05e      	b.n	800962e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009570:	4b31      	ldr	r3, [pc, #196]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a30      	ldr	r2, [pc, #192]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009576:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800957a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800957c:	f7fc f958 	bl	8005830 <HAL_GetTick>
 8009580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009582:	e008      	b.n	8009596 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009584:	f7fc f954 	bl	8005830 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	2b02      	cmp	r3, #2
 8009590:	d901      	bls.n	8009596 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8009592:	2303      	movs	r3, #3
 8009594:	e04c      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009596:	4b28      	ldr	r3, [pc, #160]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d1f0      	bne.n	8009584 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80095a2:	4b25      	ldr	r3, [pc, #148]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 80095a4:	68da      	ldr	r2, [r3, #12]
 80095a6:	4924      	ldr	r1, [pc, #144]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 80095a8:	4b25      	ldr	r3, [pc, #148]	@ (8009640 <HAL_RCC_OscConfig+0x620>)
 80095aa:	4013      	ands	r3, r2
 80095ac:	60cb      	str	r3, [r1, #12]
 80095ae:	e03e      	b.n	800962e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	69db      	ldr	r3, [r3, #28]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80095b8:	2301      	movs	r3, #1
 80095ba:	e039      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80095bc:	4b1e      	ldr	r3, [pc, #120]	@ (8009638 <HAL_RCC_OscConfig+0x618>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f003 0203 	and.w	r2, r3, #3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d12c      	bne.n	800962a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095da:	3b01      	subs	r3, #1
 80095dc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095de:	429a      	cmp	r2, r3
 80095e0:	d123      	bne.n	800962a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d11b      	bne.n	800962a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095fc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80095fe:	429a      	cmp	r2, r3
 8009600:	d113      	bne.n	800962a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800960c:	085b      	lsrs	r3, r3, #1
 800960e:	3b01      	subs	r3, #1
 8009610:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009612:	429a      	cmp	r2, r3
 8009614:	d109      	bne.n	800962a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009620:	085b      	lsrs	r3, r3, #1
 8009622:	3b01      	subs	r3, #1
 8009624:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009626:	429a      	cmp	r2, r3
 8009628:	d001      	beq.n	800962e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e000      	b.n	8009630 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	3720      	adds	r7, #32
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	40021000 	.word	0x40021000
 800963c:	019f800c 	.word	0x019f800c
 8009640:	feeefffc 	.word	0xfeeefffc

08009644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b086      	sub	sp, #24
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d101      	bne.n	800965c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e11e      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800965c:	4b91      	ldr	r3, [pc, #580]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	683a      	ldr	r2, [r7, #0]
 8009666:	429a      	cmp	r2, r3
 8009668:	d910      	bls.n	800968c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800966a:	4b8e      	ldr	r3, [pc, #568]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f023 020f 	bic.w	r2, r3, #15
 8009672:	498c      	ldr	r1, [pc, #560]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	4313      	orrs	r3, r2
 8009678:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800967a:	4b8a      	ldr	r3, [pc, #552]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 030f 	and.w	r3, r3, #15
 8009682:	683a      	ldr	r2, [r7, #0]
 8009684:	429a      	cmp	r2, r3
 8009686:	d001      	beq.n	800968c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e106      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b00      	cmp	r3, #0
 8009696:	d073      	beq.n	8009780 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	2b03      	cmp	r3, #3
 800969e:	d129      	bne.n	80096f4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80096a0:	4b81      	ldr	r3, [pc, #516]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80096ac:	2301      	movs	r3, #1
 80096ae:	e0f4      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80096b0:	f000 f966 	bl	8009980 <RCC_GetSysClockFreqFromPLLSource>
 80096b4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	4a7c      	ldr	r2, [pc, #496]	@ (80098ac <HAL_RCC_ClockConfig+0x268>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d93f      	bls.n	800973e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096be:	4b7a      	ldr	r3, [pc, #488]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d009      	beq.n	80096de <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d033      	beq.n	800973e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d12f      	bne.n	800973e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80096de:	4b72      	ldr	r3, [pc, #456]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096e6:	4a70      	ldr	r2, [pc, #448]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80096e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096ec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80096ee:	2380      	movs	r3, #128	@ 0x80
 80096f0:	617b      	str	r3, [r7, #20]
 80096f2:	e024      	b.n	800973e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	2b02      	cmp	r3, #2
 80096fa:	d107      	bne.n	800970c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80096fc:	4b6a      	ldr	r3, [pc, #424]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009704:	2b00      	cmp	r3, #0
 8009706:	d109      	bne.n	800971c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009708:	2301      	movs	r3, #1
 800970a:	e0c6      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800970c:	4b66      	ldr	r3, [pc, #408]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009714:	2b00      	cmp	r3, #0
 8009716:	d101      	bne.n	800971c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	e0be      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800971c:	f000 f8ce 	bl	80098bc <HAL_RCC_GetSysClockFreq>
 8009720:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009722:	693b      	ldr	r3, [r7, #16]
 8009724:	4a61      	ldr	r2, [pc, #388]	@ (80098ac <HAL_RCC_ClockConfig+0x268>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d909      	bls.n	800973e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800972a:	4b5f      	ldr	r3, [pc, #380]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009732:	4a5d      	ldr	r2, [pc, #372]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 8009734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009738:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800973a:	2380      	movs	r3, #128	@ 0x80
 800973c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800973e:	4b5a      	ldr	r3, [pc, #360]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 8009740:	689b      	ldr	r3, [r3, #8]
 8009742:	f023 0203 	bic.w	r2, r3, #3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4957      	ldr	r1, [pc, #348]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800974c:	4313      	orrs	r3, r2
 800974e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009750:	f7fc f86e 	bl	8005830 <HAL_GetTick>
 8009754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009756:	e00a      	b.n	800976e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009758:	f7fc f86a 	bl	8005830 <HAL_GetTick>
 800975c:	4602      	mov	r2, r0
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	1ad3      	subs	r3, r2, r3
 8009762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009766:	4293      	cmp	r3, r2
 8009768:	d901      	bls.n	800976e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800976a:	2303      	movs	r3, #3
 800976c:	e095      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800976e:	4b4e      	ldr	r3, [pc, #312]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 020c 	and.w	r2, r3, #12
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	429a      	cmp	r2, r3
 800977e:	d1eb      	bne.n	8009758 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d023      	beq.n	80097d4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 0304 	and.w	r3, r3, #4
 8009794:	2b00      	cmp	r3, #0
 8009796:	d005      	beq.n	80097a4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009798:	4b43      	ldr	r3, [pc, #268]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	4a42      	ldr	r2, [pc, #264]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800979e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80097a2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f003 0308 	and.w	r3, r3, #8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d007      	beq.n	80097c0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80097b0:	4b3d      	ldr	r3, [pc, #244]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097b8:	4a3b      	ldr	r2, [pc, #236]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097ba:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80097be:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80097c0:	4b39      	ldr	r3, [pc, #228]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	689b      	ldr	r3, [r3, #8]
 80097cc:	4936      	ldr	r1, [pc, #216]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	608b      	str	r3, [r1, #8]
 80097d2:	e008      	b.n	80097e6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	2b80      	cmp	r3, #128	@ 0x80
 80097d8:	d105      	bne.n	80097e6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80097da:	4b33      	ldr	r3, [pc, #204]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	4a32      	ldr	r2, [pc, #200]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 80097e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80097e4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80097e6:	4b2f      	ldr	r3, [pc, #188]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	429a      	cmp	r2, r3
 80097f2:	d21d      	bcs.n	8009830 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80097f4:	4b2b      	ldr	r3, [pc, #172]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f023 020f 	bic.w	r2, r3, #15
 80097fc:	4929      	ldr	r1, [pc, #164]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	4313      	orrs	r3, r2
 8009802:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009804:	f7fc f814 	bl	8005830 <HAL_GetTick>
 8009808:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800980a:	e00a      	b.n	8009822 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800980c:	f7fc f810 	bl	8005830 <HAL_GetTick>
 8009810:	4602      	mov	r2, r0
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	1ad3      	subs	r3, r2, r3
 8009816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800981a:	4293      	cmp	r3, r2
 800981c:	d901      	bls.n	8009822 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800981e:	2303      	movs	r3, #3
 8009820:	e03b      	b.n	800989a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009822:	4b20      	ldr	r3, [pc, #128]	@ (80098a4 <HAL_RCC_ClockConfig+0x260>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	429a      	cmp	r2, r3
 800982e:	d1ed      	bne.n	800980c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0304 	and.w	r3, r3, #4
 8009838:	2b00      	cmp	r3, #0
 800983a:	d008      	beq.n	800984e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800983c:	4b1a      	ldr	r3, [pc, #104]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	68db      	ldr	r3, [r3, #12]
 8009848:	4917      	ldr	r1, [pc, #92]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800984a:	4313      	orrs	r3, r2
 800984c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f003 0308 	and.w	r3, r3, #8
 8009856:	2b00      	cmp	r3, #0
 8009858:	d009      	beq.n	800986e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800985a:	4b13      	ldr	r3, [pc, #76]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	490f      	ldr	r1, [pc, #60]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 800986a:	4313      	orrs	r3, r2
 800986c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800986e:	f000 f825 	bl	80098bc <HAL_RCC_GetSysClockFreq>
 8009872:	4602      	mov	r2, r0
 8009874:	4b0c      	ldr	r3, [pc, #48]	@ (80098a8 <HAL_RCC_ClockConfig+0x264>)
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	091b      	lsrs	r3, r3, #4
 800987a:	f003 030f 	and.w	r3, r3, #15
 800987e:	490c      	ldr	r1, [pc, #48]	@ (80098b0 <HAL_RCC_ClockConfig+0x26c>)
 8009880:	5ccb      	ldrb	r3, [r1, r3]
 8009882:	f003 031f 	and.w	r3, r3, #31
 8009886:	fa22 f303 	lsr.w	r3, r2, r3
 800988a:	4a0a      	ldr	r2, [pc, #40]	@ (80098b4 <HAL_RCC_ClockConfig+0x270>)
 800988c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800988e:	4b0a      	ldr	r3, [pc, #40]	@ (80098b8 <HAL_RCC_ClockConfig+0x274>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	4618      	mov	r0, r3
 8009894:	f7fb ff80 	bl	8005798 <HAL_InitTick>
 8009898:	4603      	mov	r3, r0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3718      	adds	r7, #24
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	40022000 	.word	0x40022000
 80098a8:	40021000 	.word	0x40021000
 80098ac:	04c4b400 	.word	0x04c4b400
 80098b0:	0800d474 	.word	0x0800d474
 80098b4:	200000f4 	.word	0x200000f4
 80098b8:	200000f8 	.word	0x200000f8

080098bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80098c2:	4b2c      	ldr	r3, [pc, #176]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098c4:	689b      	ldr	r3, [r3, #8]
 80098c6:	f003 030c 	and.w	r3, r3, #12
 80098ca:	2b04      	cmp	r3, #4
 80098cc:	d102      	bne.n	80098d4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80098ce:	4b2a      	ldr	r3, [pc, #168]	@ (8009978 <HAL_RCC_GetSysClockFreq+0xbc>)
 80098d0:	613b      	str	r3, [r7, #16]
 80098d2:	e047      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80098d4:	4b27      	ldr	r3, [pc, #156]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	f003 030c 	and.w	r3, r3, #12
 80098dc:	2b08      	cmp	r3, #8
 80098de:	d102      	bne.n	80098e6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80098e0:	4b26      	ldr	r3, [pc, #152]	@ (800997c <HAL_RCC_GetSysClockFreq+0xc0>)
 80098e2:	613b      	str	r3, [r7, #16]
 80098e4:	e03e      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80098e6:	4b23      	ldr	r3, [pc, #140]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	f003 030c 	and.w	r3, r3, #12
 80098ee:	2b0c      	cmp	r3, #12
 80098f0:	d136      	bne.n	8009960 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80098f2:	4b20      	ldr	r3, [pc, #128]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	f003 0303 	and.w	r3, r3, #3
 80098fa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80098fc:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	091b      	lsrs	r3, r3, #4
 8009902:	f003 030f 	and.w	r3, r3, #15
 8009906:	3301      	adds	r3, #1
 8009908:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	2b03      	cmp	r3, #3
 800990e:	d10c      	bne.n	800992a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009910:	4a1a      	ldr	r2, [pc, #104]	@ (800997c <HAL_RCC_GetSysClockFreq+0xc0>)
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	fbb2 f3f3 	udiv	r3, r2, r3
 8009918:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 800991a:	68d2      	ldr	r2, [r2, #12]
 800991c:	0a12      	lsrs	r2, r2, #8
 800991e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009922:	fb02 f303 	mul.w	r3, r2, r3
 8009926:	617b      	str	r3, [r7, #20]
      break;
 8009928:	e00c      	b.n	8009944 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800992a:	4a13      	ldr	r2, [pc, #76]	@ (8009978 <HAL_RCC_GetSysClockFreq+0xbc>)
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009932:	4a10      	ldr	r2, [pc, #64]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009934:	68d2      	ldr	r2, [r2, #12]
 8009936:	0a12      	lsrs	r2, r2, #8
 8009938:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	617b      	str	r3, [r7, #20]
      break;
 8009942:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009944:	4b0b      	ldr	r3, [pc, #44]	@ (8009974 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	0e5b      	lsrs	r3, r3, #25
 800994a:	f003 0303 	and.w	r3, r3, #3
 800994e:	3301      	adds	r3, #1
 8009950:	005b      	lsls	r3, r3, #1
 8009952:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009954:	697a      	ldr	r2, [r7, #20]
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	fbb2 f3f3 	udiv	r3, r2, r3
 800995c:	613b      	str	r3, [r7, #16]
 800995e:	e001      	b.n	8009964 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8009964:	693b      	ldr	r3, [r7, #16]
}
 8009966:	4618      	mov	r0, r3
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40021000 	.word	0x40021000
 8009978:	00f42400 	.word	0x00f42400
 800997c:	007a1200 	.word	0x007a1200

08009980 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009986:	4b1e      	ldr	r3, [pc, #120]	@ (8009a00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009988:	68db      	ldr	r3, [r3, #12]
 800998a:	f003 0303 	and.w	r3, r3, #3
 800998e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009990:	4b1b      	ldr	r3, [pc, #108]	@ (8009a00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	091b      	lsrs	r3, r3, #4
 8009996:	f003 030f 	and.w	r3, r3, #15
 800999a:	3301      	adds	r3, #1
 800999c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d10c      	bne.n	80099be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099a4:	4a17      	ldr	r2, [pc, #92]	@ (8009a04 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80099ac:	4a14      	ldr	r2, [pc, #80]	@ (8009a00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099ae:	68d2      	ldr	r2, [r2, #12]
 80099b0:	0a12      	lsrs	r2, r2, #8
 80099b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099b6:	fb02 f303 	mul.w	r3, r2, r3
 80099ba:	617b      	str	r3, [r7, #20]
    break;
 80099bc:	e00c      	b.n	80099d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80099be:	4a12      	ldr	r2, [pc, #72]	@ (8009a08 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099c6:	4a0e      	ldr	r2, [pc, #56]	@ (8009a00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099c8:	68d2      	ldr	r2, [r2, #12]
 80099ca:	0a12      	lsrs	r2, r2, #8
 80099cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80099d0:	fb02 f303 	mul.w	r3, r2, r3
 80099d4:	617b      	str	r3, [r7, #20]
    break;
 80099d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80099d8:	4b09      	ldr	r3, [pc, #36]	@ (8009a00 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	0e5b      	lsrs	r3, r3, #25
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	3301      	adds	r3, #1
 80099e4:	005b      	lsls	r3, r3, #1
 80099e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80099e8:	697a      	ldr	r2, [r7, #20]
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80099f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80099f2:	687b      	ldr	r3, [r7, #4]
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	371c      	adds	r7, #28
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr
 8009a00:	40021000 	.word	0x40021000
 8009a04:	007a1200 	.word	0x007a1200
 8009a08:	00f42400 	.word	0x00f42400

08009a0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b086      	sub	sp, #24
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009a14:	2300      	movs	r3, #0
 8009a16:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009a18:	2300      	movs	r3, #0
 8009a1a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f000 8098 	beq.w	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009a2e:	4b43      	ldr	r3, [pc, #268]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d10d      	bne.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009a3a:	4b40      	ldr	r3, [pc, #256]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a3e:	4a3f      	ldr	r2, [pc, #252]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a44:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a46:	4b3d      	ldr	r3, [pc, #244]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009a4e:	60bb      	str	r3, [r7, #8]
 8009a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009a52:	2301      	movs	r3, #1
 8009a54:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009a56:	4b3a      	ldr	r3, [pc, #232]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a39      	ldr	r2, [pc, #228]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a60:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009a62:	f7fb fee5 	bl	8005830 <HAL_GetTick>
 8009a66:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a68:	e009      	b.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009a6a:	f7fb fee1 	bl	8005830 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d902      	bls.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	74fb      	strb	r3, [r7, #19]
        break;
 8009a7c:	e005      	b.n	8009a8a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009a7e:	4b30      	ldr	r3, [pc, #192]	@ (8009b40 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0ef      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8009a8a:	7cfb      	ldrb	r3, [r7, #19]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d159      	bne.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009a90:	4b2a      	ldr	r3, [pc, #168]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009a9a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009a9c:	697b      	ldr	r3, [r7, #20]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d01e      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009aa6:	697a      	ldr	r2, [r7, #20]
 8009aa8:	429a      	cmp	r2, r3
 8009aaa:	d019      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009aac:	4b23      	ldr	r3, [pc, #140]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009ab6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009ab8:	4b20      	ldr	r3, [pc, #128]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009abe:	4a1f      	ldr	r2, [pc, #124]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ac0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ace:	4a1b      	ldr	r2, [pc, #108]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ad0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009ad8:	4a18      	ldr	r2, [pc, #96]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f003 0301 	and.w	r3, r3, #1
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d016      	beq.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009aea:	f7fb fea1 	bl	8005830 <HAL_GetTick>
 8009aee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009af0:	e00b      	b.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009af2:	f7fb fe9d 	bl	8005830 <HAL_GetTick>
 8009af6:	4602      	mov	r2, r0
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	1ad3      	subs	r3, r2, r3
 8009afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d902      	bls.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8009b04:	2303      	movs	r3, #3
 8009b06:	74fb      	strb	r3, [r7, #19]
            break;
 8009b08:	e006      	b.n	8009b18 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b10:	f003 0302 	and.w	r3, r3, #2
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0ec      	beq.n	8009af2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009b18:	7cfb      	ldrb	r3, [r7, #19]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d10b      	bne.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009b1e:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b2c:	4903      	ldr	r1, [pc, #12]	@ (8009b3c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8009b34:	e008      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009b36:	7cfb      	ldrb	r3, [r7, #19]
 8009b38:	74bb      	strb	r3, [r7, #18]
 8009b3a:	e005      	b.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8009b3c:	40021000 	.word	0x40021000
 8009b40:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b44:	7cfb      	ldrb	r3, [r7, #19]
 8009b46:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009b48:	7c7b      	ldrb	r3, [r7, #17]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	d105      	bne.n	8009b5a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009b4e:	4ba7      	ldr	r3, [pc, #668]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b52:	4aa6      	ldr	r2, [pc, #664]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009b58:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d00a      	beq.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009b66:	4ba1      	ldr	r3, [pc, #644]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b6c:	f023 0203 	bic.w	r2, r3, #3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	499d      	ldr	r1, [pc, #628]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0302 	and.w	r3, r3, #2
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d00a      	beq.n	8009b9e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009b88:	4b98      	ldr	r3, [pc, #608]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b8e:	f023 020c 	bic.w	r2, r3, #12
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	4995      	ldr	r1, [pc, #596]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 0304 	and.w	r3, r3, #4
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00a      	beq.n	8009bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009baa:	4b90      	ldr	r3, [pc, #576]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bb0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	498c      	ldr	r1, [pc, #560]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f003 0308 	and.w	r3, r3, #8
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d00a      	beq.n	8009be2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009bcc:	4b87      	ldr	r3, [pc, #540]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bd2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	4984      	ldr	r1, [pc, #528]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0310 	and.w	r3, r3, #16
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009bee:	4b7f      	ldr	r3, [pc, #508]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009bf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	497b      	ldr	r1, [pc, #492]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f003 0320 	and.w	r3, r3, #32
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d00a      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c10:	4b76      	ldr	r3, [pc, #472]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c16:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	699b      	ldr	r3, [r3, #24]
 8009c1e:	4973      	ldr	r1, [pc, #460]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d00a      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009c32:	4b6e      	ldr	r3, [pc, #440]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c38:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	69db      	ldr	r3, [r3, #28]
 8009c40:	496a      	ldr	r1, [pc, #424]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c42:	4313      	orrs	r3, r2
 8009c44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d00a      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009c54:	4b65      	ldr	r3, [pc, #404]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c5a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	4962      	ldr	r1, [pc, #392]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c64:	4313      	orrs	r3, r2
 8009c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00a      	beq.n	8009c8c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009c76:	4b5d      	ldr	r3, [pc, #372]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c84:	4959      	ldr	r1, [pc, #356]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d00a      	beq.n	8009cae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c98:	4b54      	ldr	r3, [pc, #336]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c9e:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca6:	4951      	ldr	r1, [pc, #324]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d015      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009cba:	4b4c      	ldr	r3, [pc, #304]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cc0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cc8:	4948      	ldr	r1, [pc, #288]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009cd8:	d105      	bne.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009cda:	4b44      	ldr	r3, [pc, #272]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cdc:	68db      	ldr	r3, [r3, #12]
 8009cde:	4a43      	ldr	r2, [pc, #268]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009ce0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ce4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d015      	beq.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009cf2:	4b3e      	ldr	r3, [pc, #248]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cf8:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d00:	493a      	ldr	r1, [pc, #232]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d02:	4313      	orrs	r3, r2
 8009d04:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009d10:	d105      	bne.n	8009d1e <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d12:	4b36      	ldr	r3, [pc, #216]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d14:	68db      	ldr	r3, [r3, #12]
 8009d16:	4a35      	ldr	r2, [pc, #212]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d18:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d1c:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d015      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009d2a:	4b30      	ldr	r3, [pc, #192]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d30:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d38:	492c      	ldr	r1, [pc, #176]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d48:	d105      	bne.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d4a:	4b28      	ldr	r3, [pc, #160]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	4a27      	ldr	r2, [pc, #156]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d54:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d015      	beq.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009d62:	4b22      	ldr	r3, [pc, #136]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d70:	491e      	ldr	r1, [pc, #120]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009d80:	d105      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d82:	4b1a      	ldr	r3, [pc, #104]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d84:	68db      	ldr	r3, [r3, #12]
 8009d86:	4a19      	ldr	r2, [pc, #100]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009d8c:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d015      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d9a:	4b14      	ldr	r3, [pc, #80]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009da0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009da8:	4910      	ldr	r1, [pc, #64]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009db8:	d105      	bne.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009dba:	4b0c      	ldr	r3, [pc, #48]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dbc:	68db      	ldr	r3, [r3, #12]
 8009dbe:	4a0b      	ldr	r2, [pc, #44]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dc0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009dc4:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d018      	beq.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009dd2:	4b06      	ldr	r3, [pc, #24]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dd8:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009de0:	4902      	ldr	r1, [pc, #8]	@ (8009dec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009de2:	4313      	orrs	r3, r2
 8009de4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	e001      	b.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009dec:	40021000 	.word	0x40021000
 8009df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009df2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009df6:	d105      	bne.n	8009e04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009df8:	4b21      	ldr	r3, [pc, #132]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	4a20      	ldr	r2, [pc, #128]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009dfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e02:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d015      	beq.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009e10:	4b1b      	ldr	r3, [pc, #108]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e16:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1e:	4918      	ldr	r1, [pc, #96]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e20:	4313      	orrs	r3, r2
 8009e22:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e2e:	d105      	bne.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009e30:	4b13      	ldr	r3, [pc, #76]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e32:	68db      	ldr	r3, [r3, #12]
 8009e34:	4a12      	ldr	r2, [pc, #72]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e3a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d015      	beq.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009e48:	4b0d      	ldr	r3, [pc, #52]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009e4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e56:	490a      	ldr	r1, [pc, #40]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e62:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009e66:	d105      	bne.n	8009e74 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009e68:	4b05      	ldr	r3, [pc, #20]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	4a04      	ldr	r2, [pc, #16]	@ (8009e80 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009e6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009e72:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009e74:	7cbb      	ldrb	r3, [r7, #18]
}
 8009e76:	4618      	mov	r0, r3
 8009e78:	3718      	adds	r7, #24
 8009e7a:	46bd      	mov	sp, r7
 8009e7c:	bd80      	pop	{r7, pc}
 8009e7e:	bf00      	nop
 8009e80:	40021000 	.word	0x40021000

08009e84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d101      	bne.n	8009e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e09d      	b.n	8009fd2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d108      	bne.n	8009eb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ea6:	d009      	beq.n	8009ebc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2200      	movs	r2, #0
 8009eac:	61da      	str	r2, [r3, #28]
 8009eae:	e005      	b.n	8009ebc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2200      	movs	r2, #0
 8009eba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7fb fa86 	bl	80053e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2202      	movs	r2, #2
 8009ee0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	68db      	ldr	r3, [r3, #12]
 8009ef8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009efc:	d902      	bls.n	8009f04 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009efe:	2300      	movs	r3, #0
 8009f00:	60fb      	str	r3, [r7, #12]
 8009f02:	e002      	b.n	8009f0a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009f08:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009f12:	d007      	beq.n	8009f24 <HAL_SPI_Init+0xa0>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009f1c:	d002      	beq.n	8009f24 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	685b      	ldr	r3, [r3, #4]
 8009f28:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	695b      	ldr	r3, [r3, #20]
 8009f44:	f003 0301 	and.w	r3, r3, #1
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	699b      	ldr	r3, [r3, #24]
 8009f4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f5c:	431a      	orrs	r2, r3
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a1b      	ldr	r3, [r3, #32]
 8009f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f66:	ea42 0103 	orr.w	r1, r2, r3
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f6e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	699b      	ldr	r3, [r3, #24]
 8009f7e:	0c1b      	lsrs	r3, r3, #16
 8009f80:	f003 0204 	and.w	r2, r3, #4
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f92:	f003 0308 	and.w	r3, r3, #8
 8009f96:	431a      	orrs	r2, r3
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009fa0:	ea42 0103 	orr.w	r1, r2, r3
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	430a      	orrs	r2, r1
 8009fb0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69da      	ldr	r2, [r3, #28]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009fc0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	2201      	movs	r2, #1
 8009fcc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3710      	adds	r7, #16
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b08a      	sub	sp, #40	@ 0x28
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d101      	bne.n	800a000 <HAL_SPI_TransmitReceive+0x26>
 8009ffc:	2302      	movs	r3, #2
 8009ffe:	e20a      	b.n	800a416 <HAL_SPI_TransmitReceive+0x43c>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a008:	f7fb fc12 	bl	8005830 <HAL_GetTick>
 800a00c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a014:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800a01c:	887b      	ldrh	r3, [r7, #2]
 800a01e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800a020:	887b      	ldrh	r3, [r7, #2]
 800a022:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a024:	7efb      	ldrb	r3, [r7, #27]
 800a026:	2b01      	cmp	r3, #1
 800a028:	d00e      	beq.n	800a048 <HAL_SPI_TransmitReceive+0x6e>
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a030:	d106      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d102      	bne.n	800a040 <HAL_SPI_TransmitReceive+0x66>
 800a03a:	7efb      	ldrb	r3, [r7, #27]
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d003      	beq.n	800a048 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800a040:	2302      	movs	r3, #2
 800a042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a046:	e1e0      	b.n	800a40a <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d005      	beq.n	800a05a <HAL_SPI_TransmitReceive+0x80>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d002      	beq.n	800a05a <HAL_SPI_TransmitReceive+0x80>
 800a054:	887b      	ldrh	r3, [r7, #2]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d103      	bne.n	800a062 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800a05a:	2301      	movs	r3, #1
 800a05c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800a060:	e1d3      	b.n	800a40a <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800a068:	b2db      	uxtb	r3, r3
 800a06a:	2b04      	cmp	r3, #4
 800a06c:	d003      	beq.n	800a076 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2205      	movs	r2, #5
 800a072:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	887a      	ldrh	r2, [r7, #2]
 800a086:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	887a      	ldrh	r2, [r7, #2]
 800a08e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	887a      	ldrh	r2, [r7, #2]
 800a09c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	887a      	ldrh	r2, [r7, #2]
 800a0a2:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	68db      	ldr	r3, [r3, #12]
 800a0b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a0b8:	d802      	bhi.n	800a0c0 <HAL_SPI_TransmitReceive+0xe6>
 800a0ba:	8a3b      	ldrh	r3, [r7, #16]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d908      	bls.n	800a0d2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685a      	ldr	r2, [r3, #4]
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800a0ce:	605a      	str	r2, [r3, #4]
 800a0d0:	e007      	b.n	800a0e2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0e0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	d007      	beq.n	800a100 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800a108:	f240 8081 	bls.w	800a20e <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	685b      	ldr	r3, [r3, #4]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d002      	beq.n	800a11a <HAL_SPI_TransmitReceive+0x140>
 800a114:	8a7b      	ldrh	r3, [r7, #18]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d16d      	bne.n	800a1f6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a11e:	881a      	ldrh	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a12a:	1c9a      	adds	r2, r3, #2
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a134:	b29b      	uxth	r3, r3
 800a136:	3b01      	subs	r3, #1
 800a138:	b29a      	uxth	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a13e:	e05a      	b.n	800a1f6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	689b      	ldr	r3, [r3, #8]
 800a146:	f003 0302 	and.w	r3, r3, #2
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d11b      	bne.n	800a186 <HAL_SPI_TransmitReceive+0x1ac>
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a152:	b29b      	uxth	r3, r3
 800a154:	2b00      	cmp	r3, #0
 800a156:	d016      	beq.n	800a186 <HAL_SPI_TransmitReceive+0x1ac>
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d113      	bne.n	800a186 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a162:	881a      	ldrh	r2, [r3, #0]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a16e:	1c9a      	adds	r2, r3, #2
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a178:	b29b      	uxth	r3, r3
 800a17a:	3b01      	subs	r3, #1
 800a17c:	b29a      	uxth	r2, r3
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	f003 0301 	and.w	r3, r3, #1
 800a190:	2b01      	cmp	r3, #1
 800a192:	d11c      	bne.n	800a1ce <HAL_SPI_TransmitReceive+0x1f4>
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d016      	beq.n	800a1ce <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68da      	ldr	r2, [r3, #12]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1aa:	b292      	uxth	r2, r2
 800a1ac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a1b2:	1c9a      	adds	r2, r3, #2
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a1be:	b29b      	uxth	r3, r3
 800a1c0:	3b01      	subs	r3, #1
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a1ce:	f7fb fb2f 	bl	8005830 <HAL_GetTick>
 800a1d2:	4602      	mov	r2, r0
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	1ad3      	subs	r3, r2, r3
 800a1d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d80b      	bhi.n	800a1f6 <HAL_SPI_TransmitReceive+0x21c>
 800a1de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1e4:	d007      	beq.n	800a1f6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800a1e6:	2303      	movs	r3, #3
 800a1e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	2201      	movs	r2, #1
 800a1f0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a1f4:	e109      	b.n	800a40a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d19f      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x166>
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a206:	b29b      	uxth	r3, r3
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d199      	bne.n	800a140 <HAL_SPI_TransmitReceive+0x166>
 800a20c:	e0e3      	b.n	800a3d6 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d003      	beq.n	800a21e <HAL_SPI_TransmitReceive+0x244>
 800a216:	8a7b      	ldrh	r3, [r7, #18]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	f040 80cf 	bne.w	800a3bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a222:	b29b      	uxth	r3, r3
 800a224:	2b01      	cmp	r3, #1
 800a226:	d912      	bls.n	800a24e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a22c:	881a      	ldrh	r2, [r3, #0]
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a238:	1c9a      	adds	r2, r3, #2
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a242:	b29b      	uxth	r3, r3
 800a244:	3b02      	subs	r3, #2
 800a246:	b29a      	uxth	r2, r3
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a24c:	e0b6      	b.n	800a3bc <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	330c      	adds	r3, #12
 800a258:	7812      	ldrb	r2, [r2, #0]
 800a25a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a260:	1c5a      	adds	r2, r3, #1
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	3b01      	subs	r3, #1
 800a26e:	b29a      	uxth	r2, r3
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a274:	e0a2      	b.n	800a3bc <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b02      	cmp	r3, #2
 800a282:	d134      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x314>
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a288:	b29b      	uxth	r3, r3
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d02f      	beq.n	800a2ee <HAL_SPI_TransmitReceive+0x314>
 800a28e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a290:	2b01      	cmp	r3, #1
 800a292:	d12c      	bne.n	800a2ee <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a298:	b29b      	uxth	r3, r3
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d912      	bls.n	800a2c4 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2a2:	881a      	ldrh	r2, [r3, #0]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2ae:	1c9a      	adds	r2, r3, #2
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2b8:	b29b      	uxth	r3, r3
 800a2ba:	3b02      	subs	r3, #2
 800a2bc:	b29a      	uxth	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800a2c2:	e012      	b.n	800a2ea <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	330c      	adds	r3, #12
 800a2ce:	7812      	ldrb	r2, [r2, #0]
 800a2d0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a2d6:	1c5a      	adds	r2, r3, #1
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a2e0:	b29b      	uxth	r3, r3
 800a2e2:	3b01      	subs	r3, #1
 800a2e4:	b29a      	uxth	r2, r3
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	f003 0301 	and.w	r3, r3, #1
 800a2f8:	2b01      	cmp	r3, #1
 800a2fa:	d148      	bne.n	800a38e <HAL_SPI_TransmitReceive+0x3b4>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d042      	beq.n	800a38e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a30e:	b29b      	uxth	r3, r3
 800a310:	2b01      	cmp	r3, #1
 800a312:	d923      	bls.n	800a35c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	68da      	ldr	r2, [r3, #12]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a31e:	b292      	uxth	r2, r2
 800a320:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a326:	1c9a      	adds	r2, r3, #2
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a332:	b29b      	uxth	r3, r3
 800a334:	3b02      	subs	r3, #2
 800a336:	b29a      	uxth	r2, r3
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a344:	b29b      	uxth	r3, r3
 800a346:	2b01      	cmp	r3, #1
 800a348:	d81f      	bhi.n	800a38a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	685a      	ldr	r2, [r3, #4]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a358:	605a      	str	r2, [r3, #4]
 800a35a:	e016      	b.n	800a38a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f103 020c 	add.w	r2, r3, #12
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a368:	7812      	ldrb	r2, [r2, #0]
 800a36a:	b2d2      	uxtb	r2, r2
 800a36c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a372:	1c5a      	adds	r2, r3, #1
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a37e:	b29b      	uxth	r3, r3
 800a380:	3b01      	subs	r3, #1
 800a382:	b29a      	uxth	r2, r3
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a38a:	2301      	movs	r3, #1
 800a38c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a38e:	f7fb fa4f 	bl	8005830 <HAL_GetTick>
 800a392:	4602      	mov	r2, r0
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	1ad3      	subs	r3, r2, r3
 800a398:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a39a:	429a      	cmp	r2, r3
 800a39c:	d803      	bhi.n	800a3a6 <HAL_SPI_TransmitReceive+0x3cc>
 800a39e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3a4:	d102      	bne.n	800a3ac <HAL_SPI_TransmitReceive+0x3d2>
 800a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d107      	bne.n	800a3bc <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800a3ba:	e026      	b.n	800a40a <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f47f af57 	bne.w	800a276 <HAL_SPI_TransmitReceive+0x29c>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800a3ce:	b29b      	uxth	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f47f af50 	bne.w	800a276 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a3d6:	69fa      	ldr	r2, [r7, #28]
 800a3d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	f000 f93e 	bl	800a65c <SPI_EndRxTxTransaction>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d005      	beq.n	800a3f2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2220      	movs	r2, #32
 800a3f0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a400:	e003      	b.n	800a40a <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2201      	movs	r2, #1
 800a406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800a412:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800a416:	4618      	mov	r0, r3
 800a418:	3728      	adds	r7, #40	@ 0x28
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}
	...

0800a420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b088      	sub	sp, #32
 800a424:	af00      	add	r7, sp, #0
 800a426:	60f8      	str	r0, [r7, #12]
 800a428:	60b9      	str	r1, [r7, #8]
 800a42a:	603b      	str	r3, [r7, #0]
 800a42c:	4613      	mov	r3, r2
 800a42e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a430:	f7fb f9fe 	bl	8005830 <HAL_GetTick>
 800a434:	4602      	mov	r2, r0
 800a436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	683a      	ldr	r2, [r7, #0]
 800a43c:	4413      	add	r3, r2
 800a43e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a440:	f7fb f9f6 	bl	8005830 <HAL_GetTick>
 800a444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a446:	4b39      	ldr	r3, [pc, #228]	@ (800a52c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	015b      	lsls	r3, r3, #5
 800a44c:	0d1b      	lsrs	r3, r3, #20
 800a44e:	69fa      	ldr	r2, [r7, #28]
 800a450:	fb02 f303 	mul.w	r3, r2, r3
 800a454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a456:	e054      	b.n	800a502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d050      	beq.n	800a502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a460:	f7fb f9e6 	bl	8005830 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d902      	bls.n	800a476 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	2b00      	cmp	r3, #0
 800a474:	d13d      	bne.n	800a4f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a48e:	d111      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a498:	d004      	beq.n	800a4a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	689b      	ldr	r3, [r3, #8]
 800a49e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4a2:	d107      	bne.n	800a4b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a4b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a4bc:	d10f      	bne.n	800a4de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	681a      	ldr	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a4cc:	601a      	str	r2, [r3, #0]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a4dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e017      	b.n	800a522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d101      	bne.n	800a4fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a4fc:	697b      	ldr	r3, [r7, #20]
 800a4fe:	3b01      	subs	r3, #1
 800a500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689a      	ldr	r2, [r3, #8]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	4013      	ands	r3, r2
 800a50c:	68ba      	ldr	r2, [r7, #8]
 800a50e:	429a      	cmp	r2, r3
 800a510:	bf0c      	ite	eq
 800a512:	2301      	moveq	r3, #1
 800a514:	2300      	movne	r3, #0
 800a516:	b2db      	uxtb	r3, r3
 800a518:	461a      	mov	r2, r3
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d19b      	bne.n	800a458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3720      	adds	r7, #32
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	200000f4 	.word	0x200000f4

0800a530 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b08a      	sub	sp, #40	@ 0x28
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a53e:	2300      	movs	r3, #0
 800a540:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a542:	f7fb f975 	bl	8005830 <HAL_GetTick>
 800a546:	4602      	mov	r2, r0
 800a548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a54a:	1a9b      	subs	r3, r3, r2
 800a54c:	683a      	ldr	r2, [r7, #0]
 800a54e:	4413      	add	r3, r2
 800a550:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a552:	f7fb f96d 	bl	8005830 <HAL_GetTick>
 800a556:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	330c      	adds	r3, #12
 800a55e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a560:	4b3d      	ldr	r3, [pc, #244]	@ (800a658 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	4613      	mov	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	4413      	add	r3, r2
 800a56a:	00da      	lsls	r2, r3, #3
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	0d1b      	lsrs	r3, r3, #20
 800a570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a572:	fb02 f303 	mul.w	r3, r2, r3
 800a576:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a578:	e060      	b.n	800a63c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a580:	d107      	bne.n	800a592 <SPI_WaitFifoStateUntilTimeout+0x62>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2b00      	cmp	r3, #0
 800a586:	d104      	bne.n	800a592 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a588:	69fb      	ldr	r3, [r7, #28]
 800a58a:	781b      	ldrb	r3, [r3, #0]
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a590:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a598:	d050      	beq.n	800a63c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a59a:	f7fb f949 	bl	8005830 <HAL_GetTick>
 800a59e:	4602      	mov	r2, r0
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	1ad3      	subs	r3, r2, r3
 800a5a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5a6:	429a      	cmp	r2, r3
 800a5a8:	d902      	bls.n	800a5b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a5aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d13d      	bne.n	800a62c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	685a      	ldr	r2, [r3, #4]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a5be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a5c8:	d111      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a5d2:	d004      	beq.n	800a5de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a5dc:	d107      	bne.n	800a5ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681a      	ldr	r2, [r3, #0]
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a5ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a5f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a5f6:	d10f      	bne.n	800a618 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a616:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a628:	2303      	movs	r3, #3
 800a62a:	e010      	b.n	800a64e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d101      	bne.n	800a636 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a632:	2300      	movs	r3, #0
 800a634:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a636:	69bb      	ldr	r3, [r7, #24]
 800a638:	3b01      	subs	r3, #1
 800a63a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	689a      	ldr	r2, [r3, #8]
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	4013      	ands	r3, r2
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	429a      	cmp	r2, r3
 800a64a:	d196      	bne.n	800a57a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3728      	adds	r7, #40	@ 0x28
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}
 800a656:	bf00      	nop
 800a658:	200000f4 	.word	0x200000f4

0800a65c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b086      	sub	sp, #24
 800a660:	af02      	add	r7, sp, #8
 800a662:	60f8      	str	r0, [r7, #12]
 800a664:	60b9      	str	r1, [r7, #8]
 800a666:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2200      	movs	r2, #0
 800a670:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f7ff ff5b 	bl	800a530 <SPI_WaitFifoStateUntilTimeout>
 800a67a:	4603      	mov	r3, r0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a684:	f043 0220 	orr.w	r2, r3, #32
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a68c:	2303      	movs	r3, #3
 800a68e:	e027      	b.n	800a6e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	2200      	movs	r2, #0
 800a698:	2180      	movs	r1, #128	@ 0x80
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f7ff fec0 	bl	800a420 <SPI_WaitFlagStateUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d007      	beq.n	800a6b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6aa:	f043 0220 	orr.w	r2, r3, #32
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	e014      	b.n	800a6e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	f7ff ff34 	bl	800a530 <SPI_WaitFifoStateUntilTimeout>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a6d2:	f043 0220 	orr.w	r2, r3, #32
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	e000      	b.n	800a6e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d101      	bne.n	800a6fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	e049      	b.n	800a78e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a700:	b2db      	uxtb	r3, r3
 800a702:	2b00      	cmp	r3, #0
 800a704:	d106      	bne.n	800a714 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f7fa feac 	bl	800546c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2202      	movs	r2, #2
 800a718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	3304      	adds	r3, #4
 800a724:	4619      	mov	r1, r3
 800a726:	4610      	mov	r0, r2
 800a728:	f000 fe04 	bl	800b334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2201      	movs	r2, #1
 800a730:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2201      	movs	r2, #1
 800a748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2201      	movs	r2, #1
 800a750:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	2201      	movs	r2, #1
 800a760:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	2201      	movs	r2, #1
 800a768:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2201      	movs	r2, #1
 800a770:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	2201      	movs	r2, #1
 800a778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2201      	movs	r2, #1
 800a780:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2201      	movs	r2, #1
 800a788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
	...

0800a798 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a798:	b480      	push	{r7}
 800a79a:	b085      	sub	sp, #20
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a7a6:	b2db      	uxtb	r3, r3
 800a7a8:	2b01      	cmp	r3, #1
 800a7aa:	d001      	beq.n	800a7b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e04f      	b.n	800a850 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2202      	movs	r2, #2
 800a7b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68da      	ldr	r2, [r3, #12]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f042 0201 	orr.w	r2, r2, #1
 800a7c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4a23      	ldr	r2, [pc, #140]	@ (800a85c <HAL_TIM_Base_Start_IT+0xc4>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d01d      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7da:	d018      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	4a1f      	ldr	r2, [pc, #124]	@ (800a860 <HAL_TIM_Base_Start_IT+0xc8>)
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	d013      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a1e      	ldr	r2, [pc, #120]	@ (800a864 <HAL_TIM_Base_Start_IT+0xcc>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d00e      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a868 <HAL_TIM_Base_Start_IT+0xd0>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d009      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	4a1b      	ldr	r2, [pc, #108]	@ (800a86c <HAL_TIM_Base_Start_IT+0xd4>)
 800a800:	4293      	cmp	r3, r2
 800a802:	d004      	beq.n	800a80e <HAL_TIM_Base_Start_IT+0x76>
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	4a19      	ldr	r2, [pc, #100]	@ (800a870 <HAL_TIM_Base_Start_IT+0xd8>)
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d115      	bne.n	800a83a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	689a      	ldr	r2, [r3, #8]
 800a814:	4b17      	ldr	r3, [pc, #92]	@ (800a874 <HAL_TIM_Base_Start_IT+0xdc>)
 800a816:	4013      	ands	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b06      	cmp	r3, #6
 800a81e:	d015      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0xb4>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a826:	d011      	beq.n	800a84c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f042 0201 	orr.w	r2, r2, #1
 800a836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a838:	e008      	b.n	800a84c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f042 0201 	orr.w	r2, r2, #1
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	e000      	b.n	800a84e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a84c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	3714      	adds	r7, #20
 800a854:	46bd      	mov	sp, r7
 800a856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85a:	4770      	bx	lr
 800a85c:	40012c00 	.word	0x40012c00
 800a860:	40000400 	.word	0x40000400
 800a864:	40000800 	.word	0x40000800
 800a868:	40013400 	.word	0x40013400
 800a86c:	40014000 	.word	0x40014000
 800a870:	40015000 	.word	0x40015000
 800a874:	00010007 	.word	0x00010007

0800a878 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b082      	sub	sp, #8
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d101      	bne.n	800a88a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	e049      	b.n	800a91e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a890:	b2db      	uxtb	r3, r3
 800a892:	2b00      	cmp	r3, #0
 800a894:	d106      	bne.n	800a8a4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f000 f841 	bl	800a926 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2202      	movs	r2, #2
 800a8a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	3304      	adds	r3, #4
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	4610      	mov	r0, r2
 800a8b8:	f000 fd3c 	bl	800b334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	2201      	movs	r2, #1
 800a8c0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2201      	movs	r2, #1
 800a900:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2201      	movs	r2, #1
 800a908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a926:	b480      	push	{r7}
 800a928:	b083      	sub	sp, #12
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a92e:	bf00      	nop
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b082      	sub	sp, #8
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d101      	bne.n	800a94c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e049      	b.n	800a9e0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a952:	b2db      	uxtb	r3, r3
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2200      	movs	r2, #0
 800a95c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f000 f841 	bl	800a9e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	2202      	movs	r2, #2
 800a96a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	3304      	adds	r3, #4
 800a976:	4619      	mov	r1, r3
 800a978:	4610      	mov	r0, r2
 800a97a:	f000 fcdb 	bl	800b334 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2201      	movs	r2, #1
 800a982:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2201      	movs	r2, #1
 800a992:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2201      	movs	r2, #1
 800a99a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2201      	movs	r2, #1
 800a9ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2201      	movs	r2, #1
 800a9c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2201      	movs	r2, #1
 800a9da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b084      	sub	sp, #16
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d109      	bne.n	800aa20 <HAL_TIM_PWM_Start+0x24>
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800aa12:	b2db      	uxtb	r3, r3
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	bf14      	ite	ne
 800aa18:	2301      	movne	r3, #1
 800aa1a:	2300      	moveq	r3, #0
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	e03c      	b.n	800aa9a <HAL_TIM_PWM_Start+0x9e>
 800aa20:	683b      	ldr	r3, [r7, #0]
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d109      	bne.n	800aa3a <HAL_TIM_PWM_Start+0x3e>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	bf14      	ite	ne
 800aa32:	2301      	movne	r3, #1
 800aa34:	2300      	moveq	r3, #0
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	e02f      	b.n	800aa9a <HAL_TIM_PWM_Start+0x9e>
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	2b08      	cmp	r3, #8
 800aa3e:	d109      	bne.n	800aa54 <HAL_TIM_PWM_Start+0x58>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	bf14      	ite	ne
 800aa4c:	2301      	movne	r3, #1
 800aa4e:	2300      	moveq	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	e022      	b.n	800aa9a <HAL_TIM_PWM_Start+0x9e>
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b0c      	cmp	r3, #12
 800aa58:	d109      	bne.n	800aa6e <HAL_TIM_PWM_Start+0x72>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	bf14      	ite	ne
 800aa66:	2301      	movne	r3, #1
 800aa68:	2300      	moveq	r3, #0
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	e015      	b.n	800aa9a <HAL_TIM_PWM_Start+0x9e>
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	2b10      	cmp	r3, #16
 800aa72:	d109      	bne.n	800aa88 <HAL_TIM_PWM_Start+0x8c>
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	bf14      	ite	ne
 800aa80:	2301      	movne	r3, #1
 800aa82:	2300      	moveq	r3, #0
 800aa84:	b2db      	uxtb	r3, r3
 800aa86:	e008      	b.n	800aa9a <HAL_TIM_PWM_Start+0x9e>
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	bf14      	ite	ne
 800aa94:	2301      	movne	r3, #1
 800aa96:	2300      	moveq	r3, #0
 800aa98:	b2db      	uxtb	r3, r3
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d001      	beq.n	800aaa2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e0a1      	b.n	800abe6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d104      	bne.n	800aab2 <HAL_TIM_PWM_Start+0xb6>
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2202      	movs	r2, #2
 800aaac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800aab0:	e023      	b.n	800aafa <HAL_TIM_PWM_Start+0xfe>
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d104      	bne.n	800aac2 <HAL_TIM_PWM_Start+0xc6>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	2202      	movs	r2, #2
 800aabc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800aac0:	e01b      	b.n	800aafa <HAL_TIM_PWM_Start+0xfe>
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	2b08      	cmp	r3, #8
 800aac6:	d104      	bne.n	800aad2 <HAL_TIM_PWM_Start+0xd6>
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2202      	movs	r2, #2
 800aacc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800aad0:	e013      	b.n	800aafa <HAL_TIM_PWM_Start+0xfe>
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	2b0c      	cmp	r3, #12
 800aad6:	d104      	bne.n	800aae2 <HAL_TIM_PWM_Start+0xe6>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	2202      	movs	r2, #2
 800aadc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800aae0:	e00b      	b.n	800aafa <HAL_TIM_PWM_Start+0xfe>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	2b10      	cmp	r3, #16
 800aae6:	d104      	bne.n	800aaf2 <HAL_TIM_PWM_Start+0xf6>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	2202      	movs	r2, #2
 800aaec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800aaf0:	e003      	b.n	800aafa <HAL_TIM_PWM_Start+0xfe>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2202      	movs	r2, #2
 800aaf6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	2201      	movs	r2, #1
 800ab00:	6839      	ldr	r1, [r7, #0]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f886 	bl	800bc14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	4a38      	ldr	r2, [pc, #224]	@ (800abf0 <HAL_TIM_PWM_Start+0x1f4>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d018      	beq.n	800ab44 <HAL_TIM_PWM_Start+0x148>
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4a37      	ldr	r2, [pc, #220]	@ (800abf4 <HAL_TIM_PWM_Start+0x1f8>)
 800ab18:	4293      	cmp	r3, r2
 800ab1a:	d013      	beq.n	800ab44 <HAL_TIM_PWM_Start+0x148>
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	4a35      	ldr	r2, [pc, #212]	@ (800abf8 <HAL_TIM_PWM_Start+0x1fc>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d00e      	beq.n	800ab44 <HAL_TIM_PWM_Start+0x148>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	4a34      	ldr	r2, [pc, #208]	@ (800abfc <HAL_TIM_PWM_Start+0x200>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d009      	beq.n	800ab44 <HAL_TIM_PWM_Start+0x148>
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	4a32      	ldr	r2, [pc, #200]	@ (800ac00 <HAL_TIM_PWM_Start+0x204>)
 800ab36:	4293      	cmp	r3, r2
 800ab38:	d004      	beq.n	800ab44 <HAL_TIM_PWM_Start+0x148>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a31      	ldr	r2, [pc, #196]	@ (800ac04 <HAL_TIM_PWM_Start+0x208>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d101      	bne.n	800ab48 <HAL_TIM_PWM_Start+0x14c>
 800ab44:	2301      	movs	r3, #1
 800ab46:	e000      	b.n	800ab4a <HAL_TIM_PWM_Start+0x14e>
 800ab48:	2300      	movs	r3, #0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d007      	beq.n	800ab5e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ab5c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	4a23      	ldr	r2, [pc, #140]	@ (800abf0 <HAL_TIM_PWM_Start+0x1f4>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d01d      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ab70:	d018      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	4a24      	ldr	r2, [pc, #144]	@ (800ac08 <HAL_TIM_PWM_Start+0x20c>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d013      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4a22      	ldr	r2, [pc, #136]	@ (800ac0c <HAL_TIM_PWM_Start+0x210>)
 800ab82:	4293      	cmp	r3, r2
 800ab84:	d00e      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	4a1a      	ldr	r2, [pc, #104]	@ (800abf4 <HAL_TIM_PWM_Start+0x1f8>)
 800ab8c:	4293      	cmp	r3, r2
 800ab8e:	d009      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	4a18      	ldr	r2, [pc, #96]	@ (800abf8 <HAL_TIM_PWM_Start+0x1fc>)
 800ab96:	4293      	cmp	r3, r2
 800ab98:	d004      	beq.n	800aba4 <HAL_TIM_PWM_Start+0x1a8>
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a19      	ldr	r2, [pc, #100]	@ (800ac04 <HAL_TIM_PWM_Start+0x208>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d115      	bne.n	800abd0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	689a      	ldr	r2, [r3, #8]
 800abaa:	4b19      	ldr	r3, [pc, #100]	@ (800ac10 <HAL_TIM_PWM_Start+0x214>)
 800abac:	4013      	ands	r3, r2
 800abae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b06      	cmp	r3, #6
 800abb4:	d015      	beq.n	800abe2 <HAL_TIM_PWM_Start+0x1e6>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abbc:	d011      	beq.n	800abe2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	681a      	ldr	r2, [r3, #0]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f042 0201 	orr.w	r2, r2, #1
 800abcc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abce:	e008      	b.n	800abe2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f042 0201 	orr.w	r2, r2, #1
 800abde:	601a      	str	r2, [r3, #0]
 800abe0:	e000      	b.n	800abe4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800abe2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800abe4:	2300      	movs	r3, #0
}
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	40012c00 	.word	0x40012c00
 800abf4:	40013400 	.word	0x40013400
 800abf8:	40014000 	.word	0x40014000
 800abfc:	40014400 	.word	0x40014400
 800ac00:	40014800 	.word	0x40014800
 800ac04:	40015000 	.word	0x40015000
 800ac08:	40000400 	.word	0x40000400
 800ac0c:	40000800 	.word	0x40000800
 800ac10:	00010007 	.word	0x00010007

0800ac14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b084      	sub	sp, #16
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	68db      	ldr	r3, [r3, #12]
 800ac22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	f003 0302 	and.w	r3, r3, #2
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d020      	beq.n	800ac78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	f003 0302 	and.w	r3, r3, #2
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d01b      	beq.n	800ac78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	f06f 0202 	mvn.w	r2, #2
 800ac48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	f003 0303 	and.w	r3, r3, #3
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fb4a 	bl	800b2f8 <HAL_TIM_IC_CaptureCallback>
 800ac64:	e005      	b.n	800ac72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb3c 	bl	800b2e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 fb4d 	bl	800b30c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f003 0304 	and.w	r3, r3, #4
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d020      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	f003 0304 	and.w	r3, r3, #4
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d01b      	beq.n	800acc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f06f 0204 	mvn.w	r2, #4
 800ac94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2202      	movs	r2, #2
 800ac9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	699b      	ldr	r3, [r3, #24]
 800aca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f000 fb24 	bl	800b2f8 <HAL_TIM_IC_CaptureCallback>
 800acb0:	e005      	b.n	800acbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 fb16 	bl	800b2e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 fb27 	bl	800b30c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2200      	movs	r2, #0
 800acc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	f003 0308 	and.w	r3, r3, #8
 800acca:	2b00      	cmp	r3, #0
 800accc:	d020      	beq.n	800ad10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f003 0308 	and.w	r3, r3, #8
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d01b      	beq.n	800ad10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f06f 0208 	mvn.w	r2, #8
 800ace0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2204      	movs	r2, #4
 800ace6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	69db      	ldr	r3, [r3, #28]
 800acee:	f003 0303 	and.w	r3, r3, #3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d003      	beq.n	800acfe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fafe 	bl	800b2f8 <HAL_TIM_IC_CaptureCallback>
 800acfc:	e005      	b.n	800ad0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f000 faf0 	bl	800b2e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 fb01 	bl	800b30c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ad10:	68bb      	ldr	r3, [r7, #8]
 800ad12:	f003 0310 	and.w	r3, r3, #16
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d020      	beq.n	800ad5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f003 0310 	and.w	r3, r3, #16
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d01b      	beq.n	800ad5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f06f 0210 	mvn.w	r2, #16
 800ad2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2208      	movs	r2, #8
 800ad32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d003      	beq.n	800ad4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fad8 	bl	800b2f8 <HAL_TIM_IC_CaptureCallback>
 800ad48:	e005      	b.n	800ad56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 faca 	bl	800b2e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fadb 	bl	800b30c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2200      	movs	r2, #0
 800ad5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f003 0301 	and.w	r3, r3, #1
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00c      	beq.n	800ad80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f003 0301 	and.w	r3, r3, #1
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d007      	beq.n	800ad80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f06f 0201 	mvn.w	r2, #1
 800ad78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7fa f8e6 	bl	8004f4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d00c      	beq.n	800adae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d007      	beq.n	800adae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800ada6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ada8:	6878      	ldr	r0, [r7, #4]
 800adaa:	f001 f885 	bl	800beb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d00c      	beq.n	800add2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d007      	beq.n	800add2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800adca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f001 f87d 	bl	800becc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00c      	beq.n	800adf6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d007      	beq.n	800adf6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800adee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800adf0:	6878      	ldr	r0, [r7, #4]
 800adf2:	f000 fa95 	bl	800b320 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00c      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f003 0320 	and.w	r3, r3, #32
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d007      	beq.n	800ae1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f06f 0220 	mvn.w	r2, #32
 800ae12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f845 	bl	800bea4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800ae1a:	68bb      	ldr	r3, [r7, #8]
 800ae1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d00c      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d007      	beq.n	800ae3e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800ae36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f001 f851 	bl	800bee0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00c      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d007      	beq.n	800ae62 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800ae5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	f001 f849 	bl	800bef4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00c      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d007      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800ae7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 f841 	bl	800bf08 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d00c      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d007      	beq.n	800aeaa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f839 	bl	800bf1c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aeaa:	bf00      	nop
 800aeac:	3710      	adds	r7, #16
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
	...

0800aeb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aec0:	2300      	movs	r3, #0
 800aec2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d101      	bne.n	800aed2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aece:	2302      	movs	r3, #2
 800aed0:	e0ff      	b.n	800b0d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2201      	movs	r2, #1
 800aed6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	2b14      	cmp	r3, #20
 800aede:	f200 80f0 	bhi.w	800b0c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aee2:	a201      	add	r2, pc, #4	@ (adr r2, 800aee8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee8:	0800af3d 	.word	0x0800af3d
 800aeec:	0800b0c3 	.word	0x0800b0c3
 800aef0:	0800b0c3 	.word	0x0800b0c3
 800aef4:	0800b0c3 	.word	0x0800b0c3
 800aef8:	0800af7d 	.word	0x0800af7d
 800aefc:	0800b0c3 	.word	0x0800b0c3
 800af00:	0800b0c3 	.word	0x0800b0c3
 800af04:	0800b0c3 	.word	0x0800b0c3
 800af08:	0800afbf 	.word	0x0800afbf
 800af0c:	0800b0c3 	.word	0x0800b0c3
 800af10:	0800b0c3 	.word	0x0800b0c3
 800af14:	0800b0c3 	.word	0x0800b0c3
 800af18:	0800afff 	.word	0x0800afff
 800af1c:	0800b0c3 	.word	0x0800b0c3
 800af20:	0800b0c3 	.word	0x0800b0c3
 800af24:	0800b0c3 	.word	0x0800b0c3
 800af28:	0800b041 	.word	0x0800b041
 800af2c:	0800b0c3 	.word	0x0800b0c3
 800af30:	0800b0c3 	.word	0x0800b0c3
 800af34:	0800b0c3 	.word	0x0800b0c3
 800af38:	0800b081 	.word	0x0800b081
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	68b9      	ldr	r1, [r7, #8]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 faa0 	bl	800b488 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0208 	orr.w	r2, r2, #8
 800af56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699a      	ldr	r2, [r3, #24]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0204 	bic.w	r2, r2, #4
 800af66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6999      	ldr	r1, [r3, #24]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	430a      	orrs	r2, r1
 800af78:	619a      	str	r2, [r3, #24]
      break;
 800af7a:	e0a5      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	68b9      	ldr	r1, [r7, #8]
 800af82:	4618      	mov	r0, r3
 800af84:	f000 fb1a 	bl	800b5bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	699a      	ldr	r2, [r3, #24]
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800af96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	699a      	ldr	r2, [r3, #24]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800afa6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6999      	ldr	r1, [r3, #24]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	691b      	ldr	r3, [r3, #16]
 800afb2:	021a      	lsls	r2, r3, #8
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	430a      	orrs	r2, r1
 800afba:	619a      	str	r2, [r3, #24]
      break;
 800afbc:	e084      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	68b9      	ldr	r1, [r7, #8]
 800afc4:	4618      	mov	r0, r3
 800afc6:	f000 fb8d 	bl	800b6e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	69da      	ldr	r2, [r3, #28]
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f042 0208 	orr.w	r2, r2, #8
 800afd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	69da      	ldr	r2, [r3, #28]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 0204 	bic.w	r2, r2, #4
 800afe8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69d9      	ldr	r1, [r3, #28]
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	691a      	ldr	r2, [r3, #16]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	430a      	orrs	r2, r1
 800affa:	61da      	str	r2, [r3, #28]
      break;
 800affc:	e064      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	4618      	mov	r0, r3
 800b006:	f000 fbff 	bl	800b808 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	69da      	ldr	r2, [r3, #28]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b018:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	69da      	ldr	r2, [r3, #28]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b028:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	69d9      	ldr	r1, [r3, #28]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	691b      	ldr	r3, [r3, #16]
 800b034:	021a      	lsls	r2, r3, #8
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	430a      	orrs	r2, r1
 800b03c:	61da      	str	r2, [r3, #28]
      break;
 800b03e:	e043      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	68b9      	ldr	r1, [r7, #8]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fc72 	bl	800b930 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0208 	orr.w	r2, r2, #8
 800b05a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 0204 	bic.w	r2, r2, #4
 800b06a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	430a      	orrs	r2, r1
 800b07c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b07e:	e023      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	68b9      	ldr	r1, [r7, #8]
 800b086:	4618      	mov	r0, r3
 800b088:	f000 fcbc 	bl	800ba04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b09a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800b0aa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	691b      	ldr	r3, [r3, #16]
 800b0b6:	021a      	lsls	r2, r3, #8
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	430a      	orrs	r2, r1
 800b0be:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800b0c0:	e002      	b.n	800b0c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b0d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop

0800b0dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
 800b0e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d101      	bne.n	800b0f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b0f4:	2302      	movs	r3, #2
 800b0f6:	e0e6      	b.n	800b2c6 <HAL_TIM_ConfigClockSource+0x1ea>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2202      	movs	r2, #2
 800b104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800b116:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800b11a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b122:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	68ba      	ldr	r2, [r7, #8]
 800b12a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	4a67      	ldr	r2, [pc, #412]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b132:	4293      	cmp	r3, r2
 800b134:	f000 80b1 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b138:	4a65      	ldr	r2, [pc, #404]	@ (800b2d0 <HAL_TIM_ConfigClockSource+0x1f4>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	f200 80b6 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b140:	4a64      	ldr	r2, [pc, #400]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b142:	4293      	cmp	r3, r2
 800b144:	f000 80a9 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b148:	4a62      	ldr	r2, [pc, #392]	@ (800b2d4 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	f200 80ae 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b150:	4a61      	ldr	r2, [pc, #388]	@ (800b2d8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b152:	4293      	cmp	r3, r2
 800b154:	f000 80a1 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b158:	4a5f      	ldr	r2, [pc, #380]	@ (800b2d8 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b15a:	4293      	cmp	r3, r2
 800b15c:	f200 80a6 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b160:	4a5e      	ldr	r2, [pc, #376]	@ (800b2dc <HAL_TIM_ConfigClockSource+0x200>)
 800b162:	4293      	cmp	r3, r2
 800b164:	f000 8099 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b168:	4a5c      	ldr	r2, [pc, #368]	@ (800b2dc <HAL_TIM_ConfigClockSource+0x200>)
 800b16a:	4293      	cmp	r3, r2
 800b16c:	f200 809e 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b170:	4a5b      	ldr	r2, [pc, #364]	@ (800b2e0 <HAL_TIM_ConfigClockSource+0x204>)
 800b172:	4293      	cmp	r3, r2
 800b174:	f000 8091 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b178:	4a59      	ldr	r2, [pc, #356]	@ (800b2e0 <HAL_TIM_ConfigClockSource+0x204>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	f200 8096 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b180:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b184:	f000 8089 	beq.w	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b188:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800b18c:	f200 808e 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b194:	d03e      	beq.n	800b214 <HAL_TIM_ConfigClockSource+0x138>
 800b196:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b19a:	f200 8087 	bhi.w	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b19e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1a2:	f000 8086 	beq.w	800b2b2 <HAL_TIM_ConfigClockSource+0x1d6>
 800b1a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b1aa:	d87f      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1ac:	2b70      	cmp	r3, #112	@ 0x70
 800b1ae:	d01a      	beq.n	800b1e6 <HAL_TIM_ConfigClockSource+0x10a>
 800b1b0:	2b70      	cmp	r3, #112	@ 0x70
 800b1b2:	d87b      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1b4:	2b60      	cmp	r3, #96	@ 0x60
 800b1b6:	d050      	beq.n	800b25a <HAL_TIM_ConfigClockSource+0x17e>
 800b1b8:	2b60      	cmp	r3, #96	@ 0x60
 800b1ba:	d877      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1bc:	2b50      	cmp	r3, #80	@ 0x50
 800b1be:	d03c      	beq.n	800b23a <HAL_TIM_ConfigClockSource+0x15e>
 800b1c0:	2b50      	cmp	r3, #80	@ 0x50
 800b1c2:	d873      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1c4:	2b40      	cmp	r3, #64	@ 0x40
 800b1c6:	d058      	beq.n	800b27a <HAL_TIM_ConfigClockSource+0x19e>
 800b1c8:	2b40      	cmp	r3, #64	@ 0x40
 800b1ca:	d86f      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1cc:	2b30      	cmp	r3, #48	@ 0x30
 800b1ce:	d064      	beq.n	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b1d0:	2b30      	cmp	r3, #48	@ 0x30
 800b1d2:	d86b      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1d4:	2b20      	cmp	r3, #32
 800b1d6:	d060      	beq.n	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b1d8:	2b20      	cmp	r3, #32
 800b1da:	d867      	bhi.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d05c      	beq.n	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b1e0:	2b10      	cmp	r3, #16
 800b1e2:	d05a      	beq.n	800b29a <HAL_TIM_ConfigClockSource+0x1be>
 800b1e4:	e062      	b.n	800b2ac <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b1ee:	683b      	ldr	r3, [r7, #0]
 800b1f0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b1f6:	f000 fced 	bl	800bbd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	689b      	ldr	r3, [r3, #8]
 800b200:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800b208:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	68ba      	ldr	r2, [r7, #8]
 800b210:	609a      	str	r2, [r3, #8]
      break;
 800b212:	e04f      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b224:	f000 fcd6 	bl	800bbd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	689a      	ldr	r2, [r3, #8]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b236:	609a      	str	r2, [r3, #8]
      break;
 800b238:	e03c      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b246:	461a      	mov	r2, r3
 800b248:	f000 fc48 	bl	800badc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	2150      	movs	r1, #80	@ 0x50
 800b252:	4618      	mov	r0, r3
 800b254:	f000 fca1 	bl	800bb9a <TIM_ITRx_SetConfig>
      break;
 800b258:	e02c      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b266:	461a      	mov	r2, r3
 800b268:	f000 fc67 	bl	800bb3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	2160      	movs	r1, #96	@ 0x60
 800b272:	4618      	mov	r0, r3
 800b274:	f000 fc91 	bl	800bb9a <TIM_ITRx_SetConfig>
      break;
 800b278:	e01c      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b286:	461a      	mov	r2, r3
 800b288:	f000 fc28 	bl	800badc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	2140      	movs	r1, #64	@ 0x40
 800b292:	4618      	mov	r0, r3
 800b294:	f000 fc81 	bl	800bb9a <TIM_ITRx_SetConfig>
      break;
 800b298:	e00c      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681a      	ldr	r2, [r3, #0]
 800b29e:	683b      	ldr	r3, [r7, #0]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4619      	mov	r1, r3
 800b2a4:	4610      	mov	r0, r2
 800b2a6:	f000 fc78 	bl	800bb9a <TIM_ITRx_SetConfig>
      break;
 800b2aa:	e003      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	73fb      	strb	r3, [r7, #15]
      break;
 800b2b0:	e000      	b.n	800b2b4 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b2b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2200      	movs	r2, #0
 800b2c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800b2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	00100070 	.word	0x00100070
 800b2d4:	00100050 	.word	0x00100050
 800b2d8:	00100040 	.word	0x00100040
 800b2dc:	00100030 	.word	0x00100030
 800b2e0:	00100020 	.word	0x00100020

0800b2e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b2e4:	b480      	push	{r7}
 800b2e6:	b083      	sub	sp, #12
 800b2e8:	af00      	add	r7, sp, #0
 800b2ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b2ec:	bf00      	nop
 800b2ee:	370c      	adds	r7, #12
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	4770      	bx	lr

0800b2f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b2f8:	b480      	push	{r7}
 800b2fa:	b083      	sub	sp, #12
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b300:	bf00      	nop
 800b302:	370c      	adds	r7, #12
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr

0800b30c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b083      	sub	sp, #12
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b314:	bf00      	nop
 800b316:	370c      	adds	r7, #12
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b320:	b480      	push	{r7}
 800b322:	b083      	sub	sp, #12
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b328:	bf00      	nop
 800b32a:	370c      	adds	r7, #12
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
 800b33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	4a48      	ldr	r2, [pc, #288]	@ (800b468 <TIM_Base_SetConfig+0x134>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d013      	beq.n	800b374 <TIM_Base_SetConfig+0x40>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b352:	d00f      	beq.n	800b374 <TIM_Base_SetConfig+0x40>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	4a45      	ldr	r2, [pc, #276]	@ (800b46c <TIM_Base_SetConfig+0x138>)
 800b358:	4293      	cmp	r3, r2
 800b35a:	d00b      	beq.n	800b374 <TIM_Base_SetConfig+0x40>
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	4a44      	ldr	r2, [pc, #272]	@ (800b470 <TIM_Base_SetConfig+0x13c>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d007      	beq.n	800b374 <TIM_Base_SetConfig+0x40>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a43      	ldr	r2, [pc, #268]	@ (800b474 <TIM_Base_SetConfig+0x140>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d003      	beq.n	800b374 <TIM_Base_SetConfig+0x40>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a42      	ldr	r2, [pc, #264]	@ (800b478 <TIM_Base_SetConfig+0x144>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d108      	bne.n	800b386 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b37a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	68fa      	ldr	r2, [r7, #12]
 800b382:	4313      	orrs	r3, r2
 800b384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	4a37      	ldr	r2, [pc, #220]	@ (800b468 <TIM_Base_SetConfig+0x134>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d01f      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b394:	d01b      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a34      	ldr	r2, [pc, #208]	@ (800b46c <TIM_Base_SetConfig+0x138>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d017      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	4a33      	ldr	r2, [pc, #204]	@ (800b470 <TIM_Base_SetConfig+0x13c>)
 800b3a2:	4293      	cmp	r3, r2
 800b3a4:	d013      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	4a32      	ldr	r2, [pc, #200]	@ (800b474 <TIM_Base_SetConfig+0x140>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d00f      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	4a32      	ldr	r2, [pc, #200]	@ (800b47c <TIM_Base_SetConfig+0x148>)
 800b3b2:	4293      	cmp	r3, r2
 800b3b4:	d00b      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	4a31      	ldr	r2, [pc, #196]	@ (800b480 <TIM_Base_SetConfig+0x14c>)
 800b3ba:	4293      	cmp	r3, r2
 800b3bc:	d007      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a30      	ldr	r2, [pc, #192]	@ (800b484 <TIM_Base_SetConfig+0x150>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d003      	beq.n	800b3ce <TIM_Base_SetConfig+0x9a>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	4a2b      	ldr	r2, [pc, #172]	@ (800b478 <TIM_Base_SetConfig+0x144>)
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d108      	bne.n	800b3e0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	68fa      	ldr	r2, [r7, #12]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	689a      	ldr	r2, [r3, #8]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b3fc:	683b      	ldr	r3, [r7, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	4a18      	ldr	r2, [pc, #96]	@ (800b468 <TIM_Base_SetConfig+0x134>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d013      	beq.n	800b434 <TIM_Base_SetConfig+0x100>
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a19      	ldr	r2, [pc, #100]	@ (800b474 <TIM_Base_SetConfig+0x140>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d00f      	beq.n	800b434 <TIM_Base_SetConfig+0x100>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a19      	ldr	r2, [pc, #100]	@ (800b47c <TIM_Base_SetConfig+0x148>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d00b      	beq.n	800b434 <TIM_Base_SetConfig+0x100>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	4a18      	ldr	r2, [pc, #96]	@ (800b480 <TIM_Base_SetConfig+0x14c>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d007      	beq.n	800b434 <TIM_Base_SetConfig+0x100>
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	4a17      	ldr	r2, [pc, #92]	@ (800b484 <TIM_Base_SetConfig+0x150>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d003      	beq.n	800b434 <TIM_Base_SetConfig+0x100>
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	4a12      	ldr	r2, [pc, #72]	@ (800b478 <TIM_Base_SetConfig+0x144>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d103      	bne.n	800b43c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	691a      	ldr	r2, [r3, #16]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	691b      	ldr	r3, [r3, #16]
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d105      	bne.n	800b45a <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	691b      	ldr	r3, [r3, #16]
 800b452:	f023 0201 	bic.w	r2, r3, #1
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	611a      	str	r2, [r3, #16]
  }
}
 800b45a:	bf00      	nop
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	40012c00 	.word	0x40012c00
 800b46c:	40000400 	.word	0x40000400
 800b470:	40000800 	.word	0x40000800
 800b474:	40013400 	.word	0x40013400
 800b478:	40015000 	.word	0x40015000
 800b47c:	40014000 	.word	0x40014000
 800b480:	40014400 	.word	0x40014400
 800b484:	40014800 	.word	0x40014800

0800b488 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6a1b      	ldr	r3, [r3, #32]
 800b49c:	f023 0201 	bic.w	r2, r3, #1
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f023 0303 	bic.w	r3, r3, #3
 800b4c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f023 0302 	bic.w	r3, r3, #2
 800b4d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	4a30      	ldr	r2, [pc, #192]	@ (800b5a4 <TIM_OC1_SetConfig+0x11c>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d013      	beq.n	800b510 <TIM_OC1_SetConfig+0x88>
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	4a2f      	ldr	r2, [pc, #188]	@ (800b5a8 <TIM_OC1_SetConfig+0x120>)
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <TIM_OC1_SetConfig+0x88>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	4a2e      	ldr	r2, [pc, #184]	@ (800b5ac <TIM_OC1_SetConfig+0x124>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <TIM_OC1_SetConfig+0x88>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	4a2d      	ldr	r2, [pc, #180]	@ (800b5b0 <TIM_OC1_SetConfig+0x128>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <TIM_OC1_SetConfig+0x88>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a2c      	ldr	r2, [pc, #176]	@ (800b5b4 <TIM_OC1_SetConfig+0x12c>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_OC1_SetConfig+0x88>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a2b      	ldr	r2, [pc, #172]	@ (800b5b8 <TIM_OC1_SetConfig+0x130>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10c      	bne.n	800b52a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f023 0308 	bic.w	r3, r3, #8
 800b516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f023 0304 	bic.w	r3, r3, #4
 800b528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a1d      	ldr	r2, [pc, #116]	@ (800b5a4 <TIM_OC1_SetConfig+0x11c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d013      	beq.n	800b55a <TIM_OC1_SetConfig+0xd2>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a1c      	ldr	r2, [pc, #112]	@ (800b5a8 <TIM_OC1_SetConfig+0x120>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d00f      	beq.n	800b55a <TIM_OC1_SetConfig+0xd2>
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	4a1b      	ldr	r2, [pc, #108]	@ (800b5ac <TIM_OC1_SetConfig+0x124>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d00b      	beq.n	800b55a <TIM_OC1_SetConfig+0xd2>
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	4a1a      	ldr	r2, [pc, #104]	@ (800b5b0 <TIM_OC1_SetConfig+0x128>)
 800b546:	4293      	cmp	r3, r2
 800b548:	d007      	beq.n	800b55a <TIM_OC1_SetConfig+0xd2>
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a19      	ldr	r2, [pc, #100]	@ (800b5b4 <TIM_OC1_SetConfig+0x12c>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d003      	beq.n	800b55a <TIM_OC1_SetConfig+0xd2>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a18      	ldr	r2, [pc, #96]	@ (800b5b8 <TIM_OC1_SetConfig+0x130>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d111      	bne.n	800b57e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b562:	693b      	ldr	r3, [r7, #16]
 800b564:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	695b      	ldr	r3, [r3, #20]
 800b56e:	693a      	ldr	r2, [r7, #16]
 800b570:	4313      	orrs	r3, r2
 800b572:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b574:	683b      	ldr	r3, [r7, #0]
 800b576:	699b      	ldr	r3, [r3, #24]
 800b578:	693a      	ldr	r2, [r7, #16]
 800b57a:	4313      	orrs	r3, r2
 800b57c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	685a      	ldr	r2, [r3, #4]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	697a      	ldr	r2, [r7, #20]
 800b596:	621a      	str	r2, [r3, #32]
}
 800b598:	bf00      	nop
 800b59a:	371c      	adds	r7, #28
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	40012c00 	.word	0x40012c00
 800b5a8:	40013400 	.word	0x40013400
 800b5ac:	40014000 	.word	0x40014000
 800b5b0:	40014400 	.word	0x40014400
 800b5b4:	40014800 	.word	0x40014800
 800b5b8:	40015000 	.word	0x40015000

0800b5bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b087      	sub	sp, #28
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
 800b5c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	6a1b      	ldr	r3, [r3, #32]
 800b5ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6a1b      	ldr	r3, [r3, #32]
 800b5d0:	f023 0210 	bic.w	r2, r3, #16
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b5ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f023 0320 	bic.w	r3, r3, #32
 800b60a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	011b      	lsls	r3, r3, #4
 800b612:	697a      	ldr	r2, [r7, #20]
 800b614:	4313      	orrs	r3, r2
 800b616:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a2c      	ldr	r2, [pc, #176]	@ (800b6cc <TIM_OC2_SetConfig+0x110>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d007      	beq.n	800b630 <TIM_OC2_SetConfig+0x74>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a2b      	ldr	r2, [pc, #172]	@ (800b6d0 <TIM_OC2_SetConfig+0x114>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d003      	beq.n	800b630 <TIM_OC2_SetConfig+0x74>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	4a2a      	ldr	r2, [pc, #168]	@ (800b6d4 <TIM_OC2_SetConfig+0x118>)
 800b62c:	4293      	cmp	r3, r2
 800b62e:	d10d      	bne.n	800b64c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b636:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	68db      	ldr	r3, [r3, #12]
 800b63c:	011b      	lsls	r3, r3, #4
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	4313      	orrs	r3, r2
 800b642:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b64a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	4a1f      	ldr	r2, [pc, #124]	@ (800b6cc <TIM_OC2_SetConfig+0x110>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d013      	beq.n	800b67c <TIM_OC2_SetConfig+0xc0>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	4a1e      	ldr	r2, [pc, #120]	@ (800b6d0 <TIM_OC2_SetConfig+0x114>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d00f      	beq.n	800b67c <TIM_OC2_SetConfig+0xc0>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	4a1e      	ldr	r2, [pc, #120]	@ (800b6d8 <TIM_OC2_SetConfig+0x11c>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d00b      	beq.n	800b67c <TIM_OC2_SetConfig+0xc0>
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	4a1d      	ldr	r2, [pc, #116]	@ (800b6dc <TIM_OC2_SetConfig+0x120>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d007      	beq.n	800b67c <TIM_OC2_SetConfig+0xc0>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	4a1c      	ldr	r2, [pc, #112]	@ (800b6e0 <TIM_OC2_SetConfig+0x124>)
 800b670:	4293      	cmp	r3, r2
 800b672:	d003      	beq.n	800b67c <TIM_OC2_SetConfig+0xc0>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	4a17      	ldr	r2, [pc, #92]	@ (800b6d4 <TIM_OC2_SetConfig+0x118>)
 800b678:	4293      	cmp	r3, r2
 800b67a:	d113      	bne.n	800b6a4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b68a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	695b      	ldr	r3, [r3, #20]
 800b690:	009b      	lsls	r3, r3, #2
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	4313      	orrs	r3, r2
 800b696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	699b      	ldr	r3, [r3, #24]
 800b69c:	009b      	lsls	r3, r3, #2
 800b69e:	693a      	ldr	r2, [r7, #16]
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	693a      	ldr	r2, [r7, #16]
 800b6a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	68fa      	ldr	r2, [r7, #12]
 800b6ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	685a      	ldr	r2, [r3, #4]
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	697a      	ldr	r2, [r7, #20]
 800b6bc:	621a      	str	r2, [r3, #32]
}
 800b6be:	bf00      	nop
 800b6c0:	371c      	adds	r7, #28
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	40012c00 	.word	0x40012c00
 800b6d0:	40013400 	.word	0x40013400
 800b6d4:	40015000 	.word	0x40015000
 800b6d8:	40014000 	.word	0x40014000
 800b6dc:	40014400 	.word	0x40014400
 800b6e0:	40014800 	.word	0x40014800

0800b6e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6e4:	b480      	push	{r7}
 800b6e6:	b087      	sub	sp, #28
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6a1b      	ldr	r3, [r3, #32]
 800b6f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	6a1b      	ldr	r3, [r3, #32]
 800b6f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	69db      	ldr	r3, [r3, #28]
 800b70a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b712:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f023 0303 	bic.w	r3, r3, #3
 800b71e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	4313      	orrs	r3, r2
 800b728:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b730:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	689b      	ldr	r3, [r3, #8]
 800b736:	021b      	lsls	r3, r3, #8
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	4313      	orrs	r3, r2
 800b73c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	4a2b      	ldr	r2, [pc, #172]	@ (800b7f0 <TIM_OC3_SetConfig+0x10c>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d007      	beq.n	800b756 <TIM_OC3_SetConfig+0x72>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	4a2a      	ldr	r2, [pc, #168]	@ (800b7f4 <TIM_OC3_SetConfig+0x110>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d003      	beq.n	800b756 <TIM_OC3_SetConfig+0x72>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	4a29      	ldr	r2, [pc, #164]	@ (800b7f8 <TIM_OC3_SetConfig+0x114>)
 800b752:	4293      	cmp	r3, r2
 800b754:	d10d      	bne.n	800b772 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b75c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	68db      	ldr	r3, [r3, #12]
 800b762:	021b      	lsls	r3, r3, #8
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b770:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	4a1e      	ldr	r2, [pc, #120]	@ (800b7f0 <TIM_OC3_SetConfig+0x10c>)
 800b776:	4293      	cmp	r3, r2
 800b778:	d013      	beq.n	800b7a2 <TIM_OC3_SetConfig+0xbe>
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	4a1d      	ldr	r2, [pc, #116]	@ (800b7f4 <TIM_OC3_SetConfig+0x110>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d00f      	beq.n	800b7a2 <TIM_OC3_SetConfig+0xbe>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	4a1d      	ldr	r2, [pc, #116]	@ (800b7fc <TIM_OC3_SetConfig+0x118>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d00b      	beq.n	800b7a2 <TIM_OC3_SetConfig+0xbe>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	4a1c      	ldr	r2, [pc, #112]	@ (800b800 <TIM_OC3_SetConfig+0x11c>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d007      	beq.n	800b7a2 <TIM_OC3_SetConfig+0xbe>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	4a1b      	ldr	r2, [pc, #108]	@ (800b804 <TIM_OC3_SetConfig+0x120>)
 800b796:	4293      	cmp	r3, r2
 800b798:	d003      	beq.n	800b7a2 <TIM_OC3_SetConfig+0xbe>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	4a16      	ldr	r2, [pc, #88]	@ (800b7f8 <TIM_OC3_SetConfig+0x114>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d113      	bne.n	800b7ca <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b7b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	695b      	ldr	r3, [r3, #20]
 800b7b6:	011b      	lsls	r3, r3, #4
 800b7b8:	693a      	ldr	r2, [r7, #16]
 800b7ba:	4313      	orrs	r3, r2
 800b7bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	699b      	ldr	r3, [r3, #24]
 800b7c2:	011b      	lsls	r3, r3, #4
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	4313      	orrs	r3, r2
 800b7c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	68fa      	ldr	r2, [r7, #12]
 800b7d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	621a      	str	r2, [r3, #32]
}
 800b7e4:	bf00      	nop
 800b7e6:	371c      	adds	r7, #28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	40012c00 	.word	0x40012c00
 800b7f4:	40013400 	.word	0x40013400
 800b7f8:	40015000 	.word	0x40015000
 800b7fc:	40014000 	.word	0x40014000
 800b800:	40014400 	.word	0x40014400
 800b804:	40014800 	.word	0x40014800

0800b808 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b808:	b480      	push	{r7}
 800b80a:	b087      	sub	sp, #28
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6a1b      	ldr	r3, [r3, #32]
 800b816:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	69db      	ldr	r3, [r3, #28]
 800b82e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b836:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b83a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b842:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	021b      	lsls	r3, r3, #8
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	4313      	orrs	r3, r2
 800b84e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b856:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	031b      	lsls	r3, r3, #12
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	4313      	orrs	r3, r2
 800b862:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	4a2c      	ldr	r2, [pc, #176]	@ (800b918 <TIM_OC4_SetConfig+0x110>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d007      	beq.n	800b87c <TIM_OC4_SetConfig+0x74>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	4a2b      	ldr	r2, [pc, #172]	@ (800b91c <TIM_OC4_SetConfig+0x114>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d003      	beq.n	800b87c <TIM_OC4_SetConfig+0x74>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	4a2a      	ldr	r2, [pc, #168]	@ (800b920 <TIM_OC4_SetConfig+0x118>)
 800b878:	4293      	cmp	r3, r2
 800b87a:	d10d      	bne.n	800b898 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b884:	683b      	ldr	r3, [r7, #0]
 800b886:	68db      	ldr	r3, [r3, #12]
 800b888:	031b      	lsls	r3, r3, #12
 800b88a:	697a      	ldr	r2, [r7, #20]
 800b88c:	4313      	orrs	r3, r2
 800b88e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b896:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	4a1f      	ldr	r2, [pc, #124]	@ (800b918 <TIM_OC4_SetConfig+0x110>)
 800b89c:	4293      	cmp	r3, r2
 800b89e:	d013      	beq.n	800b8c8 <TIM_OC4_SetConfig+0xc0>
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a1e      	ldr	r2, [pc, #120]	@ (800b91c <TIM_OC4_SetConfig+0x114>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d00f      	beq.n	800b8c8 <TIM_OC4_SetConfig+0xc0>
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b924 <TIM_OC4_SetConfig+0x11c>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d00b      	beq.n	800b8c8 <TIM_OC4_SetConfig+0xc0>
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4a1d      	ldr	r2, [pc, #116]	@ (800b928 <TIM_OC4_SetConfig+0x120>)
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d007      	beq.n	800b8c8 <TIM_OC4_SetConfig+0xc0>
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	4a1c      	ldr	r2, [pc, #112]	@ (800b92c <TIM_OC4_SetConfig+0x124>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d003      	beq.n	800b8c8 <TIM_OC4_SetConfig+0xc0>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	4a17      	ldr	r2, [pc, #92]	@ (800b920 <TIM_OC4_SetConfig+0x118>)
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d113      	bne.n	800b8f0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b8ce:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b8d6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	695b      	ldr	r3, [r3, #20]
 800b8dc:	019b      	lsls	r3, r3, #6
 800b8de:	693a      	ldr	r2, [r7, #16]
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
 800b8e8:	019b      	lsls	r3, r3, #6
 800b8ea:	693a      	ldr	r2, [r7, #16]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	693a      	ldr	r2, [r7, #16]
 800b8f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68fa      	ldr	r2, [r7, #12]
 800b8fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	685a      	ldr	r2, [r3, #4]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	697a      	ldr	r2, [r7, #20]
 800b908:	621a      	str	r2, [r3, #32]
}
 800b90a:	bf00      	nop
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	40012c00 	.word	0x40012c00
 800b91c:	40013400 	.word	0x40013400
 800b920:	40015000 	.word	0x40015000
 800b924:	40014000 	.word	0x40014000
 800b928:	40014400 	.word	0x40014400
 800b92c:	40014800 	.word	0x40014800

0800b930 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b930:	b480      	push	{r7}
 800b932:	b087      	sub	sp, #28
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	6a1b      	ldr	r3, [r3, #32]
 800b93e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a1b      	ldr	r3, [r3, #32]
 800b944:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	685b      	ldr	r3, [r3, #4]
 800b950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b95e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b96e:	693b      	ldr	r3, [r7, #16]
 800b970:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b974:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	689b      	ldr	r3, [r3, #8]
 800b97a:	041b      	lsls	r3, r3, #16
 800b97c:	693a      	ldr	r2, [r7, #16]
 800b97e:	4313      	orrs	r3, r2
 800b980:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	4a19      	ldr	r2, [pc, #100]	@ (800b9ec <TIM_OC5_SetConfig+0xbc>)
 800b986:	4293      	cmp	r3, r2
 800b988:	d013      	beq.n	800b9b2 <TIM_OC5_SetConfig+0x82>
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	4a18      	ldr	r2, [pc, #96]	@ (800b9f0 <TIM_OC5_SetConfig+0xc0>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d00f      	beq.n	800b9b2 <TIM_OC5_SetConfig+0x82>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	4a17      	ldr	r2, [pc, #92]	@ (800b9f4 <TIM_OC5_SetConfig+0xc4>)
 800b996:	4293      	cmp	r3, r2
 800b998:	d00b      	beq.n	800b9b2 <TIM_OC5_SetConfig+0x82>
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	4a16      	ldr	r2, [pc, #88]	@ (800b9f8 <TIM_OC5_SetConfig+0xc8>)
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d007      	beq.n	800b9b2 <TIM_OC5_SetConfig+0x82>
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	4a15      	ldr	r2, [pc, #84]	@ (800b9fc <TIM_OC5_SetConfig+0xcc>)
 800b9a6:	4293      	cmp	r3, r2
 800b9a8:	d003      	beq.n	800b9b2 <TIM_OC5_SetConfig+0x82>
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	4a14      	ldr	r2, [pc, #80]	@ (800ba00 <TIM_OC5_SetConfig+0xd0>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d109      	bne.n	800b9c6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b9b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	021b      	lsls	r3, r3, #8
 800b9c0:	697a      	ldr	r2, [r7, #20]
 800b9c2:	4313      	orrs	r3, r2
 800b9c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	697a      	ldr	r2, [r7, #20]
 800b9ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	685a      	ldr	r2, [r3, #4]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	693a      	ldr	r2, [r7, #16]
 800b9de:	621a      	str	r2, [r3, #32]
}
 800b9e0:	bf00      	nop
 800b9e2:	371c      	adds	r7, #28
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	40012c00 	.word	0x40012c00
 800b9f0:	40013400 	.word	0x40013400
 800b9f4:	40014000 	.word	0x40014000
 800b9f8:	40014400 	.word	0x40014400
 800b9fc:	40014800 	.word	0x40014800
 800ba00:	40015000 	.word	0x40015000

0800ba04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ba04:	b480      	push	{r7}
 800ba06:	b087      	sub	sp, #28
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6a1b      	ldr	r3, [r3, #32]
 800ba12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6a1b      	ldr	r3, [r3, #32]
 800ba18:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ba36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	021b      	lsls	r3, r3, #8
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4313      	orrs	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ba4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ba4c:	683b      	ldr	r3, [r7, #0]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	051b      	lsls	r3, r3, #20
 800ba52:	693a      	ldr	r2, [r7, #16]
 800ba54:	4313      	orrs	r3, r2
 800ba56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	4a1a      	ldr	r2, [pc, #104]	@ (800bac4 <TIM_OC6_SetConfig+0xc0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d013      	beq.n	800ba88 <TIM_OC6_SetConfig+0x84>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	4a19      	ldr	r2, [pc, #100]	@ (800bac8 <TIM_OC6_SetConfig+0xc4>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d00f      	beq.n	800ba88 <TIM_OC6_SetConfig+0x84>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	4a18      	ldr	r2, [pc, #96]	@ (800bacc <TIM_OC6_SetConfig+0xc8>)
 800ba6c:	4293      	cmp	r3, r2
 800ba6e:	d00b      	beq.n	800ba88 <TIM_OC6_SetConfig+0x84>
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4a17      	ldr	r2, [pc, #92]	@ (800bad0 <TIM_OC6_SetConfig+0xcc>)
 800ba74:	4293      	cmp	r3, r2
 800ba76:	d007      	beq.n	800ba88 <TIM_OC6_SetConfig+0x84>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	4a16      	ldr	r2, [pc, #88]	@ (800bad4 <TIM_OC6_SetConfig+0xd0>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d003      	beq.n	800ba88 <TIM_OC6_SetConfig+0x84>
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	4a15      	ldr	r2, [pc, #84]	@ (800bad8 <TIM_OC6_SetConfig+0xd4>)
 800ba84:	4293      	cmp	r3, r2
 800ba86:	d109      	bne.n	800ba9c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	695b      	ldr	r3, [r3, #20]
 800ba94:	029b      	lsls	r3, r3, #10
 800ba96:	697a      	ldr	r2, [r7, #20]
 800ba98:	4313      	orrs	r3, r2
 800ba9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	697a      	ldr	r2, [r7, #20]
 800baa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	68fa      	ldr	r2, [r7, #12]
 800baa6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	685a      	ldr	r2, [r3, #4]
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	693a      	ldr	r2, [r7, #16]
 800bab4:	621a      	str	r2, [r3, #32]
}
 800bab6:	bf00      	nop
 800bab8:	371c      	adds	r7, #28
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr
 800bac2:	bf00      	nop
 800bac4:	40012c00 	.word	0x40012c00
 800bac8:	40013400 	.word	0x40013400
 800bacc:	40014000 	.word	0x40014000
 800bad0:	40014400 	.word	0x40014400
 800bad4:	40014800 	.word	0x40014800
 800bad8:	40015000 	.word	0x40015000

0800badc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800badc:	b480      	push	{r7}
 800bade:	b087      	sub	sp, #28
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	6a1b      	ldr	r3, [r3, #32]
 800baec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6a1b      	ldr	r3, [r3, #32]
 800baf2:	f023 0201 	bic.w	r2, r3, #1
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bb06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	011b      	lsls	r3, r3, #4
 800bb0c:	693a      	ldr	r2, [r7, #16]
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f023 030a 	bic.w	r3, r3, #10
 800bb18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bb1a:	697a      	ldr	r2, [r7, #20]
 800bb1c:	68bb      	ldr	r3, [r7, #8]
 800bb1e:	4313      	orrs	r3, r2
 800bb20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	621a      	str	r2, [r3, #32]
}
 800bb2e:	bf00      	nop
 800bb30:	371c      	adds	r7, #28
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr

0800bb3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bb3a:	b480      	push	{r7}
 800bb3c:	b087      	sub	sp, #28
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	6a1b      	ldr	r3, [r3, #32]
 800bb4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	6a1b      	ldr	r3, [r3, #32]
 800bb50:	f023 0210 	bic.w	r2, r3, #16
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	699b      	ldr	r3, [r3, #24]
 800bb5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800bb64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	031b      	lsls	r3, r3, #12
 800bb6a:	693a      	ldr	r2, [r7, #16]
 800bb6c:	4313      	orrs	r3, r2
 800bb6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800bb76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	011b      	lsls	r3, r3, #4
 800bb7c:	697a      	ldr	r2, [r7, #20]
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	693a      	ldr	r2, [r7, #16]
 800bb86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	697a      	ldr	r2, [r7, #20]
 800bb8c:	621a      	str	r2, [r3, #32]
}
 800bb8e:	bf00      	nop
 800bb90:	371c      	adds	r7, #28
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b085      	sub	sp, #20
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	689b      	ldr	r3, [r3, #8]
 800bba8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800bbb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bbb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	f043 0307 	orr.w	r3, r3, #7
 800bbc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	609a      	str	r2, [r3, #8]
}
 800bbc8:	bf00      	nop
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr

0800bbd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b087      	sub	sp, #28
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	60b9      	str	r1, [r7, #8]
 800bbde:	607a      	str	r2, [r7, #4]
 800bbe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bbee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	021a      	lsls	r2, r3, #8
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	431a      	orrs	r2, r3
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	697a      	ldr	r2, [r7, #20]
 800bbfe:	4313      	orrs	r3, r2
 800bc00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	609a      	str	r2, [r3, #8]
}
 800bc08:	bf00      	nop
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bc14:	b480      	push	{r7}
 800bc16:	b087      	sub	sp, #28
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f003 031f 	and.w	r3, r3, #31
 800bc26:	2201      	movs	r2, #1
 800bc28:	fa02 f303 	lsl.w	r3, r2, r3
 800bc2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	6a1a      	ldr	r2, [r3, #32]
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	43db      	mvns	r3, r3
 800bc36:	401a      	ands	r2, r3
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	6a1a      	ldr	r2, [r3, #32]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	f003 031f 	and.w	r3, r3, #31
 800bc46:	6879      	ldr	r1, [r7, #4]
 800bc48:	fa01 f303 	lsl.w	r3, r1, r3
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	621a      	str	r2, [r3, #32]
}
 800bc52:	bf00      	nop
 800bc54:	371c      	adds	r7, #28
 800bc56:	46bd      	mov	sp, r7
 800bc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc5c:	4770      	bx	lr
	...

0800bc60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d101      	bne.n	800bc78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bc74:	2302      	movs	r3, #2
 800bc76:	e06f      	b.n	800bd58 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2202      	movs	r2, #2
 800bc84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	689b      	ldr	r3, [r3, #8]
 800bc96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	4a31      	ldr	r2, [pc, #196]	@ (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	d009      	beq.n	800bcb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4a30      	ldr	r2, [pc, #192]	@ (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d004      	beq.n	800bcb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	4a2e      	ldr	r2, [pc, #184]	@ (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d108      	bne.n	800bcc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800bcbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	68fa      	ldr	r2, [r7, #12]
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800bcce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bcd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4313      	orrs	r3, r2
 800bcdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	4a1e      	ldr	r2, [pc, #120]	@ (800bd64 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800bcec:	4293      	cmp	r3, r2
 800bcee:	d01d      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcf8:	d018      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a1c      	ldr	r2, [pc, #112]	@ (800bd70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d013      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	4a1a      	ldr	r2, [pc, #104]	@ (800bd74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d00e      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a15      	ldr	r2, [pc, #84]	@ (800bd68 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d009      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a16      	ldr	r2, [pc, #88]	@ (800bd78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d004      	beq.n	800bd2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	4a11      	ldr	r2, [pc, #68]	@ (800bd6c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d10c      	bne.n	800bd46 <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bd32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68ba      	ldr	r2, [r7, #8]
 800bd44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2201      	movs	r2, #1
 800bd4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2200      	movs	r2, #0
 800bd52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800bd56:	2300      	movs	r3, #0
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3714      	adds	r7, #20
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd62:	4770      	bx	lr
 800bd64:	40012c00 	.word	0x40012c00
 800bd68:	40013400 	.word	0x40013400
 800bd6c:	40015000 	.word	0x40015000
 800bd70:	40000400 	.word	0x40000400
 800bd74:	40000800 	.word	0x40000800
 800bd78:	40014000 	.word	0x40014000

0800bd7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800bd86:	2300      	movs	r3, #0
 800bd88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d101      	bne.n	800bd98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bd94:	2302      	movs	r3, #2
 800bd96:	e078      	b.n	800be8a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	4313      	orrs	r3, r2
 800bdba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4313      	orrs	r3, r2
 800bdd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800bdde:	683b      	ldr	r3, [r7, #0]
 800bde0:	691b      	ldr	r3, [r3, #16]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	695b      	ldr	r3, [r3, #20]
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bdfe:	4313      	orrs	r3, r2
 800be00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800be08:	683b      	ldr	r3, [r7, #0]
 800be0a:	699b      	ldr	r3, [r3, #24]
 800be0c:	041b      	lsls	r3, r3, #16
 800be0e:	4313      	orrs	r3, r2
 800be10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a1c      	ldr	r2, [pc, #112]	@ (800be98 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d009      	beq.n	800be3e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a1b      	ldr	r2, [pc, #108]	@ (800be9c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800be30:	4293      	cmp	r3, r2
 800be32:	d004      	beq.n	800be3e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4a19      	ldr	r2, [pc, #100]	@ (800bea0 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d11c      	bne.n	800be78 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be48:	051b      	lsls	r3, r3, #20
 800be4a:	4313      	orrs	r3, r2
 800be4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	6a1b      	ldr	r3, [r3, #32]
 800be58:	4313      	orrs	r3, r2
 800be5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be66:	4313      	orrs	r3, r2
 800be68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be74:	4313      	orrs	r3, r2
 800be76:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	68fa      	ldr	r2, [r7, #12]
 800be7e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	2200      	movs	r2, #0
 800be84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800be88:	2300      	movs	r3, #0
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3714      	adds	r7, #20
 800be8e:	46bd      	mov	sp, r7
 800be90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be94:	4770      	bx	lr
 800be96:	bf00      	nop
 800be98:	40012c00 	.word	0x40012c00
 800be9c:	40013400 	.word	0x40013400
 800bea0:	40015000 	.word	0x40015000

0800bea4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b083      	sub	sp, #12
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800beac:	bf00      	nop
 800beae:	370c      	adds	r7, #12
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800beb8:	b480      	push	{r7}
 800beba:	b083      	sub	sp, #12
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bec0:	bf00      	nop
 800bec2:	370c      	adds	r7, #12
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800becc:	b480      	push	{r7}
 800bece:	b083      	sub	sp, #12
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bed4:	bf00      	nop
 800bed6:	370c      	adds	r7, #12
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b083      	sub	sp, #12
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800bee8:	bf00      	nop
 800beea:	370c      	adds	r7, #12
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800bef4:	b480      	push	{r7}
 800bef6:	b083      	sub	sp, #12
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800befc:	bf00      	nop
 800befe:	370c      	adds	r7, #12
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <_ZdlPvj>:
 800bf30:	f000 b804 	b.w	800bf3c <_ZdlPv>

0800bf34 <_ZdaPv>:
 800bf34:	f000 b802 	b.w	800bf3c <_ZdlPv>

0800bf38 <_Znaj>:
 800bf38:	f000 b802 	b.w	800bf40 <_Znwj>

0800bf3c <_ZdlPv>:
 800bf3c:	f001 b892 	b.w	800d064 <free>

0800bf40 <_Znwj>:
 800bf40:	2801      	cmp	r0, #1
 800bf42:	bf38      	it	cc
 800bf44:	2001      	movcc	r0, #1
 800bf46:	b510      	push	{r4, lr}
 800bf48:	4604      	mov	r4, r0
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f001 f882 	bl	800d054 <malloc>
 800bf50:	b100      	cbz	r0, 800bf54 <_Znwj+0x14>
 800bf52:	bd10      	pop	{r4, pc}
 800bf54:	f000 f806 	bl	800bf64 <_ZSt15get_new_handlerv>
 800bf58:	b908      	cbnz	r0, 800bf5e <_Znwj+0x1e>
 800bf5a:	f001 f873 	bl	800d044 <abort>
 800bf5e:	4780      	blx	r0
 800bf60:	e7f3      	b.n	800bf4a <_Znwj+0xa>
	...

0800bf64 <_ZSt15get_new_handlerv>:
 800bf64:	4b02      	ldr	r3, [pc, #8]	@ (800bf70 <_ZSt15get_new_handlerv+0xc>)
 800bf66:	6818      	ldr	r0, [r3, #0]
 800bf68:	f3bf 8f5b 	dmb	ish
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop
 800bf70:	20000830 	.word	0x20000830

0800bf74 <pow>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	ed2d 8b02 	vpush	{d8}
 800bf7a:	eeb0 8a40 	vmov.f32	s16, s0
 800bf7e:	eef0 8a60 	vmov.f32	s17, s1
 800bf82:	ec55 4b11 	vmov	r4, r5, d1
 800bf86:	f000 f977 	bl	800c278 <__ieee754_pow>
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4629      	mov	r1, r5
 800bf92:	ec57 6b10 	vmov	r6, r7, d0
 800bf96:	f7f4 fd95 	bl	8000ac4 <__aeabi_dcmpun>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d13b      	bne.n	800c016 <pow+0xa2>
 800bf9e:	ec51 0b18 	vmov	r0, r1, d8
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	f7f4 fd5b 	bl	8000a60 <__aeabi_dcmpeq>
 800bfaa:	b1b8      	cbz	r0, 800bfdc <pow+0x68>
 800bfac:	2200      	movs	r2, #0
 800bfae:	2300      	movs	r3, #0
 800bfb0:	4620      	mov	r0, r4
 800bfb2:	4629      	mov	r1, r5
 800bfb4:	f7f4 fd54 	bl	8000a60 <__aeabi_dcmpeq>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d146      	bne.n	800c04a <pow+0xd6>
 800bfbc:	ec45 4b10 	vmov	d0, r4, r5
 800bfc0:	f000 f886 	bl	800c0d0 <finite>
 800bfc4:	b338      	cbz	r0, 800c016 <pow+0xa2>
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	2300      	movs	r3, #0
 800bfca:	4620      	mov	r0, r4
 800bfcc:	4629      	mov	r1, r5
 800bfce:	f7f4 fd51 	bl	8000a74 <__aeabi_dcmplt>
 800bfd2:	b300      	cbz	r0, 800c016 <pow+0xa2>
 800bfd4:	f001 f958 	bl	800d288 <__errno>
 800bfd8:	2322      	movs	r3, #34	@ 0x22
 800bfda:	e01b      	b.n	800c014 <pow+0xa0>
 800bfdc:	ec47 6b10 	vmov	d0, r6, r7
 800bfe0:	f000 f876 	bl	800c0d0 <finite>
 800bfe4:	b9e0      	cbnz	r0, 800c020 <pow+0xac>
 800bfe6:	eeb0 0a48 	vmov.f32	s0, s16
 800bfea:	eef0 0a68 	vmov.f32	s1, s17
 800bfee:	f000 f86f 	bl	800c0d0 <finite>
 800bff2:	b1a8      	cbz	r0, 800c020 <pow+0xac>
 800bff4:	ec45 4b10 	vmov	d0, r4, r5
 800bff8:	f000 f86a 	bl	800c0d0 <finite>
 800bffc:	b180      	cbz	r0, 800c020 <pow+0xac>
 800bffe:	4632      	mov	r2, r6
 800c000:	463b      	mov	r3, r7
 800c002:	4630      	mov	r0, r6
 800c004:	4639      	mov	r1, r7
 800c006:	f7f4 fd5d 	bl	8000ac4 <__aeabi_dcmpun>
 800c00a:	2800      	cmp	r0, #0
 800c00c:	d0e2      	beq.n	800bfd4 <pow+0x60>
 800c00e:	f001 f93b 	bl	800d288 <__errno>
 800c012:	2321      	movs	r3, #33	@ 0x21
 800c014:	6003      	str	r3, [r0, #0]
 800c016:	ecbd 8b02 	vpop	{d8}
 800c01a:	ec47 6b10 	vmov	d0, r6, r7
 800c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c020:	2200      	movs	r2, #0
 800c022:	2300      	movs	r3, #0
 800c024:	4630      	mov	r0, r6
 800c026:	4639      	mov	r1, r7
 800c028:	f7f4 fd1a 	bl	8000a60 <__aeabi_dcmpeq>
 800c02c:	2800      	cmp	r0, #0
 800c02e:	d0f2      	beq.n	800c016 <pow+0xa2>
 800c030:	eeb0 0a48 	vmov.f32	s0, s16
 800c034:	eef0 0a68 	vmov.f32	s1, s17
 800c038:	f000 f84a 	bl	800c0d0 <finite>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d0ea      	beq.n	800c016 <pow+0xa2>
 800c040:	ec45 4b10 	vmov	d0, r4, r5
 800c044:	f000 f844 	bl	800c0d0 <finite>
 800c048:	e7c3      	b.n	800bfd2 <pow+0x5e>
 800c04a:	4f01      	ldr	r7, [pc, #4]	@ (800c050 <pow+0xdc>)
 800c04c:	2600      	movs	r6, #0
 800c04e:	e7e2      	b.n	800c016 <pow+0xa2>
 800c050:	3ff00000 	.word	0x3ff00000

0800c054 <fmodf>:
 800c054:	b508      	push	{r3, lr}
 800c056:	ed2d 8b02 	vpush	{d8}
 800c05a:	eef0 8a40 	vmov.f32	s17, s0
 800c05e:	eeb0 8a60 	vmov.f32	s16, s1
 800c062:	f000 fe55 	bl	800cd10 <__ieee754_fmodf>
 800c066:	eef4 8a48 	vcmp.f32	s17, s16
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	d60c      	bvs.n	800c08a <fmodf+0x36>
 800c070:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c090 <fmodf+0x3c>
 800c074:	eeb4 8a68 	vcmp.f32	s16, s17
 800c078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c07c:	d105      	bne.n	800c08a <fmodf+0x36>
 800c07e:	f001 f903 	bl	800d288 <__errno>
 800c082:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c086:	2321      	movs	r3, #33	@ 0x21
 800c088:	6003      	str	r3, [r0, #0]
 800c08a:	ecbd 8b02 	vpop	{d8}
 800c08e:	bd08      	pop	{r3, pc}
 800c090:	00000000 	.word	0x00000000

0800c094 <sqrtf>:
 800c094:	b508      	push	{r3, lr}
 800c096:	ed2d 8b02 	vpush	{d8}
 800c09a:	eeb0 8a40 	vmov.f32	s16, s0
 800c09e:	f000 f8a1 	bl	800c1e4 <__ieee754_sqrtf>
 800c0a2:	eeb4 8a48 	vcmp.f32	s16, s16
 800c0a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0aa:	d60c      	bvs.n	800c0c6 <sqrtf+0x32>
 800c0ac:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800c0cc <sqrtf+0x38>
 800c0b0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800c0b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b8:	d505      	bpl.n	800c0c6 <sqrtf+0x32>
 800c0ba:	f001 f8e5 	bl	800d288 <__errno>
 800c0be:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800c0c2:	2321      	movs	r3, #33	@ 0x21
 800c0c4:	6003      	str	r3, [r0, #0]
 800c0c6:	ecbd 8b02 	vpop	{d8}
 800c0ca:	bd08      	pop	{r3, pc}
 800c0cc:	00000000 	.word	0x00000000

0800c0d0 <finite>:
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	ed8d 0b00 	vstr	d0, [sp]
 800c0d6:	9801      	ldr	r0, [sp, #4]
 800c0d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800c0dc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800c0e0:	0fc0      	lsrs	r0, r0, #31
 800c0e2:	b002      	add	sp, #8
 800c0e4:	4770      	bx	lr
	...

0800c0e8 <scalbn>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	ec55 4b10 	vmov	r4, r5, d0
 800c0ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	b991      	cbnz	r1, 800c11e <scalbn+0x36>
 800c0f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c0fc:	4323      	orrs	r3, r4
 800c0fe:	d03d      	beq.n	800c17c <scalbn+0x94>
 800c100:	4b35      	ldr	r3, [pc, #212]	@ (800c1d8 <scalbn+0xf0>)
 800c102:	4620      	mov	r0, r4
 800c104:	4629      	mov	r1, r5
 800c106:	2200      	movs	r2, #0
 800c108:	f7f4 fa42 	bl	8000590 <__aeabi_dmul>
 800c10c:	4b33      	ldr	r3, [pc, #204]	@ (800c1dc <scalbn+0xf4>)
 800c10e:	429e      	cmp	r6, r3
 800c110:	4604      	mov	r4, r0
 800c112:	460d      	mov	r5, r1
 800c114:	da0f      	bge.n	800c136 <scalbn+0x4e>
 800c116:	a328      	add	r3, pc, #160	@ (adr r3, 800c1b8 <scalbn+0xd0>)
 800c118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11c:	e01e      	b.n	800c15c <scalbn+0x74>
 800c11e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c122:	4291      	cmp	r1, r2
 800c124:	d10b      	bne.n	800c13e <scalbn+0x56>
 800c126:	4622      	mov	r2, r4
 800c128:	4620      	mov	r0, r4
 800c12a:	4629      	mov	r1, r5
 800c12c:	f7f4 f87a 	bl	8000224 <__adddf3>
 800c130:	4604      	mov	r4, r0
 800c132:	460d      	mov	r5, r1
 800c134:	e022      	b.n	800c17c <scalbn+0x94>
 800c136:	460b      	mov	r3, r1
 800c138:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c13c:	3936      	subs	r1, #54	@ 0x36
 800c13e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c142:	4296      	cmp	r6, r2
 800c144:	dd0d      	ble.n	800c162 <scalbn+0x7a>
 800c146:	2d00      	cmp	r5, #0
 800c148:	a11d      	add	r1, pc, #116	@ (adr r1, 800c1c0 <scalbn+0xd8>)
 800c14a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c14e:	da02      	bge.n	800c156 <scalbn+0x6e>
 800c150:	a11d      	add	r1, pc, #116	@ (adr r1, 800c1c8 <scalbn+0xe0>)
 800c152:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c156:	a31a      	add	r3, pc, #104	@ (adr r3, 800c1c0 <scalbn+0xd8>)
 800c158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c15c:	f7f4 fa18 	bl	8000590 <__aeabi_dmul>
 800c160:	e7e6      	b.n	800c130 <scalbn+0x48>
 800c162:	1872      	adds	r2, r6, r1
 800c164:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c168:	428a      	cmp	r2, r1
 800c16a:	dcec      	bgt.n	800c146 <scalbn+0x5e>
 800c16c:	2a00      	cmp	r2, #0
 800c16e:	dd08      	ble.n	800c182 <scalbn+0x9a>
 800c170:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c174:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c178:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c17c:	ec45 4b10 	vmov	d0, r4, r5
 800c180:	bd70      	pop	{r4, r5, r6, pc}
 800c182:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c186:	da08      	bge.n	800c19a <scalbn+0xb2>
 800c188:	2d00      	cmp	r5, #0
 800c18a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c1b8 <scalbn+0xd0>)
 800c18c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c190:	dac1      	bge.n	800c116 <scalbn+0x2e>
 800c192:	a10f      	add	r1, pc, #60	@ (adr r1, 800c1d0 <scalbn+0xe8>)
 800c194:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c198:	e7bd      	b.n	800c116 <scalbn+0x2e>
 800c19a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c19e:	3236      	adds	r2, #54	@ 0x36
 800c1a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c1a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e0 <scalbn+0xf8>)
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	e7d4      	b.n	800c15c <scalbn+0x74>
 800c1b2:	bf00      	nop
 800c1b4:	f3af 8000 	nop.w
 800c1b8:	c2f8f359 	.word	0xc2f8f359
 800c1bc:	01a56e1f 	.word	0x01a56e1f
 800c1c0:	8800759c 	.word	0x8800759c
 800c1c4:	7e37e43c 	.word	0x7e37e43c
 800c1c8:	8800759c 	.word	0x8800759c
 800c1cc:	fe37e43c 	.word	0xfe37e43c
 800c1d0:	c2f8f359 	.word	0xc2f8f359
 800c1d4:	81a56e1f 	.word	0x81a56e1f
 800c1d8:	43500000 	.word	0x43500000
 800c1dc:	ffff3cb0 	.word	0xffff3cb0
 800c1e0:	3c900000 	.word	0x3c900000

0800c1e4 <__ieee754_sqrtf>:
 800c1e4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1e8:	4770      	bx	lr
	...

0800c1ec <floorf>:
 800c1ec:	ee10 3a10 	vmov	r3, s0
 800c1f0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c1f4:	3a7f      	subs	r2, #127	@ 0x7f
 800c1f6:	2a16      	cmp	r2, #22
 800c1f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c1fc:	dc2b      	bgt.n	800c256 <floorf+0x6a>
 800c1fe:	2a00      	cmp	r2, #0
 800c200:	da12      	bge.n	800c228 <floorf+0x3c>
 800c202:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c268 <floorf+0x7c>
 800c206:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c20a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c20e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c212:	dd06      	ble.n	800c222 <floorf+0x36>
 800c214:	2b00      	cmp	r3, #0
 800c216:	da24      	bge.n	800c262 <floorf+0x76>
 800c218:	2900      	cmp	r1, #0
 800c21a:	4b14      	ldr	r3, [pc, #80]	@ (800c26c <floorf+0x80>)
 800c21c:	bf08      	it	eq
 800c21e:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c222:	ee00 3a10 	vmov	s0, r3
 800c226:	4770      	bx	lr
 800c228:	4911      	ldr	r1, [pc, #68]	@ (800c270 <floorf+0x84>)
 800c22a:	4111      	asrs	r1, r2
 800c22c:	420b      	tst	r3, r1
 800c22e:	d0fa      	beq.n	800c226 <floorf+0x3a>
 800c230:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c268 <floorf+0x7c>
 800c234:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c238:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c23c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c240:	ddef      	ble.n	800c222 <floorf+0x36>
 800c242:	2b00      	cmp	r3, #0
 800c244:	bfbe      	ittt	lt
 800c246:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c24a:	fa40 f202 	asrlt.w	r2, r0, r2
 800c24e:	189b      	addlt	r3, r3, r2
 800c250:	ea23 0301 	bic.w	r3, r3, r1
 800c254:	e7e5      	b.n	800c222 <floorf+0x36>
 800c256:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c25a:	d3e4      	bcc.n	800c226 <floorf+0x3a>
 800c25c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c260:	4770      	bx	lr
 800c262:	2300      	movs	r3, #0
 800c264:	e7dd      	b.n	800c222 <floorf+0x36>
 800c266:	bf00      	nop
 800c268:	7149f2ca 	.word	0x7149f2ca
 800c26c:	bf800000 	.word	0xbf800000
 800c270:	007fffff 	.word	0x007fffff
 800c274:	00000000 	.word	0x00000000

0800c278 <__ieee754_pow>:
 800c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c27c:	b091      	sub	sp, #68	@ 0x44
 800c27e:	ed8d 1b00 	vstr	d1, [sp]
 800c282:	e9dd 1900 	ldrd	r1, r9, [sp]
 800c286:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800c28a:	ea5a 0001 	orrs.w	r0, sl, r1
 800c28e:	ec57 6b10 	vmov	r6, r7, d0
 800c292:	d113      	bne.n	800c2bc <__ieee754_pow+0x44>
 800c294:	19b3      	adds	r3, r6, r6
 800c296:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800c29a:	4152      	adcs	r2, r2
 800c29c:	4298      	cmp	r0, r3
 800c29e:	4b98      	ldr	r3, [pc, #608]	@ (800c500 <__ieee754_pow+0x288>)
 800c2a0:	4193      	sbcs	r3, r2
 800c2a2:	f080 84ea 	bcs.w	800cc7a <__ieee754_pow+0xa02>
 800c2a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c2aa:	4630      	mov	r0, r6
 800c2ac:	4639      	mov	r1, r7
 800c2ae:	f7f3 ffb9 	bl	8000224 <__adddf3>
 800c2b2:	ec41 0b10 	vmov	d0, r0, r1
 800c2b6:	b011      	add	sp, #68	@ 0x44
 800c2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2bc:	4a91      	ldr	r2, [pc, #580]	@ (800c504 <__ieee754_pow+0x28c>)
 800c2be:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800c2c2:	4590      	cmp	r8, r2
 800c2c4:	463d      	mov	r5, r7
 800c2c6:	4633      	mov	r3, r6
 800c2c8:	d806      	bhi.n	800c2d8 <__ieee754_pow+0x60>
 800c2ca:	d101      	bne.n	800c2d0 <__ieee754_pow+0x58>
 800c2cc:	2e00      	cmp	r6, #0
 800c2ce:	d1ea      	bne.n	800c2a6 <__ieee754_pow+0x2e>
 800c2d0:	4592      	cmp	sl, r2
 800c2d2:	d801      	bhi.n	800c2d8 <__ieee754_pow+0x60>
 800c2d4:	d10e      	bne.n	800c2f4 <__ieee754_pow+0x7c>
 800c2d6:	b169      	cbz	r1, 800c2f4 <__ieee754_pow+0x7c>
 800c2d8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800c2dc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800c2e0:	431d      	orrs	r5, r3
 800c2e2:	d1e0      	bne.n	800c2a6 <__ieee754_pow+0x2e>
 800c2e4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2e8:	18db      	adds	r3, r3, r3
 800c2ea:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800c2ee:	4152      	adcs	r2, r2
 800c2f0:	429d      	cmp	r5, r3
 800c2f2:	e7d4      	b.n	800c29e <__ieee754_pow+0x26>
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	46c3      	mov	fp, r8
 800c2f8:	da3a      	bge.n	800c370 <__ieee754_pow+0xf8>
 800c2fa:	4a83      	ldr	r2, [pc, #524]	@ (800c508 <__ieee754_pow+0x290>)
 800c2fc:	4592      	cmp	sl, r2
 800c2fe:	d84d      	bhi.n	800c39c <__ieee754_pow+0x124>
 800c300:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800c304:	4592      	cmp	sl, r2
 800c306:	f240 84c7 	bls.w	800cc98 <__ieee754_pow+0xa20>
 800c30a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800c30e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800c312:	2a14      	cmp	r2, #20
 800c314:	dd0f      	ble.n	800c336 <__ieee754_pow+0xbe>
 800c316:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800c31a:	fa21 f402 	lsr.w	r4, r1, r2
 800c31e:	fa04 f202 	lsl.w	r2, r4, r2
 800c322:	428a      	cmp	r2, r1
 800c324:	f040 84b8 	bne.w	800cc98 <__ieee754_pow+0xa20>
 800c328:	f004 0401 	and.w	r4, r4, #1
 800c32c:	f1c4 0402 	rsb	r4, r4, #2
 800c330:	2900      	cmp	r1, #0
 800c332:	d158      	bne.n	800c3e6 <__ieee754_pow+0x16e>
 800c334:	e00e      	b.n	800c354 <__ieee754_pow+0xdc>
 800c336:	2900      	cmp	r1, #0
 800c338:	d154      	bne.n	800c3e4 <__ieee754_pow+0x16c>
 800c33a:	f1c2 0214 	rsb	r2, r2, #20
 800c33e:	fa4a f402 	asr.w	r4, sl, r2
 800c342:	fa04 f202 	lsl.w	r2, r4, r2
 800c346:	4552      	cmp	r2, sl
 800c348:	f040 84a3 	bne.w	800cc92 <__ieee754_pow+0xa1a>
 800c34c:	f004 0401 	and.w	r4, r4, #1
 800c350:	f1c4 0402 	rsb	r4, r4, #2
 800c354:	4a6d      	ldr	r2, [pc, #436]	@ (800c50c <__ieee754_pow+0x294>)
 800c356:	4592      	cmp	sl, r2
 800c358:	d12e      	bne.n	800c3b8 <__ieee754_pow+0x140>
 800c35a:	f1b9 0f00 	cmp.w	r9, #0
 800c35e:	f280 8494 	bge.w	800cc8a <__ieee754_pow+0xa12>
 800c362:	496a      	ldr	r1, [pc, #424]	@ (800c50c <__ieee754_pow+0x294>)
 800c364:	4632      	mov	r2, r6
 800c366:	463b      	mov	r3, r7
 800c368:	2000      	movs	r0, #0
 800c36a:	f7f4 fa3b 	bl	80007e4 <__aeabi_ddiv>
 800c36e:	e7a0      	b.n	800c2b2 <__ieee754_pow+0x3a>
 800c370:	2400      	movs	r4, #0
 800c372:	bbc1      	cbnz	r1, 800c3e6 <__ieee754_pow+0x16e>
 800c374:	4a63      	ldr	r2, [pc, #396]	@ (800c504 <__ieee754_pow+0x28c>)
 800c376:	4592      	cmp	sl, r2
 800c378:	d1ec      	bne.n	800c354 <__ieee754_pow+0xdc>
 800c37a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800c37e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800c382:	431a      	orrs	r2, r3
 800c384:	f000 8479 	beq.w	800cc7a <__ieee754_pow+0xa02>
 800c388:	4b61      	ldr	r3, [pc, #388]	@ (800c510 <__ieee754_pow+0x298>)
 800c38a:	4598      	cmp	r8, r3
 800c38c:	d908      	bls.n	800c3a0 <__ieee754_pow+0x128>
 800c38e:	f1b9 0f00 	cmp.w	r9, #0
 800c392:	f2c0 8476 	blt.w	800cc82 <__ieee754_pow+0xa0a>
 800c396:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c39a:	e78a      	b.n	800c2b2 <__ieee754_pow+0x3a>
 800c39c:	2402      	movs	r4, #2
 800c39e:	e7e8      	b.n	800c372 <__ieee754_pow+0xfa>
 800c3a0:	f1b9 0f00 	cmp.w	r9, #0
 800c3a4:	f04f 0000 	mov.w	r0, #0
 800c3a8:	f04f 0100 	mov.w	r1, #0
 800c3ac:	da81      	bge.n	800c2b2 <__ieee754_pow+0x3a>
 800c3ae:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c3b2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800c3b6:	e77c      	b.n	800c2b2 <__ieee754_pow+0x3a>
 800c3b8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800c3bc:	d106      	bne.n	800c3cc <__ieee754_pow+0x154>
 800c3be:	4632      	mov	r2, r6
 800c3c0:	463b      	mov	r3, r7
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	4639      	mov	r1, r7
 800c3c6:	f7f4 f8e3 	bl	8000590 <__aeabi_dmul>
 800c3ca:	e772      	b.n	800c2b2 <__ieee754_pow+0x3a>
 800c3cc:	4a51      	ldr	r2, [pc, #324]	@ (800c514 <__ieee754_pow+0x29c>)
 800c3ce:	4591      	cmp	r9, r2
 800c3d0:	d109      	bne.n	800c3e6 <__ieee754_pow+0x16e>
 800c3d2:	2d00      	cmp	r5, #0
 800c3d4:	db07      	blt.n	800c3e6 <__ieee754_pow+0x16e>
 800c3d6:	ec47 6b10 	vmov	d0, r6, r7
 800c3da:	b011      	add	sp, #68	@ 0x44
 800c3dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3e0:	f000 bd56 	b.w	800ce90 <__ieee754_sqrt>
 800c3e4:	2400      	movs	r4, #0
 800c3e6:	ec47 6b10 	vmov	d0, r6, r7
 800c3ea:	9302      	str	r3, [sp, #8]
 800c3ec:	f000 fc88 	bl	800cd00 <fabs>
 800c3f0:	9b02      	ldr	r3, [sp, #8]
 800c3f2:	ec51 0b10 	vmov	r0, r1, d0
 800c3f6:	bb53      	cbnz	r3, 800c44e <__ieee754_pow+0x1d6>
 800c3f8:	4b44      	ldr	r3, [pc, #272]	@ (800c50c <__ieee754_pow+0x294>)
 800c3fa:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d002      	beq.n	800c408 <__ieee754_pow+0x190>
 800c402:	f1b8 0f00 	cmp.w	r8, #0
 800c406:	d122      	bne.n	800c44e <__ieee754_pow+0x1d6>
 800c408:	f1b9 0f00 	cmp.w	r9, #0
 800c40c:	da05      	bge.n	800c41a <__ieee754_pow+0x1a2>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	2000      	movs	r0, #0
 800c414:	493d      	ldr	r1, [pc, #244]	@ (800c50c <__ieee754_pow+0x294>)
 800c416:	f7f4 f9e5 	bl	80007e4 <__aeabi_ddiv>
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	f6bf af49 	bge.w	800c2b2 <__ieee754_pow+0x3a>
 800c420:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800c424:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800c428:	ea58 0804 	orrs.w	r8, r8, r4
 800c42c:	d108      	bne.n	800c440 <__ieee754_pow+0x1c8>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4610      	mov	r0, r2
 800c434:	4619      	mov	r1, r3
 800c436:	f7f3 fef3 	bl	8000220 <__aeabi_dsub>
 800c43a:	4602      	mov	r2, r0
 800c43c:	460b      	mov	r3, r1
 800c43e:	e794      	b.n	800c36a <__ieee754_pow+0xf2>
 800c440:	2c01      	cmp	r4, #1
 800c442:	f47f af36 	bne.w	800c2b2 <__ieee754_pow+0x3a>
 800c446:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c44a:	4619      	mov	r1, r3
 800c44c:	e731      	b.n	800c2b2 <__ieee754_pow+0x3a>
 800c44e:	0feb      	lsrs	r3, r5, #31
 800c450:	3b01      	subs	r3, #1
 800c452:	ea53 0204 	orrs.w	r2, r3, r4
 800c456:	d102      	bne.n	800c45e <__ieee754_pow+0x1e6>
 800c458:	4632      	mov	r2, r6
 800c45a:	463b      	mov	r3, r7
 800c45c:	e7e9      	b.n	800c432 <__ieee754_pow+0x1ba>
 800c45e:	3c01      	subs	r4, #1
 800c460:	431c      	orrs	r4, r3
 800c462:	d016      	beq.n	800c492 <__ieee754_pow+0x21a>
 800c464:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c4f0 <__ieee754_pow+0x278>
 800c468:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800c46c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c470:	f240 8112 	bls.w	800c698 <__ieee754_pow+0x420>
 800c474:	4b28      	ldr	r3, [pc, #160]	@ (800c518 <__ieee754_pow+0x2a0>)
 800c476:	459a      	cmp	sl, r3
 800c478:	4b25      	ldr	r3, [pc, #148]	@ (800c510 <__ieee754_pow+0x298>)
 800c47a:	d916      	bls.n	800c4aa <__ieee754_pow+0x232>
 800c47c:	4598      	cmp	r8, r3
 800c47e:	d80b      	bhi.n	800c498 <__ieee754_pow+0x220>
 800c480:	f1b9 0f00 	cmp.w	r9, #0
 800c484:	da0b      	bge.n	800c49e <__ieee754_pow+0x226>
 800c486:	2000      	movs	r0, #0
 800c488:	b011      	add	sp, #68	@ 0x44
 800c48a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c48e:	f000 bcf7 	b.w	800ce80 <__math_oflow>
 800c492:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c4f8 <__ieee754_pow+0x280>
 800c496:	e7e7      	b.n	800c468 <__ieee754_pow+0x1f0>
 800c498:	f1b9 0f00 	cmp.w	r9, #0
 800c49c:	dcf3      	bgt.n	800c486 <__ieee754_pow+0x20e>
 800c49e:	2000      	movs	r0, #0
 800c4a0:	b011      	add	sp, #68	@ 0x44
 800c4a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a6:	f000 bce3 	b.w	800ce70 <__math_uflow>
 800c4aa:	4598      	cmp	r8, r3
 800c4ac:	d20c      	bcs.n	800c4c8 <__ieee754_pow+0x250>
 800c4ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	f7f4 fadd 	bl	8000a74 <__aeabi_dcmplt>
 800c4ba:	3800      	subs	r0, #0
 800c4bc:	bf18      	it	ne
 800c4be:	2001      	movne	r0, #1
 800c4c0:	f1b9 0f00 	cmp.w	r9, #0
 800c4c4:	daec      	bge.n	800c4a0 <__ieee754_pow+0x228>
 800c4c6:	e7df      	b.n	800c488 <__ieee754_pow+0x210>
 800c4c8:	4b10      	ldr	r3, [pc, #64]	@ (800c50c <__ieee754_pow+0x294>)
 800c4ca:	4598      	cmp	r8, r3
 800c4cc:	f04f 0200 	mov.w	r2, #0
 800c4d0:	d924      	bls.n	800c51c <__ieee754_pow+0x2a4>
 800c4d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	f7f4 facc 	bl	8000a74 <__aeabi_dcmplt>
 800c4dc:	3800      	subs	r0, #0
 800c4de:	bf18      	it	ne
 800c4e0:	2001      	movne	r0, #1
 800c4e2:	f1b9 0f00 	cmp.w	r9, #0
 800c4e6:	dccf      	bgt.n	800c488 <__ieee754_pow+0x210>
 800c4e8:	e7da      	b.n	800c4a0 <__ieee754_pow+0x228>
 800c4ea:	bf00      	nop
 800c4ec:	f3af 8000 	nop.w
 800c4f0:	00000000 	.word	0x00000000
 800c4f4:	3ff00000 	.word	0x3ff00000
 800c4f8:	00000000 	.word	0x00000000
 800c4fc:	bff00000 	.word	0xbff00000
 800c500:	fff00000 	.word	0xfff00000
 800c504:	7ff00000 	.word	0x7ff00000
 800c508:	433fffff 	.word	0x433fffff
 800c50c:	3ff00000 	.word	0x3ff00000
 800c510:	3fefffff 	.word	0x3fefffff
 800c514:	3fe00000 	.word	0x3fe00000
 800c518:	43f00000 	.word	0x43f00000
 800c51c:	4b5a      	ldr	r3, [pc, #360]	@ (800c688 <__ieee754_pow+0x410>)
 800c51e:	f7f3 fe7f 	bl	8000220 <__aeabi_dsub>
 800c522:	a351      	add	r3, pc, #324	@ (adr r3, 800c668 <__ieee754_pow+0x3f0>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	4604      	mov	r4, r0
 800c52a:	460d      	mov	r5, r1
 800c52c:	f7f4 f830 	bl	8000590 <__aeabi_dmul>
 800c530:	a34f      	add	r3, pc, #316	@ (adr r3, 800c670 <__ieee754_pow+0x3f8>)
 800c532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c536:	4606      	mov	r6, r0
 800c538:	460f      	mov	r7, r1
 800c53a:	4620      	mov	r0, r4
 800c53c:	4629      	mov	r1, r5
 800c53e:	f7f4 f827 	bl	8000590 <__aeabi_dmul>
 800c542:	4b52      	ldr	r3, [pc, #328]	@ (800c68c <__ieee754_pow+0x414>)
 800c544:	4682      	mov	sl, r0
 800c546:	468b      	mov	fp, r1
 800c548:	2200      	movs	r2, #0
 800c54a:	4620      	mov	r0, r4
 800c54c:	4629      	mov	r1, r5
 800c54e:	f7f4 f81f 	bl	8000590 <__aeabi_dmul>
 800c552:	4602      	mov	r2, r0
 800c554:	460b      	mov	r3, r1
 800c556:	a148      	add	r1, pc, #288	@ (adr r1, 800c678 <__ieee754_pow+0x400>)
 800c558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c55c:	f7f3 fe60 	bl	8000220 <__aeabi_dsub>
 800c560:	4622      	mov	r2, r4
 800c562:	462b      	mov	r3, r5
 800c564:	f7f4 f814 	bl	8000590 <__aeabi_dmul>
 800c568:	4602      	mov	r2, r0
 800c56a:	460b      	mov	r3, r1
 800c56c:	2000      	movs	r0, #0
 800c56e:	4948      	ldr	r1, [pc, #288]	@ (800c690 <__ieee754_pow+0x418>)
 800c570:	f7f3 fe56 	bl	8000220 <__aeabi_dsub>
 800c574:	4622      	mov	r2, r4
 800c576:	4680      	mov	r8, r0
 800c578:	4689      	mov	r9, r1
 800c57a:	462b      	mov	r3, r5
 800c57c:	4620      	mov	r0, r4
 800c57e:	4629      	mov	r1, r5
 800c580:	f7f4 f806 	bl	8000590 <__aeabi_dmul>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4640      	mov	r0, r8
 800c58a:	4649      	mov	r1, r9
 800c58c:	f7f4 f800 	bl	8000590 <__aeabi_dmul>
 800c590:	a33b      	add	r3, pc, #236	@ (adr r3, 800c680 <__ieee754_pow+0x408>)
 800c592:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c596:	f7f3 fffb 	bl	8000590 <__aeabi_dmul>
 800c59a:	4602      	mov	r2, r0
 800c59c:	460b      	mov	r3, r1
 800c59e:	4650      	mov	r0, sl
 800c5a0:	4659      	mov	r1, fp
 800c5a2:	f7f3 fe3d 	bl	8000220 <__aeabi_dsub>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	460b      	mov	r3, r1
 800c5aa:	4680      	mov	r8, r0
 800c5ac:	4689      	mov	r9, r1
 800c5ae:	4630      	mov	r0, r6
 800c5b0:	4639      	mov	r1, r7
 800c5b2:	f7f3 fe37 	bl	8000224 <__adddf3>
 800c5b6:	2400      	movs	r4, #0
 800c5b8:	4632      	mov	r2, r6
 800c5ba:	463b      	mov	r3, r7
 800c5bc:	4620      	mov	r0, r4
 800c5be:	460d      	mov	r5, r1
 800c5c0:	f7f3 fe2e 	bl	8000220 <__aeabi_dsub>
 800c5c4:	4602      	mov	r2, r0
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	4640      	mov	r0, r8
 800c5ca:	4649      	mov	r1, r9
 800c5cc:	f7f3 fe28 	bl	8000220 <__aeabi_dsub>
 800c5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5d4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c5d8:	2300      	movs	r3, #0
 800c5da:	9304      	str	r3, [sp, #16]
 800c5dc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	460f      	mov	r7, r1
 800c5e4:	4652      	mov	r2, sl
 800c5e6:	465b      	mov	r3, fp
 800c5e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5ec:	f7f3 fe18 	bl	8000220 <__aeabi_dsub>
 800c5f0:	4622      	mov	r2, r4
 800c5f2:	462b      	mov	r3, r5
 800c5f4:	f7f3 ffcc 	bl	8000590 <__aeabi_dmul>
 800c5f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	4630      	mov	r0, r6
 800c602:	4639      	mov	r1, r7
 800c604:	f7f3 ffc4 	bl	8000590 <__aeabi_dmul>
 800c608:	4602      	mov	r2, r0
 800c60a:	460b      	mov	r3, r1
 800c60c:	4640      	mov	r0, r8
 800c60e:	4649      	mov	r1, r9
 800c610:	f7f3 fe08 	bl	8000224 <__adddf3>
 800c614:	4652      	mov	r2, sl
 800c616:	465b      	mov	r3, fp
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	4620      	mov	r0, r4
 800c61e:	4629      	mov	r1, r5
 800c620:	f7f3 ffb6 	bl	8000590 <__aeabi_dmul>
 800c624:	460b      	mov	r3, r1
 800c626:	4602      	mov	r2, r0
 800c628:	4680      	mov	r8, r0
 800c62a:	4689      	mov	r9, r1
 800c62c:	4630      	mov	r0, r6
 800c62e:	4639      	mov	r1, r7
 800c630:	f7f3 fdf8 	bl	8000224 <__adddf3>
 800c634:	4b17      	ldr	r3, [pc, #92]	@ (800c694 <__ieee754_pow+0x41c>)
 800c636:	4299      	cmp	r1, r3
 800c638:	4604      	mov	r4, r0
 800c63a:	460d      	mov	r5, r1
 800c63c:	468a      	mov	sl, r1
 800c63e:	468b      	mov	fp, r1
 800c640:	f340 82ef 	ble.w	800cc22 <__ieee754_pow+0x9aa>
 800c644:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c648:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c64c:	4303      	orrs	r3, r0
 800c64e:	f000 81e8 	beq.w	800ca22 <__ieee754_pow+0x7aa>
 800c652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c656:	2200      	movs	r2, #0
 800c658:	2300      	movs	r3, #0
 800c65a:	f7f4 fa0b 	bl	8000a74 <__aeabi_dcmplt>
 800c65e:	3800      	subs	r0, #0
 800c660:	bf18      	it	ne
 800c662:	2001      	movne	r0, #1
 800c664:	e710      	b.n	800c488 <__ieee754_pow+0x210>
 800c666:	bf00      	nop
 800c668:	60000000 	.word	0x60000000
 800c66c:	3ff71547 	.word	0x3ff71547
 800c670:	f85ddf44 	.word	0xf85ddf44
 800c674:	3e54ae0b 	.word	0x3e54ae0b
 800c678:	55555555 	.word	0x55555555
 800c67c:	3fd55555 	.word	0x3fd55555
 800c680:	652b82fe 	.word	0x652b82fe
 800c684:	3ff71547 	.word	0x3ff71547
 800c688:	3ff00000 	.word	0x3ff00000
 800c68c:	3fd00000 	.word	0x3fd00000
 800c690:	3fe00000 	.word	0x3fe00000
 800c694:	408fffff 	.word	0x408fffff
 800c698:	4bd5      	ldr	r3, [pc, #852]	@ (800c9f0 <__ieee754_pow+0x778>)
 800c69a:	402b      	ands	r3, r5
 800c69c:	2200      	movs	r2, #0
 800c69e:	b92b      	cbnz	r3, 800c6ac <__ieee754_pow+0x434>
 800c6a0:	4bd4      	ldr	r3, [pc, #848]	@ (800c9f4 <__ieee754_pow+0x77c>)
 800c6a2:	f7f3 ff75 	bl	8000590 <__aeabi_dmul>
 800c6a6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c6aa:	468b      	mov	fp, r1
 800c6ac:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c6b0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c6b4:	4413      	add	r3, r2
 800c6b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6b8:	4bcf      	ldr	r3, [pc, #828]	@ (800c9f8 <__ieee754_pow+0x780>)
 800c6ba:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c6be:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c6c2:	459b      	cmp	fp, r3
 800c6c4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c6c8:	dd08      	ble.n	800c6dc <__ieee754_pow+0x464>
 800c6ca:	4bcc      	ldr	r3, [pc, #816]	@ (800c9fc <__ieee754_pow+0x784>)
 800c6cc:	459b      	cmp	fp, r3
 800c6ce:	f340 81a5 	ble.w	800ca1c <__ieee754_pow+0x7a4>
 800c6d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c6d4:	3301      	adds	r3, #1
 800c6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6d8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c6dc:	f04f 0a00 	mov.w	sl, #0
 800c6e0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c6e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c6e6:	4bc6      	ldr	r3, [pc, #792]	@ (800ca00 <__ieee754_pow+0x788>)
 800c6e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c6ec:	ed93 7b00 	vldr	d7, [r3]
 800c6f0:	4629      	mov	r1, r5
 800c6f2:	ec53 2b17 	vmov	r2, r3, d7
 800c6f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c6fa:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6fe:	f7f3 fd8f 	bl	8000220 <__aeabi_dsub>
 800c702:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c706:	4606      	mov	r6, r0
 800c708:	460f      	mov	r7, r1
 800c70a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c70e:	f7f3 fd89 	bl	8000224 <__adddf3>
 800c712:	4602      	mov	r2, r0
 800c714:	460b      	mov	r3, r1
 800c716:	2000      	movs	r0, #0
 800c718:	49ba      	ldr	r1, [pc, #744]	@ (800ca04 <__ieee754_pow+0x78c>)
 800c71a:	f7f4 f863 	bl	80007e4 <__aeabi_ddiv>
 800c71e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	4630      	mov	r0, r6
 800c728:	4639      	mov	r1, r7
 800c72a:	f7f3 ff31 	bl	8000590 <__aeabi_dmul>
 800c72e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c732:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c736:	106d      	asrs	r5, r5, #1
 800c738:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c73c:	f04f 0b00 	mov.w	fp, #0
 800c740:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c744:	4661      	mov	r1, ip
 800c746:	2200      	movs	r2, #0
 800c748:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c74c:	4658      	mov	r0, fp
 800c74e:	46e1      	mov	r9, ip
 800c750:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c754:	4614      	mov	r4, r2
 800c756:	461d      	mov	r5, r3
 800c758:	f7f3 ff1a 	bl	8000590 <__aeabi_dmul>
 800c75c:	4602      	mov	r2, r0
 800c75e:	460b      	mov	r3, r1
 800c760:	4630      	mov	r0, r6
 800c762:	4639      	mov	r1, r7
 800c764:	f7f3 fd5c 	bl	8000220 <__aeabi_dsub>
 800c768:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	4620      	mov	r0, r4
 800c772:	4629      	mov	r1, r5
 800c774:	f7f3 fd54 	bl	8000220 <__aeabi_dsub>
 800c778:	4602      	mov	r2, r0
 800c77a:	460b      	mov	r3, r1
 800c77c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c780:	f7f3 fd4e 	bl	8000220 <__aeabi_dsub>
 800c784:	465a      	mov	r2, fp
 800c786:	464b      	mov	r3, r9
 800c788:	f7f3 ff02 	bl	8000590 <__aeabi_dmul>
 800c78c:	4602      	mov	r2, r0
 800c78e:	460b      	mov	r3, r1
 800c790:	4630      	mov	r0, r6
 800c792:	4639      	mov	r1, r7
 800c794:	f7f3 fd44 	bl	8000220 <__aeabi_dsub>
 800c798:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c79c:	f7f3 fef8 	bl	8000590 <__aeabi_dmul>
 800c7a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c7a4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c7a8:	4610      	mov	r0, r2
 800c7aa:	4619      	mov	r1, r3
 800c7ac:	f7f3 fef0 	bl	8000590 <__aeabi_dmul>
 800c7b0:	a37d      	add	r3, pc, #500	@ (adr r3, 800c9a8 <__ieee754_pow+0x730>)
 800c7b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	460d      	mov	r5, r1
 800c7ba:	f7f3 fee9 	bl	8000590 <__aeabi_dmul>
 800c7be:	a37c      	add	r3, pc, #496	@ (adr r3, 800c9b0 <__ieee754_pow+0x738>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 fd2e 	bl	8000224 <__adddf3>
 800c7c8:	4622      	mov	r2, r4
 800c7ca:	462b      	mov	r3, r5
 800c7cc:	f7f3 fee0 	bl	8000590 <__aeabi_dmul>
 800c7d0:	a379      	add	r3, pc, #484	@ (adr r3, 800c9b8 <__ieee754_pow+0x740>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 fd25 	bl	8000224 <__adddf3>
 800c7da:	4622      	mov	r2, r4
 800c7dc:	462b      	mov	r3, r5
 800c7de:	f7f3 fed7 	bl	8000590 <__aeabi_dmul>
 800c7e2:	a377      	add	r3, pc, #476	@ (adr r3, 800c9c0 <__ieee754_pow+0x748>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	f7f3 fd1c 	bl	8000224 <__adddf3>
 800c7ec:	4622      	mov	r2, r4
 800c7ee:	462b      	mov	r3, r5
 800c7f0:	f7f3 fece 	bl	8000590 <__aeabi_dmul>
 800c7f4:	a374      	add	r3, pc, #464	@ (adr r3, 800c9c8 <__ieee754_pow+0x750>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	f7f3 fd13 	bl	8000224 <__adddf3>
 800c7fe:	4622      	mov	r2, r4
 800c800:	462b      	mov	r3, r5
 800c802:	f7f3 fec5 	bl	8000590 <__aeabi_dmul>
 800c806:	a372      	add	r3, pc, #456	@ (adr r3, 800c9d0 <__ieee754_pow+0x758>)
 800c808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c80c:	f7f3 fd0a 	bl	8000224 <__adddf3>
 800c810:	4622      	mov	r2, r4
 800c812:	4606      	mov	r6, r0
 800c814:	460f      	mov	r7, r1
 800c816:	462b      	mov	r3, r5
 800c818:	4620      	mov	r0, r4
 800c81a:	4629      	mov	r1, r5
 800c81c:	f7f3 feb8 	bl	8000590 <__aeabi_dmul>
 800c820:	4602      	mov	r2, r0
 800c822:	460b      	mov	r3, r1
 800c824:	4630      	mov	r0, r6
 800c826:	4639      	mov	r1, r7
 800c828:	f7f3 feb2 	bl	8000590 <__aeabi_dmul>
 800c82c:	465a      	mov	r2, fp
 800c82e:	4604      	mov	r4, r0
 800c830:	460d      	mov	r5, r1
 800c832:	464b      	mov	r3, r9
 800c834:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c838:	f7f3 fcf4 	bl	8000224 <__adddf3>
 800c83c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c840:	f7f3 fea6 	bl	8000590 <__aeabi_dmul>
 800c844:	4622      	mov	r2, r4
 800c846:	462b      	mov	r3, r5
 800c848:	f7f3 fcec 	bl	8000224 <__adddf3>
 800c84c:	465a      	mov	r2, fp
 800c84e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c852:	464b      	mov	r3, r9
 800c854:	4658      	mov	r0, fp
 800c856:	4649      	mov	r1, r9
 800c858:	f7f3 fe9a 	bl	8000590 <__aeabi_dmul>
 800c85c:	4b6a      	ldr	r3, [pc, #424]	@ (800ca08 <__ieee754_pow+0x790>)
 800c85e:	2200      	movs	r2, #0
 800c860:	4606      	mov	r6, r0
 800c862:	460f      	mov	r7, r1
 800c864:	f7f3 fcde 	bl	8000224 <__adddf3>
 800c868:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c86c:	f7f3 fcda 	bl	8000224 <__adddf3>
 800c870:	46d8      	mov	r8, fp
 800c872:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c876:	460d      	mov	r5, r1
 800c878:	465a      	mov	r2, fp
 800c87a:	460b      	mov	r3, r1
 800c87c:	4640      	mov	r0, r8
 800c87e:	4649      	mov	r1, r9
 800c880:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c884:	f7f3 fe84 	bl	8000590 <__aeabi_dmul>
 800c888:	465c      	mov	r4, fp
 800c88a:	4680      	mov	r8, r0
 800c88c:	4689      	mov	r9, r1
 800c88e:	4b5e      	ldr	r3, [pc, #376]	@ (800ca08 <__ieee754_pow+0x790>)
 800c890:	2200      	movs	r2, #0
 800c892:	4620      	mov	r0, r4
 800c894:	4629      	mov	r1, r5
 800c896:	f7f3 fcc3 	bl	8000220 <__aeabi_dsub>
 800c89a:	4632      	mov	r2, r6
 800c89c:	463b      	mov	r3, r7
 800c89e:	f7f3 fcbf 	bl	8000220 <__aeabi_dsub>
 800c8a2:	4602      	mov	r2, r0
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c8aa:	f7f3 fcb9 	bl	8000220 <__aeabi_dsub>
 800c8ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8b2:	f7f3 fe6d 	bl	8000590 <__aeabi_dmul>
 800c8b6:	4622      	mov	r2, r4
 800c8b8:	4606      	mov	r6, r0
 800c8ba:	460f      	mov	r7, r1
 800c8bc:	462b      	mov	r3, r5
 800c8be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c8c2:	f7f3 fe65 	bl	8000590 <__aeabi_dmul>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f3 fca9 	bl	8000224 <__adddf3>
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460f      	mov	r7, r1
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	4640      	mov	r0, r8
 800c8dc:	4649      	mov	r1, r9
 800c8de:	f7f3 fca1 	bl	8000224 <__adddf3>
 800c8e2:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c8e6:	a33c      	add	r3, pc, #240	@ (adr r3, 800c9d8 <__ieee754_pow+0x760>)
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	4658      	mov	r0, fp
 800c8ee:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c8f2:	460d      	mov	r5, r1
 800c8f4:	f7f3 fe4c 	bl	8000590 <__aeabi_dmul>
 800c8f8:	465c      	mov	r4, fp
 800c8fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c8fe:	4642      	mov	r2, r8
 800c900:	464b      	mov	r3, r9
 800c902:	4620      	mov	r0, r4
 800c904:	4629      	mov	r1, r5
 800c906:	f7f3 fc8b 	bl	8000220 <__aeabi_dsub>
 800c90a:	4602      	mov	r2, r0
 800c90c:	460b      	mov	r3, r1
 800c90e:	4630      	mov	r0, r6
 800c910:	4639      	mov	r1, r7
 800c912:	f7f3 fc85 	bl	8000220 <__aeabi_dsub>
 800c916:	a332      	add	r3, pc, #200	@ (adr r3, 800c9e0 <__ieee754_pow+0x768>)
 800c918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91c:	f7f3 fe38 	bl	8000590 <__aeabi_dmul>
 800c920:	a331      	add	r3, pc, #196	@ (adr r3, 800c9e8 <__ieee754_pow+0x770>)
 800c922:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c926:	4606      	mov	r6, r0
 800c928:	460f      	mov	r7, r1
 800c92a:	4620      	mov	r0, r4
 800c92c:	4629      	mov	r1, r5
 800c92e:	f7f3 fe2f 	bl	8000590 <__aeabi_dmul>
 800c932:	4602      	mov	r2, r0
 800c934:	460b      	mov	r3, r1
 800c936:	4630      	mov	r0, r6
 800c938:	4639      	mov	r1, r7
 800c93a:	f7f3 fc73 	bl	8000224 <__adddf3>
 800c93e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c940:	4b32      	ldr	r3, [pc, #200]	@ (800ca0c <__ieee754_pow+0x794>)
 800c942:	4413      	add	r3, r2
 800c944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c948:	f7f3 fc6c 	bl	8000224 <__adddf3>
 800c94c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c950:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c952:	f7f3 fdb3 	bl	80004bc <__aeabi_i2d>
 800c956:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c958:	4b2d      	ldr	r3, [pc, #180]	@ (800ca10 <__ieee754_pow+0x798>)
 800c95a:	4413      	add	r3, r2
 800c95c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c960:	4606      	mov	r6, r0
 800c962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c966:	460f      	mov	r7, r1
 800c968:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c96c:	f7f3 fc5a 	bl	8000224 <__adddf3>
 800c970:	4642      	mov	r2, r8
 800c972:	464b      	mov	r3, r9
 800c974:	f7f3 fc56 	bl	8000224 <__adddf3>
 800c978:	4632      	mov	r2, r6
 800c97a:	463b      	mov	r3, r7
 800c97c:	f7f3 fc52 	bl	8000224 <__adddf3>
 800c980:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c984:	4632      	mov	r2, r6
 800c986:	463b      	mov	r3, r7
 800c988:	4658      	mov	r0, fp
 800c98a:	460d      	mov	r5, r1
 800c98c:	f7f3 fc48 	bl	8000220 <__aeabi_dsub>
 800c990:	4642      	mov	r2, r8
 800c992:	464b      	mov	r3, r9
 800c994:	f7f3 fc44 	bl	8000220 <__aeabi_dsub>
 800c998:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c99c:	f7f3 fc40 	bl	8000220 <__aeabi_dsub>
 800c9a0:	465c      	mov	r4, fp
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	e036      	b.n	800ca14 <__ieee754_pow+0x79c>
 800c9a6:	bf00      	nop
 800c9a8:	4a454eef 	.word	0x4a454eef
 800c9ac:	3fca7e28 	.word	0x3fca7e28
 800c9b0:	93c9db65 	.word	0x93c9db65
 800c9b4:	3fcd864a 	.word	0x3fcd864a
 800c9b8:	a91d4101 	.word	0xa91d4101
 800c9bc:	3fd17460 	.word	0x3fd17460
 800c9c0:	518f264d 	.word	0x518f264d
 800c9c4:	3fd55555 	.word	0x3fd55555
 800c9c8:	db6fabff 	.word	0xdb6fabff
 800c9cc:	3fdb6db6 	.word	0x3fdb6db6
 800c9d0:	33333303 	.word	0x33333303
 800c9d4:	3fe33333 	.word	0x3fe33333
 800c9d8:	e0000000 	.word	0xe0000000
 800c9dc:	3feec709 	.word	0x3feec709
 800c9e0:	dc3a03fd 	.word	0xdc3a03fd
 800c9e4:	3feec709 	.word	0x3feec709
 800c9e8:	145b01f5 	.word	0x145b01f5
 800c9ec:	be3e2fe0 	.word	0xbe3e2fe0
 800c9f0:	7ff00000 	.word	0x7ff00000
 800c9f4:	43400000 	.word	0x43400000
 800c9f8:	0003988e 	.word	0x0003988e
 800c9fc:	000bb679 	.word	0x000bb679
 800ca00:	0800d4b8 	.word	0x0800d4b8
 800ca04:	3ff00000 	.word	0x3ff00000
 800ca08:	40080000 	.word	0x40080000
 800ca0c:	0800d498 	.word	0x0800d498
 800ca10:	0800d4a8 	.word	0x0800d4a8
 800ca14:	460b      	mov	r3, r1
 800ca16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ca1a:	e5d7      	b.n	800c5cc <__ieee754_pow+0x354>
 800ca1c:	f04f 0a01 	mov.w	sl, #1
 800ca20:	e65e      	b.n	800c6e0 <__ieee754_pow+0x468>
 800ca22:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ccf4 <__ieee754_pow+0xa7c>)
 800ca24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca28:	4630      	mov	r0, r6
 800ca2a:	4639      	mov	r1, r7
 800ca2c:	f7f3 fbfa 	bl	8000224 <__adddf3>
 800ca30:	4642      	mov	r2, r8
 800ca32:	e9cd 0100 	strd	r0, r1, [sp]
 800ca36:	464b      	mov	r3, r9
 800ca38:	4620      	mov	r0, r4
 800ca3a:	4629      	mov	r1, r5
 800ca3c:	f7f3 fbf0 	bl	8000220 <__aeabi_dsub>
 800ca40:	4602      	mov	r2, r0
 800ca42:	460b      	mov	r3, r1
 800ca44:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca48:	f7f4 f832 	bl	8000ab0 <__aeabi_dcmpgt>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	f47f ae00 	bne.w	800c652 <__ieee754_pow+0x3da>
 800ca52:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ca56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ca5a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ca5e:	fa43 fa0a 	asr.w	sl, r3, sl
 800ca62:	44da      	add	sl, fp
 800ca64:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ca68:	489d      	ldr	r0, [pc, #628]	@ (800cce0 <__ieee754_pow+0xa68>)
 800ca6a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ca6e:	4108      	asrs	r0, r1
 800ca70:	ea00 030a 	and.w	r3, r0, sl
 800ca74:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ca78:	f1c1 0114 	rsb	r1, r1, #20
 800ca7c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ca80:	fa4a fa01 	asr.w	sl, sl, r1
 800ca84:	f1bb 0f00 	cmp.w	fp, #0
 800ca88:	4640      	mov	r0, r8
 800ca8a:	4649      	mov	r1, r9
 800ca8c:	f04f 0200 	mov.w	r2, #0
 800ca90:	bfb8      	it	lt
 800ca92:	f1ca 0a00 	rsblt	sl, sl, #0
 800ca96:	f7f3 fbc3 	bl	8000220 <__aeabi_dsub>
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	4689      	mov	r9, r1
 800ca9e:	4632      	mov	r2, r6
 800caa0:	463b      	mov	r3, r7
 800caa2:	4640      	mov	r0, r8
 800caa4:	4649      	mov	r1, r9
 800caa6:	f7f3 fbbd 	bl	8000224 <__adddf3>
 800caaa:	2400      	movs	r4, #0
 800caac:	a37c      	add	r3, pc, #496	@ (adr r3, 800cca0 <__ieee754_pow+0xa28>)
 800caae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab2:	4620      	mov	r0, r4
 800cab4:	460d      	mov	r5, r1
 800cab6:	f7f3 fd6b 	bl	8000590 <__aeabi_dmul>
 800caba:	4642      	mov	r2, r8
 800cabc:	e9cd 0100 	strd	r0, r1, [sp]
 800cac0:	464b      	mov	r3, r9
 800cac2:	4620      	mov	r0, r4
 800cac4:	4629      	mov	r1, r5
 800cac6:	f7f3 fbab 	bl	8000220 <__aeabi_dsub>
 800caca:	4602      	mov	r2, r0
 800cacc:	460b      	mov	r3, r1
 800cace:	4630      	mov	r0, r6
 800cad0:	4639      	mov	r1, r7
 800cad2:	f7f3 fba5 	bl	8000220 <__aeabi_dsub>
 800cad6:	a374      	add	r3, pc, #464	@ (adr r3, 800cca8 <__ieee754_pow+0xa30>)
 800cad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cadc:	f7f3 fd58 	bl	8000590 <__aeabi_dmul>
 800cae0:	a373      	add	r3, pc, #460	@ (adr r3, 800ccb0 <__ieee754_pow+0xa38>)
 800cae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae6:	4680      	mov	r8, r0
 800cae8:	4689      	mov	r9, r1
 800caea:	4620      	mov	r0, r4
 800caec:	4629      	mov	r1, r5
 800caee:	f7f3 fd4f 	bl	8000590 <__aeabi_dmul>
 800caf2:	4602      	mov	r2, r0
 800caf4:	460b      	mov	r3, r1
 800caf6:	4640      	mov	r0, r8
 800caf8:	4649      	mov	r1, r9
 800cafa:	f7f3 fb93 	bl	8000224 <__adddf3>
 800cafe:	4604      	mov	r4, r0
 800cb00:	460d      	mov	r5, r1
 800cb02:	4602      	mov	r2, r0
 800cb04:	460b      	mov	r3, r1
 800cb06:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb0a:	f7f3 fb8b 	bl	8000224 <__adddf3>
 800cb0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb12:	4680      	mov	r8, r0
 800cb14:	4689      	mov	r9, r1
 800cb16:	f7f3 fb83 	bl	8000220 <__aeabi_dsub>
 800cb1a:	4602      	mov	r2, r0
 800cb1c:	460b      	mov	r3, r1
 800cb1e:	4620      	mov	r0, r4
 800cb20:	4629      	mov	r1, r5
 800cb22:	f7f3 fb7d 	bl	8000220 <__aeabi_dsub>
 800cb26:	4642      	mov	r2, r8
 800cb28:	4606      	mov	r6, r0
 800cb2a:	460f      	mov	r7, r1
 800cb2c:	464b      	mov	r3, r9
 800cb2e:	4640      	mov	r0, r8
 800cb30:	4649      	mov	r1, r9
 800cb32:	f7f3 fd2d 	bl	8000590 <__aeabi_dmul>
 800cb36:	a360      	add	r3, pc, #384	@ (adr r3, 800ccb8 <__ieee754_pow+0xa40>)
 800cb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3c:	4604      	mov	r4, r0
 800cb3e:	460d      	mov	r5, r1
 800cb40:	f7f3 fd26 	bl	8000590 <__aeabi_dmul>
 800cb44:	a35e      	add	r3, pc, #376	@ (adr r3, 800ccc0 <__ieee754_pow+0xa48>)
 800cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb4a:	f7f3 fb69 	bl	8000220 <__aeabi_dsub>
 800cb4e:	4622      	mov	r2, r4
 800cb50:	462b      	mov	r3, r5
 800cb52:	f7f3 fd1d 	bl	8000590 <__aeabi_dmul>
 800cb56:	a35c      	add	r3, pc, #368	@ (adr r3, 800ccc8 <__ieee754_pow+0xa50>)
 800cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb5c:	f7f3 fb62 	bl	8000224 <__adddf3>
 800cb60:	4622      	mov	r2, r4
 800cb62:	462b      	mov	r3, r5
 800cb64:	f7f3 fd14 	bl	8000590 <__aeabi_dmul>
 800cb68:	a359      	add	r3, pc, #356	@ (adr r3, 800ccd0 <__ieee754_pow+0xa58>)
 800cb6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb6e:	f7f3 fb57 	bl	8000220 <__aeabi_dsub>
 800cb72:	4622      	mov	r2, r4
 800cb74:	462b      	mov	r3, r5
 800cb76:	f7f3 fd0b 	bl	8000590 <__aeabi_dmul>
 800cb7a:	a357      	add	r3, pc, #348	@ (adr r3, 800ccd8 <__ieee754_pow+0xa60>)
 800cb7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb80:	f7f3 fb50 	bl	8000224 <__adddf3>
 800cb84:	4622      	mov	r2, r4
 800cb86:	462b      	mov	r3, r5
 800cb88:	f7f3 fd02 	bl	8000590 <__aeabi_dmul>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	460b      	mov	r3, r1
 800cb90:	4640      	mov	r0, r8
 800cb92:	4649      	mov	r1, r9
 800cb94:	f7f3 fb44 	bl	8000220 <__aeabi_dsub>
 800cb98:	4604      	mov	r4, r0
 800cb9a:	460d      	mov	r5, r1
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	460b      	mov	r3, r1
 800cba0:	4640      	mov	r0, r8
 800cba2:	4649      	mov	r1, r9
 800cba4:	f7f3 fcf4 	bl	8000590 <__aeabi_dmul>
 800cba8:	2200      	movs	r2, #0
 800cbaa:	e9cd 0100 	strd	r0, r1, [sp]
 800cbae:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	4629      	mov	r1, r5
 800cbb6:	f7f3 fb33 	bl	8000220 <__aeabi_dsub>
 800cbba:	4602      	mov	r2, r0
 800cbbc:	460b      	mov	r3, r1
 800cbbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cbc2:	f7f3 fe0f 	bl	80007e4 <__aeabi_ddiv>
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4604      	mov	r4, r0
 800cbca:	460d      	mov	r5, r1
 800cbcc:	463b      	mov	r3, r7
 800cbce:	4640      	mov	r0, r8
 800cbd0:	4649      	mov	r1, r9
 800cbd2:	f7f3 fcdd 	bl	8000590 <__aeabi_dmul>
 800cbd6:	4632      	mov	r2, r6
 800cbd8:	463b      	mov	r3, r7
 800cbda:	f7f3 fb23 	bl	8000224 <__adddf3>
 800cbde:	4602      	mov	r2, r0
 800cbe0:	460b      	mov	r3, r1
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	4629      	mov	r1, r5
 800cbe6:	f7f3 fb1b 	bl	8000220 <__aeabi_dsub>
 800cbea:	4642      	mov	r2, r8
 800cbec:	464b      	mov	r3, r9
 800cbee:	f7f3 fb17 	bl	8000220 <__aeabi_dsub>
 800cbf2:	460b      	mov	r3, r1
 800cbf4:	4602      	mov	r2, r0
 800cbf6:	493b      	ldr	r1, [pc, #236]	@ (800cce4 <__ieee754_pow+0xa6c>)
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	f7f3 fb11 	bl	8000220 <__aeabi_dsub>
 800cbfe:	ec41 0b10 	vmov	d0, r0, r1
 800cc02:	ee10 3a90 	vmov	r3, s1
 800cc06:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800cc0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc0e:	da30      	bge.n	800cc72 <__ieee754_pow+0x9fa>
 800cc10:	4650      	mov	r0, sl
 800cc12:	f7ff fa69 	bl	800c0e8 <scalbn>
 800cc16:	ec51 0b10 	vmov	r0, r1, d0
 800cc1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc1e:	f7ff bbd2 	b.w	800c3c6 <__ieee754_pow+0x14e>
 800cc22:	4c31      	ldr	r4, [pc, #196]	@ (800cce8 <__ieee754_pow+0xa70>)
 800cc24:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cc28:	42a3      	cmp	r3, r4
 800cc2a:	d91a      	bls.n	800cc62 <__ieee754_pow+0x9ea>
 800cc2c:	4b2f      	ldr	r3, [pc, #188]	@ (800ccec <__ieee754_pow+0xa74>)
 800cc2e:	440b      	add	r3, r1
 800cc30:	4303      	orrs	r3, r0
 800cc32:	d009      	beq.n	800cc48 <__ieee754_pow+0x9d0>
 800cc34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f7f3 ff1a 	bl	8000a74 <__aeabi_dcmplt>
 800cc40:	3800      	subs	r0, #0
 800cc42:	bf18      	it	ne
 800cc44:	2001      	movne	r0, #1
 800cc46:	e42b      	b.n	800c4a0 <__ieee754_pow+0x228>
 800cc48:	4642      	mov	r2, r8
 800cc4a:	464b      	mov	r3, r9
 800cc4c:	f7f3 fae8 	bl	8000220 <__aeabi_dsub>
 800cc50:	4632      	mov	r2, r6
 800cc52:	463b      	mov	r3, r7
 800cc54:	f7f3 ff22 	bl	8000a9c <__aeabi_dcmpge>
 800cc58:	2800      	cmp	r0, #0
 800cc5a:	d1eb      	bne.n	800cc34 <__ieee754_pow+0x9bc>
 800cc5c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ccfc <__ieee754_pow+0xa84>
 800cc60:	e6f7      	b.n	800ca52 <__ieee754_pow+0x7da>
 800cc62:	469a      	mov	sl, r3
 800cc64:	4b22      	ldr	r3, [pc, #136]	@ (800ccf0 <__ieee754_pow+0xa78>)
 800cc66:	459a      	cmp	sl, r3
 800cc68:	f63f aef3 	bhi.w	800ca52 <__ieee754_pow+0x7da>
 800cc6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800cc70:	e715      	b.n	800ca9e <__ieee754_pow+0x826>
 800cc72:	ec51 0b10 	vmov	r0, r1, d0
 800cc76:	4619      	mov	r1, r3
 800cc78:	e7cf      	b.n	800cc1a <__ieee754_pow+0x9a2>
 800cc7a:	491a      	ldr	r1, [pc, #104]	@ (800cce4 <__ieee754_pow+0xa6c>)
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	f7ff bb18 	b.w	800c2b2 <__ieee754_pow+0x3a>
 800cc82:	2000      	movs	r0, #0
 800cc84:	2100      	movs	r1, #0
 800cc86:	f7ff bb14 	b.w	800c2b2 <__ieee754_pow+0x3a>
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	4639      	mov	r1, r7
 800cc8e:	f7ff bb10 	b.w	800c2b2 <__ieee754_pow+0x3a>
 800cc92:	460c      	mov	r4, r1
 800cc94:	f7ff bb5e 	b.w	800c354 <__ieee754_pow+0xdc>
 800cc98:	2400      	movs	r4, #0
 800cc9a:	f7ff bb49 	b.w	800c330 <__ieee754_pow+0xb8>
 800cc9e:	bf00      	nop
 800cca0:	00000000 	.word	0x00000000
 800cca4:	3fe62e43 	.word	0x3fe62e43
 800cca8:	fefa39ef 	.word	0xfefa39ef
 800ccac:	3fe62e42 	.word	0x3fe62e42
 800ccb0:	0ca86c39 	.word	0x0ca86c39
 800ccb4:	be205c61 	.word	0xbe205c61
 800ccb8:	72bea4d0 	.word	0x72bea4d0
 800ccbc:	3e663769 	.word	0x3e663769
 800ccc0:	c5d26bf1 	.word	0xc5d26bf1
 800ccc4:	3ebbbd41 	.word	0x3ebbbd41
 800ccc8:	af25de2c 	.word	0xaf25de2c
 800cccc:	3f11566a 	.word	0x3f11566a
 800ccd0:	16bebd93 	.word	0x16bebd93
 800ccd4:	3f66c16c 	.word	0x3f66c16c
 800ccd8:	5555553e 	.word	0x5555553e
 800ccdc:	3fc55555 	.word	0x3fc55555
 800cce0:	fff00000 	.word	0xfff00000
 800cce4:	3ff00000 	.word	0x3ff00000
 800cce8:	4090cbff 	.word	0x4090cbff
 800ccec:	3f6f3400 	.word	0x3f6f3400
 800ccf0:	3fe00000 	.word	0x3fe00000
 800ccf4:	652b82fe 	.word	0x652b82fe
 800ccf8:	3c971547 	.word	0x3c971547
 800ccfc:	4090cc00 	.word	0x4090cc00

0800cd00 <fabs>:
 800cd00:	ec51 0b10 	vmov	r0, r1, d0
 800cd04:	4602      	mov	r2, r0
 800cd06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800cd0a:	ec43 2b10 	vmov	d0, r2, r3
 800cd0e:	4770      	bx	lr

0800cd10 <__ieee754_fmodf>:
 800cd10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd12:	ee10 5a90 	vmov	r5, s1
 800cd16:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800cd1a:	1e43      	subs	r3, r0, #1
 800cd1c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cd20:	d206      	bcs.n	800cd30 <__ieee754_fmodf+0x20>
 800cd22:	ee10 3a10 	vmov	r3, s0
 800cd26:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800cd2a:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800cd2e:	d304      	bcc.n	800cd3a <__ieee754_fmodf+0x2a>
 800cd30:	ee60 0a20 	vmul.f32	s1, s0, s1
 800cd34:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800cd38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd3a:	4286      	cmp	r6, r0
 800cd3c:	dbfc      	blt.n	800cd38 <__ieee754_fmodf+0x28>
 800cd3e:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800cd42:	d105      	bne.n	800cd50 <__ieee754_fmodf+0x40>
 800cd44:	4b32      	ldr	r3, [pc, #200]	@ (800ce10 <__ieee754_fmodf+0x100>)
 800cd46:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800cd4a:	ed93 0a00 	vldr	s0, [r3]
 800cd4e:	e7f3      	b.n	800cd38 <__ieee754_fmodf+0x28>
 800cd50:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800cd54:	d140      	bne.n	800cdd8 <__ieee754_fmodf+0xc8>
 800cd56:	0232      	lsls	r2, r6, #8
 800cd58:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800cd5c:	2a00      	cmp	r2, #0
 800cd5e:	dc38      	bgt.n	800cdd2 <__ieee754_fmodf+0xc2>
 800cd60:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800cd64:	d13e      	bne.n	800cde4 <__ieee754_fmodf+0xd4>
 800cd66:	0207      	lsls	r7, r0, #8
 800cd68:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800cd6c:	2f00      	cmp	r7, #0
 800cd6e:	da36      	bge.n	800cdde <__ieee754_fmodf+0xce>
 800cd70:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800cd74:	bfb9      	ittee	lt
 800cd76:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800cd7a:	1a5b      	sublt	r3, r3, r1
 800cd7c:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800cd80:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800cd84:	bfb8      	it	lt
 800cd86:	fa06 f303 	lsllt.w	r3, r6, r3
 800cd8a:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cd8e:	bfb5      	itete	lt
 800cd90:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800cd94:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800cd98:	1aad      	sublt	r5, r5, r2
 800cd9a:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800cd9e:	bfb8      	it	lt
 800cda0:	40a8      	lsllt	r0, r5
 800cda2:	1a89      	subs	r1, r1, r2
 800cda4:	1a1d      	subs	r5, r3, r0
 800cda6:	bb01      	cbnz	r1, 800cdea <__ieee754_fmodf+0xda>
 800cda8:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800cdac:	bf38      	it	cc
 800cdae:	462b      	movcc	r3, r5
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d0c7      	beq.n	800cd44 <__ieee754_fmodf+0x34>
 800cdb4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cdb8:	db1f      	blt.n	800cdfa <__ieee754_fmodf+0xea>
 800cdba:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800cdbe:	db1f      	blt.n	800ce00 <__ieee754_fmodf+0xf0>
 800cdc0:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800cdc4:	327f      	adds	r2, #127	@ 0x7f
 800cdc6:	4323      	orrs	r3, r4
 800cdc8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cdcc:	ee00 3a10 	vmov	s0, r3
 800cdd0:	e7b2      	b.n	800cd38 <__ieee754_fmodf+0x28>
 800cdd2:	3901      	subs	r1, #1
 800cdd4:	0052      	lsls	r2, r2, #1
 800cdd6:	e7c1      	b.n	800cd5c <__ieee754_fmodf+0x4c>
 800cdd8:	15f1      	asrs	r1, r6, #23
 800cdda:	397f      	subs	r1, #127	@ 0x7f
 800cddc:	e7c0      	b.n	800cd60 <__ieee754_fmodf+0x50>
 800cdde:	3a01      	subs	r2, #1
 800cde0:	007f      	lsls	r7, r7, #1
 800cde2:	e7c3      	b.n	800cd6c <__ieee754_fmodf+0x5c>
 800cde4:	15c2      	asrs	r2, r0, #23
 800cde6:	3a7f      	subs	r2, #127	@ 0x7f
 800cde8:	e7c2      	b.n	800cd70 <__ieee754_fmodf+0x60>
 800cdea:	2d00      	cmp	r5, #0
 800cdec:	da02      	bge.n	800cdf4 <__ieee754_fmodf+0xe4>
 800cdee:	005b      	lsls	r3, r3, #1
 800cdf0:	3901      	subs	r1, #1
 800cdf2:	e7d7      	b.n	800cda4 <__ieee754_fmodf+0x94>
 800cdf4:	d0a6      	beq.n	800cd44 <__ieee754_fmodf+0x34>
 800cdf6:	006b      	lsls	r3, r5, #1
 800cdf8:	e7fa      	b.n	800cdf0 <__ieee754_fmodf+0xe0>
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	3a01      	subs	r2, #1
 800cdfe:	e7d9      	b.n	800cdb4 <__ieee754_fmodf+0xa4>
 800ce00:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800ce04:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800ce08:	3282      	adds	r2, #130	@ 0x82
 800ce0a:	4113      	asrs	r3, r2
 800ce0c:	4323      	orrs	r3, r4
 800ce0e:	e7dd      	b.n	800cdcc <__ieee754_fmodf+0xbc>
 800ce10:	0800d4c8 	.word	0x0800d4c8

0800ce14 <with_errno>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	ed2d 8b02 	vpush	{d8}
 800ce1a:	eeb0 8a40 	vmov.f32	s16, s0
 800ce1e:	eef0 8a60 	vmov.f32	s17, s1
 800ce22:	4604      	mov	r4, r0
 800ce24:	f000 fa30 	bl	800d288 <__errno>
 800ce28:	eeb0 0a48 	vmov.f32	s0, s16
 800ce2c:	eef0 0a68 	vmov.f32	s1, s17
 800ce30:	ecbd 8b02 	vpop	{d8}
 800ce34:	6004      	str	r4, [r0, #0]
 800ce36:	bd10      	pop	{r4, pc}

0800ce38 <xflow>:
 800ce38:	4603      	mov	r3, r0
 800ce3a:	b507      	push	{r0, r1, r2, lr}
 800ce3c:	ec51 0b10 	vmov	r0, r1, d0
 800ce40:	b183      	cbz	r3, 800ce64 <xflow+0x2c>
 800ce42:	4602      	mov	r2, r0
 800ce44:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ce48:	e9cd 2300 	strd	r2, r3, [sp]
 800ce4c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce50:	f7f3 fb9e 	bl	8000590 <__aeabi_dmul>
 800ce54:	ec41 0b10 	vmov	d0, r0, r1
 800ce58:	2022      	movs	r0, #34	@ 0x22
 800ce5a:	b003      	add	sp, #12
 800ce5c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ce60:	f7ff bfd8 	b.w	800ce14 <with_errno>
 800ce64:	4602      	mov	r2, r0
 800ce66:	460b      	mov	r3, r1
 800ce68:	e7ee      	b.n	800ce48 <xflow+0x10>
 800ce6a:	0000      	movs	r0, r0
 800ce6c:	0000      	movs	r0, r0
	...

0800ce70 <__math_uflow>:
 800ce70:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce78 <__math_uflow+0x8>
 800ce74:	f7ff bfe0 	b.w	800ce38 <xflow>
 800ce78:	00000000 	.word	0x00000000
 800ce7c:	10000000 	.word	0x10000000

0800ce80 <__math_oflow>:
 800ce80:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ce88 <__math_oflow+0x8>
 800ce84:	f7ff bfd8 	b.w	800ce38 <xflow>
 800ce88:	00000000 	.word	0x00000000
 800ce8c:	70000000 	.word	0x70000000

0800ce90 <__ieee754_sqrt>:
 800ce90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce94:	4a68      	ldr	r2, [pc, #416]	@ (800d038 <__ieee754_sqrt+0x1a8>)
 800ce96:	ec55 4b10 	vmov	r4, r5, d0
 800ce9a:	43aa      	bics	r2, r5
 800ce9c:	462b      	mov	r3, r5
 800ce9e:	4621      	mov	r1, r4
 800cea0:	d110      	bne.n	800cec4 <__ieee754_sqrt+0x34>
 800cea2:	4622      	mov	r2, r4
 800cea4:	4620      	mov	r0, r4
 800cea6:	4629      	mov	r1, r5
 800cea8:	f7f3 fb72 	bl	8000590 <__aeabi_dmul>
 800ceac:	4602      	mov	r2, r0
 800ceae:	460b      	mov	r3, r1
 800ceb0:	4620      	mov	r0, r4
 800ceb2:	4629      	mov	r1, r5
 800ceb4:	f7f3 f9b6 	bl	8000224 <__adddf3>
 800ceb8:	4604      	mov	r4, r0
 800ceba:	460d      	mov	r5, r1
 800cebc:	ec45 4b10 	vmov	d0, r4, r5
 800cec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cec4:	2d00      	cmp	r5, #0
 800cec6:	dc0e      	bgt.n	800cee6 <__ieee754_sqrt+0x56>
 800cec8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800cecc:	4322      	orrs	r2, r4
 800cece:	d0f5      	beq.n	800cebc <__ieee754_sqrt+0x2c>
 800ced0:	b19d      	cbz	r5, 800cefa <__ieee754_sqrt+0x6a>
 800ced2:	4622      	mov	r2, r4
 800ced4:	4620      	mov	r0, r4
 800ced6:	4629      	mov	r1, r5
 800ced8:	f7f3 f9a2 	bl	8000220 <__aeabi_dsub>
 800cedc:	4602      	mov	r2, r0
 800cede:	460b      	mov	r3, r1
 800cee0:	f7f3 fc80 	bl	80007e4 <__aeabi_ddiv>
 800cee4:	e7e8      	b.n	800ceb8 <__ieee754_sqrt+0x28>
 800cee6:	152a      	asrs	r2, r5, #20
 800cee8:	d115      	bne.n	800cf16 <__ieee754_sqrt+0x86>
 800ceea:	2000      	movs	r0, #0
 800ceec:	e009      	b.n	800cf02 <__ieee754_sqrt+0x72>
 800ceee:	0acb      	lsrs	r3, r1, #11
 800cef0:	3a15      	subs	r2, #21
 800cef2:	0549      	lsls	r1, r1, #21
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d0fa      	beq.n	800ceee <__ieee754_sqrt+0x5e>
 800cef8:	e7f7      	b.n	800ceea <__ieee754_sqrt+0x5a>
 800cefa:	462a      	mov	r2, r5
 800cefc:	e7fa      	b.n	800cef4 <__ieee754_sqrt+0x64>
 800cefe:	005b      	lsls	r3, r3, #1
 800cf00:	3001      	adds	r0, #1
 800cf02:	02dc      	lsls	r4, r3, #11
 800cf04:	d5fb      	bpl.n	800cefe <__ieee754_sqrt+0x6e>
 800cf06:	1e44      	subs	r4, r0, #1
 800cf08:	1b12      	subs	r2, r2, r4
 800cf0a:	f1c0 0420 	rsb	r4, r0, #32
 800cf0e:	fa21 f404 	lsr.w	r4, r1, r4
 800cf12:	4323      	orrs	r3, r4
 800cf14:	4081      	lsls	r1, r0
 800cf16:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cf1a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800cf1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cf22:	07d2      	lsls	r2, r2, #31
 800cf24:	bf5c      	itt	pl
 800cf26:	005b      	lslpl	r3, r3, #1
 800cf28:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800cf2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800cf30:	bf58      	it	pl
 800cf32:	0049      	lslpl	r1, r1, #1
 800cf34:	2600      	movs	r6, #0
 800cf36:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800cf3a:	106d      	asrs	r5, r5, #1
 800cf3c:	0049      	lsls	r1, r1, #1
 800cf3e:	2016      	movs	r0, #22
 800cf40:	4632      	mov	r2, r6
 800cf42:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800cf46:	1917      	adds	r7, r2, r4
 800cf48:	429f      	cmp	r7, r3
 800cf4a:	bfde      	ittt	le
 800cf4c:	193a      	addle	r2, r7, r4
 800cf4e:	1bdb      	suble	r3, r3, r7
 800cf50:	1936      	addle	r6, r6, r4
 800cf52:	0fcf      	lsrs	r7, r1, #31
 800cf54:	3801      	subs	r0, #1
 800cf56:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cf5a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cf5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800cf62:	d1f0      	bne.n	800cf46 <__ieee754_sqrt+0xb6>
 800cf64:	4604      	mov	r4, r0
 800cf66:	2720      	movs	r7, #32
 800cf68:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	eb00 0e0c 	add.w	lr, r0, ip
 800cf72:	db02      	blt.n	800cf7a <__ieee754_sqrt+0xea>
 800cf74:	d113      	bne.n	800cf9e <__ieee754_sqrt+0x10e>
 800cf76:	458e      	cmp	lr, r1
 800cf78:	d811      	bhi.n	800cf9e <__ieee754_sqrt+0x10e>
 800cf7a:	f1be 0f00 	cmp.w	lr, #0
 800cf7e:	eb0e 000c 	add.w	r0, lr, ip
 800cf82:	da42      	bge.n	800d00a <__ieee754_sqrt+0x17a>
 800cf84:	2800      	cmp	r0, #0
 800cf86:	db40      	blt.n	800d00a <__ieee754_sqrt+0x17a>
 800cf88:	f102 0801 	add.w	r8, r2, #1
 800cf8c:	1a9b      	subs	r3, r3, r2
 800cf8e:	458e      	cmp	lr, r1
 800cf90:	bf88      	it	hi
 800cf92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cf96:	eba1 010e 	sub.w	r1, r1, lr
 800cf9a:	4464      	add	r4, ip
 800cf9c:	4642      	mov	r2, r8
 800cf9e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cfa2:	3f01      	subs	r7, #1
 800cfa4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cfa8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cfac:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cfb0:	d1dc      	bne.n	800cf6c <__ieee754_sqrt+0xdc>
 800cfb2:	4319      	orrs	r1, r3
 800cfb4:	d01b      	beq.n	800cfee <__ieee754_sqrt+0x15e>
 800cfb6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800d03c <__ieee754_sqrt+0x1ac>
 800cfba:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800d040 <__ieee754_sqrt+0x1b0>
 800cfbe:	e9da 0100 	ldrd	r0, r1, [sl]
 800cfc2:	e9db 2300 	ldrd	r2, r3, [fp]
 800cfc6:	f7f3 f92b 	bl	8000220 <__aeabi_dsub>
 800cfca:	e9da 8900 	ldrd	r8, r9, [sl]
 800cfce:	4602      	mov	r2, r0
 800cfd0:	460b      	mov	r3, r1
 800cfd2:	4640      	mov	r0, r8
 800cfd4:	4649      	mov	r1, r9
 800cfd6:	f7f3 fd57 	bl	8000a88 <__aeabi_dcmple>
 800cfda:	b140      	cbz	r0, 800cfee <__ieee754_sqrt+0x15e>
 800cfdc:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cfe0:	e9da 0100 	ldrd	r0, r1, [sl]
 800cfe4:	e9db 2300 	ldrd	r2, r3, [fp]
 800cfe8:	d111      	bne.n	800d00e <__ieee754_sqrt+0x17e>
 800cfea:	3601      	adds	r6, #1
 800cfec:	463c      	mov	r4, r7
 800cfee:	1072      	asrs	r2, r6, #1
 800cff0:	0863      	lsrs	r3, r4, #1
 800cff2:	07f1      	lsls	r1, r6, #31
 800cff4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cff8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cffc:	bf48      	it	mi
 800cffe:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800d002:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800d006:	4618      	mov	r0, r3
 800d008:	e756      	b.n	800ceb8 <__ieee754_sqrt+0x28>
 800d00a:	4690      	mov	r8, r2
 800d00c:	e7be      	b.n	800cf8c <__ieee754_sqrt+0xfc>
 800d00e:	f7f3 f909 	bl	8000224 <__adddf3>
 800d012:	e9da 8900 	ldrd	r8, r9, [sl]
 800d016:	4602      	mov	r2, r0
 800d018:	460b      	mov	r3, r1
 800d01a:	4640      	mov	r0, r8
 800d01c:	4649      	mov	r1, r9
 800d01e:	f7f3 fd29 	bl	8000a74 <__aeabi_dcmplt>
 800d022:	b120      	cbz	r0, 800d02e <__ieee754_sqrt+0x19e>
 800d024:	1ca0      	adds	r0, r4, #2
 800d026:	bf08      	it	eq
 800d028:	3601      	addeq	r6, #1
 800d02a:	3402      	adds	r4, #2
 800d02c:	e7df      	b.n	800cfee <__ieee754_sqrt+0x15e>
 800d02e:	1c63      	adds	r3, r4, #1
 800d030:	f023 0401 	bic.w	r4, r3, #1
 800d034:	e7db      	b.n	800cfee <__ieee754_sqrt+0x15e>
 800d036:	bf00      	nop
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	20000108 	.word	0x20000108
 800d040:	20000100 	.word	0x20000100

0800d044 <abort>:
 800d044:	b508      	push	{r3, lr}
 800d046:	2006      	movs	r0, #6
 800d048:	f000 f8f2 	bl	800d230 <raise>
 800d04c:	2001      	movs	r0, #1
 800d04e:	f7f8 fb0d 	bl	800566c <_exit>
	...

0800d054 <malloc>:
 800d054:	4b02      	ldr	r3, [pc, #8]	@ (800d060 <malloc+0xc>)
 800d056:	4601      	mov	r1, r0
 800d058:	6818      	ldr	r0, [r3, #0]
 800d05a:	f000 b82d 	b.w	800d0b8 <_malloc_r>
 800d05e:	bf00      	nop
 800d060:	20000110 	.word	0x20000110

0800d064 <free>:
 800d064:	4b02      	ldr	r3, [pc, #8]	@ (800d070 <free+0xc>)
 800d066:	4601      	mov	r1, r0
 800d068:	6818      	ldr	r0, [r3, #0]
 800d06a:	f000 b947 	b.w	800d2fc <_free_r>
 800d06e:	bf00      	nop
 800d070:	20000110 	.word	0x20000110

0800d074 <sbrk_aligned>:
 800d074:	b570      	push	{r4, r5, r6, lr}
 800d076:	4e0f      	ldr	r6, [pc, #60]	@ (800d0b4 <sbrk_aligned+0x40>)
 800d078:	460c      	mov	r4, r1
 800d07a:	6831      	ldr	r1, [r6, #0]
 800d07c:	4605      	mov	r5, r0
 800d07e:	b911      	cbnz	r1, 800d086 <sbrk_aligned+0x12>
 800d080:	f000 f8f2 	bl	800d268 <_sbrk_r>
 800d084:	6030      	str	r0, [r6, #0]
 800d086:	4621      	mov	r1, r4
 800d088:	4628      	mov	r0, r5
 800d08a:	f000 f8ed 	bl	800d268 <_sbrk_r>
 800d08e:	1c43      	adds	r3, r0, #1
 800d090:	d103      	bne.n	800d09a <sbrk_aligned+0x26>
 800d092:	f04f 34ff 	mov.w	r4, #4294967295
 800d096:	4620      	mov	r0, r4
 800d098:	bd70      	pop	{r4, r5, r6, pc}
 800d09a:	1cc4      	adds	r4, r0, #3
 800d09c:	f024 0403 	bic.w	r4, r4, #3
 800d0a0:	42a0      	cmp	r0, r4
 800d0a2:	d0f8      	beq.n	800d096 <sbrk_aligned+0x22>
 800d0a4:	1a21      	subs	r1, r4, r0
 800d0a6:	4628      	mov	r0, r5
 800d0a8:	f000 f8de 	bl	800d268 <_sbrk_r>
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	d1f2      	bne.n	800d096 <sbrk_aligned+0x22>
 800d0b0:	e7ef      	b.n	800d092 <sbrk_aligned+0x1e>
 800d0b2:	bf00      	nop
 800d0b4:	20000834 	.word	0x20000834

0800d0b8 <_malloc_r>:
 800d0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0bc:	1ccd      	adds	r5, r1, #3
 800d0be:	f025 0503 	bic.w	r5, r5, #3
 800d0c2:	3508      	adds	r5, #8
 800d0c4:	2d0c      	cmp	r5, #12
 800d0c6:	bf38      	it	cc
 800d0c8:	250c      	movcc	r5, #12
 800d0ca:	2d00      	cmp	r5, #0
 800d0cc:	4606      	mov	r6, r0
 800d0ce:	db01      	blt.n	800d0d4 <_malloc_r+0x1c>
 800d0d0:	42a9      	cmp	r1, r5
 800d0d2:	d904      	bls.n	800d0de <_malloc_r+0x26>
 800d0d4:	230c      	movs	r3, #12
 800d0d6:	6033      	str	r3, [r6, #0]
 800d0d8:	2000      	movs	r0, #0
 800d0da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1b4 <_malloc_r+0xfc>
 800d0e2:	f000 f869 	bl	800d1b8 <__malloc_lock>
 800d0e6:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ea:	461c      	mov	r4, r3
 800d0ec:	bb44      	cbnz	r4, 800d140 <_malloc_r+0x88>
 800d0ee:	4629      	mov	r1, r5
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	f7ff ffbf 	bl	800d074 <sbrk_aligned>
 800d0f6:	1c43      	adds	r3, r0, #1
 800d0f8:	4604      	mov	r4, r0
 800d0fa:	d158      	bne.n	800d1ae <_malloc_r+0xf6>
 800d0fc:	f8d8 4000 	ldr.w	r4, [r8]
 800d100:	4627      	mov	r7, r4
 800d102:	2f00      	cmp	r7, #0
 800d104:	d143      	bne.n	800d18e <_malloc_r+0xd6>
 800d106:	2c00      	cmp	r4, #0
 800d108:	d04b      	beq.n	800d1a2 <_malloc_r+0xea>
 800d10a:	6823      	ldr	r3, [r4, #0]
 800d10c:	4639      	mov	r1, r7
 800d10e:	4630      	mov	r0, r6
 800d110:	eb04 0903 	add.w	r9, r4, r3
 800d114:	f000 f8a8 	bl	800d268 <_sbrk_r>
 800d118:	4581      	cmp	r9, r0
 800d11a:	d142      	bne.n	800d1a2 <_malloc_r+0xea>
 800d11c:	6821      	ldr	r1, [r4, #0]
 800d11e:	1a6d      	subs	r5, r5, r1
 800d120:	4629      	mov	r1, r5
 800d122:	4630      	mov	r0, r6
 800d124:	f7ff ffa6 	bl	800d074 <sbrk_aligned>
 800d128:	3001      	adds	r0, #1
 800d12a:	d03a      	beq.n	800d1a2 <_malloc_r+0xea>
 800d12c:	6823      	ldr	r3, [r4, #0]
 800d12e:	442b      	add	r3, r5
 800d130:	6023      	str	r3, [r4, #0]
 800d132:	f8d8 3000 	ldr.w	r3, [r8]
 800d136:	685a      	ldr	r2, [r3, #4]
 800d138:	bb62      	cbnz	r2, 800d194 <_malloc_r+0xdc>
 800d13a:	f8c8 7000 	str.w	r7, [r8]
 800d13e:	e00f      	b.n	800d160 <_malloc_r+0xa8>
 800d140:	6822      	ldr	r2, [r4, #0]
 800d142:	1b52      	subs	r2, r2, r5
 800d144:	d420      	bmi.n	800d188 <_malloc_r+0xd0>
 800d146:	2a0b      	cmp	r2, #11
 800d148:	d917      	bls.n	800d17a <_malloc_r+0xc2>
 800d14a:	1961      	adds	r1, r4, r5
 800d14c:	42a3      	cmp	r3, r4
 800d14e:	6025      	str	r5, [r4, #0]
 800d150:	bf18      	it	ne
 800d152:	6059      	strne	r1, [r3, #4]
 800d154:	6863      	ldr	r3, [r4, #4]
 800d156:	bf08      	it	eq
 800d158:	f8c8 1000 	streq.w	r1, [r8]
 800d15c:	5162      	str	r2, [r4, r5]
 800d15e:	604b      	str	r3, [r1, #4]
 800d160:	4630      	mov	r0, r6
 800d162:	f000 f82f 	bl	800d1c4 <__malloc_unlock>
 800d166:	f104 000b 	add.w	r0, r4, #11
 800d16a:	1d23      	adds	r3, r4, #4
 800d16c:	f020 0007 	bic.w	r0, r0, #7
 800d170:	1ac2      	subs	r2, r0, r3
 800d172:	bf1c      	itt	ne
 800d174:	1a1b      	subne	r3, r3, r0
 800d176:	50a3      	strne	r3, [r4, r2]
 800d178:	e7af      	b.n	800d0da <_malloc_r+0x22>
 800d17a:	6862      	ldr	r2, [r4, #4]
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	bf0c      	ite	eq
 800d180:	f8c8 2000 	streq.w	r2, [r8]
 800d184:	605a      	strne	r2, [r3, #4]
 800d186:	e7eb      	b.n	800d160 <_malloc_r+0xa8>
 800d188:	4623      	mov	r3, r4
 800d18a:	6864      	ldr	r4, [r4, #4]
 800d18c:	e7ae      	b.n	800d0ec <_malloc_r+0x34>
 800d18e:	463c      	mov	r4, r7
 800d190:	687f      	ldr	r7, [r7, #4]
 800d192:	e7b6      	b.n	800d102 <_malloc_r+0x4a>
 800d194:	461a      	mov	r2, r3
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	42a3      	cmp	r3, r4
 800d19a:	d1fb      	bne.n	800d194 <_malloc_r+0xdc>
 800d19c:	2300      	movs	r3, #0
 800d19e:	6053      	str	r3, [r2, #4]
 800d1a0:	e7de      	b.n	800d160 <_malloc_r+0xa8>
 800d1a2:	230c      	movs	r3, #12
 800d1a4:	6033      	str	r3, [r6, #0]
 800d1a6:	4630      	mov	r0, r6
 800d1a8:	f000 f80c 	bl	800d1c4 <__malloc_unlock>
 800d1ac:	e794      	b.n	800d0d8 <_malloc_r+0x20>
 800d1ae:	6005      	str	r5, [r0, #0]
 800d1b0:	e7d6      	b.n	800d160 <_malloc_r+0xa8>
 800d1b2:	bf00      	nop
 800d1b4:	20000838 	.word	0x20000838

0800d1b8 <__malloc_lock>:
 800d1b8:	4801      	ldr	r0, [pc, #4]	@ (800d1c0 <__malloc_lock+0x8>)
 800d1ba:	f000 b88f 	b.w	800d2dc <__retarget_lock_acquire_recursive>
 800d1be:	bf00      	nop
 800d1c0:	20000978 	.word	0x20000978

0800d1c4 <__malloc_unlock>:
 800d1c4:	4801      	ldr	r0, [pc, #4]	@ (800d1cc <__malloc_unlock+0x8>)
 800d1c6:	f000 b88a 	b.w	800d2de <__retarget_lock_release_recursive>
 800d1ca:	bf00      	nop
 800d1cc:	20000978 	.word	0x20000978

0800d1d0 <memset>:
 800d1d0:	4402      	add	r2, r0
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4293      	cmp	r3, r2
 800d1d6:	d100      	bne.n	800d1da <memset+0xa>
 800d1d8:	4770      	bx	lr
 800d1da:	f803 1b01 	strb.w	r1, [r3], #1
 800d1de:	e7f9      	b.n	800d1d4 <memset+0x4>

0800d1e0 <_raise_r>:
 800d1e0:	291f      	cmp	r1, #31
 800d1e2:	b538      	push	{r3, r4, r5, lr}
 800d1e4:	4605      	mov	r5, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	d904      	bls.n	800d1f4 <_raise_r+0x14>
 800d1ea:	2316      	movs	r3, #22
 800d1ec:	6003      	str	r3, [r0, #0]
 800d1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1f6:	b112      	cbz	r2, 800d1fe <_raise_r+0x1e>
 800d1f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1fc:	b94b      	cbnz	r3, 800d212 <_raise_r+0x32>
 800d1fe:	4628      	mov	r0, r5
 800d200:	f000 f830 	bl	800d264 <_getpid_r>
 800d204:	4622      	mov	r2, r4
 800d206:	4601      	mov	r1, r0
 800d208:	4628      	mov	r0, r5
 800d20a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d20e:	f000 b817 	b.w	800d240 <_kill_r>
 800d212:	2b01      	cmp	r3, #1
 800d214:	d00a      	beq.n	800d22c <_raise_r+0x4c>
 800d216:	1c59      	adds	r1, r3, #1
 800d218:	d103      	bne.n	800d222 <_raise_r+0x42>
 800d21a:	2316      	movs	r3, #22
 800d21c:	6003      	str	r3, [r0, #0]
 800d21e:	2001      	movs	r0, #1
 800d220:	e7e7      	b.n	800d1f2 <_raise_r+0x12>
 800d222:	2100      	movs	r1, #0
 800d224:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d228:	4620      	mov	r0, r4
 800d22a:	4798      	blx	r3
 800d22c:	2000      	movs	r0, #0
 800d22e:	e7e0      	b.n	800d1f2 <_raise_r+0x12>

0800d230 <raise>:
 800d230:	4b02      	ldr	r3, [pc, #8]	@ (800d23c <raise+0xc>)
 800d232:	4601      	mov	r1, r0
 800d234:	6818      	ldr	r0, [r3, #0]
 800d236:	f7ff bfd3 	b.w	800d1e0 <_raise_r>
 800d23a:	bf00      	nop
 800d23c:	20000110 	.word	0x20000110

0800d240 <_kill_r>:
 800d240:	b538      	push	{r3, r4, r5, lr}
 800d242:	4d07      	ldr	r5, [pc, #28]	@ (800d260 <_kill_r+0x20>)
 800d244:	2300      	movs	r3, #0
 800d246:	4604      	mov	r4, r0
 800d248:	4608      	mov	r0, r1
 800d24a:	4611      	mov	r1, r2
 800d24c:	602b      	str	r3, [r5, #0]
 800d24e:	f7f8 f9fd 	bl	800564c <_kill>
 800d252:	1c43      	adds	r3, r0, #1
 800d254:	d102      	bne.n	800d25c <_kill_r+0x1c>
 800d256:	682b      	ldr	r3, [r5, #0]
 800d258:	b103      	cbz	r3, 800d25c <_kill_r+0x1c>
 800d25a:	6023      	str	r3, [r4, #0]
 800d25c:	bd38      	pop	{r3, r4, r5, pc}
 800d25e:	bf00      	nop
 800d260:	20000974 	.word	0x20000974

0800d264 <_getpid_r>:
 800d264:	f7f8 b9ea 	b.w	800563c <_getpid>

0800d268 <_sbrk_r>:
 800d268:	b538      	push	{r3, r4, r5, lr}
 800d26a:	4d06      	ldr	r5, [pc, #24]	@ (800d284 <_sbrk_r+0x1c>)
 800d26c:	2300      	movs	r3, #0
 800d26e:	4604      	mov	r4, r0
 800d270:	4608      	mov	r0, r1
 800d272:	602b      	str	r3, [r5, #0]
 800d274:	f7f8 fa06 	bl	8005684 <_sbrk>
 800d278:	1c43      	adds	r3, r0, #1
 800d27a:	d102      	bne.n	800d282 <_sbrk_r+0x1a>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b103      	cbz	r3, 800d282 <_sbrk_r+0x1a>
 800d280:	6023      	str	r3, [r4, #0]
 800d282:	bd38      	pop	{r3, r4, r5, pc}
 800d284:	20000974 	.word	0x20000974

0800d288 <__errno>:
 800d288:	4b01      	ldr	r3, [pc, #4]	@ (800d290 <__errno+0x8>)
 800d28a:	6818      	ldr	r0, [r3, #0]
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	20000110 	.word	0x20000110

0800d294 <__libc_init_array>:
 800d294:	b570      	push	{r4, r5, r6, lr}
 800d296:	4d0d      	ldr	r5, [pc, #52]	@ (800d2cc <__libc_init_array+0x38>)
 800d298:	4c0d      	ldr	r4, [pc, #52]	@ (800d2d0 <__libc_init_array+0x3c>)
 800d29a:	1b64      	subs	r4, r4, r5
 800d29c:	10a4      	asrs	r4, r4, #2
 800d29e:	2600      	movs	r6, #0
 800d2a0:	42a6      	cmp	r6, r4
 800d2a2:	d109      	bne.n	800d2b8 <__libc_init_array+0x24>
 800d2a4:	4d0b      	ldr	r5, [pc, #44]	@ (800d2d4 <__libc_init_array+0x40>)
 800d2a6:	4c0c      	ldr	r4, [pc, #48]	@ (800d2d8 <__libc_init_array+0x44>)
 800d2a8:	f000 f872 	bl	800d390 <_init>
 800d2ac:	1b64      	subs	r4, r4, r5
 800d2ae:	10a4      	asrs	r4, r4, #2
 800d2b0:	2600      	movs	r6, #0
 800d2b2:	42a6      	cmp	r6, r4
 800d2b4:	d105      	bne.n	800d2c2 <__libc_init_array+0x2e>
 800d2b6:	bd70      	pop	{r4, r5, r6, pc}
 800d2b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2bc:	4798      	blx	r3
 800d2be:	3601      	adds	r6, #1
 800d2c0:	e7ee      	b.n	800d2a0 <__libc_init_array+0xc>
 800d2c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d2c6:	4798      	blx	r3
 800d2c8:	3601      	adds	r6, #1
 800d2ca:	e7f2      	b.n	800d2b2 <__libc_init_array+0x1e>
 800d2cc:	0800d4d0 	.word	0x0800d4d0
 800d2d0:	0800d4d0 	.word	0x0800d4d0
 800d2d4:	0800d4d0 	.word	0x0800d4d0
 800d2d8:	0800d4dc 	.word	0x0800d4dc

0800d2dc <__retarget_lock_acquire_recursive>:
 800d2dc:	4770      	bx	lr

0800d2de <__retarget_lock_release_recursive>:
 800d2de:	4770      	bx	lr

0800d2e0 <memcpy>:
 800d2e0:	440a      	add	r2, r1
 800d2e2:	4291      	cmp	r1, r2
 800d2e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d2e8:	d100      	bne.n	800d2ec <memcpy+0xc>
 800d2ea:	4770      	bx	lr
 800d2ec:	b510      	push	{r4, lr}
 800d2ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d2f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2f6:	4291      	cmp	r1, r2
 800d2f8:	d1f9      	bne.n	800d2ee <memcpy+0xe>
 800d2fa:	bd10      	pop	{r4, pc}

0800d2fc <_free_r>:
 800d2fc:	b538      	push	{r3, r4, r5, lr}
 800d2fe:	4605      	mov	r5, r0
 800d300:	2900      	cmp	r1, #0
 800d302:	d041      	beq.n	800d388 <_free_r+0x8c>
 800d304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d308:	1f0c      	subs	r4, r1, #4
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	bfb8      	it	lt
 800d30e:	18e4      	addlt	r4, r4, r3
 800d310:	f7ff ff52 	bl	800d1b8 <__malloc_lock>
 800d314:	4a1d      	ldr	r2, [pc, #116]	@ (800d38c <_free_r+0x90>)
 800d316:	6813      	ldr	r3, [r2, #0]
 800d318:	b933      	cbnz	r3, 800d328 <_free_r+0x2c>
 800d31a:	6063      	str	r3, [r4, #4]
 800d31c:	6014      	str	r4, [r2, #0]
 800d31e:	4628      	mov	r0, r5
 800d320:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d324:	f7ff bf4e 	b.w	800d1c4 <__malloc_unlock>
 800d328:	42a3      	cmp	r3, r4
 800d32a:	d908      	bls.n	800d33e <_free_r+0x42>
 800d32c:	6820      	ldr	r0, [r4, #0]
 800d32e:	1821      	adds	r1, r4, r0
 800d330:	428b      	cmp	r3, r1
 800d332:	bf01      	itttt	eq
 800d334:	6819      	ldreq	r1, [r3, #0]
 800d336:	685b      	ldreq	r3, [r3, #4]
 800d338:	1809      	addeq	r1, r1, r0
 800d33a:	6021      	streq	r1, [r4, #0]
 800d33c:	e7ed      	b.n	800d31a <_free_r+0x1e>
 800d33e:	461a      	mov	r2, r3
 800d340:	685b      	ldr	r3, [r3, #4]
 800d342:	b10b      	cbz	r3, 800d348 <_free_r+0x4c>
 800d344:	42a3      	cmp	r3, r4
 800d346:	d9fa      	bls.n	800d33e <_free_r+0x42>
 800d348:	6811      	ldr	r1, [r2, #0]
 800d34a:	1850      	adds	r0, r2, r1
 800d34c:	42a0      	cmp	r0, r4
 800d34e:	d10b      	bne.n	800d368 <_free_r+0x6c>
 800d350:	6820      	ldr	r0, [r4, #0]
 800d352:	4401      	add	r1, r0
 800d354:	1850      	adds	r0, r2, r1
 800d356:	4283      	cmp	r3, r0
 800d358:	6011      	str	r1, [r2, #0]
 800d35a:	d1e0      	bne.n	800d31e <_free_r+0x22>
 800d35c:	6818      	ldr	r0, [r3, #0]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	6053      	str	r3, [r2, #4]
 800d362:	4408      	add	r0, r1
 800d364:	6010      	str	r0, [r2, #0]
 800d366:	e7da      	b.n	800d31e <_free_r+0x22>
 800d368:	d902      	bls.n	800d370 <_free_r+0x74>
 800d36a:	230c      	movs	r3, #12
 800d36c:	602b      	str	r3, [r5, #0]
 800d36e:	e7d6      	b.n	800d31e <_free_r+0x22>
 800d370:	6820      	ldr	r0, [r4, #0]
 800d372:	1821      	adds	r1, r4, r0
 800d374:	428b      	cmp	r3, r1
 800d376:	bf04      	itt	eq
 800d378:	6819      	ldreq	r1, [r3, #0]
 800d37a:	685b      	ldreq	r3, [r3, #4]
 800d37c:	6063      	str	r3, [r4, #4]
 800d37e:	bf04      	itt	eq
 800d380:	1809      	addeq	r1, r1, r0
 800d382:	6021      	streq	r1, [r4, #0]
 800d384:	6054      	str	r4, [r2, #4]
 800d386:	e7ca      	b.n	800d31e <_free_r+0x22>
 800d388:	bd38      	pop	{r3, r4, r5, pc}
 800d38a:	bf00      	nop
 800d38c:	20000838 	.word	0x20000838

0800d390 <_init>:
 800d390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d392:	bf00      	nop
 800d394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d396:	bc08      	pop	{r3}
 800d398:	469e      	mov	lr, r3
 800d39a:	4770      	bx	lr

0800d39c <_fini>:
 800d39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39e:	bf00      	nop
 800d3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d3a2:	bc08      	pop	{r3}
 800d3a4:	469e      	mov	lr, r3
 800d3a6:	4770      	bx	lr
