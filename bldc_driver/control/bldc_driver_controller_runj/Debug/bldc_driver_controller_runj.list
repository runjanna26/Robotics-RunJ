
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dca8  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  0800de80  0800de80  0000ee80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dfc8  0800dfc8  0000f160  2**0
                  CONTENTS
  4 .ARM          00000008  0800dfc8  0800dfc8  0000efc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dfd0  0800dfd0  0000f160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800dfd0  0800dfd0  0000efd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800dfdc  0800dfdc  0000efdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000160  20000000  0800dfe4  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  20000160  0800e144  0000f160  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200009b8  0800e144  0000f9b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033445  00000000  00000000  0000f190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006343  00000000  00000000  000425d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dd8  00000000  00000000  00048918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016cf  00000000  00000000  0004a6f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029e33  00000000  00000000  0004bdbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028f02  00000000  00000000  00075bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1623  00000000  00000000  0009eaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00190117  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a80  00000000  00000000  0019015c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00198bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000160 	.word	0x20000160
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800de68 	.word	0x0800de68

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000164 	.word	0x20000164
 8000214:	0800de68 	.word	0x0800de68

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	@ 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b96a 	b.w	8001098 <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	460c      	mov	r4, r1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d14e      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000de8:	4694      	mov	ip, r2
 8000dea:	458c      	cmp	ip, r1
 8000dec:	4686      	mov	lr, r0
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	d962      	bls.n	8000eba <__udivmoddi4+0xde>
 8000df4:	b14a      	cbz	r2, 8000e0a <__udivmoddi4+0x2e>
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	4091      	lsls	r1, r2
 8000dfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000e00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e04:	4319      	orrs	r1, r3
 8000e06:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0e:	fa1f f68c 	uxth.w	r6, ip
 8000e12:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e16:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1a:	fb07 1114 	mls	r1, r7, r4, r1
 8000e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e22:	fb04 f106 	mul.w	r1, r4, r6
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e32:	f080 8112 	bcs.w	800105a <__udivmoddi4+0x27e>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 810f 	bls.w	800105a <__udivmoddi4+0x27e>
 8000e3c:	3c02      	subs	r4, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a59      	subs	r1, r3, r1
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e4a:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e52:	fb00 f606 	mul.w	r6, r0, r6
 8000e56:	429e      	cmp	r6, r3
 8000e58:	d90a      	bls.n	8000e70 <__udivmoddi4+0x94>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e62:	f080 80fc 	bcs.w	800105e <__udivmoddi4+0x282>
 8000e66:	429e      	cmp	r6, r3
 8000e68:	f240 80f9 	bls.w	800105e <__udivmoddi4+0x282>
 8000e6c:	4463      	add	r3, ip
 8000e6e:	3802      	subs	r0, #2
 8000e70:	1b9b      	subs	r3, r3, r6
 8000e72:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e76:	2100      	movs	r1, #0
 8000e78:	b11d      	cbz	r5, 8000e82 <__udivmoddi4+0xa6>
 8000e7a:	40d3      	lsrs	r3, r2
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	e9c5 3200 	strd	r3, r2, [r5]
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d905      	bls.n	8000e96 <__udivmoddi4+0xba>
 8000e8a:	b10d      	cbz	r5, 8000e90 <__udivmoddi4+0xb4>
 8000e8c:	e9c5 0100 	strd	r0, r1, [r5]
 8000e90:	2100      	movs	r1, #0
 8000e92:	4608      	mov	r0, r1
 8000e94:	e7f5      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000e96:	fab3 f183 	clz	r1, r3
 8000e9a:	2900      	cmp	r1, #0
 8000e9c:	d146      	bne.n	8000f2c <__udivmoddi4+0x150>
 8000e9e:	42a3      	cmp	r3, r4
 8000ea0:	d302      	bcc.n	8000ea8 <__udivmoddi4+0xcc>
 8000ea2:	4290      	cmp	r0, r2
 8000ea4:	f0c0 80f0 	bcc.w	8001088 <__udivmoddi4+0x2ac>
 8000ea8:	1a86      	subs	r6, r0, r2
 8000eaa:	eb64 0303 	sbc.w	r3, r4, r3
 8000eae:	2001      	movs	r0, #1
 8000eb0:	2d00      	cmp	r5, #0
 8000eb2:	d0e6      	beq.n	8000e82 <__udivmoddi4+0xa6>
 8000eb4:	e9c5 6300 	strd	r6, r3, [r5]
 8000eb8:	e7e3      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	f040 8090 	bne.w	8000fe0 <__udivmoddi4+0x204>
 8000ec0:	eba1 040c 	sub.w	r4, r1, ip
 8000ec4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ec8:	fa1f f78c 	uxth.w	r7, ip
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ed2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ed6:	fb08 4416 	mls	r4, r8, r6, r4
 8000eda:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ede:	fb07 f006 	mul.w	r0, r7, r6
 8000ee2:	4298      	cmp	r0, r3
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x11c>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eee:	d202      	bcs.n	8000ef6 <__udivmoddi4+0x11a>
 8000ef0:	4298      	cmp	r0, r3
 8000ef2:	f200 80cd 	bhi.w	8001090 <__udivmoddi4+0x2b4>
 8000ef6:	4626      	mov	r6, r4
 8000ef8:	1a1c      	subs	r4, r3, r0
 8000efa:	fa1f f38e 	uxth.w	r3, lr
 8000efe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f02:	fb08 4410 	mls	r4, r8, r0, r4
 8000f06:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f0a:	fb00 f707 	mul.w	r7, r0, r7
 8000f0e:	429f      	cmp	r7, r3
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x148>
 8000f12:	eb1c 0303 	adds.w	r3, ip, r3
 8000f16:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1a:	d202      	bcs.n	8000f22 <__udivmoddi4+0x146>
 8000f1c:	429f      	cmp	r7, r3
 8000f1e:	f200 80b0 	bhi.w	8001082 <__udivmoddi4+0x2a6>
 8000f22:	4620      	mov	r0, r4
 8000f24:	1bdb      	subs	r3, r3, r7
 8000f26:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f2a:	e7a5      	b.n	8000e78 <__udivmoddi4+0x9c>
 8000f2c:	f1c1 0620 	rsb	r6, r1, #32
 8000f30:	408b      	lsls	r3, r1
 8000f32:	fa22 f706 	lsr.w	r7, r2, r6
 8000f36:	431f      	orrs	r7, r3
 8000f38:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f3c:	fa04 f301 	lsl.w	r3, r4, r1
 8000f40:	ea43 030c 	orr.w	r3, r3, ip
 8000f44:	40f4      	lsrs	r4, r6
 8000f46:	fa00 f801 	lsl.w	r8, r0, r1
 8000f4a:	0c38      	lsrs	r0, r7, #16
 8000f4c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f50:	fbb4 fef0 	udiv	lr, r4, r0
 8000f54:	fa1f fc87 	uxth.w	ip, r7
 8000f58:	fb00 441e 	mls	r4, r0, lr, r4
 8000f5c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f60:	fb0e f90c 	mul.w	r9, lr, ip
 8000f64:	45a1      	cmp	r9, r4
 8000f66:	fa02 f201 	lsl.w	r2, r2, r1
 8000f6a:	d90a      	bls.n	8000f82 <__udivmoddi4+0x1a6>
 8000f6c:	193c      	adds	r4, r7, r4
 8000f6e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f72:	f080 8084 	bcs.w	800107e <__udivmoddi4+0x2a2>
 8000f76:	45a1      	cmp	r9, r4
 8000f78:	f240 8081 	bls.w	800107e <__udivmoddi4+0x2a2>
 8000f7c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f80:	443c      	add	r4, r7
 8000f82:	eba4 0409 	sub.w	r4, r4, r9
 8000f86:	fa1f f983 	uxth.w	r9, r3
 8000f8a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f8e:	fb00 4413 	mls	r4, r0, r3, r4
 8000f92:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f96:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x1d2>
 8000f9e:	193c      	adds	r4, r7, r4
 8000fa0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000fa4:	d267      	bcs.n	8001076 <__udivmoddi4+0x29a>
 8000fa6:	45a4      	cmp	ip, r4
 8000fa8:	d965      	bls.n	8001076 <__udivmoddi4+0x29a>
 8000faa:	3b02      	subs	r3, #2
 8000fac:	443c      	add	r4, r7
 8000fae:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000fb2:	fba0 9302 	umull	r9, r3, r0, r2
 8000fb6:	eba4 040c 	sub.w	r4, r4, ip
 8000fba:	429c      	cmp	r4, r3
 8000fbc:	46ce      	mov	lr, r9
 8000fbe:	469c      	mov	ip, r3
 8000fc0:	d351      	bcc.n	8001066 <__udivmoddi4+0x28a>
 8000fc2:	d04e      	beq.n	8001062 <__udivmoddi4+0x286>
 8000fc4:	b155      	cbz	r5, 8000fdc <__udivmoddi4+0x200>
 8000fc6:	ebb8 030e 	subs.w	r3, r8, lr
 8000fca:	eb64 040c 	sbc.w	r4, r4, ip
 8000fce:	fa04 f606 	lsl.w	r6, r4, r6
 8000fd2:	40cb      	lsrs	r3, r1
 8000fd4:	431e      	orrs	r6, r3
 8000fd6:	40cc      	lsrs	r4, r1
 8000fd8:	e9c5 6400 	strd	r6, r4, [r5]
 8000fdc:	2100      	movs	r1, #0
 8000fde:	e750      	b.n	8000e82 <__udivmoddi4+0xa6>
 8000fe0:	f1c2 0320 	rsb	r3, r2, #32
 8000fe4:	fa20 f103 	lsr.w	r1, r0, r3
 8000fe8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fec:	fa24 f303 	lsr.w	r3, r4, r3
 8000ff0:	4094      	lsls	r4, r2
 8000ff2:	430c      	orrs	r4, r1
 8000ff4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ff8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ffc:	fa1f f78c 	uxth.w	r7, ip
 8001000:	fbb3 f0f8 	udiv	r0, r3, r8
 8001004:	fb08 3110 	mls	r1, r8, r0, r3
 8001008:	0c23      	lsrs	r3, r4, #16
 800100a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800100e:	fb00 f107 	mul.w	r1, r0, r7
 8001012:	4299      	cmp	r1, r3
 8001014:	d908      	bls.n	8001028 <__udivmoddi4+0x24c>
 8001016:	eb1c 0303 	adds.w	r3, ip, r3
 800101a:	f100 36ff 	add.w	r6, r0, #4294967295
 800101e:	d22c      	bcs.n	800107a <__udivmoddi4+0x29e>
 8001020:	4299      	cmp	r1, r3
 8001022:	d92a      	bls.n	800107a <__udivmoddi4+0x29e>
 8001024:	3802      	subs	r0, #2
 8001026:	4463      	add	r3, ip
 8001028:	1a5b      	subs	r3, r3, r1
 800102a:	b2a4      	uxth	r4, r4
 800102c:	fbb3 f1f8 	udiv	r1, r3, r8
 8001030:	fb08 3311 	mls	r3, r8, r1, r3
 8001034:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001038:	fb01 f307 	mul.w	r3, r1, r7
 800103c:	42a3      	cmp	r3, r4
 800103e:	d908      	bls.n	8001052 <__udivmoddi4+0x276>
 8001040:	eb1c 0404 	adds.w	r4, ip, r4
 8001044:	f101 36ff 	add.w	r6, r1, #4294967295
 8001048:	d213      	bcs.n	8001072 <__udivmoddi4+0x296>
 800104a:	42a3      	cmp	r3, r4
 800104c:	d911      	bls.n	8001072 <__udivmoddi4+0x296>
 800104e:	3902      	subs	r1, #2
 8001050:	4464      	add	r4, ip
 8001052:	1ae4      	subs	r4, r4, r3
 8001054:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001058:	e739      	b.n	8000ece <__udivmoddi4+0xf2>
 800105a:	4604      	mov	r4, r0
 800105c:	e6f0      	b.n	8000e40 <__udivmoddi4+0x64>
 800105e:	4608      	mov	r0, r1
 8001060:	e706      	b.n	8000e70 <__udivmoddi4+0x94>
 8001062:	45c8      	cmp	r8, r9
 8001064:	d2ae      	bcs.n	8000fc4 <__udivmoddi4+0x1e8>
 8001066:	ebb9 0e02 	subs.w	lr, r9, r2
 800106a:	eb63 0c07 	sbc.w	ip, r3, r7
 800106e:	3801      	subs	r0, #1
 8001070:	e7a8      	b.n	8000fc4 <__udivmoddi4+0x1e8>
 8001072:	4631      	mov	r1, r6
 8001074:	e7ed      	b.n	8001052 <__udivmoddi4+0x276>
 8001076:	4603      	mov	r3, r0
 8001078:	e799      	b.n	8000fae <__udivmoddi4+0x1d2>
 800107a:	4630      	mov	r0, r6
 800107c:	e7d4      	b.n	8001028 <__udivmoddi4+0x24c>
 800107e:	46d6      	mov	lr, sl
 8001080:	e77f      	b.n	8000f82 <__udivmoddi4+0x1a6>
 8001082:	4463      	add	r3, ip
 8001084:	3802      	subs	r0, #2
 8001086:	e74d      	b.n	8000f24 <__udivmoddi4+0x148>
 8001088:	4606      	mov	r6, r0
 800108a:	4623      	mov	r3, r4
 800108c:	4608      	mov	r0, r1
 800108e:	e70f      	b.n	8000eb0 <__udivmoddi4+0xd4>
 8001090:	3e02      	subs	r6, #2
 8001092:	4463      	add	r3, ip
 8001094:	e730      	b.n	8000ef8 <__udivmoddi4+0x11c>
 8001096:	bf00      	nop

08001098 <__aeabi_idiv0>:
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop

0800109c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	ed87 0a01 	vstr	s0, [r7, #4]
 80010a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80010aa:	eef0 7ae7 	vabs.f32	s15, s15
 80010ae:	eeb0 0a67 	vmov.f32	s0, s15
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 80010bc:	b590      	push	{r4, r7, lr}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	4a2e      	ldr	r2, [pc, #184]	@ (8001180 <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	61da      	str	r2, [r3, #28]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	621a      	str	r2, [r3, #32]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	@ 0x24
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2200      	movs	r2, #0
 8001102:	639a      	str	r2, [r3, #56]	@ 0x38
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	63da      	str	r2, [r3, #60]	@ 0x3c
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	641a      	str	r2, [r3, #64]	@ 0x40
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a1b      	ldr	r2, [pc, #108]	@ (8001184 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8001116:	645a      	str	r2, [r3, #68]	@ 0x44
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 800111c:	649a      	str	r2, [r3, #72]	@ 0x48
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	334c      	adds	r3, #76	@ 0x4c
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fe0c 	bl	8001d44 <_ZN3EKFC1Eii>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a17      	ldr	r2, [pc, #92]	@ (800118c <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8001130:	336c      	adds	r3, #108	@ 0x6c
 8001132:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001136:	e883 0003 	stmia.w	r3, {r0, r1}
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 800113e:	f103 048c 	add.w	r4, r3, #140	@ 0x8c
 8001142:	4613      	mov	r3, r2
 8001144:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001146:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	4a11      	ldr	r2, [pc, #68]	@ (8001194 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 800114e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a10      	ldr	r2, [pc, #64]	@ (8001198 <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8001156:	f103 04a0 	add.w	r4, r3, #160	@ 0xa0
 800115a:	4613      	mov	r3, r2
 800115c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800115e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001168:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
	// TODO Auto-generated constructor stub

}
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4618      	mov	r0, r3
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	bd90      	pop	{r4, r7, pc}
 8001180:	0800df28 	.word	0x0800df28
 8001184:	c640e400 	.word	0xc640e400
 8001188:	ffffcfc7 	.word	0xffffcfc7
 800118c:	0800de80 	.word	0x0800de80
 8001190:	0800de88 	.word	0x0800de88
 8001194:	3089705f 	.word	0x3089705f
 8001198:	0800de98 	.word	0x0800de98

0800119c <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <_ZN17AS5048A_interfaceD1Ev+0x24>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	334c      	adds	r3, #76	@ 0x4c
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 fde0 	bl	8001d74 <_ZN3EKFD1Ev>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800df28 	.word	0x0800df28

080011c4 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
}
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ffe5 	bl	800119c <_ZN17AS5048A_interfaceD1Ev>
 80011d2:	21b8      	movs	r1, #184	@ 0xb8
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f00b fc5d 	bl	800ca94 <_ZdlPvj>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 80011e4:	b5b0      	push	{r4, r5, r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 80011ee:	f107 040c 	add.w	r4, r7, #12
 80011f2:	461d      	mov	r5, r3
 80011f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011f8:	682b      	ldr	r3, [r5, #0]
 80011fa:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	e001      	b.n	800120a <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8001206:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	4619      	mov	r1, r3
 8001212:	2002      	movs	r0, #2
 8001214:	f000 fa85 	bl	8001722 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001218:	ec53 2b10 	vmov	r2, r3, d0
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fc66 	bl	8000af0 <__aeabi_d2f>
 8001224:	4602      	mov	r2, r0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8001230:	69fa      	ldr	r2, [r7, #28]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 800123c:	697a      	ldr	r2, [r7, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001242:	2201      	movs	r2, #1
 8001244:	2110      	movs	r1, #16
 8001246:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124a:	f008 fbcf 	bl	80099ec <HAL_GPIO_WritePin>
}
 800124e:	bf00      	nop
 8001250:	3720      	adds	r7, #32
 8001252:	46bd      	mov	sp, r7
 8001254:	bdb0      	pop	{r4, r5, r7, pc}
 8001256:	bf00      	nop
 8001258:	20000000 	.word	0x20000000

0800125c <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f8cb 	bl	8001400 <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f000 f8c8 	bl	8001400 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 800127a:	f000 f935 	bl	80014e8 <_ZN17AS5048A_interface6microsEv>
 800127e:	4603      	mov	r3, r0
 8001280:	461a      	mov	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8001286:	2001      	movs	r0, #1
 8001288:	f005 f890 	bl	80063ac <HAL_Delay>
	getSensorAngle();
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f000 f8b7 	bl	8001400 <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f000 f8b4 	bl	8001400 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001298:	eef0 7a40 	vmov.f32	s15, s0
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 80012a2:	f000 f921 	bl	80014e8 <_ZN17AS5048A_interface6microsEv>
 80012a6:	4603      	mov	r3, r0
 80012a8:	461a      	mov	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	336c      	adds	r3, #108	@ 0x6c
 80012be:	461a      	mov	r2, r3
 80012c0:	f000 fd78 	bl	8001db4 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 80012dc:	2300      	movs	r3, #0
 80012de:	73bb      	strb	r3, [r7, #14]
 80012e0:	e00d      	b.n	80012fe <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d002      	beq.n	80012f2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	3301      	adds	r3, #1
 80012f0:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 80012f2:	887b      	ldrh	r3, [r7, #2]
 80012f4:	085b      	lsrs	r3, r3, #1
 80012f6:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 80012f8:	7bbb      	ldrb	r3, [r7, #14]
 80012fa:	3301      	adds	r3, #1
 80012fc:	73bb      	strb	r3, [r7, #14]
 80012fe:	7bbb      	ldrb	r3, [r7, #14]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d9ee      	bls.n	80012e2 <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8001304:	7bfb      	ldrb	r3, [r7, #15]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af02      	add	r7, sp, #8
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	460b      	mov	r3, r1
 8001322:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8001324:	887b      	ldrh	r3, [r7, #2]
 8001326:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	2b00      	cmp	r3, #0
 800132e:	dd0b      	ble.n	8001348 <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691b      	ldr	r3, [r3, #16]
 8001334:	2201      	movs	r2, #1
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	b21a      	sxth	r2, r3
 800133c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001340:	4313      	orrs	r3, r2
 8001342:	b21b      	sxth	r3, r3
 8001344:	b29b      	uxth	r3, r3
 8001346:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b00      	cmp	r3, #0
 800134e:	dd11      	ble.n	8001374 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	4619      	mov	r1, r3
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ffb9 	bl	80012cc <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 800135a:	4603      	mov	r3, r0
 800135c:	461a      	mov	r2, r3
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	b21a      	sxth	r2, r3
 8001368:	897b      	ldrh	r3, [r7, #10]
 800136a:	b21b      	sxth	r3, r3
 800136c:	4313      	orrs	r3, r2
 800136e:	b21b      	sxth	r3, r3
 8001370:	b29b      	uxth	r3, r3
 8001372:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	2110      	movs	r1, #16
 8001378:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800137c:	f008 fb36 	bl	80099ec <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8001380:	f107 020c 	add.w	r2, r7, #12
 8001384:	f107 010a 	add.w	r1, r7, #10
 8001388:	2364      	movs	r3, #100	@ 0x64
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	4813      	ldr	r0, [pc, #76]	@ (80013dc <_ZN17AS5048A_interface4readEt+0xc4>)
 8001390:	f009 fbd5 	bl	800ab3e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2110      	movs	r1, #16
 8001398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800139c:	f008 fb26 	bl	80099ec <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 80013a0:	89bb      	ldrh	r3, [r7, #12]
 80013a2:	4619      	mov	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	fa41 f303 	asr.w	r3, r1, r3
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f1c3 0310 	rsb	r3, r3, #16
 80013c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c4:	fa42 f303 	asr.w	r3, r2, r3
 80013c8:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 80013ca:	89ba      	ldrh	r2, [r7, #12]
 80013cc:	89fb      	ldrh	r3, [r7, #14]
 80013ce:	4013      	ands	r3, r2
 80013d0:	b29b      	uxth	r3, r3
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3710      	adds	r7, #16
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000740 	.word	0x20000740

080013e0 <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff91 	bl	8001318 <_ZN17AS5048A_interface4readEt>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f7ff ffe9 	bl	80013e0 <_ZN17AS5048A_interface11getRawCountEv>
 800140e:	ee07 0a90 	vmov	s15, r0
 8001412:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	ed93 7a01 	vldr	s14, [r3, #4]
 800141c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001420:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8001434 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8001424:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001428:	eeb0 0a67 	vmov.f32	s0, s15
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	40c90fdb 	.word	0x40c90fdb

08001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001444:	ee07 3a90 	vmov	s15, r3
 8001448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800144c:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800146c <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8001450:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	edd3 7a07 	vldr	s15, [r3, #28]
 800145a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40c90fdb 	.word	0x40c90fdb

08001470 <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	69db      	ldr	r3, [r3, #28]
 800147c:	ee07 3a90 	vmov	s15, r3
}
 8001480:	eeb0 0a67 	vmov.f32	s0, s15
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148c:	4770      	bx	lr
	...

08001490 <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 8001490:	b580      	push	{r7, lr}
 8001492:	ed2d 8b02 	vpush	{d8}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014a0:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 80014a2:	6812      	ldr	r2, [r2, #0]
 80014a4:	fb02 f303 	mul.w	r3, r2, r3
 80014a8:	ee07 3a90 	vmov	s15, r3
 80014ac:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ffdd 	bl	8001470 <_ZN17AS5048A_interface18getMechanicalAngleEv>
 80014b6:	eef0 7a40 	vmov.f32	s15, s0
 80014ba:	ee28 7a27 	vmul.f32	s14, s16, s15
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	eeb0 0a67 	vmov.f32	s0, s15
 80014cc:	f002 f814 	bl	80034f8 <_Z15_normalizeAnglef>
 80014d0:	eef0 7a40 	vmov.f32	s15, s0
}
 80014d4:	eeb0 0a67 	vmov.f32	s0, s15
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	ecbd 8b02 	vpop	{d8}
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200000a8 	.word	0x200000a8

080014e8 <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 80014ec:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_ZN17AS5048A_interface6microsEv+0x24>)
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4b07      	ldr	r3, [pc, #28]	@ (8001510 <_ZN17AS5048A_interface6microsEv+0x28>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4907      	ldr	r1, [pc, #28]	@ (8001514 <_ZN17AS5048A_interface6microsEv+0x2c>)
 80014f6:	fba1 1303 	umull	r1, r3, r1, r3
 80014fa:	0c9b      	lsrs	r3, r3, #18
 80014fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	e0001000 	.word	0xe0001000
 8001510:	200000f4 	.word	0x200000f4
 8001514:	431bde83 	.word	0x431bde83

08001518 <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ff6d 	bl	8001400 <_ZN17AS5048A_interface14getSensorAngleEv>
 8001526:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 800152a:	f7ff ffdd 	bl	80014e8 <_ZN17AS5048A_interface6microsEv>
 800152e:	4603      	mov	r3, r0
 8001530:	461a      	mov	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	edd3 7a07 	vldr	s15, [r3, #28]
 800153c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001540:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001544:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 8001548:	ed97 0a02 	vldr	s0, [r7, #8]
 800154c:	f7ff fda6 	bl	800109c <_ZSt3absf>
 8001550:	eef0 7a40 	vmov.f32	s15, s0
 8001554:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 800159c <_ZN17AS5048A_interface12updateSensorEv+0x84>
 8001558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	bfcc      	ite	gt
 8001562:	2301      	movgt	r3, #1
 8001564:	2300      	movle	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	d00f      	beq.n	800158c <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001570:	edd7 7a02 	vldr	s15, [r7, #8]
 8001574:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157c:	dd02      	ble.n	8001584 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 800157e:	f04f 32ff 	mov.w	r2, #4294967295
 8001582:	e000      	b.n	8001586 <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001584:	2201      	movs	r2, #1
 8001586:	441a      	add	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40a0d97c 	.word	0x40a0d97c

080015a0 <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 80015a0:	b5b0      	push	{r4, r5, r7, lr}
 80015a2:	b08a      	sub	sp, #40	@ 0x28
 80015a4:	af02      	add	r7, sp, #8
 80015a6:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 80015a8:	4b3f      	ldr	r3, [pc, #252]	@ (80016a8 <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 80015aa:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff43 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   		// Angle update
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015c6:	3304      	adds	r3, #4
 80015c8:	edd3 6a00 	vldr	s13, [r3]
 80015cc:	edd7 7a07 	vldr	s15, [r7, #28]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    				// Velocity remains the same
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f103 04a0 	add.w	r4, r3, #160	@ 0xa0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	338c      	adds	r3, #140	@ 0x8c
 80015fa:	f107 0210 	add.w	r2, r7, #16
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	4623      	mov	r3, r4
 8001602:	f000 fc3e 	bl	8001e82 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f103 0164 	add.w	r1, r3, #100	@ 0x64
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	33b0      	adds	r3, #176	@ 0xb0
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	329c      	adds	r2, #156	@ 0x9c
 8001622:	f107 0508 	add.w	r5, r7, #8
 8001626:	f107 0418 	add.w	r4, r7, #24
 800162a:	9201      	str	r2, [sp, #4]
 800162c:	9300      	str	r3, [sp, #0]
 800162e:	462b      	mov	r3, r5
 8001630:	4622      	mov	r2, r4
 8001632:	f000 fdb5 	bl	80021a0 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800163a:	3304      	adds	r3, #4
 800163c:	edd3 7a00 	vldr	s15, [r3]
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	4819      	ldr	r0, [pc, #100]	@ (80016ac <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 8001646:	f001 ffdd 	bl	8003604 <_ZN13LowPassFilterclEf>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	ee07 3a90 	vmov	s15, r3
 8001662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001666:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016b0 <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 800166a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	edd3 6a07 	vldr	s13, [r3, #28]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800167a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800167e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001682:	ed97 7a07 	vldr	s14, [r7, #28]
 8001686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	69da      	ldr	r2, [r3, #28]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bdb0      	pop	{r4, r5, r7, pc}
 80016a8:	3a83126f 	.word	0x3a83126f
 80016ac:	20000230 	.word	0x20000230
 80016b0:	40c90fdb 	.word	0x40c90fdb

080016b4 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	ed2d 8b02 	vpush	{d8}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c4:	ee07 3a90 	vmov	s15, r3
 80016c8:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff feb3 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 80016d2:	eef0 7a40 	vmov.f32	s15, s0
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	4809      	ldr	r0, [pc, #36]	@ (8001700 <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 80016dc:	f001 ff92 	bl	8003604 <_ZN13LowPassFilterclEf>
 80016e0:	eef0 7a40 	vmov.f32	s15, s0
 80016e4:	ee28 7a27 	vmul.f32	s14, s16, s15
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80016ee:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80016f2:	eeb0 0a67 	vmov.f32	s0, s15
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	ecbd 8b02 	vpop	{d8}
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000224 	.word	0x20000224

08001704 <_ZN17AS5048A_interface16getShaftVelocityEv>:
 * Get filtered absolute angular velocity from encoder with sensor direction
 *
 * @return absolute angular velocity with sensor direction [radians/second]
*/
float AS5048A_interface::getShaftVelocity() 
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
	return vel_prev_EKF;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001710:	ee07 3a90 	vmov	s15, r3
}
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr

08001722 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 8001722:	b5b0      	push	{r4, r5, r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7fe fec5 	bl	80004bc <__aeabi_i2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	6838      	ldr	r0, [r7, #0]
 8001738:	f7fe fec0 	bl	80004bc <__aeabi_i2d>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	ec43 2b11 	vmov	d1, r2, r3
 8001744:	ec45 4b10 	vmov	d0, r4, r5
 8001748:	f00b f9c4 	bl	800cad4 <pow>
 800174c:	eeb0 7a40 	vmov.f32	s14, s0
 8001750:	eef0 7a60 	vmov.f32	s15, s1
    }
 8001754:	eeb0 0a47 	vmov.f32	s0, s14
 8001758:	eef0 0a67 	vmov.f32	s1, s15
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001764 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	4a53      	ldr	r2, [pc, #332]	@ (80018bc <_ZN12CurrentSenseC1Ev+0x158>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3354      	adds	r3, #84	@ 0x54
 800178e:	2203      	movs	r2, #3
 8001790:	2103      	movs	r1, #3
 8001792:	4618      	mov	r0, r3
 8001794:	f000 fad6 	bl	8001d44 <_ZN3EKFC1Eii>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a49      	ldr	r2, [pc, #292]	@ (80018c0 <_ZN12CurrentSenseC1Ev+0x15c>)
 800179c:	3374      	adds	r3, #116	@ 0x74
 800179e:	ca07      	ldmia	r2, {r0, r1, r2}
 80017a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4a47      	ldr	r2, [pc, #284]	@ (80018c4 <_ZN12CurrentSenseC1Ev+0x160>)
 80017a8:	f103 04bc 	add.w	r4, r3, #188	@ 0xbc
 80017ac:	4615      	mov	r5, r2
 80017ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017b6:	682b      	ldr	r3, [r5, #0]
 80017b8:	6023      	str	r3, [r4, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a42      	ldr	r2, [pc, #264]	@ (80018c8 <_ZN12CurrentSenseC1Ev+0x164>)
 80017be:	f103 04e0 	add.w	r4, r3, #224	@ 0xe0
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	6023      	str	r3, [r4, #0]
 80017d0:	4b3e      	ldr	r3, [pc, #248]	@ (80018cc <_ZN12CurrentSenseC1Ev+0x168>)
 80017d2:	ed93 7a00 	vldr	s14, [r3]
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <_ZN12CurrentSenseC1Ev+0x16c>)
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80018d4 <_ZN12CurrentSenseC1Ev+0x170>
 80017e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80017e8:	4b3b      	ldr	r3, [pc, #236]	@ (80018d8 <_ZN12CurrentSenseC1Ev+0x174>)
 80017ea:	ed93 7a00 	vldr	s14, [r3]
 80017ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80017f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
 800181e:	4b2b      	ldr	r3, [pc, #172]	@ (80018cc <_ZN12CurrentSenseC1Ev+0x168>)
 8001820:	ed93 7a00 	vldr	s14, [r3]
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <_ZN12CurrentSenseC1Ev+0x16c>)
 8001826:	edd3 7a00 	vldr	s15, [r3]
 800182a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800182e:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80018d4 <_ZN12CurrentSenseC1Ev+0x170>
 8001832:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <_ZN12CurrentSenseC1Ev+0x174>)
 8001838:	ed93 7a00 	vldr	s14, [r3]
 800183c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001840:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001844:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	edc3 7a45 	vstr	s15, [r3, #276]	@ 0x114
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
 800186c:	4b17      	ldr	r3, [pc, #92]	@ (80018cc <_ZN12CurrentSenseC1Ev+0x168>)
 800186e:	ed93 7a00 	vldr	s14, [r3]
 8001872:	4b17      	ldr	r3, [pc, #92]	@ (80018d0 <_ZN12CurrentSenseC1Ev+0x16c>)
 8001874:	edd3 7a00 	vldr	s15, [r3]
 8001878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800187c:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80018d4 <_ZN12CurrentSenseC1Ev+0x170>
 8001880:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001884:	4b14      	ldr	r3, [pc, #80]	@ (80018d8 <_ZN12CurrentSenseC1Ev+0x174>)
 8001886:	ed93 7a00 	vldr	s14, [r3]
 800188a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800188e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	edc3 7a49 	vstr	s15, [r3, #292]	@ 0x124
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a0f      	ldr	r2, [pc, #60]	@ (80018dc <_ZN12CurrentSenseC1Ev+0x178>)
 80018a0:	f503 7494 	add.w	r4, r3, #296	@ 0x128
 80018a4:	4615      	mov	r5, r2
 80018a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ae:	682b      	ldr	r3, [r5, #0]
 80018b0:	6023      	str	r3, [r4, #0]
{
	
}
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bdb0      	pop	{r4, r5, r7, pc}
 80018bc:	0800df38 	.word	0x0800df38
 80018c0:	0800dea8 	.word	0x0800dea8
 80018c4:	0800deb4 	.word	0x0800deb4
 80018c8:	0800ded8 	.word	0x0800ded8
 80018cc:	20000098 	.word	0x20000098
 80018d0:	200000a0 	.word	0x200000a0
 80018d4:	3a03126f 	.word	0x3a03126f
 80018d8:	200000a4 	.word	0x200000a4
 80018dc:	0800defc 	.word	0x0800defc

080018e0 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	4a06      	ldr	r2, [pc, #24]	@ (8001904 <_ZN12CurrentSenseD1Ev+0x24>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3354      	adds	r3, #84	@ 0x54
 80018f2:	4618      	mov	r0, r3
 80018f4:	f000 fa3e 	bl	8001d74 <_ZN3EKFD1Ev>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	0800df38 	.word	0x0800df38

08001908 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
}
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe5 	bl	80018e0 <_ZN12CurrentSenseD1Ev>
 8001916:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f00b f8ba 	bl	800ca94 <_ZdlPvj>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	ed87 0a02 	vstr	s0, [r7, #8]
 8001938:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	3304      	adds	r3, #4
 8001940:	2201      	movs	r2, #1
 8001942:	4619      	mov	r1, r3
 8001944:	4812      	ldr	r0, [pc, #72]	@ (8001990 <_ZN12CurrentSense16initCurrentsenseEff+0x64>)
 8001946:	f005 f941 	bl	8006bcc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3308      	adds	r3, #8
 800194e:	2201      	movs	r2, #1
 8001950:	4619      	mov	r1, r3
 8001952:	4810      	ldr	r0, [pc, #64]	@ (8001994 <_ZN12CurrentSense16initCurrentsenseEff+0x68>)
 8001954:	f005 f93a 	bl	8006bcc <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
	gain_a = _gain;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	631a      	str	r2, [r3, #48]	@ 0x30
	gain_b = _gain;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	635a      	str	r2, [r3, #52]	@ 0x34
	gain_c = _gain;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	639a      	str	r2, [r3, #56]	@ 0x38
	ekf_current.ekf_initialize(&_ekf_s_current, Pdiag);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f103 016c 	add.w	r1, r3, #108	@ 0x6c
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	3374      	adds	r3, #116	@ 0x74
 8001980:	461a      	mov	r2, r3
 8001982:	f000 fa17 	bl	8001db4 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200004c0 	.word	0x200004c0
 8001994:	2000052c 	.word	0x2000052c

08001998 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 8001998:	b5b0      	push	{r4, r5, r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 80019a0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019a4:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 80019a6:	6879      	ldr	r1, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	offset_ib = 0;
 80019b4:	6879      	ldr	r1, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	e9c1 2308 	strd	r2, r3, [r1, #32]
	offset_ic = 0;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	f04f 0300 	mov.w	r3, #0
 80019cc:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	e02b      	b.n	8001a2e <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fd5b 	bl	800049c <__aeabi_ui2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fc19 	bl	8000224 <__adddf3>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd48 	bl	800049c <__aeabi_ui2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fc06 	bl	8000224 <__adddf3>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		HAL_Delay(1);
 8001a22:	2001      	movs	r0, #1
 8001a24:	f004 fcc2 	bl	80063ac <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001a34:	dbcf      	blt.n	80019d6 <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b0c      	ldr	r3, [pc, #48]	@ (8001a74 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 8001a42:	f7fe fecf 	bl	80007e4 <__aeabi_ddiv>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 8001a5c:	f7fe fec2 	bl	80007e4 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
}
 8001a6a:	bf00      	nop
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	408f4000 	.word	0x408f4000

08001a78 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 8001a78:	b5b0      	push	{r4, r5, r7, lr}
 8001a7a:	b08a      	sub	sp, #40	@ 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd06 	bl	800049c <__aeabi_ui2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4620      	mov	r0, r4
 8001a96:	4629      	mov	r1, r5
 8001a98:	f7fe fbc2 	bl	8000220 <__aeabi_dsub>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	a33a      	add	r3, pc, #232	@ (adr r3, 8001b90 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fd71 	bl	8000590 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4614      	mov	r4, r2
 8001ab4:	461d      	mov	r5, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ac6:	ee17 0a90 	vmov	r0, s15
 8001aca:	f7fe fd09 	bl	80004e0 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fe85 	bl	80007e4 <__aeabi_ddiv>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f805 	bl	8000af0 <__aeabi_d2f>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7fe fcd0 	bl	800049c <__aeabi_ui2d>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4620      	mov	r0, r4
 8001b02:	4629      	mov	r1, r5
 8001b04:	f7fe fb8c 	bl	8000220 <__aeabi_dsub>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	a31f      	add	r3, pc, #124	@ (adr r3, 8001b90 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fd3b 	bl	8000590 <__aeabi_dmul>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b32:	ee17 0a90 	vmov	r0, s15
 8001b36:	f7fe fcd3 	bl	80004e0 <__aeabi_f2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe fe4f 	bl	80007e4 <__aeabi_ddiv>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7fe ffcf 	bl	8000af0 <__aeabi_d2f>
 8001b52:	4602      	mov	r2, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	649a      	str	r2, [r3, #72]	@ 0x48
//
//    current_a_prev_EKF = _ekf_s_current.x[0];
//	current_b_prev_EKF = _ekf_s_current.x[1];
//	current_c_prev_EKF = _ekf_s_current.x[2];

	return current;
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	3240      	adds	r2, #64	@ 0x40
 8001b60:	ca07      	ldmia	r2, {r0, r1, r2}
 8001b62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001b66:	69f9      	ldr	r1, [r7, #28]
 8001b68:	6a3a      	ldr	r2, [r7, #32]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6c:	ee06 1a90 	vmov	s13, r1
 8001b70:	ee07 2a10 	vmov	s14, r2
 8001b74:	ee07 3a90 	vmov	s15, r3
}
 8001b78:	eeb0 0a66 	vmov.f32	s0, s13
 8001b7c:	eef0 0a47 	vmov.f32	s1, s14
 8001b80:	eeb0 1a67 	vmov.f32	s2, s15
 8001b84:	3728      	adds	r7, #40	@ 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	66666666 	.word	0x66666666
 8001b94:	3f4a6666 	.word	0x3f4a6666

08001b98 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b08b      	sub	sp, #44	@ 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 8001ba4:	68fc      	ldr	r4, [r7, #12]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff ff66 	bl	8001a78 <_ZN12CurrentSense16getPhaseCurrentsEv>
 8001bac:	eef0 6a40 	vmov.f32	s13, s0
 8001bb0:	eeb0 7a60 	vmov.f32	s14, s1
 8001bb4:	eef0 7a41 	vmov.f32	s15, s2
 8001bb8:	edc4 6a10 	vstr	s13, [r4, #64]	@ 0x40
 8001bbc:	ed84 7a11 	vstr	s14, [r4, #68]	@ 0x44
 8001bc0:	edc4 7a12 	vstr	s15, [r4, #72]	@ 0x48
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001bd0:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c74 <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 8001bd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 8001bde:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001c78 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 8001be2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bea:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 8001bee:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bf2:	f001 fba1 	bl	8003338 <_Z4_cosf>
 8001bf6:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 8001bfa:	ed97 0a02 	vldr	s0, [r7, #8]
 8001bfe:	f001 fb23 	bl	8003248 <_Z4_sinf>
 8001c02:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 8001c06:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001c0a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c12:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	dq_current.q = i_beta  * ct - i_alpha * st;
 8001c28:	ed97 7a08 	vldr	s14, [r7, #32]
 8001c2c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c34:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	return dq_current;
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	324c      	adds	r2, #76	@ 0x4c
 8001c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c56:	e883 0003 	stmia.w	r3, {r0, r1}
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	ee07 2a10 	vmov	s14, r2
 8001c62:	ee07 3a90 	vmov	s15, r3
}
 8001c66:	eeb0 0a47 	vmov.f32	s0, s14
 8001c6a:	eef0 0a67 	vmov.f32	s1, s15
 8001c6e:	372c      	adds	r7, #44	@ 0x2c
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	bf13cd3a 	.word	0xbf13cd3a
 8001c78:	bf93cd3a 	.word	0xbf93cd3a

08001c7c <_ZN6can_fdC1Ei>:
 *      Author: WINDOWS 11
 */

#include <can_fd.h>

can_fd::can_fd(int can_id)
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
{
	motor_id = can_id;
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
}
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <_ZN6can_fd6ConfigEv>:

void can_fd::Config()
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	// Configure the filter to accept all messages (optional, adjust as needed)
	FDCAN_FilterTypeDef filterConfig;
    filterConfig.IdType = FDCAN_STANDARD_ID;       // Standard Identifier (11 bits)
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterIndex = 0;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterType = FDCAN_FILTER_MASK;
 8001cac:	2302      	movs	r3, #2
 8001cae:	613b      	str	r3, [r7, #16]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
    filterConfig.FilterID1 = 0x1;               // Accept all IDs
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	61bb      	str	r3, [r7, #24]
    filterConfig.FilterID2 = 0x7ff;               // Mask for all bits
 8001cb8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001cbc:	61fb      	str	r3, [r7, #28]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filterConfig) != HAL_OK)
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4816      	ldr	r0, [pc, #88]	@ (8001d20 <_ZN6can_fd6ConfigEv+0x84>)
 8001cc6:	f006 ff43 	bl	8008b50 <HAL_FDCAN_ConfigFilter>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	bf14      	ite	ne
 8001cd0:	2301      	movne	r3, #1
 8001cd2:	2300      	moveq	r3, #0
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <_ZN6can_fd6ConfigEv+0x42>
    {
        Error_Handler();
 8001cda:	f003 ff01 	bl	8005ae0 <Error_Handler>
    }
    // Start the FDCAN module
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001cde:	4810      	ldr	r0, [pc, #64]	@ (8001d20 <_ZN6can_fd6ConfigEv+0x84>)
 8001ce0:	f006 ff90 	bl	8008c04 <HAL_FDCAN_Start>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <_ZN6can_fd6ConfigEv+0x5c>
    {
        Error_Handler();
 8001cf4:	f003 fef4 	bl	8005ae0 <Error_Handler>
    }
    // Activate the notification for RX FIFO 0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4808      	ldr	r0, [pc, #32]	@ (8001d20 <_ZN6can_fd6ConfigEv+0x84>)
 8001cfe:	f007 f8f5 	bl	8008eec <HAL_FDCAN_ActivateNotification>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	bf14      	ite	ne
 8001d08:	2301      	movne	r3, #1
 8001d0a:	2300      	moveq	r3, #0
 8001d0c:	b2db      	uxtb	r3, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <_ZN6can_fd6ConfigEv+0x7a>
    {
        Error_Handler();
 8001d12:	f003 fee5 	bl	8005ae0 <Error_Handler>
    }
}
 8001d16:	bf00      	nop
 8001d18:	3720      	adds	r7, #32
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200006a4 	.word	0x200006a4

08001d24 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001d2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001d32:	f00a ff5f 	bl	800cbf4 <sqrtf>
 8001d36:	eef0 7a40 	vmov.f32	s15, s0
 8001d3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m) {}
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	4a07      	ldr	r2, [pc, #28]	@ (8001d70 <_ZN3EKFC1Eii+0x2c>)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	68ba      	ldr	r2, [r7, #8]
 8001d5a:	611a      	str	r2, [r3, #16]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	0800df48 	.word	0x0800df48

08001d74 <_ZN3EKFD1Ev>:

EKF::~EKF() {
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	4a04      	ldr	r2, [pc, #16]	@ (8001d90 <_ZN3EKFD1Ev+0x1c>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
    // No need for dynamic allocation cleanup here, static buffers are used now.
}
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	0800df48 	.word	0x0800df48

08001d94 <_ZN3EKFD0Ev>:
EKF::~EKF() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
}
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe9 	bl	8001d74 <_ZN3EKFD1Ev>
 8001da2:	2118      	movs	r1, #24
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f00a fe75 	bl	800ca94 <_ZdlPvj>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * Initializes the EKF
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d201      	bcs.n	8001dd0 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	e001      	b.n	8001dd4 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 8001dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f00a fe5f 	bl	800ca98 <_Znaj>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	6912      	ldr	r2, [r2, #16]
 8001dea:	fb02 f303 	mul.w	r3, r2, r3
 8001dee:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d201      	bcs.n	8001dfa <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	e001      	b.n	8001dfe <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 8001dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00a fe4a 	bl	800ca98 <_Znaj>
 8001e04:	4603      	mov	r3, r0
 8001e06:	461a      	mov	r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) {
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e02d      	b.n	8001e6e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
        for (int j = 0; j < EKF_N; ++j) {
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
 8001e16:	e01a      	b.n	8001e4e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d105      	bne.n	8001e2c <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	4413      	add	r3, r2
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	e001      	b.n	8001e30 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	6851      	ldr	r1, [r2, #4]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	6912      	ldr	r2, [r2, #16]
 8001e38:	6978      	ldr	r0, [r7, #20]
 8001e3a:	fb02 f000 	mul.w	r0, r2, r0
 8001e3e:	693a      	ldr	r2, [r7, #16]
 8001e40:	4402      	add	r2, r0
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	440a      	add	r2, r1
 8001e46:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) {
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	dbdf      	blt.n	8001e18 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	4413      	add	r3, r2
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) {
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	697a      	ldr	r2, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbcc      	blt.n	8001e12 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:

void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) {
 8001e82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e86:	b095      	sub	sp, #84	@ 0x54
 8001e88:	af04      	add	r7, sp, #16
 8001e8a:	6278      	str	r0, [r7, #36]	@ 0x24
 8001e8c:	6239      	str	r1, [r7, #32]
 8001e8e:	61fa      	str	r2, [r7, #28]
 8001e90:	61bb      	str	r3, [r7, #24]

    _float_t FPFt[EKF_N * EKF_N] = {0};
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
}
 8001e92:	466b      	mov	r3, sp
 8001e94:	461e      	mov	r6, r3
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	6818      	ldr	r0, [r3, #0]
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	69f9      	ldr	r1, [r7, #28]
 8001ea4:	f00b ff88 	bl	800ddb8 <memcpy>
    _float_t FP[EKF_N * EKF_N] = {0};
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	fb03 f102 	mul.w	r1, r3, r2
 8001eb4:	1e4b      	subs	r3, r1, #1
 8001eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001eb8:	460a      	mov	r2, r1
 8001eba:	2300      	movs	r3, #0
 8001ebc:	4614      	mov	r4, r2
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	f04f 0300 	mov.w	r3, #0
 8001ec8:	016b      	lsls	r3, r5, #5
 8001eca:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001ece:	0162      	lsls	r2, r4, #5
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	4690      	mov	r8, r2
 8001ed6:	4699      	mov	r9, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001ee4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001ee8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001eec:	460b      	mov	r3, r1
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	3307      	adds	r3, #7
 8001ef2:	08db      	lsrs	r3, r3, #3
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	ebad 0d03 	sub.w	sp, sp, r3
 8001efa:	ab04      	add	r3, sp, #16
 8001efc:	3303      	adds	r3, #3
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f06:	3901      	subs	r1, #1
 8001f08:	f04f 0200 	mov.w	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	1d1a      	adds	r2, r3, #4
 8001f10:	1e4b      	subs	r3, r1, #1
 8001f12:	e004      	b.n	8001f1e <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9c>
 8001f14:	f04f 0100 	mov.w	r1, #0
 8001f18:	6011      	str	r1, [r2, #0]
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	3204      	adds	r2, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	daf8      	bge.n	8001f14 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x92>
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 8001f22:	6a3b      	ldr	r3, [r7, #32]
 8001f24:	6858      	ldr	r0, [r3, #4]
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f2c:	6912      	ldr	r2, [r2, #16]
 8001f2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f30:	6909      	ldr	r1, [r1, #16]
 8001f32:	9102      	str	r1, [sp, #8]
 8001f34:	9201      	str	r2, [sp, #4]
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69b9      	ldr	r1, [r7, #24]
 8001f3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001f40:	f000 fcf1 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t Ft[EKF_N * EKF_N] = {0};
 8001f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4a:	6912      	ldr	r2, [r2, #16]
 8001f4c:	fb02 f103 	mul.w	r1, r2, r3
 8001f50:	1e4b      	subs	r3, r1, #1
 8001f52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f54:	460a      	mov	r2, r1
 8001f56:	2300      	movs	r3, #0
 8001f58:	613a      	str	r2, [r7, #16]
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	f04f 0200 	mov.w	r2, #0
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001f68:	4628      	mov	r0, r5
 8001f6a:	0143      	lsls	r3, r0, #5
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f72:	4620      	mov	r0, r4
 8001f74:	0142      	lsls	r2, r0, #5
 8001f76:	460a      	mov	r2, r1
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60ba      	str	r2, [r7, #8]
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	0143      	lsls	r3, r0, #5
 8001f8e:	4620      	mov	r0, r4
 8001f90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f94:	4620      	mov	r0, r4
 8001f96:	0142      	lsls	r2, r0, #5
 8001f98:	460b      	mov	r3, r1
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	3307      	adds	r3, #7
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	ebad 0d03 	sub.w	sp, sp, r3
 8001fa6:	ab04      	add	r3, sp, #16
 8001fa8:	3303      	adds	r3, #3
 8001faa:	089b      	lsrs	r3, r3, #2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fb2:	3901      	subs	r1, #1
 8001fb4:	f04f 0200 	mov.w	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	1d1a      	adds	r2, r3, #4
 8001fbc:	1e4b      	subs	r3, r1, #1
 8001fbe:	e004      	b.n	8001fca <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x148>
 8001fc0:	f04f 0100 	mov.w	r1, #0
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	3204      	adds	r2, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	daf8      	bge.n	8001fc0 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x13e>
    _transpose(F, Ft, EKF_N, EKF_N);
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	691a      	ldr	r2, [r3, #16]
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fe0:	f000 fd53 	bl	8002a8a <_ZN3EKF10_transposeEPKfPfii>
    _float_t FPFt[EKF_N * EKF_N] = {0};
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fea:	6912      	ldr	r2, [r2, #16]
 8001fec:	fb02 f103 	mul.w	r1, r2, r3
 8001ff0:	1e4b      	subs	r3, r1, #1
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ff4:	460a      	mov	r2, r1
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603a      	str	r2, [r7, #0]
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002008:	4628      	mov	r0, r5
 800200a:	0143      	lsls	r3, r0, #5
 800200c:	4620      	mov	r0, r4
 800200e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002012:	4620      	mov	r0, r4
 8002014:	0142      	lsls	r2, r0, #5
 8002016:	460a      	mov	r2, r1
 8002018:	2300      	movs	r3, #0
 800201a:	4692      	mov	sl, r2
 800201c:	469b      	mov	fp, r3
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800202a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800202e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002032:	460b      	mov	r3, r1
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	3307      	adds	r3, #7
 8002038:	08db      	lsrs	r3, r3, #3
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	ebad 0d03 	sub.w	sp, sp, r3
 8002040:	ab04      	add	r3, sp, #16
 8002042:	3303      	adds	r3, #3
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	62bb      	str	r3, [r7, #40]	@ 0x28
 800204a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800204c:	3901      	subs	r1, #1
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	1d1a      	adds	r2, r3, #4
 8002056:	1e4b      	subs	r3, r1, #1
 8002058:	e004      	b.n	8002064 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x1e2>
 800205a:	f04f 0100 	mov.w	r1, #0
 800205e:	6011      	str	r1, [r2, #0]
 8002060:	3b01      	subs	r3, #1
 8002062:	3204      	adds	r2, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	daf8      	bge.n	800205a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x1d8>
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 8002068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206a:	691b      	ldr	r3, [r3, #16]
 800206c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800206e:	6912      	ldr	r2, [r2, #16]
 8002070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002072:	6909      	ldr	r1, [r1, #16]
 8002074:	9102      	str	r1, [sp, #8]
 8002076:	9201      	str	r2, [sp, #4]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800207e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002080:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002082:	f000 fc50 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	6859      	ldr	r1, [r3, #4]
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002090:	6912      	ldr	r2, [r2, #16]
 8002092:	9201      	str	r2, [sp, #4]
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	460b      	mov	r3, r1
 8002098:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800209a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800209c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800209e:	f000 fd2a 	bl	8002af6 <_ZN3EKF7_addmatEPKfS1_Pfii>
 80020a2:	46b5      	mov	sp, r6
}
 80020a4:	bf00      	nop
 80020a6:	3744      	adds	r7, #68	@ 0x44
 80020a8:	46bd      	mov	sp, r7
 80020aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020ae <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:


void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) {
 80020ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020b2:	b08b      	sub	sp, #44	@ 0x2c
 80020b4:	af04      	add	r7, sp, #16
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
    _float_t GHP[EKF_N * EKF_N] = {0};
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);

    // Copy result back to ekf->P
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
}
 80020bc:	466b      	mov	r3, sp
 80020be:	461e      	mov	r6, r3
    _negate(GH, EKF_N, EKF_N);
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 fd58 	bl	8002b80 <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	461a      	mov	r2, r3
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 fd8b 	bl	8002bf4 <_ZN3EKF7_addeyeEPfi>
    _float_t GHP[EKF_N * EKF_N] = {0};
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	6912      	ldr	r2, [r2, #16]
 80020e6:	fb02 f103 	mul.w	r1, r2, r3
 80020ea:	1e4b      	subs	r3, r1, #1
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	460a      	mov	r2, r1
 80020f0:	2300      	movs	r3, #0
 80020f2:	4690      	mov	r8, r2
 80020f4:	4699      	mov	r9, r3
 80020f6:	f04f 0200 	mov.w	r2, #0
 80020fa:	f04f 0300 	mov.w	r3, #0
 80020fe:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002102:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002106:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800210a:	460a      	mov	r2, r1
 800210c:	2300      	movs	r3, #0
 800210e:	4614      	mov	r4, r2
 8002110:	461d      	mov	r5, r3
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	016b      	lsls	r3, r5, #5
 800211c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002120:	0162      	lsls	r2, r4, #5
 8002122:	460b      	mov	r3, r1
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	3307      	adds	r3, #7
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	ebad 0d03 	sub.w	sp, sp, r3
 8002130:	ab04      	add	r3, sp, #16
 8002132:	3303      	adds	r3, #3
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	3901      	subs	r1, #1
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	1d1a      	adds	r2, r3, #4
 8002146:	1e4b      	subs	r3, r1, #1
 8002148:	e004      	b.n	8002154 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0xa6>
 800214a:	f04f 0100 	mov.w	r1, #0
 800214e:	6011      	str	r1, [r2, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	3204      	adds	r2, #4
 8002154:	2b00      	cmp	r3, #0
 8002156:	daf8      	bge.n	800214a <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x9c>
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	6858      	ldr	r0, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	6912      	ldr	r2, [r2, #16]
 8002164:	68f9      	ldr	r1, [r7, #12]
 8002166:	6909      	ldr	r1, [r1, #16]
 8002168:	9102      	str	r1, [sp, #8]
 800216a:	9201      	str	r2, [sp, #4]
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	4602      	mov	r2, r0
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 fbd6 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6858      	ldr	r0, [r3, #4]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	68fa      	ldr	r2, [r7, #12]
 8002184:	6912      	ldr	r2, [r2, #16]
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	461a      	mov	r2, r3
 800218e:	6939      	ldr	r1, [r7, #16]
 8002190:	f00b fe12 	bl	800ddb8 <memcpy>
 8002194:	46b5      	mov	sp, r6
}
 8002196:	bf00      	nop
 8002198:	371c      	adds	r7, #28
 800219a:	46bd      	mov	sp, r7
 800219c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080021a0 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:

bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) {
 80021a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021a4:	b0bf      	sub	sp, #252	@ 0xfc
 80021a6:	af04      	add	r7, sp, #16
 80021a8:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
 80021ac:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 80021b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80021b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);

    ekf_update_step3(ekf, GH);

    return true; // Success
}
 80021b8:	466b      	mov	r3, sp
 80021ba:	461e      	mov	r6, r3
    _float_t G[EKF_N * EKF_M] = {0};
 80021bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021c0:	691a      	ldr	r2, [r3, #16]
 80021c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	fb03 f102 	mul.w	r1, r3, r2
 80021cc:	1e4b      	subs	r3, r1, #1
 80021ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80021d2:	460a      	mov	r2, r1
 80021d4:	2300      	movs	r3, #0
 80021d6:	4614      	mov	r4, r2
 80021d8:	461d      	mov	r5, r3
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	016b      	lsls	r3, r5, #5
 80021e4:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80021e8:	0162      	lsls	r2, r4, #5
 80021ea:	460a      	mov	r2, r1
 80021ec:	2300      	movs	r3, #0
 80021ee:	4690      	mov	r8, r2
 80021f0:	4699      	mov	r9, r3
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80021fe:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002202:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002206:	460b      	mov	r3, r1
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	3307      	adds	r3, #7
 800220c:	08db      	lsrs	r3, r3, #3
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	ebad 0d03 	sub.w	sp, sp, r3
 8002214:	ab04      	add	r3, sp, #16
 8002216:	3303      	adds	r3, #3
 8002218:	089b      	lsrs	r3, r3, #2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002220:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8002224:	1e48      	subs	r0, r1, #1
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	1d11      	adds	r1, r2, #4
 800222e:	1e42      	subs	r2, r0, #1
 8002230:	e004      	b.n	800223c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x9c>
 8002232:	f04f 0300 	mov.w	r3, #0
 8002236:	600b      	str	r3, [r1, #0]
 8002238:	3a01      	subs	r2, #1
 800223a:	3104      	adds	r1, #4
 800223c:	2a00      	cmp	r2, #0
 800223e:	daf8      	bge.n	8002232 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x92>
    _float_t Ht[EKF_N * EKF_M] = {0};
 8002240:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002244:	691a      	ldr	r2, [r3, #16]
 8002246:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	fb03 f102 	mul.w	r1, r3, r2
 8002250:	1e4b      	subs	r3, r1, #1
 8002252:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002256:	460a      	mov	r2, r1
 8002258:	2300      	movs	r3, #0
 800225a:	4692      	mov	sl, r2
 800225c:	469b      	mov	fp, r3
 800225e:	f04f 0200 	mov.w	r2, #0
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	ea4f 134b 	mov.w	r3, fp, lsl #5
 800226a:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800226e:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8002272:	460a      	mov	r2, r1
 8002274:	2300      	movs	r3, #0
 8002276:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800227a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800227e:	f04f 0200 	mov.w	r2, #0
 8002282:	f04f 0300 	mov.w	r3, #0
 8002286:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800228a:	4628      	mov	r0, r5
 800228c:	0143      	lsls	r3, r0, #5
 800228e:	4620      	mov	r0, r4
 8002290:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002294:	4620      	mov	r0, r4
 8002296:	0142      	lsls	r2, r0, #5
 8002298:	460b      	mov	r3, r1
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	3307      	adds	r3, #7
 800229e:	08db      	lsrs	r3, r3, #3
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	ebad 0d03 	sub.w	sp, sp, r3
 80022a6:	ab04      	add	r3, sp, #16
 80022a8:	3303      	adds	r3, #3
 80022aa:	089b      	lsrs	r3, r3, #2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80022b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80022b6:	1e48      	subs	r0, r1, #1
 80022b8:	f04f 0300 	mov.w	r3, #0
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	1d11      	adds	r1, r2, #4
 80022c0:	1e42      	subs	r2, r0, #1
 80022c2:	e004      	b.n	80022ce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x12e>
 80022c4:	f04f 0300 	mov.w	r3, #0
 80022c8:	600b      	str	r3, [r1, #0]
 80022ca:	3a01      	subs	r2, #1
 80022cc:	3104      	adds	r1, #4
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	daf8      	bge.n	80022c4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x124>
    _transpose(H, Ht, EKF_M, EKF_N);
 80022d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022dc:	691b      	ldr	r3, [r3, #16]
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4613      	mov	r3, r2
 80022e2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80022e6:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 80022ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80022ee:	f000 fbcc 	bl	8002a8a <_ZN3EKF10_transposeEPKfPfii>
    _float_t PHt[EKF_N * EKF_M] = {0};
 80022f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	fb03 f102 	mul.w	r1, r3, r2
 8002302:	1e4b      	subs	r3, r1, #1
 8002304:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002308:	460a      	mov	r2, r1
 800230a:	2300      	movs	r3, #0
 800230c:	67ba      	str	r2, [r7, #120]	@ 0x78
 800230e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800231c:	4628      	mov	r0, r5
 800231e:	0143      	lsls	r3, r0, #5
 8002320:	4620      	mov	r0, r4
 8002322:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002326:	4620      	mov	r0, r4
 8002328:	0142      	lsls	r2, r0, #5
 800232a:	460a      	mov	r2, r1
 800232c:	2300      	movs	r3, #0
 800232e:	673a      	str	r2, [r7, #112]	@ 0x70
 8002330:	677b      	str	r3, [r7, #116]	@ 0x74
 8002332:	f04f 0200 	mov.w	r2, #0
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800233e:	4628      	mov	r0, r5
 8002340:	0143      	lsls	r3, r0, #5
 8002342:	4620      	mov	r0, r4
 8002344:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002348:	4620      	mov	r0, r4
 800234a:	0142      	lsls	r2, r0, #5
 800234c:	460b      	mov	r3, r1
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	3307      	adds	r3, #7
 8002352:	08db      	lsrs	r3, r3, #3
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	ebad 0d03 	sub.w	sp, sp, r3
 800235a:	ab04      	add	r3, sp, #16
 800235c:	3303      	adds	r3, #3
 800235e:	089b      	lsrs	r3, r3, #2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002366:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800236a:	1e48      	subs	r0, r1, #1
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	1d11      	adds	r1, r2, #4
 8002374:	1e42      	subs	r2, r0, #1
 8002376:	e004      	b.n	8002382 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	600b      	str	r3, [r1, #0]
 800237e:	3a01      	subs	r2, #1
 8002380:	3104      	adds	r1, #4
 8002382:	2a00      	cmp	r2, #0
 8002384:	daf8      	bge.n	8002378 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d8>
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8002386:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800238a:	6858      	ldr	r0, [r3, #4]
 800238c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002390:	6919      	ldr	r1, [r3, #16]
 8002392:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	9302      	str	r3, [sp, #8]
 80023a0:	9201      	str	r2, [sp, #4]
 80023a2:	9100      	str	r1, [sp, #0]
 80023a4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80023a8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80023ac:	4601      	mov	r1, r0
 80023ae:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80023b2:	f000 fab8 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t HP[EKF_M * EKF_N] = {0};
 80023b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023ba:	695a      	ldr	r2, [r3, #20]
 80023bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	fb03 f102 	mul.w	r1, r3, r2
 80023c6:	1e4b      	subs	r3, r1, #1
 80023c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80023cc:	460a      	mov	r2, r1
 80023ce:	2300      	movs	r3, #0
 80023d0:	66ba      	str	r2, [r7, #104]	@ 0x68
 80023d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	f04f 0300 	mov.w	r3, #0
 80023dc:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80023e0:	4628      	mov	r0, r5
 80023e2:	0143      	lsls	r3, r0, #5
 80023e4:	4620      	mov	r0, r4
 80023e6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023ea:	4620      	mov	r0, r4
 80023ec:	0142      	lsls	r2, r0, #5
 80023ee:	460a      	mov	r2, r1
 80023f0:	2300      	movs	r3, #0
 80023f2:	663a      	str	r2, [r7, #96]	@ 0x60
 80023f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80023f6:	f04f 0200 	mov.w	r2, #0
 80023fa:	f04f 0300 	mov.w	r3, #0
 80023fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002402:	4628      	mov	r0, r5
 8002404:	0143      	lsls	r3, r0, #5
 8002406:	4620      	mov	r0, r4
 8002408:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800240c:	4620      	mov	r0, r4
 800240e:	0142      	lsls	r2, r0, #5
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	3307      	adds	r3, #7
 8002416:	08db      	lsrs	r3, r3, #3
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	ebad 0d03 	sub.w	sp, sp, r3
 800241e:	ab04      	add	r3, sp, #16
 8002420:	3303      	adds	r3, #3
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800242a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800242e:	1e48      	subs	r0, r1, #1
 8002430:	f04f 0300 	mov.w	r3, #0
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	1d11      	adds	r1, r2, #4
 8002438:	1e42      	subs	r2, r0, #1
 800243a:	e004      	b.n	8002446 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a6>
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	600b      	str	r3, [r1, #0]
 8002442:	3a01      	subs	r2, #1
 8002444:	3104      	adds	r1, #4
 8002446:	2a00      	cmp	r2, #0
 8002448:	daf8      	bge.n	800243c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x29c>
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 800244a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800244e:	6858      	ldr	r0, [r3, #4]
 8002450:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002454:	6959      	ldr	r1, [r3, #20]
 8002456:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	9302      	str	r3, [sp, #8]
 8002464:	9201      	str	r2, [sp, #4]
 8002466:	9100      	str	r1, [sp, #0]
 8002468:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800246c:	4602      	mov	r2, r0
 800246e:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8002472:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002476:	f000 fa56 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t HpHt[EKF_M * EKF_M] = {0};
 800247a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800247e:	695a      	ldr	r2, [r3, #20]
 8002480:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	fb03 f102 	mul.w	r1, r3, r2
 800248a:	1e4b      	subs	r3, r1, #1
 800248c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002490:	460a      	mov	r2, r1
 8002492:	2300      	movs	r3, #0
 8002494:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002496:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002498:	f04f 0200 	mov.w	r2, #0
 800249c:	f04f 0300 	mov.w	r3, #0
 80024a0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80024a4:	4628      	mov	r0, r5
 80024a6:	0143      	lsls	r3, r0, #5
 80024a8:	4620      	mov	r0, r4
 80024aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024ae:	4620      	mov	r0, r4
 80024b0:	0142      	lsls	r2, r0, #5
 80024b2:	460a      	mov	r2, r1
 80024b4:	2300      	movs	r3, #0
 80024b6:	653a      	str	r2, [r7, #80]	@ 0x50
 80024b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80024ba:	f04f 0200 	mov.w	r2, #0
 80024be:	f04f 0300 	mov.w	r3, #0
 80024c2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80024c6:	4628      	mov	r0, r5
 80024c8:	0143      	lsls	r3, r0, #5
 80024ca:	4620      	mov	r0, r4
 80024cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024d0:	4620      	mov	r0, r4
 80024d2:	0142      	lsls	r2, r0, #5
 80024d4:	460b      	mov	r3, r1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3307      	adds	r3, #7
 80024da:	08db      	lsrs	r3, r3, #3
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	ebad 0d03 	sub.w	sp, sp, r3
 80024e2:	ab04      	add	r3, sp, #16
 80024e4:	3303      	adds	r3, #3
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80024ee:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80024f2:	1e48      	subs	r0, r1, #1
 80024f4:	f04f 0300 	mov.w	r3, #0
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	1d11      	adds	r1, r2, #4
 80024fc:	1e42      	subs	r2, r0, #1
 80024fe:	e004      	b.n	800250a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36a>
 8002500:	f04f 0300 	mov.w	r3, #0
 8002504:	600b      	str	r3, [r1, #0]
 8002506:	3a01      	subs	r2, #1
 8002508:	3104      	adds	r1, #4
 800250a:	2a00      	cmp	r2, #0
 800250c:	daf8      	bge.n	8002500 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 800250e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002512:	6959      	ldr	r1, [r3, #20]
 8002514:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002518:	691a      	ldr	r2, [r3, #16]
 800251a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	9302      	str	r3, [sp, #8]
 8002522:	9201      	str	r2, [sp, #4]
 8002524:	9100      	str	r1, [sp, #0]
 8002526:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800252a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800252e:	f8d7 10c8 	ldr.w	r1, [r7, #200]	@ 0xc8
 8002532:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002536:	f000 f9f6 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t HpHtR[EKF_M * EKF_M] = {0};
 800253a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800253e:	695a      	ldr	r2, [r3, #20]
 8002540:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	fb03 f102 	mul.w	r1, r3, r2
 800254a:	1e4b      	subs	r3, r1, #1
 800254c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002550:	460a      	mov	r2, r1
 8002552:	2300      	movs	r3, #0
 8002554:	64ba      	str	r2, [r7, #72]	@ 0x48
 8002556:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002564:	4628      	mov	r0, r5
 8002566:	0143      	lsls	r3, r0, #5
 8002568:	4620      	mov	r0, r4
 800256a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800256e:	4620      	mov	r0, r4
 8002570:	0142      	lsls	r2, r0, #5
 8002572:	460a      	mov	r2, r1
 8002574:	2300      	movs	r3, #0
 8002576:	643a      	str	r2, [r7, #64]	@ 0x40
 8002578:	647b      	str	r3, [r7, #68]	@ 0x44
 800257a:	f04f 0200 	mov.w	r2, #0
 800257e:	f04f 0300 	mov.w	r3, #0
 8002582:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002586:	4628      	mov	r0, r5
 8002588:	0143      	lsls	r3, r0, #5
 800258a:	4620      	mov	r0, r4
 800258c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002590:	4620      	mov	r0, r4
 8002592:	0142      	lsls	r2, r0, #5
 8002594:	460b      	mov	r3, r1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	3307      	adds	r3, #7
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	ebad 0d03 	sub.w	sp, sp, r3
 80025a2:	ab04      	add	r3, sp, #16
 80025a4:	3303      	adds	r3, #3
 80025a6:	089b      	lsrs	r3, r3, #2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80025ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80025b2:	1e48      	subs	r0, r1, #1
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	1d11      	adds	r1, r2, #4
 80025bc:	1e42      	subs	r2, r0, #1
 80025be:	e004      	b.n	80025ca <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x42a>
 80025c0:	f04f 0300 	mov.w	r3, #0
 80025c4:	600b      	str	r3, [r1, #0]
 80025c6:	3a01      	subs	r2, #1
 80025c8:	3104      	adds	r1, #4
 80025ca:	2a00      	cmp	r2, #0
 80025cc:	daf8      	bge.n	80025c0 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x420>
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 80025ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d2:	695a      	ldr	r2, [r3, #20]
 80025d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025d8:	695b      	ldr	r3, [r3, #20]
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	9200      	str	r2, [sp, #0]
 80025de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80025e2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80025e6:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 80025ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80025ee:	f000 fa82 	bl	8002af6 <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t HPHtRinv[EKF_M * EKF_M] = {0};
 80025f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80025fc:	695b      	ldr	r3, [r3, #20]
 80025fe:	fb03 f102 	mul.w	r1, r3, r2
 8002602:	1e4b      	subs	r3, r1, #1
 8002604:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002608:	460a      	mov	r2, r1
 800260a:	2300      	movs	r3, #0
 800260c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800260e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800261c:	4628      	mov	r0, r5
 800261e:	0143      	lsls	r3, r0, #5
 8002620:	4620      	mov	r0, r4
 8002622:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002626:	4620      	mov	r0, r4
 8002628:	0142      	lsls	r2, r0, #5
 800262a:	460a      	mov	r2, r1
 800262c:	2300      	movs	r3, #0
 800262e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
 8002632:	f04f 0200 	mov.w	r2, #0
 8002636:	f04f 0300 	mov.w	r3, #0
 800263a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800263e:	4628      	mov	r0, r5
 8002640:	0143      	lsls	r3, r0, #5
 8002642:	4620      	mov	r0, r4
 8002644:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002648:	4620      	mov	r0, r4
 800264a:	0142      	lsls	r2, r0, #5
 800264c:	460b      	mov	r3, r1
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	3307      	adds	r3, #7
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	00db      	lsls	r3, r3, #3
 8002656:	ebad 0d03 	sub.w	sp, sp, r3
 800265a:	ab04      	add	r3, sp, #16
 800265c:	3303      	adds	r3, #3
 800265e:	089b      	lsrs	r3, r3, #2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002666:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800266a:	1e48      	subs	r0, r1, #1
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	1d11      	adds	r1, r2, #4
 8002674:	1e42      	subs	r2, r0, #1
 8002676:	e004      	b.n	8002682 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4e2>
 8002678:	f04f 0300 	mov.w	r3, #0
 800267c:	600b      	str	r3, [r1, #0]
 800267e:	3a01      	subs	r2, #1
 8002680:	3104      	adds	r1, #4
 8002682:	2a00      	cmp	r2, #0
 8002684:	daf8      	bge.n	8002678 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4d8>
    if (!invert(HpHtR, HPHtRinv)) {
 8002686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800268a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800268e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002692:	f000 fae0 	bl	8002c56 <_ZN3EKF6invertEPKfPf>
 8002696:	4603      	mov	r3, r0
 8002698:	f083 0301 	eor.w	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x506>
        return false; // Return on inversion failure
 80026a2:	2300      	movs	r3, #0
 80026a4:	e139      	b.n	800291a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x77a>
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 80026a6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026aa:	6919      	ldr	r1, [r3, #16]
 80026ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	9302      	str	r3, [sp, #8]
 80026ba:	9201      	str	r2, [sp, #4]
 80026bc:	9100      	str	r1, [sp, #0]
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026c6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 80026ca:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80026ce:	f000 f92a 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t z_hx[EKF_M] = {0};
 80026d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80026d6:	6959      	ldr	r1, [r3, #20]
 80026d8:	1e4b      	subs	r3, r1, #1
 80026da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026de:	460a      	mov	r2, r1
 80026e0:	2300      	movs	r3, #0
 80026e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80026e6:	f04f 0200 	mov.w	r2, #0
 80026ea:	f04f 0300 	mov.w	r3, #0
 80026ee:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 80026f2:	4628      	mov	r0, r5
 80026f4:	0143      	lsls	r3, r0, #5
 80026f6:	4620      	mov	r0, r4
 80026f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80026fc:	4620      	mov	r0, r4
 80026fe:	0142      	lsls	r2, r0, #5
 8002700:	460a      	mov	r2, r1
 8002702:	2300      	movs	r3, #0
 8002704:	623a      	str	r2, [r7, #32]
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002714:	4628      	mov	r0, r5
 8002716:	0143      	lsls	r3, r0, #5
 8002718:	4620      	mov	r0, r4
 800271a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800271e:	4620      	mov	r0, r4
 8002720:	0142      	lsls	r2, r0, #5
 8002722:	460b      	mov	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	3307      	adds	r3, #7
 8002728:	08db      	lsrs	r3, r3, #3
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	ebad 0d03 	sub.w	sp, sp, r3
 8002730:	ab04      	add	r3, sp, #16
 8002732:	3303      	adds	r3, #3
 8002734:	089b      	lsrs	r3, r3, #2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800273c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002740:	3901      	subs	r1, #1
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	1d1a      	adds	r2, r3, #4
 800274a:	1e4b      	subs	r3, r1, #1
 800274c:	e004      	b.n	8002758 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x5b8>
 800274e:	f04f 0100 	mov.w	r1, #0
 8002752:	6011      	str	r1, [r2, #0]
 8002754:	3b01      	subs	r3, #1
 8002756:	3204      	adds	r2, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	daf8      	bge.n	800274e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x5ae>
    _sub(z, hx, z_hx, EKF_M);
 800275c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002768:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800276c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8002770:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002774:	f000 fd28 	bl	80031c8 <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t Gz_hx[EKF_N] = {0};
 8002778:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800277c:	6919      	ldr	r1, [r3, #16]
 800277e:	1e4b      	subs	r3, r1, #1
 8002780:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002784:	460a      	mov	r2, r1
 8002786:	2300      	movs	r3, #0
 8002788:	61ba      	str	r2, [r7, #24]
 800278a:	61fb      	str	r3, [r7, #28]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002798:	4628      	mov	r0, r5
 800279a:	0143      	lsls	r3, r0, #5
 800279c:	4620      	mov	r0, r4
 800279e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027a2:	4620      	mov	r0, r4
 80027a4:	0142      	lsls	r2, r0, #5
 80027a6:	460a      	mov	r2, r1
 80027a8:	2300      	movs	r3, #0
 80027aa:	613a      	str	r2, [r7, #16]
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80027ba:	4628      	mov	r0, r5
 80027bc:	0143      	lsls	r3, r0, #5
 80027be:	4620      	mov	r0, r4
 80027c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80027c4:	4620      	mov	r0, r4
 80027c6:	0142      	lsls	r2, r0, #5
 80027c8:	460b      	mov	r3, r1
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	3307      	adds	r3, #7
 80027ce:	08db      	lsrs	r3, r3, #3
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	ebad 0d03 	sub.w	sp, sp, r3
 80027d6:	ab04      	add	r3, sp, #16
 80027d8:	3303      	adds	r3, #3
 80027da:	089b      	lsrs	r3, r3, #2
 80027dc:	009b      	lsls	r3, r3, #2
 80027de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80027e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027e6:	3901      	subs	r1, #1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	1d1a      	adds	r2, r3, #4
 80027f0:	1e4b      	subs	r3, r1, #1
 80027f2:	e004      	b.n	80027fe <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x65e>
 80027f4:	f04f 0100 	mov.w	r1, #0
 80027f8:	6011      	str	r1, [r2, #0]
 80027fa:	3b01      	subs	r3, #1
 80027fc:	3204      	adds	r2, #4
 80027fe:	2b00      	cmp	r3, #0
 8002800:	daf8      	bge.n	80027f4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x654>
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8002802:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800280c:	6952      	ldr	r2, [r2, #20]
 800280e:	9201      	str	r2, [sp, #4]
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800281a:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 800281e:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002822:	f000 f8e8 	bl	80029f6 <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8002826:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	4613      	mov	r3, r2
 800283c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 8002840:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002844:	f000 fc94 	bl	8003170 <_ZN3EKF7_addvecEPKfS1_Pfi>
    _float_t GH[EKF_N * EKF_N] = {0};
 8002848:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002852:	6912      	ldr	r2, [r2, #16]
 8002854:	fb02 f103 	mul.w	r1, r2, r3
 8002858:	1e4b      	subs	r3, r1, #1
 800285a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800285e:	460a      	mov	r2, r1
 8002860:	2300      	movs	r3, #0
 8002862:	60ba      	str	r2, [r7, #8]
 8002864:	60fb      	str	r3, [r7, #12]
 8002866:	f04f 0200 	mov.w	r2, #0
 800286a:	f04f 0300 	mov.w	r3, #0
 800286e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002872:	4628      	mov	r0, r5
 8002874:	0143      	lsls	r3, r0, #5
 8002876:	4620      	mov	r0, r4
 8002878:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800287c:	4620      	mov	r0, r4
 800287e:	0142      	lsls	r2, r0, #5
 8002880:	460a      	mov	r2, r1
 8002882:	2300      	movs	r3, #0
 8002884:	603a      	str	r2, [r7, #0]
 8002886:	607b      	str	r3, [r7, #4]
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	f04f 0300 	mov.w	r3, #0
 8002890:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002894:	4628      	mov	r0, r5
 8002896:	0143      	lsls	r3, r0, #5
 8002898:	4620      	mov	r0, r4
 800289a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800289e:	4620      	mov	r0, r4
 80028a0:	0142      	lsls	r2, r0, #5
 80028a2:	460b      	mov	r3, r1
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	3307      	adds	r3, #7
 80028a8:	08db      	lsrs	r3, r3, #3
 80028aa:	00db      	lsls	r3, r3, #3
 80028ac:	ebad 0d03 	sub.w	sp, sp, r3
 80028b0:	ab04      	add	r3, sp, #16
 80028b2:	3303      	adds	r3, #3
 80028b4:	089b      	lsrs	r3, r3, #2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80028bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028c0:	3901      	subs	r1, #1
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	1d1a      	adds	r2, r3, #4
 80028ca:	1e4b      	subs	r3, r1, #1
 80028cc:	e004      	b.n	80028d8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x738>
 80028ce:	f04f 0100 	mov.w	r1, #0
 80028d2:	6011      	str	r1, [r2, #0]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	3204      	adds	r2, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	daf8      	bge.n	80028ce <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x72e>
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 80028dc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028e6:	6952      	ldr	r2, [r2, #20]
 80028e8:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 80028ec:	6909      	ldr	r1, [r1, #16]
 80028ee:	9102      	str	r1, [sp, #8]
 80028f0:	9201      	str	r2, [sp, #4]
 80028f2:	9300      	str	r3, [sp, #0]
 80028f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80028f8:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80028fc:	f8d7 10e0 	ldr.w	r1, [r7, #224]	@ 0xe0
 8002900:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002904:	f000 f80f 	bl	8002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8002908:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800290c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002910:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8002914:	f7ff fbcb 	bl	80020ae <_ZN3EKF16ekf_update_step3EP5ekf_tPf>
    return true; // Success
 8002918:	2301      	movs	r3, #1
 800291a:	46b5      	mov	sp, r6
}
 800291c:	4618      	mov	r0, r3
 800291e:	37ec      	adds	r7, #236	@ 0xec
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002926 <_ZN3EKF7_mulmatEPKfS1_Pfiii>:


// Linear Algebra ////////////////////////////////////////////////////////////
/// @private
void EKF::_mulmat(const _float_t * a, const _float_t * b, _float_t * c, const int arows, const int acols, const int bcols) {
 8002926:	b480      	push	{r7}
 8002928:	b089      	sub	sp, #36	@ 0x24
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < arows; ++i) {
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
 8002938:	e052      	b.n	80029e0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j = 0; j < bcols; ++j) {
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	e048      	b.n	80029d2 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i * bcols + j] = 0;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002944:	fb03 f202 	mul.w	r2, r3, r2
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	4413      	add	r3, r2
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < acols; ++k) {
 8002958:	2300      	movs	r3, #0
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	e032      	b.n	80029c4 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i * bcols + j] += a[i * acols + k] * b[k * bcols + j];
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002962:	fb03 f202 	mul.w	r2, r3, r2
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4413      	add	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	4413      	add	r3, r2
 8002970:	ed93 7a00 	vldr	s14, [r3]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002978:	fb03 f202 	mul.w	r2, r3, r2
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	4413      	add	r3, r2
 8002986:	edd3 6a00 	vldr	s13, [r3]
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298e:	fb03 f202 	mul.w	r2, r3, r2
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	edd3 7a00 	vldr	s15, [r3]
 80029a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a8:	fb03 f202 	mul.w	r2, r3, r2
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	4413      	add	r3, r2
 80029b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ba:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < acols; ++k) {
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c8:	429a      	cmp	r2, r3
 80029ca:	dbc8      	blt.n	800295e <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j = 0; j < bcols; ++j) {
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	3301      	adds	r3, #1
 80029d0:	61bb      	str	r3, [r7, #24]
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	429a      	cmp	r2, r3
 80029d8:	dbb2      	blt.n	8002940 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i = 0; i < arows; ++i) {
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3301      	adds	r3, #1
 80029de:	61fb      	str	r3, [r7, #28]
 80029e0:	69fa      	ldr	r2, [r7, #28]
 80029e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029e4:	429a      	cmp	r2, r3
 80029e6:	dba8      	blt.n	800293a <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3724      	adds	r7, #36	@ 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <_ZN3EKF7_mulvecEPKfS1_Pfii>:

/// @private
void EKF::_mulvec(const _float_t * a, const _float_t * x, _float_t * y, const int m, const int n) {
 80029f6:	b480      	push	{r7}
 80029f8:	b087      	sub	sp, #28
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	607a      	str	r2, [r7, #4]
 8002a02:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < m; ++i) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
 8002a08:	e034      	b.n	8002a74 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	4413      	add	r3, r2
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; ++j) {
 8002a18:	2300      	movs	r3, #0
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	e023      	b.n	8002a66 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i * n + j];
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4413      	add	r3, r2
 8002a26:	ed93 7a00 	vldr	s14, [r3]
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	edd3 6a00 	vldr	s13, [r3]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a3a:	fb03 f202 	mul.w	r2, r3, r2
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	68ba      	ldr	r2, [r7, #8]
 8002a46:	4413      	add	r3, r2
 8002a48:	edd3 7a00 	vldr	s15, [r3]
 8002a4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	683a      	ldr	r2, [r7, #0]
 8002a56:	4413      	add	r3, r2
 8002a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a5c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < n; ++j) {
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	3301      	adds	r3, #1
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	dbd7      	blt.n	8002a1e <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i = 0; i < m; ++i) {
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3301      	adds	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	6a3b      	ldr	r3, [r7, #32]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	dbc6      	blt.n	8002a0a <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
        }
    }
}
 8002a7c:	bf00      	nop
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr

08002a8a <_ZN3EKF10_transposeEPKfPfii>:

/// @private
void EKF::_transpose(const _float_t * a, _float_t * at, const int m, const int n) {
 8002a8a:	b480      	push	{r7}
 8002a8c:	b087      	sub	sp, #28
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	60f8      	str	r0, [r7, #12]
 8002a92:	60b9      	str	r1, [r7, #8]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < m; ++i) {
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
 8002a9c:	e020      	b.n	8002ae0 <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j = 0; j < n; ++j) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	e016      	b.n	8002ad2 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j * m + i] = a[i * n + j];
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	6a3a      	ldr	r2, [r7, #32]
 8002aa8:	fb03 f202 	mul.w	r2, r3, r2
 8002aac:	693b      	ldr	r3, [r7, #16]
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	441a      	add	r2, r3
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	6839      	ldr	r1, [r7, #0]
 8002aba:	fb03 f101 	mul.w	r1, r3, r1
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	440b      	add	r3, r1
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	440b      	add	r3, r1
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; ++j) {
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	6a3b      	ldr	r3, [r7, #32]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	dbe4      	blt.n	8002aa4 <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i = 0; i < m; ++i) {
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	3301      	adds	r3, #1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	697a      	ldr	r2, [r7, #20]
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	dbda      	blt.n	8002a9e <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
    }
}
 8002ae8:	bf00      	nop
 8002aea:	bf00      	nop
 8002aec:	371c      	adds	r7, #28
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
void EKF::_addmat(const _float_t * a, const _float_t * b, _float_t * c, const int m, const int n) {
 8002af6:	b480      	push	{r7}
 8002af8:	b087      	sub	sp, #28
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60f8      	str	r0, [r7, #12]
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < m; ++i) {
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e02f      	b.n	8002b6a <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j = 0; j < n; ++j) {
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	613b      	str	r3, [r7, #16]
 8002b0e:	e025      	b.n	8002b5c <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i * n + j] = a[i * n + j] + b[i * n + j];
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b14:	fb03 f202 	mul.w	r2, r3, r2
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	4413      	add	r3, r2
 8002b22:	ed93 7a00 	vldr	s14, [r3]
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2a:	fb03 f202 	mul.w	r2, r3, r2
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	4413      	add	r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	4413      	add	r3, r2
 8002b38:	edd3 7a00 	vldr	s15, [r3]
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b40:	fb03 f202 	mul.w	r2, r3, r2
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	683a      	ldr	r2, [r7, #0]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b52:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < n; ++j) {
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b60:	429a      	cmp	r2, r3
 8002b62:	dbd5      	blt.n	8002b10 <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i = 0; i < m; ++i) {
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	3301      	adds	r3, #1
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	dbcb      	blt.n	8002b0a <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002b72:	bf00      	nop
 8002b74:	bf00      	nop
 8002b76:	371c      	adds	r7, #28
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_ZN3EKF7_negateEPfii>:

void EKF::_negate(_float_t * a, const int m, const int n) {
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < m; ++i) {
 8002b8e:	2300      	movs	r3, #0
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e024      	b.n	8002bde <_ZN3EKF7_negateEPfii+0x5e>
        for (int j = 0; j < n; ++j) {
 8002b94:	2300      	movs	r3, #0
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	e01a      	b.n	8002bd0 <_ZN3EKF7_negateEPfii+0x50>
            a[i * n + j] = -a[i * n + j];
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	68ba      	ldr	r2, [r7, #8]
 8002baa:	4413      	add	r3, r2
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	683a      	ldr	r2, [r7, #0]
 8002bb4:	fb03 f202 	mul.w	r2, r3, r2
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	4413      	add	r3, r2
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	68ba      	ldr	r2, [r7, #8]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	eef1 7a67 	vneg.f32	s15, s15
 8002bc6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < n; ++j) {
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	613b      	str	r3, [r7, #16]
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	dbe0      	blt.n	8002b9a <_ZN3EKF7_negateEPfii+0x1a>
    for (int i = 0; i < m; ++i) {
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	dbd6      	blt.n	8002b94 <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	371c      	adds	r7, #28
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_ZN3EKF7_addeyeEPfi>:

void EKF::_addeye(_float_t * a, const int n) {
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < n; ++i) {
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
 8002c04:	e01c      	b.n	8002c40 <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i * n + i] += 1;
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	fb03 f202 	mul.w	r2, r3, r2
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	4413      	add	r3, r2
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	fb03 f202 	mul.w	r2, r3, r2
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	4413      	add	r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002c36:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; ++i) {
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	617b      	str	r3, [r7, #20]
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	dbde      	blt.n	8002c06 <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	371c      	adds	r7, #28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <_ZN3EKF6invertEPKfPf>:

bool EKF::invert(const _float_t* a, _float_t* ainv) {
 8002c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c5a:	b089      	sub	sp, #36	@ 0x24
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
    // Temporary buffer for intermediate calculations
    _float_t tmp[EKF_M];

    // Perform Cholesky decomposition and solve for inverse
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 8002c64:	466b      	mov	r3, sp
 8002c66:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6959      	ldr	r1, [r3, #20]
 8002c6c:	1e4b      	subs	r3, r1, #1
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	460a      	mov	r2, r1
 8002c72:	2300      	movs	r3, #0
 8002c74:	4690      	mov	r8, r2
 8002c76:	4699      	mov	r9, r3
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002c84:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002c88:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002c8c:	460a      	mov	r2, r1
 8002c8e:	2300      	movs	r3, #0
 8002c90:	4614      	mov	r4, r2
 8002c92:	461d      	mov	r5, r3
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	016b      	lsls	r3, r5, #5
 8002c9e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002ca2:	0162      	lsls	r2, r4, #5
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	3307      	adds	r3, #7
 8002caa:	08db      	lsrs	r3, r3, #3
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	ebad 0d03 	sub.w	sp, sp, r3
 8002cb2:	ab02      	add	r3, sp, #8
 8002cb4:	3303      	adds	r3, #3
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	695b      	ldr	r3, [r3, #20]
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	68b9      	ldr	r1, [r7, #8]
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f93c 	bl	8002f46 <_ZN3EKF7_cholslEPKfPfS2_i>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	46b5      	mov	sp, r6
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	371c      	adds	r7, #28
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002ce6 <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 8002ce6:	b590      	push	{r4, r7, lr}
 8002ce8:	b089      	sub	sp, #36	@ 0x24
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	60f8      	str	r0, [r7, #12]
 8002cee:	60b9      	str	r1, [r7, #8]
 8002cf0:	607a      	str	r2, [r7, #4]
 8002cf2:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
 8002cf8:	e06e      	b.n	8002dd8 <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	e064      	b.n	8002dca <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	fb03 f202 	mul.w	r2, r3, r2
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	4413      	add	r3, r2
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	613b      	str	r3, [r7, #16]
 8002d1c:	e020      	b.n	8002d60 <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	fb03 f202 	mul.w	r2, r3, r2
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	4413      	add	r3, r2
 8002d30:	ed93 7a00 	vldr	s14, [r3]
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	683a      	ldr	r2, [r7, #0]
 8002d38:	fb03 f202 	mul.w	r2, r3, r2
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4413      	add	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4413      	add	r3, r2
 8002d46:	edd3 7a00 	vldr	s15, [r3]
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d56:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	dadb      	bge.n	8002d1e <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 8002d66:	69fa      	ldr	r2, [r7, #28]
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d115      	bne.n	8002d9a <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 8002d6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d72:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7a:	d801      	bhi.n	8002d80 <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e030      	b.n	8002de2 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	18d4      	adds	r4, r2, r3
 8002d88:	ed97 0a05 	vldr	s0, [r7, #20]
 8002d8c:	f7fe ffca 	bl	8001d24 <_ZSt4sqrtf>
 8002d90:	eef0 7a40 	vmov.f32	s15, s0
 8002d94:	edc4 7a00 	vstr	s15, [r4]
 8002d98:	e014      	b.n	8002dc4 <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4413      	add	r3, r2
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	4413      	add	r3, r2
 8002db8:	edd7 6a05 	vldr	s13, [r7, #20]
 8002dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	db96      	blt.n	8002d00 <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	db8c      	blt.n	8002cfa <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3724      	adds	r7, #36	@ 0x24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd90      	pop	{r4, r7, pc}

08002dea <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b08a      	sub	sp, #40	@ 0x28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dfc:	e020      	b.n	8002e40 <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	e016      	b.n	8002e32 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 8002e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e08:	fb03 f202 	mul.w	r2, r3, r2
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	4413      	add	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	441a      	add	r2, r3
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e1a:	fb03 f101 	mul.w	r1, r3, r1
 8002e1e:	6a3b      	ldr	r3, [r7, #32]
 8002e20:	440b      	add	r3, r1
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	440b      	add	r3, r1
 8002e28:	6812      	ldr	r2, [r2, #0]
 8002e2a:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	623b      	str	r3, [r7, #32]
 8002e32:	6a3a      	ldr	r2, [r7, #32]
 8002e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e36:	429a      	cmp	r2, r3
 8002e38:	dbe4      	blt.n	8002e04 <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbda      	blt.n	8002dfe <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 8002e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f7ff ff49 	bl	8002ce6 <_ZN3EKF8_choldc1EPfS0_i>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	bf14      	ite	ne
 8002e5a:	2301      	movne	r3, #1
 8002e5c:	2300      	moveq	r3, #0
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e06a      	b.n	8002f3e <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
 8002e6c:	e062      	b.n	8002f34 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	4413      	add	r3, r2
 8002e76:	ed93 7a00 	vldr	s14, [r3]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e7e:	fb03 f202 	mul.w	r2, r3, r2
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e94:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e042      	b.n	8002f26 <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	e020      	b.n	8002eee <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb0:	fb03 f202 	mul.w	r2, r3, r2
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	4413      	add	r3, r2
 8002ebe:	ed93 7a00 	vldr	s14, [r3]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ec6:	fb03 f202 	mul.w	r2, r3, r2
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002edc:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ee0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ee4:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3301      	adds	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbda      	blt.n	8002eac <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	ed93 7a00 	vldr	s14, [r3]
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f06:	fb03 f202 	mul.w	r2, r3, r2
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f1c:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	3301      	adds	r3, #1
 8002f24:	61bb      	str	r3, [r7, #24]
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	dbb8      	blt.n	8002ea0 <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fa      	ldr	r2, [r7, #28]
 8002f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	db98      	blt.n	8002e6e <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}

08002f46 <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 8002f46:	b580      	push	{r7, lr}
 8002f48:	b08e      	sub	sp, #56	@ 0x38
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
 8002f52:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 8002f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff ff43 	bl	8002dea <_ZN3EKF9_choldcslEPKfPfS2_i>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf14      	ite	ne
 8002f6a:	2301      	movne	r3, #1
 8002f6c:	2300      	moveq	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e0f7      	b.n	8003168 <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 8002f78:	2300      	movs	r3, #0
 8002f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002f7c:	e019      	b.n	8002fb2 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	3301      	adds	r3, #1
 8002f82:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f84:	e00e      	b.n	8002fa4 <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f8a:	fb03 f202 	mul.w	r2, r3, r2
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	4413      	add	r3, r2
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 8002f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fa4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbec      	blt.n	8002f86 <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 8002fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fae:	3301      	adds	r3, #1
 8002fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	dbe1      	blt.n	8002f7e <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fbe:	e0a5      	b.n	800310c <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fc4:	fb03 f202 	mul.w	r2, r3, r2
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fca:	4413      	add	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	ed93 7a00 	vldr	s14, [r3]
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	edd3 7a00 	vldr	s15, [r3]
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002ff0:	fb03 f202 	mul.w	r2, r3, r2
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ff6:	4413      	add	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	3301      	adds	r3, #1
 800300a:	623b      	str	r3, [r7, #32]
 800300c:	e032      	b.n	8003074 <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 800300e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003010:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003012:	fb03 f202 	mul.w	r2, r3, r2
 8003016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	ed93 7a00 	vldr	s14, [r3]
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003028:	fb03 f202 	mul.w	r2, r3, r2
 800302c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	edd3 6a00 	vldr	s13, [r3]
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800303e:	fb03 f202 	mul.w	r2, r3, r2
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	4413      	add	r3, r2
 800304c:	edd3 7a00 	vldr	s15, [r3]
 8003050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003058:	fb03 f202 	mul.w	r2, r3, r2
 800305c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	4413      	add	r3, r2
 8003066:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306a:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 800306e:	6a3b      	ldr	r3, [r7, #32]
 8003070:	3301      	adds	r3, #1
 8003072:	623b      	str	r3, [r7, #32]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003078:	429a      	cmp	r2, r3
 800307a:	dbc8      	blt.n	800300e <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 800307c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800307e:	3301      	adds	r3, #1
 8003080:	61fb      	str	r3, [r7, #28]
 8003082:	e03c      	b.n	80030fe <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	61bb      	str	r3, [r7, #24]
 8003088:	e032      	b.n	80030f0 <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 800308a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800308e:	fb03 f202 	mul.w	r2, r3, r2
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	4413      	add	r3, r2
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	4413      	add	r3, r2
 800309c:	ed93 7a00 	vldr	s14, [r3]
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030a4:	fb03 f202 	mul.w	r2, r3, r2
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	edd3 6a00 	vldr	s13, [r3]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030ba:	fb03 f202 	mul.w	r2, r3, r2
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	4413      	add	r3, r2
 80030c8:	edd3 7a00 	vldr	s15, [r3]
 80030cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030d4:	fb03 f202 	mul.w	r2, r3, r2
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	4413      	add	r3, r2
 80030e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030e6:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	3301      	adds	r3, #1
 80030ee:	61bb      	str	r3, [r7, #24]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030f4:	429a      	cmp	r2, r3
 80030f6:	dbc8      	blt.n	800308a <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	3301      	adds	r3, #1
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003102:	429a      	cmp	r2, r3
 8003104:	dbbe      	blt.n	8003084 <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	3301      	adds	r3, #1
 800310a:	627b      	str	r3, [r7, #36]	@ 0x24
 800310c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	429a      	cmp	r2, r3
 8003112:	f6ff af55 	blt.w	8002fc0 <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 8003116:	2300      	movs	r3, #0
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e020      	b.n	800315e <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 800311c:	2300      	movs	r3, #0
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	e016      	b.n	8003150 <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	441a      	add	r2, r3
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003138:	fb03 f101 	mul.w	r1, r3, r1
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	440b      	add	r3, r1
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	440b      	add	r3, r1
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	3301      	adds	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	429a      	cmp	r2, r3
 8003156:	dbe4      	blt.n	8003122 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	3301      	adds	r3, #1
 800315c:	617b      	str	r3, [r7, #20]
 800315e:	697a      	ldr	r2, [r7, #20]
 8003160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003162:	429a      	cmp	r2, r3
 8003164:	dbda      	blt.n	800311c <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3730      	adds	r7, #48	@ 0x30
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <_ZN3EKF7_addvecEPKfS1_Pfi>:
//
/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8003170:	b480      	push	{r7}
 8003172:	b087      	sub	sp, #28
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
 800317c:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 800317e:	2300      	movs	r3, #0
 8003180:	617b      	str	r3, [r7, #20]
 8003182:	e016      	b.n	80031b2 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	68ba      	ldr	r2, [r7, #8]
 800318a:	4413      	add	r3, r2
 800318c:	ed93 7a00 	vldr	s14, [r3]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	4413      	add	r3, r2
 80031a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031a8:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3301      	adds	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a3b      	ldr	r3, [r7, #32]
 80031b6:	429a      	cmp	r2, r3
 80031b8:	dbe4      	blt.n	8003184 <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 80031ba:	bf00      	nop
 80031bc:	bf00      	nop
 80031be:	371c      	adds	r7, #28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80031d6:	2300      	movs	r3, #0
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e016      	b.n	800320a <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	4413      	add	r3, r2
 80031e4:	ed93 7a00 	vldr	s14, [r3]
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	4413      	add	r3, r2
 80031f0:	edd3 7a00 	vldr	s15, [r3]
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	4413      	add	r3, r2
 80031fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003200:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	429a      	cmp	r2, r3
 8003210:	dbe4      	blt.n	80031dc <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	371c      	adds	r7, #28
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	ed87 0a01 	vstr	s0, [r7, #4]
 800322a:	edc7 0a00 	vstr	s1, [r7]
 800322e:	edd7 0a00 	vldr	s1, [r7]
 8003232:	ed97 0a01 	vldr	s0, [r7, #4]
 8003236:	f009 fcbd 	bl	800cbb4 <fmodf>
 800323a:	eef0 7a40 	vmov.f32	s15, s0
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 8003248:	b480      	push	{r7}
 800324a:	b087      	sub	sp, #28
 800324c:	af00      	add	r7, sp, #0
 800324e:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 8003252:	edd7 7a01 	vldr	s15, [r7, #4]
 8003256:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 800332c <_Z4_sinf+0xe4>
 800325a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800325e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003262:	ee17 3a90 	vmov	r3, s15
 8003266:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0a1b      	lsrs	r3, r3, #8
 8003272:	b2db      	uxtb	r3, r3
 8003274:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b3f      	cmp	r3, #63	@ 0x3f
 800327a:	d80b      	bhi.n	8003294 <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 800327c:	4a2c      	ldr	r2, [pc, #176]	@ (8003330 <_Z4_sinf+0xe8>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	3301      	adds	r3, #1
 800328a:	4a29      	ldr	r2, [pc, #164]	@ (8003330 <_Z4_sinf+0xe8>)
 800328c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003290:	613b      	str	r3, [r7, #16]
 8003292:	e033      	b.n	80032fc <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b7f      	cmp	r3, #127	@ 0x7f
 8003298:	d80e      	bhi.n	80032b8 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80032a0:	4a23      	ldr	r2, [pc, #140]	@ (8003330 <_Z4_sinf+0xe8>)
 80032a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 80032ae:	4a20      	ldr	r2, [pc, #128]	@ (8003330 <_Z4_sinf+0xe8>)
 80032b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	e021      	b.n	80032fc <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2bbf      	cmp	r3, #191	@ 0xbf
 80032bc:	d80e      	bhi.n	80032dc <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3b80      	subs	r3, #128	@ 0x80
 80032c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003330 <_Z4_sinf+0xe8>)
 80032c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032c8:	425b      	negs	r3, r3
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3b7f      	subs	r3, #127	@ 0x7f
 80032d0:	4a17      	ldr	r2, [pc, #92]	@ (8003330 <_Z4_sinf+0xe8>)
 80032d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032d6:	425b      	negs	r3, r3
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	e00f      	b.n	80032fc <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80032e2:	4a13      	ldr	r2, [pc, #76]	@ (8003330 <_Z4_sinf+0xe8>)
 80032e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032e8:	425b      	negs	r3, r3
 80032ea:	617b      	str	r3, [r7, #20]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80032f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003330 <_Z4_sinf+0xe8>)
 80032f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032f8:	425b      	negs	r3, r3
 80032fa:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	fb02 f303 	mul.w	r3, r2, r3
 8003308:	121a      	asrs	r2, r3, #8
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4413      	add	r3, r2
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003316:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8003334 <_Z4_sinf+0xec>
 800331a:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800331e:	eeb0 0a67 	vmov.f32	s0, s15
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	4622f983 	.word	0x4622f983
 8003330:	20000014 	.word	0x20000014
 8003334:	38000000 	.word	0x38000000

08003338 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 8003342:	edd7 7a01 	vldr	s15, [r7, #4]
 8003346:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8003390 <_Z4_cosf+0x58>
 800334a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800334e:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 8003352:	edd7 7a03 	vldr	s15, [r7, #12]
 8003356:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003394 <_Z4_cosf+0x5c>
 800335a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003362:	dd06      	ble.n	8003372 <_Z4_cosf+0x3a>
 8003364:	edd7 7a03 	vldr	s15, [r7, #12]
 8003368:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8003394 <_Z4_cosf+0x5c>
 800336c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003370:	e001      	b.n	8003376 <_Z4_cosf+0x3e>
 8003372:	edd7 7a03 	vldr	s15, [r7, #12]
 8003376:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 800337a:	ed97 0a03 	vldr	s0, [r7, #12]
 800337e:	f7ff ff63 	bl	8003248 <_Z4_sinf>
 8003382:	eef0 7a40 	vmov.f32	s15, s0
}
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	3fc90fdb 	.word	0x3fc90fdb
 8003394:	40c90fdb 	.word	0x40c90fdb

08003398 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	ed93 7a00 	vldr	s14, [r3]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	edd3 7a00 	vldr	s15, [r3]
 80033ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b6:	d501      	bpl.n	80033bc <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	e000      	b.n	80033be <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 80033bc:	687b      	ldr	r3, [r7, #4]
    }
 80033be:	4618      	mov	r0, r3
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <_Z6_atan2ff>:
// Via Odrive project
// https://github.com/odriverobotics/ODrive/blob/master/Firmware/MotorControl/utils.cpp
// This function is MIT licenced, copyright Oskar Weigl/Odrive Robotics
// The origin for Odrive atan2 is public domain. Thanks to Odrive for making
// it easy to borrow.
__attribute__((weak)) float _atan2(float y, float x) {
 80033cc:	b580      	push	{r7, lr}
 80033ce:	ed2d 8b02 	vpush	{d8}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	ed87 0a01 	vstr	s0, [r7, #4]
 80033da:	edc7 0a00 	vstr	s1, [r7]
    // a := min (|x|, |y|) / max (|x|, |y|)
    float abs_y = fabsf(y);
 80033de:	edd7 7a01 	vldr	s15, [r7, #4]
 80033e2:	eef0 7ae7 	vabs.f32	s15, s15
 80033e6:	edc7 7a04 	vstr	s15, [r7, #16]
    float abs_x = fabsf(x);
 80033ea:	edd7 7a00 	vldr	s15, [r7]
 80033ee:	eef0 7ae7 	vabs.f32	s15, s15
 80033f2:	edc7 7a03 	vstr	s15, [r7, #12]
    // inject FLT_MIN in denominator to avoid division by zero
    float a = min(abs_x, abs_y) / (max(abs_x, abs_y));
 80033f6:	f107 0210 	add.w	r2, r7, #16
 80033fa:	f107 030c 	add.w	r3, r7, #12
 80033fe:	4611      	mov	r1, r2
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ffc9 	bl	8003398 <_ZSt3minIfERKT_S2_S2_>
 8003406:	4603      	mov	r3, r0
 8003408:	ed93 8a00 	vldr	s16, [r3]
 800340c:	f107 0210 	add.w	r2, r7, #16
 8003410:	f107 030c 	add.w	r3, r7, #12
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 f8c4 	bl	80035a4 <_ZSt3maxIfERKT_S2_S2_>
 800341c:	4603      	mov	r3, r0
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003426:	edc7 7a06 	vstr	s15, [r7, #24]
    // s := a * a
    float s = a * a;
 800342a:	edd7 7a06 	vldr	s15, [r7, #24]
 800342e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003432:	edc7 7a05 	vstr	s15, [r7, #20]
    // r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a
    float r =
        ((-0.0464964749f * s + 0.15931422f) * s - 0.327622764f) * s * a + a;
 8003436:	edd7 7a05 	vldr	s15, [r7, #20]
 800343a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 80034e4 <_Z6_atan2ff+0x118>
 800343e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003442:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 80034e8 <_Z6_atan2ff+0x11c>
 8003446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800344a:	edd7 7a05 	vldr	s15, [r7, #20]
 800344e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003452:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80034ec <_Z6_atan2ff+0x120>
 8003456:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800345a:	edd7 7a05 	vldr	s15, [r7, #20]
 800345e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003462:	edd7 7a06 	vldr	s15, [r7, #24]
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
    float r =
 800346a:	ed97 7a06 	vldr	s14, [r7, #24]
 800346e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003472:	edc7 7a07 	vstr	s15, [r7, #28]
    // if |y| > |x| then r := 1.57079637 - r
    if (abs_y > abs_x) r = 1.57079637f - r;
 8003476:	ed97 7a04 	vldr	s14, [r7, #16]
 800347a:	edd7 7a03 	vldr	s15, [r7, #12]
 800347e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003486:	dd07      	ble.n	8003498 <_Z6_atan2ff+0xcc>
 8003488:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80034f0 <_Z6_atan2ff+0x124>
 800348c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003494:	edc7 7a07 	vstr	s15, [r7, #28]
    // if x < 0 then r := 3.14159274 - r
    if (x < 0.0f) r = 3.14159274f - r;
 8003498:	edd7 7a00 	vldr	s15, [r7]
 800349c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a4:	d507      	bpl.n	80034b6 <_Z6_atan2ff+0xea>
 80034a6:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80034f4 <_Z6_atan2ff+0x128>
 80034aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80034ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b2:	edc7 7a07 	vstr	s15, [r7, #28]
    // if y < 0 then r := -r
    if (y < 0.0f) r = -r;
 80034b6:	edd7 7a01 	vldr	s15, [r7, #4]
 80034ba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034c2:	d505      	bpl.n	80034d0 <_Z6_atan2ff+0x104>
 80034c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80034c8:	eef1 7a67 	vneg.f32	s15, s15
 80034cc:	edc7 7a07 	vstr	s15, [r7, #28]

    return r;
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	ee07 3a90 	vmov	s15, r3
  }
 80034d6:	eeb0 0a67 	vmov.f32	s0, s15
 80034da:	3720      	adds	r7, #32
 80034dc:	46bd      	mov	sp, r7
 80034de:	ecbd 8b02 	vpop	{d8}
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	bd3e7316 	.word	0xbd3e7316
 80034e8:	3e232344 	.word	0x3e232344
 80034ec:	3ea7be2c 	.word	0x3ea7be2c
 80034f0:	3fc90fdb 	.word	0x3fc90fdb
 80034f4:	40490fdb 	.word	0x40490fdb

080034f8 <_Z15_normalizeAnglef>:


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8003502:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800353c <_Z15_normalizeAnglef+0x44>
 8003506:	ed97 0a01 	vldr	s0, [r7, #4]
 800350a:	f7ff fe89 	bl	8003220 <_ZSt4fmodff>
 800350e:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8003512:	edd7 7a03 	vldr	s15, [r7, #12]
 8003516:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800351a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800351e:	db02      	blt.n	8003526 <_Z15_normalizeAnglef+0x2e>
 8003520:	edd7 7a03 	vldr	s15, [r7, #12]
 8003524:	e005      	b.n	8003532 <_Z15_normalizeAnglef+0x3a>
 8003526:	edd7 7a03 	vldr	s15, [r7, #12]
 800352a:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 800353c <_Z15_normalizeAnglef+0x44>
 800352e:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40c90fdb 	.word	0x40c90fdb

08003540 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	ed87 0a01 	vstr	s0, [r7, #4]
 800354a:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	ee07 3a90 	vmov	s15, r3
 8003552:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003556:	edd7 7a01 	vldr	s15, [r7, #4]
 800355a:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800355e:	eeb0 0a67 	vmov.f32	s0, s15
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	085a      	lsrs	r2, r3, #1
 800357e:	4b08      	ldr	r3, [pc, #32]	@ (80035a0 <_Z11_sqrtApproxf+0x34>)
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8003584:	ed97 7a03 	vldr	s14, [r7, #12]
 8003588:	edd7 7a01 	vldr	s15, [r7, #4]
 800358c:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8003590:	eeb0 0a67 	vmov.f32	s0, s15
 8003594:	3714      	adds	r7, #20
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	5f375a86 	.word	0x5f375a86

080035a4 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80035a4:	b480      	push	{r7}
 80035a6:	b083      	sub	sp, #12
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	ed93 7a00 	vldr	s14, [r3]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	edd3 7a00 	vldr	s15, [r3]
 80035ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c2:	d501      	bpl.n	80035c8 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	e000      	b.n	80035ca <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80035c8:	687b      	ldr	r3, [r7, #4]
    }
 80035ca:	4618      	mov	r0, r3
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_ZN13LowPassFilterC1Ef>:
#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f04f 0200 	mov.w	r2, #0
 80035ee:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 80035f0:	f000 f89a 	bl	8003728 <_ZN13LowPassFilter6microsEv>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	605a      	str	r2, [r3, #4]
}
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <_ZN13LowPassFilterclEf>:

float LowPassFilter::operator()(float x)
{
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8003610:	f000 f88a 	bl	8003728 <_ZN13LowPassFilter6microsEv>
 8003614:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev) * 1e-6f;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	ee07 3a90 	vmov	s15, r3
 8003622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003626:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8003714 <_ZN13LowPassFilterclEf+0x110>
 800362a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800362e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Handle timestamp wrap-around (CYCCNT overflow)
    if (timestamp < timestamp_prev) {
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	429a      	cmp	r2, r3
 800363a:	d21e      	bcs.n	800367a <_ZN13LowPassFilterclEf+0x76>
        // Adjust dt to account for wrap-around
        dt += (1ULL << 32) / (SystemCoreClock / 1000000U);  // Adding wrap-around duration in microseconds
 800363c:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <_ZN13LowPassFilterclEf+0x114>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	@ (800371c <_ZN13LowPassFilterclEf+0x118>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	0c9b      	lsrs	r3, r3, #18
 8003648:	2200      	movs	r2, #0
 800364a:	461c      	mov	r4, r3
 800364c:	4615      	mov	r5, r2
 800364e:	4622      	mov	r2, r4
 8003650:	462b      	mov	r3, r5
 8003652:	f04f 0000 	mov.w	r0, #0
 8003656:	f04f 0101 	mov.w	r1, #1
 800365a:	f7fd fba7 	bl	8000dac <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4610      	mov	r0, r2
 8003664:	4619      	mov	r1, r3
 8003666:	f7fd fb5b 	bl	8000d20 <__aeabi_ul2f>
 800366a:	ee07 0a10 	vmov	s14, r0
 800366e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003672:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003676:	edc7 7a05 	vstr	s15, [r7, #20]
    }

    // Ensure dt is within a reasonable range
    if (dt < 0.0f) {
 800367a:	edd7 7a05 	vldr	s15, [r7, #20]
 800367e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	d502      	bpl.n	800368e <_ZN13LowPassFilterclEf+0x8a>
        dt = 1e-3f;
 8003688:	4b25      	ldr	r3, [pc, #148]	@ (8003720 <_ZN13LowPassFilterclEf+0x11c>)
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	e010      	b.n	80036b0 <_ZN13LowPassFilterclEf+0xac>
    } else if (dt > 0.3f) {
 800368e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003692:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003724 <_ZN13LowPassFilterclEf+0x120>
 8003696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800369a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800369e:	dd07      	ble.n	80036b0 <_ZN13LowPassFilterclEf+0xac>
        // Reset the filter if dt is too large, indicating a possible error or reset condition
        y_prev = x;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	605a      	str	r2, [r3, #4]
        return x;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	e029      	b.n	8003704 <_ZN13LowPassFilterclEf+0x100>
    }

    // Low-pass filter calculation
    float alpha = Tf / (Tf + dt);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	edd3 6a00 	vldr	s13, [r3]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	ed93 7a00 	vldr	s14, [r3]
 80036bc:	edd7 7a05 	vldr	s15, [r7, #20]
 80036c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c8:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha * y_prev + (1.0f - alpha) * x;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80036d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80036d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80036de:	edd7 7a03 	vldr	s15, [r7, #12]
 80036e2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80036e6:	edd7 7a00 	vldr	s15, [r7]
 80036ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036f2:	edc7 7a02 	vstr	s15, [r7, #8]

    // Update previous output and timestamp
    y_prev = y;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]

    return y;
 8003702:	68bb      	ldr	r3, [r7, #8]
}
 8003704:	ee07 3a90 	vmov	s15, r3
 8003708:	eeb0 0a67 	vmov.f32	s0, s15
 800370c:	3718      	adds	r7, #24
 800370e:	46bd      	mov	sp, r7
 8003710:	bdb0      	pop	{r4, r5, r7, pc}
 8003712:	bf00      	nop
 8003714:	358637bd 	.word	0x358637bd
 8003718:	200000f4 	.word	0x200000f4
 800371c:	431bde83 	.word	0x431bde83
 8003720:	3a83126f 	.word	0x3a83126f
 8003724:	3e99999a 	.word	0x3e99999a

08003728 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
 */
uint32_t LowPassFilter::micros(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 800372c:	4b07      	ldr	r3, [pc, #28]	@ (800374c <_ZN13LowPassFilter6microsEv+0x24>)
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	4b07      	ldr	r3, [pc, #28]	@ (8003750 <_ZN13LowPassFilter6microsEv+0x28>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4907      	ldr	r1, [pc, #28]	@ (8003754 <_ZN13LowPassFilter6microsEv+0x2c>)
 8003736:	fba1 1303 	umull	r1, r3, r1, r3
 800373a:	0c9b      	lsrs	r3, r3, #18
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003740:	4618      	mov	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e0001000 	.word	0xe0001000
 8003750:	200000f4 	.word	0x200000f4
 8003754:	431bde83 	.word	0x431bde83

08003758 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {1.5, 0.0, 0.01, 1000.0, current_limit}; // Kp: 0.0-1.5

LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
LowPassFilter LPF_position	{0.00f}; // 1 is very slow
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d158      	bne.n	800381a <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800376e:	4293      	cmp	r3, r2
 8003770:	d153      	bne.n	800381a <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1, 0.0, 0.01, 100.0, voltage_limit};
 8003772:	4b2c      	ldr	r3, [pc, #176]	@ (8003824 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8003774:	edd3 7a00 	vldr	s15, [r3]
 8003778:	eeb0 2a67 	vmov.f32	s4, s15
 800377c:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8003828 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8003780:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 800382c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8003784:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8003788:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800378c:	4829      	ldr	r0, [pc, #164]	@ (8003834 <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 800378e:	f000 f86f 	bl	8003870 <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1, 0.0, 0.01, 100.0, voltage_limit};
 8003792:	4b24      	ldr	r3, [pc, #144]	@ (8003824 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8003794:	edd3 7a00 	vldr	s15, [r3]
 8003798:	eeb0 2a67 	vmov.f32	s4, s15
 800379c:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8003828 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80037a0:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 800382c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 80037a4:	eddf 0a22 	vldr	s1, [pc, #136]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80037a8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80037ac:	4822      	ldr	r0, [pc, #136]	@ (8003838 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 80037ae:	f000 f85f 	bl	8003870 <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {0.5, 0.0 , 0.0, 100.0, current_limit};
 80037b2:	4b22      	ldr	r3, [pc, #136]	@ (800383c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb0 2a67 	vmov.f32	s4, s15
 80037bc:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003828 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 80037c0:	ed9f 1a1b 	vldr	s2, [pc, #108]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80037c4:	eddf 0a1a 	vldr	s1, [pc, #104]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80037c8:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80037cc:	481c      	ldr	r0, [pc, #112]	@ (8003840 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 80037ce:	f000 f84f 	bl	8003870 <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {1.5, 0.0, 0.01, 1000.0, current_limit}; // Kp: 0.0-1.5
 80037d2:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <_Z41__static_initialization_and_destruction_0ii+0xe4>)
 80037d4:	edd3 7a00 	vldr	s15, [r3]
 80037d8:	eeb0 2a67 	vmov.f32	s4, s15
 80037dc:	eddf 1a19 	vldr	s3, [pc, #100]	@ 8003844 <_Z41__static_initialization_and_destruction_0ii+0xec>
 80037e0:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800382c <_Z41__static_initialization_and_destruction_0ii+0xd4>
 80037e4:	eddf 0a12 	vldr	s1, [pc, #72]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 80037e8:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80037ec:	4816      	ldr	r0, [pc, #88]	@ (8003848 <_Z41__static_initialization_and_destruction_0ii+0xf0>)
 80037ee:	f000 f83f 	bl	8003870 <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 80037f2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800384c <_Z41__static_initialization_and_destruction_0ii+0xf4>
 80037f6:	4816      	ldr	r0, [pc, #88]	@ (8003850 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 80037f8:	f7ff feed 	bl	80035d6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 80037fc:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 800384c <_Z41__static_initialization_and_destruction_0ii+0xf4>
 8003800:	4814      	ldr	r0, [pc, #80]	@ (8003854 <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8003802:	f7ff fee8 	bl	80035d6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.00f}; // 1 is very slow
 8003806:	ed9f 0a0a 	vldr	s0, [pc, #40]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 800380a:	4813      	ldr	r0, [pc, #76]	@ (8003858 <_Z41__static_initialization_and_destruction_0ii+0x100>)
 800380c:	f7ff fee3 	bl	80035d6 <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8003810:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8003830 <_Z41__static_initialization_and_destruction_0ii+0xd8>
 8003814:	4811      	ldr	r0, [pc, #68]	@ (800385c <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8003816:	f7ff fede 	bl	80035d6 <_ZN13LowPassFilterC1Ef>
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
 8003822:	bf00      	nop
 8003824:	200000b0 	.word	0x200000b0
 8003828:	42c80000 	.word	0x42c80000
 800382c:	3c23d70a 	.word	0x3c23d70a
 8003830:	00000000 	.word	0x00000000
 8003834:	2000017c 	.word	0x2000017c
 8003838:	200001a0 	.word	0x200001a0
 800383c:	200000b4 	.word	0x200000b4
 8003840:	200001c4 	.word	0x200001c4
 8003844:	447a0000 	.word	0x447a0000
 8003848:	200001e8 	.word	0x200001e8
 800384c:	3dcccccd 	.word	0x3dcccccd
 8003850:	2000020c 	.word	0x2000020c
 8003854:	20000218 	.word	0x20000218
 8003858:	20000224 	.word	0x20000224
 800385c:	20000230 	.word	0x20000230

08003860 <_GLOBAL__sub_I_CurrentSense_resistance>:
 8003860:	b580      	push	{r7, lr}
 8003862:	af00      	add	r7, sp, #0
 8003864:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003868:	2001      	movs	r0, #1
 800386a:	f7ff ff75 	bl	8003758 <_Z41__static_initialization_and_destruction_0ii>
 800386e:	bd80      	pop	{r7, pc}

08003870 <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	6178      	str	r0, [r7, #20]
 8003878:	ed87 0a04 	vstr	s0, [r7, #16]
 800387c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003880:	ed87 1a02 	vstr	s2, [r7, #8]
 8003884:	edc7 1a01 	vstr	s3, [r7, #4]
 8003888:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	601a      	str	r2, [r3, #0]
    , I(I)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	605a      	str	r2, [r3, #4]
    , D(D)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f04f 0200 	mov.w	r2, #0
 80038b0:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f04f 0200 	mov.w	r2, #0
 80038b8:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 80038c2:	f000 f91d 	bl	8003b00 <_ZN13PIDController6microsEv>
 80038c6:	4602      	mov	r2, r0
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	621a      	str	r2, [r3, #32]
}
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	4618      	mov	r0, r3
 80038d0:	3718      	adds	r7, #24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator()(float error)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b08a      	sub	sp, #40	@ 0x28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	ed87 0a00 	vstr	s0, [r7]
    // Calculate the time difference (Ts) from the last call
    unsigned long timestamp_now = micros();
 80038e4:	f000 f90c 	bl	8003b00 <_ZN13PIDController6microsEv>
 80038e8:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	ee07 3a90 	vmov	s15, r3
 80038f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038fa:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003af8 <_ZN13PIDControllerclEf+0x220>
 80038fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003902:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

    // Handle strange Ts values due to overflow or high-frequency issues
    if (Ts <= 0.0f || Ts > 0.5f) {
 8003906:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800390a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800390e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003912:	d908      	bls.n	8003926 <_ZN13PIDControllerclEf+0x4e>
 8003914:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003918:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800391c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	dd01      	ble.n	800392a <_ZN13PIDControllerclEf+0x52>
        // Reset Ts to a default reasonable value if it's negative or too large
        Ts = 1e-3f;
 8003926:	4b75      	ldr	r3, [pc, #468]	@ (8003afc <_ZN13PIDControllerclEf+0x224>)
 8003928:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    // Proportional part
    float proportional = P * error;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	ed97 7a00 	vldr	s14, [r7]
 8003934:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003938:	edc7 7a06 	vstr	s15, [r7, #24]

    // Integral part (Tustin transform)
    float integral = integral_prev + I * Ts * 0.5f * (error + error_prev);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	ed93 7a07 	vldr	s14, [r3, #28]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	edd3 6a01 	vldr	s13, [r3, #4]
 8003948:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800394c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003950:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8003954:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	ed93 6a05 	vldr	s12, [r3, #20]
 800395e:	edd7 7a00 	vldr	s15, [r7]
 8003962:	ee76 7a27 	vadd.f32	s15, s12, s15
 8003966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800396a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396e:	edc7 7a05 	vstr	s15, [r7, #20]
    integral = _constrain(integral, -limit, limit);  // Anti-windup
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	edd3 7a04 	vldr	s15, [r3, #16]
 8003978:	eef1 7a67 	vneg.f32	s15, s15
 800397c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003980:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d505      	bpl.n	8003996 <_ZN13PIDControllerclEf+0xbe>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003990:	eef1 7a67 	vneg.f32	s15, s15
 8003994:	e00f      	b.n	80039b6 <_ZN13PIDControllerclEf+0xde>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	edd3 7a04 	vldr	s15, [r3, #16]
 800399c:	ed97 7a05 	vldr	s14, [r7, #20]
 80039a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80039a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039a8:	dd03      	ble.n	80039b2 <_ZN13PIDControllerclEf+0xda>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80039b0:	e001      	b.n	80039b6 <_ZN13PIDControllerclEf+0xde>
 80039b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039b6:	edc7 7a05 	vstr	s15, [r7, #20]

    // Derivative part
    float derivative = D * (error - error_prev) / Ts;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80039c6:	edd7 6a00 	vldr	s13, [r7]
 80039ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80039ce:	ee67 6a27 	vmul.f32	s13, s14, s15
 80039d2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80039d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039da:	edc7 7a04 	vstr	s15, [r7, #16]

    // Combine all components
    float output = proportional + integral + derivative;
 80039de:	ed97 7a06 	vldr	s14, [r7, #24]
 80039e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80039e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80039ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f2:	edc7 7a08 	vstr	s15, [r7, #32]

    // Anti-windup - limit the output
    output = _constrain(output, -limit, limit);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80039fc:	eef1 7a67 	vneg.f32	s15, s15
 8003a00:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0c:	d505      	bpl.n	8003a1a <_ZN13PIDControllerclEf+0x142>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a14:	eef1 7a67 	vneg.f32	s15, s15
 8003a18:	e00f      	b.n	8003a3a <_ZN13PIDControllerclEf+0x162>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a20:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a2c:	dd03      	ble.n	8003a36 <_ZN13PIDControllerclEf+0x15e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	edd3 7a04 	vldr	s15, [r3, #16]
 8003a34:	e001      	b.n	8003a3a <_ZN13PIDControllerclEf+0x162>
 8003a36:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a3a:	edc7 7a08 	vstr	s15, [r7, #32]

    // If output ramp is defined, apply ramping
    if (output_ramp > 0)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a44:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4c:	dd3f      	ble.n	8003ace <_ZN13PIDControllerclEf+0x1f6>
    {
        // Limit the acceleration by ramping the output
        float output_rate = (output - output_prev) / Ts;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	edd3 7a06 	vldr	s15, [r3, #24]
 8003a54:	ed97 7a08 	vldr	s14, [r7, #32]
 8003a58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003a5c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003a60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a64:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003a6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8003a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a7a:	dd0e      	ble.n	8003a9a <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp * Ts;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	ed93 7a06 	vldr	s14, [r3, #24]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	edd3 6a03 	vldr	s13, [r3, #12]
 8003a88:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003a8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a94:	edc7 7a08 	vstr	s15, [r7, #32]
 8003a98:	e019      	b.n	8003ace <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	edd3 7a03 	vldr	s15, [r3, #12]
 8003aa0:	eef1 7a67 	vneg.f32	s15, s15
 8003aa4:	ed97 7a03 	vldr	s14, [r7, #12]
 8003aa8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ab0:	d50d      	bpl.n	8003ace <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp * Ts;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	ed93 7a06 	vldr	s14, [r3, #24]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	edd3 6a03 	vldr	s13, [r3, #12]
 8003abe:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aca:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    // Save values for the next pass
    integral_prev = integral;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a3a      	ldr	r2, [r7, #32]
 8003ad8:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	621a      	str	r2, [r3, #32]

    return output;
 8003ae6:	6a3b      	ldr	r3, [r7, #32]
 8003ae8:	ee07 3a90 	vmov	s15, r3
}
 8003aec:	eeb0 0a67 	vmov.f32	s0, s15
 8003af0:	3728      	adds	r7, #40	@ 0x28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	358637bd 	.word	0x358637bd
 8003afc:	3a83126f 	.word	0x3a83126f

08003b00 <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
    static uint32_t last_count = 0;
    static uint32_t overflow_count = 0;

    uint32_t current_count = DWT->CYCCNT;
 8003b06:	4b18      	ldr	r3, [pc, #96]	@ (8003b68 <_ZN13PIDController6microsEv+0x68>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	607b      	str	r3, [r7, #4]

    if (current_count < last_count) {
 8003b0c:	4b17      	ldr	r3, [pc, #92]	@ (8003b6c <_ZN13PIDController6microsEv+0x6c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d204      	bcs.n	8003b20 <_ZN13PIDController6microsEv+0x20>
        // Overflow detected: increment overflow_count
        overflow_count++;
 8003b16:	4b16      	ldr	r3, [pc, #88]	@ (8003b70 <_ZN13PIDController6microsEv+0x70>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	4a14      	ldr	r2, [pc, #80]	@ (8003b70 <_ZN13PIDController6microsEv+0x70>)
 8003b1e:	6013      	str	r3, [r2, #0]
    }
    last_count = current_count;
 8003b20:	4a12      	ldr	r2, [pc, #72]	@ (8003b6c <_ZN13PIDController6microsEv+0x6c>)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6013      	str	r3, [r2, #0]

    // Calculate total microseconds considering overflows
    uint32_t total_microseconds = (overflow_count * (UINT32_MAX / (SystemCoreClock / 1000000U))) +
 8003b26:	4b13      	ldr	r3, [pc, #76]	@ (8003b74 <_ZN13PIDController6microsEv+0x74>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a13      	ldr	r2, [pc, #76]	@ (8003b78 <_ZN13PIDController6microsEv+0x78>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	0c9b      	lsrs	r3, r3, #18
 8003b32:	f04f 32ff 	mov.w	r2, #4294967295
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8003b70 <_ZN13PIDController6microsEv+0x70>)
 8003b3c:	6812      	ldr	r2, [r2, #0]
 8003b3e:	fb03 f202 	mul.w	r2, r3, r2
                                  (current_count / (SystemCoreClock / 1000000U));
 8003b42:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <_ZN13PIDController6microsEv+0x74>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	490c      	ldr	r1, [pc, #48]	@ (8003b78 <_ZN13PIDController6microsEv+0x78>)
 8003b48:	fba1 1303 	umull	r1, r3, r1, r3
 8003b4c:	0c9b      	lsrs	r3, r3, #18
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	fbb1 f3f3 	udiv	r3, r1, r3
    uint32_t total_microseconds = (overflow_count * (UINT32_MAX / (SystemCoreClock / 1000000U))) +
 8003b54:	4413      	add	r3, r2
 8003b56:	603b      	str	r3, [r7, #0]

    return total_microseconds;
 8003b58:	683b      	ldr	r3, [r7, #0]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	370c      	adds	r7, #12
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e0001000 	.word	0xe0001000
 8003b6c:	2000023c 	.word	0x2000023c
 8003b70:	20000240 	.word	0x20000240
 8003b74:	200000f4 	.word	0x200000f4
 8003b78:	431bde83 	.word	0x431bde83

08003b7c <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	4a04      	ldr	r2, [pc, #16]	@ (8003b98 <_ZN11pwm_driversC1Ev+0x1c>)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	0800df58 	.word	0x0800df58

08003b9c <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	4a04      	ldr	r2, [pc, #16]	@ (8003bb8 <_ZN11pwm_driversD1Ev+0x1c>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4618      	mov	r0, r3
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr
 8003bb8:	0800df58 	.word	0x0800df58

08003bbc <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
}
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f7ff ffe9 	bl	8003b9c <_ZN11pwm_driversD1Ev>
 8003bca:	2110      	movs	r1, #16
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f008 ff61 	bl	800ca94 <_ZdlPvj>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <_ZN11pwm_drivers10initDriverEv>:

void pwm_drivers::initDriver()
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8003be4:	2100      	movs	r1, #0
 8003be6:	4807      	ldr	r0, [pc, #28]	@ (8003c04 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003be8:	f007 fcba 	bl	800b560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 8003bec:	2104      	movs	r1, #4
 8003bee:	4805      	ldr	r0, [pc, #20]	@ (8003c04 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003bf0:	f007 fcb6 	bl	800b560 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8003bf4:	2108      	movs	r1, #8
 8003bf6:	4803      	ldr	r0, [pc, #12]	@ (8003c04 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003bf8:	f007 fcb2 	bl	800b560 <HAL_TIM_PWM_Start>
}
 8003bfc:	bf00      	nop
 8003bfe:	3708      	adds	r7, #8
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	200007a4 	.word	0x200007a4

08003c08 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c14:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c18:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 8003c1c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c20:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003c78 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c28:	4b14      	ldr	r3, [pc, #80]	@ (8003c7c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c30:	ee17 2a90 	vmov	r2, s15
 8003c34:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8003c36:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c3a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003c78 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c42:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c4a:	ee17 2a90 	vmov	r2, s15
 8003c4e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8003c50:	edd7 7a00 	vldr	s15, [r7]
 8003c54:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003c78 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003c58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 2a90 	vmov	r2, s15
 8003c68:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	45610000 	.word	0x45610000
 8003c7c:	200007a4 	.word	0x200007a4

08003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>:
//	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
//	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
//}

void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b094      	sub	sp, #80	@ 0x50
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c8c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003c90:	ed87 1a00 	vstr	s2, [r7]
    // Constants
    const float MAX_DUTY_CYCLE = 0.94f;  // Maximum duty cycle limit
 8003c94:	4be7      	ldr	r3, [pc, #924]	@ (8004034 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b4>)
 8003c96:	63fb      	str	r3, [r7, #60]	@ 0x3c
    const float CENTER_OFFSET = voltage_limit / 2; // Modulation center for voltage
 8003c98:	4be7      	ldr	r3, [pc, #924]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 8003c9a:	ed93 7a00 	vldr	s14, [r3]
 8003c9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003ca2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ca6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // Normalization of the electrical angle
    angle_el = _normalizeAngle(angle_el);
 8003caa:	ed97 0a00 	vldr	s0, [r7]
 8003cae:	f7ff fc23 	bl	80034f8 <_Z15_normalizeAnglef>
 8003cb2:	ed87 0a00 	vstr	s0, [r7]

    // Calculate output voltage magnitude and adjust angle
    float Uout, iv_alpha, iv_beta;
    if (Ud) {
 8003cb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cc2:	d029      	beq.n	8003d18 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x98>
        // Both Ud and Uq are set
        Uout = _sqrtApprox(Ud * Ud + Uq * Uq) / voltage_limit;
 8003cc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cc8:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003ccc:	edd7 7a02 	vldr	s15, [r7, #8]
 8003cd0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cdc:	f7ff fc46 	bl	800356c <_Z11_sqrtApproxf>
 8003ce0:	eef0 6a40 	vmov.f32	s13, s0
 8003ce4:	4bd4      	ldr	r3, [pc, #848]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 8003ce6:	ed93 7a00 	vldr	s14, [r3]
 8003cea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cee:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        angle_el = _normalizeAngle(angle_el + _atan2(Uq, Ud));
 8003cf2:	edd7 0a01 	vldr	s1, [r7, #4]
 8003cf6:	ed97 0a02 	vldr	s0, [r7, #8]
 8003cfa:	f7ff fb67 	bl	80033cc <_Z6_atan2ff>
 8003cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8003d02:	edd7 7a00 	vldr	s15, [r7]
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0e:	f7ff fbf3 	bl	80034f8 <_Z15_normalizeAnglef>
 8003d12:	ed87 0a00 	vstr	s0, [r7]
 8003d16:	e014      	b.n	8003d42 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xc2>
    } else {
        // Only Uq is set, avoid sqrt and atan2
        Uout = Uq / voltage_limit;
 8003d18:	4bc7      	ldr	r3, [pc, #796]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 8003d1a:	ed93 7a00 	vldr	s14, [r3]
 8003d1e:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d26:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
        angle_el = _normalizeAngle(angle_el + _PI_2);
 8003d2a:	edd7 7a00 	vldr	s15, [r7]
 8003d2e:	ed9f 7ac3 	vldr	s14, [pc, #780]	@ 800403c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3bc>
 8003d32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003d36:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3a:	f7ff fbdd 	bl	80034f8 <_Z15_normalizeAnglef>
 8003d3e:	ed87 0a00 	vstr	s0, [r7]
    }

    // Sector determination
    int sector = (int)(angle_el / _PI_3) + 1;
 8003d42:	ed97 7a00 	vldr	s14, [r7]
 8003d46:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8004040 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c0>
 8003d4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d52:	ee17 3a90 	vmov	r3, s15
 8003d56:	3301      	adds	r3, #1
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34

    // Calculate duty cycles
    float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	ee07 3a90 	vmov	s15, r3
 8003d60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d64:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8004040 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c0>
 8003d68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d6c:	edd7 7a00 	vldr	s15, [r7]
 8003d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d74:	eeb0 0a67 	vmov.f32	s0, s15
 8003d78:	f7ff fa66 	bl	8003248 <_Z4_sinf>
 8003d7c:	eef0 7a40 	vmov.f32	s15, s0
 8003d80:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8004044 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 8003d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003d88:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d90:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 8003d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003da6:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8004040 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c0>
 8003daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dae:	ed97 7a00 	vldr	s14, [r7]
 8003db2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	f7ff fa45 	bl	8003248 <_Z4_sinf>
 8003dbe:	eef0 7a40 	vmov.f32	s15, s0
 8003dc2:	ed9f 7aa0 	vldr	s14, [pc, #640]	@ 8004044 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 8003dc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003dca:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dd2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    float T0 = 1 - T1 - T2; // Modulation centered around `voltage_limit / 2`
 8003dd6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dda:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003dde:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003de2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dea:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    // Adjust modulation for low voltage operation if needed
    // T0 = 0; // Uncomment if required for low voltage supply operation

    // Duty cycle times for each phase
    float Ta, Tb, Tc;
    switch (sector) {
 8003dee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003df0:	3b01      	subs	r3, #1
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	f200 80ee 	bhi.w	8003fd4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x354>
 8003df8:	a201      	add	r2, pc, #4	@ (adr r2, 8003e00 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x180>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	08003e19 	.word	0x08003e19
 8003e04:	08003e63 	.word	0x08003e63
 8003e08:	08003ead 	.word	0x08003ead
 8003e0c:	08003ef7 	.word	0x08003ef7
 8003e10:	08003f41 	.word	0x08003f41
 8003e14:	08003f8b 	.word	0x08003f8b
        case 1:
            Ta = T1 + T2 + T0 / 2;
 8003e18:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e1c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e24:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003e28:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003e2c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003e30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e34:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T2 + T0 / 2;
 8003e38:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003e3c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e44:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003e48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e4c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T0 / 2;
 8003e50:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003e54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003e60:	e0bf      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        case 2:
            Ta = T1 + T0 / 2;
 8003e62:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003e66:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e6e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e76:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T1 + T2 + T0 / 2;
 8003e7a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003e7e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003e82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e86:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003e8a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003e8e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003e92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e96:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T0 / 2;
 8003e9a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003e9e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003ea2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ea6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003eaa:	e09a      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        case 3:
            Ta = T0 / 2;
 8003eac:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003eb0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T1 + T2 + T0 / 2;
 8003ebc:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003ec0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ec8:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003ecc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003ed0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ed8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T2 + T0 / 2;
 8003edc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003ee0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003ee4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003ee8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003eec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ef0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003ef4:	e075      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        case 4:
            Ta = T0 / 2;
 8003ef6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003efa:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003efe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f02:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T1 + T0 / 2;
 8003f06:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f0a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f12:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f1a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T1 + T2 + T0 / 2;
 8003f1e:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f22:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f2a:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003f2e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003f32:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f3a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003f3e:	e050      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        case 5:
            Ta = T2 + T0 / 2;
 8003f40:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f44:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003f48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f4c:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T0 / 2;
 8003f58:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003f5c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003f60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f64:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T1 + T2 + T0 / 2;
 8003f68:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f6c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f74:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003f78:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003f7c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f84:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003f88:	e02b      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        case 6:
            Ta = T1 + T2 + T0 / 2;
 8003f8a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003f8e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f96:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8003f9a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003f9e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003fa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fa6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
            Tb = T0 / 2;
 8003faa:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003fb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
            Tc = T1 + T0 / 2;
 8003fba:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003fbe:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003fc2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fc6:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8003fca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fce:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
            break;
 8003fd2:	e006      	b.n	8003fe2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x362>
        default:
            // Error handling for invalid sector
            Ta = Tb = Tc = 1.0f / 3.0f; // Equal distribution as fallback
 8003fd4:	4b1c      	ldr	r3, [pc, #112]	@ (8004048 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>)
 8003fd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003fd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fde:	64bb      	str	r3, [r7, #72]	@ 0x48
            break;
 8003fe0:	bf00      	nop
    }

    // Calculate phase voltages
    Ua = Ta * voltage_limit;
 8003fe2:	4b15      	ldr	r3, [pc, #84]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 8003fe4:	ed93 7a00 	vldr	s14, [r3]
 8003fe8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	edc3 7a01 	vstr	s15, [r3, #4]
    Ub = Tb * voltage_limit;
 8003ff6:	4b10      	ldr	r3, [pc, #64]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 8003ff8:	ed93 7a00 	vldr	s14, [r3]
 8003ffc:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	edc3 7a02 	vstr	s15, [r3, #8]
    Uc = Tc * voltage_limit;
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3b8>)
 800400c:	ed93 7a00 	vldr	s14, [r3]
 8004010:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004014:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	edc3 7a03 	vstr	s15, [r3, #12]

    // Enforce voltage limits
    Ua = _constrain(Ua, 0.0f, voltage_limit);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	edd3 7a01 	vldr	s15, [r3, #4]
 8004024:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402c:	d50e      	bpl.n	800404c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3cc>
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	e01b      	b.n	800406c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8004034:	3f70a3d7 	.word	0x3f70a3d7
 8004038:	200000b0 	.word	0x200000b0
 800403c:	3fc90fdb 	.word	0x3fc90fdb
 8004040:	3f860a92 	.word	0x3f860a92
 8004044:	3fddb3d7 	.word	0x3fddb3d7
 8004048:	3eaaaaab 	.word	0x3eaaaaab
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004052:	4b8d      	ldr	r3, [pc, #564]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 8004054:	edd3 7a00 	vldr	s15, [r3]
 8004058:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	dd02      	ble.n	8004068 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8004062:	4b89      	ldr	r3, [pc, #548]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	e001      	b.n	800406c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	6053      	str	r3, [r2, #4]
    Ub = _constrain(Ub, 0.0f, voltage_limit);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	edd3 7a02 	vldr	s15, [r3, #8]
 8004076:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800407a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800407e:	d502      	bpl.n	8004086 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x406>
 8004080:	f04f 0300 	mov.w	r3, #0
 8004084:	e00f      	b.n	80040a6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x426>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	ed93 7a02 	vldr	s14, [r3, #8]
 800408c:	4b7e      	ldr	r3, [pc, #504]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 800408e:	edd3 7a00 	vldr	s15, [r3]
 8004092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409a:	dd02      	ble.n	80040a2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x422>
 800409c:	4b7a      	ldr	r3, [pc, #488]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	e001      	b.n	80040a6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x426>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	6093      	str	r3, [r2, #8]
    Uc = _constrain(Uc, 0.0f, voltage_limit);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	edd3 7a03 	vldr	s15, [r3, #12]
 80040b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80040b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b8:	d502      	bpl.n	80040c0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x440>
 80040ba:	f04f 0300 	mov.w	r3, #0
 80040be:	e00f      	b.n	80040e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x460>
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	ed93 7a03 	vldr	s14, [r3, #12]
 80040c6:	4b70      	ldr	r3, [pc, #448]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80040d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040d4:	dd02      	ble.n	80040dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x45c>
 80040d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	e001      	b.n	80040e0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x460>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	60d3      	str	r3, [r2, #12]

    // Ensure the total voltage is within the hardware voltage limit
    float total_voltage = Ua + Ub + Uc;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	edd3 7a02 	vldr	s15, [r3, #8]
 80040f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80040fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    if (total_voltage > voltage_limit) {
 8004102:	4b61      	ldr	r3, [pc, #388]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 8004104:	edd3 7a00 	vldr	s15, [r3]
 8004108:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800410c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004114:	dd26      	ble.n	8004164 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4e4>
        float scale_factor = voltage_limit / total_voltage;
 8004116:	4b5c      	ldr	r3, [pc, #368]	@ (8004288 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x608>)
 8004118:	edd3 6a00 	vldr	s13, [r3]
 800411c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004124:	edc7 7a08 	vstr	s15, [r7, #32]
        Ua *= scale_factor;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	ed93 7a01 	vldr	s14, [r3, #4]
 800412e:	edd7 7a08 	vldr	s15, [r7, #32]
 8004132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	edc3 7a01 	vstr	s15, [r3, #4]
        Ub *= scale_factor;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004142:	edd7 7a08 	vldr	s15, [r7, #32]
 8004146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	edc3 7a02 	vstr	s15, [r3, #8]
        Uc *= scale_factor;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	ed93 7a03 	vldr	s14, [r3, #12]
 8004156:	edd7 7a08 	vldr	s15, [r7, #32]
 800415a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	edc3 7a03 	vstr	s15, [r3, #12]
    }

    // Calculate duty cycles for PWM
    float dc_a = _constrain(Ua / voltage_power_supply, 0.0f, MAX_DUTY_CYCLE);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	edd3 6a01 	vldr	s13, [r3, #4]
 800416a:	4b48      	ldr	r3, [pc, #288]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 800416c:	ed93 7a00 	vldr	s14, [r3]
 8004170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004174:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417c:	d502      	bpl.n	8004184 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x504>
 800417e:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8004290 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x610>
 8004182:	e019      	b.n	80041b8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x538>
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	edd3 6a01 	vldr	s13, [r3, #4]
 800418a:	4b40      	ldr	r3, [pc, #256]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 800418c:	ed93 7a00 	vldr	s14, [r3]
 8004190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004194:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 8004198:	eef4 7ac7 	vcmpe.f32	s15, s14
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	dd02      	ble.n	80041a8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x528>
 80041a2:	eddf 7a3c 	vldr	s15, [pc, #240]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 80041a6:	e007      	b.n	80041b8 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x538>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	edd3 6a01 	vldr	s13, [r3, #4]
 80041ae:	4b37      	ldr	r3, [pc, #220]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 80041b0:	ed93 7a00 	vldr	s14, [r3]
 80041b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041b8:	edc7 7a07 	vstr	s15, [r7, #28]
    float dc_b = _constrain(Ub / voltage_power_supply, 0.0f, MAX_DUTY_CYCLE);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	edd3 6a02 	vldr	s13, [r3, #8]
 80041c2:	4b32      	ldr	r3, [pc, #200]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 80041c4:	ed93 7a00 	vldr	s14, [r3]
 80041c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	d502      	bpl.n	80041dc <_ZN11pwm_drivers15setPhaseVoltageEfff+0x55c>
 80041d6:	eddf 7a2e 	vldr	s15, [pc, #184]	@ 8004290 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x610>
 80041da:	e019      	b.n	8004210 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	edd3 6a02 	vldr	s13, [r3, #8]
 80041e2:	4b2a      	ldr	r3, [pc, #168]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 80041e4:	ed93 7a00 	vldr	s14, [r3]
 80041e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ec:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 80041f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	dd02      	ble.n	8004200 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80041fa:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 80041fe:	e007      	b.n	8004210 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x590>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	edd3 6a02 	vldr	s13, [r3, #8]
 8004206:	4b21      	ldr	r3, [pc, #132]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 8004208:	ed93 7a00 	vldr	s14, [r3]
 800420c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004210:	edc7 7a06 	vstr	s15, [r7, #24]
    float dc_c = _constrain(Uc / voltage_power_supply, 0.0f, MAX_DUTY_CYCLE);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	edd3 6a03 	vldr	s13, [r3, #12]
 800421a:	4b1c      	ldr	r3, [pc, #112]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 800421c:	ed93 7a00 	vldr	s14, [r3]
 8004220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004224:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422c:	d502      	bpl.n	8004234 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x5b4>
 800422e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 8004290 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x610>
 8004232:	e019      	b.n	8004268 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x5e8>
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	edd3 6a03 	vldr	s13, [r3, #12]
 800423a:	4b14      	ldr	r3, [pc, #80]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 800423c:	ed93 7a00 	vldr	s14, [r3]
 8004240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004244:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 8004248:	eef4 7ac7 	vcmpe.f32	s15, s14
 800424c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004250:	dd02      	ble.n	8004258 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x5d8>
 8004252:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8004294 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x614>
 8004256:	e007      	b.n	8004268 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x5e8>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	edd3 6a03 	vldr	s13, [r3, #12]
 800425e:	4b0b      	ldr	r3, [pc, #44]	@ (800428c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x60c>)
 8004260:	ed93 7a00 	vldr	s14, [r3]
 8004264:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004268:	edc7 7a05 	vstr	s15, [r7, #20]

    // Apply duty cycles to the hardware
    writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 800426c:	ed97 1a05 	vldr	s2, [r7, #20]
 8004270:	edd7 0a06 	vldr	s1, [r7, #24]
 8004274:	ed97 0a07 	vldr	s0, [r7, #28]
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f7ff fcc5 	bl	8003c08 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 800427e:	bf00      	nop
 8004280:	3750      	adds	r7, #80	@ 0x50
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	200000b0 	.word	0x200000b0
 800428c:	200000ac 	.word	0x200000ac
 8004290:	00000000 	.word	0x00000000
 8004294:	3f70a3d7 	.word	0x3f70a3d7

08004298 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	ed87 0a01 	vstr	s0, [r7, #4]
 80042a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80042a6:	eef0 7ae7 	vabs.f32	s15, s15
 80042aa:	eeb0 0a67 	vmov.f32	s0, s15
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	4a0f      	ldr	r2, [pc, #60]	@ (8004300 <_ZN9simpleFOCC1Ev+0x48>)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3314      	adds	r3, #20
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fc fef6 	bl	80010bc <_ZN17AS5048A_interfaceC1Ev>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	33d0      	adds	r3, #208	@ 0xd0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd fa45 	bl	8001764 <_ZN12CurrentSenseC1Ev>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7ff fc4b 	bl	8003b7c <_ZN11pwm_driversC1Ev>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a06      	ldr	r2, [pc, #24]	@ (8004304 <_ZN9simpleFOCC1Ev+0x4c>)
 80042ea:	f8c3 225c 	str.w	r2, [r3, #604]	@ 0x25c
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a04      	ldr	r2, [pc, #16]	@ (8004304 <_ZN9simpleFOCC1Ev+0x4c>)
 80042f2:	f8c3 2260 	str.w	r2, [r3, #608]	@ 0x260
{

}
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4618      	mov	r0, r3
 80042fa:	3708      	adds	r7, #8
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	0800df68 	.word	0x0800df68
 8004304:	40400000 	.word	0x40400000

08004308 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	4a0b      	ldr	r2, [pc, #44]	@ (8004340 <_ZN9simpleFOCD1Ev+0x38>)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff fc3d 	bl	8003b9c <_ZN11pwm_driversD1Ev>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	33d0      	adds	r3, #208	@ 0xd0
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fada 	bl	80018e0 <_ZN12CurrentSenseD1Ev>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	3314      	adds	r3, #20
 8004330:	4618      	mov	r0, r3
 8004332:	f7fc ff33 	bl	800119c <_ZN17AS5048A_interfaceD1Ev>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4618      	mov	r0, r3
 800433a:	3708      	adds	r7, #8
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	0800df68 	.word	0x0800df68

08004344 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
}
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f7ff ffdb 	bl	8004308 <_ZN9simpleFOCD1Ev>
 8004352:	f44f 711a 	mov.w	r1, #616	@ 0x268
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f008 fb9c 	bl	800ca94 <_ZdlPvj>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4618      	mov	r0, r3
 8004360:	3708      	adds	r7, #8
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
	driver.initDriver();
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fc30 	bl	8003bdc <_ZN11pwm_drivers10initDriverEv>
	Encoder.MagneticSensorSPI_init();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3314      	adds	r3, #20
 8004380:	4618      	mov	r0, r3
 8004382:	f7fc ff2f 	bl	80011e4 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3314      	adds	r3, #20
 800438a:	4618      	mov	r0, r3
 800438c:	f7fc ff66 	bl	800125c <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	33d0      	adds	r3, #208	@ 0xd0
 8004394:	4a0a      	ldr	r2, [pc, #40]	@ (80043c0 <_ZN9simpleFOC11initSensorsEv+0x58>)
 8004396:	edd2 7a00 	vldr	s15, [r2]
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <_ZN9simpleFOC11initSensorsEv+0x5c>)
 800439c:	ed92 7a00 	vldr	s14, [r2]
 80043a0:	eef0 0a47 	vmov.f32	s1, s14
 80043a4:	eeb0 0a67 	vmov.f32	s0, s15
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd fabf 	bl	800192c <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	33d0      	adds	r3, #208	@ 0xd0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd faf0 	bl	8001998 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 80043b8:	bf00      	nop
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000098 	.word	0x20000098
 80043c4:	2000009c 	.word	0x2000009c

080043c8 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
	return 0;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	370c      	adds	r7, #12
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 80043e8:	4b29      	ldr	r3, [pc, #164]	@ (8004490 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 80043ee:	4b29      	ldr	r3, [pc, #164]	@ (8004494 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3260 	ldr.w	r3, [r3, #608]	@ 0x260
 80043fa:	4a25      	ldr	r2, [pc, #148]	@ (8004490 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80043fc:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
 8004404:	4a23      	ldr	r2, [pc, #140]	@ (8004494 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8004406:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f04f 0200 	mov.w	r2, #0
 800440e:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 8004410:	e009      	b.n	8004426 <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 8004412:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8004498 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fade 	bl	80049d8 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3314      	adds	r3, #20
 8004420:	4618      	mov	r0, r3
 8004422:	f7fd f809 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f7ff ffce 	bl	80043c8 <_ZN9simpleFOC11needsSearchEv>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	edd3 7a01 	vldr	s15, [r3, #4]
 8004438:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800449c <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 800443c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004444:	d501      	bpl.n	800444a <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d1e0      	bne.n	8004412 <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004456:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 80044a0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800445a:	eddf 0a11 	vldr	s1, [pc, #68]	@ 80044a0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 800445e:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 80044a0 <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff fc0c 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 8004468:	4a09      	ldr	r2, [pc, #36]	@ (8004490 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 800446e:	4a09      	ldr	r2, [pc, #36]	@ (8004494 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7ff ffa7 	bl	80043c8 <_ZN9simpleFOC11needsSearchEv>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
}
 8004486:	4618      	mov	r0, r3
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	200000b8 	.word	0x200000b8
 8004494:	200000b0 	.word	0x200000b0
 8004498:	4116cbe4 	.word	0x4116cbe4
 800449c:	40c90fdb 	.word	0x40c90fdb
	...

080044a8 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	ed2d 8b02 	vpush	{d8}
 80044ae:	b08a      	sub	sp, #40	@ 0x28
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 80044b4:	2301      	movs	r3, #1
 80044b6:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044bc:	ee07 3a90 	vmov	s15, r3
 80044c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80044c4:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 80047a0 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 80044c8:	eef4 7a47 	vcmp.f32	s15, s14
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	f040 810a 	bne.w	80046e8 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7ff ff77 	bl	80043c8 <_ZN9simpleFOC11needsSearchEv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	bf14      	ite	ne
 80044e0:	2301      	movne	r3, #1
 80044e2:	2300      	moveq	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f7ff ff78 	bl	80043e0 <_ZN9simpleFOC18absoluteZeroSearchEv>
 80044f0:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d101      	bne.n	80044fc <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 80044f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044fa:	e146      	b.n	800478a <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 80044fc:	2300      	movs	r3, #0
 80044fe:	623b      	str	r3, [r7, #32]
 8004500:	e037      	b.n	8004572 <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	ee07 3a90 	vmov	s15, r3
 8004508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450c:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 80047a4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8004510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004514:	ee17 0a90 	vmov	r0, s15
 8004518:	f7fb ffe2 	bl	80004e0 <__aeabi_f2d>
 800451c:	f04f 0200 	mov.w	r2, #0
 8004520:	4ba1      	ldr	r3, [pc, #644]	@ (80047a8 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8004522:	f7fc f95f 	bl	80007e4 <__aeabi_ddiv>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	a39a      	add	r3, pc, #616	@ (adr r3, 8004798 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8004530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004534:	f7fb fe76 	bl	8000224 <__adddf3>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4610      	mov	r0, r2
 800453e:	4619      	mov	r1, r3
 8004540:	f7fc fad6 	bl	8000af0 <__aeabi_d2f>
 8004544:	4603      	mov	r3, r0
 8004546:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8004554:	ed97 1a02 	vldr	s2, [r7, #8]
 8004558:	eddf 0a94 	vldr	s1, [pc, #592]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 800455c:	eeb0 0a67 	vmov.f32	s0, s15
 8004560:	4610      	mov	r0, r2
 8004562:	f7ff fb8d 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8004566:	2002      	movs	r0, #2
 8004568:	f001 ff20 	bl	80063ac <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	3301      	adds	r3, #1
 8004570:	623b      	str	r3, [r7, #32]
 8004572:	6a3b      	ldr	r3, [r7, #32]
 8004574:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004578:	ddc3      	ble.n	8004502 <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3314      	adds	r3, #20
 800457e:	4618      	mov	r0, r3
 8004580:	f7fc ffca 	bl	8001518 <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	3314      	adds	r3, #20
 8004588:	4618      	mov	r0, r3
 800458a:	f7fc ff55 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 800458e:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8004592:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	e037      	b.n	800460a <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a4:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 80047a4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80045a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80045ac:	ee17 0a90 	vmov	r0, s15
 80045b0:	f7fb ff96 	bl	80004e0 <__aeabi_f2d>
 80045b4:	f04f 0200 	mov.w	r2, #0
 80045b8:	4b7b      	ldr	r3, [pc, #492]	@ (80047a8 <_ZN9simpleFOC11alignSensorEv+0x300>)
 80045ba:	f7fc f913 	bl	80007e4 <__aeabi_ddiv>
 80045be:	4602      	mov	r2, r0
 80045c0:	460b      	mov	r3, r1
 80045c2:	4610      	mov	r0, r2
 80045c4:	4619      	mov	r1, r3
 80045c6:	a374      	add	r3, pc, #464	@ (adr r3, 8004798 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fb fe2a 	bl	8000224 <__adddf3>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	f7fc fa8a 	bl	8000af0 <__aeabi_d2f>
 80045dc:	4603      	mov	r3, r0
 80045de:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 80045ec:	ed97 1a03 	vldr	s2, [r7, #12]
 80045f0:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 80045f4:	eeb0 0a67 	vmov.f32	s0, s15
 80045f8:	4610      	mov	r0, r2
 80045fa:	f7ff fb41 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80045fe:	2002      	movs	r0, #2
 8004600:	f001 fed4 	bl	80063ac <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	3b01      	subs	r3, #1
 8004608:	61fb      	str	r3, [r7, #28]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dac4      	bge.n	800459a <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	3314      	adds	r3, #20
 8004614:	4618      	mov	r0, r3
 8004616:	f7fc ff7f 	bl	8001518 <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3314      	adds	r3, #20
 800461e:	4618      	mov	r0, r3
 8004620:	f7fc ff0a 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8004624:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 800462e:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 8004632:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 8004636:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fb20 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8004640:	20c8      	movs	r0, #200	@ 0xc8
 8004642:	f001 feb3 	bl	80063ac <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8004646:	ed97 7a06 	vldr	s14, [r7, #24]
 800464a:	edd7 7a05 	vldr	s15, [r7, #20]
 800464e:	eeb4 7a67 	vcmp.f32	s14, s15
 8004652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004656:	d101      	bne.n	800465c <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 8004658:	2300      	movs	r3, #0
 800465a:	e096      	b.n	800478a <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 800465c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004660:	edd7 7a05 	vldr	s15, [r7, #20]
 8004664:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466c:	d504      	bpl.n	8004678 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f04f 32ff 	mov.w	r2, #4294967295
 8004674:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004676:	e002      	b.n	800467e <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	65da      	str	r2, [r3, #92]	@ 0x5c
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 800467e:	ed97 7a06 	vldr	s14, [r7, #24]
 8004682:	edd7 7a05 	vldr	s15, [r7, #20]
 8004686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800468a:	eeb0 0a67 	vmov.f32	s0, s15
 800468e:	f7ff fe03 	bl	8004298 <_ZSt4fabsf>
 8004692:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8004696:	4b46      	ldr	r3, [pc, #280]	@ (80047b0 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 80047a4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80046ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80046b2:	eeb0 0a67 	vmov.f32	s0, s15
 80046b6:	f7ff fdef 	bl	8004298 <_ZSt4fabsf>
 80046ba:	eef0 7a40 	vmov.f32	s15, s0
 80046be:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80046c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ca:	bfcc      	ite	gt
 80046cc:	2301      	movgt	r3, #1
 80046ce:	2300      	movle	r3, #0
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 80046d6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 80047a4 <_ZN9simpleFOC11alignSensorEv+0x2fc>
 80046da:	ed97 7a04 	vldr	s14, [r7, #16]
 80046de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	edc3 7a96 	vstr	s15, [r3, #600]	@ 0x258
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	edd3 7a16 	vldr	s15, [r3, #88]	@ 0x58
 80046ee:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80047a0 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 80046f2:	eef4 7a47 	vcmp.f32	s15, s14
 80046f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fa:	d145      	bne.n	8004788 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	edd3 7a97 	vldr	s15, [r3, #604]	@ 0x25c
 8004708:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 80047b4 <_ZN9simpleFOC11alignSensorEv+0x30c>
 800470c:	eddf 0a27 	vldr	s1, [pc, #156]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 8004710:	eeb0 0a67 	vmov.f32	s0, s15
 8004714:	4610      	mov	r0, r2
 8004716:	f7ff fab3 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 800471a:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 800471e:	f001 fe45 	bl	80063ac <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004726:	ee07 3a90 	vmov	s15, r3
 800472a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3314      	adds	r3, #20
 8004732:	4618      	mov	r0, r3
 8004734:	f7fc fe80 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8004738:	eef0 7a40 	vmov.f32	s15, s0
 800473c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004740:	4b1b      	ldr	r3, [pc, #108]	@ (80047b0 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	eeb0 0a67 	vmov.f32	s0, s15
 800474a:	f7fe fef9 	bl	8003540 <_Z16_electricalAnglefi>
 800474e:	eef0 7a40 	vmov.f32	s15, s0
 8004752:	eeb0 0a67 	vmov.f32	s0, s15
 8004756:	f7fe fecf 	bl	80034f8 <_Z15_normalizeAnglef>
 800475a:	eef0 7a40 	vmov.f32	s15, s0
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	edc3 7a16 	vstr	s15, [r3, #88]	@ 0x58
		HAL_Delay(20);
 8004764:	2014      	movs	r0, #20
 8004766:	f001 fe21 	bl	80063ac <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f503 7308 	add.w	r3, r3, #544	@ 0x220
 8004770:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 8004774:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 8004778:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 80047ac <_ZN9simpleFOC11alignSensorEv+0x304>
 800477c:	4618      	mov	r0, r3
 800477e:	f7ff fa7f 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8004782:	20c8      	movs	r0, #200	@ 0xc8
 8004784:	f001 fe12 	bl	80063ac <HAL_Delay>
	}
	return exit_flag;
 8004788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800478a:	4618      	mov	r0, r3
 800478c:	3728      	adds	r7, #40	@ 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	ecbd 8b02 	vpop	{d8}
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	80000000 	.word	0x80000000
 800479c:	4012d97c 	.word	0x4012d97c
 80047a0:	c640e400 	.word	0xc640e400
 80047a4:	40c90fdb 	.word	0x40c90fdb
 80047a8:	407f4000 	.word	0x407f4000
 80047ac:	00000000 	.word	0x00000000
 80047b0:	200000a8 	.word	0x200000a8
 80047b4:	4096cbe4 	.word	0x4096cbe4

080047b8 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b086      	sub	sp, #24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047c4:	460b      	mov	r3, r1
 80047c6:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 80047cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80047d0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004824 <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 80047d4:	eef4 7a47 	vcmp.f32	s15, s14
 80047d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047dc:	d006      	beq.n	80047ec <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	659a      	str	r2, [r3, #88]	@ 0x58
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 80047e4:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	65da      	str	r2, [r3, #92]	@ 0x5c
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 80047ec:	68f8      	ldr	r0, [r7, #12]
 80047ee:	f7ff fe5b 	bl	80044a8 <_ZN9simpleFOC11alignSensorEv>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3314      	adds	r3, #20
 8004800:	4618      	mov	r0, r3
 8004802:	f7fc fe19 	bl	8001438 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8004806:	eef0 7a40 	vmov.f32	s15, s0
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8004810:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004814:	f001 fdca 	bl	80063ac <HAL_Delay>

	return exit_flag;
 8004818:	697b      	ldr	r3, [r7, #20]
}
 800481a:	4618      	mov	r0, r3
 800481c:	3718      	adds	r7, #24
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	c640e400 	.word	0xc640e400

08004828 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8004828:	b590      	push	{r4, r7, lr}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3314      	adds	r3, #20
 8004834:	4618      	mov	r0, r3
 8004836:	f7fc fe6f 	bl	8001518 <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	3314      	adds	r3, #20
 800483e:	4618      	mov	r0, r3
 8004840:	f7fc ff38 	bl	80016b4 <_ZN17AS5048A_interface13getShaftAngleEv>
 8004844:	eef0 7a40 	vmov.f32	s15, s0
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3314      	adds	r3, #20
 8004852:	4618      	mov	r0, r3
 8004854:	f7fc fe1c 	bl	8001490 <_ZN17AS5048A_interface15electricalAngleEv>
 8004858:	eef0 7a40 	vmov.f32	s15, s0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	edc3 7a8d 	vstr	s15, [r3, #564]	@ 0x234


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f103 02d0 	add.w	r2, r3, #208	@ 0xd0
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	edd3 7a8d 	vldr	s15, [r3, #564]	@ 0x234
 800486e:	687c      	ldr	r4, [r7, #4]
 8004870:	eeb0 0a67 	vmov.f32	s0, s15
 8004874:	4610      	mov	r0, r2
 8004876:	f7fd f98f 	bl	8001b98 <_ZN12CurrentSense14getFOCCurrentsEf>
 800487a:	eeb0 7a40 	vmov.f32	s14, s0
 800487e:	eef0 7a60 	vmov.f32	s15, s1
 8004882:	ed84 7a93 	vstr	s14, [r4, #588]	@ 0x24c
 8004886:	edc4 7a94 	vstr	s15, [r4, #592]	@ 0x250

	current_LPF.q = LPF_current_q(current.q);   // filter values
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	edd3 7a94 	vldr	s15, [r3, #592]	@ 0x250
 8004890:	eeb0 0a67 	vmov.f32	s0, s15
 8004894:	4828      	ldr	r0, [pc, #160]	@ (8004938 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8004896:	f7fe feb5 	bl	8003604 <_ZN13LowPassFilterclEf>
 800489a:	eef0 7a40 	vmov.f32	s15, s0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	edc3 7a04 	vstr	s15, [r3, #16]
	current_LPF.d = LPF_current_d(current.d);   // filter values
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	edd3 7a93 	vldr	s15, [r3, #588]	@ 0x24c
 80048aa:	eeb0 0a67 	vmov.f32	s0, s15
 80048ae:	4823      	ldr	r0, [pc, #140]	@ (800493c <_ZN9simpleFOC7loopFOCEv+0x114>)
 80048b0:	f7fe fea8 	bl	8003604 <_ZN13LowPassFilterclEf>
 80048b4:	eef0 7a40 	vmov.f32	s15, s0
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	edc3 7a03 	vstr	s15, [r3, #12]

//	 calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current_LPF.q);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	ed93 7a8e 	vldr	s14, [r3, #568]	@ 0x238
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	edd3 7a04 	vldr	s15, [r3, #16]
 80048ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ce:	eeb0 0a67 	vmov.f32	s0, s15
 80048d2:	481b      	ldr	r0, [pc, #108]	@ (8004940 <_ZN9simpleFOC7loopFOCEv+0x118>)
 80048d4:	f7ff f800 	bl	80038d8 <_ZN13PIDControllerclEf>
 80048d8:	eef0 7a40 	vmov.f32	s15, s0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	edc3 7a92 	vstr	s15, [r3, #584]	@ 0x248
	voltage.d = PID_current_d(0.0 - current_LPF.d);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	edd3 7a03 	vldr	s15, [r3, #12]
 80048e8:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8004944 <_ZN9simpleFOC7loopFOCEv+0x11c>
 80048ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048f0:	eeb0 0a67 	vmov.f32	s0, s15
 80048f4:	4814      	ldr	r0, [pc, #80]	@ (8004948 <_ZN9simpleFOC7loopFOCEv+0x120>)
 80048f6:	f7fe ffef 	bl	80038d8 <_ZN13PIDControllerclEf>
 80048fa:	eef0 7a40 	vmov.f32	s15, s0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	edc3 7a91 	vstr	s15, [r3, #580]	@ 0x244

//	 set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f503 7208 	add.w	r2, r3, #544	@ 0x220
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	edd3 7a92 	vldr	s15, [r3, #584]	@ 0x248
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	ed93 7a91 	vldr	s14, [r3, #580]	@ 0x244
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	edd3 6a8d 	vldr	s13, [r3, #564]	@ 0x234
 800491c:	eeb0 1a66 	vmov.f32	s2, s13
 8004920:	eef0 0a47 	vmov.f32	s1, s14
 8004924:	eeb0 0a67 	vmov.f32	s0, s15
 8004928:	4610      	mov	r0, r2
 800492a:	f7ff f9a9 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 800492e:	bf00      	nop
 8004930:	370c      	adds	r7, #12
 8004932:	46bd      	mov	sp, r7
 8004934:	bd90      	pop	{r4, r7, pc}
 8004936:	bf00      	nop
 8004938:	2000020c 	.word	0x2000020c
 800493c:	20000218 	.word	0x20000218
 8004940:	200001a0 	.word	0x200001a0
 8004944:	00000000 	.word	0x00000000
 8004948:	2000017c 	.word	0x2000017c

0800494c <_ZN9simpleFOC10move_angleEffff>:
//	voltage.q = current_sp*phase_resistance;
//	voltage.d = 0;
}

void simpleFOC::move_angle(float new_target, float kp, float kd, float tau_ff)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b086      	sub	sp, #24
 8004950:	af00      	add	r7, sp, #0
 8004952:	6178      	str	r0, [r7, #20]
 8004954:	ed87 0a04 	vstr	s0, [r7, #16]
 8004958:	edc7 0a03 	vstr	s1, [r7, #12]
 800495c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004960:	edc7 1a01 	vstr	s3, [r7, #4]
	// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated // checked
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	3314      	adds	r3, #20
 8004968:	4618      	mov	r0, r3
 800496a:	f7fc fecb 	bl	8001704 <_ZN17AS5048A_interface16getShaftVelocityEv>
 800496e:	eef0 7a40 	vmov.f32	s15, s0
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	edc3 7a02 	vstr	s15, [r3, #8]

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
 8004978:	edd7 7a04 	vldr	s15, [r7, #16]
 800497c:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80049cc <_ZN9simpleFOC10move_angleEffff+0x80>
 8004980:	eef4 7a47 	vcmp.f32	s15, s14
 8004984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004988:	d003      	beq.n	8004992 <_ZN9simpleFOC10move_angleEffff+0x46>
		  target = new_target;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
//	PID_position.P = kp;
//	PID_position.D = kd;


	// angle set point
	shaft_angle_sp = target;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	f8d3 2230 	ldr.w	r2, [r3, #560]	@ 0x230
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f8c3 2240 	str.w	r2, [r3, #576]	@ 0x240
	// calculate velocity set point
	current_sp = PID_position(shaft_angle_sp - shaft_angle) ;
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	ed93 7a90 	vldr	s14, [r3, #576]	@ 0x240
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80049aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ae:	eeb0 0a67 	vmov.f32	s0, s15
 80049b2:	4807      	ldr	r0, [pc, #28]	@ (80049d0 <_ZN9simpleFOC10move_angleEffff+0x84>)
 80049b4:	f7fe ff90 	bl	80038d8 <_ZN13PIDControllerclEf>
 80049b8:	eef0 7a40 	vmov.f32	s15, s0
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	edc3 7a8e 	vstr	s15, [r3, #568]	@ 0x238
//	// calculate the torque command
//	current_sp = PID_velocity(current_sp - shaft_velocity);

//	voltage.q = current_sp*phase_resistance;
//	voltage.d = 0;
}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	c640e400 	.word	0xc640e400
 80049d0:	200001e8 	.word	0x200001e8
 80049d4:	00000000 	.word	0x00000000

080049d8 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 80049d8:	b590      	push	{r4, r7, lr}
 80049da:	ed2d 8b02 	vpush	{d8}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 80049e8:	f000 f8e2 	bl	8004bb0 <_ZN9simpleFOC6microsEv>
 80049ec:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f8d3 3254 	ldr.w	r3, [r3, #596]	@ 0x254
 80049f4:	461a      	mov	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1a9b      	subs	r3, r3, r2
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fb fd4e 	bl	800049c <__aeabi_ui2d>
 8004a00:	a369      	add	r3, pc, #420	@ (adr r3, 8004ba8 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8004a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a06:	f7fb fdc3 	bl	8000590 <__aeabi_dmul>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	f7fc f86d 	bl	8000af0 <__aeabi_d2f>
 8004a16:	4603      	mov	r3, r0
 8004a18:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8004a1a:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a1e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a26:	d908      	bls.n	8004a3a <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8004a28:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a2c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a38:	dd01      	ble.n	8004a3e <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8004a3a:	4b53      	ldr	r3, [pc, #332]	@ (8004b88 <_ZN9simpleFOC13angleOpenloopEf+0x1b0>)
 8004a3c:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a44:	ed97 7a00 	vldr	s14, [r7]
 8004a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004a50:	f7fc fb24 	bl	800109c <_ZSt3absf>
 8004a54:	eeb0 8a40 	vmov.f32	s16, s0
 8004a58:	4b4c      	ldr	r3, [pc, #304]	@ (8004b8c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8004a5a:	ed93 7a00 	vldr	s14, [r3]
 8004a5e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	eeb0 0a67 	vmov.f32	s0, s15
 8004a6a:	f7fc fb17 	bl	800109c <_ZSt3absf>
 8004a6e:	eef0 7a40 	vmov.f32	s15, s0
 8004a72:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8004a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a7a:	bfcc      	ite	gt
 8004a7c:	2301      	movgt	r3, #1
 8004a7e:	2300      	movle	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d03b      	beq.n	8004afe <_ZN9simpleFOC13angleOpenloopEf+0x126>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8c:	ed97 7a00 	vldr	s14, [r7]
 8004a90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a9c:	d502      	bpl.n	8004aa4 <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8004a9e:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8004aa2:	e010      	b.n	8004ac6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aaa:	ed97 7a00 	vldr	s14, [r7]
 8004aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aba:	dd02      	ble.n	8004ac2 <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8004abc:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8004ac0:	e001      	b.n	8004ac6 <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8004ac2:	ed9f 8a33 	vldr	s16, [pc, #204]	@ 8004b90 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>
 8004ac6:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8004ac8:	edd3 7a00 	vldr	s15, [r3]
 8004acc:	eeb0 0a67 	vmov.f32	s0, s15
 8004ad0:	f7fc fae4 	bl	800109c <_ZSt3absf>
 8004ad4:	eef0 7a40 	vmov.f32	s15, s0
 8004ad8:	ee28 7a27 	vmul.f32	s14, s16, s15
 8004adc:	edd7 7a05 	vldr	s15, [r7, #20]
 8004ae0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8004af4:	4b25      	ldr	r3, [pc, #148]	@ (8004b8c <_ZN9simpleFOC13angleOpenloopEf+0x1b4>)
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	e006      	b.n	8004b0c <_ZN9simpleFOC13angleOpenloopEf+0x134>
	}
	else
	{
		shaft_angle = target_angle;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	609a      	str	r2, [r3, #8]
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8004b0c:	4b21      	ldr	r3, [pc, #132]	@ (8004b94 <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8004b12:	4b21      	ldr	r3, [pc, #132]	@ (8004b98 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>)
 8004b14:	edd3 7a00 	vldr	s15, [r3]
 8004b18:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004b9c <_ZN9simpleFOC13angleOpenloopEf+0x1c4>
 8004b1c:	eef4 7a47 	vcmp.f32	s15, s14
 8004b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b24:	d009      	beq.n	8004b3a <_ZN9simpleFOC13angleOpenloopEf+0x162>
		Uq =  current_limit*phase_resistance;
 8004b26:	4b1e      	ldr	r3, [pc, #120]	@ (8004ba0 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8004b28:	ed93 7a00 	vldr	s14, [r3]
 8004b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004b98 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>)
 8004b2e:	edd3 7a00 	vldr	s15, [r3]
 8004b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b36:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	f503 7408 	add.w	r4, r3, #544	@ 0x220
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b46:	4b17      	ldr	r3, [pc, #92]	@ (8004ba4 <_ZN9simpleFOC13angleOpenloopEf+0x1cc>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	eeb0 0a67 	vmov.f32	s0, s15
 8004b50:	f7fe fcf6 	bl	8003540 <_Z16_electricalAnglefi>
 8004b54:	eef0 7a40 	vmov.f32	s15, s0
 8004b58:	eeb0 1a67 	vmov.f32	s2, s15
 8004b5c:	eddf 0a0c 	vldr	s1, [pc, #48]	@ 8004b90 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>
 8004b60:	ed97 0a04 	vldr	s0, [r7, #16]
 8004b64:	4620      	mov	r0, r4
 8004b66:	f7ff f88b 	bl	8003c80 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f8c3 2254 	str.w	r2, [r3, #596]	@ 0x254
	return Uq;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	ee07 3a90 	vmov	s15, r3
}
 8004b78:	eeb0 0a67 	vmov.f32	s0, s15
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	ecbd 8b02 	vpop	{d8}
 8004b84:	bd90      	pop	{r4, r7, pc}
 8004b86:	bf00      	nop
 8004b88:	3a83126f 	.word	0x3a83126f
 8004b8c:	200000b8 	.word	0x200000b8
 8004b90:	00000000 	.word	0x00000000
 8004b94:	200000b0 	.word	0x200000b0
 8004b98:	200000a0 	.word	0x200000a0
 8004b9c:	c640e400 	.word	0xc640e400
 8004ba0:	200000b4 	.word	0x200000b4
 8004ba4:	200000a8 	.word	0x200000a8
 8004ba8:	a0b5ed8d 	.word	0xa0b5ed8d
 8004bac:	3eb0c6f7 	.word	0x3eb0c6f7

08004bb0 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004bb4:	4b07      	ldr	r3, [pc, #28]	@ (8004bd4 <_ZN9simpleFOC6microsEv+0x24>)
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <_ZN9simpleFOC6microsEv+0x28>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4907      	ldr	r1, [pc, #28]	@ (8004bdc <_ZN9simpleFOC6microsEv+0x2c>)
 8004bbe:	fba1 1303 	umull	r1, r3, r1, r3
 8004bc2:	0c9b      	lsrs	r3, r3, #18
 8004bc4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	e0001000 	.word	0xe0001000
 8004bd8:	200000f4 	.word	0x200000f4
 8004bdc:	431bde83 	.word	0x431bde83

08004be0 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8004be4:	4b06      	ldr	r3, [pc, #24]	@ (8004c00 <MX_CORDIC_Init+0x20>)
 8004be6:	4a07      	ldr	r2, [pc, #28]	@ (8004c04 <MX_CORDIC_Init+0x24>)
 8004be8:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8004bea:	4805      	ldr	r0, [pc, #20]	@ (8004c00 <MX_CORDIC_Init+0x20>)
 8004bec:	f003 f9b0 	bl	8007f50 <HAL_CORDIC_Init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8004bf6:	f000 ff73 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000658 	.word	0x20000658
 8004c04:	40020c00 	.word	0x40020c00

08004c08 <_ZL11limit_valuefff>:
void send_motor_states(float position_fb, float velocity_fb, float current_fb);


// Limit the value to be within min and max
static float limit_value(float value, float min_value, float max_value)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c12:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c16:	ed87 1a01 	vstr	s2, [r7, #4]
	return std::max(min_value, std::min(value, max_value));
 8004c1a:	1d3a      	adds	r2, r7, #4
 8004c1c:	f107 030c 	add.w	r3, r7, #12
 8004c20:	4611      	mov	r1, r2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fbb8 	bl	8003398 <_ZSt3minIfERKT_S2_S2_>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	f107 0308 	add.w	r3, r7, #8
 8004c2e:	4611      	mov	r1, r2
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fe fcb7 	bl	80035a4 <_ZSt3maxIfERKT_S2_S2_>
 8004c36:	4603      	mov	r3, r0
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	ee07 3a90 	vmov	s15, r3
}
 8004c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <_ZL13float_to_uintfffi>:

static unsigned int float_to_uint(float x, float x_min, float x_max, int num_bits)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004c52:	edc7 0a02 	vstr	s1, [r7, #8]
 8004c56:	ed87 1a01 	vstr	s2, [r7, #4]
 8004c5a:	6038      	str	r0, [r7, #0]
    float span = x_max - x_min;
 8004c5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c60:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c68:	edc7 7a07 	vstr	s15, [r7, #28]
    float bitratio = float((1 << num_bits) / span);
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	ee07 3a90 	vmov	s15, r3
 8004c78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004c7c:	ed97 7a07 	vldr	s14, [r7, #28]
 8004c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c84:	edc7 7a06 	vstr	s15, [r7, #24]

    // Clamp the value to ensure it is within range
    x = limit_value(x, x_min, x_max - (2.0f / bitratio));
 8004c88:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8004c8c:	ed97 7a06 	vldr	s14, [r7, #24]
 8004c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c9c:	eeb0 1a67 	vmov.f32	s2, s15
 8004ca0:	edd7 0a02 	vldr	s1, [r7, #8]
 8004ca4:	ed97 0a03 	vldr	s0, [r7, #12]
 8004ca8:	f7ff ffae 	bl	8004c08 <_ZL11limit_valuefff>
 8004cac:	ed87 0a03 	vstr	s0, [r7, #12]

    // Perform the conversion
    unsigned int result = static_cast<unsigned int>((x - x_min) * bitratio);
 8004cb0:	ed97 7a03 	vldr	s14, [r7, #12]
 8004cb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004cbc:	edd7 7a06 	vldr	s15, [r7, #24]
 8004cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc8:	ee17 3a90 	vmov	r3, s15
 8004ccc:	617b      	str	r3, [r7, #20]

    // Ensure the result is within the unsigned integer range
    return limit_value(result, 0, static_cast<unsigned int>((x_max - x_min) * bitratio));
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	ee07 3a90 	vmov	s15, r3
 8004cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd8:	ed97 7a01 	vldr	s14, [r7, #4]
 8004cdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8004ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004ce4:	edd7 7a06 	vldr	s15, [r7, #24]
 8004ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cf4:	eeb0 1a67 	vmov.f32	s2, s15
 8004cf8:	eddf 0a07 	vldr	s1, [pc, #28]	@ 8004d18 <_ZL13float_to_uintfffi+0xd0>
 8004cfc:	eeb0 0a66 	vmov.f32	s0, s13
 8004d00:	f7ff ff82 	bl	8004c08 <_ZL11limit_valuefff>
 8004d04:	eef0 7a40 	vmov.f32	s15, s0
 8004d08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d0c:	ee17 3a90 	vmov	r3, s15
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3720      	adds	r7, #32
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	00000000 	.word	0x00000000

08004d1c <_ZL13uint_to_floatjffi>:

static float uint_to_float(unsigned int x, float x_min, float x_max, int num_bits)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b087      	sub	sp, #28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d28:	edc7 0a01 	vstr	s1, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
    float span = x_max - x_min;
 8004d2e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d32:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d3a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Perform the conversion
    return static_cast<float>(x) * span / ((1 << num_bits) - 1) + x_min;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	ee07 3a90 	vmov	s15, r3
 8004d44:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8004d4c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004d50:	2201      	movs	r2, #1
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d66:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8004d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8004d72:	371c      	adds	r7, #28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_FDCAN_RxFifo0Callback>:


float position_des, velocity_des, kp_des, kd_des, tau_des;
// Callback function for received messages
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b09a      	sub	sp, #104	@ 0x68
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	FDCAN_RxHeaderTypeDef rxHeader;
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80ba 	beq.w	8004f06 <HAL_FDCAN_RxFifo0Callback+0x18a>
    {
    	uint8_t rxData[8];
        // Retrieve the message from RX FIFO 0
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8004d92:	f107 030c 	add.w	r3, r7, #12
 8004d96:	f107 0214 	add.w	r2, r7, #20
 8004d9a:	2140      	movs	r1, #64	@ 0x40
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f003 ff9d 	bl	8008cdc <HAL_FDCAN_GetRxMessage>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf14      	ite	ne
 8004da8:	2301      	movne	r3, #1
 8004daa:	2300      	moveq	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_FDCAN_RxFifo0Callback+0x3a>
        {
            Error_Handler();
 8004db2:	f000 fe95 	bl	8005ae0 <Error_Handler>
        }

        // Recieved command from main controller
        if (rxHeader.Identifier == CANFD.motor_id)
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4b5d      	ldr	r3, [pc, #372]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	f040 80a2 	bne.w	8004f06 <HAL_FDCAN_RxFifo0Callback+0x18a>
        {
            for (int i = 0; i < rxHeader.DataLength; i++)
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8004dc6:	e00c      	b.n	8004de2 <HAL_FDCAN_RxFifo0Callback+0x66>
            {
            	CANFD.Data[i] = rxData[i];
 8004dc8:	f107 020c 	add.w	r2, r7, #12
 8004dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dce:	4413      	add	r3, r2
 8004dd0:	7819      	ldrb	r1, [r3, #0]
 8004dd2:	4a57      	ldr	r2, [pc, #348]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd6:	4413      	add	r3, r2
 8004dd8:	460a      	mov	r2, r1
 8004dda:	701a      	strb	r2, [r3, #0]
            for (int i = 0; i < rxHeader.DataLength; i++)
 8004ddc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dde:	3301      	adds	r3, #1
 8004de0:	667b      	str	r3, [r7, #100]	@ 0x64
 8004de2:	6a3a      	ldr	r2, [r7, #32]
 8004de4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d8ee      	bhi.n	8004dc8 <HAL_FDCAN_RxFifo0Callback+0x4c>
            }
            unsigned int position_uint = (unsigned int)  CANFD.Data[0] << 8 | CANFD.Data[1];
 8004dea:	4b51      	ldr	r3, [pc, #324]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	4a4f      	ldr	r2, [pc, #316]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004df2:	7852      	ldrb	r2, [r2, #1]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	663b      	str	r3, [r7, #96]	@ 0x60
            unsigned int velocity_uint = (unsigned int) ((CANFD.Data[2] << 8) | (CANFD.Data[3] >> 4) <<4 ) >> 4;
 8004df8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004dfa:	789b      	ldrb	r3, [r3, #2]
 8004dfc:	021a      	lsls	r2, r3, #8
 8004dfe:	4b4c      	ldr	r3, [pc, #304]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e00:	78db      	ldrb	r3, [r3, #3]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	011b      	lsls	r3, r3, #4
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	091b      	lsrs	r3, r3, #4
 8004e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            unsigned int kp_uint       = (unsigned int) ((CANFD.Data[3] & 0x0F) << 8) | CANFD.Data[4];
 8004e0e:	4b48      	ldr	r3, [pc, #288]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e10:	78db      	ldrb	r3, [r3, #3]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e18:	4a45      	ldr	r2, [pc, #276]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e1a:	7912      	ldrb	r2, [r2, #4]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	65bb      	str	r3, [r7, #88]	@ 0x58
            unsigned int kd_uint       = (unsigned int) ((CANFD.Data[5] << 8) | (CANFD.Data[6] >> 4) <<4 ) >> 4;
 8004e20:	4b43      	ldr	r3, [pc, #268]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e22:	795b      	ldrb	r3, [r3, #5]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	4b42      	ldr	r3, [pc, #264]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e28:	799b      	ldrb	r3, [r3, #6]
 8004e2a:	091b      	lsrs	r3, r3, #4
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	4313      	orrs	r3, r2
 8004e32:	091b      	lsrs	r3, r3, #4
 8004e34:	657b      	str	r3, [r7, #84]	@ 0x54
            unsigned int tau_uint      = (unsigned int) ((CANFD.Data[6] & 0x0F) << 8) | CANFD.Data[7];
 8004e36:	4b3e      	ldr	r3, [pc, #248]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e38:	799b      	ldrb	r3, [r3, #6]
 8004e3a:	021b      	lsls	r3, r3, #8
 8004e3c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004e40:	4a3b      	ldr	r2, [pc, #236]	@ (8004f30 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8004e42:	79d2      	ldrb	r2, [r2, #7]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	653b      	str	r3, [r7, #80]	@ 0x50

            float position = (float) uint_to_float(position_uint, BE8108.P_min,  BE8108.P_max,  16);
 8004e48:	4b3a      	ldr	r3, [pc, #232]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e4a:	edd3 7a00 	vldr	s15, [r3]
 8004e4e:	4b39      	ldr	r3, [pc, #228]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e50:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e54:	2110      	movs	r1, #16
 8004e56:	eef0 0a47 	vmov.f32	s1, s14
 8004e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e5e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8004e60:	f7ff ff5c 	bl	8004d1c <_ZL13uint_to_floatjffi>
 8004e64:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
            float velocity = (float) uint_to_float(velocity_uint, BE8108.V_min,  BE8108.V_max,  12);
 8004e68:	4b32      	ldr	r3, [pc, #200]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e6a:	edd3 7a02 	vldr	s15, [r3, #8]
 8004e6e:	4b31      	ldr	r3, [pc, #196]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e70:	ed93 7a03 	vldr	s14, [r3, #12]
 8004e74:	210c      	movs	r1, #12
 8004e76:	eef0 0a47 	vmov.f32	s1, s14
 8004e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e7e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8004e80:	f7ff ff4c 	bl	8004d1c <_ZL13uint_to_floatjffi>
 8004e84:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
            float kp       = (float) uint_to_float(kp_uint,       BE8108.Kp_min, BE8108.Kp_max, 12);
 8004e88:	4b2a      	ldr	r3, [pc, #168]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e8a:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e8e:	4b29      	ldr	r3, [pc, #164]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004e90:	ed93 7a07 	vldr	s14, [r3, #28]
 8004e94:	210c      	movs	r1, #12
 8004e96:	eef0 0a47 	vmov.f32	s1, s14
 8004e9a:	eeb0 0a67 	vmov.f32	s0, s15
 8004e9e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004ea0:	f7ff ff3c 	bl	8004d1c <_ZL13uint_to_floatjffi>
 8004ea4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
            float kd       = (float) uint_to_float(kd_uint,       BE8108.Kd_min, BE8108.Kd_max, 12);
 8004ea8:	4b22      	ldr	r3, [pc, #136]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004eaa:	edd3 7a08 	vldr	s15, [r3, #32]
 8004eae:	4b21      	ldr	r3, [pc, #132]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004eb0:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004eb4:	210c      	movs	r1, #12
 8004eb6:	eef0 0a47 	vmov.f32	s1, s14
 8004eba:	eeb0 0a67 	vmov.f32	s0, s15
 8004ebe:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004ec0:	f7ff ff2c 	bl	8004d1c <_ZL13uint_to_floatjffi>
 8004ec4:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
            float tau      = (float) uint_to_float(tau_uint,      BE8108.T_min,  BE8108.T_max,  12);
 8004ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004eca:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ece:	4b19      	ldr	r3, [pc, #100]	@ (8004f34 <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8004ed0:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ed4:	210c      	movs	r1, #12
 8004ed6:	eef0 0a47 	vmov.f32	s1, s14
 8004eda:	eeb0 0a67 	vmov.f32	s0, s15
 8004ede:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8004ee0:	f7ff ff1c 	bl	8004d1c <_ZL13uint_to_floatjffi>
 8004ee4:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

            position_des = position;
 8004ee8:	4a13      	ldr	r2, [pc, #76]	@ (8004f38 <HAL_FDCAN_RxFifo0Callback+0x1bc>)
 8004eea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eec:	6013      	str	r3, [r2, #0]
            velocity_des = velocity;
 8004eee:	4a13      	ldr	r2, [pc, #76]	@ (8004f3c <HAL_FDCAN_RxFifo0Callback+0x1c0>)
 8004ef0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ef2:	6013      	str	r3, [r2, #0]
            kp_des = kp;
 8004ef4:	4a12      	ldr	r2, [pc, #72]	@ (8004f40 <HAL_FDCAN_RxFifo0Callback+0x1c4>)
 8004ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ef8:	6013      	str	r3, [r2, #0]
            kd_des = kd;
 8004efa:	4a12      	ldr	r2, [pc, #72]	@ (8004f44 <HAL_FDCAN_RxFifo0Callback+0x1c8>)
 8004efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004efe:	6013      	str	r3, [r2, #0]
            tau_des = tau;
 8004f00:	4a11      	ldr	r2, [pc, #68]	@ (8004f48 <HAL_FDCAN_RxFifo0Callback+0x1cc>)
 8004f02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f04:	6013      	str	r3, [r2, #0]
        }

    }
    // Send the motor states feedback when motor has received command
    send_motor_states(simpleFOC.shaft_angle, simpleFOC.shaft_velocity, simpleFOC.current_LPF.q);
 8004f06:	4b11      	ldr	r3, [pc, #68]	@ (8004f4c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004f08:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f4c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004f0e:	ed93 7a02 	vldr	s14, [r3, #8]
 8004f12:	4b0e      	ldr	r3, [pc, #56]	@ (8004f4c <HAL_FDCAN_RxFifo0Callback+0x1d0>)
 8004f14:	edd3 6a04 	vldr	s13, [r3, #16]
 8004f18:	eeb0 1a66 	vmov.f32	s2, s13
 8004f1c:	eef0 0a47 	vmov.f32	s1, s14
 8004f20:	eeb0 0a67 	vmov.f32	s0, s15
 8004f24:	f000 f83c 	bl	8004fa0 <_Z17send_motor_statesfff>

}
 8004f28:	bf00      	nop
 8004f2a:	3768      	adds	r7, #104	@ 0x68
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	200004b0 	.word	0x200004b0
 8004f34:	200000bc 	.word	0x200000bc
 8004f38:	2000083c 	.word	0x2000083c
 8004f3c:	20000840 	.word	0x20000840
 8004f40:	20000844 	.word	0x20000844
 8004f44:	20000848 	.word	0x20000848
 8004f48:	2000084c 	.word	0x2000084c
 8004f4c:	20000248 	.word	0x20000248

08004f50 <_Z16send_can_messagemPhh>:

void send_can_message(uint32_t message_id, uint8_t *data, uint8_t data_length)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	@ 0x38
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	71fb      	strb	r3, [r7, #7]
    FDCAN_TxHeaderTypeDef txHeader;
    HAL_StatusTypeDef status;

    // Configure the CAN message
    txHeader.Identifier = message_id;               // Set the CAN ID
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	613b      	str	r3, [r7, #16]
    txHeader.IdType = FDCAN_STANDARD_ID;            // Standard 11-bit ID
 8004f62:	2300      	movs	r3, #0
 8004f64:	617b      	str	r3, [r7, #20]
    txHeader.TxFrameType = FDCAN_DATA_FRAME;        // Data frame
 8004f66:	2300      	movs	r3, #0
 8004f68:	61bb      	str	r3, [r7, #24]
    txHeader.DataLength = FDCAN_DLC_BYTES_0 + data_length;      // Set data length (DLC)
 8004f6a:	79fb      	ldrb	r3, [r7, #7]
 8004f6c:	61fb      	str	r3, [r7, #28]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	623b      	str	r3, [r7, #32]
    txHeader.BitRateSwitch = FDCAN_BRS_OFF;         // No bitrate switch
 8004f72:	2300      	movs	r3, #0
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.FDFormat = FDCAN_CLASSIC_CAN;          // Classic CAN format
 8004f76:	2300      	movs	r3, #0
 8004f78:	62bb      	str	r3, [r7, #40]	@ 0x28
    txHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Transmit the message
    status = HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, data);
 8004f7e:	f107 0310 	add.w	r3, r7, #16
 8004f82:	68ba      	ldr	r2, [r7, #8]
 8004f84:	4619      	mov	r1, r3
 8004f86:	4805      	ldr	r0, [pc, #20]	@ (8004f9c <_Z16send_can_messagemPhh+0x4c>)
 8004f88:	f003 fe64 	bl	8008c54 <HAL_FDCAN_AddMessageToTxFifoQ>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }
    else
    {
//        printf("Failed to send CAN message: %d\n", status);
    }
}
 8004f92:	bf00      	nop
 8004f94:	3738      	adds	r7, #56	@ 0x38
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200006a4 	.word	0x200006a4

08004fa0 <_Z17send_motor_statesfff>:


void send_motor_states(float position_fb, float velocity_fb, float current_fb)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b08a      	sub	sp, #40	@ 0x28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	ed87 0a03 	vstr	s0, [r7, #12]
 8004faa:	edc7 0a02 	vstr	s1, [r7, #8]
 8004fae:	ed87 1a01 	vstr	s2, [r7, #4]
	unsigned int position_fb_uint = float_to_uint(position_fb, BE8108.P_min,  BE8108.P_max, 16);
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004fb4:	edd3 7a00 	vldr	s15, [r3]
 8004fb8:	4b2a      	ldr	r3, [pc, #168]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004fba:	ed93 7a01 	vldr	s14, [r3, #4]
 8004fbe:	2010      	movs	r0, #16
 8004fc0:	eeb0 1a47 	vmov.f32	s2, s14
 8004fc4:	eef0 0a67 	vmov.f32	s1, s15
 8004fc8:	ed97 0a03 	vldr	s0, [r7, #12]
 8004fcc:	f7ff fe3c 	bl	8004c48 <_ZL13float_to_uintfffi>
 8004fd0:	6278      	str	r0, [r7, #36]	@ 0x24
	unsigned int velocity_fb_uint = float_to_uint(velocity_fb, BE8108.V_min,  BE8108.V_max, 16);
 8004fd2:	4b24      	ldr	r3, [pc, #144]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004fd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8004fd8:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004fda:	ed93 7a03 	vldr	s14, [r3, #12]
 8004fde:	2010      	movs	r0, #16
 8004fe0:	eeb0 1a47 	vmov.f32	s2, s14
 8004fe4:	eef0 0a67 	vmov.f32	s1, s15
 8004fe8:	ed97 0a02 	vldr	s0, [r7, #8]
 8004fec:	f7ff fe2c 	bl	8004c48 <_ZL13float_to_uintfffi>
 8004ff0:	6238      	str	r0, [r7, #32]
	unsigned int current_fb_uint  = float_to_uint(current_fb,  BE8108.T_min,  BE8108.T_max, 16);
 8004ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004ff4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8005064 <_Z17send_motor_statesfff+0xc4>)
 8004ffa:	ed93 7a05 	vldr	s14, [r3, #20]
 8004ffe:	2010      	movs	r0, #16
 8005000:	eeb0 1a47 	vmov.f32	s2, s14
 8005004:	eef0 0a67 	vmov.f32	s1, s15
 8005008:	ed97 0a01 	vldr	s0, [r7, #4]
 800500c:	f7ff fe1c 	bl	8004c48 <_ZL13float_to_uintfffi>
 8005010:	61f8      	str	r0, [r7, #28]

	uint8_t data[8] = {(uint8_t)(position_fb_uint >> 8 & 0xff),
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	2200      	movs	r2, #0
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	605a      	str	r2, [r3, #4]
 800501c:	23ff      	movs	r3, #255	@ 0xff
 800501e:	76bb      	strb	r3, [r7, #26]
 8005020:	23ff      	movs	r3, #255	@ 0xff
 8005022:	76fb      	strb	r3, [r7, #27]
 8005024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005026:	0a1b      	lsrs	r3, r3, #8
					   (uint8_t)(velocity_fb_uint >> 8 & 0xff),
					   (uint8_t)(velocity_fb_uint & 0x00ff),
					   (uint8_t)(current_fb_uint >> 8 & 0xff),
					   (uint8_t)(current_fb_uint & 0x00ff),
					   0xff,
					   0xff};
 8005028:	b2db      	uxtb	r3, r3
 800502a:	753b      	strb	r3, [r7, #20]
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	b2db      	uxtb	r3, r3
 8005030:	757b      	strb	r3, [r7, #21]
					   (uint8_t)(velocity_fb_uint >> 8 & 0xff),
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	0a1b      	lsrs	r3, r3, #8
					   0xff};
 8005036:	b2db      	uxtb	r3, r3
 8005038:	75bb      	strb	r3, [r7, #22]
 800503a:	6a3b      	ldr	r3, [r7, #32]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	75fb      	strb	r3, [r7, #23]
					   (uint8_t)(current_fb_uint >> 8 & 0xff),
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	0a1b      	lsrs	r3, r3, #8
					   0xff};
 8005044:	b2db      	uxtb	r3, r3
 8005046:	763b      	strb	r3, [r7, #24]
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	767b      	strb	r3, [r7, #25]
	send_can_message(motor_ID, data, 8);
 800504e:	f107 0314 	add.w	r3, r7, #20
 8005052:	2208      	movs	r2, #8
 8005054:	4619      	mov	r1, r3
 8005056:	2001      	movs	r0, #1
 8005058:	f7ff ff7a 	bl	8004f50 <_Z16send_can_messagemPhh>
}
 800505c:	bf00      	nop
 800505e:	3728      	adds	r7, #40	@ 0x28
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	200000bc 	.word	0x200000bc

08005068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800506e:	f001 f92c 	bl	80062ca <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005072:	f000 f8b1 	bl	80051d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005076:	f000 fc8b 	bl	8005990 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800507a:	f000 fc21 	bl	80058c0 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 800507e:	f000 fa83 	bl	8005588 <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 8005082:	f000 f8ff 	bl	8005284 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 8005086:	f000 fa1b 	bl	80054c0 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 800508a:	f000 fabf 	bl	800560c <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 800508e:	f000 f97f 	bl	8005390 <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 8005092:	f7ff fda5 	bl	8004be0 <MX_CORDIC_Init>
  MX_CRC_Init();
 8005096:	f000 f9eb 	bl	8005470 <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 800509a:	f000 fa5d 	bl	8005558 <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 800509e:	f000 fbb3 	bl	8005808 <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  //  Delay SETUP
	DWT_Init();
 80050a2:	f000 fcd5 	bl	8005a50 <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
	HAL_TIM_Base_Start_IT(&htim2);
 80050a6:	483e      	ldr	r0, [pc, #248]	@ (80051a0 <main+0x138>)
 80050a8:	f006 f928 	bl	800b2fc <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 80050ac:	2201      	movs	r2, #1
 80050ae:	2101      	movs	r1, #1
 80050b0:	483c      	ldr	r0, [pc, #240]	@ (80051a4 <main+0x13c>)
 80050b2:	f004 fc9b 	bl	80099ec <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//SPI SETUP
	simpleFOC.initSensors();
 80050b6:	483c      	ldr	r0, [pc, #240]	@ (80051a8 <main+0x140>)
 80050b8:	f7ff f956 	bl	8004368 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
	simpleFOC.initFOC(4.91525555, CW);
 80050bc:	2101      	movs	r1, #1
 80050be:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 80051ac <main+0x144>
 80050c2:	4839      	ldr	r0, [pc, #228]	@ (80051a8 <main+0x140>)
 80050c4:	f7ff fb78 	bl	80047b8 <_ZN9simpleFOC7initFOCEf9Direction>
//	simpleFOC.initFOC(NOT_SET, UNKNOWN);



  // Configure FDCAN
    CANFD.Config();
 80050c8:	4839      	ldr	r0, [pc, #228]	@ (80051b0 <main+0x148>)
 80050ca:	f7fc fde7 	bl	8001c9c <_ZN6can_fd6ConfigEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    const uint32_t target_period_loopFOC = 100; // 125 µs for 8 kHz
 80050ce:	2364      	movs	r3, #100	@ 0x64
 80050d0:	60fb      	str	r3, [r7, #12]
    const uint32_t target_period_move_torque = 1000; // 1000 µs for 1 kHz
 80050d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80050d6:	60bb      	str	r3, [r7, #8]
    uint32_t t_loopFOC_start = 0; // Timestamp for loopFOC
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
    uint32_t t_move_torque_start = 0; // Timestamp for move_torque
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
    ts = micros();
 80050e0:	f000 fcce 	bl	8005a80 <_ZL6microsv>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a33      	ldr	r2, [pc, #204]	@ (80051b4 <main+0x14c>)
 80050e8:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  uint32_t t_now = micros(); // Get the current time
 80050ea:	f000 fcc9 	bl	8005a80 <_ZL6microsv>
 80050ee:	6078      	str	r0, [r7, #4]

//	  if (t_now-ts > 5000000) setpoint_cmd = 1.0;


	    // ** Run move_torque at 1 kHz **
	    if ((t_now - t_move_torque_start) >= target_period_move_torque)
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80050fa:	d318      	bcc.n	800512e <main+0xc6>
	    {
	        t_move_torque_start = t_now; 			// Update the move_torque timestamp
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	613b      	str	r3, [r7, #16]

	        /** Test Closed Loop Control **/
//	        simpleFOC.move_torque(setpoint_cmd);		// 14 us (max)
//	        simpleFOC.move_velocity(setpoint_cmd);		// 21 us  (max change 0-80)maximum 100 rad/s --> 950 rpm
	        simpleFOC.move_angle(position_des, kp_des, kd_des, tau_des); // 26 us  a lot of noise in q,d current
 8005100:	4b2d      	ldr	r3, [pc, #180]	@ (80051b8 <main+0x150>)
 8005102:	edd3 7a00 	vldr	s15, [r3]
 8005106:	4b2d      	ldr	r3, [pc, #180]	@ (80051bc <main+0x154>)
 8005108:	ed93 7a00 	vldr	s14, [r3]
 800510c:	4b2c      	ldr	r3, [pc, #176]	@ (80051c0 <main+0x158>)
 800510e:	edd3 6a00 	vldr	s13, [r3]
 8005112:	4b2c      	ldr	r3, [pc, #176]	@ (80051c4 <main+0x15c>)
 8005114:	ed93 6a00 	vldr	s12, [r3]
 8005118:	eef0 1a46 	vmov.f32	s3, s12
 800511c:	eeb0 1a66 	vmov.f32	s2, s13
 8005120:	eef0 0a47 	vmov.f32	s1, s14
 8005124:	eeb0 0a67 	vmov.f32	s0, s15
 8005128:	481f      	ldr	r0, [pc, #124]	@ (80051a8 <main+0x140>)
 800512a:	f7ff fc0f 	bl	800494c <_ZN9simpleFOC10move_angleEffff>
	    }


	    // ** Run loopFOC at 8 kHz **
	    if ((t_now - t_loopFOC_start) >= target_period_loopFOC)
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b63      	cmp	r3, #99	@ 0x63
 8005136:	d904      	bls.n	8005142 <main+0xda>
	    {
	        t_loopFOC_start = t_now; 				// Update the loopFOC timestamp
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	617b      	str	r3, [r7, #20]
	        simpleFOC.loopFOC(); 					// Run FOC update
 800513c:	481a      	ldr	r0, [pc, #104]	@ (80051a8 <main+0x140>)
 800513e:	f7ff fb73 	bl	8004828 <_ZN9simpleFOC7loopFOCEv>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8005142:	f000 fc9d 	bl	8005a80 <_ZL6microsv>
 8005146:	4602      	mov	r2, r0
 8005148:	4b1f      	ldr	r3, [pc, #124]	@ (80051c8 <main+0x160>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	4a1f      	ldr	r2, [pc, #124]	@ (80051cc <main+0x164>)
 8005150:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8005152:	f000 fc95 	bl	8005a80 <_ZL6microsv>
 8005156:	4603      	mov	r3, r0
 8005158:	4a1b      	ldr	r2, [pc, #108]	@ (80051c8 <main+0x160>)
 800515a:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 800515c:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <main+0x164>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4618      	mov	r0, r3
 8005162:	f7fb f99b 	bl	800049c <__aeabi_ui2d>
 8005166:	a30c      	add	r3, pc, #48	@ (adr r3, 8005198 <main+0x130>)
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb fa10 	bl	8000590 <__aeabi_dmul>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	f04f 0000 	mov.w	r0, #0
 8005178:	4915      	ldr	r1, [pc, #84]	@ (80051d0 <main+0x168>)
 800517a:	f7fb fb33 	bl	80007e4 <__aeabi_ddiv>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	f7fb fcb3 	bl	8000af0 <__aeabi_d2f>
 800518a:	4603      	mov	r3, r0
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <main+0x16c>)
 800518e:	6013      	str	r3, [r2, #0]
  }
 8005190:	e7ab      	b.n	80050ea <main+0x82>
 8005192:	bf00      	nop
 8005194:	f3af 8000 	nop.w
 8005198:	a0b5ed8d 	.word	0xa0b5ed8d
 800519c:	3eb0c6f7 	.word	0x3eb0c6f7
 80051a0:	200007f0 	.word	0x200007f0
 80051a4:	48000400 	.word	0x48000400
 80051a8:	20000248 	.word	0x20000248
 80051ac:	409d49c6 	.word	0x409d49c6
 80051b0:	200004b0 	.word	0x200004b0
 80051b4:	20000850 	.word	0x20000850
 80051b8:	2000083c 	.word	0x2000083c
 80051bc:	20000844 	.word	0x20000844
 80051c0:	20000848 	.word	0x20000848
 80051c4:	2000084c 	.word	0x2000084c
 80051c8:	20000854 	.word	0x20000854
 80051cc:	20000858 	.word	0x20000858
 80051d0:	3ff00000 	.word	0x3ff00000
 80051d4:	2000085c 	.word	0x2000085c

080051d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b094      	sub	sp, #80	@ 0x50
 80051dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80051de:	f107 0318 	add.w	r3, r7, #24
 80051e2:	2238      	movs	r2, #56	@ 0x38
 80051e4:	2100      	movs	r1, #0
 80051e6:	4618      	mov	r0, r3
 80051e8:	f008 fd5e 	bl	800dca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80051ec:	1d3b      	adds	r3, r7, #4
 80051ee:	2200      	movs	r2, #0
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	605a      	str	r2, [r3, #4]
 80051f4:	609a      	str	r2, [r3, #8]
 80051f6:	60da      	str	r2, [r3, #12]
 80051f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80051fa:	2000      	movs	r0, #0
 80051fc:	f004 fc0e 	bl	8009a1c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005200:	2302      	movs	r3, #2
 8005202:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005204:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800520a:	2340      	movs	r3, #64	@ 0x40
 800520c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800520e:	2302      	movs	r3, #2
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005212:	2302      	movs	r3, #2
 8005214:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8005216:	2304      	movs	r3, #4
 8005218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800521a:	2355      	movs	r3, #85	@ 0x55
 800521c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800521e:	2302      	movs	r3, #2
 8005220:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005222:	2302      	movs	r3, #2
 8005224:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005226:	2302      	movs	r3, #2
 8005228:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f004 fca8 	bl	8009b84 <HAL_RCC_OscConfig>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d001      	beq.n	8005248 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8005244:	f000 fc4c 	bl	8005ae0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005248:	230f      	movs	r3, #15
 800524a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800524c:	2303      	movs	r3, #3
 800524e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800525c:	1d3b      	adds	r3, r7, #4
 800525e:	2104      	movs	r1, #4
 8005260:	4618      	mov	r0, r3
 8005262:	f004 ffa1 	bl	800a1a8 <HAL_RCC_ClockConfig>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf14      	ite	ne
 800526c:	2301      	movne	r3, #1
 800526e:	2300      	moveq	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8005276:	f000 fc33 	bl	8005ae0 <Error_Handler>
  }
}
 800527a:	bf00      	nop
 800527c:	3750      	adds	r7, #80	@ 0x50
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	@ 0x30
 8005288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800528a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	605a      	str	r2, [r3, #4]
 8005294:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	2220      	movs	r2, #32
 800529a:	2100      	movs	r1, #0
 800529c:	4618      	mov	r0, r3
 800529e:	f008 fd03 	bl	800dca8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80052a2:	4b39      	ldr	r3, [pc, #228]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052a4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80052a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80052aa:	4b37      	ldr	r3, [pc, #220]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052ac:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80052b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80052b2:	4b35      	ldr	r3, [pc, #212]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80052b8:	4b33      	ldr	r3, [pc, #204]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052ba:	2200      	movs	r2, #0
 80052bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80052be:	4b32      	ldr	r3, [pc, #200]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80052c4:	4b30      	ldr	r3, [pc, #192]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80052ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052cc:	2204      	movs	r2, #4
 80052ce:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80052d0:	4b2d      	ldr	r3, [pc, #180]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80052d6:	4b2c      	ldr	r3, [pc, #176]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052d8:	2201      	movs	r2, #1
 80052da:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80052dc:	4b2a      	ldr	r3, [pc, #168]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052de:	2201      	movs	r2, #1
 80052e0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80052e2:	4b29      	ldr	r3, [pc, #164]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80052ea:	4b27      	ldr	r3, [pc, #156]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80052f0:	4b25      	ldr	r3, [pc, #148]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052f2:	2200      	movs	r2, #0
 80052f4:	631a      	str	r2, [r3, #48]	@ 0x30

//  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
//  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;		// Use TIM1 TRGO

  hadc1.Init.DMAContinuousRequests = ENABLE;
 80052f6:	4b24      	ldr	r3, [pc, #144]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80052fe:	4b22      	ldr	r3, [pc, #136]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 8005300:	2200      	movs	r2, #0
 8005302:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8005304:	4b20      	ldr	r3, [pc, #128]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800530c:	481e      	ldr	r0, [pc, #120]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 800530e:	f001 faaf 	bl	8006870 <HAL_ADC_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d001      	beq.n	8005326 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8005322:	f000 fbdd 	bl	8005ae0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005326:	2300      	movs	r3, #0
 8005328:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800532a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800532e:	4619      	mov	r1, r3
 8005330:	4815      	ldr	r0, [pc, #84]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 8005332:	f002 fd25 	bl	8007d80 <HAL_ADCEx_MultiModeConfigChannel>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf14      	ite	ne
 800533c:	2301      	movne	r3, #1
 800533e:	2300      	moveq	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 8005346:	f000 fbcb 	bl	8005ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800534a:	4b10      	ldr	r3, [pc, #64]	@ (800538c <_ZL12MX_ADC1_Initv+0x108>)
 800534c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800534e:	2306      	movs	r3, #6
 8005350:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8005352:	2307      	movs	r3, #7
 8005354:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005356:	237f      	movs	r3, #127	@ 0x7f
 8005358:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800535a:	2304      	movs	r3, #4
 800535c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005362:	1d3b      	adds	r3, r7, #4
 8005364:	4619      	mov	r1, r3
 8005366:	4808      	ldr	r0, [pc, #32]	@ (8005388 <_ZL12MX_ADC1_Initv+0x104>)
 8005368:	f001 ff5c 	bl	8007224 <HAL_ADC_ConfigChannel>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf14      	ite	ne
 8005372:	2301      	movne	r3, #1
 8005374:	2300      	moveq	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800537c:	f000 fbb0 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8005380:	bf00      	nop
 8005382:	3730      	adds	r7, #48	@ 0x30
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}
 8005388:	200004c0 	.word	0x200004c0
 800538c:	04300002 	.word	0x04300002

08005390 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b088      	sub	sp, #32
 8005394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005396:	463b      	mov	r3, r7
 8005398:	2220      	movs	r2, #32
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f008 fc83 	bl	800dca8 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80053a2:	4b30      	ldr	r3, [pc, #192]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053a4:	4a30      	ldr	r2, [pc, #192]	@ (8005468 <_ZL12MX_ADC2_Initv+0xd8>)
 80053a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80053a8:	4b2e      	ldr	r3, [pc, #184]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80053ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80053b0:	4b2c      	ldr	r3, [pc, #176]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80053b6:	4b2b      	ldr	r3, [pc, #172]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80053bc:	4b29      	ldr	r3, [pc, #164]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80053c2:	4b28      	ldr	r3, [pc, #160]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80053c8:	4b26      	ldr	r3, [pc, #152]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053ca:	2204      	movs	r2, #4
 80053cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80053ce:	4b25      	ldr	r3, [pc, #148]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80053d4:	4b23      	ldr	r3, [pc, #140]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053d6:	2201      	movs	r2, #1
 80053d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80053da:	4b22      	ldr	r3, [pc, #136]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053dc:	2201      	movs	r2, #1
 80053de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80053e0:	4b20      	ldr	r3, [pc, #128]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80053e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80053ee:	4b1d      	ldr	r3, [pc, #116]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80053f4:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80053fc:	4b19      	ldr	r3, [pc, #100]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 80053fe:	2200      	movs	r2, #0
 8005400:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8005402:	4b18      	ldr	r3, [pc, #96]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800540a:	4816      	ldr	r0, [pc, #88]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 800540c:	f001 fa30 	bl	8006870 <HAL_ADC_Init>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 8005420:	f000 fb5e 	bl	8005ae0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005424:	4b11      	ldr	r3, [pc, #68]	@ (800546c <_ZL12MX_ADC2_Initv+0xdc>)
 8005426:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005428:	2306      	movs	r3, #6
 800542a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800542c:	2307      	movs	r3, #7
 800542e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005430:	237f      	movs	r3, #127	@ 0x7f
 8005432:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005434:	2304      	movs	r3, #4
 8005436:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8005438:	2300      	movs	r3, #0
 800543a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800543c:	463b      	mov	r3, r7
 800543e:	4619      	mov	r1, r3
 8005440:	4808      	ldr	r0, [pc, #32]	@ (8005464 <_ZL12MX_ADC2_Initv+0xd4>)
 8005442:	f001 feef 	bl	8007224 <HAL_ADC_ConfigChannel>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	bf14      	ite	ne
 800544c:	2301      	movne	r3, #1
 800544e:	2300      	moveq	r3, #0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 8005456:	f000 fb43 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	2000052c 	.word	0x2000052c
 8005468:	50000100 	.word	0x50000100
 800546c:	08600004 	.word	0x08600004

08005470 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8005474:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 8005476:	4a11      	ldr	r2, [pc, #68]	@ (80054bc <_ZL11MX_CRC_Initv+0x4c>)
 8005478:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800547a:	4b0f      	ldr	r3, [pc, #60]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 800547c:	2200      	movs	r2, #0
 800547e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8005480:	4b0d      	ldr	r3, [pc, #52]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 8005482:	2200      	movs	r2, #0
 8005484:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8005486:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800548c:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 800548e:	2200      	movs	r2, #0
 8005490:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8005492:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 8005494:	2201      	movs	r2, #1
 8005496:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8005498:	4807      	ldr	r0, [pc, #28]	@ (80054b8 <_ZL11MX_CRC_Initv+0x48>)
 800549a:	f002 fe9b 	bl	80081d4 <HAL_CRC_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80054ae:	f000 fb17 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000680 	.word	0x20000680
 80054bc:	40023000 	.word	0x40023000

080054c0 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80054c4:	4b22      	ldr	r3, [pc, #136]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054c6:	4a23      	ldr	r2, [pc, #140]	@ (8005554 <_ZL14MX_FDCAN1_Initv+0x94>)
 80054c8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80054ca:	4b21      	ldr	r3, [pc, #132]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80054d0:	4b1f      	ldr	r3, [pc, #124]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80054d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054d8:	2200      	movs	r2, #0
 80054da:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80054dc:	4b1c      	ldr	r3, [pc, #112]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054de:	2200      	movs	r2, #0
 80054e0:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80054e2:	4b1b      	ldr	r3, [pc, #108]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054ea:	2200      	movs	r2, #0
 80054ec:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80054ee:	4b18      	ldr	r3, [pc, #96]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054f0:	2202      	movs	r2, #2
 80054f2:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80054f4:	4b16      	ldr	r3, [pc, #88]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054f6:	220b      	movs	r2, #11
 80054f8:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 80054fc:	2249      	movs	r2, #73	@ 0x49
 80054fe:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 8005500:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005502:	220b      	movs	r2, #11
 8005504:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005508:	2205      	movs	r2, #5
 800550a:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 800550c:	4b10      	ldr	r3, [pc, #64]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 800550e:	220f      	movs	r2, #15
 8005510:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 8005512:	4b0f      	ldr	r3, [pc, #60]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005514:	2212      	movs	r2, #18
 8005516:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 8005518:	4b0d      	ldr	r3, [pc, #52]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 800551a:	220f      	movs	r2, #15
 800551c:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 800551e:	4b0c      	ldr	r3, [pc, #48]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005520:	220a      	movs	r2, #10
 8005522:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8005524:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005526:	2200      	movs	r2, #0
 8005528:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800552a:	4b09      	ldr	r3, [pc, #36]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 800552c:	2200      	movs	r2, #0
 800552e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005530:	4807      	ldr	r0, [pc, #28]	@ (8005550 <_ZL14MX_FDCAN1_Initv+0x90>)
 8005532:	f003 f9b3 	bl	800889c <HAL_FDCAN_Init>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	bf14      	ite	ne
 800553c:	2301      	movne	r3, #1
 800553e:	2300      	moveq	r3, #0
 8005540:	b2db      	uxtb	r3, r3
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8005546:	f000 facb 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800554a:	bf00      	nop
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200006a4 	.word	0x200006a4
 8005554:	40006400 	.word	0x40006400

08005558 <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 800555c:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <_ZL12MX_FMAC_Initv+0x28>)
 800555e:	4a09      	ldr	r2, [pc, #36]	@ (8005584 <_ZL12MX_FMAC_Initv+0x2c>)
 8005560:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8005562:	4807      	ldr	r0, [pc, #28]	@ (8005580 <_ZL12MX_FMAC_Initv+0x28>)
 8005564:	f004 f814 	bl	8009590 <HAL_FMAC_Init>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d001      	beq.n	800557c <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 8005578:	f000 fab2 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000708 	.word	0x20000708
 8005584:	40021400 	.word	0x40021400

08005588 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800558c:	4b1d      	ldr	r3, [pc, #116]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 800558e:	4a1e      	ldr	r2, [pc, #120]	@ (8005608 <_ZL12MX_SPI1_Initv+0x80>)
 8005590:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005592:	4b1c      	ldr	r3, [pc, #112]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 8005594:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005598:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800559a:	4b1a      	ldr	r3, [pc, #104]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 800559c:	2200      	movs	r2, #0
 800559e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80055a0:	4b18      	ldr	r3, [pc, #96]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055a2:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 80055a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80055a8:	4b16      	ldr	r3, [pc, #88]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80055ae:	4b15      	ldr	r3, [pc, #84]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055b0:	2201      	movs	r2, #1
 80055b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80055b4:	4b13      	ldr	r3, [pc, #76]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80055ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80055bc:	4b11      	ldr	r3, [pc, #68]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055be:	2218      	movs	r2, #24
 80055c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80055c2:	4b10      	ldr	r3, [pc, #64]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80055c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80055d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055d6:	2207      	movs	r2, #7
 80055d8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80055da:	4b0a      	ldr	r3, [pc, #40]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055dc:	2200      	movs	r2, #0
 80055de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80055e0:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80055e6:	4807      	ldr	r0, [pc, #28]	@ (8005604 <_ZL12MX_SPI1_Initv+0x7c>)
 80055e8:	f005 f9fe 	bl	800a9e8 <HAL_SPI_Init>
 80055ec:	4603      	mov	r3, r0
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	bf14      	ite	ne
 80055f2:	2301      	movne	r3, #1
 80055f4:	2300      	moveq	r3, #0
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80055fc:	f000 fa70 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005600:	bf00      	nop
 8005602:	bd80      	pop	{r7, pc}
 8005604:	20000740 	.word	0x20000740
 8005608:	40013000 	.word	0x40013000

0800560c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b09c      	sub	sp, #112	@ 0x70
 8005610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005612:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	605a      	str	r2, [r3, #4]
 800561c:	609a      	str	r2, [r3, #8]
 800561e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005620:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8005624:	2200      	movs	r2, #0
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	605a      	str	r2, [r3, #4]
 800562a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800562c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8005630:	2200      	movs	r2, #0
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	605a      	str	r2, [r3, #4]
 8005636:	609a      	str	r2, [r3, #8]
 8005638:	60da      	str	r2, [r3, #12]
 800563a:	611a      	str	r2, [r3, #16]
 800563c:	615a      	str	r2, [r3, #20]
 800563e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005640:	1d3b      	adds	r3, r7, #4
 8005642:	2234      	movs	r2, #52	@ 0x34
 8005644:	2100      	movs	r1, #0
 8005646:	4618      	mov	r0, r3
 8005648:	f008 fb2e 	bl	800dca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800564c:	4b6c      	ldr	r3, [pc, #432]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 800564e:	4a6d      	ldr	r2, [pc, #436]	@ (8005804 <_ZL12MX_TIM1_Initv+0x1f8>)
 8005650:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005652:	4b6b      	ldr	r3, [pc, #428]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005654:	2200      	movs	r2, #0
 8005656:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005658:	4b69      	ldr	r3, [pc, #420]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 800565a:	2220      	movs	r2, #32
 800565c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 800565e:	4b68      	ldr	r3, [pc, #416]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005660:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8005664:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005666:	4b66      	ldr	r3, [pc, #408]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005668:	2200      	movs	r2, #0
 800566a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 800566c:	4b64      	ldr	r3, [pc, #400]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005672:	4b63      	ldr	r3, [pc, #396]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005674:	2280      	movs	r2, #128	@ 0x80
 8005676:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005678:	4861      	ldr	r0, [pc, #388]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 800567a:	f005 fde7 	bl	800b24c <HAL_TIM_Base_Init>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	bf14      	ite	ne
 8005684:	2301      	movne	r3, #1
 8005686:	2300      	moveq	r3, #0
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800568e:	f000 fa27 	bl	8005ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005692:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005696:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005698:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800569c:	4619      	mov	r1, r3
 800569e:	4858      	ldr	r0, [pc, #352]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 80056a0:	f006 face 	bl	800bc40 <HAL_TIM_ConfigClockSource>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80056b4:	f000 fa14 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80056b8:	4851      	ldr	r0, [pc, #324]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 80056ba:	f005 fef0 	bl	800b49e <HAL_TIM_PWM_Init>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 80056ce:	f000 fa07 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 80056d2:	484b      	ldr	r0, [pc, #300]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 80056d4:	f005 fe82 	bl	800b3dc <HAL_TIM_OC_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 80056e8:	f000 f9fa 	bl	8005ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 80056f0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80056f4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056f6:	2300      	movs	r3, #0
 80056f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80056fa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80056fe:	4619      	mov	r1, r3
 8005700:	483f      	ldr	r0, [pc, #252]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005702:	f007 f85f 	bl	800c7c4 <HAL_TIMEx_MasterConfigSynchronization>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf14      	ite	ne
 800570c:	2301      	movne	r3, #1
 800570e:	2300      	moveq	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 8005716:	f000 f9e3 	bl	8005ae0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800571a:	2360      	movs	r3, #96	@ 0x60
 800571c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800571e:	2300      	movs	r3, #0
 8005720:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005722:	2302      	movs	r3, #2
 8005724:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005726:	2300      	movs	r3, #0
 8005728:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800572a:	2304      	movs	r3, #4
 800572c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800572e:	2300      	movs	r3, #0
 8005730:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005732:	2300      	movs	r3, #0
 8005734:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005736:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800573a:	2200      	movs	r2, #0
 800573c:	4619      	mov	r1, r3
 800573e:	4830      	ldr	r0, [pc, #192]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005740:	f006 f96a 	bl	800ba18 <HAL_TIM_PWM_ConfigChannel>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8005754:	f000 f9c4 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005758:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800575c:	2204      	movs	r2, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4827      	ldr	r0, [pc, #156]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005762:	f006 f959 	bl	800ba18 <HAL_TIM_PWM_ConfigChannel>
 8005766:	4603      	mov	r3, r0
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8005776:	f000 f9b3 	bl	8005ae0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800577a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800577e:	2208      	movs	r2, #8
 8005780:	4619      	mov	r1, r3
 8005782:	481f      	ldr	r0, [pc, #124]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 8005784:	f006 f948 	bl	800ba18 <HAL_TIM_PWM_ConfigChannel>
 8005788:	4603      	mov	r3, r0
 800578a:	2b00      	cmp	r3, #0
 800578c:	bf14      	ite	ne
 800578e:	2301      	movne	r3, #1
 8005790:	2300      	moveq	r3, #0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b00      	cmp	r3, #0
 8005796:	d001      	beq.n	800579c <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 8005798:	f000 f9a2 	bl	8005ae0 <Error_Handler>
  }

  // =================================================================================

  // =================================================================================
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800579c:	2300      	movs	r3, #0
 800579e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80057a0:	2300      	movs	r3, #0
 80057a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80057a4:	2300      	movs	r3, #0
 80057a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80057b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80057b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80057ba:	2300      	movs	r3, #0
 80057bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80057be:	2300      	movs	r3, #0
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80057c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80057cc:	2300      	movs	r3, #0
 80057ce:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80057d0:	2300      	movs	r3, #0
 80057d2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80057d4:	1d3b      	adds	r3, r7, #4
 80057d6:	4619      	mov	r1, r3
 80057d8:	4809      	ldr	r0, [pc, #36]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 80057da:	f007 f881 	bl	800c8e0 <HAL_TIMEx_ConfigBreakDeadTime>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	bf14      	ite	ne
 80057e4:	2301      	movne	r3, #1
 80057e6:	2300      	moveq	r3, #0
 80057e8:	b2db      	uxtb	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <_ZL12MX_TIM1_Initv+0x1e6>
  {
    Error_Handler();
 80057ee:	f000 f977 	bl	8005ae0 <Error_Handler>
  }
  // =================================================================================
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80057f2:	4803      	ldr	r0, [pc, #12]	@ (8005800 <_ZL12MX_TIM1_Initv+0x1f4>)
 80057f4:	f000 fc2c 	bl	8006050 <HAL_TIM_MspPostInit>

}
 80057f8:	bf00      	nop
 80057fa:	3770      	adds	r7, #112	@ 0x70
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	200007a4 	.word	0x200007a4
 8005804:	40012c00 	.word	0x40012c00

08005808 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800580e:	f107 0310 	add.w	r3, r7, #16
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	609a      	str	r2, [r3, #8]
 800581a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	605a      	str	r2, [r3, #4]
 8005824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005826:	4b25      	ldr	r3, [pc, #148]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005828:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800582c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 800582e:	4b23      	ldr	r3, [pc, #140]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005830:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8005834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005836:	4b21      	ldr	r3, [pc, #132]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005838:	2200      	movs	r2, #0
 800583a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800583c:	4b1f      	ldr	r3, [pc, #124]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 800583e:	2263      	movs	r2, #99	@ 0x63
 8005840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005842:	4b1e      	ldr	r3, [pc, #120]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005844:	2200      	movs	r2, #0
 8005846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005848:	4b1c      	ldr	r3, [pc, #112]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 800584a:	2200      	movs	r2, #0
 800584c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800584e:	481b      	ldr	r0, [pc, #108]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005850:	f005 fcfc 	bl	800b24c <HAL_TIM_Base_Init>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8005864:	f000 f93c 	bl	8005ae0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800586c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800586e:	f107 0310 	add.w	r3, r7, #16
 8005872:	4619      	mov	r1, r3
 8005874:	4811      	ldr	r0, [pc, #68]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 8005876:	f006 f9e3 	bl	800bc40 <HAL_TIM_ConfigClockSource>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800588a:	f000 f929 	bl	8005ae0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800588e:	2300      	movs	r3, #0
 8005890:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005892:	2300      	movs	r3, #0
 8005894:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005896:	1d3b      	adds	r3, r7, #4
 8005898:	4619      	mov	r1, r3
 800589a:	4808      	ldr	r0, [pc, #32]	@ (80058bc <_ZL12MX_TIM2_Initv+0xb4>)
 800589c:	f006 ff92 	bl	800c7c4 <HAL_TIMEx_MasterConfigSynchronization>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	bf14      	ite	ne
 80058a6:	2301      	movne	r3, #1
 80058a8:	2300      	moveq	r3, #0
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 80058b0:	f000 f916 	bl	8005ae0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80058b4:	bf00      	nop
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	200007f0 	.word	0x200007f0

080058c0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80058c6:	4b2e      	ldr	r3, [pc, #184]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058cc:	f043 0304 	orr.w	r3, r3, #4
 80058d0:	6493      	str	r3, [r2, #72]	@ 0x48
 80058d2:	4b2b      	ldr	r3, [pc, #172]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80058de:	4b28      	ldr	r3, [pc, #160]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058e2:	4a27      	ldr	r2, [pc, #156]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058e4:	f043 0301 	orr.w	r3, r3, #1
 80058e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80058ea:	4b25      	ldr	r3, [pc, #148]	@ (8005980 <_ZL11MX_DMA_Initv+0xc0>)
 80058ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]


  hdma_adc1.Instance = DMA1_Channel1;
 80058f6:	4b23      	ldr	r3, [pc, #140]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 80058f8:	4a23      	ldr	r2, [pc, #140]	@ (8005988 <_ZL11MX_DMA_Initv+0xc8>)
 80058fa:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80058fc:	4b21      	ldr	r3, [pc, #132]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 80058fe:	2205      	movs	r2, #5
 8005900:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005902:	4b20      	ldr	r3, [pc, #128]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005904:	2200      	movs	r2, #0
 8005906:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005908:	4b1e      	ldr	r3, [pc, #120]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 800590a:	2200      	movs	r2, #0
 800590c:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800590e:	4b1d      	ldr	r3, [pc, #116]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005910:	2280      	movs	r2, #128	@ 0x80
 8005912:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005914:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005916:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800591a:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800591c:	4b19      	ldr	r3, [pc, #100]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 800591e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005922:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005924:	4b17      	ldr	r3, [pc, #92]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005926:	2220      	movs	r2, #32
 8005928:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800592a:	4b16      	ldr	r3, [pc, #88]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 800592c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005930:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005932:	4814      	ldr	r0, [pc, #80]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005934:	f002 fd40 	bl	80083b8 <HAL_DMA_Init>
 8005938:	4603      	mov	r3, r0
 800593a:	2b00      	cmp	r3, #0
 800593c:	bf14      	ite	ne
 800593e:	2301      	movne	r3, #1
 8005940:	2300      	moveq	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	2b00      	cmp	r3, #0
 8005946:	d001      	beq.n	800594c <_ZL11MX_DMA_Initv+0x8c>
  {
      Error_Handler();
 8005948:	f000 f8ca 	bl	8005ae0 <Error_Handler>
  }
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 800594c:	4b0f      	ldr	r3, [pc, #60]	@ (800598c <_ZL11MX_DMA_Initv+0xcc>)
 800594e:	4a0d      	ldr	r2, [pc, #52]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005950:	655a      	str	r2, [r3, #84]	@ 0x54
 8005952:	4b0c      	ldr	r3, [pc, #48]	@ (8005984 <_ZL11MX_DMA_Initv+0xc4>)
 8005954:	4a0d      	ldr	r2, [pc, #52]	@ (800598c <_ZL11MX_DMA_Initv+0xcc>)
 8005956:	629a      	str	r2, [r3, #40]	@ 0x28



  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration --> ADC_1 */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8005958:	2200      	movs	r2, #0
 800595a:	2100      	movs	r1, #0
 800595c:	200b      	movs	r0, #11
 800595e:	f002 fc04 	bl	800816a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8005962:	200b      	movs	r0, #11
 8005964:	f002 fc1b 	bl	800819e <HAL_NVIC_EnableIRQ>




  /* DMA1_Channel2_IRQn interrupt configuration --> ADC_2*/
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8005968:	2200      	movs	r2, #0
 800596a:	2100      	movs	r1, #0
 800596c:	200c      	movs	r0, #12
 800596e:	f002 fbfc 	bl	800816a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8005972:	200c      	movs	r0, #12
 8005974:	f002 fc13 	bl	800819e <HAL_NVIC_EnableIRQ>

}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	40021000 	.word	0x40021000
 8005984:	20000598 	.word	0x20000598
 8005988:	40020008 	.word	0x40020008
 800598c:	200004c0 	.word	0x200004c0

08005990 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b088      	sub	sp, #32
 8005994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005996:	f107 030c 	add.w	r3, r7, #12
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	605a      	str	r2, [r3, #4]
 80059a0:	609a      	str	r2, [r3, #8]
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80059a6:	4b28      	ldr	r3, [pc, #160]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059aa:	4a27      	ldr	r2, [pc, #156]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059ac:	f043 0320 	orr.w	r3, r3, #32
 80059b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059b2:	4b25      	ldr	r3, [pc, #148]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80059be:	4b22      	ldr	r3, [pc, #136]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059c2:	4a21      	ldr	r2, [pc, #132]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059c4:	f043 0301 	orr.w	r3, r3, #1
 80059c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059ca:	4b1f      	ldr	r3, [pc, #124]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d6:	4b1c      	ldr	r3, [pc, #112]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059da:	4a1b      	ldr	r2, [pc, #108]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059dc:	f043 0302 	orr.w	r3, r3, #2
 80059e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059e2:	4b19      	ldr	r3, [pc, #100]	@ (8005a48 <_ZL12MX_GPIO_Initv+0xb8>)
 80059e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 80059ee:	2200      	movs	r2, #0
 80059f0:	2110      	movs	r1, #16
 80059f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80059f6:	f003 fff9 	bl	80099ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 80059fa:	2200      	movs	r2, #0
 80059fc:	2101      	movs	r1, #1
 80059fe:	4813      	ldr	r0, [pc, #76]	@ (8005a4c <_ZL12MX_GPIO_Initv+0xbc>)
 8005a00:	f003 fff4 	bl	80099ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8005a04:	2310      	movs	r3, #16
 8005a06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8005a14:	f107 030c 	add.w	r3, r7, #12
 8005a18:	4619      	mov	r1, r3
 8005a1a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005a1e:	f003 fe63 	bl	80096e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8005a22:	2301      	movs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a26:	2301      	movs	r3, #1
 8005a28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8005a32:	f107 030c 	add.w	r3, r7, #12
 8005a36:	4619      	mov	r1, r3
 8005a38:	4804      	ldr	r0, [pc, #16]	@ (8005a4c <_ZL12MX_GPIO_Initv+0xbc>)
 8005a3a:	f003 fe55 	bl	80096e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005a3e:	bf00      	nop
 8005a40:	3720      	adds	r7, #32
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	40021000 	.word	0x40021000
 8005a4c:	48000400 	.word	0x48000400

08005a50 <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005a54:	4b08      	ldr	r3, [pc, #32]	@ (8005a78 <_ZL8DWT_Initv+0x28>)
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	4a07      	ldr	r2, [pc, #28]	@ (8005a78 <_ZL8DWT_Initv+0x28>)
 8005a5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005a5e:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8005a60:	4b06      	ldr	r3, [pc, #24]	@ (8005a7c <_ZL8DWT_Initv+0x2c>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a05      	ldr	r2, [pc, #20]	@ (8005a7c <_ZL8DWT_Initv+0x2c>)
 8005a66:	f043 0301 	orr.w	r3, r3, #1
 8005a6a:	6013      	str	r3, [r2, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	e000edf0 	.word	0xe000edf0
 8005a7c:	e0001000 	.word	0xe0001000

08005a80 <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 8005a80:	b480      	push	{r7}
 8005a82:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8005a84:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <_ZL6microsv+0x24>)
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	4b07      	ldr	r3, [pc, #28]	@ (8005aa8 <_ZL6microsv+0x28>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4907      	ldr	r1, [pc, #28]	@ (8005aac <_ZL6microsv+0x2c>)
 8005a8e:	fba1 1303 	umull	r1, r3, r1, r3
 8005a92:	0c9b      	lsrs	r3, r3, #18
 8005a94:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr
 8005aa2:	bf00      	nop
 8005aa4:	e0001000 	.word	0xe0001000
 8005aa8:	200000f4 	.word	0x200000f4
 8005aac:	431bde83 	.word	0x431bde83

08005ab0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac0:	d105      	bne.n	8005ace <HAL_TIM_PeriodElapsedCallback+0x1e>
  {
	  CANFD.test = true;
 8005ac2:	4b05      	ldr	r3, [pc, #20]	@ (8005ad8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	731a      	strb	r2, [r3, #12]
	  simpleFOC.Encoder.updateVelocity();
 8005ac8:	4804      	ldr	r0, [pc, #16]	@ (8005adc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8005aca:	f7fb fd69 	bl	80015a0 <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200004b0 	.word	0x200004b0
 8005adc:	2000025c 	.word	0x2000025c

08005ae0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005ae4:	b672      	cpsid	i
}
 8005ae6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <Error_Handler+0x8>

08005aec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d10b      	bne.n	8005b14 <_Z41__static_initialization_and_destruction_0ii+0x28>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d106      	bne.n	8005b14 <_Z41__static_initialization_and_destruction_0ii+0x28>
simpleFOC simpleFOC;
 8005b06:	480b      	ldr	r0, [pc, #44]	@ (8005b34 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005b08:	f7fe fbd6 	bl	80042b8 <_ZN9simpleFOCC1Ev>
can_fd CANFD(motor_ID);
 8005b0c:	2101      	movs	r1, #1
 8005b0e:	480a      	ldr	r0, [pc, #40]	@ (8005b38 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8005b10:	f7fc f8b4 	bl	8001c7c <_ZN6can_fdC1Ei>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d107      	bne.n	8005b2a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d102      	bne.n	8005b2a <_Z41__static_initialization_and_destruction_0ii+0x3e>
simpleFOC simpleFOC;
 8005b24:	4803      	ldr	r0, [pc, #12]	@ (8005b34 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8005b26:	f7fe fbef 	bl	8004308 <_ZN9simpleFOCD1Ev>
}
 8005b2a:	bf00      	nop
 8005b2c:	3708      	adds	r7, #8
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
 8005b32:	bf00      	nop
 8005b34:	20000248 	.word	0x20000248
 8005b38:	200004b0 	.word	0x200004b0

08005b3c <_GLOBAL__sub_I_simpleFOC>:
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b44:	2001      	movs	r0, #1
 8005b46:	f7ff ffd1 	bl	8005aec <_Z41__static_initialization_and_destruction_0ii>
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <_GLOBAL__sub_D_simpleFOC>:
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
 8005b50:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7ff ffc9 	bl	8005aec <_Z41__static_initialization_and_destruction_0ii>
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b62:	4b0f      	ldr	r3, [pc, #60]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6613      	str	r3, [r2, #96]	@ 0x60
 8005b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	607b      	str	r3, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005b7a:	4b09      	ldr	r3, [pc, #36]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b7e:	4a08      	ldr	r2, [pc, #32]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b84:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b86:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <HAL_MspInit+0x44>)
 8005b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b8e:	603b      	str	r3, [r7, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005b92:	f003 ffe7 	bl	8009b64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40021000 	.word	0x40021000

08005ba4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b0a0      	sub	sp, #128	@ 0x80
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005bac:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	605a      	str	r2, [r3, #4]
 8005bb6:	609a      	str	r2, [r3, #8]
 8005bb8:	60da      	str	r2, [r3, #12]
 8005bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005bbc:	f107 031c 	add.w	r3, r7, #28
 8005bc0:	2250      	movs	r2, #80	@ 0x50
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f008 f86f 	bl	800dca8 <memset>
  if(hadc->Instance==ADC1)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bd2:	d171      	bne.n	8005cb8 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005bd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bd8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005bda:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005bde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005be0:	f107 031c 	add.w	r3, r7, #28
 8005be4:	4618      	mov	r0, r3
 8005be6:	f004 fcc3 	bl	800a570 <HAL_RCCEx_PeriphCLKConfig>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8005bf0:	f7ff ff76 	bl	8005ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005bf4:	4b6d      	ldr	r3, [pc, #436]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	4a6c      	ldr	r2, [pc, #432]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005bfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005bfe:	4b6b      	ldr	r3, [pc, #428]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d10b      	bne.n	8005c1e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005c06:	4b6a      	ldr	r3, [pc, #424]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c0a:	4a69      	ldr	r2, [pc, #420]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c12:	4b67      	ldr	r3, [pc, #412]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c1a:	61bb      	str	r3, [r7, #24]
 8005c1c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c1e:	4b64      	ldr	r3, [pc, #400]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c22:	4a63      	ldr	r2, [pc, #396]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c24:	f043 0301 	orr.w	r3, r3, #1
 8005c28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c2a:	4b61      	ldr	r3, [pc, #388]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005c2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	617b      	str	r3, [r7, #20]
 8005c34:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8005c36:	2301      	movs	r3, #1
 8005c38:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8005c42:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005c46:	4619      	mov	r1, r3
 8005c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005c4c:	f003 fd4c 	bl	80096e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005c50:	4b58      	ldr	r3, [pc, #352]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c52:	4a59      	ldr	r2, [pc, #356]	@ (8005db8 <HAL_ADC_MspInit+0x214>)
 8005c54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005c56:	4b57      	ldr	r3, [pc, #348]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c58:	2205      	movs	r2, #5
 8005c5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005c5c:	4b55      	ldr	r3, [pc, #340]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c62:	4b54      	ldr	r3, [pc, #336]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005c68:	4b52      	ldr	r3, [pc, #328]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c6a:	2280      	movs	r2, #128	@ 0x80
 8005c6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005c6e:	4b51      	ldr	r3, [pc, #324]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005c74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005c76:	4b4f      	ldr	r3, [pc, #316]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005c7e:	4b4d      	ldr	r3, [pc, #308]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c80:	2220      	movs	r2, #32
 8005c82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005c84:	4b4b      	ldr	r3, [pc, #300]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c86:	2200      	movs	r2, #0
 8005c88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005c8a:	484a      	ldr	r0, [pc, #296]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c8c:	f002 fb94 	bl	80083b8 <HAL_DMA_Init>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8005c96:	f7ff ff23 	bl	8005ae0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	4a45      	ldr	r2, [pc, #276]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005c9e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ca0:	4a44      	ldr	r2, [pc, #272]	@ (8005db4 <HAL_ADC_MspInit+0x210>)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2100      	movs	r1, #0
 8005caa:	2012      	movs	r0, #18
 8005cac:	f002 fa5d 	bl	800816a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005cb0:	2012      	movs	r0, #18
 8005cb2:	f002 fa74 	bl	800819e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005cb6:	e075      	b.n	8005da4 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a3f      	ldr	r2, [pc, #252]	@ (8005dbc <HAL_ADC_MspInit+0x218>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d170      	bne.n	8005da4 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005cc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cc6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8005cc8:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8005ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005cce:	f107 031c 	add.w	r3, r7, #28
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f004 fc4c 	bl	800a570 <HAL_RCCEx_PeriphCLKConfig>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8005cde:	f7ff feff 	bl	8005ae0 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005ce2:	4b32      	ldr	r3, [pc, #200]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	4a30      	ldr	r2, [pc, #192]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005cea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005cec:	4b2f      	ldr	r3, [pc, #188]	@ (8005dac <HAL_ADC_MspInit+0x208>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10b      	bne.n	8005d0c <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cf8:	4a2d      	ldr	r2, [pc, #180]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005cfa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005cfe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d00:	4b2b      	ldr	r3, [pc, #172]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005d02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005d08:	613b      	str	r3, [r7, #16]
 8005d0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d0c:	4b28      	ldr	r3, [pc, #160]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d10:	4a27      	ldr	r2, [pc, #156]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005d12:	f043 0301 	orr.w	r3, r3, #1
 8005d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d18:	4b25      	ldr	r3, [pc, #148]	@ (8005db0 <HAL_ADC_MspInit+0x20c>)
 8005d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	60fb      	str	r3, [r7, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8005d24:	2302      	movs	r3, #2
 8005d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8005d30:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8005d34:	4619      	mov	r1, r3
 8005d36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005d3a:	f003 fcd5 	bl	80096e8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8005d3e:	4b20      	ldr	r3, [pc, #128]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d40:	4a20      	ldr	r2, [pc, #128]	@ (8005dc4 <HAL_ADC_MspInit+0x220>)
 8005d42:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8005d44:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d46:	2224      	movs	r2, #36	@ 0x24
 8005d48:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d50:	4b1b      	ldr	r3, [pc, #108]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d52:	2200      	movs	r2, #0
 8005d54:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005d56:	4b1a      	ldr	r3, [pc, #104]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d58:	2280      	movs	r2, #128	@ 0x80
 8005d5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005d5c:	4b18      	ldr	r3, [pc, #96]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005d64:	4b16      	ldr	r3, [pc, #88]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005d6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005d6c:	4b14      	ldr	r3, [pc, #80]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d6e:	2220      	movs	r2, #32
 8005d70:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005d72:	4b13      	ldr	r3, [pc, #76]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d74:	2200      	movs	r2, #0
 8005d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005d78:	4811      	ldr	r0, [pc, #68]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d7a:	f002 fb1d 	bl	80083b8 <HAL_DMA_Init>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8005d84:	f7ff feac 	bl	8005ae0 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d8c:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc0 <HAL_ADC_MspInit+0x21c>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8005d94:	2200      	movs	r2, #0
 8005d96:	2100      	movs	r1, #0
 8005d98:	2012      	movs	r0, #18
 8005d9a:	f002 f9e6 	bl	800816a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8005d9e:	2012      	movs	r0, #18
 8005da0:	f002 f9fd 	bl	800819e <HAL_NVIC_EnableIRQ>
}
 8005da4:	bf00      	nop
 8005da6:	3780      	adds	r7, #128	@ 0x80
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000860 	.word	0x20000860
 8005db0:	40021000 	.word	0x40021000
 8005db4:	20000598 	.word	0x20000598
 8005db8:	40020008 	.word	0x40020008
 8005dbc:	50000100 	.word	0x50000100
 8005dc0:	200005f8 	.word	0x200005f8
 8005dc4:	4002001c 	.word	0x4002001c

08005dc8 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005e00 <HAL_CORDIC_MspInit+0x38>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d10b      	bne.n	8005df2 <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005dda:	4b0a      	ldr	r3, [pc, #40]	@ (8005e04 <HAL_CORDIC_MspInit+0x3c>)
 8005ddc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dde:	4a09      	ldr	r2, [pc, #36]	@ (8005e04 <HAL_CORDIC_MspInit+0x3c>)
 8005de0:	f043 0308 	orr.w	r3, r3, #8
 8005de4:	6493      	str	r3, [r2, #72]	@ 0x48
 8005de6:	4b07      	ldr	r3, [pc, #28]	@ (8005e04 <HAL_CORDIC_MspInit+0x3c>)
 8005de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	40020c00 	.word	0x40020c00
 8005e04:	40021000 	.word	0x40021000

08005e08 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <HAL_CRC_MspInit+0x38>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d10b      	bne.n	8005e32 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e44 <HAL_CRC_MspInit+0x3c>)
 8005e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e1e:	4a09      	ldr	r2, [pc, #36]	@ (8005e44 <HAL_CRC_MspInit+0x3c>)
 8005e20:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005e24:	6493      	str	r3, [r2, #72]	@ 0x48
 8005e26:	4b07      	ldr	r3, [pc, #28]	@ (8005e44 <HAL_CRC_MspInit+0x3c>)
 8005e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e2a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e2e:	60fb      	str	r3, [r7, #12]
 8005e30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40023000 	.word	0x40023000
 8005e44:	40021000 	.word	0x40021000

08005e48 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b09e      	sub	sp, #120	@ 0x78
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e50:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]
 8005e58:	605a      	str	r2, [r3, #4]
 8005e5a:	609a      	str	r2, [r3, #8]
 8005e5c:	60da      	str	r2, [r3, #12]
 8005e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005e60:	f107 0314 	add.w	r3, r7, #20
 8005e64:	2250      	movs	r2, #80	@ 0x50
 8005e66:	2100      	movs	r1, #0
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f007 ff1d 	bl	800dca8 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <HAL_FDCAN_MspInit+0xbc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d141      	bne.n	8005efc <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005e7c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005e7e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e82:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005e84:	f107 0314 	add.w	r3, r7, #20
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f004 fb71 	bl	800a570 <HAL_RCCEx_PeriphCLKConfig>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8005e94:	f7ff fe24 	bl	8005ae0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005ea2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ea4:	4b18      	ldr	r3, [pc, #96]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005ea6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005eac:	613b      	str	r3, [r7, #16]
 8005eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005eb0:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005eb4:	4a14      	ldr	r2, [pc, #80]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005eb6:	f043 0301 	orr.w	r3, r3, #1
 8005eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005ebc:	4b12      	ldr	r3, [pc, #72]	@ (8005f08 <HAL_FDCAN_MspInit+0xc0>)
 8005ebe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	60fb      	str	r3, [r7, #12]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005ec8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8005ecc:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ece:	2302      	movs	r3, #2
 8005ed0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005eda:	2309      	movs	r3, #9
 8005edc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ede:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005ee8:	f003 fbfe 	bl	80096e8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005eec:	2200      	movs	r2, #0
 8005eee:	2100      	movs	r1, #0
 8005ef0:	2015      	movs	r0, #21
 8005ef2:	f002 f93a 	bl	800816a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005ef6:	2015      	movs	r0, #21
 8005ef8:	f002 f951 	bl	800819e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005efc:	bf00      	nop
 8005efe:	3778      	adds	r7, #120	@ 0x78
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40006400 	.word	0x40006400
 8005f08:	40021000 	.word	0x40021000

08005f0c <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a0a      	ldr	r2, [pc, #40]	@ (8005f44 <HAL_FMAC_MspInit+0x38>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d10b      	bne.n	8005f36 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8005f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8005f48 <HAL_FMAC_MspInit+0x3c>)
 8005f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f22:	4a09      	ldr	r2, [pc, #36]	@ (8005f48 <HAL_FMAC_MspInit+0x3c>)
 8005f24:	f043 0310 	orr.w	r3, r3, #16
 8005f28:	6493      	str	r3, [r2, #72]	@ 0x48
 8005f2a:	4b07      	ldr	r3, [pc, #28]	@ (8005f48 <HAL_FMAC_MspInit+0x3c>)
 8005f2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f2e:	f003 0310 	and.w	r3, r3, #16
 8005f32:	60fb      	str	r3, [r7, #12]
 8005f34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8005f36:	bf00      	nop
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	40021400 	.word	0x40021400
 8005f48:	40021000 	.word	0x40021000

08005f4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b08a      	sub	sp, #40	@ 0x28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f54:	f107 0314 	add.w	r3, r7, #20
 8005f58:	2200      	movs	r2, #0
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	605a      	str	r2, [r3, #4]
 8005f5e:	609a      	str	r2, [r3, #8]
 8005f60:	60da      	str	r2, [r3, #12]
 8005f62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a17      	ldr	r2, [pc, #92]	@ (8005fc8 <HAL_SPI_MspInit+0x7c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d128      	bne.n	8005fc0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005f6e:	4b17      	ldr	r3, [pc, #92]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f72:	4a16      	ldr	r2, [pc, #88]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005f78:	6613      	str	r3, [r2, #96]	@ 0x60
 8005f7a:	4b14      	ldr	r3, [pc, #80]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f86:	4b11      	ldr	r3, [pc, #68]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f8a:	4a10      	ldr	r2, [pc, #64]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005f92:	4b0e      	ldr	r3, [pc, #56]	@ (8005fcc <HAL_SPI_MspInit+0x80>)
 8005f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8005f9e:	23e0      	movs	r3, #224	@ 0xe0
 8005fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa2:	2302      	movs	r3, #2
 8005fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005faa:	2302      	movs	r3, #2
 8005fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005fae:	2305      	movs	r3, #5
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb2:	f107 0314 	add.w	r3, r7, #20
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005fbc:	f003 fb94 	bl	80096e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8005fc0:	bf00      	nop
 8005fc2:	3728      	adds	r7, #40	@ 0x28
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	40013000 	.word	0x40013000
 8005fcc:	40021000 	.word	0x40021000

08005fd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8006048 <HAL_TIM_Base_MspInit+0x78>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d114      	bne.n	800600c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fe6:	4a19      	ldr	r2, [pc, #100]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 8005fe8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fec:	6613      	str	r3, [r2, #96]	@ 0x60
 8005fee:	4b17      	ldr	r3, [pc, #92]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 8005ff0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005ff2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	201b      	movs	r0, #27
 8006000:	f002 f8b3 	bl	800816a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006004:	201b      	movs	r0, #27
 8006006:	f002 f8ca 	bl	800819e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800600a:	e018      	b.n	800603e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006014:	d113      	bne.n	800603e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	4a0c      	ldr	r2, [pc, #48]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 800601c:	f043 0301 	orr.w	r3, r3, #1
 8006020:	6593      	str	r3, [r2, #88]	@ 0x58
 8006022:	4b0a      	ldr	r3, [pc, #40]	@ (800604c <HAL_TIM_Base_MspInit+0x7c>)
 8006024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800602e:	2200      	movs	r2, #0
 8006030:	2100      	movs	r1, #0
 8006032:	201c      	movs	r0, #28
 8006034:	f002 f899 	bl	800816a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006038:	201c      	movs	r0, #28
 800603a:	f002 f8b0 	bl	800819e <HAL_NVIC_EnableIRQ>
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	40012c00 	.word	0x40012c00
 800604c:	40021000 	.word	0x40021000

08006050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b088      	sub	sp, #32
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006058:	f107 030c 	add.w	r3, r7, #12
 800605c:	2200      	movs	r2, #0
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	605a      	str	r2, [r3, #4]
 8006062:	609a      	str	r2, [r3, #8]
 8006064:	60da      	str	r2, [r3, #12]
 8006066:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a12      	ldr	r2, [pc, #72]	@ (80060b8 <HAL_TIM_MspPostInit+0x68>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d11d      	bne.n	80060ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006072:	4b12      	ldr	r3, [pc, #72]	@ (80060bc <HAL_TIM_MspPostInit+0x6c>)
 8006074:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006076:	4a11      	ldr	r2, [pc, #68]	@ (80060bc <HAL_TIM_MspPostInit+0x6c>)
 8006078:	f043 0301 	orr.w	r3, r3, #1
 800607c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800607e:	4b0f      	ldr	r3, [pc, #60]	@ (80060bc <HAL_TIM_MspPostInit+0x6c>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 800608a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800608e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006090:	2302      	movs	r3, #2
 8006092:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006094:	2300      	movs	r3, #0
 8006096:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006098:	2303      	movs	r3, #3
 800609a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800609c:	2306      	movs	r3, #6
 800609e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4619      	mov	r1, r3
 80060a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80060aa:	f003 fb1d 	bl	80096e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80060ae:	bf00      	nop
 80060b0:	3720      	adds	r7, #32
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}
 80060b6:	bf00      	nop
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40021000 	.word	0x40021000

080060c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <NMI_Handler+0x4>

080060c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80060c8:	b480      	push	{r7}
 80060ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80060cc:	bf00      	nop
 80060ce:	e7fd      	b.n	80060cc <HardFault_Handler+0x4>

080060d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <MemManage_Handler+0x4>

080060d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80060d8:	b480      	push	{r7}
 80060da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80060dc:	bf00      	nop
 80060de:	e7fd      	b.n	80060dc <BusFault_Handler+0x4>

080060e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80060e4:	bf00      	nop
 80060e6:	e7fd      	b.n	80060e4 <UsageFault_Handler+0x4>

080060e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80060ec:	bf00      	nop
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr

080060f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80060f6:	b480      	push	{r7}
 80060f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80060fa:	bf00      	nop
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006104:	b480      	push	{r7}
 8006106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006108:	bf00      	nop
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006116:	f000 f92b 	bl	8006370 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800611a:	bf00      	nop
 800611c:	bd80      	pop	{r7, pc}
	...

08006120 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006124:	4802      	ldr	r0, [pc, #8]	@ (8006130 <DMA1_Channel1_IRQHandler+0x10>)
 8006126:	f002 fa6a 	bl	80085fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800612a:	bf00      	nop
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000598 	.word	0x20000598

08006134 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006138:	4802      	ldr	r0, [pc, #8]	@ (8006144 <DMA1_Channel2_IRQHandler+0x10>)
 800613a:	f002 fa60 	bl	80085fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800613e:	bf00      	nop
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200005f8 	.word	0x200005f8

08006148 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800614c:	4803      	ldr	r0, [pc, #12]	@ (800615c <ADC1_2_IRQHandler+0x14>)
 800614e:	f000 fe07 	bl	8006d60 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006152:	4803      	ldr	r0, [pc, #12]	@ (8006160 <ADC1_2_IRQHandler+0x18>)
 8006154:	f000 fe04 	bl	8006d60 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	200004c0 	.word	0x200004c0
 8006160:	2000052c 	.word	0x2000052c

08006164 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8006168:	4802      	ldr	r0, [pc, #8]	@ (8006174 <FDCAN1_IT0_IRQHandler+0x10>)
 800616a:	f002 ffa5 	bl	80090b8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800616e:	bf00      	nop
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	200006a4 	.word	0x200006a4

08006178 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800617c:	4802      	ldr	r0, [pc, #8]	@ (8006188 <TIM1_CC_IRQHandler+0x10>)
 800617e:	f005 fafb 	bl	800b778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	200007a4 	.word	0x200007a4

0800618c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006190:	4802      	ldr	r0, [pc, #8]	@ (800619c <TIM2_IRQHandler+0x10>)
 8006192:	f005 faf1 	bl	800b778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006196:	bf00      	nop
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	200007f0 	.word	0x200007f0

080061a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80061a0:	b480      	push	{r7}
 80061a2:	af00      	add	r7, sp, #0
  return 1;
 80061a4:	2301      	movs	r3, #1
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <_kill>:

int _kill(int pid, int sig)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80061ba:	f007 fdd1 	bl	800dd60 <__errno>
 80061be:	4603      	mov	r3, r0
 80061c0:	2216      	movs	r2, #22
 80061c2:	601a      	str	r2, [r3, #0]
  return -1;
 80061c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3708      	adds	r7, #8
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <_exit>:

void _exit (int status)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80061d8:	f04f 31ff 	mov.w	r1, #4294967295
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f7ff ffe7 	bl	80061b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80061e2:	bf00      	nop
 80061e4:	e7fd      	b.n	80061e2 <_exit+0x12>
	...

080061e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80061f0:	4a14      	ldr	r2, [pc, #80]	@ (8006244 <_sbrk+0x5c>)
 80061f2:	4b15      	ldr	r3, [pc, #84]	@ (8006248 <_sbrk+0x60>)
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80061fc:	4b13      	ldr	r3, [pc, #76]	@ (800624c <_sbrk+0x64>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d102      	bne.n	800620a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006204:	4b11      	ldr	r3, [pc, #68]	@ (800624c <_sbrk+0x64>)
 8006206:	4a12      	ldr	r2, [pc, #72]	@ (8006250 <_sbrk+0x68>)
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800620a:	4b10      	ldr	r3, [pc, #64]	@ (800624c <_sbrk+0x64>)
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d207      	bcs.n	8006228 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006218:	f007 fda2 	bl	800dd60 <__errno>
 800621c:	4603      	mov	r3, r0
 800621e:	220c      	movs	r2, #12
 8006220:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006222:	f04f 33ff 	mov.w	r3, #4294967295
 8006226:	e009      	b.n	800623c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006228:	4b08      	ldr	r3, [pc, #32]	@ (800624c <_sbrk+0x64>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800622e:	4b07      	ldr	r3, [pc, #28]	@ (800624c <_sbrk+0x64>)
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4413      	add	r3, r2
 8006236:	4a05      	ldr	r2, [pc, #20]	@ (800624c <_sbrk+0x64>)
 8006238:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800623a:	68fb      	ldr	r3, [r7, #12]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2001c000 	.word	0x2001c000
 8006248:	00000400 	.word	0x00000400
 800624c:	20000864 	.word	0x20000864
 8006250:	200009b8 	.word	0x200009b8

08006254 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <SystemInit+0x20>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625e:	4a05      	ldr	r2, [pc, #20]	@ (8006274 <SystemInit+0x20>)
 8006260:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006264:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
 }
 8006268:	bf00      	nop
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	e000ed00 	.word	0xe000ed00

08006278 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006278:	480d      	ldr	r0, [pc, #52]	@ (80062b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800627a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800627c:	f7ff ffea 	bl	8006254 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006280:	480c      	ldr	r0, [pc, #48]	@ (80062b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8006282:	490d      	ldr	r1, [pc, #52]	@ (80062b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006284:	4a0d      	ldr	r2, [pc, #52]	@ (80062bc <LoopForever+0xe>)
  movs r3, #0
 8006286:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006288:	e002      	b.n	8006290 <LoopCopyDataInit>

0800628a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800628a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800628c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800628e:	3304      	adds	r3, #4

08006290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006294:	d3f9      	bcc.n	800628a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006296:	4a0a      	ldr	r2, [pc, #40]	@ (80062c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006298:	4c0a      	ldr	r4, [pc, #40]	@ (80062c4 <LoopForever+0x16>)
  movs r3, #0
 800629a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800629c:	e001      	b.n	80062a2 <LoopFillZerobss>

0800629e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800629e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80062a0:	3204      	adds	r2, #4

080062a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80062a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80062a4:	d3fb      	bcc.n	800629e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80062a6:	f007 fd61 	bl	800dd6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80062aa:	f7fe fedd 	bl	8005068 <main>

080062ae <LoopForever>:

LoopForever:
    b LoopForever
 80062ae:	e7fe      	b.n	80062ae <LoopForever>
  ldr   r0, =_estack
 80062b0:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 80062b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80062b8:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80062bc:	0800dfe4 	.word	0x0800dfe4
  ldr r2, =_sbss
 80062c0:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80062c4:	200009b8 	.word	0x200009b8

080062c8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80062c8:	e7fe      	b.n	80062c8 <ADC3_IRQHandler>

080062ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b082      	sub	sp, #8
 80062ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062d0:	2300      	movs	r3, #0
 80062d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062d4:	2003      	movs	r0, #3
 80062d6:	f001 ff3d 	bl	8008154 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062da:	200f      	movs	r0, #15
 80062dc:	f000 f80e 	bl	80062fc <HAL_InitTick>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	71fb      	strb	r3, [r7, #7]
 80062ea:	e001      	b.n	80062f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062ec:	f7ff fc36 	bl	8005b5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062f0:	79fb      	ldrb	r3, [r7, #7]

}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3708      	adds	r7, #8
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
	...

080062fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006304:	2300      	movs	r3, #0
 8006306:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006308:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <HAL_InitTick+0x68>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d022      	beq.n	8006356 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006310:	4b15      	ldr	r3, [pc, #84]	@ (8006368 <HAL_InitTick+0x6c>)
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	4b13      	ldr	r3, [pc, #76]	@ (8006364 <HAL_InitTick+0x68>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800631c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006320:	fbb2 f3f3 	udiv	r3, r2, r3
 8006324:	4618      	mov	r0, r3
 8006326:	f001 ff48 	bl	80081ba <HAL_SYSTICK_Config>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10f      	bne.n	8006350 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2b0f      	cmp	r3, #15
 8006334:	d809      	bhi.n	800634a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006336:	2200      	movs	r2, #0
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	f04f 30ff 	mov.w	r0, #4294967295
 800633e:	f001 ff14 	bl	800816a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006342:	4a0a      	ldr	r2, [pc, #40]	@ (800636c <HAL_InitTick+0x70>)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e007      	b.n	800635a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800634a:	2301      	movs	r3, #1
 800634c:	73fb      	strb	r3, [r7, #15]
 800634e:	e004      	b.n	800635a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006350:	2301      	movs	r3, #1
 8006352:	73fb      	strb	r3, [r7, #15]
 8006354:	e001      	b.n	800635a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800635a:	7bfb      	ldrb	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	200000fc 	.word	0x200000fc
 8006368:	200000f4 	.word	0x200000f4
 800636c:	200000f8 	.word	0x200000f8

08006370 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006370:	b480      	push	{r7}
 8006372:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006374:	4b05      	ldr	r3, [pc, #20]	@ (800638c <HAL_IncTick+0x1c>)
 8006376:	681a      	ldr	r2, [r3, #0]
 8006378:	4b05      	ldr	r3, [pc, #20]	@ (8006390 <HAL_IncTick+0x20>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4413      	add	r3, r2
 800637e:	4a03      	ldr	r2, [pc, #12]	@ (800638c <HAL_IncTick+0x1c>)
 8006380:	6013      	str	r3, [r2, #0]
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	20000868 	.word	0x20000868
 8006390:	200000fc 	.word	0x200000fc

08006394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return uwTick;
 8006398:	4b03      	ldr	r3, [pc, #12]	@ (80063a8 <HAL_GetTick+0x14>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000868 	.word	0x20000868

080063ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b084      	sub	sp, #16
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80063b4:	f7ff ffee 	bl	8006394 <HAL_GetTick>
 80063b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c4:	d004      	beq.n	80063d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80063c6:	4b09      	ldr	r3, [pc, #36]	@ (80063ec <HAL_Delay+0x40>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	4413      	add	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063d0:	bf00      	nop
 80063d2:	f7ff ffdf 	bl	8006394 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d8f7      	bhi.n	80063d2 <HAL_Delay+0x26>
  {
  }
}
 80063e2:	bf00      	nop
 80063e4:	bf00      	nop
 80063e6:	3710      	adds	r7, #16
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	200000fc 	.word	0x200000fc

080063f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	431a      	orrs	r2, r3
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	609a      	str	r2, [r3, #8]
}
 800640a:	bf00      	nop
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	431a      	orrs	r2, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	609a      	str	r2, [r3, #8]
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800643c:	b480      	push	{r7}
 800643e:	b083      	sub	sp, #12
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800644c:	4618      	mov	r0, r3
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
 8006464:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	3360      	adds	r3, #96	@ 0x60
 800646a:	461a      	mov	r2, r3
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006474:	697b      	ldr	r3, [r7, #20]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	4b08      	ldr	r3, [pc, #32]	@ (800649c <LL_ADC_SetOffset+0x44>)
 800647a:	4013      	ands	r3, r2
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	430a      	orrs	r2, r1
 8006486:	4313      	orrs	r3, r2
 8006488:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006490:	bf00      	nop
 8006492:	371c      	adds	r7, #28
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr
 800649c:	03fff000 	.word	0x03fff000

080064a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	3360      	adds	r3, #96	@ 0x60
 80064ae:	461a      	mov	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr

080064cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b087      	sub	sp, #28
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	60f8      	str	r0, [r7, #12]
 80064d4:	60b9      	str	r1, [r7, #8]
 80064d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3360      	adds	r3, #96	@ 0x60
 80064dc:	461a      	mov	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	431a      	orrs	r2, r3
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80064f6:	bf00      	nop
 80064f8:	371c      	adds	r7, #28
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr

08006502 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8006502:	b480      	push	{r7}
 8006504:	b087      	sub	sp, #28
 8006506:	af00      	add	r7, sp, #0
 8006508:	60f8      	str	r0, [r7, #12]
 800650a:	60b9      	str	r1, [r7, #8]
 800650c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	3360      	adds	r3, #96	@ 0x60
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	4413      	add	r3, r2
 800651a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	431a      	orrs	r2, r3
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800652c:	bf00      	nop
 800652e:	371c      	adds	r7, #28
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3360      	adds	r3, #96	@ 0x60
 8006548:	461a      	mov	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	431a      	orrs	r2, r3
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8006562:	bf00      	nop
 8006564:	371c      	adds	r7, #28
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	615a      	str	r2, [r3, #20]
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d101      	bne.n	80065ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80065a8:	2301      	movs	r3, #1
 80065aa:	e000      	b.n	80065ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b087      	sub	sp, #28
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	3330      	adds	r3, #48	@ 0x30
 80065ca:	461a      	mov	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	009b      	lsls	r3, r3, #2
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	4413      	add	r3, r2
 80065d8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	f003 031f 	and.w	r3, r3, #31
 80065e4:	211f      	movs	r1, #31
 80065e6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	401a      	ands	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	0e9b      	lsrs	r3, r3, #26
 80065f2:	f003 011f 	and.w	r1, r3, #31
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f003 031f 	and.w	r3, r3, #31
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	431a      	orrs	r2, r3
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006606:	bf00      	nop
 8006608:	371c      	adds	r7, #28
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr

08006612 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8006612:	b480      	push	{r7}
 8006614:	b083      	sub	sp, #12
 8006616:	af00      	add	r7, sp, #0
 8006618:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800661e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800662a:	2300      	movs	r3, #0
}
 800662c:	4618      	mov	r0, r3
 800662e:	370c      	adds	r7, #12
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3314      	adds	r3, #20
 8006648:	461a      	mov	r2, r3
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	0e5b      	lsrs	r3, r3, #25
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	f003 0304 	and.w	r3, r3, #4
 8006654:	4413      	add	r3, r2
 8006656:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8006658:	697b      	ldr	r3, [r7, #20]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	0d1b      	lsrs	r3, r3, #20
 8006660:	f003 031f 	and.w	r3, r3, #31
 8006664:	2107      	movs	r1, #7
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	401a      	ands	r2, r3
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	0d1b      	lsrs	r3, r3, #20
 8006672:	f003 031f 	and.w	r3, r3, #31
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	fa01 f303 	lsl.w	r3, r1, r3
 800667c:	431a      	orrs	r2, r3
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006682:	bf00      	nop
 8006684:	371c      	adds	r7, #28
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
	...

08006690 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006690:	b480      	push	{r7}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	43db      	mvns	r3, r3
 80066aa:	401a      	ands	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f003 0318 	and.w	r3, r3, #24
 80066b2:	4908      	ldr	r1, [pc, #32]	@ (80066d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80066b4:	40d9      	lsrs	r1, r3
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	400b      	ands	r3, r1
 80066ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066be:	431a      	orrs	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80066c6:	bf00      	nop
 80066c8:	3714      	adds	r7, #20
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	0007ffff 	.word	0x0007ffff

080066d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 031f 	and.w	r3, r3, #31
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	689b      	ldr	r3, [r3, #8]
 8006700:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8006704:	4618      	mov	r0, r3
 8006706:	370c      	adds	r7, #12
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr

08006710 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8006720:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	6093      	str	r3, [r2, #8]
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006744:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006748:	d101      	bne.n	800674e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800674a:	2301      	movs	r3, #1
 800674c:	e000      	b.n	8006750 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800674e:	2300      	movs	r3, #0
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800676c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006770:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006798:	d101      	bne.n	800679e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80067bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80067c0:	f043 0201 	orr.w	r2, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f003 0301 	and.w	r3, r3, #1
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <LL_ADC_IsEnabled+0x18>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e000      	b.n	80067ee <LL_ADC_IsEnabled+0x1a>
 80067ec:	2300      	movs	r3, #0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr

080067fa <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80067fa:	b480      	push	{r7}
 80067fc:	b083      	sub	sp, #12
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800680a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800680e:	f043 0204 	orr.w	r2, r3, #4
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006816:	bf00      	nop
 8006818:	370c      	adds	r7, #12
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006822:	b480      	push	{r7}
 8006824:	b083      	sub	sp, #12
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d101      	bne.n	800683a <LL_ADC_REG_IsConversionOngoing+0x18>
 8006836:	2301      	movs	r3, #1
 8006838:	e000      	b.n	800683c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f003 0308 	and.w	r3, r3, #8
 8006858:	2b08      	cmp	r3, #8
 800685a:	d101      	bne.n	8006860 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
	...

08006870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006870:	b590      	push	{r4, r7, lr}
 8006872:	b089      	sub	sp, #36	@ 0x24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d101      	bne.n	800688a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e19b      	b.n	8006bc2 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006894:	2b00      	cmp	r3, #0
 8006896:	d109      	bne.n	80068ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f7ff f983 	bl	8005ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7ff ff3f 	bl	8006734 <LL_ADC_IsDeepPowerDownEnabled>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f7ff ff25 	bl	8006710 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f7ff ff5a 	bl	8006784 <LL_ADC_IsInternalRegulatorEnabled>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d115      	bne.n	8006902 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4618      	mov	r0, r3
 80068dc:	f7ff ff3e 	bl	800675c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80068e0:	4b97      	ldr	r3, [pc, #604]	@ (8006b40 <HAL_ADC_Init+0x2d0>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	099b      	lsrs	r3, r3, #6
 80068e6:	4a97      	ldr	r2, [pc, #604]	@ (8006b44 <HAL_ADC_Init+0x2d4>)
 80068e8:	fba2 2303 	umull	r2, r3, r2, r3
 80068ec:	099b      	lsrs	r3, r3, #6
 80068ee:	3301      	adds	r3, #1
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068f4:	e002      	b.n	80068fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	3b01      	subs	r3, #1
 80068fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1f9      	bne.n	80068f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff ff3c 	bl	8006784 <LL_ADC_IsInternalRegulatorEnabled>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006916:	f043 0210 	orr.w	r2, r3, #16
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006922:	f043 0201 	orr.w	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4618      	mov	r0, r3
 8006934:	f7ff ff75 	bl	8006822 <LL_ADC_REG_IsConversionOngoing>
 8006938:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800693e:	f003 0310 	and.w	r3, r3, #16
 8006942:	2b00      	cmp	r3, #0
 8006944:	f040 8134 	bne.w	8006bb0 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f040 8130 	bne.w	8006bb0 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006954:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8006958:	f043 0202 	orr.w	r2, r3, #2
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4618      	mov	r0, r3
 8006966:	f7ff ff35 	bl	80067d4 <LL_ADC_IsEnabled>
 800696a:	4603      	mov	r3, r0
 800696c:	2b00      	cmp	r3, #0
 800696e:	d137      	bne.n	80069e0 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006978:	d004      	beq.n	8006984 <HAL_ADC_Init+0x114>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a72      	ldr	r2, [pc, #456]	@ (8006b48 <HAL_ADC_Init+0x2d8>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d10f      	bne.n	80069a4 <HAL_ADC_Init+0x134>
 8006984:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006988:	f7ff ff24 	bl	80067d4 <LL_ADC_IsEnabled>
 800698c:	4604      	mov	r4, r0
 800698e:	486e      	ldr	r0, [pc, #440]	@ (8006b48 <HAL_ADC_Init+0x2d8>)
 8006990:	f7ff ff20 	bl	80067d4 <LL_ADC_IsEnabled>
 8006994:	4603      	mov	r3, r0
 8006996:	4323      	orrs	r3, r4
 8006998:	2b00      	cmp	r3, #0
 800699a:	bf0c      	ite	eq
 800699c:	2301      	moveq	r3, #1
 800699e:	2300      	movne	r3, #0
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	e008      	b.n	80069b6 <HAL_ADC_Init+0x146>
 80069a4:	4869      	ldr	r0, [pc, #420]	@ (8006b4c <HAL_ADC_Init+0x2dc>)
 80069a6:	f7ff ff15 	bl	80067d4 <LL_ADC_IsEnabled>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	bf0c      	ite	eq
 80069b0:	2301      	moveq	r3, #1
 80069b2:	2300      	movne	r3, #0
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d012      	beq.n	80069e0 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80069c2:	d004      	beq.n	80069ce <HAL_ADC_Init+0x15e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a5f      	ldr	r2, [pc, #380]	@ (8006b48 <HAL_ADC_Init+0x2d8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_ADC_Init+0x162>
 80069ce:	4a60      	ldr	r2, [pc, #384]	@ (8006b50 <HAL_ADC_Init+0x2e0>)
 80069d0:	e000      	b.n	80069d4 <HAL_ADC_Init+0x164>
 80069d2:	4a60      	ldr	r2, [pc, #384]	@ (8006b54 <HAL_ADC_Init+0x2e4>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	4619      	mov	r1, r3
 80069da:	4610      	mov	r0, r2
 80069dc:	f7ff fd08 	bl	80063f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	7f5b      	ldrb	r3, [r3, #29]
 80069e4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80069ea:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80069f0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80069f6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80069fe:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006a00:	4313      	orrs	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d106      	bne.n	8006a1c <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	3b01      	subs	r3, #1
 8006a14:	045b      	lsls	r3, r3, #17
 8006a16:	69ba      	ldr	r2, [r7, #24]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d009      	beq.n	8006a38 <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a30:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006a32:	69ba      	ldr	r2, [r7, #24]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4b46      	ldr	r3, [pc, #280]	@ (8006b58 <HAL_ADC_Init+0x2e8>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	6812      	ldr	r2, [r2, #0]
 8006a46:	69b9      	ldr	r1, [r7, #24]
 8006a48:	430b      	orrs	r3, r1
 8006a4a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7ff feee 	bl	8006848 <LL_ADC_INJ_IsConversionOngoing>
 8006a6c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d17b      	bne.n	8006b6c <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d178      	bne.n	8006b6c <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a7e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a86:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68db      	ldr	r3, [r3, #12]
 8006a92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a96:	f023 0302 	bic.w	r3, r3, #2
 8006a9a:	687a      	ldr	r2, [r7, #4]
 8006a9c:	6812      	ldr	r2, [r2, #0]
 8006a9e:	69b9      	ldr	r1, [r7, #24]
 8006aa0:	430b      	orrs	r3, r1
 8006aa2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d017      	beq.n	8006adc <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006aba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006ac4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	6911      	ldr	r1, [r2, #16]
 8006ad0:	687a      	ldr	r2, [r7, #4]
 8006ad2:	6812      	ldr	r2, [r2, #0]
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006ada:	e013      	b.n	8006b04 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006aea:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6812      	ldr	r2, [r2, #0]
 8006af8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8006afc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8006b00:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d126      	bne.n	8006b5c <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	691b      	ldr	r3, [r3, #16]
 8006b14:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b18:	f023 0304 	bic.w	r3, r3, #4
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006b24:	4311      	orrs	r1, r2
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006b2a:	4311      	orrs	r1, r2
 8006b2c:	687a      	ldr	r2, [r7, #4]
 8006b2e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8006b30:	430a      	orrs	r2, r1
 8006b32:	431a      	orrs	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	611a      	str	r2, [r3, #16]
 8006b3e:	e015      	b.n	8006b6c <HAL_ADC_Init+0x2fc>
 8006b40:	200000f4 	.word	0x200000f4
 8006b44:	053e2d63 	.word	0x053e2d63
 8006b48:	50000100 	.word	0x50000100
 8006b4c:	50000400 	.word	0x50000400
 8006b50:	50000300 	.word	0x50000300
 8006b54:	50000700 	.word	0x50000700
 8006b58:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f022 0201 	bic.w	r2, r2, #1
 8006b6a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d10c      	bne.n	8006b8e <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b7a:	f023 010f 	bic.w	r1, r3, #15
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	430a      	orrs	r2, r1
 8006b8a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006b8c:	e007      	b.n	8006b9e <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f022 020f 	bic.w	r2, r2, #15
 8006b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ba2:	f023 0303 	bic.w	r3, r3, #3
 8006ba6:	f043 0201 	orr.w	r2, r3, #1
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bae:	e007      	b.n	8006bc0 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb4:	f043 0210 	orr.w	r2, r3, #16
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006bc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3724      	adds	r7, #36	@ 0x24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd90      	pop	{r4, r7, pc}
 8006bca:	bf00      	nop

08006bcc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b086      	sub	sp, #24
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006be0:	d004      	beq.n	8006bec <HAL_ADC_Start_DMA+0x20>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a57      	ldr	r2, [pc, #348]	@ (8006d44 <HAL_ADC_Start_DMA+0x178>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d101      	bne.n	8006bf0 <HAL_ADC_Start_DMA+0x24>
 8006bec:	4b56      	ldr	r3, [pc, #344]	@ (8006d48 <HAL_ADC_Start_DMA+0x17c>)
 8006bee:	e000      	b.n	8006bf2 <HAL_ADC_Start_DMA+0x26>
 8006bf0:	4b56      	ldr	r3, [pc, #344]	@ (8006d4c <HAL_ADC_Start_DMA+0x180>)
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	f7ff fd70 	bl	80066d8 <LL_ADC_GetMultimode>
 8006bf8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fe0f 	bl	8006822 <LL_ADC_REG_IsConversionOngoing>
 8006c04:	4603      	mov	r3, r0
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	f040 8094 	bne.w	8006d34 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_ADC_Start_DMA+0x4e>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e08f      	b.n	8006d3a <HAL_ADC_Start_DMA+0x16e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a4a      	ldr	r2, [pc, #296]	@ (8006d50 <HAL_ADC_Start_DMA+0x184>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d008      	beq.n	8006c3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d005      	beq.n	8006c3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b05      	cmp	r3, #5
 8006c36:	d002      	beq.n	8006c3e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b09      	cmp	r3, #9
 8006c3c:	d173      	bne.n	8006d26 <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 ff1c 	bl	8007a7c <ADC_Enable>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d166      	bne.n	8006d1c <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c52:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006c56:	f023 0301 	bic.w	r3, r3, #1
 8006c5a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a37      	ldr	r2, [pc, #220]	@ (8006d44 <HAL_ADC_Start_DMA+0x178>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d002      	beq.n	8006c72 <HAL_ADC_Start_DMA+0xa6>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	e001      	b.n	8006c76 <HAL_ADC_Start_DMA+0xaa>
 8006c72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d002      	beq.n	8006c84 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d105      	bne.n	8006c90 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d006      	beq.n	8006caa <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca0:	f023 0206 	bic.w	r2, r3, #6
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	661a      	str	r2, [r3, #96]	@ 0x60
 8006ca8:	e002      	b.n	8006cb0 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cb4:	4a27      	ldr	r2, [pc, #156]	@ (8006d54 <HAL_ADC_Start_DMA+0x188>)
 8006cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cbc:	4a26      	ldr	r2, [pc, #152]	@ (8006d58 <HAL_ADC_Start_DMA+0x18c>)
 8006cbe:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cc4:	4a25      	ldr	r2, [pc, #148]	@ (8006d5c <HAL_ADC_Start_DMA+0x190>)
 8006cc6:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	221c      	movs	r2, #28
 8006cce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f042 0210 	orr.w	r2, r2, #16
 8006ce6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	68da      	ldr	r2, [r3, #12]
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	3340      	adds	r3, #64	@ 0x40
 8006d02:	4619      	mov	r1, r3
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f001 fbfe 	bl	8008508 <HAL_DMA_Start_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7ff fd70 	bl	80067fa <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8006d1a:	e00d      	b.n	8006d38 <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8006d24:	e008      	b.n	8006d38 <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8006d32:	e001      	b.n	8006d38 <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006d34:	2302      	movs	r3, #2
 8006d36:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	50000100 	.word	0x50000100
 8006d48:	50000300 	.word	0x50000300
 8006d4c:	50000700 	.word	0x50000700
 8006d50:	50000400 	.word	0x50000400
 8006d54:	08007ba9 	.word	0x08007ba9
 8006d58:	08007c81 	.word	0x08007c81
 8006d5c:	08007c9d 	.word	0x08007c9d

08006d60 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	@ 0x28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8006d68:	2300      	movs	r3, #0
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006d84:	d004      	beq.n	8006d90 <HAL_ADC_IRQHandler+0x30>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a87      	ldr	r2, [pc, #540]	@ (8006fa8 <HAL_ADC_IRQHandler+0x248>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d101      	bne.n	8006d94 <HAL_ADC_IRQHandler+0x34>
 8006d90:	4b86      	ldr	r3, [pc, #536]	@ (8006fac <HAL_ADC_IRQHandler+0x24c>)
 8006d92:	e000      	b.n	8006d96 <HAL_ADC_IRQHandler+0x36>
 8006d94:	4b86      	ldr	r3, [pc, #536]	@ (8006fb0 <HAL_ADC_IRQHandler+0x250>)
 8006d96:	4618      	mov	r0, r3
 8006d98:	f7ff fc9e 	bl	80066d8 <LL_ADC_GetMultimode>
 8006d9c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	f003 0302 	and.w	r3, r3, #2
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d017      	beq.n	8006dd8 <HAL_ADC_IRQHandler+0x78>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d012      	beq.n	8006dd8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d105      	bne.n	8006dca <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc2:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 ffce 	bl	8007d6c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2202      	movs	r2, #2
 8006dd6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f003 0304 	and.w	r3, r3, #4
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d004      	beq.n	8006dec <HAL_ADC_IRQHandler+0x8c>
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	f003 0304 	and.w	r3, r3, #4
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10a      	bne.n	8006e02 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8085 	beq.w	8006f02 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d07f      	beq.n	8006f02 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e06:	f003 0310 	and.w	r3, r3, #16
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d105      	bne.n	8006e1a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e12:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f7ff fbb8 	bl	8006594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006e24:	4603      	mov	r3, r0
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d064      	beq.n	8006ef4 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa8 <HAL_ADC_IRQHandler+0x248>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d002      	beq.n	8006e3a <HAL_ADC_IRQHandler+0xda>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	e001      	b.n	8006e3e <HAL_ADC_IRQHandler+0xde>
 8006e3a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	6812      	ldr	r2, [r2, #0]
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d008      	beq.n	8006e58 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d005      	beq.n	8006e58 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2b05      	cmp	r3, #5
 8006e50:	d002      	beq.n	8006e58 <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d104      	bne.n	8006e62 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	623b      	str	r3, [r7, #32]
 8006e60:	e00d      	b.n	8006e7e <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a50      	ldr	r2, [pc, #320]	@ (8006fa8 <HAL_ADC_IRQHandler+0x248>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d002      	beq.n	8006e72 <HAL_ADC_IRQHandler+0x112>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	e001      	b.n	8006e76 <HAL_ADC_IRQHandler+0x116>
 8006e72:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006e76:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	68db      	ldr	r3, [r3, #12]
 8006e7c:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d135      	bne.n	8006ef4 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f003 0308 	and.w	r3, r3, #8
 8006e92:	2b08      	cmp	r3, #8
 8006e94:	d12e      	bne.n	8006ef4 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f7ff fcc1 	bl	8006822 <LL_ADC_REG_IsConversionOngoing>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d11a      	bne.n	8006edc <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 020c 	bic.w	r2, r2, #12
 8006eb4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eba:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d112      	bne.n	8006ef4 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ed2:	f043 0201 	orr.w	r2, r3, #1
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006eda:	e00b      	b.n	8006ef4 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ee0:	f043 0210 	orr.w	r2, r3, #16
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006eec:	f043 0201 	orr.w	r2, r3, #1
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 f96d 	bl	80071d4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	220c      	movs	r2, #12
 8006f00:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d004      	beq.n	8006f16 <HAL_ADC_IRQHandler+0x1b6>
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	f003 0320 	and.w	r3, r3, #32
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10b      	bne.n	8006f2e <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80a1 	beq.w	8007064 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	f000 809b 	beq.w	8007064 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f32:	f003 0310 	and.w	r3, r3, #16
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d105      	bne.n	8006f46 <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f3e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff fb61 	bl	8006612 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8006f50:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7ff fb1c 	bl	8006594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006f5c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a11      	ldr	r2, [pc, #68]	@ (8006fa8 <HAL_ADC_IRQHandler+0x248>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d002      	beq.n	8006f6e <HAL_ADC_IRQHandler+0x20e>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	e001      	b.n	8006f72 <HAL_ADC_IRQHandler+0x212>
 8006f6e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	6812      	ldr	r2, [r2, #0]
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d008      	beq.n	8006f8c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d002      	beq.n	8006f8c <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2b07      	cmp	r3, #7
 8006f8a:	d104      	bne.n	8006f96 <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	623b      	str	r3, [r7, #32]
 8006f94:	e014      	b.n	8006fc0 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a03      	ldr	r2, [pc, #12]	@ (8006fa8 <HAL_ADC_IRQHandler+0x248>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <HAL_ADC_IRQHandler+0x254>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	e008      	b.n	8006fb8 <HAL_ADC_IRQHandler+0x258>
 8006fa6:	bf00      	nop
 8006fa8:	50000100 	.word	0x50000100
 8006fac:	50000300 	.word	0x50000300
 8006fb0:	50000700 	.word	0x50000700
 8006fb4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8006fb8:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d047      	beq.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d007      	beq.n	8006fe0 <HAL_ADC_IRQHandler+0x280>
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d03f      	beq.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8006fd6:	6a3b      	ldr	r3, [r7, #32]
 8006fd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d13a      	bne.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fea:	2b40      	cmp	r3, #64	@ 0x40
 8006fec:	d133      	bne.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006fee:	6a3b      	ldr	r3, [r7, #32]
 8006ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d12e      	bne.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	f7ff fc23 	bl	8006848 <LL_ADC_INJ_IsConversionOngoing>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d11a      	bne.n	800703e <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8007016:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800701c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007034:	f043 0201 	orr.w	r2, r3, #1
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800703c:	e00b      	b.n	8007056 <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007042:	f043 0210 	orr.w	r2, r3, #16
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800704e:	f043 0201 	orr.w	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 fe60 	bl	8007d1c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2260      	movs	r2, #96	@ 0x60
 8007062:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800706a:	2b00      	cmp	r3, #0
 800706c:	d011      	beq.n	8007092 <HAL_ADC_IRQHandler+0x332>
 800706e:	69bb      	ldr	r3, [r7, #24]
 8007070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800707c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f8b9 	bl	80071fc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2280      	movs	r2, #128	@ 0x80
 8007090:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007098:	2b00      	cmp	r3, #0
 800709a:	d012      	beq.n	80070c2 <HAL_ADC_IRQHandler+0x362>
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00d      	beq.n	80070c2 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 fe46 	bl	8007d44 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80070c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d012      	beq.n	80070f2 <HAL_ADC_IRQHandler+0x392>
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00d      	beq.n	80070f2 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80070da:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fe38 	bl	8007d58 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070f0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f003 0310 	and.w	r3, r3, #16
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d043      	beq.n	8007184 <HAL_ADC_IRQHandler+0x424>
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f003 0310 	and.w	r3, r3, #16
 8007102:	2b00      	cmp	r3, #0
 8007104:	d03e      	beq.n	8007184 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 800710e:	2301      	movs	r3, #1
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
 8007112:	e021      	b.n	8007158 <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8007114:	697b      	ldr	r3, [r7, #20]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d015      	beq.n	8007146 <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007122:	d004      	beq.n	800712e <HAL_ADC_IRQHandler+0x3ce>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a27      	ldr	r2, [pc, #156]	@ (80071c8 <HAL_ADC_IRQHandler+0x468>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d101      	bne.n	8007132 <HAL_ADC_IRQHandler+0x3d2>
 800712e:	4b27      	ldr	r3, [pc, #156]	@ (80071cc <HAL_ADC_IRQHandler+0x46c>)
 8007130:	e000      	b.n	8007134 <HAL_ADC_IRQHandler+0x3d4>
 8007132:	4b27      	ldr	r3, [pc, #156]	@ (80071d0 <HAL_ADC_IRQHandler+0x470>)
 8007134:	4618      	mov	r0, r3
 8007136:	f7ff fadd 	bl	80066f4 <LL_ADC_GetMultiDMATransfer>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d00b      	beq.n	8007158 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8007140:	2301      	movs	r3, #1
 8007142:	627b      	str	r3, [r7, #36]	@ 0x24
 8007144:	e008      	b.n	8007158 <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	f003 0301 	and.w	r3, r3, #1
 8007150:	2b00      	cmp	r3, #0
 8007152:	d001      	beq.n	8007158 <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 8007154:	2301      	movs	r3, #1
 8007156:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	2b01      	cmp	r3, #1
 800715c:	d10e      	bne.n	800717c <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007162:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800716e:	f043 0202 	orr.w	r2, r3, #2
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f84a 	bl	8007210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2210      	movs	r2, #16
 8007182:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800718a:	2b00      	cmp	r3, #0
 800718c:	d018      	beq.n	80071c0 <HAL_ADC_IRQHandler+0x460>
 800718e:	69bb      	ldr	r3, [r7, #24]
 8007190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007194:	2b00      	cmp	r3, #0
 8007196:	d013      	beq.n	80071c0 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800719c:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071a8:	f043 0208 	orr.w	r2, r3, #8
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80071b8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 fdb8 	bl	8007d30 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80071c0:	bf00      	nop
 80071c2:	3728      	adds	r7, #40	@ 0x28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	50000100 	.word	0x50000100
 80071cc:	50000300 	.word	0x50000300
 80071d0:	50000700 	.word	0x50000700

080071d4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80071f0:	bf00      	nop
 80071f2:	370c      	adds	r7, #12
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr

080071fc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b0b6      	sub	sp, #216	@ 0xd8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8007234:	2300      	movs	r3, #0
 8007236:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800723e:	2b01      	cmp	r3, #1
 8007240:	d102      	bne.n	8007248 <HAL_ADC_ConfigChannel+0x24>
 8007242:	2302      	movs	r3, #2
 8007244:	f000 bc04 	b.w	8007a50 <HAL_ADC_ConfigChannel+0x82c>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4618      	mov	r0, r3
 8007256:	f7ff fae4 	bl	8006822 <LL_ADC_REG_IsConversionOngoing>
 800725a:	4603      	mov	r3, r0
 800725c:	2b00      	cmp	r3, #0
 800725e:	f040 83e8 	bne.w	8007a32 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6859      	ldr	r1, [r3, #4]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f7ff f9a3 	bl	80065ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff fad2 	bl	8006822 <LL_ADC_REG_IsConversionOngoing>
 800727e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4618      	mov	r0, r3
 8007288:	f7ff fade 	bl	8006848 <LL_ADC_INJ_IsConversionOngoing>
 800728c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007290:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007294:	2b00      	cmp	r3, #0
 8007296:	f040 81d9 	bne.w	800764c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800729a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f040 81d4 	bne.w	800764c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ac:	d10f      	bne.n	80072ce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6818      	ldr	r0, [r3, #0]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	4619      	mov	r1, r3
 80072ba:	f7ff f9bd 	bl	8006638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 80072c6:	4618      	mov	r0, r3
 80072c8:	f7ff f951 	bl	800656e <LL_ADC_SetSamplingTimeCommonConfig>
 80072cc:	e00e      	b.n	80072ec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	461a      	mov	r2, r3
 80072dc:	f7ff f9ac 	bl	8006638 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff f941 	bl	800656e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	08db      	lsrs	r3, r3, #3
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	005b      	lsls	r3, r3, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d022      	beq.n	8007354 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	6919      	ldr	r1, [r3, #16]
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800731e:	f7ff f89b 	bl	8006458 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6919      	ldr	r1, [r3, #16]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	461a      	mov	r2, r3
 8007330:	f7ff f8e7 	bl	8006502 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6818      	ldr	r0, [r3, #0]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <HAL_ADC_ConfigChannel+0x126>
 8007344:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007348:	e000      	b.n	800734c <HAL_ADC_ConfigChannel+0x128>
 800734a:	2300      	movs	r3, #0
 800734c:	461a      	mov	r2, r3
 800734e:	f7ff f8f3 	bl	8006538 <LL_ADC_SetOffsetSaturation>
 8007352:	e17b      	b.n	800764c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2100      	movs	r1, #0
 800735a:	4618      	mov	r0, r3
 800735c:	f7ff f8a0 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007360:	4603      	mov	r3, r0
 8007362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10a      	bne.n	8007380 <HAL_ADC_ConfigChannel+0x15c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2100      	movs	r1, #0
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff f895 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007376:	4603      	mov	r3, r0
 8007378:	0e9b      	lsrs	r3, r3, #26
 800737a:	f003 021f 	and.w	r2, r3, #31
 800737e:	e01e      	b.n	80073be <HAL_ADC_ConfigChannel+0x19a>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	2100      	movs	r1, #0
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff f88a 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 800738c:	4603      	mov	r3, r0
 800738e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007392:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007396:	fa93 f3a3 	rbit	r3, r3
 800739a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800739e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80073a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80073a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d101      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80073ae:	2320      	movs	r3, #32
 80073b0:	e004      	b.n	80073bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80073b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80073b6:	fab3 f383 	clz	r3, r3
 80073ba:	b2db      	uxtb	r3, r3
 80073bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <HAL_ADC_ConfigChannel+0x1b2>
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	0e9b      	lsrs	r3, r3, #26
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	e018      	b.n	8007408 <HAL_ADC_ConfigChannel+0x1e4>
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80073e2:	fa93 f3a3 	rbit	r3, r3
 80073e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80073ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80073f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d101      	bne.n	80073fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80073fa:	2320      	movs	r3, #32
 80073fc:	e004      	b.n	8007408 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80073fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007402:	fab3 f383 	clz	r3, r3
 8007406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007408:	429a      	cmp	r2, r3
 800740a:	d106      	bne.n	800741a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	4618      	mov	r0, r3
 8007416:	f7ff f859 	bl	80064cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2101      	movs	r1, #1
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff f83d 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007426:	4603      	mov	r3, r0
 8007428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800742c:	2b00      	cmp	r3, #0
 800742e:	d10a      	bne.n	8007446 <HAL_ADC_ConfigChannel+0x222>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2101      	movs	r1, #1
 8007436:	4618      	mov	r0, r3
 8007438:	f7ff f832 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 800743c:	4603      	mov	r3, r0
 800743e:	0e9b      	lsrs	r3, r3, #26
 8007440:	f003 021f 	and.w	r2, r3, #31
 8007444:	e01e      	b.n	8007484 <HAL_ADC_ConfigChannel+0x260>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2101      	movs	r1, #1
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff f827 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007452:	4603      	mov	r3, r0
 8007454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007458:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800745c:	fa93 f3a3 	rbit	r3, r3
 8007460:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8007464:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007468:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800746c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8007474:	2320      	movs	r3, #32
 8007476:	e004      	b.n	8007482 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8007478:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800747c:	fab3 f383 	clz	r3, r3
 8007480:	b2db      	uxtb	r3, r3
 8007482:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748c:	2b00      	cmp	r3, #0
 800748e:	d105      	bne.n	800749c <HAL_ADC_ConfigChannel+0x278>
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	0e9b      	lsrs	r3, r3, #26
 8007496:	f003 031f 	and.w	r3, r3, #31
 800749a:	e018      	b.n	80074ce <HAL_ADC_ConfigChannel+0x2aa>
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80074a8:	fa93 f3a3 	rbit	r3, r3
 80074ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80074b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80074b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80074b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80074c0:	2320      	movs	r3, #32
 80074c2:	e004      	b.n	80074ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80074c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80074c8:	fab3 f383 	clz	r3, r3
 80074cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d106      	bne.n	80074e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2200      	movs	r2, #0
 80074d8:	2101      	movs	r1, #1
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe fff6 	bl	80064cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2102      	movs	r1, #2
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe ffda 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10a      	bne.n	800750c <HAL_ADC_ConfigChannel+0x2e8>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2102      	movs	r1, #2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe ffcf 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007502:	4603      	mov	r3, r0
 8007504:	0e9b      	lsrs	r3, r3, #26
 8007506:	f003 021f 	and.w	r2, r3, #31
 800750a:	e01e      	b.n	800754a <HAL_ADC_ConfigChannel+0x326>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2102      	movs	r1, #2
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe ffc4 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 8007518:	4603      	mov	r3, r0
 800751a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800751e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007522:	fa93 f3a3 	rbit	r3, r3
 8007526:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800752a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800752e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8007532:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800753a:	2320      	movs	r3, #32
 800753c:	e004      	b.n	8007548 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800753e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007542:	fab3 f383 	clz	r3, r3
 8007546:	b2db      	uxtb	r3, r3
 8007548:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007552:	2b00      	cmp	r3, #0
 8007554:	d105      	bne.n	8007562 <HAL_ADC_ConfigChannel+0x33e>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	0e9b      	lsrs	r3, r3, #26
 800755c:	f003 031f 	and.w	r3, r3, #31
 8007560:	e016      	b.n	8007590 <HAL_ADC_ConfigChannel+0x36c>
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800756a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800756e:	fa93 f3a3 	rbit	r3, r3
 8007572:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8007574:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007576:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800757a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800757e:	2b00      	cmp	r3, #0
 8007580:	d101      	bne.n	8007586 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8007582:	2320      	movs	r3, #32
 8007584:	e004      	b.n	8007590 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8007586:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800758a:	fab3 f383 	clz	r3, r3
 800758e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007590:	429a      	cmp	r2, r3
 8007592:	d106      	bne.n	80075a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2200      	movs	r2, #0
 800759a:	2102      	movs	r1, #2
 800759c:	4618      	mov	r0, r3
 800759e:	f7fe ff95 	bl	80064cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2103      	movs	r1, #3
 80075a8:	4618      	mov	r0, r3
 80075aa:	f7fe ff79 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <HAL_ADC_ConfigChannel+0x3aa>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2103      	movs	r1, #3
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe ff6e 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 80075c4:	4603      	mov	r3, r0
 80075c6:	0e9b      	lsrs	r3, r3, #26
 80075c8:	f003 021f 	and.w	r2, r3, #31
 80075cc:	e017      	b.n	80075fe <HAL_ADC_ConfigChannel+0x3da>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	2103      	movs	r1, #3
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe ff63 	bl	80064a0 <LL_ADC_GetOffsetChannel>
 80075da:	4603      	mov	r3, r0
 80075dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075e0:	fa93 f3a3 	rbit	r3, r3
 80075e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80075e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80075ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80075f0:	2320      	movs	r3, #32
 80075f2:	e003      	b.n	80075fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80075f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075f6:	fab3 f383 	clz	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <HAL_ADC_ConfigChannel+0x3f2>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	0e9b      	lsrs	r3, r3, #26
 8007610:	f003 031f 	and.w	r3, r3, #31
 8007614:	e011      	b.n	800763a <HAL_ADC_ConfigChannel+0x416>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800761c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800761e:	fa93 f3a3 	rbit	r3, r3
 8007622:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8007624:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007626:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8007628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800762a:	2b00      	cmp	r3, #0
 800762c:	d101      	bne.n	8007632 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800762e:	2320      	movs	r3, #32
 8007630:	e003      	b.n	800763a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8007632:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007634:	fab3 f383 	clz	r3, r3
 8007638:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800763a:	429a      	cmp	r2, r3
 800763c:	d106      	bne.n	800764c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2200      	movs	r2, #0
 8007644:	2103      	movs	r1, #3
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe ff40 	bl	80064cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4618      	mov	r0, r3
 8007652:	f7ff f8bf 	bl	80067d4 <LL_ADC_IsEnabled>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 813d 	bne.w	80078d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6818      	ldr	r0, [r3, #0]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	6819      	ldr	r1, [r3, #0]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	461a      	mov	r2, r3
 800766c:	f7ff f810 	bl	8006690 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	4aa2      	ldr	r2, [pc, #648]	@ (8007900 <HAL_ADC_ConfigChannel+0x6dc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	f040 812e 	bne.w	80078d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <HAL_ADC_ConfigChannel+0x480>
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	0e9b      	lsrs	r3, r3, #26
 8007692:	3301      	adds	r3, #1
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	2b09      	cmp	r3, #9
 800769a:	bf94      	ite	ls
 800769c:	2301      	movls	r3, #1
 800769e:	2300      	movhi	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	e019      	b.n	80076d8 <HAL_ADC_ConfigChannel+0x4b4>
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076ac:	fa93 f3a3 	rbit	r3, r3
 80076b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80076b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80076b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80076bc:	2320      	movs	r3, #32
 80076be:	e003      	b.n	80076c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80076c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80076c2:	fab3 f383 	clz	r3, r3
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	f003 031f 	and.w	r3, r3, #31
 80076ce:	2b09      	cmp	r3, #9
 80076d0:	bf94      	ite	ls
 80076d2:	2301      	movls	r3, #1
 80076d4:	2300      	movhi	r3, #0
 80076d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d079      	beq.n	80077d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <HAL_ADC_ConfigChannel+0x4d4>
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	0e9b      	lsrs	r3, r3, #26
 80076ee:	3301      	adds	r3, #1
 80076f0:	069b      	lsls	r3, r3, #26
 80076f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80076f6:	e015      	b.n	8007724 <HAL_ADC_ConfigChannel+0x500>
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007700:	fa93 f3a3 	rbit	r3, r3
 8007704:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8007706:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007708:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800770a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800770c:	2b00      	cmp	r3, #0
 800770e:	d101      	bne.n	8007714 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8007710:	2320      	movs	r3, #32
 8007712:	e003      	b.n	800771c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8007714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007716:	fab3 f383 	clz	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	3301      	adds	r3, #1
 800771e:	069b      	lsls	r3, r3, #26
 8007720:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800772c:	2b00      	cmp	r3, #0
 800772e:	d109      	bne.n	8007744 <HAL_ADC_ConfigChannel+0x520>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	0e9b      	lsrs	r3, r3, #26
 8007736:	3301      	adds	r3, #1
 8007738:	f003 031f 	and.w	r3, r3, #31
 800773c:	2101      	movs	r1, #1
 800773e:	fa01 f303 	lsl.w	r3, r1, r3
 8007742:	e017      	b.n	8007774 <HAL_ADC_ConfigChannel+0x550>
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800774a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774c:	fa93 f3a3 	rbit	r3, r3
 8007750:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8007752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007754:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8007756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800775c:	2320      	movs	r3, #32
 800775e:	e003      	b.n	8007768 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8007760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007762:	fab3 f383 	clz	r3, r3
 8007766:	b2db      	uxtb	r3, r3
 8007768:	3301      	adds	r3, #1
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	2101      	movs	r1, #1
 8007770:	fa01 f303 	lsl.w	r3, r1, r3
 8007774:	ea42 0103 	orr.w	r1, r2, r3
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007780:	2b00      	cmp	r3, #0
 8007782:	d10a      	bne.n	800779a <HAL_ADC_ConfigChannel+0x576>
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	0e9b      	lsrs	r3, r3, #26
 800778a:	3301      	adds	r3, #1
 800778c:	f003 021f 	and.w	r2, r3, #31
 8007790:	4613      	mov	r3, r2
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	4413      	add	r3, r2
 8007796:	051b      	lsls	r3, r3, #20
 8007798:	e018      	b.n	80077cc <HAL_ADC_ConfigChannel+0x5a8>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a2:	fa93 f3a3 	rbit	r3, r3
 80077a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80077a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80077ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80077b2:	2320      	movs	r3, #32
 80077b4:	e003      	b.n	80077be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80077b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80077b8:	fab3 f383 	clz	r3, r3
 80077bc:	b2db      	uxtb	r3, r3
 80077be:	3301      	adds	r3, #1
 80077c0:	f003 021f 	and.w	r2, r3, #31
 80077c4:	4613      	mov	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	4413      	add	r3, r2
 80077ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80077cc:	430b      	orrs	r3, r1
 80077ce:	e07e      	b.n	80078ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d107      	bne.n	80077ec <HAL_ADC_ConfigChannel+0x5c8>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	0e9b      	lsrs	r3, r3, #26
 80077e2:	3301      	adds	r3, #1
 80077e4:	069b      	lsls	r3, r3, #26
 80077e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80077ea:	e015      	b.n	8007818 <HAL_ADC_ConfigChannel+0x5f4>
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077f4:	fa93 f3a3 	rbit	r3, r3
 80077f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80077fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80077fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007800:	2b00      	cmp	r3, #0
 8007802:	d101      	bne.n	8007808 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8007804:	2320      	movs	r3, #32
 8007806:	e003      	b.n	8007810 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	fab3 f383 	clz	r3, r3
 800780e:	b2db      	uxtb	r3, r3
 8007810:	3301      	adds	r3, #1
 8007812:	069b      	lsls	r3, r3, #26
 8007814:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007820:	2b00      	cmp	r3, #0
 8007822:	d109      	bne.n	8007838 <HAL_ADC_ConfigChannel+0x614>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	0e9b      	lsrs	r3, r3, #26
 800782a:	3301      	adds	r3, #1
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	2101      	movs	r1, #1
 8007832:	fa01 f303 	lsl.w	r3, r1, r3
 8007836:	e017      	b.n	8007868 <HAL_ADC_ConfigChannel+0x644>
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800783e:	6a3b      	ldr	r3, [r7, #32]
 8007840:	fa93 f3a3 	rbit	r3, r3
 8007844:	61fb      	str	r3, [r7, #28]
  return result;
 8007846:	69fb      	ldr	r3, [r7, #28]
 8007848:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800784a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8007850:	2320      	movs	r3, #32
 8007852:	e003      	b.n	800785c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8007854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007856:	fab3 f383 	clz	r3, r3
 800785a:	b2db      	uxtb	r3, r3
 800785c:	3301      	adds	r3, #1
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2101      	movs	r1, #1
 8007864:	fa01 f303 	lsl.w	r3, r1, r3
 8007868:	ea42 0103 	orr.w	r1, r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10d      	bne.n	8007894 <HAL_ADC_ConfigChannel+0x670>
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	0e9b      	lsrs	r3, r3, #26
 800787e:	3301      	adds	r3, #1
 8007880:	f003 021f 	and.w	r2, r3, #31
 8007884:	4613      	mov	r3, r2
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	4413      	add	r3, r2
 800788a:	3b1e      	subs	r3, #30
 800788c:	051b      	lsls	r3, r3, #20
 800788e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007892:	e01b      	b.n	80078cc <HAL_ADC_ConfigChannel+0x6a8>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	fa93 f3a3 	rbit	r3, r3
 80078a0:	613b      	str	r3, [r7, #16]
  return result;
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80078a6:	69bb      	ldr	r3, [r7, #24]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d101      	bne.n	80078b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80078ac:	2320      	movs	r3, #32
 80078ae:	e003      	b.n	80078b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	fab3 f383 	clz	r3, r3
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	3301      	adds	r3, #1
 80078ba:	f003 021f 	and.w	r2, r3, #31
 80078be:	4613      	mov	r3, r2
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	4413      	add	r3, r2
 80078c4:	3b1e      	subs	r3, #30
 80078c6:	051b      	lsls	r3, r3, #20
 80078c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80078d2:	4619      	mov	r1, r3
 80078d4:	f7fe feb0 	bl	8006638 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	4b09      	ldr	r3, [pc, #36]	@ (8007904 <HAL_ADC_ConfigChannel+0x6e0>)
 80078de:	4013      	ands	r3, r2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80af 	beq.w	8007a44 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078ee:	d004      	beq.n	80078fa <HAL_ADC_ConfigChannel+0x6d6>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a04      	ldr	r2, [pc, #16]	@ (8007908 <HAL_ADC_ConfigChannel+0x6e4>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d10a      	bne.n	8007910 <HAL_ADC_ConfigChannel+0x6ec>
 80078fa:	4b04      	ldr	r3, [pc, #16]	@ (800790c <HAL_ADC_ConfigChannel+0x6e8>)
 80078fc:	e009      	b.n	8007912 <HAL_ADC_ConfigChannel+0x6ee>
 80078fe:	bf00      	nop
 8007900:	407f0000 	.word	0x407f0000
 8007904:	80080000 	.word	0x80080000
 8007908:	50000100 	.word	0x50000100
 800790c:	50000300 	.word	0x50000300
 8007910:	4b51      	ldr	r3, [pc, #324]	@ (8007a58 <HAL_ADC_ConfigChannel+0x834>)
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fd92 	bl	800643c <LL_ADC_GetCommonPathInternalCh>
 8007918:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a4e      	ldr	r2, [pc, #312]	@ (8007a5c <HAL_ADC_ConfigChannel+0x838>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d004      	beq.n	8007930 <HAL_ADC_ConfigChannel+0x70c>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a4d      	ldr	r2, [pc, #308]	@ (8007a60 <HAL_ADC_ConfigChannel+0x83c>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d134      	bne.n	800799a <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8007930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007934:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007938:	2b00      	cmp	r3, #0
 800793a:	d12e      	bne.n	800799a <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007944:	d17e      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800794e:	d004      	beq.n	800795a <HAL_ADC_ConfigChannel+0x736>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a43      	ldr	r2, [pc, #268]	@ (8007a64 <HAL_ADC_ConfigChannel+0x840>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d101      	bne.n	800795e <HAL_ADC_ConfigChannel+0x73a>
 800795a:	4a43      	ldr	r2, [pc, #268]	@ (8007a68 <HAL_ADC_ConfigChannel+0x844>)
 800795c:	e000      	b.n	8007960 <HAL_ADC_ConfigChannel+0x73c>
 800795e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a58 <HAL_ADC_ConfigChannel+0x834>)
 8007960:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007964:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007968:	4619      	mov	r1, r3
 800796a:	4610      	mov	r0, r2
 800796c:	f7fe fd53 	bl	8006416 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007970:	4b3e      	ldr	r3, [pc, #248]	@ (8007a6c <HAL_ADC_ConfigChannel+0x848>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	099b      	lsrs	r3, r3, #6
 8007976:	4a3e      	ldr	r2, [pc, #248]	@ (8007a70 <HAL_ADC_ConfigChannel+0x84c>)
 8007978:	fba2 2303 	umull	r2, r3, r2, r3
 800797c:	099b      	lsrs	r3, r3, #6
 800797e:	1c5a      	adds	r2, r3, #1
 8007980:	4613      	mov	r3, r2
 8007982:	005b      	lsls	r3, r3, #1
 8007984:	4413      	add	r3, r2
 8007986:	009b      	lsls	r3, r3, #2
 8007988:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800798a:	e002      	b.n	8007992 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	3b01      	subs	r3, #1
 8007990:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1f9      	bne.n	800798c <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007998:	e054      	b.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a35      	ldr	r2, [pc, #212]	@ (8007a74 <HAL_ADC_ConfigChannel+0x850>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d120      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80079a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d11a      	bne.n	80079e6 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079b8:	d144      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80079c2:	d004      	beq.n	80079ce <HAL_ADC_ConfigChannel+0x7aa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a26      	ldr	r2, [pc, #152]	@ (8007a64 <HAL_ADC_ConfigChannel+0x840>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d101      	bne.n	80079d2 <HAL_ADC_ConfigChannel+0x7ae>
 80079ce:	4a26      	ldr	r2, [pc, #152]	@ (8007a68 <HAL_ADC_ConfigChannel+0x844>)
 80079d0:	e000      	b.n	80079d4 <HAL_ADC_ConfigChannel+0x7b0>
 80079d2:	4a21      	ldr	r2, [pc, #132]	@ (8007a58 <HAL_ADC_ConfigChannel+0x834>)
 80079d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80079dc:	4619      	mov	r1, r3
 80079de:	4610      	mov	r0, r2
 80079e0:	f7fe fd19 	bl	8006416 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80079e4:	e02e      	b.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a23      	ldr	r2, [pc, #140]	@ (8007a78 <HAL_ADC_ConfigChannel+0x854>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d129      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80079f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80079f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d123      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a18      	ldr	r2, [pc, #96]	@ (8007a64 <HAL_ADC_ConfigChannel+0x840>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d01e      	beq.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a0e:	d004      	beq.n	8007a1a <HAL_ADC_ConfigChannel+0x7f6>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a13      	ldr	r2, [pc, #76]	@ (8007a64 <HAL_ADC_ConfigChannel+0x840>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d101      	bne.n	8007a1e <HAL_ADC_ConfigChannel+0x7fa>
 8007a1a:	4a13      	ldr	r2, [pc, #76]	@ (8007a68 <HAL_ADC_ConfigChannel+0x844>)
 8007a1c:	e000      	b.n	8007a20 <HAL_ADC_ConfigChannel+0x7fc>
 8007a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8007a58 <HAL_ADC_ConfigChannel+0x834>)
 8007a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007a24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4610      	mov	r0, r2
 8007a2c:	f7fe fcf3 	bl	8006416 <LL_ADC_SetCommonPathInternalCh>
 8007a30:	e008      	b.n	8007a44 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007a36:	f043 0220 	orr.w	r2, r3, #32
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007a4c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	37d8      	adds	r7, #216	@ 0xd8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	50000700 	.word	0x50000700
 8007a5c:	c3210000 	.word	0xc3210000
 8007a60:	90c00010 	.word	0x90c00010
 8007a64:	50000100 	.word	0x50000100
 8007a68:	50000300 	.word	0x50000300
 8007a6c:	200000f4 	.word	0x200000f4
 8007a70:	053e2d63 	.word	0x053e2d63
 8007a74:	c7520000 	.word	0xc7520000
 8007a78:	cb840000 	.word	0xcb840000

08007a7c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007a84:	2300      	movs	r3, #0
 8007a86:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fe fea1 	bl	80067d4 <LL_ADC_IsEnabled>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d176      	bne.n	8007b86 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	689a      	ldr	r2, [r3, #8]
 8007a9e:	4b3c      	ldr	r3, [pc, #240]	@ (8007b90 <ADC_Enable+0x114>)
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d00d      	beq.n	8007ac2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007aaa:	f043 0210 	orr.w	r2, r3, #16
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e062      	b.n	8007b88 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fe70 	bl	80067ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ad4:	d004      	beq.n	8007ae0 <ADC_Enable+0x64>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a2e      	ldr	r2, [pc, #184]	@ (8007b94 <ADC_Enable+0x118>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d101      	bne.n	8007ae4 <ADC_Enable+0x68>
 8007ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8007b98 <ADC_Enable+0x11c>)
 8007ae2:	e000      	b.n	8007ae6 <ADC_Enable+0x6a>
 8007ae4:	4b2d      	ldr	r3, [pc, #180]	@ (8007b9c <ADC_Enable+0x120>)
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fe fca8 	bl	800643c <LL_ADC_GetCommonPathInternalCh>
 8007aec:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8007aee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d013      	beq.n	8007b1e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8007af6:	4b2a      	ldr	r3, [pc, #168]	@ (8007ba0 <ADC_Enable+0x124>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	099b      	lsrs	r3, r3, #6
 8007afc:	4a29      	ldr	r2, [pc, #164]	@ (8007ba4 <ADC_Enable+0x128>)
 8007afe:	fba2 2303 	umull	r2, r3, r2, r3
 8007b02:	099b      	lsrs	r3, r3, #6
 8007b04:	1c5a      	adds	r2, r3, #1
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007b10:	e002      	b.n	8007b18 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	3b01      	subs	r3, #1
 8007b16:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f9      	bne.n	8007b12 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007b1e:	f7fe fc39 	bl	8006394 <HAL_GetTick>
 8007b22:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b24:	e028      	b.n	8007b78 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fe fe52 	bl	80067d4 <LL_ADC_IsEnabled>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d104      	bne.n	8007b40 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	f7fe fe36 	bl	80067ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007b40:	f7fe fc28 	bl	8006394 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d914      	bls.n	8007b78 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d00d      	beq.n	8007b78 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007b60:	f043 0210 	orr.w	r2, r3, #16
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007b6c:	f043 0201 	orr.w	r2, r3, #1
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	e007      	b.n	8007b88 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f003 0301 	and.w	r3, r3, #1
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d1cf      	bne.n	8007b26 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}
 8007b90:	8000003f 	.word	0x8000003f
 8007b94:	50000100 	.word	0x50000100
 8007b98:	50000300 	.word	0x50000300
 8007b9c:	50000700 	.word	0x50000700
 8007ba0:	200000f4 	.word	0x200000f4
 8007ba4:	053e2d63 	.word	0x053e2d63

08007ba8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bba:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d14b      	bne.n	8007c5a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bc6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 0308 	and.w	r3, r3, #8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d021      	beq.n	8007c20 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fe fcd7 	bl	8006594 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d032      	beq.n	8007c52 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d12b      	bne.n	8007c52 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007bfe:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d11f      	bne.n	8007c52 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c16:	f043 0201 	orr.w	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007c1e:	e018      	b.n	8007c52 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0302 	and.w	r3, r3, #2
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d111      	bne.n	8007c52 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c32:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d105      	bne.n	8007c52 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c4a:	f043 0201 	orr.w	r2, r3, #1
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007c52:	68f8      	ldr	r0, [r7, #12]
 8007c54:	f7ff fabe 	bl	80071d4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007c58:	e00e      	b.n	8007c78 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007c66:	68f8      	ldr	r0, [r7, #12]
 8007c68:	f7ff fad2 	bl	8007210 <HAL_ADC_ErrorCallback>
}
 8007c6c:	e004      	b.n	8007c78 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	4798      	blx	r3
}
 8007c78:	bf00      	nop
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007c8e:	68f8      	ldr	r0, [r7, #12]
 8007c90:	f7ff faaa 	bl	80071e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007c94:	bf00      	nop
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007cae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cba:	f043 0204 	orr.w	r2, r3, #4
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f7ff faa4 	bl	8007210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <LL_ADC_IsEnabled>:
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689b      	ldr	r3, [r3, #8]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <LL_ADC_IsEnabled+0x18>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e000      	b.n	8007cea <LL_ADC_IsEnabled+0x1a>
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	370c      	adds	r7, #12
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <LL_ADC_REG_IsConversionOngoing>:
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b083      	sub	sp, #12
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	689b      	ldr	r3, [r3, #8]
 8007d02:	f003 0304 	and.w	r3, r3, #4
 8007d06:	2b04      	cmp	r3, #4
 8007d08:	d101      	bne.n	8007d0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e000      	b.n	8007d10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8007d80:	b590      	push	{r4, r7, lr}
 8007d82:	b0a1      	sub	sp, #132	@ 0x84
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8007d9a:	2302      	movs	r3, #2
 8007d9c:	e0cb      	b.n	8007f36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8007da6:	2300      	movs	r3, #0
 8007da8:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8007daa:	2300      	movs	r3, #0
 8007dac:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007db6:	d102      	bne.n	8007dbe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8007db8:	4b61      	ldr	r3, [pc, #388]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007dba:	60bb      	str	r3, [r7, #8]
 8007dbc:	e001      	b.n	8007dc2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10b      	bne.n	8007de0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007dcc:	f043 0220 	orr.w	r2, r3, #32
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e0aa      	b.n	8007f36 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ff87 	bl	8007cf6 <LL_ADC_REG_IsConversionOngoing>
 8007de8:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7ff ff81 	bl	8007cf6 <LL_ADC_REG_IsConversionOngoing>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 808c 	bne.w	8007f14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8007dfc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f040 8088 	bne.w	8007f14 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e0c:	d004      	beq.n	8007e18 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a4b      	ldr	r2, [pc, #300]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d101      	bne.n	8007e1c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8007e18:	4b4a      	ldr	r3, [pc, #296]	@ (8007f44 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8007e1a:	e000      	b.n	8007e1e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8007e1c:	4b4a      	ldr	r3, [pc, #296]	@ (8007f48 <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8007e1e:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d041      	beq.n	8007eac <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007e28:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6859      	ldr	r1, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e3a:	035b      	lsls	r3, r3, #13
 8007e3c:	430b      	orrs	r3, r1
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e42:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007e4c:	d004      	beq.n	8007e58 <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a3b      	ldr	r2, [pc, #236]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d10f      	bne.n	8007e78 <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8007e58:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007e5c:	f7ff ff38 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007e60:	4604      	mov	r4, r0
 8007e62:	4837      	ldr	r0, [pc, #220]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007e64:	f7ff ff34 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	4323      	orrs	r3, r4
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	bf0c      	ite	eq
 8007e70:	2301      	moveq	r3, #1
 8007e72:	2300      	movne	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	e008      	b.n	8007e8a <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8007e78:	4834      	ldr	r0, [pc, #208]	@ (8007f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007e7a:	f7ff ff29 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	bf0c      	ite	eq
 8007e84:	2301      	moveq	r3, #1
 8007e86:	2300      	movne	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d04c      	beq.n	8007f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007e8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007e96:	f023 030f 	bic.w	r3, r3, #15
 8007e9a:	683a      	ldr	r2, [r7, #0]
 8007e9c:	6811      	ldr	r1, [r2, #0]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	6892      	ldr	r2, [r2, #8]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	431a      	orrs	r2, r3
 8007ea6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ea8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007eaa:	e03d      	b.n	8007f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007eac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eae:	689b      	ldr	r3, [r3, #8]
 8007eb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007eb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ec0:	d004      	beq.n	8007ecc <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d10f      	bne.n	8007eec <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8007ecc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007ed0:	f7ff fefe 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	481a      	ldr	r0, [pc, #104]	@ (8007f40 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8007ed8:	f7ff fefa 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007edc:	4603      	mov	r3, r0
 8007ede:	4323      	orrs	r3, r4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bf0c      	ite	eq
 8007ee4:	2301      	moveq	r3, #1
 8007ee6:	2300      	movne	r3, #0
 8007ee8:	b2db      	uxtb	r3, r3
 8007eea:	e008      	b.n	8007efe <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8007eec:	4817      	ldr	r0, [pc, #92]	@ (8007f4c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007eee:	f7ff feef 	bl	8007cd0 <LL_ADC_IsEnabled>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007f02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8007f0a:	f023 030f 	bic.w	r3, r3, #15
 8007f0e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007f10:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007f12:	e009      	b.n	8007f28 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007f18:	f043 0220 	orr.w	r2, r3, #32
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8007f26:	e000      	b.n	8007f2a <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007f28:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8007f32:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007f36:	4618      	mov	r0, r3
 8007f38:	3784      	adds	r7, #132	@ 0x84
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd90      	pop	{r4, r7, pc}
 8007f3e:	bf00      	nop
 8007f40:	50000100 	.word	0x50000100
 8007f44:	50000300 	.word	0x50000300
 8007f48:	50000700 	.word	0x50000700
 8007f4c:	50000400 	.word	0x50000400

08007f50 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e023      	b.n	8007faa <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fd ff26 	bl	8005dc8 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 8007fa8:	2300      	movs	r3, #0
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3708      	adds	r7, #8
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007fd0:	4013      	ands	r3, r2
 8007fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fe6:	4a04      	ldr	r2, [pc, #16]	@ (8007ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	60d3      	str	r3, [r2, #12]
}
 8007fec:	bf00      	nop
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr
 8007ff8:	e000ed00 	.word	0xe000ed00

08007ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008000:	4b04      	ldr	r3, [pc, #16]	@ (8008014 <__NVIC_GetPriorityGrouping+0x18>)
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	0a1b      	lsrs	r3, r3, #8
 8008006:	f003 0307 	and.w	r3, r3, #7
}
 800800a:	4618      	mov	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	e000ed00 	.word	0xe000ed00

08008018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008026:	2b00      	cmp	r3, #0
 8008028:	db0b      	blt.n	8008042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800802a:	79fb      	ldrb	r3, [r7, #7]
 800802c:	f003 021f 	and.w	r2, r3, #31
 8008030:	4907      	ldr	r1, [pc, #28]	@ (8008050 <__NVIC_EnableIRQ+0x38>)
 8008032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008036:	095b      	lsrs	r3, r3, #5
 8008038:	2001      	movs	r0, #1
 800803a:	fa00 f202 	lsl.w	r2, r0, r2
 800803e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	e000e100 	.word	0xe000e100

08008054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
 800805a:	4603      	mov	r3, r0
 800805c:	6039      	str	r1, [r7, #0]
 800805e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008064:	2b00      	cmp	r3, #0
 8008066:	db0a      	blt.n	800807e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	b2da      	uxtb	r2, r3
 800806c:	490c      	ldr	r1, [pc, #48]	@ (80080a0 <__NVIC_SetPriority+0x4c>)
 800806e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008072:	0112      	lsls	r2, r2, #4
 8008074:	b2d2      	uxtb	r2, r2
 8008076:	440b      	add	r3, r1
 8008078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800807c:	e00a      	b.n	8008094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	b2da      	uxtb	r2, r3
 8008082:	4908      	ldr	r1, [pc, #32]	@ (80080a4 <__NVIC_SetPriority+0x50>)
 8008084:	79fb      	ldrb	r3, [r7, #7]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	3b04      	subs	r3, #4
 800808c:	0112      	lsls	r2, r2, #4
 800808e:	b2d2      	uxtb	r2, r2
 8008090:	440b      	add	r3, r1
 8008092:	761a      	strb	r2, [r3, #24]
}
 8008094:	bf00      	nop
 8008096:	370c      	adds	r7, #12
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	e000e100 	.word	0xe000e100
 80080a4:	e000ed00 	.word	0xe000ed00

080080a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b089      	sub	sp, #36	@ 0x24
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	f003 0307 	and.w	r3, r3, #7
 80080ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	f1c3 0307 	rsb	r3, r3, #7
 80080c2:	2b04      	cmp	r3, #4
 80080c4:	bf28      	it	cs
 80080c6:	2304      	movcs	r3, #4
 80080c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	3304      	adds	r3, #4
 80080ce:	2b06      	cmp	r3, #6
 80080d0:	d902      	bls.n	80080d8 <NVIC_EncodePriority+0x30>
 80080d2:	69fb      	ldr	r3, [r7, #28]
 80080d4:	3b03      	subs	r3, #3
 80080d6:	e000      	b.n	80080da <NVIC_EncodePriority+0x32>
 80080d8:	2300      	movs	r3, #0
 80080da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080dc:	f04f 32ff 	mov.w	r2, #4294967295
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	fa02 f303 	lsl.w	r3, r2, r3
 80080e6:	43da      	mvns	r2, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	401a      	ands	r2, r3
 80080ec:	697b      	ldr	r3, [r7, #20]
 80080ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080f0:	f04f 31ff 	mov.w	r1, #4294967295
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	fa01 f303 	lsl.w	r3, r1, r3
 80080fa:	43d9      	mvns	r1, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008100:	4313      	orrs	r3, r2
         );
}
 8008102:	4618      	mov	r0, r3
 8008104:	3724      	adds	r7, #36	@ 0x24
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	3b01      	subs	r3, #1
 800811c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008120:	d301      	bcc.n	8008126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008122:	2301      	movs	r3, #1
 8008124:	e00f      	b.n	8008146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008126:	4a0a      	ldr	r2, [pc, #40]	@ (8008150 <SysTick_Config+0x40>)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	3b01      	subs	r3, #1
 800812c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800812e:	210f      	movs	r1, #15
 8008130:	f04f 30ff 	mov.w	r0, #4294967295
 8008134:	f7ff ff8e 	bl	8008054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008138:	4b05      	ldr	r3, [pc, #20]	@ (8008150 <SysTick_Config+0x40>)
 800813a:	2200      	movs	r2, #0
 800813c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800813e:	4b04      	ldr	r3, [pc, #16]	@ (8008150 <SysTick_Config+0x40>)
 8008140:	2207      	movs	r2, #7
 8008142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3708      	adds	r7, #8
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	e000e010 	.word	0xe000e010

08008154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f7ff ff29 	bl	8007fb4 <__NVIC_SetPriorityGrouping>
}
 8008162:	bf00      	nop
 8008164:	3708      	adds	r7, #8
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b086      	sub	sp, #24
 800816e:	af00      	add	r7, sp, #0
 8008170:	4603      	mov	r3, r0
 8008172:	60b9      	str	r1, [r7, #8]
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008178:	f7ff ff40 	bl	8007ffc <__NVIC_GetPriorityGrouping>
 800817c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	68b9      	ldr	r1, [r7, #8]
 8008182:	6978      	ldr	r0, [r7, #20]
 8008184:	f7ff ff90 	bl	80080a8 <NVIC_EncodePriority>
 8008188:	4602      	mov	r2, r0
 800818a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800818e:	4611      	mov	r1, r2
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff ff5f 	bl	8008054 <__NVIC_SetPriority>
}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	4603      	mov	r3, r0
 80081a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7ff ff33 	bl	8008018 <__NVIC_EnableIRQ>
}
 80081b2:	bf00      	nop
 80081b4:	3708      	adds	r7, #8
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f7ff ffa4 	bl	8008110 <SysTick_Config>
 80081c8:	4603      	mov	r3, r0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	3708      	adds	r7, #8
 80081ce:	46bd      	mov	sp, r7
 80081d0:	bd80      	pop	{r7, pc}
	...

080081d4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e054      	b.n	8008290 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	7f5b      	ldrb	r3, [r3, #29]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d105      	bne.n	80081fc <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f7fd fe06 	bl	8005e08 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	791b      	ldrb	r3, [r3, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10c      	bne.n	8008224 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a22      	ldr	r2, [pc, #136]	@ (8008298 <HAL_CRC_Init+0xc4>)
 8008210:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	689a      	ldr	r2, [r3, #8]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f022 0218 	bic.w	r2, r2, #24
 8008220:	609a      	str	r2, [r3, #8]
 8008222:	e00c      	b.n	800823e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6899      	ldr	r1, [r3, #8]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68db      	ldr	r3, [r3, #12]
 800822c:	461a      	mov	r2, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f834 	bl	800829c <HAL_CRCEx_Polynomial_Set>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	e028      	b.n	8008290 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	795b      	ldrb	r3, [r3, #5]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d105      	bne.n	8008252 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f04f 32ff 	mov.w	r2, #4294967295
 800824e:	611a      	str	r2, [r3, #16]
 8008250:	e004      	b.n	800825c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	6912      	ldr	r2, [r2, #16]
 800825a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695a      	ldr	r2, [r3, #20]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699a      	ldr	r2, [r3, #24]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	430a      	orrs	r2, r1
 8008286:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3708      	adds	r7, #8
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	04c11db7 	.word	0x04c11db7

0800829c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800829c:	b480      	push	{r7}
 800829e:	b087      	sub	sp, #28
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80082a8:	2300      	movs	r3, #0
 80082aa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80082ac:	231f      	movs	r3, #31
 80082ae:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d102      	bne.n	80082c0 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 80082ba:	2301      	movs	r3, #1
 80082bc:	75fb      	strb	r3, [r7, #23]
 80082be:	e063      	b.n	8008388 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80082c0:	bf00      	nop
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	1e5a      	subs	r2, r3, #1
 80082c6:	613a      	str	r2, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d009      	beq.n	80082e0 <HAL_CRCEx_Polynomial_Set+0x44>
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
 80082d8:	f003 0301 	and.w	r3, r3, #1
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d0f0      	beq.n	80082c2 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b18      	cmp	r3, #24
 80082e4:	d846      	bhi.n	8008374 <HAL_CRCEx_Polynomial_Set+0xd8>
 80082e6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ec <HAL_CRCEx_Polynomial_Set+0x50>)
 80082e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ec:	0800837b 	.word	0x0800837b
 80082f0:	08008375 	.word	0x08008375
 80082f4:	08008375 	.word	0x08008375
 80082f8:	08008375 	.word	0x08008375
 80082fc:	08008375 	.word	0x08008375
 8008300:	08008375 	.word	0x08008375
 8008304:	08008375 	.word	0x08008375
 8008308:	08008375 	.word	0x08008375
 800830c:	08008369 	.word	0x08008369
 8008310:	08008375 	.word	0x08008375
 8008314:	08008375 	.word	0x08008375
 8008318:	08008375 	.word	0x08008375
 800831c:	08008375 	.word	0x08008375
 8008320:	08008375 	.word	0x08008375
 8008324:	08008375 	.word	0x08008375
 8008328:	08008375 	.word	0x08008375
 800832c:	0800835d 	.word	0x0800835d
 8008330:	08008375 	.word	0x08008375
 8008334:	08008375 	.word	0x08008375
 8008338:	08008375 	.word	0x08008375
 800833c:	08008375 	.word	0x08008375
 8008340:	08008375 	.word	0x08008375
 8008344:	08008375 	.word	0x08008375
 8008348:	08008375 	.word	0x08008375
 800834c:	08008351 	.word	0x08008351
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	2b06      	cmp	r3, #6
 8008354:	d913      	bls.n	800837e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	75fb      	strb	r3, [r7, #23]
        }
        break;
 800835a:	e010      	b.n	800837e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b07      	cmp	r3, #7
 8008360:	d90f      	bls.n	8008382 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008366:	e00c      	b.n	8008382 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b0f      	cmp	r3, #15
 800836c:	d90b      	bls.n	8008386 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 800836e:	2301      	movs	r3, #1
 8008370:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008372:	e008      	b.n	8008386 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008374:	2301      	movs	r3, #1
 8008376:	75fb      	strb	r3, [r7, #23]
        break;
 8008378:	e006      	b.n	8008388 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800837a:	bf00      	nop
 800837c:	e004      	b.n	8008388 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800837e:	bf00      	nop
 8008380:	e002      	b.n	8008388 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008382:	bf00      	nop
 8008384:	e000      	b.n	8008388 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008386:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008388:	7dfb      	ldrb	r3, [r7, #23]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10d      	bne.n	80083aa <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f023 0118 	bic.w	r1, r3, #24
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80083aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d101      	bne.n	80083ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	e08d      	b.n	80084e6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	461a      	mov	r2, r3
 80083d0:	4b47      	ldr	r3, [pc, #284]	@ (80084f0 <HAL_DMA_Init+0x138>)
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d80f      	bhi.n	80083f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	461a      	mov	r2, r3
 80083dc:	4b45      	ldr	r3, [pc, #276]	@ (80084f4 <HAL_DMA_Init+0x13c>)
 80083de:	4413      	add	r3, r2
 80083e0:	4a45      	ldr	r2, [pc, #276]	@ (80084f8 <HAL_DMA_Init+0x140>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	091b      	lsrs	r3, r3, #4
 80083e8:	009a      	lsls	r2, r3, #2
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	4a42      	ldr	r2, [pc, #264]	@ (80084fc <HAL_DMA_Init+0x144>)
 80083f2:	641a      	str	r2, [r3, #64]	@ 0x40
 80083f4:	e00e      	b.n	8008414 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	4b40      	ldr	r3, [pc, #256]	@ (8008500 <HAL_DMA_Init+0x148>)
 80083fe:	4413      	add	r3, r2
 8008400:	4a3d      	ldr	r2, [pc, #244]	@ (80084f8 <HAL_DMA_Init+0x140>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	091b      	lsrs	r3, r3, #4
 8008408:	009a      	lsls	r2, r3, #2
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a3c      	ldr	r2, [pc, #240]	@ (8008504 <HAL_DMA_Init+0x14c>)
 8008412:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800842a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800842e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008438:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008444:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	699b      	ldr	r3, [r3, #24]
 800844a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008450:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9b6 	bl	80087d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008474:	d102      	bne.n	800847c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008484:	b2d2      	uxtb	r2, r2
 8008486:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008490:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d010      	beq.n	80084bc <HAL_DMA_Init+0x104>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d80c      	bhi.n	80084bc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 f9d6 	bl	8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80084ac:	2200      	movs	r2, #0
 80084ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084b4:	687a      	ldr	r2, [r7, #4]
 80084b6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	e008      	b.n	80084ce <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2201      	movs	r2, #1
 80084d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80084e4:	2300      	movs	r3, #0
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	40020407 	.word	0x40020407
 80084f4:	bffdfff8 	.word	0xbffdfff8
 80084f8:	cccccccd 	.word	0xcccccccd
 80084fc:	40020000 	.word	0x40020000
 8008500:	bffdfbf8 	.word	0xbffdfbf8
 8008504:	40020400 	.word	0x40020400

08008508 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b086      	sub	sp, #24
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_DMA_Start_IT+0x20>
 8008524:	2302      	movs	r3, #2
 8008526:	e066      	b.n	80085f6 <HAL_DMA_Start_IT+0xee>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	d155      	bne.n	80085e8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2202      	movs	r2, #2
 8008540:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f022 0201 	bic.w	r2, r2, #1
 8008558:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	68b9      	ldr	r1, [r7, #8]
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f000 f8fb 	bl	800875c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800856a:	2b00      	cmp	r3, #0
 800856c:	d008      	beq.n	8008580 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f042 020e 	orr.w	r2, r2, #14
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	e00f      	b.n	80085a0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0204 	bic.w	r2, r2, #4
 800858e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 020a 	orr.w	r2, r2, #10
 800859e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085bc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d007      	beq.n	80085d6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80085d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f042 0201 	orr.w	r2, r2, #1
 80085e4:	601a      	str	r2, [r3, #0]
 80085e6:	e005      	b.n	80085f4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80085f0:	2302      	movs	r3, #2
 80085f2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3718      	adds	r7, #24
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}

080085fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085fe:	b580      	push	{r7, lr}
 8008600:	b084      	sub	sp, #16
 8008602:	af00      	add	r7, sp, #0
 8008604:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800861a:	f003 031f 	and.w	r3, r3, #31
 800861e:	2204      	movs	r2, #4
 8008620:	409a      	lsls	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4013      	ands	r3, r2
 8008626:	2b00      	cmp	r3, #0
 8008628:	d026      	beq.n	8008678 <HAL_DMA_IRQHandler+0x7a>
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f003 0304 	and.w	r3, r3, #4
 8008630:	2b00      	cmp	r3, #0
 8008632:	d021      	beq.n	8008678 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d107      	bne.n	8008652 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0204 	bic.w	r2, r2, #4
 8008650:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008656:	f003 021f 	and.w	r2, r3, #31
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800865e:	2104      	movs	r1, #4
 8008660:	fa01 f202 	lsl.w	r2, r1, r2
 8008664:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800866a:	2b00      	cmp	r3, #0
 800866c:	d071      	beq.n	8008752 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008676:	e06c      	b.n	8008752 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800867c:	f003 031f 	and.w	r3, r3, #31
 8008680:	2202      	movs	r2, #2
 8008682:	409a      	lsls	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4013      	ands	r3, r2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d02e      	beq.n	80086ea <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f003 0302 	and.w	r3, r3, #2
 8008692:	2b00      	cmp	r3, #0
 8008694:	d029      	beq.n	80086ea <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 0320 	and.w	r3, r3, #32
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10b      	bne.n	80086bc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 020a 	bic.w	r2, r2, #10
 80086b2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086c0:	f003 021f 	and.w	r2, r3, #31
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086c8:	2102      	movs	r1, #2
 80086ca:	fa01 f202 	lsl.w	r2, r1, r2
 80086ce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d038      	beq.n	8008752 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086e8:	e033      	b.n	8008752 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2208      	movs	r2, #8
 80086f4:	409a      	lsls	r2, r3
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4013      	ands	r3, r2
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d02a      	beq.n	8008754 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	f003 0308 	and.w	r3, r3, #8
 8008704:	2b00      	cmp	r3, #0
 8008706:	d025      	beq.n	8008754 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f022 020e 	bic.w	r2, r2, #14
 8008716:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800871c:	f003 021f 	and.w	r2, r3, #31
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008724:	2101      	movs	r1, #1
 8008726:	fa01 f202 	lsl.w	r2, r1, r2
 800872a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008752:	bf00      	nop
 8008754:	bf00      	nop
}
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800876e:	68fa      	ldr	r2, [r7, #12]
 8008770:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8008772:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008780:	68fa      	ldr	r2, [r7, #12]
 8008782:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8008784:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800878a:	f003 021f 	and.w	r2, r3, #31
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008792:	2101      	movs	r1, #1
 8008794:	fa01 f202 	lsl.w	r2, r1, r2
 8008798:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	683a      	ldr	r2, [r7, #0]
 80087a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	2b10      	cmp	r3, #16
 80087a8:	d108      	bne.n	80087bc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80087ba:	e007      	b.n	80087cc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	60da      	str	r2, [r3, #12]
}
 80087cc:	bf00      	nop
 80087ce:	3714      	adds	r7, #20
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	4b16      	ldr	r3, [pc, #88]	@ (8008840 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d802      	bhi.n	80087f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80087ec:	4b15      	ldr	r3, [pc, #84]	@ (8008844 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087ee:	617b      	str	r3, [r7, #20]
 80087f0:	e001      	b.n	80087f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80087f2:	4b15      	ldr	r3, [pc, #84]	@ (8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80087f4:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	3b08      	subs	r3, #8
 8008802:	4a12      	ldr	r2, [pc, #72]	@ (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008804:	fba2 2303 	umull	r2, r3, r2, r3
 8008808:	091b      	lsrs	r3, r3, #4
 800880a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008810:	089b      	lsrs	r3, r3, #2
 8008812:	009a      	lsls	r2, r3, #2
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	4413      	add	r3, r2
 8008818:	461a      	mov	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a0b      	ldr	r2, [pc, #44]	@ (8008850 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8008822:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f003 031f 	and.w	r3, r3, #31
 800882a:	2201      	movs	r2, #1
 800882c:	409a      	lsls	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8008832:	bf00      	nop
 8008834:	371c      	adds	r7, #28
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	40020407 	.word	0x40020407
 8008844:	40020800 	.word	0x40020800
 8008848:	40020820 	.word	0x40020820
 800884c:	cccccccd 	.word	0xcccccccd
 8008850:	40020880 	.word	0x40020880

08008854 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4b0b      	ldr	r3, [pc, #44]	@ (8008894 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8008868:	4413      	add	r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	461a      	mov	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a08      	ldr	r2, [pc, #32]	@ (8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008876:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	3b01      	subs	r3, #1
 800887c:	f003 031f 	and.w	r3, r3, #31
 8008880:	2201      	movs	r2, #1
 8008882:	409a      	lsls	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8008888:	bf00      	nop
 800888a:	3714      	adds	r7, #20
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	1000823f 	.word	0x1000823f
 8008898:	40020940 	.word	0x40020940

0800889c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e147      	b.n	8008b3e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fd fac0 	bl	8005e48 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	699a      	ldr	r2, [r3, #24]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f022 0210 	bic.w	r2, r2, #16
 80088d6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80088d8:	f7fd fd5c 	bl	8006394 <HAL_GetTick>
 80088dc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80088de:	e012      	b.n	8008906 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80088e0:	f7fd fd58 	bl	8006394 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	2b0a      	cmp	r3, #10
 80088ec:	d90b      	bls.n	8008906 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088f2:	f043 0201 	orr.w	r2, r3, #1
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2203      	movs	r2, #3
 80088fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8008902:	2301      	movs	r3, #1
 8008904:	e11b      	b.n	8008b3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	f003 0308 	and.w	r3, r3, #8
 8008910:	2b08      	cmp	r3, #8
 8008912:	d0e5      	beq.n	80088e0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699a      	ldr	r2, [r3, #24]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f042 0201 	orr.w	r2, r2, #1
 8008922:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008924:	f7fd fd36 	bl	8006394 <HAL_GetTick>
 8008928:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800892a:	e012      	b.n	8008952 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800892c:	f7fd fd32 	bl	8006394 <HAL_GetTick>
 8008930:	4602      	mov	r2, r0
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	1ad3      	subs	r3, r2, r3
 8008936:	2b0a      	cmp	r3, #10
 8008938:	d90b      	bls.n	8008952 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800893e:	f043 0201 	orr.w	r2, r3, #1
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2203      	movs	r2, #3
 800894a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e0f5      	b.n	8008b3e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699b      	ldr	r3, [r3, #24]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d0e5      	beq.n	800892c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699a      	ldr	r2, [r3, #24]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0202 	orr.w	r2, r2, #2
 800896e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a74      	ldr	r2, [pc, #464]	@ (8008b48 <HAL_FDCAN_Init+0x2ac>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d103      	bne.n	8008982 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800897a:	4a74      	ldr	r2, [pc, #464]	@ (8008b4c <HAL_FDCAN_Init+0x2b0>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	7c1b      	ldrb	r3, [r3, #16]
 8008986:	2b01      	cmp	r3, #1
 8008988:	d108      	bne.n	800899c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	699a      	ldr	r2, [r3, #24]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008998:	619a      	str	r2, [r3, #24]
 800899a:	e007      	b.n	80089ac <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80089aa:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	7c5b      	ldrb	r3, [r3, #17]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d108      	bne.n	80089c6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	699a      	ldr	r2, [r3, #24]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089c2:	619a      	str	r2, [r3, #24]
 80089c4:	e007      	b.n	80089d6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	699a      	ldr	r2, [r3, #24]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80089d4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	7c9b      	ldrb	r3, [r3, #18]
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d108      	bne.n	80089f0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	699a      	ldr	r2, [r3, #24]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80089ec:	619a      	str	r2, [r3, #24]
 80089ee:	e007      	b.n	8008a00 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	699a      	ldr	r2, [r3, #24]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80089fe:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	430a      	orrs	r2, r1
 8008a14:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	699a      	ldr	r2, [r3, #24]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8008a24:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0210 	bic.w	r2, r2, #16
 8008a34:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d108      	bne.n	8008a50 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f042 0204 	orr.w	r2, r2, #4
 8008a4c:	619a      	str	r2, [r3, #24]
 8008a4e:	e02c      	b.n	8008aaa <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d028      	beq.n	8008aaa <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d01c      	beq.n	8008a9a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	699a      	ldr	r2, [r3, #24]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008a6e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f042 0210 	orr.w	r2, r2, #16
 8008a7e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	2b03      	cmp	r3, #3
 8008a86:	d110      	bne.n	8008aaa <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	699a      	ldr	r2, [r3, #24]
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f042 0220 	orr.w	r2, r2, #32
 8008a96:	619a      	str	r2, [r3, #24]
 8008a98:	e007      	b.n	8008aaa <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f042 0220 	orr.w	r2, r2, #32
 8008aa8:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	3b01      	subs	r3, #1
 8008ab0:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008aba:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8008ac2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	695b      	ldr	r3, [r3, #20]
 8008aca:	3b01      	subs	r3, #1
 8008acc:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8008ad2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8008ad4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008ade:	d115      	bne.n	8008b0c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ae4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008aea:	3b01      	subs	r3, #1
 8008aec:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008aee:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008af4:	3b01      	subs	r3, #1
 8008af6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8008af8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b00:	3b01      	subs	r3, #1
 8008b02:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8008b08:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8008b0a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	430a      	orrs	r2, r1
 8008b1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fc56 	bl	80093d4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	40006400 	.word	0x40006400
 8008b4c:	40006500 	.word	0x40006500

08008b50 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b087      	sub	sp, #28
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
 8008b58:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008b60:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008b62:	7dfb      	ldrb	r3, [r7, #23]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d002      	beq.n	8008b6e <HAL_FDCAN_ConfigFilter+0x1e>
 8008b68:	7dfb      	ldrb	r3, [r7, #23]
 8008b6a:	2b02      	cmp	r3, #2
 8008b6c:	d13d      	bne.n	8008bea <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d119      	bne.n	8008baa <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	689b      	ldr	r3, [r3, #8]
 8008b7a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b82:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8008b8a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8008b90:	4313      	orrs	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	693a      	ldr	r2, [r7, #16]
 8008ba6:	601a      	str	r2, [r3, #0]
 8008ba8:	e01d      	b.n	8008be6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	075a      	lsls	r2, r3, #29
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	689b      	ldr	r3, [r3, #8]
 8008bbc:	079a      	lsls	r2, r3, #30
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	695b      	ldr	r3, [r3, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bca:	683b      	ldr	r3, [r7, #0]
 8008bcc:	685b      	ldr	r3, [r3, #4]
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	693a      	ldr	r2, [r7, #16]
 8008bd8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	3304      	adds	r3, #4
 8008bde:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	e006      	b.n	8008bf8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008bee:	f043 0202 	orr.w	r2, r3, #2
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
  }
}
 8008bf8:	4618      	mov	r0, r3
 8008bfa:	371c      	adds	r7, #28
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr

08008c04 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	2b01      	cmp	r3, #1
 8008c16:	d110      	bne.n	8008c3a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	e006      	b.n	8008c48 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c3e:	f043 0204 	orr.w	r2, r3, #4
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
  }
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b086      	sub	sp, #24
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	2b02      	cmp	r3, #2
 8008c6a:	d12c      	bne.n	8008cc6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d007      	beq.n	8008c8c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c80:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	e023      	b.n	8008cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008c94:	0c1b      	lsrs	r3, r3, #16
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	68b9      	ldr	r1, [r7, #8]
 8008ca2:	68f8      	ldr	r0, [r7, #12]
 8008ca4:	f000 fbf8 	bl	8009498 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	2101      	movs	r1, #1
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8008cb4:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8008cb8:	2201      	movs	r2, #1
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	409a      	lsls	r2, r3
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	e006      	b.n	8008cd4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cca:	f043 0208 	orr.w	r2, r3, #8
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
  }
}
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	3718      	adds	r7, #24
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8008cdc:	b480      	push	{r7}
 8008cde:	b08b      	sub	sp, #44	@ 0x2c
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	60f8      	str	r0, [r7, #12]
 8008ce4:	60b9      	str	r1, [r7, #8]
 8008ce6:	607a      	str	r2, [r7, #4]
 8008ce8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8008cea:	2300      	movs	r3, #0
 8008cec:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008cf4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8008cf6:	7efb      	ldrb	r3, [r7, #27]
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	f040 80e8 	bne.w	8008ece <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	2b40      	cmp	r3, #64	@ 0x40
 8008d02:	d137      	bne.n	8008d74 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d107      	bne.n	8008d24 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0db      	b.n	8008edc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2c:	0e1b      	lsrs	r3, r3, #24
 8008d2e:	f003 0301 	and.w	r3, r3, #1
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d10a      	bne.n	8008d4c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d3e:	0a5b      	lsrs	r3, r3, #9
 8008d40:	f003 0301 	and.w	r3, r3, #1
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d101      	bne.n	8008d4c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d54:	0a1b      	lsrs	r3, r3, #8
 8008d56:	f003 0303 	and.w	r3, r3, #3
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8008d64:	69fa      	ldr	r2, [r7, #28]
 8008d66:	4613      	mov	r3, r2
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4413      	add	r3, r2
 8008d6c:	00db      	lsls	r3, r3, #3
 8008d6e:	440b      	add	r3, r1
 8008d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d72:	e036      	b.n	8008de2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d7c:	f003 030f 	and.w	r3, r3, #15
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d107      	bne.n	8008d94 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008d88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8008d90:	2301      	movs	r3, #1
 8008d92:	e0a3      	b.n	8008edc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d9c:	0e1b      	lsrs	r3, r3, #24
 8008d9e:	f003 0301 	and.w	r3, r3, #1
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d10a      	bne.n	8008dbc <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dae:	0a1b      	lsrs	r3, r3, #8
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d101      	bne.n	8008dbc <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8008db8:	2301      	movs	r3, #1
 8008dba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008dc4:	0a1b      	lsrs	r3, r3, #8
 8008dc6:	f003 0303 	and.w	r3, r3, #3
 8008dca:	69fa      	ldr	r2, [r7, #28]
 8008dcc:	4413      	add	r3, r2
 8008dce:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8008dd4:	69fa      	ldr	r2, [r7, #28]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	00db      	lsls	r3, r3, #3
 8008dda:	4413      	add	r3, r2
 8008ddc:	00db      	lsls	r3, r3, #3
 8008dde:	440b      	add	r3, r1
 8008de0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8008de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d107      	bne.n	8008e06 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8008df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	0c9b      	lsrs	r3, r3, #18
 8008dfc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	e005      	b.n	8008e12 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8008e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8008e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	0c1b      	lsrs	r3, r3, #16
 8008e40:	f003 020f 	and.w	r2, r3, #15
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8008e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	0e1b      	lsrs	r3, r3, #24
 8008e66:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	0fda      	lsrs	r2, r3, #31
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8008e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e80:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008e82:	2300      	movs	r3, #0
 8008e84:	623b      	str	r3, [r7, #32]
 8008e86:	e00a      	b.n	8008e9e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8008e88:	697a      	ldr	r2, [r7, #20]
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	441a      	add	r2, r3
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6a3b      	ldr	r3, [r7, #32]
 8008e92:	440b      	add	r3, r1
 8008e94:	7812      	ldrb	r2, [r2, #0]
 8008e96:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8008e98:	6a3b      	ldr	r3, [r7, #32]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	623b      	str	r3, [r7, #32]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	4a11      	ldr	r2, [pc, #68]	@ (8008ee8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8008ea4:	5cd3      	ldrb	r3, [r2, r3]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	6a3b      	ldr	r3, [r7, #32]
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d3ec      	bcc.n	8008e88 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	2b40      	cmp	r3, #64	@ 0x40
 8008eb2:	d105      	bne.n	8008ec0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69fa      	ldr	r2, [r7, #28]
 8008eba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8008ebe:	e004      	b.n	8008eca <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	e006      	b.n	8008edc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008ed2:	f043 0208 	orr.w	r2, r3, #8
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
  }
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	372c      	adds	r7, #44	@ 0x2c
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	0800df80 	.word	0x0800df80

08008eec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b087      	sub	sp, #28
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	60f8      	str	r0, [r7, #12]
 8008ef4:	60b9      	str	r1, [r7, #8]
 8008ef6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8008efe:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8008f00:	7dfb      	ldrb	r3, [r7, #23]
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d003      	beq.n	8008f0e <HAL_FDCAN_ActivateNotification+0x22>
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	f040 80c8 	bne.w	800909e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f14:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	f003 0307 	and.w	r3, r3, #7
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d004      	beq.n	8008f2a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	f003 0301 	and.w	r3, r3, #1
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d03b      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d004      	beq.n	8008f3e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	f003 0302 	and.w	r3, r3, #2
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d031      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d004      	beq.n	8008f52 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	f003 0304 	and.w	r3, r3, #4
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d027      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f003 0308 	and.w	r3, r3, #8
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01d      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d004      	beq.n	8008f7a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f003 0310 	and.w	r3, r3, #16
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d013      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d009      	beq.n	8008fa2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00c      	beq.n	8008fb2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d107      	bne.n	8008fb2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f042 0201 	orr.w	r2, r2, #1
 8008fb0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d13b      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f003 0302 	and.w	r3, r3, #2
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d131      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d004      	beq.n	8008fee <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f003 0304 	and.w	r3, r3, #4
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d127      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d004      	beq.n	8009002 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	f003 0308 	and.w	r3, r3, #8
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d11d      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8009008:	2b00      	cmp	r3, #0
 800900a:	d004      	beq.n	8009016 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800900c:	693b      	ldr	r3, [r7, #16]
 800900e:	f003 0310 	and.w	r3, r3, #16
 8009012:	2b00      	cmp	r3, #0
 8009014:	d113      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800901c:	2b00      	cmp	r3, #0
 800901e:	d004      	beq.n	800902a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	d109      	bne.n	800903e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00c      	beq.n	800904e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f042 0202 	orr.w	r2, r2, #2
 800904c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	687a      	ldr	r2, [r7, #4]
 8009066:	430a      	orrs	r2, r1
 8009068:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009072:	2b00      	cmp	r3, #0
 8009074:	d009      	beq.n	800908a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	430a      	orrs	r2, r1
 8009086:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	68ba      	ldr	r2, [r7, #8]
 8009096:	430a      	orrs	r2, r1
 8009098:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 800909a:	2300      	movs	r3, #0
 800909c:	e006      	b.n	80090ac <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80090a2:	f043 0202 	orr.w	r2, r3, #2
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80090aa:	2301      	movs	r3, #1
  }
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	371c      	adds	r7, #28
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr

080090b8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80090b8:	b580      	push	{r7, lr}
 80090ba:	b08c      	sub	sp, #48	@ 0x30
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090c6:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80090ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80090d4:	4013      	ands	r3, r2
 80090d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090ec:	4013      	ands	r3, r2
 80090ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80090f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80090fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009102:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009104:	4013      	ands	r3, r2
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800910e:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 8009112:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800911a:	6a3a      	ldr	r2, [r7, #32]
 800911c:	4013      	ands	r3, r2
 800911e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009126:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800912a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009132:	69fa      	ldr	r2, [r7, #28]
 8009134:	4013      	ands	r3, r2
 8009136:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800913e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009146:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009148:	697b      	ldr	r3, [r7, #20]
 800914a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009152:	69bb      	ldr	r3, [r7, #24]
 8009154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009158:	2b00      	cmp	r3, #0
 800915a:	d006      	beq.n	800916a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2240      	movs	r2, #64	@ 0x40
 8009162:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f916 	bl	8009396 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009170:	2b00      	cmp	r3, #0
 8009172:	d019      	beq.n	80091a8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009174:	69bb      	ldr	r3, [r7, #24]
 8009176:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800917a:	2b00      	cmp	r3, #0
 800917c:	d014      	beq.n	80091a8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8009186:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8009190:	693a      	ldr	r2, [r7, #16]
 8009192:	4013      	ands	r3, r2
 8009194:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800919e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80091a0:	6939      	ldr	r1, [r7, #16]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f8d8 	bl	8009358 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80091a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d007      	beq.n	80091be <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091b4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80091b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	f000 f8a2 	bl	8009302 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d007      	beq.n	80091d4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091ca:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80091cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7fb fdd4 	bl	8004d7c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80091d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d007      	beq.n	80091ea <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091e0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80091e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f897 	bl	8009318 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00c      	beq.n	800920e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80091f4:	69bb      	ldr	r3, [r7, #24]
 80091f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d007      	beq.n	800920e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009206:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f890 	bl	800932e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009214:	2b00      	cmp	r3, #0
 8009216:	d018      	beq.n	800924a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8009218:	69bb      	ldr	r3, [r7, #24]
 800921a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800922a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4013      	ands	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	2280      	movs	r2, #128	@ 0x80
 8009240:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009242:	68f9      	ldr	r1, [r7, #12]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f87c 	bl	8009342 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00c      	beq.n	800926e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8009254:	69bb      	ldr	r3, [r7, #24]
 8009256:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d007      	beq.n	800926e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009266:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f880 	bl	800936e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00c      	beq.n	8009292 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d007      	beq.n	8009292 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800928a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 f878 	bl	8009382 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00f      	beq.n	80092bc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800929c:	69bb      	ldr	r3, [r7, #24]
 800929e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d00a      	beq.n	80092bc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80092ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092b4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80092bc:	69fb      	ldr	r3, [r7, #28]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d007      	beq.n	80092d2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	69fa      	ldr	r2, [r7, #28]
 80092c8:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80092ca:	69f9      	ldr	r1, [r7, #28]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f876 	bl	80093be <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6a3a      	ldr	r2, [r7, #32]
 80092de:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80092e4:	6a3b      	ldr	r3, [r7, #32]
 80092e6:	431a      	orrs	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f000 f858 	bl	80093aa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80092fa:	bf00      	nop
 80092fc:	3730      	adds	r7, #48	@ 0x30
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800930c:	bf00      	nop
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8009322:	bf00      	nop
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800932e:	b480      	push	{r7}
 8009330:	b083      	sub	sp, #12
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8009336:	bf00      	nop
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009342:	b480      	push	{r7}
 8009344:	b083      	sub	sp, #12
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800934c:	bf00      	nop
 800934e:	370c      	adds	r7, #12
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8009362:	bf00      	nop
 8009364:	370c      	adds	r7, #12
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800936e:	b480      	push	{r7}
 8009370:	b083      	sub	sp, #12
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8009376:	bf00      	nop
 8009378:	370c      	adds	r7, #12
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr

08009382 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009382:	b480      	push	{r7}
 8009384:	b083      	sub	sp, #12
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800938a:	bf00      	nop
 800938c:	370c      	adds	r7, #12
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8009396:	b480      	push	{r7}
 8009398:	b083      	sub	sp, #12
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800939e:	bf00      	nop
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80093be:	b480      	push	{r7}
 80093c0:	b083      	sub	sp, #12
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80093c8:	bf00      	nop
 80093ca:	370c      	adds	r7, #12
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80093dc:	4b2c      	ldr	r3, [pc, #176]	@ (8009490 <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80093de:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a2b      	ldr	r2, [pc, #172]	@ (8009494 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d103      	bne.n	80093f2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80093f0:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68ba      	ldr	r2, [r7, #8]
 80093f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009400:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009408:	041a      	lsls	r2, r3, #16
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	430a      	orrs	r2, r1
 8009410:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009426:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800942e:	061a      	lsls	r2, r3, #24
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	430a      	orrs	r2, r1
 8009436:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800943a:	68bb      	ldr	r3, [r7, #8]
 800943c:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800944e:	68bb      	ldr	r3, [r7, #8]
 8009450:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	60fb      	str	r3, [r7, #12]
 8009466:	e005      	b.n	8009474 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	3304      	adds	r3, #4
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	429a      	cmp	r2, r3
 800947e:	d3f3      	bcc.n	8009468 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	4000a400 	.word	0x4000a400
 8009494:	40006800 	.word	0x40006800

08009498 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8009498:	b480      	push	{r7}
 800949a:	b089      	sub	sp, #36	@ 0x24
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	607a      	str	r2, [r7, #4]
 80094a4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10a      	bne.n	80094c4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80094b6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80094be:	4313      	orrs	r3, r2
 80094c0:	61fb      	str	r3, [r7, #28]
 80094c2:	e00a      	b.n	80094da <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80094cc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80094ce:	68bb      	ldr	r3, [r7, #8]
 80094d0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80094d2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80094d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80094d8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6a1b      	ldr	r3, [r3, #32]
 80094de:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80094e4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80094ea:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80094f0:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80094f8:	4313      	orrs	r3, r2
 80094fa:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8009500:	683a      	ldr	r2, [r7, #0]
 8009502:	4613      	mov	r3, r2
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	4413      	add	r3, r2
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	440b      	add	r3, r1
 800950c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800950e:	69bb      	ldr	r3, [r7, #24]
 8009510:	69fa      	ldr	r2, [r7, #28]
 8009512:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009514:	69bb      	ldr	r3, [r7, #24]
 8009516:	3304      	adds	r3, #4
 8009518:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	693a      	ldr	r2, [r7, #16]
 800951e:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8009520:	69bb      	ldr	r3, [r7, #24]
 8009522:	3304      	adds	r3, #4
 8009524:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009526:	2300      	movs	r3, #0
 8009528:	617b      	str	r3, [r7, #20]
 800952a:	e020      	b.n	800956e <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	3303      	adds	r3, #3
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	4413      	add	r3, r2
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	3302      	adds	r3, #2
 800953c:	6879      	ldr	r1, [r7, #4]
 800953e:	440b      	add	r3, r1
 8009540:	781b      	ldrb	r3, [r3, #0]
 8009542:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8009544:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	3301      	adds	r3, #1
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	440b      	add	r3, r1
 800954e:	781b      	ldrb	r3, [r3, #0]
 8009550:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8009552:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8009554:	6879      	ldr	r1, [r7, #4]
 8009556:	697a      	ldr	r2, [r7, #20]
 8009558:	440a      	add	r2, r1
 800955a:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800955c:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8009562:	69bb      	ldr	r3, [r7, #24]
 8009564:	3304      	adds	r3, #4
 8009566:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	3304      	adds	r3, #4
 800956c:	617b      	str	r3, [r7, #20]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	4a06      	ldr	r2, [pc, #24]	@ (800958c <FDCAN_CopyMessageToRAM+0xf4>)
 8009574:	5cd3      	ldrb	r3, [r2, r3]
 8009576:	461a      	mov	r2, r3
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	4293      	cmp	r3, r2
 800957c:	d3d6      	bcc.n	800952c <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800957e:	bf00      	nop
 8009580:	bf00      	nop
 8009582:	3724      	adds	r7, #36	@ 0x24
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr
 800958c:	0800df80 	.word	0x0800df80

08009590 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d101      	bne.n	80095a2 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e033      	b.n	800960a <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80095a8:	b2db      	uxtb	r3, r3
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d106      	bne.n	80095bc <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2200      	movs	r2, #0
 80095b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7fc fca8 	bl	8005f0c <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f854 	bl	8009670 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f000 f822 	bl	8009612 <FMAC_Reset>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d10c      	bne.n	80095ee <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80095d8:	f043 0210 	orr.w	r2, r3, #16
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	22a0      	movs	r2, #160	@ 0xa0
 80095e4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	73fb      	strb	r3, [r7, #15]
 80095ec:	e008      	b.n	8009600 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2200      	movs	r2, #0
 80095f2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2220      	movs	r2, #32
 80095f8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 80095fc:	2300      	movs	r3, #0
 80095fe:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2200      	movs	r2, #0
 8009604:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800961a:	f7fc febb 	bl	8006394 <HAL_GetTick>
 800961e:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	691a      	ldr	r2, [r3, #16]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800962e:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009630:	e00f      	b.n	8009652 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8009632:	f7fc feaf 	bl	8006394 <HAL_GetTick>
 8009636:	4602      	mov	r2, r0
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	1ad3      	subs	r3, r2, r3
 800963c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8009640:	d907      	bls.n	8009652 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009646:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 800964e:	2301      	movs	r3, #1
 8009650:	e00a      	b.n	8009668 <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1e8      	bne.n	8009632 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 8009666:	2300      	movs	r3, #0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 f807 	bl	800968c <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f81b 	bl	80096ba <FMAC_ResetOutputStateAndDataPointers>
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 800968c:	b480      	push	{r7}
 800968e:	b083      	sub	sp, #12
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2220      	movs	r2, #32
 80096aa:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2200      	movs	r2, #0
 80096d2:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
 80096f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80096f2:	2300      	movs	r3, #0
 80096f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80096f6:	e15a      	b.n	80099ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	2101      	movs	r1, #1
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	fa01 f303 	lsl.w	r3, r1, r3
 8009704:	4013      	ands	r3, r2
 8009706:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 814c 	beq.w	80099a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	2b01      	cmp	r3, #1
 800971a:	d005      	beq.n	8009728 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009724:	2b02      	cmp	r3, #2
 8009726:	d130      	bne.n	800978a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	2203      	movs	r2, #3
 8009734:	fa02 f303 	lsl.w	r3, r2, r3
 8009738:	43db      	mvns	r3, r3
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	4013      	ands	r3, r2
 800973e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	68da      	ldr	r2, [r3, #12]
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	693a      	ldr	r2, [r7, #16]
 8009756:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800975e:	2201      	movs	r2, #1
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	fa02 f303 	lsl.w	r3, r2, r3
 8009766:	43db      	mvns	r3, r3
 8009768:	693a      	ldr	r2, [r7, #16]
 800976a:	4013      	ands	r3, r2
 800976c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	091b      	lsrs	r3, r3, #4
 8009774:	f003 0201 	and.w	r2, r3, #1
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	fa02 f303 	lsl.w	r3, r2, r3
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	4313      	orrs	r3, r2
 8009782:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b03      	cmp	r3, #3
 8009794:	d017      	beq.n	80097c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800979c:	697b      	ldr	r3, [r7, #20]
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	2203      	movs	r2, #3
 80097a2:	fa02 f303 	lsl.w	r3, r2, r3
 80097a6:	43db      	mvns	r3, r3
 80097a8:	693a      	ldr	r2, [r7, #16]
 80097aa:	4013      	ands	r3, r2
 80097ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	689a      	ldr	r2, [r3, #8]
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4313      	orrs	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	693a      	ldr	r2, [r7, #16]
 80097c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d123      	bne.n	800981a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	08da      	lsrs	r2, r3, #3
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	3208      	adds	r2, #8
 80097da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80097e0:	697b      	ldr	r3, [r7, #20]
 80097e2:	f003 0307 	and.w	r3, r3, #7
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	220f      	movs	r2, #15
 80097ea:	fa02 f303 	lsl.w	r3, r2, r3
 80097ee:	43db      	mvns	r3, r3
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	4013      	ands	r3, r2
 80097f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	691a      	ldr	r2, [r3, #16]
 80097fa:	697b      	ldr	r3, [r7, #20]
 80097fc:	f003 0307 	and.w	r3, r3, #7
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	fa02 f303 	lsl.w	r3, r2, r3
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	08da      	lsrs	r2, r3, #3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3208      	adds	r2, #8
 8009814:	6939      	ldr	r1, [r7, #16]
 8009816:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	005b      	lsls	r3, r3, #1
 8009824:	2203      	movs	r2, #3
 8009826:	fa02 f303 	lsl.w	r3, r2, r3
 800982a:	43db      	mvns	r3, r3
 800982c:	693a      	ldr	r2, [r7, #16]
 800982e:	4013      	ands	r3, r2
 8009830:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f003 0203 	and.w	r2, r3, #3
 800983a:	697b      	ldr	r3, [r7, #20]
 800983c:	005b      	lsls	r3, r3, #1
 800983e:	fa02 f303 	lsl.w	r3, r2, r3
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	693a      	ldr	r2, [r7, #16]
 800984c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8009856:	2b00      	cmp	r3, #0
 8009858:	f000 80a6 	beq.w	80099a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800985c:	4b5b      	ldr	r3, [pc, #364]	@ (80099cc <HAL_GPIO_Init+0x2e4>)
 800985e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009860:	4a5a      	ldr	r2, [pc, #360]	@ (80099cc <HAL_GPIO_Init+0x2e4>)
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	6613      	str	r3, [r2, #96]	@ 0x60
 8009868:	4b58      	ldr	r3, [pc, #352]	@ (80099cc <HAL_GPIO_Init+0x2e4>)
 800986a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	60bb      	str	r3, [r7, #8]
 8009872:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009874:	4a56      	ldr	r2, [pc, #344]	@ (80099d0 <HAL_GPIO_Init+0x2e8>)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	089b      	lsrs	r3, r3, #2
 800987a:	3302      	adds	r3, #2
 800987c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009880:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f003 0303 	and.w	r3, r3, #3
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	220f      	movs	r2, #15
 800988c:	fa02 f303 	lsl.w	r3, r2, r3
 8009890:	43db      	mvns	r3, r3
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	4013      	ands	r3, r2
 8009896:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800989e:	d01f      	beq.n	80098e0 <HAL_GPIO_Init+0x1f8>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a4c      	ldr	r2, [pc, #304]	@ (80099d4 <HAL_GPIO_Init+0x2ec>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d019      	beq.n	80098dc <HAL_GPIO_Init+0x1f4>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a4b      	ldr	r2, [pc, #300]	@ (80099d8 <HAL_GPIO_Init+0x2f0>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d013      	beq.n	80098d8 <HAL_GPIO_Init+0x1f0>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a4a      	ldr	r2, [pc, #296]	@ (80099dc <HAL_GPIO_Init+0x2f4>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d00d      	beq.n	80098d4 <HAL_GPIO_Init+0x1ec>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	4a49      	ldr	r2, [pc, #292]	@ (80099e0 <HAL_GPIO_Init+0x2f8>)
 80098bc:	4293      	cmp	r3, r2
 80098be:	d007      	beq.n	80098d0 <HAL_GPIO_Init+0x1e8>
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4a48      	ldr	r2, [pc, #288]	@ (80099e4 <HAL_GPIO_Init+0x2fc>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d101      	bne.n	80098cc <HAL_GPIO_Init+0x1e4>
 80098c8:	2305      	movs	r3, #5
 80098ca:	e00a      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098cc:	2306      	movs	r3, #6
 80098ce:	e008      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098d0:	2304      	movs	r3, #4
 80098d2:	e006      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098d4:	2303      	movs	r3, #3
 80098d6:	e004      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098d8:	2302      	movs	r3, #2
 80098da:	e002      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098dc:	2301      	movs	r3, #1
 80098de:	e000      	b.n	80098e2 <HAL_GPIO_Init+0x1fa>
 80098e0:	2300      	movs	r3, #0
 80098e2:	697a      	ldr	r2, [r7, #20]
 80098e4:	f002 0203 	and.w	r2, r2, #3
 80098e8:	0092      	lsls	r2, r2, #2
 80098ea:	4093      	lsls	r3, r2
 80098ec:	693a      	ldr	r2, [r7, #16]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098f2:	4937      	ldr	r1, [pc, #220]	@ (80099d0 <HAL_GPIO_Init+0x2e8>)
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	089b      	lsrs	r3, r3, #2
 80098f8:	3302      	adds	r3, #2
 80098fa:	693a      	ldr	r2, [r7, #16]
 80098fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009900:	4b39      	ldr	r3, [pc, #228]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	43db      	mvns	r3, r3
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4013      	ands	r3, r2
 800990e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009918:	2b00      	cmp	r3, #0
 800991a:	d003      	beq.n	8009924 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4313      	orrs	r3, r2
 8009922:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8009924:	4a30      	ldr	r2, [pc, #192]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800992a:	4b2f      	ldr	r3, [pc, #188]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	43db      	mvns	r3, r3
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	4013      	ands	r3, r2
 8009938:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009942:	2b00      	cmp	r3, #0
 8009944:	d003      	beq.n	800994e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8009946:	693a      	ldr	r2, [r7, #16]
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4313      	orrs	r3, r2
 800994c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800994e:	4a26      	ldr	r2, [pc, #152]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8009954:	4b24      	ldr	r3, [pc, #144]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	43db      	mvns	r3, r3
 800995e:	693a      	ldr	r2, [r7, #16]
 8009960:	4013      	ands	r3, r2
 8009962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800996c:	2b00      	cmp	r3, #0
 800996e:	d003      	beq.n	8009978 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4313      	orrs	r3, r2
 8009976:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8009978:	4a1b      	ldr	r2, [pc, #108]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800997e:	4b1a      	ldr	r3, [pc, #104]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	43db      	mvns	r3, r3
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	4013      	ands	r3, r2
 800998c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009996:	2b00      	cmp	r3, #0
 8009998:	d003      	beq.n	80099a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800999a:	693a      	ldr	r2, [r7, #16]
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4313      	orrs	r3, r2
 80099a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80099a2:	4a11      	ldr	r2, [pc, #68]	@ (80099e8 <HAL_GPIO_Init+0x300>)
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	3301      	adds	r3, #1
 80099ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	fa22 f303 	lsr.w	r3, r2, r3
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f47f ae9d 	bne.w	80096f8 <HAL_GPIO_Init+0x10>
  }
}
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	40021000 	.word	0x40021000
 80099d0:	40010000 	.word	0x40010000
 80099d4:	48000400 	.word	0x48000400
 80099d8:	48000800 	.word	0x48000800
 80099dc:	48000c00 	.word	0x48000c00
 80099e0:	48001000 	.word	0x48001000
 80099e4:	48001400 	.word	0x48001400
 80099e8:	40010400 	.word	0x40010400

080099ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	460b      	mov	r3, r1
 80099f6:	807b      	strh	r3, [r7, #2]
 80099f8:	4613      	mov	r3, r2
 80099fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80099fc:	787b      	ldrb	r3, [r7, #1]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8009a02:	887a      	ldrh	r2, [r7, #2]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009a08:	e002      	b.n	8009a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009a0a:	887a      	ldrh	r2, [r7, #2]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d141      	bne.n	8009aae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a36:	d131      	bne.n	8009a9c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a38:	4b47      	ldr	r3, [pc, #284]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a3e:	4a46      	ldr	r2, [pc, #280]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009a48:	4b43      	ldr	r3, [pc, #268]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009a50:	4a41      	ldr	r2, [pc, #260]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a52:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009a56:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009a58:	4b40      	ldr	r3, [pc, #256]	@ (8009b5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2232      	movs	r2, #50	@ 0x32
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	4a3f      	ldr	r2, [pc, #252]	@ (8009b60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009a64:	fba2 2303 	umull	r2, r3, r2, r3
 8009a68:	0c9b      	lsrs	r3, r3, #18
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a6e:	e002      	b.n	8009a76 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	3b01      	subs	r3, #1
 8009a74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009a76:	4b38      	ldr	r3, [pc, #224]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a82:	d102      	bne.n	8009a8a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1f2      	bne.n	8009a70 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009a8a:	4b33      	ldr	r3, [pc, #204]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a8c:	695b      	ldr	r3, [r3, #20]
 8009a8e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a92:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a96:	d158      	bne.n	8009b4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009a98:	2303      	movs	r3, #3
 8009a9a:	e057      	b.n	8009b4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009a9c:	4b2e      	ldr	r3, [pc, #184]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa2:	4a2d      	ldr	r2, [pc, #180]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009aa4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009aa8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009aac:	e04d      	b.n	8009b4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ab4:	d141      	bne.n	8009b3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8009ab6:	4b28      	ldr	r3, [pc, #160]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009abe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ac2:	d131      	bne.n	8009b28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009ac4:	4b24      	ldr	r3, [pc, #144]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ac6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aca:	4a23      	ldr	r2, [pc, #140]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009acc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ad0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8009ad4:	4b20      	ldr	r3, [pc, #128]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009adc:	4a1e      	ldr	r2, [pc, #120]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009ade:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009ae2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8009ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8009b5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2232      	movs	r2, #50	@ 0x32
 8009aea:	fb02 f303 	mul.w	r3, r2, r3
 8009aee:	4a1c      	ldr	r2, [pc, #112]	@ (8009b60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8009af0:	fba2 2303 	umull	r2, r3, r2, r3
 8009af4:	0c9b      	lsrs	r3, r3, #18
 8009af6:	3301      	adds	r3, #1
 8009af8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009afa:	e002      	b.n	8009b02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8009b02:	4b15      	ldr	r3, [pc, #84]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b04:	695b      	ldr	r3, [r3, #20]
 8009b06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b0e:	d102      	bne.n	8009b16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d1f2      	bne.n	8009afc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009b16:	4b10      	ldr	r3, [pc, #64]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b18:	695b      	ldr	r3, [r3, #20]
 8009b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b22:	d112      	bne.n	8009b4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8009b24:	2303      	movs	r3, #3
 8009b26:	e011      	b.n	8009b4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8009b28:	4b0b      	ldr	r3, [pc, #44]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009b34:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8009b38:	e007      	b.n	8009b4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009b3a:	4b07      	ldr	r3, [pc, #28]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8009b42:	4a05      	ldr	r2, [pc, #20]	@ (8009b58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8009b44:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009b48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8009b4a:	2300      	movs	r3, #0
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3714      	adds	r7, #20
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr
 8009b58:	40007000 	.word	0x40007000
 8009b5c:	200000f4 	.word	0x200000f4
 8009b60:	431bde83 	.word	0x431bde83

08009b64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8009b68:	4b05      	ldr	r3, [pc, #20]	@ (8009b80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	4a04      	ldr	r2, [pc, #16]	@ (8009b80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8009b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009b72:	6093      	str	r3, [r2, #8]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7c:	4770      	bx	lr
 8009b7e:	bf00      	nop
 8009b80:	40007000 	.word	0x40007000

08009b84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e2fe      	b.n	800a194 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d075      	beq.n	8009c8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ba2:	4b97      	ldr	r3, [pc, #604]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009ba4:	689b      	ldr	r3, [r3, #8]
 8009ba6:	f003 030c 	and.w	r3, r3, #12
 8009baa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009bac:	4b94      	ldr	r3, [pc, #592]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009bae:	68db      	ldr	r3, [r3, #12]
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8009bb6:	69bb      	ldr	r3, [r7, #24]
 8009bb8:	2b0c      	cmp	r3, #12
 8009bba:	d102      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x3e>
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	2b03      	cmp	r3, #3
 8009bc0:	d002      	beq.n	8009bc8 <HAL_RCC_OscConfig+0x44>
 8009bc2:	69bb      	ldr	r3, [r7, #24]
 8009bc4:	2b08      	cmp	r3, #8
 8009bc6:	d10b      	bne.n	8009be0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bc8:	4b8d      	ldr	r3, [pc, #564]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d05b      	beq.n	8009c8c <HAL_RCC_OscConfig+0x108>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d157      	bne.n	8009c8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009bdc:	2301      	movs	r3, #1
 8009bde:	e2d9      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009be8:	d106      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x74>
 8009bea:	4b85      	ldr	r3, [pc, #532]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a84      	ldr	r2, [pc, #528]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009bf0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	e01d      	b.n	8009c34 <HAL_RCC_OscConfig+0xb0>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	685b      	ldr	r3, [r3, #4]
 8009bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009c00:	d10c      	bne.n	8009c1c <HAL_RCC_OscConfig+0x98>
 8009c02:	4b7f      	ldr	r3, [pc, #508]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a7e      	ldr	r2, [pc, #504]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009c0c:	6013      	str	r3, [r2, #0]
 8009c0e:	4b7c      	ldr	r3, [pc, #496]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a7b      	ldr	r2, [pc, #492]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009c18:	6013      	str	r3, [r2, #0]
 8009c1a:	e00b      	b.n	8009c34 <HAL_RCC_OscConfig+0xb0>
 8009c1c:	4b78      	ldr	r3, [pc, #480]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a77      	ldr	r2, [pc, #476]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009c26:	6013      	str	r3, [r2, #0]
 8009c28:	4b75      	ldr	r3, [pc, #468]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	4a74      	ldr	r2, [pc, #464]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d013      	beq.n	8009c64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c3c:	f7fc fbaa 	bl	8006394 <HAL_GetTick>
 8009c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c44:	f7fc fba6 	bl	8006394 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b64      	cmp	r3, #100	@ 0x64
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e29e      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009c56:	4b6a      	ldr	r3, [pc, #424]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d0f0      	beq.n	8009c44 <HAL_RCC_OscConfig+0xc0>
 8009c62:	e014      	b.n	8009c8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c64:	f7fc fb96 	bl	8006394 <HAL_GetTick>
 8009c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c6a:	e008      	b.n	8009c7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c6c:	f7fc fb92 	bl	8006394 <HAL_GetTick>
 8009c70:	4602      	mov	r2, r0
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	1ad3      	subs	r3, r2, r3
 8009c76:	2b64      	cmp	r3, #100	@ 0x64
 8009c78:	d901      	bls.n	8009c7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	e28a      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009c7e:	4b60      	ldr	r3, [pc, #384]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f0      	bne.n	8009c6c <HAL_RCC_OscConfig+0xe8>
 8009c8a:	e000      	b.n	8009c8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f003 0302 	and.w	r3, r3, #2
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d075      	beq.n	8009d86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c9a:	4b59      	ldr	r3, [pc, #356]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f003 030c 	and.w	r3, r3, #12
 8009ca2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009ca4:	4b56      	ldr	r3, [pc, #344]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009ca6:	68db      	ldr	r3, [r3, #12]
 8009ca8:	f003 0303 	and.w	r3, r3, #3
 8009cac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8009cae:	69bb      	ldr	r3, [r7, #24]
 8009cb0:	2b0c      	cmp	r3, #12
 8009cb2:	d102      	bne.n	8009cba <HAL_RCC_OscConfig+0x136>
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	2b02      	cmp	r3, #2
 8009cb8:	d002      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x13c>
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	2b04      	cmp	r3, #4
 8009cbe:	d11f      	bne.n	8009d00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009cc0:	4b4f      	ldr	r3, [pc, #316]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d005      	beq.n	8009cd8 <HAL_RCC_OscConfig+0x154>
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	e25d      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cd8:	4b49      	ldr	r3, [pc, #292]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	691b      	ldr	r3, [r3, #16]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	4946      	ldr	r1, [pc, #280]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009cec:	4b45      	ldr	r3, [pc, #276]	@ (8009e04 <HAL_RCC_OscConfig+0x280>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7fc fb03 	bl	80062fc <HAL_InitTick>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d043      	beq.n	8009d84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	e249      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d023      	beq.n	8009d50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d08:	4b3d      	ldr	r3, [pc, #244]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a3c      	ldr	r2, [pc, #240]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d14:	f7fc fb3e 	bl	8006394 <HAL_GetTick>
 8009d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d1a:	e008      	b.n	8009d2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d1c:	f7fc fb3a 	bl	8006394 <HAL_GetTick>
 8009d20:	4602      	mov	r2, r0
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	d901      	bls.n	8009d2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e232      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009d2e:	4b34      	ldr	r3, [pc, #208]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d0f0      	beq.n	8009d1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d3a:	4b31      	ldr	r3, [pc, #196]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	061b      	lsls	r3, r3, #24
 8009d48:	492d      	ldr	r1, [pc, #180]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d4a:	4313      	orrs	r3, r2
 8009d4c:	604b      	str	r3, [r1, #4]
 8009d4e:	e01a      	b.n	8009d86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d50:	4b2b      	ldr	r3, [pc, #172]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2a      	ldr	r2, [pc, #168]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d56:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d5c:	f7fc fb1a 	bl	8006394 <HAL_GetTick>
 8009d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d62:	e008      	b.n	8009d76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d64:	f7fc fb16 	bl	8006394 <HAL_GetTick>
 8009d68:	4602      	mov	r2, r0
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	1ad3      	subs	r3, r2, r3
 8009d6e:	2b02      	cmp	r3, #2
 8009d70:	d901      	bls.n	8009d76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8009d72:	2303      	movs	r3, #3
 8009d74:	e20e      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009d76:	4b22      	ldr	r3, [pc, #136]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1f0      	bne.n	8009d64 <HAL_RCC_OscConfig+0x1e0>
 8009d82:	e000      	b.n	8009d86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d041      	beq.n	8009e16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	695b      	ldr	r3, [r3, #20]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01c      	beq.n	8009dd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d9a:	4b19      	ldr	r3, [pc, #100]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009da0:	4a17      	ldr	r2, [pc, #92]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009daa:	f7fc faf3 	bl	8006394 <HAL_GetTick>
 8009dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009db0:	e008      	b.n	8009dc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009db2:	f7fc faef 	bl	8006394 <HAL_GetTick>
 8009db6:	4602      	mov	r2, r0
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	1ad3      	subs	r3, r2, r3
 8009dbc:	2b02      	cmp	r3, #2
 8009dbe:	d901      	bls.n	8009dc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009dc0:	2303      	movs	r3, #3
 8009dc2:	e1e7      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dca:	f003 0302 	and.w	r3, r3, #2
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d0ef      	beq.n	8009db2 <HAL_RCC_OscConfig+0x22e>
 8009dd2:	e020      	b.n	8009e16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009dda:	4a09      	ldr	r2, [pc, #36]	@ (8009e00 <HAL_RCC_OscConfig+0x27c>)
 8009ddc:	f023 0301 	bic.w	r3, r3, #1
 8009de0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009de4:	f7fc fad6 	bl	8006394 <HAL_GetTick>
 8009de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009dea:	e00d      	b.n	8009e08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dec:	f7fc fad2 	bl	8006394 <HAL_GetTick>
 8009df0:	4602      	mov	r2, r0
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d906      	bls.n	8009e08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8009dfa:	2303      	movs	r3, #3
 8009dfc:	e1ca      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
 8009dfe:	bf00      	nop
 8009e00:	40021000 	.word	0x40021000
 8009e04:	200000f8 	.word	0x200000f8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009e08:	4b8c      	ldr	r3, [pc, #560]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009e0e:	f003 0302 	and.w	r3, r3, #2
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d1ea      	bne.n	8009dec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0304 	and.w	r3, r3, #4
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80a6 	beq.w	8009f70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e24:	2300      	movs	r3, #0
 8009e26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009e28:	4b84      	ldr	r3, [pc, #528]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_RCC_OscConfig+0x2b4>
 8009e34:	2301      	movs	r3, #1
 8009e36:	e000      	b.n	8009e3a <HAL_RCC_OscConfig+0x2b6>
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e3e:	4b7f      	ldr	r3, [pc, #508]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e42:	4a7e      	ldr	r2, [pc, #504]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e48:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e4a:	4b7c      	ldr	r3, [pc, #496]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e52:	60fb      	str	r3, [r7, #12]
 8009e54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8009e56:	2301      	movs	r3, #1
 8009e58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e5a:	4b79      	ldr	r3, [pc, #484]	@ (800a040 <HAL_RCC_OscConfig+0x4bc>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d118      	bne.n	8009e98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009e66:	4b76      	ldr	r3, [pc, #472]	@ (800a040 <HAL_RCC_OscConfig+0x4bc>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a75      	ldr	r2, [pc, #468]	@ (800a040 <HAL_RCC_OscConfig+0x4bc>)
 8009e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e72:	f7fc fa8f 	bl	8006394 <HAL_GetTick>
 8009e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e78:	e008      	b.n	8009e8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e7a:	f7fc fa8b 	bl	8006394 <HAL_GetTick>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	693b      	ldr	r3, [r7, #16]
 8009e82:	1ad3      	subs	r3, r2, r3
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e183      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009e8c:	4b6c      	ldr	r3, [pc, #432]	@ (800a040 <HAL_RCC_OscConfig+0x4bc>)
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0f0      	beq.n	8009e7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	d108      	bne.n	8009eb2 <HAL_RCC_OscConfig+0x32e>
 8009ea0:	4b66      	ldr	r3, [pc, #408]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ea6:	4a65      	ldr	r2, [pc, #404]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009eb0:	e024      	b.n	8009efc <HAL_RCC_OscConfig+0x378>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b05      	cmp	r3, #5
 8009eb8:	d110      	bne.n	8009edc <HAL_RCC_OscConfig+0x358>
 8009eba:	4b60      	ldr	r3, [pc, #384]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ec0:	4a5e      	ldr	r2, [pc, #376]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ec2:	f043 0304 	orr.w	r3, r3, #4
 8009ec6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009eca:	4b5c      	ldr	r3, [pc, #368]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ed0:	4a5a      	ldr	r2, [pc, #360]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ed2:	f043 0301 	orr.w	r3, r3, #1
 8009ed6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009eda:	e00f      	b.n	8009efc <HAL_RCC_OscConfig+0x378>
 8009edc:	4b57      	ldr	r3, [pc, #348]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ee2:	4a56      	ldr	r2, [pc, #344]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ee4:	f023 0301 	bic.w	r3, r3, #1
 8009ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8009eec:	4b53      	ldr	r3, [pc, #332]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ef2:	4a52      	ldr	r2, [pc, #328]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009ef4:	f023 0304 	bic.w	r3, r3, #4
 8009ef8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	689b      	ldr	r3, [r3, #8]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d016      	beq.n	8009f32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f04:	f7fc fa46 	bl	8006394 <HAL_GetTick>
 8009f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f0a:	e00a      	b.n	8009f22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f0c:	f7fc fa42 	bl	8006394 <HAL_GetTick>
 8009f10:	4602      	mov	r2, r0
 8009f12:	693b      	ldr	r3, [r7, #16]
 8009f14:	1ad3      	subs	r3, r2, r3
 8009f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e138      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009f22:	4b46      	ldr	r3, [pc, #280]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f28:	f003 0302 	and.w	r3, r3, #2
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d0ed      	beq.n	8009f0c <HAL_RCC_OscConfig+0x388>
 8009f30:	e015      	b.n	8009f5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f32:	f7fc fa2f 	bl	8006394 <HAL_GetTick>
 8009f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f38:	e00a      	b.n	8009f50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f3a:	f7fc fa2b 	bl	8006394 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	693b      	ldr	r3, [r7, #16]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d901      	bls.n	8009f50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e121      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009f50:	4b3a      	ldr	r3, [pc, #232]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009f56:	f003 0302 	and.w	r3, r3, #2
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d1ed      	bne.n	8009f3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009f5e:	7ffb      	ldrb	r3, [r7, #31]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d105      	bne.n	8009f70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f64:	4b35      	ldr	r3, [pc, #212]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009f68:	4a34      	ldr	r2, [pc, #208]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009f6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f003 0320 	and.w	r3, r3, #32
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d03c      	beq.n	8009ff6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d01c      	beq.n	8009fbe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f84:	4b2d      	ldr	r3, [pc, #180]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009f8a:	4a2c      	ldr	r2, [pc, #176]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f94:	f7fc f9fe 	bl	8006394 <HAL_GetTick>
 8009f98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009f9a:	e008      	b.n	8009fae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f9c:	f7fc f9fa 	bl	8006394 <HAL_GetTick>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	1ad3      	subs	r3, r2, r3
 8009fa6:	2b02      	cmp	r3, #2
 8009fa8:	d901      	bls.n	8009fae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e0f2      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009fae:	4b23      	ldr	r3, [pc, #140]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009fb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fb4:	f003 0302 	and.w	r3, r3, #2
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d0ef      	beq.n	8009f9c <HAL_RCC_OscConfig+0x418>
 8009fbc:	e01b      	b.n	8009ff6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009fbe:	4b1f      	ldr	r3, [pc, #124]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009fc6:	f023 0301 	bic.w	r3, r3, #1
 8009fca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009fce:	f7fc f9e1 	bl	8006394 <HAL_GetTick>
 8009fd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009fd4:	e008      	b.n	8009fe8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fd6:	f7fc f9dd 	bl	8006394 <HAL_GetTick>
 8009fda:	4602      	mov	r2, r0
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	1ad3      	subs	r3, r2, r3
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e0d5      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009fe8:	4b14      	ldr	r3, [pc, #80]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 8009fea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009fee:	f003 0302 	and.w	r3, r3, #2
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d1ef      	bne.n	8009fd6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	69db      	ldr	r3, [r3, #28]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f000 80c9 	beq.w	800a192 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a000:	4b0e      	ldr	r3, [pc, #56]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	f003 030c 	and.w	r3, r3, #12
 800a008:	2b0c      	cmp	r3, #12
 800a00a:	f000 8083 	beq.w	800a114 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	69db      	ldr	r3, [r3, #28]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d15e      	bne.n	800a0d4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a016:	4b09      	ldr	r3, [pc, #36]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a08      	ldr	r2, [pc, #32]	@ (800a03c <HAL_RCC_OscConfig+0x4b8>)
 800a01c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a022:	f7fc f9b7 	bl	8006394 <HAL_GetTick>
 800a026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a028:	e00c      	b.n	800a044 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a02a:	f7fc f9b3 	bl	8006394 <HAL_GetTick>
 800a02e:	4602      	mov	r2, r0
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	1ad3      	subs	r3, r2, r3
 800a034:	2b02      	cmp	r3, #2
 800a036:	d905      	bls.n	800a044 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a038:	2303      	movs	r3, #3
 800a03a:	e0ab      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
 800a03c:	40021000 	.word	0x40021000
 800a040:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a044:	4b55      	ldr	r3, [pc, #340]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1ec      	bne.n	800a02a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a050:	4b52      	ldr	r3, [pc, #328]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a052:	68da      	ldr	r2, [r3, #12]
 800a054:	4b52      	ldr	r3, [pc, #328]	@ (800a1a0 <HAL_RCC_OscConfig+0x61c>)
 800a056:	4013      	ands	r3, r2
 800a058:	687a      	ldr	r2, [r7, #4]
 800a05a:	6a11      	ldr	r1, [r2, #32]
 800a05c:	687a      	ldr	r2, [r7, #4]
 800a05e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800a060:	3a01      	subs	r2, #1
 800a062:	0112      	lsls	r2, r2, #4
 800a064:	4311      	orrs	r1, r2
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800a06a:	0212      	lsls	r2, r2, #8
 800a06c:	4311      	orrs	r1, r2
 800a06e:	687a      	ldr	r2, [r7, #4]
 800a070:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800a072:	0852      	lsrs	r2, r2, #1
 800a074:	3a01      	subs	r2, #1
 800a076:	0552      	lsls	r2, r2, #21
 800a078:	4311      	orrs	r1, r2
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800a07e:	0852      	lsrs	r2, r2, #1
 800a080:	3a01      	subs	r2, #1
 800a082:	0652      	lsls	r2, r2, #25
 800a084:	4311      	orrs	r1, r2
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800a08a:	06d2      	lsls	r2, r2, #27
 800a08c:	430a      	orrs	r2, r1
 800a08e:	4943      	ldr	r1, [pc, #268]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a090:	4313      	orrs	r3, r2
 800a092:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a094:	4b41      	ldr	r3, [pc, #260]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a40      	ldr	r2, [pc, #256]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a09a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a09e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a0a0:	4b3e      	ldr	r3, [pc, #248]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0a2:	68db      	ldr	r3, [r3, #12]
 800a0a4:	4a3d      	ldr	r2, [pc, #244]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0a6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a0aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ac:	f7fc f972 	bl	8006394 <HAL_GetTick>
 800a0b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0b2:	e008      	b.n	800a0c6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0b4:	f7fc f96e 	bl	8006394 <HAL_GetTick>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e066      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a0c6:	4b35      	ldr	r3, [pc, #212]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0f0      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x530>
 800a0d2:	e05e      	b.n	800a192 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0d4:	4b31      	ldr	r3, [pc, #196]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a30      	ldr	r2, [pc, #192]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a0de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7fc f958 	bl	8006394 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0e8:	f7fc f954 	bl	8006394 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e04c      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a0fa:	4b28      	ldr	r3, [pc, #160]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a106:	4b25      	ldr	r3, [pc, #148]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a108:	68da      	ldr	r2, [r3, #12]
 800a10a:	4924      	ldr	r1, [pc, #144]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a10c:	4b25      	ldr	r3, [pc, #148]	@ (800a1a4 <HAL_RCC_OscConfig+0x620>)
 800a10e:	4013      	ands	r3, r2
 800a110:	60cb      	str	r3, [r1, #12]
 800a112:	e03e      	b.n	800a192 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	2b01      	cmp	r3, #1
 800a11a:	d101      	bne.n	800a120 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e039      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a120:	4b1e      	ldr	r3, [pc, #120]	@ (800a19c <HAL_RCC_OscConfig+0x618>)
 800a122:	68db      	ldr	r3, [r3, #12]
 800a124:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	f003 0203 	and.w	r2, r3, #3
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6a1b      	ldr	r3, [r3, #32]
 800a130:	429a      	cmp	r2, r3
 800a132:	d12c      	bne.n	800a18e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a13e:	3b01      	subs	r3, #1
 800a140:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a142:	429a      	cmp	r2, r3
 800a144:	d123      	bne.n	800a18e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a150:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a152:	429a      	cmp	r2, r3
 800a154:	d11b      	bne.n	800a18e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a160:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a162:	429a      	cmp	r2, r3
 800a164:	d113      	bne.n	800a18e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a170:	085b      	lsrs	r3, r3, #1
 800a172:	3b01      	subs	r3, #1
 800a174:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a176:	429a      	cmp	r2, r3
 800a178:	d109      	bne.n	800a18e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a184:	085b      	lsrs	r3, r3, #1
 800a186:	3b01      	subs	r3, #1
 800a188:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d001      	beq.n	800a192 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e000      	b.n	800a194 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800a192:	2300      	movs	r3, #0
}
 800a194:	4618      	mov	r0, r3
 800a196:	3720      	adds	r7, #32
 800a198:	46bd      	mov	sp, r7
 800a19a:	bd80      	pop	{r7, pc}
 800a19c:	40021000 	.word	0x40021000
 800a1a0:	019f800c 	.word	0x019f800c
 800a1a4:	feeefffc 	.word	0xfeeefffc

0800a1a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	b086      	sub	sp, #24
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e11e      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a1c0:	4b91      	ldr	r3, [pc, #580]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	683a      	ldr	r2, [r7, #0]
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d910      	bls.n	800a1f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1ce:	4b8e      	ldr	r3, [pc, #568]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f023 020f 	bic.w	r2, r3, #15
 800a1d6:	498c      	ldr	r1, [pc, #560]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1de:	4b8a      	ldr	r3, [pc, #552]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 030f 	and.w	r3, r3, #15
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d001      	beq.n	800a1f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e106      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	f003 0301 	and.w	r3, r3, #1
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d073      	beq.n	800a2e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2b03      	cmp	r3, #3
 800a202:	d129      	bne.n	800a258 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a204:	4b81      	ldr	r3, [pc, #516]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a210:	2301      	movs	r3, #1
 800a212:	e0f4      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a214:	f000 f966 	bl	800a4e4 <RCC_GetSysClockFreqFromPLLSource>
 800a218:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	4a7c      	ldr	r2, [pc, #496]	@ (800a410 <HAL_RCC_ClockConfig+0x268>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d93f      	bls.n	800a2a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a222:	4b7a      	ldr	r3, [pc, #488]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a224:	689b      	ldr	r3, [r3, #8]
 800a226:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d009      	beq.n	800a242 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a236:	2b00      	cmp	r3, #0
 800a238:	d033      	beq.n	800a2a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d12f      	bne.n	800a2a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a242:	4b72      	ldr	r3, [pc, #456]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a244:	689b      	ldr	r3, [r3, #8]
 800a246:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a24a:	4a70      	ldr	r2, [pc, #448]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a24c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a250:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a252:	2380      	movs	r3, #128	@ 0x80
 800a254:	617b      	str	r3, [r7, #20]
 800a256:	e024      	b.n	800a2a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	685b      	ldr	r3, [r3, #4]
 800a25c:	2b02      	cmp	r3, #2
 800a25e:	d107      	bne.n	800a270 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a260:	4b6a      	ldr	r3, [pc, #424]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d109      	bne.n	800a280 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a26c:	2301      	movs	r3, #1
 800a26e:	e0c6      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a270:	4b66      	ldr	r3, [pc, #408]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d101      	bne.n	800a280 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e0be      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a280:	f000 f8ce 	bl	800a420 <HAL_RCC_GetSysClockFreq>
 800a284:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	4a61      	ldr	r2, [pc, #388]	@ (800a410 <HAL_RCC_ClockConfig+0x268>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d909      	bls.n	800a2a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a28e:	4b5f      	ldr	r3, [pc, #380]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a296:	4a5d      	ldr	r2, [pc, #372]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a298:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a29c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a29e:	2380      	movs	r3, #128	@ 0x80
 800a2a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2a2:	4b5a      	ldr	r3, [pc, #360]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f023 0203 	bic.w	r2, r3, #3
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	685b      	ldr	r3, [r3, #4]
 800a2ae:	4957      	ldr	r1, [pc, #348]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2b4:	f7fc f86e 	bl	8006394 <HAL_GetTick>
 800a2b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ba:	e00a      	b.n	800a2d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2bc:	f7fc f86a 	bl	8006394 <HAL_GetTick>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d901      	bls.n	800a2d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e095      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2d2:	4b4e      	ldr	r3, [pc, #312]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 020c 	and.w	r2, r3, #12
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d1eb      	bne.n	800a2bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	f003 0302 	and.w	r3, r3, #2
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d023      	beq.n	800a338 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d005      	beq.n	800a308 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a2fc:	4b43      	ldr	r3, [pc, #268]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a2fe:	689b      	ldr	r3, [r3, #8]
 800a300:	4a42      	ldr	r2, [pc, #264]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a302:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a306:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0308 	and.w	r3, r3, #8
 800a310:	2b00      	cmp	r3, #0
 800a312:	d007      	beq.n	800a324 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a314:	4b3d      	ldr	r3, [pc, #244]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a31c:	4a3b      	ldr	r2, [pc, #236]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a31e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800a322:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a324:	4b39      	ldr	r3, [pc, #228]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	689b      	ldr	r3, [r3, #8]
 800a330:	4936      	ldr	r1, [pc, #216]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a332:	4313      	orrs	r3, r2
 800a334:	608b      	str	r3, [r1, #8]
 800a336:	e008      	b.n	800a34a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	2b80      	cmp	r3, #128	@ 0x80
 800a33c:	d105      	bne.n	800a34a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a33e:	4b33      	ldr	r3, [pc, #204]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	4a32      	ldr	r2, [pc, #200]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a344:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a348:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a34a:	4b2f      	ldr	r3, [pc, #188]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f003 030f 	and.w	r3, r3, #15
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	429a      	cmp	r2, r3
 800a356:	d21d      	bcs.n	800a394 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a358:	4b2b      	ldr	r3, [pc, #172]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f023 020f 	bic.w	r2, r3, #15
 800a360:	4929      	ldr	r1, [pc, #164]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	4313      	orrs	r3, r2
 800a366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a368:	f7fc f814 	bl	8006394 <HAL_GetTick>
 800a36c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a36e:	e00a      	b.n	800a386 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a370:	f7fc f810 	bl	8006394 <HAL_GetTick>
 800a374:	4602      	mov	r2, r0
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	1ad3      	subs	r3, r2, r3
 800a37a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a37e:	4293      	cmp	r3, r2
 800a380:	d901      	bls.n	800a386 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e03b      	b.n	800a3fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a386:	4b20      	ldr	r3, [pc, #128]	@ (800a408 <HAL_RCC_ClockConfig+0x260>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 030f 	and.w	r3, r3, #15
 800a38e:	683a      	ldr	r2, [r7, #0]
 800a390:	429a      	cmp	r2, r3
 800a392:	d1ed      	bne.n	800a370 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	f003 0304 	and.w	r3, r3, #4
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d008      	beq.n	800a3b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a3a0:	4b1a      	ldr	r3, [pc, #104]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a3a2:	689b      	ldr	r3, [r3, #8]
 800a3a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	4917      	ldr	r1, [pc, #92]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a3ae:	4313      	orrs	r3, r2
 800a3b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f003 0308 	and.w	r3, r3, #8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d009      	beq.n	800a3d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a3be:	4b13      	ldr	r3, [pc, #76]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	490f      	ldr	r1, [pc, #60]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a3d2:	f000 f825 	bl	800a420 <HAL_RCC_GetSysClockFreq>
 800a3d6:	4602      	mov	r2, r0
 800a3d8:	4b0c      	ldr	r3, [pc, #48]	@ (800a40c <HAL_RCC_ClockConfig+0x264>)
 800a3da:	689b      	ldr	r3, [r3, #8]
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	490c      	ldr	r1, [pc, #48]	@ (800a414 <HAL_RCC_ClockConfig+0x26c>)
 800a3e4:	5ccb      	ldrb	r3, [r1, r3]
 800a3e6:	f003 031f 	and.w	r3, r3, #31
 800a3ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a3ee:	4a0a      	ldr	r2, [pc, #40]	@ (800a418 <HAL_RCC_ClockConfig+0x270>)
 800a3f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800a3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a41c <HAL_RCC_ClockConfig+0x274>)
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fb ff80 	bl	80062fc <HAL_InitTick>
 800a3fc:	4603      	mov	r3, r0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3718      	adds	r7, #24
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	40022000 	.word	0x40022000
 800a40c:	40021000 	.word	0x40021000
 800a410:	04c4b400 	.word	0x04c4b400
 800a414:	0800df70 	.word	0x0800df70
 800a418:	200000f4 	.word	0x200000f4
 800a41c:	200000f8 	.word	0x200000f8

0800a420 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a420:	b480      	push	{r7}
 800a422:	b087      	sub	sp, #28
 800a424:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800a426:	4b2c      	ldr	r3, [pc, #176]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 030c 	and.w	r3, r3, #12
 800a42e:	2b04      	cmp	r3, #4
 800a430:	d102      	bne.n	800a438 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a432:	4b2a      	ldr	r3, [pc, #168]	@ (800a4dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a434:	613b      	str	r3, [r7, #16]
 800a436:	e047      	b.n	800a4c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800a438:	4b27      	ldr	r3, [pc, #156]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a43a:	689b      	ldr	r3, [r3, #8]
 800a43c:	f003 030c 	and.w	r3, r3, #12
 800a440:	2b08      	cmp	r3, #8
 800a442:	d102      	bne.n	800a44a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a444:	4b26      	ldr	r3, [pc, #152]	@ (800a4e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a446:	613b      	str	r3, [r7, #16]
 800a448:	e03e      	b.n	800a4c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800a44a:	4b23      	ldr	r3, [pc, #140]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 030c 	and.w	r3, r3, #12
 800a452:	2b0c      	cmp	r3, #12
 800a454:	d136      	bne.n	800a4c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a456:	4b20      	ldr	r3, [pc, #128]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	f003 0303 	and.w	r3, r3, #3
 800a45e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a460:	4b1d      	ldr	r3, [pc, #116]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	091b      	lsrs	r3, r3, #4
 800a466:	f003 030f 	and.w	r3, r3, #15
 800a46a:	3301      	adds	r3, #1
 800a46c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2b03      	cmp	r3, #3
 800a472:	d10c      	bne.n	800a48e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a474:	4a1a      	ldr	r2, [pc, #104]	@ (800a4e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47c:	4a16      	ldr	r2, [pc, #88]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a47e:	68d2      	ldr	r2, [r2, #12]
 800a480:	0a12      	lsrs	r2, r2, #8
 800a482:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a486:	fb02 f303 	mul.w	r3, r2, r3
 800a48a:	617b      	str	r3, [r7, #20]
      break;
 800a48c:	e00c      	b.n	800a4a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a48e:	4a13      	ldr	r2, [pc, #76]	@ (800a4dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	fbb2 f3f3 	udiv	r3, r2, r3
 800a496:	4a10      	ldr	r2, [pc, #64]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a498:	68d2      	ldr	r2, [r2, #12]
 800a49a:	0a12      	lsrs	r2, r2, #8
 800a49c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a4a0:	fb02 f303 	mul.w	r3, r2, r3
 800a4a4:	617b      	str	r3, [r7, #20]
      break;
 800a4a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800a4d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	0e5b      	lsrs	r3, r3, #25
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	3301      	adds	r3, #1
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c0:	613b      	str	r3, [r7, #16]
 800a4c2:	e001      	b.n	800a4c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800a4c8:	693b      	ldr	r3, [r7, #16]
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	371c      	adds	r7, #28
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr
 800a4d6:	bf00      	nop
 800a4d8:	40021000 	.word	0x40021000
 800a4dc:	00f42400 	.word	0x00f42400
 800a4e0:	007a1200 	.word	0x007a1200

0800a4e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b087      	sub	sp, #28
 800a4e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a4ea:	4b1e      	ldr	r3, [pc, #120]	@ (800a564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4ec:	68db      	ldr	r3, [r3, #12]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a4f4:	4b1b      	ldr	r3, [pc, #108]	@ (800a564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	091b      	lsrs	r3, r3, #4
 800a4fa:	f003 030f 	and.w	r3, r3, #15
 800a4fe:	3301      	adds	r3, #1
 800a500:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	2b03      	cmp	r3, #3
 800a506:	d10c      	bne.n	800a522 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a508:	4a17      	ldr	r2, [pc, #92]	@ (800a568 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a510:	4a14      	ldr	r2, [pc, #80]	@ (800a564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a512:	68d2      	ldr	r2, [r2, #12]
 800a514:	0a12      	lsrs	r2, r2, #8
 800a516:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a51a:	fb02 f303 	mul.w	r3, r2, r3
 800a51e:	617b      	str	r3, [r7, #20]
    break;
 800a520:	e00c      	b.n	800a53c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800a522:	4a12      	ldr	r2, [pc, #72]	@ (800a56c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	fbb2 f3f3 	udiv	r3, r2, r3
 800a52a:	4a0e      	ldr	r2, [pc, #56]	@ (800a564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a52c:	68d2      	ldr	r2, [r2, #12]
 800a52e:	0a12      	lsrs	r2, r2, #8
 800a530:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a534:	fb02 f303 	mul.w	r3, r2, r3
 800a538:	617b      	str	r3, [r7, #20]
    break;
 800a53a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a53c:	4b09      	ldr	r3, [pc, #36]	@ (800a564 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800a53e:	68db      	ldr	r3, [r3, #12]
 800a540:	0e5b      	lsrs	r3, r3, #25
 800a542:	f003 0303 	and.w	r3, r3, #3
 800a546:	3301      	adds	r3, #1
 800a548:	005b      	lsls	r3, r3, #1
 800a54a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800a54c:	697a      	ldr	r2, [r7, #20]
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	fbb2 f3f3 	udiv	r3, r2, r3
 800a554:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800a556:	687b      	ldr	r3, [r7, #4]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	371c      	adds	r7, #28
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	40021000 	.word	0x40021000
 800a568:	007a1200 	.word	0x007a1200
 800a56c:	00f42400 	.word	0x00f42400

0800a570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a578:	2300      	movs	r3, #0
 800a57a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a57c:	2300      	movs	r3, #0
 800a57e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 8098 	beq.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a58e:	2300      	movs	r3, #0
 800a590:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a592:	4b43      	ldr	r3, [pc, #268]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a596:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d10d      	bne.n	800a5ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a59e:	4b40      	ldr	r3, [pc, #256]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5a2:	4a3f      	ldr	r2, [pc, #252]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5a8:	6593      	str	r3, [r2, #88]	@ 0x58
 800a5aa:	4b3d      	ldr	r3, [pc, #244]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5b2:	60bb      	str	r3, [r7, #8]
 800a5b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a5ba:	4b3a      	ldr	r3, [pc, #232]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a39      	ldr	r2, [pc, #228]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a5c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a5c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a5c6:	f7fb fee5 	bl	8006394 <HAL_GetTick>
 800a5ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5cc:	e009      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a5ce:	f7fb fee1 	bl	8006394 <HAL_GetTick>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	1ad3      	subs	r3, r2, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d902      	bls.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800a5dc:	2303      	movs	r3, #3
 800a5de:	74fb      	strb	r3, [r7, #19]
        break;
 800a5e0:	e005      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a5e2:	4b30      	ldr	r3, [pc, #192]	@ (800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d0ef      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800a5ee:	7cfb      	ldrb	r3, [r7, #19]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d159      	bne.n	800a6a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a5f4:	4b2a      	ldr	r3, [pc, #168]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a5f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a5fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a600:	697b      	ldr	r3, [r7, #20]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d01e      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a60a:	697a      	ldr	r2, [r7, #20]
 800a60c:	429a      	cmp	r2, r3
 800a60e:	d019      	beq.n	800a644 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a610:	4b23      	ldr	r3, [pc, #140]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a612:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a61a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a61c:	4b20      	ldr	r3, [pc, #128]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a61e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a622:	4a1f      	ldr	r2, [pc, #124]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a624:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a62c:	4b1c      	ldr	r3, [pc, #112]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a632:	4a1b      	ldr	r2, [pc, #108]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a634:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a63c:	4a18      	ldr	r2, [pc, #96]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a63e:	697b      	ldr	r3, [r7, #20]
 800a640:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	f003 0301 	and.w	r3, r3, #1
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d016      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a64e:	f7fb fea1 	bl	8006394 <HAL_GetTick>
 800a652:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a654:	e00b      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a656:	f7fb fe9d 	bl	8006394 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	f241 3288 	movw	r2, #5000	@ 0x1388
 800a664:	4293      	cmp	r3, r2
 800a666:	d902      	bls.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800a668:	2303      	movs	r3, #3
 800a66a:	74fb      	strb	r3, [r7, #19]
            break;
 800a66c:	e006      	b.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a66e:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a674:	f003 0302 	and.w	r3, r3, #2
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0ec      	beq.n	800a656 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800a67c:	7cfb      	ldrb	r3, [r7, #19]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d10b      	bne.n	800a69a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a682:	4b07      	ldr	r3, [pc, #28]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a684:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a688:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a690:	4903      	ldr	r1, [pc, #12]	@ (800a6a0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800a692:	4313      	orrs	r3, r2
 800a694:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800a698:	e008      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a69a:	7cfb      	ldrb	r3, [r7, #19]
 800a69c:	74bb      	strb	r3, [r7, #18]
 800a69e:	e005      	b.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800a6a0:	40021000 	.word	0x40021000
 800a6a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6a8:	7cfb      	ldrb	r3, [r7, #19]
 800a6aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a6ac:	7c7b      	ldrb	r3, [r7, #17]
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d105      	bne.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a6b2:	4ba7      	ldr	r3, [pc, #668]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a6b6:	4aa6      	ldr	r2, [pc, #664]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a6bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f003 0301 	and.w	r3, r3, #1
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a6ca:	4ba1      	ldr	r3, [pc, #644]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6d0:	f023 0203 	bic.w	r2, r3, #3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	685b      	ldr	r3, [r3, #4]
 800a6d8:	499d      	ldr	r1, [pc, #628]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 0302 	and.w	r3, r3, #2
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a6ec:	4b98      	ldr	r3, [pc, #608]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a6f2:	f023 020c 	bic.w	r2, r3, #12
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	689b      	ldr	r3, [r3, #8]
 800a6fa:	4995      	ldr	r1, [pc, #596]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f003 0304 	and.w	r3, r3, #4
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800a70e:	4b90      	ldr	r3, [pc, #576]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a714:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	498c      	ldr	r1, [pc, #560]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f003 0308 	and.w	r3, r3, #8
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00a      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800a730:	4b87      	ldr	r3, [pc, #540]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a732:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a736:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	691b      	ldr	r3, [r3, #16]
 800a73e:	4984      	ldr	r1, [pc, #528]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a740:	4313      	orrs	r3, r2
 800a742:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0310 	and.w	r3, r3, #16
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d00a      	beq.n	800a768 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800a752:	4b7f      	ldr	r3, [pc, #508]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a754:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a758:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	695b      	ldr	r3, [r3, #20]
 800a760:	497b      	ldr	r1, [pc, #492]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a762:	4313      	orrs	r3, r2
 800a764:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f003 0320 	and.w	r3, r3, #32
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00a      	beq.n	800a78a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a774:	4b76      	ldr	r3, [pc, #472]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a77a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	699b      	ldr	r3, [r3, #24]
 800a782:	4973      	ldr	r1, [pc, #460]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a784:	4313      	orrs	r3, r2
 800a786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00a      	beq.n	800a7ac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a796:	4b6e      	ldr	r3, [pc, #440]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a798:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a79c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	69db      	ldr	r3, [r3, #28]
 800a7a4:	496a      	ldr	r1, [pc, #424]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d00a      	beq.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800a7b8:	4b65      	ldr	r3, [pc, #404]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7be:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a1b      	ldr	r3, [r3, #32]
 800a7c6:	4962      	ldr	r1, [pc, #392]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d00a      	beq.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a7da:	4b5d      	ldr	r3, [pc, #372]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a7e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7e8:	4959      	ldr	r1, [pc, #356]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00a      	beq.n	800a812 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a7fc:	4b54      	ldr	r3, [pc, #336]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a7fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a802:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80a:	4951      	ldr	r1, [pc, #324]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a80c:	4313      	orrs	r3, r2
 800a80e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d015      	beq.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a81e:	4b4c      	ldr	r3, [pc, #304]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a820:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a824:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a82c:	4948      	ldr	r1, [pc, #288]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a82e:	4313      	orrs	r3, r2
 800a830:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a838:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a83c:	d105      	bne.n	800a84a <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a83e:	4b44      	ldr	r3, [pc, #272]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a840:	68db      	ldr	r3, [r3, #12]
 800a842:	4a43      	ldr	r2, [pc, #268]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a844:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a848:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a852:	2b00      	cmp	r3, #0
 800a854:	d015      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a856:	4b3e      	ldr	r3, [pc, #248]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a85c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a864:	493a      	ldr	r1, [pc, #232]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a866:	4313      	orrs	r3, r2
 800a868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a870:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a874:	d105      	bne.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a876:	4b36      	ldr	r3, [pc, #216]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a878:	68db      	ldr	r3, [r3, #12]
 800a87a:	4a35      	ldr	r2, [pc, #212]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a87c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a880:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d015      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a88e:	4b30      	ldr	r3, [pc, #192]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a894:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a89c:	492c      	ldr	r1, [pc, #176]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a8ac:	d105      	bne.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8ae:	4b28      	ldr	r3, [pc, #160]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8b0:	68db      	ldr	r3, [r3, #12]
 800a8b2:	4a27      	ldr	r2, [pc, #156]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8b8:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d015      	beq.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a8c6:	4b22      	ldr	r3, [pc, #136]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a8cc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8d4:	491e      	ldr	r1, [pc, #120]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8e4:	d105      	bne.n	800a8f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a8e6:	4b1a      	ldr	r3, [pc, #104]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8e8:	68db      	ldr	r3, [r3, #12]
 800a8ea:	4a19      	ldr	r2, [pc, #100]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a8ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8f0:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d015      	beq.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8fe:	4b14      	ldr	r3, [pc, #80]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a904:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a90c:	4910      	ldr	r1, [pc, #64]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a90e:	4313      	orrs	r3, r2
 800a910:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a918:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a91c:	d105      	bne.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a91e:	4b0c      	ldr	r3, [pc, #48]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	4a0b      	ldr	r2, [pc, #44]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a924:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a928:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a932:	2b00      	cmp	r3, #0
 800a934:	d018      	beq.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800a936:	4b06      	ldr	r3, [pc, #24]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a93c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a944:	4902      	ldr	r1, [pc, #8]	@ (800a950 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800a946:	4313      	orrs	r3, r2
 800a948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	e001      	b.n	800a954 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800a950:	40021000 	.word	0x40021000
 800a954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a956:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a95a:	d105      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a95c:	4b21      	ldr	r3, [pc, #132]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	4a20      	ldr	r2, [pc, #128]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a966:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a970:	2b00      	cmp	r3, #0
 800a972:	d015      	beq.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800a974:	4b1b      	ldr	r3, [pc, #108]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a976:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a97a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a982:	4918      	ldr	r1, [pc, #96]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a984:	4313      	orrs	r3, r2
 800a986:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a98e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a992:	d105      	bne.n	800a9a0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800a994:	4b13      	ldr	r3, [pc, #76]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	4a12      	ldr	r2, [pc, #72]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a99a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a99e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d015      	beq.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a9ac:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a9ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a9b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9ba:	490a      	ldr	r1, [pc, #40]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a9c6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9ca:	d105      	bne.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a9cc:	4b05      	ldr	r3, [pc, #20]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	4a04      	ldr	r2, [pc, #16]	@ (800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800a9d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800a9d8:	7cbb      	ldrb	r3, [r7, #18]
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3718      	adds	r7, #24
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40021000 	.word	0x40021000

0800a9e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b084      	sub	sp, #16
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d101      	bne.n	800a9fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e09d      	b.n	800ab36 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d108      	bne.n	800aa14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aa0a:	d009      	beq.n	800aa20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	61da      	str	r2, [r3, #28]
 800aa12:	e005      	b.n	800aa20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2200      	movs	r2, #0
 800aa18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2200      	movs	r2, #0
 800aa24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800aa2c:	b2db      	uxtb	r3, r3
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d106      	bne.n	800aa40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2200      	movs	r2, #0
 800aa36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f7fb fa86 	bl	8005f4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aa56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	68db      	ldr	r3, [r3, #12]
 800aa5c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa60:	d902      	bls.n	800aa68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800aa62:	2300      	movs	r3, #0
 800aa64:	60fb      	str	r3, [r7, #12]
 800aa66:	e002      	b.n	800aa6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800aa68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800aa6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800aa76:	d007      	beq.n	800aa88 <HAL_SPI_Init+0xa0>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	68db      	ldr	r3, [r3, #12]
 800aa7c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800aa80:	d002      	beq.n	800aa88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2200      	movs	r2, #0
 800aa86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800aa98:	431a      	orrs	r2, r3
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	691b      	ldr	r3, [r3, #16]
 800aa9e:	f003 0302 	and.w	r3, r3, #2
 800aaa2:	431a      	orrs	r2, r3
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	695b      	ldr	r3, [r3, #20]
 800aaa8:	f003 0301 	and.w	r3, r3, #1
 800aaac:	431a      	orrs	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800aab6:	431a      	orrs	r2, r3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	69db      	ldr	r3, [r3, #28]
 800aabc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aac0:	431a      	orrs	r2, r3
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6a1b      	ldr	r3, [r3, #32]
 800aac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaca:	ea42 0103 	orr.w	r1, r2, r3
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	699b      	ldr	r3, [r3, #24]
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	f003 0204 	and.w	r2, r3, #4
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	f003 0310 	and.w	r3, r3, #16
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaf6:	f003 0308 	and.w	r3, r3, #8
 800aafa:	431a      	orrs	r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68db      	ldr	r3, [r3, #12]
 800ab00:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800ab04:	ea42 0103 	orr.w	r1, r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800ab24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2201      	movs	r2, #1
 800ab30:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800ab34:	2300      	movs	r3, #0
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3710      	adds	r7, #16
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab3e:	b580      	push	{r7, lr}
 800ab40:	b08a      	sub	sp, #40	@ 0x28
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	60f8      	str	r0, [r7, #12]
 800ab46:	60b9      	str	r1, [r7, #8]
 800ab48:	607a      	str	r2, [r7, #4]
 800ab4a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab4c:	2301      	movs	r3, #1
 800ab4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800ab5c:	2b01      	cmp	r3, #1
 800ab5e:	d101      	bne.n	800ab64 <HAL_SPI_TransmitReceive+0x26>
 800ab60:	2302      	movs	r3, #2
 800ab62:	e20a      	b.n	800af7a <HAL_SPI_TransmitReceive+0x43c>
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	2201      	movs	r2, #1
 800ab68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab6c:	f7fb fc12 	bl	8006394 <HAL_GetTick>
 800ab70:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ab78:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800ab80:	887b      	ldrh	r3, [r7, #2]
 800ab82:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800ab84:	887b      	ldrh	r3, [r7, #2]
 800ab86:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800ab88:	7efb      	ldrb	r3, [r7, #27]
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d00e      	beq.n	800abac <HAL_SPI_TransmitReceive+0x6e>
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ab94:	d106      	bne.n	800aba4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d102      	bne.n	800aba4 <HAL_SPI_TransmitReceive+0x66>
 800ab9e:	7efb      	ldrb	r3, [r7, #27]
 800aba0:	2b04      	cmp	r3, #4
 800aba2:	d003      	beq.n	800abac <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 800aba4:	2302      	movs	r3, #2
 800aba6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800abaa:	e1e0      	b.n	800af6e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d005      	beq.n	800abbe <HAL_SPI_TransmitReceive+0x80>
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d002      	beq.n	800abbe <HAL_SPI_TransmitReceive+0x80>
 800abb8:	887b      	ldrh	r3, [r7, #2]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d103      	bne.n	800abc6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 800abc4:	e1d3      	b.n	800af6e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b04      	cmp	r3, #4
 800abd0:	d003      	beq.n	800abda <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	2205      	movs	r2, #5
 800abd6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	887a      	ldrh	r2, [r7, #2]
 800abea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	887a      	ldrh	r2, [r7, #2]
 800abf2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	68ba      	ldr	r2, [r7, #8]
 800abfa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	887a      	ldrh	r2, [r7, #2]
 800ac00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	887a      	ldrh	r2, [r7, #2]
 800ac06:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	2200      	movs	r2, #0
 800ac12:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac1c:	d802      	bhi.n	800ac24 <HAL_SPI_TransmitReceive+0xe6>
 800ac1e:	8a3b      	ldrh	r3, [r7, #16]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d908      	bls.n	800ac36 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	685a      	ldr	r2, [r3, #4]
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800ac32:	605a      	str	r2, [r3, #4]
 800ac34:	e007      	b.n	800ac46 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	685a      	ldr	r2, [r3, #4]
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac44:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ac50:	2b40      	cmp	r3, #64	@ 0x40
 800ac52:	d007      	beq.n	800ac64 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	68db      	ldr	r3, [r3, #12]
 800ac68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ac6c:	f240 8081 	bls.w	800ad72 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d002      	beq.n	800ac7e <HAL_SPI_TransmitReceive+0x140>
 800ac78:	8a7b      	ldrh	r3, [r7, #18]
 800ac7a:	2b01      	cmp	r3, #1
 800ac7c:	d16d      	bne.n	800ad5a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac82:	881a      	ldrh	r2, [r3, #0]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac8e:	1c9a      	adds	r2, r3, #2
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	b29a      	uxth	r2, r3
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aca2:	e05a      	b.n	800ad5a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	689b      	ldr	r3, [r3, #8]
 800acaa:	f003 0302 	and.w	r3, r3, #2
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d11b      	bne.n	800acea <HAL_SPI_TransmitReceive+0x1ac>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d016      	beq.n	800acea <HAL_SPI_TransmitReceive+0x1ac>
 800acbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d113      	bne.n	800acea <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acc6:	881a      	ldrh	r2, [r3, #0]
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acd2:	1c9a      	adds	r2, r3, #2
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800acdc:	b29b      	uxth	r3, r3
 800acde:	3b01      	subs	r3, #1
 800ace0:	b29a      	uxth	r2, r3
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ace6:	2300      	movs	r3, #0
 800ace8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	689b      	ldr	r3, [r3, #8]
 800acf0:	f003 0301 	and.w	r3, r3, #1
 800acf4:	2b01      	cmp	r3, #1
 800acf6:	d11c      	bne.n	800ad32 <HAL_SPI_TransmitReceive+0x1f4>
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d016      	beq.n	800ad32 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	68da      	ldr	r2, [r3, #12]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0e:	b292      	uxth	r2, r2
 800ad10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad16:	1c9a      	adds	r2, r3, #2
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	3b01      	subs	r3, #1
 800ad26:	b29a      	uxth	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad2e:	2301      	movs	r3, #1
 800ad30:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad32:	f7fb fb2f 	bl	8006394 <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d80b      	bhi.n	800ad5a <HAL_SPI_TransmitReceive+0x21c>
 800ad42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad48:	d007      	beq.n	800ad5a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800ad58:	e109      	b.n	800af6e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad5e:	b29b      	uxth	r3, r3
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d19f      	bne.n	800aca4 <HAL_SPI_TransmitReceive+0x166>
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d199      	bne.n	800aca4 <HAL_SPI_TransmitReceive+0x166>
 800ad70:	e0e3      	b.n	800af3a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	685b      	ldr	r3, [r3, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <HAL_SPI_TransmitReceive+0x244>
 800ad7a:	8a7b      	ldrh	r3, [r7, #18]
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	f040 80cf 	bne.w	800af20 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ad86:	b29b      	uxth	r3, r3
 800ad88:	2b01      	cmp	r3, #1
 800ad8a:	d912      	bls.n	800adb2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad90:	881a      	ldrh	r2, [r3, #0]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad9c:	1c9a      	adds	r2, r3, #2
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	3b02      	subs	r3, #2
 800adaa:	b29a      	uxth	r2, r3
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800adb0:	e0b6      	b.n	800af20 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	330c      	adds	r3, #12
 800adbc:	7812      	ldrb	r2, [r2, #0]
 800adbe:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800adc4:	1c5a      	adds	r2, r3, #1
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adce:	b29b      	uxth	r3, r3
 800add0:	3b01      	subs	r3, #1
 800add2:	b29a      	uxth	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800add8:	e0a2      	b.n	800af20 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	689b      	ldr	r3, [r3, #8]
 800ade0:	f003 0302 	and.w	r3, r3, #2
 800ade4:	2b02      	cmp	r3, #2
 800ade6:	d134      	bne.n	800ae52 <HAL_SPI_TransmitReceive+0x314>
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adec:	b29b      	uxth	r3, r3
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d02f      	beq.n	800ae52 <HAL_SPI_TransmitReceive+0x314>
 800adf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d12c      	bne.n	800ae52 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	d912      	bls.n	800ae28 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae06:	881a      	ldrh	r2, [r3, #0]
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae12:	1c9a      	adds	r2, r3, #2
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	3b02      	subs	r3, #2
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ae26:	e012      	b.n	800ae4e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	330c      	adds	r3, #12
 800ae32:	7812      	ldrb	r2, [r2, #0]
 800ae34:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	3b01      	subs	r3, #1
 800ae48:	b29a      	uxth	r2, r3
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f003 0301 	and.w	r3, r3, #1
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d148      	bne.n	800aef2 <HAL_SPI_TransmitReceive+0x3b4>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ae66:	b29b      	uxth	r3, r3
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d042      	beq.n	800aef2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	d923      	bls.n	800aec0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68da      	ldr	r2, [r3, #12]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae82:	b292      	uxth	r2, r2
 800ae84:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae8a:	1c9a      	adds	r2, r3, #2
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	3b02      	subs	r3, #2
 800ae9a:	b29a      	uxth	r2, r3
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d81f      	bhi.n	800aeee <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	685a      	ldr	r2, [r3, #4]
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800aebc:	605a      	str	r2, [r3, #4]
 800aebe:	e016      	b.n	800aeee <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f103 020c 	add.w	r2, r3, #12
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	b2d2      	uxtb	r2, r2
 800aed0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed6:	1c5a      	adds	r2, r3, #1
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	3b01      	subs	r3, #1
 800aee6:	b29a      	uxth	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800aeee:	2301      	movs	r3, #1
 800aef0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800aef2:	f7fb fa4f 	bl	8006394 <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aefe:	429a      	cmp	r2, r3
 800af00:	d803      	bhi.n	800af0a <HAL_SPI_TransmitReceive+0x3cc>
 800af02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af08:	d102      	bne.n	800af10 <HAL_SPI_TransmitReceive+0x3d2>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d107      	bne.n	800af20 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800af10:	2303      	movs	r3, #3
 800af12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2201      	movs	r2, #1
 800af1a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 800af1e:	e026      	b.n	800af6e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800af24:	b29b      	uxth	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	f47f af57 	bne.w	800adda <HAL_SPI_TransmitReceive+0x29c>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800af32:	b29b      	uxth	r3, r3
 800af34:	2b00      	cmp	r3, #0
 800af36:	f47f af50 	bne.w	800adda <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800af3a:	69fa      	ldr	r2, [r7, #28]
 800af3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af3e:	68f8      	ldr	r0, [r7, #12]
 800af40:	f000 f93e 	bl	800b1c0 <SPI_EndRxTxTransaction>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d005      	beq.n	800af56 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800af4a:	2301      	movs	r3, #1
 800af4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2220      	movs	r2, #32
 800af54:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d003      	beq.n	800af66 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800af64:	e003      	b.n	800af6e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2201      	movs	r2, #1
 800af6a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 800af76:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800af7a:	4618      	mov	r0, r3
 800af7c:	3728      	adds	r7, #40	@ 0x28
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
	...

0800af84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	60f8      	str	r0, [r7, #12]
 800af8c:	60b9      	str	r1, [r7, #8]
 800af8e:	603b      	str	r3, [r7, #0]
 800af90:	4613      	mov	r3, r2
 800af92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af94:	f7fb f9fe 	bl	8006394 <HAL_GetTick>
 800af98:	4602      	mov	r2, r0
 800af9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af9c:	1a9b      	subs	r3, r3, r2
 800af9e:	683a      	ldr	r2, [r7, #0]
 800afa0:	4413      	add	r3, r2
 800afa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afa4:	f7fb f9f6 	bl	8006394 <HAL_GetTick>
 800afa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afaa:	4b39      	ldr	r3, [pc, #228]	@ (800b090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	015b      	lsls	r3, r3, #5
 800afb0:	0d1b      	lsrs	r3, r3, #20
 800afb2:	69fa      	ldr	r2, [r7, #28]
 800afb4:	fb02 f303 	mul.w	r3, r2, r3
 800afb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afba:	e054      	b.n	800b066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afc2:	d050      	beq.n	800b066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800afc4:	f7fb f9e6 	bl	8006394 <HAL_GetTick>
 800afc8:	4602      	mov	r2, r0
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	1ad3      	subs	r3, r2, r3
 800afce:	69fa      	ldr	r2, [r7, #28]
 800afd0:	429a      	cmp	r2, r3
 800afd2:	d902      	bls.n	800afda <SPI_WaitFlagStateUntilTimeout+0x56>
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d13d      	bne.n	800b056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800afe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800aff2:	d111      	bne.n	800b018 <SPI_WaitFlagStateUntilTimeout+0x94>
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	689b      	ldr	r3, [r3, #8]
 800aff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800affc:	d004      	beq.n	800b008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b006:	d107      	bne.n	800b018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	681a      	ldr	r2, [r3, #0]
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b01c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b020:	d10f      	bne.n	800b042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2201      	movs	r2, #1
 800b046:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b052:	2303      	movs	r3, #3
 800b054:	e017      	b.n	800b086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b05c:	2300      	movs	r3, #0
 800b05e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	3b01      	subs	r3, #1
 800b064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	4013      	ands	r3, r2
 800b070:	68ba      	ldr	r2, [r7, #8]
 800b072:	429a      	cmp	r2, r3
 800b074:	bf0c      	ite	eq
 800b076:	2301      	moveq	r3, #1
 800b078:	2300      	movne	r3, #0
 800b07a:	b2db      	uxtb	r3, r3
 800b07c:	461a      	mov	r2, r3
 800b07e:	79fb      	ldrb	r3, [r7, #7]
 800b080:	429a      	cmp	r2, r3
 800b082:	d19b      	bne.n	800afbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b084:	2300      	movs	r3, #0
}
 800b086:	4618      	mov	r0, r3
 800b088:	3720      	adds	r7, #32
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}
 800b08e:	bf00      	nop
 800b090:	200000f4 	.word	0x200000f4

0800b094 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b08a      	sub	sp, #40	@ 0x28
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
 800b0a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b0a6:	f7fb f975 	bl	8006394 <HAL_GetTick>
 800b0aa:	4602      	mov	r2, r0
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ae:	1a9b      	subs	r3, r3, r2
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800b0b6:	f7fb f96d 	bl	8006394 <HAL_GetTick>
 800b0ba:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	330c      	adds	r3, #12
 800b0c2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b0c4:	4b3d      	ldr	r3, [pc, #244]	@ (800b1bc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	00da      	lsls	r2, r3, #3
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	0d1b      	lsrs	r3, r3, #20
 800b0d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0d6:	fb02 f303 	mul.w	r3, r2, r3
 800b0da:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b0dc:	e060      	b.n	800b1a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b0e4:	d107      	bne.n	800b0f6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d104      	bne.n	800b0f6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	b2db      	uxtb	r3, r3
 800b0f2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b0f4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fc:	d050      	beq.n	800b1a0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b0fe:	f7fb f949 	bl	8006394 <HAL_GetTick>
 800b102:	4602      	mov	r2, r0
 800b104:	6a3b      	ldr	r3, [r7, #32]
 800b106:	1ad3      	subs	r3, r2, r3
 800b108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d902      	bls.n	800b114 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b10e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b110:	2b00      	cmp	r3, #0
 800b112:	d13d      	bne.n	800b190 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800b122:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	685b      	ldr	r3, [r3, #4]
 800b128:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b12c:	d111      	bne.n	800b152 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	689b      	ldr	r3, [r3, #8]
 800b132:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b136:	d004      	beq.n	800b142 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b140:	d107      	bne.n	800b152 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b150:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b156:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b15a:	d10f      	bne.n	800b17c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	681a      	ldr	r2, [r3, #0]
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800b16a:	601a      	str	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800b17a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800b18c:	2303      	movs	r3, #3
 800b18e:	e010      	b.n	800b1b2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	689a      	ldr	r2, [r3, #8]
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	4013      	ands	r3, r2
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d196      	bne.n	800b0de <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3728      	adds	r7, #40	@ 0x28
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	200000f4 	.word	0x200000f4

0800b1c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b1c0:	b580      	push	{r7, lr}
 800b1c2:	b086      	sub	sp, #24
 800b1c4:	af02      	add	r7, sp, #8
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	9300      	str	r3, [sp, #0]
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f7ff ff5b 	bl	800b094 <SPI_WaitFifoStateUntilTimeout>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d007      	beq.n	800b1f4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b1e8:	f043 0220 	orr.w	r2, r3, #32
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b1f0:	2303      	movs	r3, #3
 800b1f2:	e027      	b.n	800b244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	9300      	str	r3, [sp, #0]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	2180      	movs	r1, #128	@ 0x80
 800b1fe:	68f8      	ldr	r0, [r7, #12]
 800b200:	f7ff fec0 	bl	800af84 <SPI_WaitFlagStateUntilTimeout>
 800b204:	4603      	mov	r3, r0
 800b206:	2b00      	cmp	r3, #0
 800b208:	d007      	beq.n	800b21a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b20e:	f043 0220 	orr.w	r2, r3, #32
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b216:	2303      	movs	r3, #3
 800b218:	e014      	b.n	800b244 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	2200      	movs	r2, #0
 800b222:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800b226:	68f8      	ldr	r0, [r7, #12]
 800b228:	f7ff ff34 	bl	800b094 <SPI_WaitFifoStateUntilTimeout>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d007      	beq.n	800b242 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b236:	f043 0220 	orr.w	r2, r3, #32
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800b23e:	2303      	movs	r3, #3
 800b240:	e000      	b.n	800b244 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800b242:	2300      	movs	r3, #0
}
 800b244:	4618      	mov	r0, r3
 800b246:	3710      	adds	r7, #16
 800b248:	46bd      	mov	sp, r7
 800b24a:	bd80      	pop	{r7, pc}

0800b24c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b082      	sub	sp, #8
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d101      	bne.n	800b25e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b25a:	2301      	movs	r3, #1
 800b25c:	e049      	b.n	800b2f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b264:	b2db      	uxtb	r3, r3
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f7fa feac 	bl	8005fd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2202      	movs	r2, #2
 800b27c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3304      	adds	r3, #4
 800b288:	4619      	mov	r1, r3
 800b28a:	4610      	mov	r0, r2
 800b28c:	f000 fe04 	bl	800be98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2201      	movs	r2, #1
 800b294:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2201      	movs	r2, #1
 800b29c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2201      	movs	r2, #1
 800b2ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2201      	movs	r2, #1
 800b2c4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2201      	movs	r2, #1
 800b2dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3708      	adds	r7, #8
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
	...

0800b2fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b2fc:	b480      	push	{r7}
 800b2fe:	b085      	sub	sp, #20
 800b300:	af00      	add	r7, sp, #0
 800b302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b30a:	b2db      	uxtb	r3, r3
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d001      	beq.n	800b314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e04f      	b.n	800b3b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	f042 0201 	orr.w	r2, r2, #1
 800b32a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	4a23      	ldr	r2, [pc, #140]	@ (800b3c0 <HAL_TIM_Base_Start_IT+0xc4>)
 800b332:	4293      	cmp	r3, r2
 800b334:	d01d      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b33e:	d018      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a1f      	ldr	r2, [pc, #124]	@ (800b3c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d013      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c8 <HAL_TIM_Base_Start_IT+0xcc>)
 800b350:	4293      	cmp	r3, r2
 800b352:	d00e      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4a1c      	ldr	r2, [pc, #112]	@ (800b3cc <HAL_TIM_Base_Start_IT+0xd0>)
 800b35a:	4293      	cmp	r3, r2
 800b35c:	d009      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a1b      	ldr	r2, [pc, #108]	@ (800b3d0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d004      	beq.n	800b372 <HAL_TIM_Base_Start_IT+0x76>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a19      	ldr	r2, [pc, #100]	@ (800b3d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b36e:	4293      	cmp	r3, r2
 800b370:	d115      	bne.n	800b39e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	4b17      	ldr	r3, [pc, #92]	@ (800b3d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b37a:	4013      	ands	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b06      	cmp	r3, #6
 800b382:	d015      	beq.n	800b3b0 <HAL_TIM_Base_Start_IT+0xb4>
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b38a:	d011      	beq.n	800b3b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	f042 0201 	orr.w	r2, r2, #1
 800b39a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b39c:	e008      	b.n	800b3b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681a      	ldr	r2, [r3, #0]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f042 0201 	orr.w	r2, r2, #1
 800b3ac:	601a      	str	r2, [r3, #0]
 800b3ae:	e000      	b.n	800b3b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	3714      	adds	r7, #20
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr
 800b3c0:	40012c00 	.word	0x40012c00
 800b3c4:	40000400 	.word	0x40000400
 800b3c8:	40000800 	.word	0x40000800
 800b3cc:	40013400 	.word	0x40013400
 800b3d0:	40014000 	.word	0x40014000
 800b3d4:	40015000 	.word	0x40015000
 800b3d8:	00010007 	.word	0x00010007

0800b3dc <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b082      	sub	sp, #8
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d101      	bne.n	800b3ee <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	e049      	b.n	800b482 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b3f4:	b2db      	uxtb	r3, r3
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d106      	bne.n	800b408 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800b402:	6878      	ldr	r0, [r7, #4]
 800b404:	f000 f841 	bl	800b48a <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2202      	movs	r2, #2
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	3304      	adds	r3, #4
 800b418:	4619      	mov	r1, r3
 800b41a:	4610      	mov	r0, r2
 800b41c:	f000 fd3c 	bl	800be98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2201      	movs	r2, #1
 800b424:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2201      	movs	r2, #1
 800b42c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3708      	adds	r7, #8
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}

0800b48a <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800b48a:	b480      	push	{r7}
 800b48c:	b083      	sub	sp, #12
 800b48e:	af00      	add	r7, sp, #0
 800b490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800b492:	bf00      	nop
 800b494:	370c      	adds	r7, #12
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b49e:	b580      	push	{r7, lr}
 800b4a0:	b082      	sub	sp, #8
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	e049      	b.n	800b544 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4b6:	b2db      	uxtb	r3, r3
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f841 	bl	800b54c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	4619      	mov	r1, r3
 800b4dc:	4610      	mov	r0, r2
 800b4de:	f000 fcdb 	bl	800be98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	2201      	movs	r2, #1
 800b4e6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2201      	movs	r2, #1
 800b4f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2201      	movs	r2, #1
 800b4fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	2201      	movs	r2, #1
 800b506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	2201      	movs	r2, #1
 800b50e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2201      	movs	r2, #1
 800b516:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	2201      	movs	r2, #1
 800b51e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2201      	movs	r2, #1
 800b526:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2201      	movs	r2, #1
 800b52e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	2201      	movs	r2, #1
 800b536:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	2201      	movs	r2, #1
 800b53e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3708      	adds	r7, #8
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}

0800b54c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d109      	bne.n	800b584 <HAL_TIM_PWM_Start+0x24>
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b576:	b2db      	uxtb	r3, r3
 800b578:	2b01      	cmp	r3, #1
 800b57a:	bf14      	ite	ne
 800b57c:	2301      	movne	r3, #1
 800b57e:	2300      	moveq	r3, #0
 800b580:	b2db      	uxtb	r3, r3
 800b582:	e03c      	b.n	800b5fe <HAL_TIM_PWM_Start+0x9e>
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	2b04      	cmp	r3, #4
 800b588:	d109      	bne.n	800b59e <HAL_TIM_PWM_Start+0x3e>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b590:	b2db      	uxtb	r3, r3
 800b592:	2b01      	cmp	r3, #1
 800b594:	bf14      	ite	ne
 800b596:	2301      	movne	r3, #1
 800b598:	2300      	moveq	r3, #0
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	e02f      	b.n	800b5fe <HAL_TIM_PWM_Start+0x9e>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	2b08      	cmp	r3, #8
 800b5a2:	d109      	bne.n	800b5b8 <HAL_TIM_PWM_Start+0x58>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	bf14      	ite	ne
 800b5b0:	2301      	movne	r3, #1
 800b5b2:	2300      	moveq	r3, #0
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	e022      	b.n	800b5fe <HAL_TIM_PWM_Start+0x9e>
 800b5b8:	683b      	ldr	r3, [r7, #0]
 800b5ba:	2b0c      	cmp	r3, #12
 800b5bc:	d109      	bne.n	800b5d2 <HAL_TIM_PWM_Start+0x72>
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5c4:	b2db      	uxtb	r3, r3
 800b5c6:	2b01      	cmp	r3, #1
 800b5c8:	bf14      	ite	ne
 800b5ca:	2301      	movne	r3, #1
 800b5cc:	2300      	moveq	r3, #0
 800b5ce:	b2db      	uxtb	r3, r3
 800b5d0:	e015      	b.n	800b5fe <HAL_TIM_PWM_Start+0x9e>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	2b10      	cmp	r3, #16
 800b5d6:	d109      	bne.n	800b5ec <HAL_TIM_PWM_Start+0x8c>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b5de:	b2db      	uxtb	r3, r3
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	bf14      	ite	ne
 800b5e4:	2301      	movne	r3, #1
 800b5e6:	2300      	moveq	r3, #0
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	e008      	b.n	800b5fe <HAL_TIM_PWM_Start+0x9e>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	bf14      	ite	ne
 800b5f8:	2301      	movne	r3, #1
 800b5fa:	2300      	moveq	r3, #0
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d001      	beq.n	800b606 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e0a1      	b.n	800b74a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d104      	bne.n	800b616 <HAL_TIM_PWM_Start+0xb6>
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	2202      	movs	r2, #2
 800b610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b614:	e023      	b.n	800b65e <HAL_TIM_PWM_Start+0xfe>
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	2b04      	cmp	r3, #4
 800b61a:	d104      	bne.n	800b626 <HAL_TIM_PWM_Start+0xc6>
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b624:	e01b      	b.n	800b65e <HAL_TIM_PWM_Start+0xfe>
 800b626:	683b      	ldr	r3, [r7, #0]
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d104      	bne.n	800b636 <HAL_TIM_PWM_Start+0xd6>
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2202      	movs	r2, #2
 800b630:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b634:	e013      	b.n	800b65e <HAL_TIM_PWM_Start+0xfe>
 800b636:	683b      	ldr	r3, [r7, #0]
 800b638:	2b0c      	cmp	r3, #12
 800b63a:	d104      	bne.n	800b646 <HAL_TIM_PWM_Start+0xe6>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2202      	movs	r2, #2
 800b640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b644:	e00b      	b.n	800b65e <HAL_TIM_PWM_Start+0xfe>
 800b646:	683b      	ldr	r3, [r7, #0]
 800b648:	2b10      	cmp	r3, #16
 800b64a:	d104      	bne.n	800b656 <HAL_TIM_PWM_Start+0xf6>
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2202      	movs	r2, #2
 800b650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b654:	e003      	b.n	800b65e <HAL_TIM_PWM_Start+0xfe>
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2202      	movs	r2, #2
 800b65a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	2201      	movs	r2, #1
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	4618      	mov	r0, r3
 800b668:	f001 f886 	bl	800c778 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a38      	ldr	r2, [pc, #224]	@ (800b754 <HAL_TIM_PWM_Start+0x1f4>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d018      	beq.n	800b6a8 <HAL_TIM_PWM_Start+0x148>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a37      	ldr	r2, [pc, #220]	@ (800b758 <HAL_TIM_PWM_Start+0x1f8>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d013      	beq.n	800b6a8 <HAL_TIM_PWM_Start+0x148>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a35      	ldr	r2, [pc, #212]	@ (800b75c <HAL_TIM_PWM_Start+0x1fc>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d00e      	beq.n	800b6a8 <HAL_TIM_PWM_Start+0x148>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a34      	ldr	r2, [pc, #208]	@ (800b760 <HAL_TIM_PWM_Start+0x200>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d009      	beq.n	800b6a8 <HAL_TIM_PWM_Start+0x148>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a32      	ldr	r2, [pc, #200]	@ (800b764 <HAL_TIM_PWM_Start+0x204>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d004      	beq.n	800b6a8 <HAL_TIM_PWM_Start+0x148>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a31      	ldr	r2, [pc, #196]	@ (800b768 <HAL_TIM_PWM_Start+0x208>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d101      	bne.n	800b6ac <HAL_TIM_PWM_Start+0x14c>
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e000      	b.n	800b6ae <HAL_TIM_PWM_Start+0x14e>
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d007      	beq.n	800b6c2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b6c0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a23      	ldr	r2, [pc, #140]	@ (800b754 <HAL_TIM_PWM_Start+0x1f4>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d01d      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6d4:	d018      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a24      	ldr	r2, [pc, #144]	@ (800b76c <HAL_TIM_PWM_Start+0x20c>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d013      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a22      	ldr	r2, [pc, #136]	@ (800b770 <HAL_TIM_PWM_Start+0x210>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d00e      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	4a1a      	ldr	r2, [pc, #104]	@ (800b758 <HAL_TIM_PWM_Start+0x1f8>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d009      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	4a18      	ldr	r2, [pc, #96]	@ (800b75c <HAL_TIM_PWM_Start+0x1fc>)
 800b6fa:	4293      	cmp	r3, r2
 800b6fc:	d004      	beq.n	800b708 <HAL_TIM_PWM_Start+0x1a8>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a19      	ldr	r2, [pc, #100]	@ (800b768 <HAL_TIM_PWM_Start+0x208>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d115      	bne.n	800b734 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689a      	ldr	r2, [r3, #8]
 800b70e:	4b19      	ldr	r3, [pc, #100]	@ (800b774 <HAL_TIM_PWM_Start+0x214>)
 800b710:	4013      	ands	r3, r2
 800b712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	2b06      	cmp	r3, #6
 800b718:	d015      	beq.n	800b746 <HAL_TIM_PWM_Start+0x1e6>
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b720:	d011      	beq.n	800b746 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f042 0201 	orr.w	r2, r2, #1
 800b730:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b732:	e008      	b.n	800b746 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681a      	ldr	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f042 0201 	orr.w	r2, r2, #1
 800b742:	601a      	str	r2, [r3, #0]
 800b744:	e000      	b.n	800b748 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b746:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3710      	adds	r7, #16
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop
 800b754:	40012c00 	.word	0x40012c00
 800b758:	40013400 	.word	0x40013400
 800b75c:	40014000 	.word	0x40014000
 800b760:	40014400 	.word	0x40014400
 800b764:	40014800 	.word	0x40014800
 800b768:	40015000 	.word	0x40015000
 800b76c:	40000400 	.word	0x40000400
 800b770:	40000800 	.word	0x40000800
 800b774:	00010007 	.word	0x00010007

0800b778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b084      	sub	sp, #16
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	691b      	ldr	r3, [r3, #16]
 800b78e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b00      	cmp	r3, #0
 800b798:	d020      	beq.n	800b7dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	f003 0302 	and.w	r3, r3, #2
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d01b      	beq.n	800b7dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f06f 0202 	mvn.w	r2, #2
 800b7ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2201      	movs	r2, #1
 800b7b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	f003 0303 	and.w	r3, r3, #3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 fb4a 	bl	800be5c <HAL_TIM_IC_CaptureCallback>
 800b7c8:	e005      	b.n	800b7d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f000 fb3c 	bl	800be48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7d0:	6878      	ldr	r0, [r7, #4]
 800b7d2:	f000 fb4d 	bl	800be70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2200      	movs	r2, #0
 800b7da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	f003 0304 	and.w	r3, r3, #4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d020      	beq.n	800b828 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f003 0304 	and.w	r3, r3, #4
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01b      	beq.n	800b828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	f06f 0204 	mvn.w	r2, #4
 800b7f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2202      	movs	r2, #2
 800b7fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	699b      	ldr	r3, [r3, #24]
 800b806:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d003      	beq.n	800b816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fb24 	bl	800be5c <HAL_TIM_IC_CaptureCallback>
 800b814:	e005      	b.n	800b822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f000 fb16 	bl	800be48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b81c:	6878      	ldr	r0, [r7, #4]
 800b81e:	f000 fb27 	bl	800be70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	2200      	movs	r2, #0
 800b826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b828:	68bb      	ldr	r3, [r7, #8]
 800b82a:	f003 0308 	and.w	r3, r3, #8
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d020      	beq.n	800b874 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	f003 0308 	and.w	r3, r3, #8
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d01b      	beq.n	800b874 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f06f 0208 	mvn.w	r2, #8
 800b844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2204      	movs	r2, #4
 800b84a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	69db      	ldr	r3, [r3, #28]
 800b852:	f003 0303 	and.w	r3, r3, #3
 800b856:	2b00      	cmp	r3, #0
 800b858:	d003      	beq.n	800b862 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 fafe 	bl	800be5c <HAL_TIM_IC_CaptureCallback>
 800b860:	e005      	b.n	800b86e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 faf0 	bl	800be48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f000 fb01 	bl	800be70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2200      	movs	r2, #0
 800b872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	f003 0310 	and.w	r3, r3, #16
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d020      	beq.n	800b8c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	f003 0310 	and.w	r3, r3, #16
 800b884:	2b00      	cmp	r3, #0
 800b886:	d01b      	beq.n	800b8c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f06f 0210 	mvn.w	r2, #16
 800b890:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2208      	movs	r2, #8
 800b896:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	69db      	ldr	r3, [r3, #28]
 800b89e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d003      	beq.n	800b8ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 fad8 	bl	800be5c <HAL_TIM_IC_CaptureCallback>
 800b8ac:	e005      	b.n	800b8ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 faca 	bl	800be48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 fadb 	bl	800be70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00c      	beq.n	800b8e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f003 0301 	and.w	r3, r3, #1
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d007      	beq.n	800b8e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f06f 0201 	mvn.w	r2, #1
 800b8dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7fa f8e6 	bl	8005ab0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d104      	bne.n	800b8f8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b8ee:	68bb      	ldr	r3, [r7, #8]
 800b8f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d00c      	beq.n	800b912 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d007      	beq.n	800b912 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800b90a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f001 f885 	bl	800ca1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00c      	beq.n	800b936 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b922:	2b00      	cmp	r3, #0
 800b924:	d007      	beq.n	800b936 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800b92e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 f87d 	bl	800ca30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d00c      	beq.n	800b95a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b946:	2b00      	cmp	r3, #0
 800b948:	d007      	beq.n	800b95a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800b952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 fa95 	bl	800be84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	f003 0320 	and.w	r3, r3, #32
 800b960:	2b00      	cmp	r3, #0
 800b962:	d00c      	beq.n	800b97e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f003 0320 	and.w	r3, r3, #32
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d007      	beq.n	800b97e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	f06f 0220 	mvn.w	r2, #32
 800b976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f001 f845 	bl	800ca08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00c      	beq.n	800b9a2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d007      	beq.n	800b9a2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800b99a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f001 f851 	bl	800ca44 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d00c      	beq.n	800b9c6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d007      	beq.n	800b9c6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800b9be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f001 f849 	bl	800ca58 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800b9c6:	68bb      	ldr	r3, [r7, #8]
 800b9c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00c      	beq.n	800b9ea <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d007      	beq.n	800b9ea <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800b9e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f001 f841 	bl	800ca6c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00c      	beq.n	800ba0e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d007      	beq.n	800ba0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800ba06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f001 f839 	bl	800ca80 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba0e:	bf00      	nop
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b086      	sub	sp, #24
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba24:	2300      	movs	r3, #0
 800ba26:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba28:	68fb      	ldr	r3, [r7, #12]
 800ba2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d101      	bne.n	800ba36 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ba32:	2302      	movs	r3, #2
 800ba34:	e0ff      	b.n	800bc36 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2b14      	cmp	r3, #20
 800ba42:	f200 80f0 	bhi.w	800bc26 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ba46:	a201      	add	r2, pc, #4	@ (adr r2, 800ba4c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ba48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4c:	0800baa1 	.word	0x0800baa1
 800ba50:	0800bc27 	.word	0x0800bc27
 800ba54:	0800bc27 	.word	0x0800bc27
 800ba58:	0800bc27 	.word	0x0800bc27
 800ba5c:	0800bae1 	.word	0x0800bae1
 800ba60:	0800bc27 	.word	0x0800bc27
 800ba64:	0800bc27 	.word	0x0800bc27
 800ba68:	0800bc27 	.word	0x0800bc27
 800ba6c:	0800bb23 	.word	0x0800bb23
 800ba70:	0800bc27 	.word	0x0800bc27
 800ba74:	0800bc27 	.word	0x0800bc27
 800ba78:	0800bc27 	.word	0x0800bc27
 800ba7c:	0800bb63 	.word	0x0800bb63
 800ba80:	0800bc27 	.word	0x0800bc27
 800ba84:	0800bc27 	.word	0x0800bc27
 800ba88:	0800bc27 	.word	0x0800bc27
 800ba8c:	0800bba5 	.word	0x0800bba5
 800ba90:	0800bc27 	.word	0x0800bc27
 800ba94:	0800bc27 	.word	0x0800bc27
 800ba98:	0800bc27 	.word	0x0800bc27
 800ba9c:	0800bbe5 	.word	0x0800bbe5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	68b9      	ldr	r1, [r7, #8]
 800baa6:	4618      	mov	r0, r3
 800baa8:	f000 faa0 	bl	800bfec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	699a      	ldr	r2, [r3, #24]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f042 0208 	orr.w	r2, r2, #8
 800baba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	699a      	ldr	r2, [r3, #24]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f022 0204 	bic.w	r2, r2, #4
 800baca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6999      	ldr	r1, [r3, #24]
 800bad2:	68bb      	ldr	r3, [r7, #8]
 800bad4:	691a      	ldr	r2, [r3, #16]
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	430a      	orrs	r2, r1
 800badc:	619a      	str	r2, [r3, #24]
      break;
 800bade:	e0a5      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68b9      	ldr	r1, [r7, #8]
 800bae6:	4618      	mov	r0, r3
 800bae8:	f000 fb1a 	bl	800c120 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	699a      	ldr	r2, [r3, #24]
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bafa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	699a      	ldr	r2, [r3, #24]
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	6999      	ldr	r1, [r3, #24]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	021a      	lsls	r2, r3, #8
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	430a      	orrs	r2, r1
 800bb1e:	619a      	str	r2, [r3, #24]
      break;
 800bb20:	e084      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68b9      	ldr	r1, [r7, #8]
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f000 fb8d 	bl	800c248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f042 0208 	orr.w	r2, r2, #8
 800bb3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	69da      	ldr	r2, [r3, #28]
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 0204 	bic.w	r2, r2, #4
 800bb4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69d9      	ldr	r1, [r3, #28]
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	691a      	ldr	r2, [r3, #16]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	430a      	orrs	r2, r1
 800bb5e:	61da      	str	r2, [r3, #28]
      break;
 800bb60:	e064      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	68b9      	ldr	r1, [r7, #8]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 fbff 	bl	800c36c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69da      	ldr	r2, [r3, #28]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bb7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	69da      	ldr	r2, [r3, #28]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bb8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	69d9      	ldr	r1, [r3, #28]
 800bb94:	68bb      	ldr	r3, [r7, #8]
 800bb96:	691b      	ldr	r3, [r3, #16]
 800bb98:	021a      	lsls	r2, r3, #8
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	430a      	orrs	r2, r1
 800bba0:	61da      	str	r2, [r3, #28]
      break;
 800bba2:	e043      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68b9      	ldr	r1, [r7, #8]
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f000 fc72 	bl	800c494 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f042 0208 	orr.w	r2, r2, #8
 800bbbe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f022 0204 	bic.w	r2, r2, #4
 800bbce:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	691a      	ldr	r2, [r3, #16]
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	430a      	orrs	r2, r1
 800bbe0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bbe2:	e023      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68b9      	ldr	r1, [r7, #8]
 800bbea:	4618      	mov	r0, r3
 800bbec:	f000 fcbc 	bl	800c568 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bbfe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bc0e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	021a      	lsls	r2, r3, #8
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	430a      	orrs	r2, r1
 800bc22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800bc24:	e002      	b.n	800bc2c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	75fb      	strb	r3, [r7, #23]
      break;
 800bc2a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2200      	movs	r2, #0
 800bc30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bc34:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3718      	adds	r7, #24
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop

0800bc40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b084      	sub	sp, #16
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
 800bc48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d101      	bne.n	800bc5c <HAL_TIM_ConfigClockSource+0x1c>
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e0e6      	b.n	800be2a <HAL_TIM_ConfigClockSource+0x1ea>
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2201      	movs	r2, #1
 800bc60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2202      	movs	r2, #2
 800bc68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	689b      	ldr	r3, [r3, #8]
 800bc72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800bc7a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800bc7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bc86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	68ba      	ldr	r2, [r7, #8]
 800bc8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	4a67      	ldr	r2, [pc, #412]	@ (800be34 <HAL_TIM_ConfigClockSource+0x1f4>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	f000 80b1 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bc9c:	4a65      	ldr	r2, [pc, #404]	@ (800be34 <HAL_TIM_ConfigClockSource+0x1f4>)
 800bc9e:	4293      	cmp	r3, r2
 800bca0:	f200 80b6 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bca4:	4a64      	ldr	r2, [pc, #400]	@ (800be38 <HAL_TIM_ConfigClockSource+0x1f8>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	f000 80a9 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bcac:	4a62      	ldr	r2, [pc, #392]	@ (800be38 <HAL_TIM_ConfigClockSource+0x1f8>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	f200 80ae 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bcb4:	4a61      	ldr	r2, [pc, #388]	@ (800be3c <HAL_TIM_ConfigClockSource+0x1fc>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	f000 80a1 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bcbc:	4a5f      	ldr	r2, [pc, #380]	@ (800be3c <HAL_TIM_ConfigClockSource+0x1fc>)
 800bcbe:	4293      	cmp	r3, r2
 800bcc0:	f200 80a6 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bcc4:	4a5e      	ldr	r2, [pc, #376]	@ (800be40 <HAL_TIM_ConfigClockSource+0x200>)
 800bcc6:	4293      	cmp	r3, r2
 800bcc8:	f000 8099 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bccc:	4a5c      	ldr	r2, [pc, #368]	@ (800be40 <HAL_TIM_ConfigClockSource+0x200>)
 800bcce:	4293      	cmp	r3, r2
 800bcd0:	f200 809e 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bcd4:	4a5b      	ldr	r2, [pc, #364]	@ (800be44 <HAL_TIM_ConfigClockSource+0x204>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	f000 8091 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bcdc:	4a59      	ldr	r2, [pc, #356]	@ (800be44 <HAL_TIM_ConfigClockSource+0x204>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	f200 8096 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bce4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bce8:	f000 8089 	beq.w	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bcec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bcf0:	f200 808e 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bcf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcf8:	d03e      	beq.n	800bd78 <HAL_TIM_ConfigClockSource+0x138>
 800bcfa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcfe:	f200 8087 	bhi.w	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd06:	f000 8086 	beq.w	800be16 <HAL_TIM_ConfigClockSource+0x1d6>
 800bd0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bd0e:	d87f      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd10:	2b70      	cmp	r3, #112	@ 0x70
 800bd12:	d01a      	beq.n	800bd4a <HAL_TIM_ConfigClockSource+0x10a>
 800bd14:	2b70      	cmp	r3, #112	@ 0x70
 800bd16:	d87b      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd18:	2b60      	cmp	r3, #96	@ 0x60
 800bd1a:	d050      	beq.n	800bdbe <HAL_TIM_ConfigClockSource+0x17e>
 800bd1c:	2b60      	cmp	r3, #96	@ 0x60
 800bd1e:	d877      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd20:	2b50      	cmp	r3, #80	@ 0x50
 800bd22:	d03c      	beq.n	800bd9e <HAL_TIM_ConfigClockSource+0x15e>
 800bd24:	2b50      	cmp	r3, #80	@ 0x50
 800bd26:	d873      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd28:	2b40      	cmp	r3, #64	@ 0x40
 800bd2a:	d058      	beq.n	800bdde <HAL_TIM_ConfigClockSource+0x19e>
 800bd2c:	2b40      	cmp	r3, #64	@ 0x40
 800bd2e:	d86f      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd30:	2b30      	cmp	r3, #48	@ 0x30
 800bd32:	d064      	beq.n	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bd34:	2b30      	cmp	r3, #48	@ 0x30
 800bd36:	d86b      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd38:	2b20      	cmp	r3, #32
 800bd3a:	d060      	beq.n	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bd3c:	2b20      	cmp	r3, #32
 800bd3e:	d867      	bhi.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d05c      	beq.n	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bd44:	2b10      	cmp	r3, #16
 800bd46:	d05a      	beq.n	800bdfe <HAL_TIM_ConfigClockSource+0x1be>
 800bd48:	e062      	b.n	800be10 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd4e:	683b      	ldr	r3, [r7, #0]
 800bd50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd5a:	f000 fced 	bl	800c738 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bd6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68ba      	ldr	r2, [r7, #8]
 800bd74:	609a      	str	r2, [r3, #8]
      break;
 800bd76:	e04f      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd88:	f000 fcd6 	bl	800c738 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	689a      	ldr	r2, [r3, #8]
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bd9a:	609a      	str	r2, [r3, #8]
      break;
 800bd9c:	e03c      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bda6:	683b      	ldr	r3, [r7, #0]
 800bda8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f000 fc48 	bl	800c640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2150      	movs	r1, #80	@ 0x50
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 fca1 	bl	800c6fe <TIM_ITRx_SetConfig>
      break;
 800bdbc:	e02c      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f000 fc67 	bl	800c69e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2160      	movs	r1, #96	@ 0x60
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	f000 fc91 	bl	800c6fe <TIM_ITRx_SetConfig>
      break;
 800bddc:	e01c      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdea:	461a      	mov	r2, r3
 800bdec:	f000 fc28 	bl	800c640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	2140      	movs	r1, #64	@ 0x40
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f000 fc81 	bl	800c6fe <TIM_ITRx_SetConfig>
      break;
 800bdfc:	e00c      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681a      	ldr	r2, [r3, #0]
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4619      	mov	r1, r3
 800be08:	4610      	mov	r0, r2
 800be0a:	f000 fc78 	bl	800c6fe <TIM_ITRx_SetConfig>
      break;
 800be0e:	e003      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	73fb      	strb	r3, [r7, #15]
      break;
 800be14:	e000      	b.n	800be18 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800be16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800be28:	7bfb      	ldrb	r3, [r7, #15]
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	00100070 	.word	0x00100070
 800be38:	00100050 	.word	0x00100050
 800be3c:	00100040 	.word	0x00100040
 800be40:	00100030 	.word	0x00100030
 800be44:	00100020 	.word	0x00100020

0800be48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be50:	bf00      	nop
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b083      	sub	sp, #12
 800be60:	af00      	add	r7, sp, #0
 800be62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be64:	bf00      	nop
 800be66:	370c      	adds	r7, #12
 800be68:	46bd      	mov	sp, r7
 800be6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be6e:	4770      	bx	lr

0800be70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be70:	b480      	push	{r7}
 800be72:	b083      	sub	sp, #12
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be78:	bf00      	nop
 800be7a:	370c      	adds	r7, #12
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr

0800be84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be84:	b480      	push	{r7}
 800be86:	b083      	sub	sp, #12
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be8c:	bf00      	nop
 800be8e:	370c      	adds	r7, #12
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800be98:	b480      	push	{r7}
 800be9a:	b085      	sub	sp, #20
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
 800bea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	4a48      	ldr	r2, [pc, #288]	@ (800bfcc <TIM_Base_SetConfig+0x134>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d013      	beq.n	800bed8 <TIM_Base_SetConfig+0x40>
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800beb6:	d00f      	beq.n	800bed8 <TIM_Base_SetConfig+0x40>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	4a45      	ldr	r2, [pc, #276]	@ (800bfd0 <TIM_Base_SetConfig+0x138>)
 800bebc:	4293      	cmp	r3, r2
 800bebe:	d00b      	beq.n	800bed8 <TIM_Base_SetConfig+0x40>
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4a44      	ldr	r2, [pc, #272]	@ (800bfd4 <TIM_Base_SetConfig+0x13c>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d007      	beq.n	800bed8 <TIM_Base_SetConfig+0x40>
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	4a43      	ldr	r2, [pc, #268]	@ (800bfd8 <TIM_Base_SetConfig+0x140>)
 800becc:	4293      	cmp	r3, r2
 800bece:	d003      	beq.n	800bed8 <TIM_Base_SetConfig+0x40>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4a42      	ldr	r2, [pc, #264]	@ (800bfdc <TIM_Base_SetConfig+0x144>)
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d108      	bne.n	800beea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800bede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	68fa      	ldr	r2, [r7, #12]
 800bee6:	4313      	orrs	r3, r2
 800bee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a37      	ldr	r2, [pc, #220]	@ (800bfcc <TIM_Base_SetConfig+0x134>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d01f      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bef8:	d01b      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a34      	ldr	r2, [pc, #208]	@ (800bfd0 <TIM_Base_SetConfig+0x138>)
 800befe:	4293      	cmp	r3, r2
 800bf00:	d017      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a33      	ldr	r2, [pc, #204]	@ (800bfd4 <TIM_Base_SetConfig+0x13c>)
 800bf06:	4293      	cmp	r3, r2
 800bf08:	d013      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4a32      	ldr	r2, [pc, #200]	@ (800bfd8 <TIM_Base_SetConfig+0x140>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d00f      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a32      	ldr	r2, [pc, #200]	@ (800bfe0 <TIM_Base_SetConfig+0x148>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d00b      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	4a31      	ldr	r2, [pc, #196]	@ (800bfe4 <TIM_Base_SetConfig+0x14c>)
 800bf1e:	4293      	cmp	r3, r2
 800bf20:	d007      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	4a30      	ldr	r2, [pc, #192]	@ (800bfe8 <TIM_Base_SetConfig+0x150>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d003      	beq.n	800bf32 <TIM_Base_SetConfig+0x9a>
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a2b      	ldr	r2, [pc, #172]	@ (800bfdc <TIM_Base_SetConfig+0x144>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d108      	bne.n	800bf44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800bf38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	68db      	ldr	r3, [r3, #12]
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	695b      	ldr	r3, [r3, #20]
 800bf4e:	4313      	orrs	r3, r2
 800bf50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	689a      	ldr	r2, [r3, #8]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	4a18      	ldr	r2, [pc, #96]	@ (800bfcc <TIM_Base_SetConfig+0x134>)
 800bf6c:	4293      	cmp	r3, r2
 800bf6e:	d013      	beq.n	800bf98 <TIM_Base_SetConfig+0x100>
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	4a19      	ldr	r2, [pc, #100]	@ (800bfd8 <TIM_Base_SetConfig+0x140>)
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d00f      	beq.n	800bf98 <TIM_Base_SetConfig+0x100>
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	4a19      	ldr	r2, [pc, #100]	@ (800bfe0 <TIM_Base_SetConfig+0x148>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d00b      	beq.n	800bf98 <TIM_Base_SetConfig+0x100>
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	4a18      	ldr	r2, [pc, #96]	@ (800bfe4 <TIM_Base_SetConfig+0x14c>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d007      	beq.n	800bf98 <TIM_Base_SetConfig+0x100>
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	4a17      	ldr	r2, [pc, #92]	@ (800bfe8 <TIM_Base_SetConfig+0x150>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d003      	beq.n	800bf98 <TIM_Base_SetConfig+0x100>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a12      	ldr	r2, [pc, #72]	@ (800bfdc <TIM_Base_SetConfig+0x144>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d103      	bne.n	800bfa0 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf98:	683b      	ldr	r3, [r7, #0]
 800bf9a:	691a      	ldr	r2, [r3, #16]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	691b      	ldr	r3, [r3, #16]
 800bfaa:	f003 0301 	and.w	r3, r3, #1
 800bfae:	2b01      	cmp	r3, #1
 800bfb0:	d105      	bne.n	800bfbe <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	691b      	ldr	r3, [r3, #16]
 800bfb6:	f023 0201 	bic.w	r2, r3, #1
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	611a      	str	r2, [r3, #16]
  }
}
 800bfbe:	bf00      	nop
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	40012c00 	.word	0x40012c00
 800bfd0:	40000400 	.word	0x40000400
 800bfd4:	40000800 	.word	0x40000800
 800bfd8:	40013400 	.word	0x40013400
 800bfdc:	40015000 	.word	0x40015000
 800bfe0:	40014000 	.word	0x40014000
 800bfe4:	40014400 	.word	0x40014400
 800bfe8:	40014800 	.word	0x40014800

0800bfec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b087      	sub	sp, #28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6a1b      	ldr	r3, [r3, #32]
 800bffa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a1b      	ldr	r3, [r3, #32]
 800c000:	f023 0201 	bic.w	r2, r3, #1
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	685b      	ldr	r3, [r3, #4]
 800c00c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	699b      	ldr	r3, [r3, #24]
 800c012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c01a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c01e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f023 0303 	bic.w	r3, r3, #3
 800c026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	68fa      	ldr	r2, [r7, #12]
 800c02e:	4313      	orrs	r3, r2
 800c030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c032:	697b      	ldr	r3, [r7, #20]
 800c034:	f023 0302 	bic.w	r3, r3, #2
 800c038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	689b      	ldr	r3, [r3, #8]
 800c03e:	697a      	ldr	r2, [r7, #20]
 800c040:	4313      	orrs	r3, r2
 800c042:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4a30      	ldr	r2, [pc, #192]	@ (800c108 <TIM_OC1_SetConfig+0x11c>)
 800c048:	4293      	cmp	r3, r2
 800c04a:	d013      	beq.n	800c074 <TIM_OC1_SetConfig+0x88>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	4a2f      	ldr	r2, [pc, #188]	@ (800c10c <TIM_OC1_SetConfig+0x120>)
 800c050:	4293      	cmp	r3, r2
 800c052:	d00f      	beq.n	800c074 <TIM_OC1_SetConfig+0x88>
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	4a2e      	ldr	r2, [pc, #184]	@ (800c110 <TIM_OC1_SetConfig+0x124>)
 800c058:	4293      	cmp	r3, r2
 800c05a:	d00b      	beq.n	800c074 <TIM_OC1_SetConfig+0x88>
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	4a2d      	ldr	r2, [pc, #180]	@ (800c114 <TIM_OC1_SetConfig+0x128>)
 800c060:	4293      	cmp	r3, r2
 800c062:	d007      	beq.n	800c074 <TIM_OC1_SetConfig+0x88>
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	4a2c      	ldr	r2, [pc, #176]	@ (800c118 <TIM_OC1_SetConfig+0x12c>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d003      	beq.n	800c074 <TIM_OC1_SetConfig+0x88>
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a2b      	ldr	r2, [pc, #172]	@ (800c11c <TIM_OC1_SetConfig+0x130>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d10c      	bne.n	800c08e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c074:	697b      	ldr	r3, [r7, #20]
 800c076:	f023 0308 	bic.w	r3, r3, #8
 800c07a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	68db      	ldr	r3, [r3, #12]
 800c080:	697a      	ldr	r2, [r7, #20]
 800c082:	4313      	orrs	r3, r2
 800c084:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f023 0304 	bic.w	r3, r3, #4
 800c08c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	4a1d      	ldr	r2, [pc, #116]	@ (800c108 <TIM_OC1_SetConfig+0x11c>)
 800c092:	4293      	cmp	r3, r2
 800c094:	d013      	beq.n	800c0be <TIM_OC1_SetConfig+0xd2>
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	4a1c      	ldr	r2, [pc, #112]	@ (800c10c <TIM_OC1_SetConfig+0x120>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00f      	beq.n	800c0be <TIM_OC1_SetConfig+0xd2>
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	4a1b      	ldr	r2, [pc, #108]	@ (800c110 <TIM_OC1_SetConfig+0x124>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d00b      	beq.n	800c0be <TIM_OC1_SetConfig+0xd2>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	4a1a      	ldr	r2, [pc, #104]	@ (800c114 <TIM_OC1_SetConfig+0x128>)
 800c0aa:	4293      	cmp	r3, r2
 800c0ac:	d007      	beq.n	800c0be <TIM_OC1_SetConfig+0xd2>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a19      	ldr	r2, [pc, #100]	@ (800c118 <TIM_OC1_SetConfig+0x12c>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d003      	beq.n	800c0be <TIM_OC1_SetConfig+0xd2>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	4a18      	ldr	r2, [pc, #96]	@ (800c11c <TIM_OC1_SetConfig+0x130>)
 800c0ba:	4293      	cmp	r3, r2
 800c0bc:	d111      	bne.n	800c0e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c0c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c0cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	4313      	orrs	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	699b      	ldr	r3, [r3, #24]
 800c0dc:	693a      	ldr	r2, [r7, #16]
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	685a      	ldr	r2, [r3, #4]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	697a      	ldr	r2, [r7, #20]
 800c0fa:	621a      	str	r2, [r3, #32]
}
 800c0fc:	bf00      	nop
 800c0fe:	371c      	adds	r7, #28
 800c100:	46bd      	mov	sp, r7
 800c102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c106:	4770      	bx	lr
 800c108:	40012c00 	.word	0x40012c00
 800c10c:	40013400 	.word	0x40013400
 800c110:	40014000 	.word	0x40014000
 800c114:	40014400 	.word	0x40014400
 800c118:	40014800 	.word	0x40014800
 800c11c:	40015000 	.word	0x40015000

0800c120 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c120:	b480      	push	{r7}
 800c122:	b087      	sub	sp, #28
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6a1b      	ldr	r3, [r3, #32]
 800c12e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6a1b      	ldr	r3, [r3, #32]
 800c134:	f023 0210 	bic.w	r2, r3, #16
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	685b      	ldr	r3, [r3, #4]
 800c140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	699b      	ldr	r3, [r3, #24]
 800c146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c14e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c152:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	021b      	lsls	r3, r3, #8
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	4313      	orrs	r3, r2
 800c166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c168:	697b      	ldr	r3, [r7, #20]
 800c16a:	f023 0320 	bic.w	r3, r3, #32
 800c16e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	689b      	ldr	r3, [r3, #8]
 800c174:	011b      	lsls	r3, r3, #4
 800c176:	697a      	ldr	r2, [r7, #20]
 800c178:	4313      	orrs	r3, r2
 800c17a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	4a2c      	ldr	r2, [pc, #176]	@ (800c230 <TIM_OC2_SetConfig+0x110>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d007      	beq.n	800c194 <TIM_OC2_SetConfig+0x74>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	4a2b      	ldr	r2, [pc, #172]	@ (800c234 <TIM_OC2_SetConfig+0x114>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d003      	beq.n	800c194 <TIM_OC2_SetConfig+0x74>
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	4a2a      	ldr	r2, [pc, #168]	@ (800c238 <TIM_OC2_SetConfig+0x118>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d10d      	bne.n	800c1b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c194:	697b      	ldr	r3, [r7, #20]
 800c196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c19a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	68db      	ldr	r3, [r3, #12]
 800c1a0:	011b      	lsls	r3, r3, #4
 800c1a2:	697a      	ldr	r2, [r7, #20]
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c1ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a1f      	ldr	r2, [pc, #124]	@ (800c230 <TIM_OC2_SetConfig+0x110>)
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d013      	beq.n	800c1e0 <TIM_OC2_SetConfig+0xc0>
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	@ (800c234 <TIM_OC2_SetConfig+0x114>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d00f      	beq.n	800c1e0 <TIM_OC2_SetConfig+0xc0>
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	4a1e      	ldr	r2, [pc, #120]	@ (800c23c <TIM_OC2_SetConfig+0x11c>)
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d00b      	beq.n	800c1e0 <TIM_OC2_SetConfig+0xc0>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a1d      	ldr	r2, [pc, #116]	@ (800c240 <TIM_OC2_SetConfig+0x120>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d007      	beq.n	800c1e0 <TIM_OC2_SetConfig+0xc0>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	4a1c      	ldr	r2, [pc, #112]	@ (800c244 <TIM_OC2_SetConfig+0x124>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d003      	beq.n	800c1e0 <TIM_OC2_SetConfig+0xc0>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a17      	ldr	r2, [pc, #92]	@ (800c238 <TIM_OC2_SetConfig+0x118>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d113      	bne.n	800c208 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c1e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c1ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	695b      	ldr	r3, [r3, #20]
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4313      	orrs	r3, r2
 800c1fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	699b      	ldr	r3, [r3, #24]
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	4313      	orrs	r3, r2
 800c206:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	68fa      	ldr	r2, [r7, #12]
 800c212:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	697a      	ldr	r2, [r7, #20]
 800c220:	621a      	str	r2, [r3, #32]
}
 800c222:	bf00      	nop
 800c224:	371c      	adds	r7, #28
 800c226:	46bd      	mov	sp, r7
 800c228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22c:	4770      	bx	lr
 800c22e:	bf00      	nop
 800c230:	40012c00 	.word	0x40012c00
 800c234:	40013400 	.word	0x40013400
 800c238:	40015000 	.word	0x40015000
 800c23c:	40014000 	.word	0x40014000
 800c240:	40014400 	.word	0x40014400
 800c244:	40014800 	.word	0x40014800

0800c248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c248:	b480      	push	{r7}
 800c24a:	b087      	sub	sp, #28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6a1b      	ldr	r3, [r3, #32]
 800c256:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6a1b      	ldr	r3, [r3, #32]
 800c25c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	69db      	ldr	r3, [r3, #28]
 800c26e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c276:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f023 0303 	bic.w	r3, r3, #3
 800c282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	021b      	lsls	r3, r3, #8
 800c29c:	697a      	ldr	r2, [r7, #20]
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a2b      	ldr	r2, [pc, #172]	@ (800c354 <TIM_OC3_SetConfig+0x10c>)
 800c2a6:	4293      	cmp	r3, r2
 800c2a8:	d007      	beq.n	800c2ba <TIM_OC3_SetConfig+0x72>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	4a2a      	ldr	r2, [pc, #168]	@ (800c358 <TIM_OC3_SetConfig+0x110>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d003      	beq.n	800c2ba <TIM_OC3_SetConfig+0x72>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4a29      	ldr	r2, [pc, #164]	@ (800c35c <TIM_OC3_SetConfig+0x114>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d10d      	bne.n	800c2d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	68db      	ldr	r3, [r3, #12]
 800c2c6:	021b      	lsls	r3, r3, #8
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c2d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a1e      	ldr	r2, [pc, #120]	@ (800c354 <TIM_OC3_SetConfig+0x10c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d013      	beq.n	800c306 <TIM_OC3_SetConfig+0xbe>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4a1d      	ldr	r2, [pc, #116]	@ (800c358 <TIM_OC3_SetConfig+0x110>)
 800c2e2:	4293      	cmp	r3, r2
 800c2e4:	d00f      	beq.n	800c306 <TIM_OC3_SetConfig+0xbe>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	4a1d      	ldr	r2, [pc, #116]	@ (800c360 <TIM_OC3_SetConfig+0x118>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d00b      	beq.n	800c306 <TIM_OC3_SetConfig+0xbe>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800c364 <TIM_OC3_SetConfig+0x11c>)
 800c2f2:	4293      	cmp	r3, r2
 800c2f4:	d007      	beq.n	800c306 <TIM_OC3_SetConfig+0xbe>
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	4a1b      	ldr	r2, [pc, #108]	@ (800c368 <TIM_OC3_SetConfig+0x120>)
 800c2fa:	4293      	cmp	r3, r2
 800c2fc:	d003      	beq.n	800c306 <TIM_OC3_SetConfig+0xbe>
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	4a16      	ldr	r2, [pc, #88]	@ (800c35c <TIM_OC3_SetConfig+0x114>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d113      	bne.n	800c32e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c30c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c314:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	695b      	ldr	r3, [r3, #20]
 800c31a:	011b      	lsls	r3, r3, #4
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	4313      	orrs	r3, r2
 800c320:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c322:	683b      	ldr	r3, [r7, #0]
 800c324:	699b      	ldr	r3, [r3, #24]
 800c326:	011b      	lsls	r3, r3, #4
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	4313      	orrs	r3, r2
 800c32c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	693a      	ldr	r2, [r7, #16]
 800c332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	68fa      	ldr	r2, [r7, #12]
 800c338:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	685a      	ldr	r2, [r3, #4]
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	697a      	ldr	r2, [r7, #20]
 800c346:	621a      	str	r2, [r3, #32]
}
 800c348:	bf00      	nop
 800c34a:	371c      	adds	r7, #28
 800c34c:	46bd      	mov	sp, r7
 800c34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c352:	4770      	bx	lr
 800c354:	40012c00 	.word	0x40012c00
 800c358:	40013400 	.word	0x40013400
 800c35c:	40015000 	.word	0x40015000
 800c360:	40014000 	.word	0x40014000
 800c364:	40014400 	.word	0x40014400
 800c368:	40014800 	.word	0x40014800

0800c36c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b087      	sub	sp, #28
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	6a1b      	ldr	r3, [r3, #32]
 800c37a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6a1b      	ldr	r3, [r3, #32]
 800c380:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	685b      	ldr	r3, [r3, #4]
 800c38c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c39a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c39e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c3a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c3a8:	683b      	ldr	r3, [r7, #0]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	021b      	lsls	r3, r3, #8
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	4313      	orrs	r3, r2
 800c3b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c3ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c3bc:	683b      	ldr	r3, [r7, #0]
 800c3be:	689b      	ldr	r3, [r3, #8]
 800c3c0:	031b      	lsls	r3, r3, #12
 800c3c2:	697a      	ldr	r2, [r7, #20]
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	4a2c      	ldr	r2, [pc, #176]	@ (800c47c <TIM_OC4_SetConfig+0x110>)
 800c3cc:	4293      	cmp	r3, r2
 800c3ce:	d007      	beq.n	800c3e0 <TIM_OC4_SetConfig+0x74>
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	4a2b      	ldr	r2, [pc, #172]	@ (800c480 <TIM_OC4_SetConfig+0x114>)
 800c3d4:	4293      	cmp	r3, r2
 800c3d6:	d003      	beq.n	800c3e0 <TIM_OC4_SetConfig+0x74>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	4a2a      	ldr	r2, [pc, #168]	@ (800c484 <TIM_OC4_SetConfig+0x118>)
 800c3dc:	4293      	cmp	r3, r2
 800c3de:	d10d      	bne.n	800c3fc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c3e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	68db      	ldr	r3, [r3, #12]
 800c3ec:	031b      	lsls	r3, r3, #12
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c3fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	4a1f      	ldr	r2, [pc, #124]	@ (800c47c <TIM_OC4_SetConfig+0x110>)
 800c400:	4293      	cmp	r3, r2
 800c402:	d013      	beq.n	800c42c <TIM_OC4_SetConfig+0xc0>
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	4a1e      	ldr	r2, [pc, #120]	@ (800c480 <TIM_OC4_SetConfig+0x114>)
 800c408:	4293      	cmp	r3, r2
 800c40a:	d00f      	beq.n	800c42c <TIM_OC4_SetConfig+0xc0>
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	4a1e      	ldr	r2, [pc, #120]	@ (800c488 <TIM_OC4_SetConfig+0x11c>)
 800c410:	4293      	cmp	r3, r2
 800c412:	d00b      	beq.n	800c42c <TIM_OC4_SetConfig+0xc0>
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	4a1d      	ldr	r2, [pc, #116]	@ (800c48c <TIM_OC4_SetConfig+0x120>)
 800c418:	4293      	cmp	r3, r2
 800c41a:	d007      	beq.n	800c42c <TIM_OC4_SetConfig+0xc0>
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	4a1c      	ldr	r2, [pc, #112]	@ (800c490 <TIM_OC4_SetConfig+0x124>)
 800c420:	4293      	cmp	r3, r2
 800c422:	d003      	beq.n	800c42c <TIM_OC4_SetConfig+0xc0>
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	4a17      	ldr	r2, [pc, #92]	@ (800c484 <TIM_OC4_SetConfig+0x118>)
 800c428:	4293      	cmp	r3, r2
 800c42a:	d113      	bne.n	800c454 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c432:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c43a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	695b      	ldr	r3, [r3, #20]
 800c440:	019b      	lsls	r3, r3, #6
 800c442:	693a      	ldr	r2, [r7, #16]
 800c444:	4313      	orrs	r3, r2
 800c446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	699b      	ldr	r3, [r3, #24]
 800c44c:	019b      	lsls	r3, r3, #6
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	4313      	orrs	r3, r2
 800c452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	693a      	ldr	r2, [r7, #16]
 800c458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	68fa      	ldr	r2, [r7, #12]
 800c45e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	685a      	ldr	r2, [r3, #4]
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	697a      	ldr	r2, [r7, #20]
 800c46c:	621a      	str	r2, [r3, #32]
}
 800c46e:	bf00      	nop
 800c470:	371c      	adds	r7, #28
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr
 800c47a:	bf00      	nop
 800c47c:	40012c00 	.word	0x40012c00
 800c480:	40013400 	.word	0x40013400
 800c484:	40015000 	.word	0x40015000
 800c488:	40014000 	.word	0x40014000
 800c48c:	40014400 	.word	0x40014400
 800c490:	40014800 	.word	0x40014800

0800c494 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c494:	b480      	push	{r7}
 800c496:	b087      	sub	sp, #28
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
 800c49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	6a1b      	ldr	r3, [r3, #32]
 800c4a2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6a1b      	ldr	r3, [r3, #32]
 800c4a8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	685b      	ldr	r3, [r3, #4]
 800c4b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c4c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c4c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c4c8:	683b      	ldr	r3, [r7, #0]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	68fa      	ldr	r2, [r7, #12]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c4d8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c4da:	683b      	ldr	r3, [r7, #0]
 800c4dc:	689b      	ldr	r3, [r3, #8]
 800c4de:	041b      	lsls	r3, r3, #16
 800c4e0:	693a      	ldr	r2, [r7, #16]
 800c4e2:	4313      	orrs	r3, r2
 800c4e4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	4a19      	ldr	r2, [pc, #100]	@ (800c550 <TIM_OC5_SetConfig+0xbc>)
 800c4ea:	4293      	cmp	r3, r2
 800c4ec:	d013      	beq.n	800c516 <TIM_OC5_SetConfig+0x82>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	4a18      	ldr	r2, [pc, #96]	@ (800c554 <TIM_OC5_SetConfig+0xc0>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d00f      	beq.n	800c516 <TIM_OC5_SetConfig+0x82>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	4a17      	ldr	r2, [pc, #92]	@ (800c558 <TIM_OC5_SetConfig+0xc4>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d00b      	beq.n	800c516 <TIM_OC5_SetConfig+0x82>
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	4a16      	ldr	r2, [pc, #88]	@ (800c55c <TIM_OC5_SetConfig+0xc8>)
 800c502:	4293      	cmp	r3, r2
 800c504:	d007      	beq.n	800c516 <TIM_OC5_SetConfig+0x82>
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	4a15      	ldr	r2, [pc, #84]	@ (800c560 <TIM_OC5_SetConfig+0xcc>)
 800c50a:	4293      	cmp	r3, r2
 800c50c:	d003      	beq.n	800c516 <TIM_OC5_SetConfig+0x82>
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	4a14      	ldr	r2, [pc, #80]	@ (800c564 <TIM_OC5_SetConfig+0xd0>)
 800c512:	4293      	cmp	r3, r2
 800c514:	d109      	bne.n	800c52a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c51c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c51e:	683b      	ldr	r3, [r7, #0]
 800c520:	695b      	ldr	r3, [r3, #20]
 800c522:	021b      	lsls	r3, r3, #8
 800c524:	697a      	ldr	r2, [r7, #20]
 800c526:	4313      	orrs	r3, r2
 800c528:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	697a      	ldr	r2, [r7, #20]
 800c52e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	68fa      	ldr	r2, [r7, #12]
 800c534:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	685a      	ldr	r2, [r3, #4]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	693a      	ldr	r2, [r7, #16]
 800c542:	621a      	str	r2, [r3, #32]
}
 800c544:	bf00      	nop
 800c546:	371c      	adds	r7, #28
 800c548:	46bd      	mov	sp, r7
 800c54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54e:	4770      	bx	lr
 800c550:	40012c00 	.word	0x40012c00
 800c554:	40013400 	.word	0x40013400
 800c558:	40014000 	.word	0x40014000
 800c55c:	40014400 	.word	0x40014400
 800c560:	40014800 	.word	0x40014800
 800c564:	40015000 	.word	0x40015000

0800c568 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c568:	b480      	push	{r7}
 800c56a:	b087      	sub	sp, #28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	685b      	ldr	r3, [r3, #4]
 800c588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c58e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c596:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800c59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	021b      	lsls	r3, r3, #8
 800c5a2:	68fa      	ldr	r2, [r7, #12]
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c5ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	051b      	lsls	r3, r3, #20
 800c5b6:	693a      	ldr	r2, [r7, #16]
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	4a1a      	ldr	r2, [pc, #104]	@ (800c628 <TIM_OC6_SetConfig+0xc0>)
 800c5c0:	4293      	cmp	r3, r2
 800c5c2:	d013      	beq.n	800c5ec <TIM_OC6_SetConfig+0x84>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	4a19      	ldr	r2, [pc, #100]	@ (800c62c <TIM_OC6_SetConfig+0xc4>)
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d00f      	beq.n	800c5ec <TIM_OC6_SetConfig+0x84>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	4a18      	ldr	r2, [pc, #96]	@ (800c630 <TIM_OC6_SetConfig+0xc8>)
 800c5d0:	4293      	cmp	r3, r2
 800c5d2:	d00b      	beq.n	800c5ec <TIM_OC6_SetConfig+0x84>
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	4a17      	ldr	r2, [pc, #92]	@ (800c634 <TIM_OC6_SetConfig+0xcc>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d007      	beq.n	800c5ec <TIM_OC6_SetConfig+0x84>
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	4a16      	ldr	r2, [pc, #88]	@ (800c638 <TIM_OC6_SetConfig+0xd0>)
 800c5e0:	4293      	cmp	r3, r2
 800c5e2:	d003      	beq.n	800c5ec <TIM_OC6_SetConfig+0x84>
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	4a15      	ldr	r2, [pc, #84]	@ (800c63c <TIM_OC6_SetConfig+0xd4>)
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d109      	bne.n	800c600 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c5ec:	697b      	ldr	r3, [r7, #20]
 800c5ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c5f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	695b      	ldr	r3, [r3, #20]
 800c5f8:	029b      	lsls	r3, r3, #10
 800c5fa:	697a      	ldr	r2, [r7, #20]
 800c5fc:	4313      	orrs	r3, r2
 800c5fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	697a      	ldr	r2, [r7, #20]
 800c604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	685a      	ldr	r2, [r3, #4]
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	621a      	str	r2, [r3, #32]
}
 800c61a:	bf00      	nop
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c624:	4770      	bx	lr
 800c626:	bf00      	nop
 800c628:	40012c00 	.word	0x40012c00
 800c62c:	40013400 	.word	0x40013400
 800c630:	40014000 	.word	0x40014000
 800c634:	40014400 	.word	0x40014400
 800c638:	40014800 	.word	0x40014800
 800c63c:	40015000 	.word	0x40015000

0800c640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c640:	b480      	push	{r7}
 800c642:	b087      	sub	sp, #28
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	6a1b      	ldr	r3, [r3, #32]
 800c650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	f023 0201 	bic.w	r2, r3, #1
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c66a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	011b      	lsls	r3, r3, #4
 800c670:	693a      	ldr	r2, [r7, #16]
 800c672:	4313      	orrs	r3, r2
 800c674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	f023 030a 	bic.w	r3, r3, #10
 800c67c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c67e:	697a      	ldr	r2, [r7, #20]
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	4313      	orrs	r3, r2
 800c684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	693a      	ldr	r2, [r7, #16]
 800c68a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	697a      	ldr	r2, [r7, #20]
 800c690:	621a      	str	r2, [r3, #32]
}
 800c692:	bf00      	nop
 800c694:	371c      	adds	r7, #28
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c69e:	b480      	push	{r7}
 800c6a0:	b087      	sub	sp, #28
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	60f8      	str	r0, [r7, #12]
 800c6a6:	60b9      	str	r1, [r7, #8]
 800c6a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	6a1b      	ldr	r3, [r3, #32]
 800c6ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	6a1b      	ldr	r3, [r3, #32]
 800c6b4:	f023 0210 	bic.w	r2, r3, #16
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	699b      	ldr	r3, [r3, #24]
 800c6c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c6c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	031b      	lsls	r3, r3, #12
 800c6ce:	693a      	ldr	r2, [r7, #16]
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c6d4:	697b      	ldr	r3, [r7, #20]
 800c6d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c6da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	697a      	ldr	r2, [r7, #20]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b085      	sub	sp, #20
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c714:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c718:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c71a:	683a      	ldr	r2, [r7, #0]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4313      	orrs	r3, r2
 800c720:	f043 0307 	orr.w	r3, r3, #7
 800c724:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	609a      	str	r2, [r3, #8]
}
 800c72c:	bf00      	nop
 800c72e:	3714      	adds	r7, #20
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c738:	b480      	push	{r7}
 800c73a:	b087      	sub	sp, #28
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	60f8      	str	r0, [r7, #12]
 800c740:	60b9      	str	r1, [r7, #8]
 800c742:	607a      	str	r2, [r7, #4]
 800c744:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c752:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	021a      	lsls	r2, r3, #8
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	431a      	orrs	r2, r3
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	4313      	orrs	r3, r2
 800c760:	697a      	ldr	r2, [r7, #20]
 800c762:	4313      	orrs	r3, r2
 800c764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	697a      	ldr	r2, [r7, #20]
 800c76a:	609a      	str	r2, [r3, #8]
}
 800c76c:	bf00      	nop
 800c76e:	371c      	adds	r7, #28
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c778:	b480      	push	{r7}
 800c77a:	b087      	sub	sp, #28
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c784:	68bb      	ldr	r3, [r7, #8]
 800c786:	f003 031f 	and.w	r3, r3, #31
 800c78a:	2201      	movs	r2, #1
 800c78c:	fa02 f303 	lsl.w	r3, r2, r3
 800c790:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6a1a      	ldr	r2, [r3, #32]
 800c796:	697b      	ldr	r3, [r7, #20]
 800c798:	43db      	mvns	r3, r3
 800c79a:	401a      	ands	r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	6a1a      	ldr	r2, [r3, #32]
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	f003 031f 	and.w	r3, r3, #31
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	fa01 f303 	lsl.w	r3, r1, r3
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	621a      	str	r2, [r3, #32]
}
 800c7b6:	bf00      	nop
 800c7b8:	371c      	adds	r7, #28
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
	...

0800c7c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d101      	bne.n	800c7dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7d8:	2302      	movs	r3, #2
 800c7da:	e06f      	b.n	800c8bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2201      	movs	r2, #1
 800c7e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2202      	movs	r2, #2
 800c7e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	689b      	ldr	r3, [r3, #8]
 800c7fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	4a31      	ldr	r2, [pc, #196]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d009      	beq.n	800c81a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a30      	ldr	r2, [pc, #192]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d004      	beq.n	800c81a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	4a2e      	ldr	r2, [pc, #184]	@ (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c816:	4293      	cmp	r3, r2
 800c818:	d108      	bne.n	800c82c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800c820:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	685b      	ldr	r3, [r3, #4]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	4313      	orrs	r3, r2
 800c82a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800c832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	4313      	orrs	r3, r2
 800c840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	4a1e      	ldr	r2, [pc, #120]	@ (800c8c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d01d      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c85c:	d018      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4a1c      	ldr	r2, [pc, #112]	@ (800c8d4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c864:	4293      	cmp	r3, r2
 800c866:	d013      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a1a      	ldr	r2, [pc, #104]	@ (800c8d8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d00e      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a15      	ldr	r2, [pc, #84]	@ (800c8cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d009      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a16      	ldr	r2, [pc, #88]	@ (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d004      	beq.n	800c890 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a11      	ldr	r2, [pc, #68]	@ (800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d10c      	bne.n	800c8aa <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c896:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	68ba      	ldr	r2, [r7, #8]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2201      	movs	r2, #1
 800c8ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c8ba:	2300      	movs	r3, #0
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3714      	adds	r7, #20
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c6:	4770      	bx	lr
 800c8c8:	40012c00 	.word	0x40012c00
 800c8cc:	40013400 	.word	0x40013400
 800c8d0:	40015000 	.word	0x40015000
 800c8d4:	40000400 	.word	0x40000400
 800c8d8:	40000800 	.word	0x40000800
 800c8dc:	40014000 	.word	0x40014000

0800c8e0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b085      	sub	sp, #20
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d101      	bne.n	800c8fc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	e078      	b.n	800c9ee <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2201      	movs	r2, #1
 800c900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	68db      	ldr	r3, [r3, #12]
 800c90e:	4313      	orrs	r3, r2
 800c910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c918:	683b      	ldr	r3, [r7, #0]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	4313      	orrs	r3, r2
 800c91e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	4313      	orrs	r3, r2
 800c92c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800c934:	683b      	ldr	r3, [r7, #0]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4313      	orrs	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	691b      	ldr	r3, [r3, #16]
 800c946:	4313      	orrs	r3, r2
 800c948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	695b      	ldr	r3, [r3, #20]
 800c954:	4313      	orrs	r3, r2
 800c956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c962:	4313      	orrs	r3, r2
 800c964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800c96c:	683b      	ldr	r3, [r7, #0]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	041b      	lsls	r3, r3, #16
 800c972:	4313      	orrs	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	69db      	ldr	r3, [r3, #28]
 800c980:	4313      	orrs	r3, r2
 800c982:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	4a1c      	ldr	r2, [pc, #112]	@ (800c9fc <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800c98a:	4293      	cmp	r3, r2
 800c98c:	d009      	beq.n	800c9a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a1b      	ldr	r2, [pc, #108]	@ (800ca00 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800c994:	4293      	cmp	r3, r2
 800c996:	d004      	beq.n	800c9a2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	4a19      	ldr	r2, [pc, #100]	@ (800ca04 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	d11c      	bne.n	800c9dc <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800c9a8:	683b      	ldr	r3, [r7, #0]
 800c9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9ac:	051b      	lsls	r3, r3, #20
 800c9ae:	4313      	orrs	r3, r2
 800c9b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800c9b8:	683b      	ldr	r3, [r7, #0]
 800c9ba:	6a1b      	ldr	r3, [r3, #32]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9ca:	4313      	orrs	r3, r2
 800c9cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9d8:	4313      	orrs	r3, r2
 800c9da:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3714      	adds	r7, #20
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	40012c00 	.word	0x40012c00
 800ca00:	40013400 	.word	0x40013400
 800ca04:	40015000 	.word	0x40015000

0800ca08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b083      	sub	sp, #12
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ca4c:	bf00      	nop
 800ca4e:	370c      	adds	r7, #12
 800ca50:	46bd      	mov	sp, r7
 800ca52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ca60:	bf00      	nop
 800ca62:	370c      	adds	r7, #12
 800ca64:	46bd      	mov	sp, r7
 800ca66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6a:	4770      	bx	lr

0800ca6c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca6c:	b480      	push	{r7}
 800ca6e:	b083      	sub	sp, #12
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ca74:	bf00      	nop
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ca80:	b480      	push	{r7}
 800ca82:	b083      	sub	sp, #12
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ca88:	bf00      	nop
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <_ZdlPvj>:
 800ca94:	f000 b802 	b.w	800ca9c <_ZdlPv>

0800ca98 <_Znaj>:
 800ca98:	f000 b802 	b.w	800caa0 <_Znwj>

0800ca9c <_ZdlPv>:
 800ca9c:	f001 b84e 	b.w	800db3c <free>

0800caa0 <_Znwj>:
 800caa0:	2801      	cmp	r0, #1
 800caa2:	bf38      	it	cc
 800caa4:	2001      	movcc	r0, #1
 800caa6:	b510      	push	{r4, lr}
 800caa8:	4604      	mov	r4, r0
 800caaa:	4620      	mov	r0, r4
 800caac:	f001 f83e 	bl	800db2c <malloc>
 800cab0:	b100      	cbz	r0, 800cab4 <_Znwj+0x14>
 800cab2:	bd10      	pop	{r4, pc}
 800cab4:	f000 f806 	bl	800cac4 <_ZSt15get_new_handlerv>
 800cab8:	b908      	cbnz	r0, 800cabe <_Znwj+0x1e>
 800caba:	f001 f82f 	bl	800db1c <abort>
 800cabe:	4780      	blx	r0
 800cac0:	e7f3      	b.n	800caaa <_Znwj+0xa>
	...

0800cac4 <_ZSt15get_new_handlerv>:
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <_ZSt15get_new_handlerv+0xc>)
 800cac6:	6818      	ldr	r0, [r3, #0]
 800cac8:	f3bf 8f5b 	dmb	ish
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	2000086c 	.word	0x2000086c

0800cad4 <pow>:
 800cad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cad6:	ed2d 8b02 	vpush	{d8}
 800cada:	eeb0 8a40 	vmov.f32	s16, s0
 800cade:	eef0 8a60 	vmov.f32	s17, s1
 800cae2:	ec55 4b11 	vmov	r4, r5, d1
 800cae6:	f000 f933 	bl	800cd50 <__ieee754_pow>
 800caea:	4622      	mov	r2, r4
 800caec:	462b      	mov	r3, r5
 800caee:	4620      	mov	r0, r4
 800caf0:	4629      	mov	r1, r5
 800caf2:	ec57 6b10 	vmov	r6, r7, d0
 800caf6:	f7f3 ffe5 	bl	8000ac4 <__aeabi_dcmpun>
 800cafa:	2800      	cmp	r0, #0
 800cafc:	d13b      	bne.n	800cb76 <pow+0xa2>
 800cafe:	ec51 0b18 	vmov	r0, r1, d8
 800cb02:	2200      	movs	r2, #0
 800cb04:	2300      	movs	r3, #0
 800cb06:	f7f3 ffab 	bl	8000a60 <__aeabi_dcmpeq>
 800cb0a:	b1b8      	cbz	r0, 800cb3c <pow+0x68>
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	2300      	movs	r3, #0
 800cb10:	4620      	mov	r0, r4
 800cb12:	4629      	mov	r1, r5
 800cb14:	f7f3 ffa4 	bl	8000a60 <__aeabi_dcmpeq>
 800cb18:	2800      	cmp	r0, #0
 800cb1a:	d146      	bne.n	800cbaa <pow+0xd6>
 800cb1c:	ec45 4b10 	vmov	d0, r4, r5
 800cb20:	f000 f886 	bl	800cc30 <finite>
 800cb24:	b338      	cbz	r0, 800cb76 <pow+0xa2>
 800cb26:	2200      	movs	r2, #0
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	4629      	mov	r1, r5
 800cb2e:	f7f3 ffa1 	bl	8000a74 <__aeabi_dcmplt>
 800cb32:	b300      	cbz	r0, 800cb76 <pow+0xa2>
 800cb34:	f001 f914 	bl	800dd60 <__errno>
 800cb38:	2322      	movs	r3, #34	@ 0x22
 800cb3a:	e01b      	b.n	800cb74 <pow+0xa0>
 800cb3c:	ec47 6b10 	vmov	d0, r6, r7
 800cb40:	f000 f876 	bl	800cc30 <finite>
 800cb44:	b9e0      	cbnz	r0, 800cb80 <pow+0xac>
 800cb46:	eeb0 0a48 	vmov.f32	s0, s16
 800cb4a:	eef0 0a68 	vmov.f32	s1, s17
 800cb4e:	f000 f86f 	bl	800cc30 <finite>
 800cb52:	b1a8      	cbz	r0, 800cb80 <pow+0xac>
 800cb54:	ec45 4b10 	vmov	d0, r4, r5
 800cb58:	f000 f86a 	bl	800cc30 <finite>
 800cb5c:	b180      	cbz	r0, 800cb80 <pow+0xac>
 800cb5e:	4632      	mov	r2, r6
 800cb60:	463b      	mov	r3, r7
 800cb62:	4630      	mov	r0, r6
 800cb64:	4639      	mov	r1, r7
 800cb66:	f7f3 ffad 	bl	8000ac4 <__aeabi_dcmpun>
 800cb6a:	2800      	cmp	r0, #0
 800cb6c:	d0e2      	beq.n	800cb34 <pow+0x60>
 800cb6e:	f001 f8f7 	bl	800dd60 <__errno>
 800cb72:	2321      	movs	r3, #33	@ 0x21
 800cb74:	6003      	str	r3, [r0, #0]
 800cb76:	ecbd 8b02 	vpop	{d8}
 800cb7a:	ec47 6b10 	vmov	d0, r6, r7
 800cb7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb80:	2200      	movs	r2, #0
 800cb82:	2300      	movs	r3, #0
 800cb84:	4630      	mov	r0, r6
 800cb86:	4639      	mov	r1, r7
 800cb88:	f7f3 ff6a 	bl	8000a60 <__aeabi_dcmpeq>
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d0f2      	beq.n	800cb76 <pow+0xa2>
 800cb90:	eeb0 0a48 	vmov.f32	s0, s16
 800cb94:	eef0 0a68 	vmov.f32	s1, s17
 800cb98:	f000 f84a 	bl	800cc30 <finite>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d0ea      	beq.n	800cb76 <pow+0xa2>
 800cba0:	ec45 4b10 	vmov	d0, r4, r5
 800cba4:	f000 f844 	bl	800cc30 <finite>
 800cba8:	e7c3      	b.n	800cb32 <pow+0x5e>
 800cbaa:	4f01      	ldr	r7, [pc, #4]	@ (800cbb0 <pow+0xdc>)
 800cbac:	2600      	movs	r6, #0
 800cbae:	e7e2      	b.n	800cb76 <pow+0xa2>
 800cbb0:	3ff00000 	.word	0x3ff00000

0800cbb4 <fmodf>:
 800cbb4:	b508      	push	{r3, lr}
 800cbb6:	ed2d 8b02 	vpush	{d8}
 800cbba:	eef0 8a40 	vmov.f32	s17, s0
 800cbbe:	eeb0 8a60 	vmov.f32	s16, s1
 800cbc2:	f000 fe11 	bl	800d7e8 <__ieee754_fmodf>
 800cbc6:	eef4 8a48 	vcmp.f32	s17, s16
 800cbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbce:	d60c      	bvs.n	800cbea <fmodf+0x36>
 800cbd0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cbf0 <fmodf+0x3c>
 800cbd4:	eeb4 8a68 	vcmp.f32	s16, s17
 800cbd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbdc:	d105      	bne.n	800cbea <fmodf+0x36>
 800cbde:	f001 f8bf 	bl	800dd60 <__errno>
 800cbe2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cbe6:	2321      	movs	r3, #33	@ 0x21
 800cbe8:	6003      	str	r3, [r0, #0]
 800cbea:	ecbd 8b02 	vpop	{d8}
 800cbee:	bd08      	pop	{r3, pc}
 800cbf0:	00000000 	.word	0x00000000

0800cbf4 <sqrtf>:
 800cbf4:	b508      	push	{r3, lr}
 800cbf6:	ed2d 8b02 	vpush	{d8}
 800cbfa:	eeb0 8a40 	vmov.f32	s16, s0
 800cbfe:	f000 f8a1 	bl	800cd44 <__ieee754_sqrtf>
 800cc02:	eeb4 8a48 	vcmp.f32	s16, s16
 800cc06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc0a:	d60c      	bvs.n	800cc26 <sqrtf+0x32>
 800cc0c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800cc2c <sqrtf+0x38>
 800cc10:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800cc14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc18:	d505      	bpl.n	800cc26 <sqrtf+0x32>
 800cc1a:	f001 f8a1 	bl	800dd60 <__errno>
 800cc1e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800cc22:	2321      	movs	r3, #33	@ 0x21
 800cc24:	6003      	str	r3, [r0, #0]
 800cc26:	ecbd 8b02 	vpop	{d8}
 800cc2a:	bd08      	pop	{r3, pc}
 800cc2c:	00000000 	.word	0x00000000

0800cc30 <finite>:
 800cc30:	b082      	sub	sp, #8
 800cc32:	ed8d 0b00 	vstr	d0, [sp]
 800cc36:	9801      	ldr	r0, [sp, #4]
 800cc38:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800cc3c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800cc40:	0fc0      	lsrs	r0, r0, #31
 800cc42:	b002      	add	sp, #8
 800cc44:	4770      	bx	lr
	...

0800cc48 <scalbn>:
 800cc48:	b570      	push	{r4, r5, r6, lr}
 800cc4a:	ec55 4b10 	vmov	r4, r5, d0
 800cc4e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800cc52:	4606      	mov	r6, r0
 800cc54:	462b      	mov	r3, r5
 800cc56:	b991      	cbnz	r1, 800cc7e <scalbn+0x36>
 800cc58:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800cc5c:	4323      	orrs	r3, r4
 800cc5e:	d03d      	beq.n	800ccdc <scalbn+0x94>
 800cc60:	4b35      	ldr	r3, [pc, #212]	@ (800cd38 <scalbn+0xf0>)
 800cc62:	4620      	mov	r0, r4
 800cc64:	4629      	mov	r1, r5
 800cc66:	2200      	movs	r2, #0
 800cc68:	f7f3 fc92 	bl	8000590 <__aeabi_dmul>
 800cc6c:	4b33      	ldr	r3, [pc, #204]	@ (800cd3c <scalbn+0xf4>)
 800cc6e:	429e      	cmp	r6, r3
 800cc70:	4604      	mov	r4, r0
 800cc72:	460d      	mov	r5, r1
 800cc74:	da0f      	bge.n	800cc96 <scalbn+0x4e>
 800cc76:	a328      	add	r3, pc, #160	@ (adr r3, 800cd18 <scalbn+0xd0>)
 800cc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc7c:	e01e      	b.n	800ccbc <scalbn+0x74>
 800cc7e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800cc82:	4291      	cmp	r1, r2
 800cc84:	d10b      	bne.n	800cc9e <scalbn+0x56>
 800cc86:	4622      	mov	r2, r4
 800cc88:	4620      	mov	r0, r4
 800cc8a:	4629      	mov	r1, r5
 800cc8c:	f7f3 faca 	bl	8000224 <__adddf3>
 800cc90:	4604      	mov	r4, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	e022      	b.n	800ccdc <scalbn+0x94>
 800cc96:	460b      	mov	r3, r1
 800cc98:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800cc9c:	3936      	subs	r1, #54	@ 0x36
 800cc9e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800cca2:	4296      	cmp	r6, r2
 800cca4:	dd0d      	ble.n	800ccc2 <scalbn+0x7a>
 800cca6:	2d00      	cmp	r5, #0
 800cca8:	a11d      	add	r1, pc, #116	@ (adr r1, 800cd20 <scalbn+0xd8>)
 800ccaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccae:	da02      	bge.n	800ccb6 <scalbn+0x6e>
 800ccb0:	a11d      	add	r1, pc, #116	@ (adr r1, 800cd28 <scalbn+0xe0>)
 800ccb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb6:	a31a      	add	r3, pc, #104	@ (adr r3, 800cd20 <scalbn+0xd8>)
 800ccb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbc:	f7f3 fc68 	bl	8000590 <__aeabi_dmul>
 800ccc0:	e7e6      	b.n	800cc90 <scalbn+0x48>
 800ccc2:	1872      	adds	r2, r6, r1
 800ccc4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800ccc8:	428a      	cmp	r2, r1
 800ccca:	dcec      	bgt.n	800cca6 <scalbn+0x5e>
 800cccc:	2a00      	cmp	r2, #0
 800ccce:	dd08      	ble.n	800cce2 <scalbn+0x9a>
 800ccd0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ccd4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ccd8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ccdc:	ec45 4b10 	vmov	d0, r4, r5
 800cce0:	bd70      	pop	{r4, r5, r6, pc}
 800cce2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800cce6:	da08      	bge.n	800ccfa <scalbn+0xb2>
 800cce8:	2d00      	cmp	r5, #0
 800ccea:	a10b      	add	r1, pc, #44	@ (adr r1, 800cd18 <scalbn+0xd0>)
 800ccec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf0:	dac1      	bge.n	800cc76 <scalbn+0x2e>
 800ccf2:	a10f      	add	r1, pc, #60	@ (adr r1, 800cd30 <scalbn+0xe8>)
 800ccf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccf8:	e7bd      	b.n	800cc76 <scalbn+0x2e>
 800ccfa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800ccfe:	3236      	adds	r2, #54	@ 0x36
 800cd00:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800cd04:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cd08:	4620      	mov	r0, r4
 800cd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd40 <scalbn+0xf8>)
 800cd0c:	4629      	mov	r1, r5
 800cd0e:	2200      	movs	r2, #0
 800cd10:	e7d4      	b.n	800ccbc <scalbn+0x74>
 800cd12:	bf00      	nop
 800cd14:	f3af 8000 	nop.w
 800cd18:	c2f8f359 	.word	0xc2f8f359
 800cd1c:	01a56e1f 	.word	0x01a56e1f
 800cd20:	8800759c 	.word	0x8800759c
 800cd24:	7e37e43c 	.word	0x7e37e43c
 800cd28:	8800759c 	.word	0x8800759c
 800cd2c:	fe37e43c 	.word	0xfe37e43c
 800cd30:	c2f8f359 	.word	0xc2f8f359
 800cd34:	81a56e1f 	.word	0x81a56e1f
 800cd38:	43500000 	.word	0x43500000
 800cd3c:	ffff3cb0 	.word	0xffff3cb0
 800cd40:	3c900000 	.word	0x3c900000

0800cd44 <__ieee754_sqrtf>:
 800cd44:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800cd48:	4770      	bx	lr
 800cd4a:	0000      	movs	r0, r0
 800cd4c:	0000      	movs	r0, r0
	...

0800cd50 <__ieee754_pow>:
 800cd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd54:	b091      	sub	sp, #68	@ 0x44
 800cd56:	ed8d 1b00 	vstr	d1, [sp]
 800cd5a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800cd5e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800cd62:	ea5a 0001 	orrs.w	r0, sl, r1
 800cd66:	ec57 6b10 	vmov	r6, r7, d0
 800cd6a:	d113      	bne.n	800cd94 <__ieee754_pow+0x44>
 800cd6c:	19b3      	adds	r3, r6, r6
 800cd6e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800cd72:	4152      	adcs	r2, r2
 800cd74:	4298      	cmp	r0, r3
 800cd76:	4b98      	ldr	r3, [pc, #608]	@ (800cfd8 <__ieee754_pow+0x288>)
 800cd78:	4193      	sbcs	r3, r2
 800cd7a:	f080 84ea 	bcs.w	800d752 <__ieee754_pow+0xa02>
 800cd7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cd82:	4630      	mov	r0, r6
 800cd84:	4639      	mov	r1, r7
 800cd86:	f7f3 fa4d 	bl	8000224 <__adddf3>
 800cd8a:	ec41 0b10 	vmov	d0, r0, r1
 800cd8e:	b011      	add	sp, #68	@ 0x44
 800cd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd94:	4a91      	ldr	r2, [pc, #580]	@ (800cfdc <__ieee754_pow+0x28c>)
 800cd96:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800cd9a:	4590      	cmp	r8, r2
 800cd9c:	463d      	mov	r5, r7
 800cd9e:	4633      	mov	r3, r6
 800cda0:	d806      	bhi.n	800cdb0 <__ieee754_pow+0x60>
 800cda2:	d101      	bne.n	800cda8 <__ieee754_pow+0x58>
 800cda4:	2e00      	cmp	r6, #0
 800cda6:	d1ea      	bne.n	800cd7e <__ieee754_pow+0x2e>
 800cda8:	4592      	cmp	sl, r2
 800cdaa:	d801      	bhi.n	800cdb0 <__ieee754_pow+0x60>
 800cdac:	d10e      	bne.n	800cdcc <__ieee754_pow+0x7c>
 800cdae:	b169      	cbz	r1, 800cdcc <__ieee754_pow+0x7c>
 800cdb0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800cdb4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800cdb8:	431d      	orrs	r5, r3
 800cdba:	d1e0      	bne.n	800cd7e <__ieee754_pow+0x2e>
 800cdbc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cdc0:	18db      	adds	r3, r3, r3
 800cdc2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800cdc6:	4152      	adcs	r2, r2
 800cdc8:	429d      	cmp	r5, r3
 800cdca:	e7d4      	b.n	800cd76 <__ieee754_pow+0x26>
 800cdcc:	2d00      	cmp	r5, #0
 800cdce:	46c3      	mov	fp, r8
 800cdd0:	da3a      	bge.n	800ce48 <__ieee754_pow+0xf8>
 800cdd2:	4a83      	ldr	r2, [pc, #524]	@ (800cfe0 <__ieee754_pow+0x290>)
 800cdd4:	4592      	cmp	sl, r2
 800cdd6:	d84d      	bhi.n	800ce74 <__ieee754_pow+0x124>
 800cdd8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800cddc:	4592      	cmp	sl, r2
 800cdde:	f240 84c7 	bls.w	800d770 <__ieee754_pow+0xa20>
 800cde2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800cde6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800cdea:	2a14      	cmp	r2, #20
 800cdec:	dd0f      	ble.n	800ce0e <__ieee754_pow+0xbe>
 800cdee:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800cdf2:	fa21 f402 	lsr.w	r4, r1, r2
 800cdf6:	fa04 f202 	lsl.w	r2, r4, r2
 800cdfa:	428a      	cmp	r2, r1
 800cdfc:	f040 84b8 	bne.w	800d770 <__ieee754_pow+0xa20>
 800ce00:	f004 0401 	and.w	r4, r4, #1
 800ce04:	f1c4 0402 	rsb	r4, r4, #2
 800ce08:	2900      	cmp	r1, #0
 800ce0a:	d158      	bne.n	800cebe <__ieee754_pow+0x16e>
 800ce0c:	e00e      	b.n	800ce2c <__ieee754_pow+0xdc>
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	d154      	bne.n	800cebc <__ieee754_pow+0x16c>
 800ce12:	f1c2 0214 	rsb	r2, r2, #20
 800ce16:	fa4a f402 	asr.w	r4, sl, r2
 800ce1a:	fa04 f202 	lsl.w	r2, r4, r2
 800ce1e:	4552      	cmp	r2, sl
 800ce20:	f040 84a3 	bne.w	800d76a <__ieee754_pow+0xa1a>
 800ce24:	f004 0401 	and.w	r4, r4, #1
 800ce28:	f1c4 0402 	rsb	r4, r4, #2
 800ce2c:	4a6d      	ldr	r2, [pc, #436]	@ (800cfe4 <__ieee754_pow+0x294>)
 800ce2e:	4592      	cmp	sl, r2
 800ce30:	d12e      	bne.n	800ce90 <__ieee754_pow+0x140>
 800ce32:	f1b9 0f00 	cmp.w	r9, #0
 800ce36:	f280 8494 	bge.w	800d762 <__ieee754_pow+0xa12>
 800ce3a:	496a      	ldr	r1, [pc, #424]	@ (800cfe4 <__ieee754_pow+0x294>)
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	463b      	mov	r3, r7
 800ce40:	2000      	movs	r0, #0
 800ce42:	f7f3 fccf 	bl	80007e4 <__aeabi_ddiv>
 800ce46:	e7a0      	b.n	800cd8a <__ieee754_pow+0x3a>
 800ce48:	2400      	movs	r4, #0
 800ce4a:	bbc1      	cbnz	r1, 800cebe <__ieee754_pow+0x16e>
 800ce4c:	4a63      	ldr	r2, [pc, #396]	@ (800cfdc <__ieee754_pow+0x28c>)
 800ce4e:	4592      	cmp	sl, r2
 800ce50:	d1ec      	bne.n	800ce2c <__ieee754_pow+0xdc>
 800ce52:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ce56:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	f000 8479 	beq.w	800d752 <__ieee754_pow+0xa02>
 800ce60:	4b61      	ldr	r3, [pc, #388]	@ (800cfe8 <__ieee754_pow+0x298>)
 800ce62:	4598      	cmp	r8, r3
 800ce64:	d908      	bls.n	800ce78 <__ieee754_pow+0x128>
 800ce66:	f1b9 0f00 	cmp.w	r9, #0
 800ce6a:	f2c0 8476 	blt.w	800d75a <__ieee754_pow+0xa0a>
 800ce6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce72:	e78a      	b.n	800cd8a <__ieee754_pow+0x3a>
 800ce74:	2402      	movs	r4, #2
 800ce76:	e7e8      	b.n	800ce4a <__ieee754_pow+0xfa>
 800ce78:	f1b9 0f00 	cmp.w	r9, #0
 800ce7c:	f04f 0000 	mov.w	r0, #0
 800ce80:	f04f 0100 	mov.w	r1, #0
 800ce84:	da81      	bge.n	800cd8a <__ieee754_pow+0x3a>
 800ce86:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ce8a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ce8e:	e77c      	b.n	800cd8a <__ieee754_pow+0x3a>
 800ce90:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ce94:	d106      	bne.n	800cea4 <__ieee754_pow+0x154>
 800ce96:	4632      	mov	r2, r6
 800ce98:	463b      	mov	r3, r7
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	4639      	mov	r1, r7
 800ce9e:	f7f3 fb77 	bl	8000590 <__aeabi_dmul>
 800cea2:	e772      	b.n	800cd8a <__ieee754_pow+0x3a>
 800cea4:	4a51      	ldr	r2, [pc, #324]	@ (800cfec <__ieee754_pow+0x29c>)
 800cea6:	4591      	cmp	r9, r2
 800cea8:	d109      	bne.n	800cebe <__ieee754_pow+0x16e>
 800ceaa:	2d00      	cmp	r5, #0
 800ceac:	db07      	blt.n	800cebe <__ieee754_pow+0x16e>
 800ceae:	ec47 6b10 	vmov	d0, r6, r7
 800ceb2:	b011      	add	sp, #68	@ 0x44
 800ceb4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb8:	f000 bd56 	b.w	800d968 <__ieee754_sqrt>
 800cebc:	2400      	movs	r4, #0
 800cebe:	ec47 6b10 	vmov	d0, r6, r7
 800cec2:	9302      	str	r3, [sp, #8]
 800cec4:	f000 fc88 	bl	800d7d8 <fabs>
 800cec8:	9b02      	ldr	r3, [sp, #8]
 800ceca:	ec51 0b10 	vmov	r0, r1, d0
 800cece:	bb53      	cbnz	r3, 800cf26 <__ieee754_pow+0x1d6>
 800ced0:	4b44      	ldr	r3, [pc, #272]	@ (800cfe4 <__ieee754_pow+0x294>)
 800ced2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d002      	beq.n	800cee0 <__ieee754_pow+0x190>
 800ceda:	f1b8 0f00 	cmp.w	r8, #0
 800cede:	d122      	bne.n	800cf26 <__ieee754_pow+0x1d6>
 800cee0:	f1b9 0f00 	cmp.w	r9, #0
 800cee4:	da05      	bge.n	800cef2 <__ieee754_pow+0x1a2>
 800cee6:	4602      	mov	r2, r0
 800cee8:	460b      	mov	r3, r1
 800ceea:	2000      	movs	r0, #0
 800ceec:	493d      	ldr	r1, [pc, #244]	@ (800cfe4 <__ieee754_pow+0x294>)
 800ceee:	f7f3 fc79 	bl	80007e4 <__aeabi_ddiv>
 800cef2:	2d00      	cmp	r5, #0
 800cef4:	f6bf af49 	bge.w	800cd8a <__ieee754_pow+0x3a>
 800cef8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800cefc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800cf00:	ea58 0804 	orrs.w	r8, r8, r4
 800cf04:	d108      	bne.n	800cf18 <__ieee754_pow+0x1c8>
 800cf06:	4602      	mov	r2, r0
 800cf08:	460b      	mov	r3, r1
 800cf0a:	4610      	mov	r0, r2
 800cf0c:	4619      	mov	r1, r3
 800cf0e:	f7f3 f987 	bl	8000220 <__aeabi_dsub>
 800cf12:	4602      	mov	r2, r0
 800cf14:	460b      	mov	r3, r1
 800cf16:	e794      	b.n	800ce42 <__ieee754_pow+0xf2>
 800cf18:	2c01      	cmp	r4, #1
 800cf1a:	f47f af36 	bne.w	800cd8a <__ieee754_pow+0x3a>
 800cf1e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800cf22:	4619      	mov	r1, r3
 800cf24:	e731      	b.n	800cd8a <__ieee754_pow+0x3a>
 800cf26:	0feb      	lsrs	r3, r5, #31
 800cf28:	3b01      	subs	r3, #1
 800cf2a:	ea53 0204 	orrs.w	r2, r3, r4
 800cf2e:	d102      	bne.n	800cf36 <__ieee754_pow+0x1e6>
 800cf30:	4632      	mov	r2, r6
 800cf32:	463b      	mov	r3, r7
 800cf34:	e7e9      	b.n	800cf0a <__ieee754_pow+0x1ba>
 800cf36:	3c01      	subs	r4, #1
 800cf38:	431c      	orrs	r4, r3
 800cf3a:	d016      	beq.n	800cf6a <__ieee754_pow+0x21a>
 800cf3c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800cfc8 <__ieee754_pow+0x278>
 800cf40:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800cf44:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cf48:	f240 8112 	bls.w	800d170 <__ieee754_pow+0x420>
 800cf4c:	4b28      	ldr	r3, [pc, #160]	@ (800cff0 <__ieee754_pow+0x2a0>)
 800cf4e:	459a      	cmp	sl, r3
 800cf50:	4b25      	ldr	r3, [pc, #148]	@ (800cfe8 <__ieee754_pow+0x298>)
 800cf52:	d916      	bls.n	800cf82 <__ieee754_pow+0x232>
 800cf54:	4598      	cmp	r8, r3
 800cf56:	d80b      	bhi.n	800cf70 <__ieee754_pow+0x220>
 800cf58:	f1b9 0f00 	cmp.w	r9, #0
 800cf5c:	da0b      	bge.n	800cf76 <__ieee754_pow+0x226>
 800cf5e:	2000      	movs	r0, #0
 800cf60:	b011      	add	sp, #68	@ 0x44
 800cf62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf66:	f000 bcf7 	b.w	800d958 <__math_oflow>
 800cf6a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800cfd0 <__ieee754_pow+0x280>
 800cf6e:	e7e7      	b.n	800cf40 <__ieee754_pow+0x1f0>
 800cf70:	f1b9 0f00 	cmp.w	r9, #0
 800cf74:	dcf3      	bgt.n	800cf5e <__ieee754_pow+0x20e>
 800cf76:	2000      	movs	r0, #0
 800cf78:	b011      	add	sp, #68	@ 0x44
 800cf7a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7e:	f000 bce3 	b.w	800d948 <__math_uflow>
 800cf82:	4598      	cmp	r8, r3
 800cf84:	d20c      	bcs.n	800cfa0 <__ieee754_pow+0x250>
 800cf86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	f7f3 fd71 	bl	8000a74 <__aeabi_dcmplt>
 800cf92:	3800      	subs	r0, #0
 800cf94:	bf18      	it	ne
 800cf96:	2001      	movne	r0, #1
 800cf98:	f1b9 0f00 	cmp.w	r9, #0
 800cf9c:	daec      	bge.n	800cf78 <__ieee754_pow+0x228>
 800cf9e:	e7df      	b.n	800cf60 <__ieee754_pow+0x210>
 800cfa0:	4b10      	ldr	r3, [pc, #64]	@ (800cfe4 <__ieee754_pow+0x294>)
 800cfa2:	4598      	cmp	r8, r3
 800cfa4:	f04f 0200 	mov.w	r2, #0
 800cfa8:	d924      	bls.n	800cff4 <__ieee754_pow+0x2a4>
 800cfaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfae:	2300      	movs	r3, #0
 800cfb0:	f7f3 fd60 	bl	8000a74 <__aeabi_dcmplt>
 800cfb4:	3800      	subs	r0, #0
 800cfb6:	bf18      	it	ne
 800cfb8:	2001      	movne	r0, #1
 800cfba:	f1b9 0f00 	cmp.w	r9, #0
 800cfbe:	dccf      	bgt.n	800cf60 <__ieee754_pow+0x210>
 800cfc0:	e7da      	b.n	800cf78 <__ieee754_pow+0x228>
 800cfc2:	bf00      	nop
 800cfc4:	f3af 8000 	nop.w
 800cfc8:	00000000 	.word	0x00000000
 800cfcc:	3ff00000 	.word	0x3ff00000
 800cfd0:	00000000 	.word	0x00000000
 800cfd4:	bff00000 	.word	0xbff00000
 800cfd8:	fff00000 	.word	0xfff00000
 800cfdc:	7ff00000 	.word	0x7ff00000
 800cfe0:	433fffff 	.word	0x433fffff
 800cfe4:	3ff00000 	.word	0x3ff00000
 800cfe8:	3fefffff 	.word	0x3fefffff
 800cfec:	3fe00000 	.word	0x3fe00000
 800cff0:	43f00000 	.word	0x43f00000
 800cff4:	4b5a      	ldr	r3, [pc, #360]	@ (800d160 <__ieee754_pow+0x410>)
 800cff6:	f7f3 f913 	bl	8000220 <__aeabi_dsub>
 800cffa:	a351      	add	r3, pc, #324	@ (adr r3, 800d140 <__ieee754_pow+0x3f0>)
 800cffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d000:	4604      	mov	r4, r0
 800d002:	460d      	mov	r5, r1
 800d004:	f7f3 fac4 	bl	8000590 <__aeabi_dmul>
 800d008:	a34f      	add	r3, pc, #316	@ (adr r3, 800d148 <__ieee754_pow+0x3f8>)
 800d00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d00e:	4606      	mov	r6, r0
 800d010:	460f      	mov	r7, r1
 800d012:	4620      	mov	r0, r4
 800d014:	4629      	mov	r1, r5
 800d016:	f7f3 fabb 	bl	8000590 <__aeabi_dmul>
 800d01a:	4b52      	ldr	r3, [pc, #328]	@ (800d164 <__ieee754_pow+0x414>)
 800d01c:	4682      	mov	sl, r0
 800d01e:	468b      	mov	fp, r1
 800d020:	2200      	movs	r2, #0
 800d022:	4620      	mov	r0, r4
 800d024:	4629      	mov	r1, r5
 800d026:	f7f3 fab3 	bl	8000590 <__aeabi_dmul>
 800d02a:	4602      	mov	r2, r0
 800d02c:	460b      	mov	r3, r1
 800d02e:	a148      	add	r1, pc, #288	@ (adr r1, 800d150 <__ieee754_pow+0x400>)
 800d030:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d034:	f7f3 f8f4 	bl	8000220 <__aeabi_dsub>
 800d038:	4622      	mov	r2, r4
 800d03a:	462b      	mov	r3, r5
 800d03c:	f7f3 faa8 	bl	8000590 <__aeabi_dmul>
 800d040:	4602      	mov	r2, r0
 800d042:	460b      	mov	r3, r1
 800d044:	2000      	movs	r0, #0
 800d046:	4948      	ldr	r1, [pc, #288]	@ (800d168 <__ieee754_pow+0x418>)
 800d048:	f7f3 f8ea 	bl	8000220 <__aeabi_dsub>
 800d04c:	4622      	mov	r2, r4
 800d04e:	4680      	mov	r8, r0
 800d050:	4689      	mov	r9, r1
 800d052:	462b      	mov	r3, r5
 800d054:	4620      	mov	r0, r4
 800d056:	4629      	mov	r1, r5
 800d058:	f7f3 fa9a 	bl	8000590 <__aeabi_dmul>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4640      	mov	r0, r8
 800d062:	4649      	mov	r1, r9
 800d064:	f7f3 fa94 	bl	8000590 <__aeabi_dmul>
 800d068:	a33b      	add	r3, pc, #236	@ (adr r3, 800d158 <__ieee754_pow+0x408>)
 800d06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06e:	f7f3 fa8f 	bl	8000590 <__aeabi_dmul>
 800d072:	4602      	mov	r2, r0
 800d074:	460b      	mov	r3, r1
 800d076:	4650      	mov	r0, sl
 800d078:	4659      	mov	r1, fp
 800d07a:	f7f3 f8d1 	bl	8000220 <__aeabi_dsub>
 800d07e:	4602      	mov	r2, r0
 800d080:	460b      	mov	r3, r1
 800d082:	4680      	mov	r8, r0
 800d084:	4689      	mov	r9, r1
 800d086:	4630      	mov	r0, r6
 800d088:	4639      	mov	r1, r7
 800d08a:	f7f3 f8cb 	bl	8000224 <__adddf3>
 800d08e:	2400      	movs	r4, #0
 800d090:	4632      	mov	r2, r6
 800d092:	463b      	mov	r3, r7
 800d094:	4620      	mov	r0, r4
 800d096:	460d      	mov	r5, r1
 800d098:	f7f3 f8c2 	bl	8000220 <__aeabi_dsub>
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	4640      	mov	r0, r8
 800d0a2:	4649      	mov	r1, r9
 800d0a4:	f7f3 f8bc 	bl	8000220 <__aeabi_dsub>
 800d0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9304      	str	r3, [sp, #16]
 800d0b4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800d0b8:	4606      	mov	r6, r0
 800d0ba:	460f      	mov	r7, r1
 800d0bc:	4652      	mov	r2, sl
 800d0be:	465b      	mov	r3, fp
 800d0c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0c4:	f7f3 f8ac 	bl	8000220 <__aeabi_dsub>
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	462b      	mov	r3, r5
 800d0cc:	f7f3 fa60 	bl	8000590 <__aeabi_dmul>
 800d0d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d0d4:	4680      	mov	r8, r0
 800d0d6:	4689      	mov	r9, r1
 800d0d8:	4630      	mov	r0, r6
 800d0da:	4639      	mov	r1, r7
 800d0dc:	f7f3 fa58 	bl	8000590 <__aeabi_dmul>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4640      	mov	r0, r8
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	f7f3 f89c 	bl	8000224 <__adddf3>
 800d0ec:	4652      	mov	r2, sl
 800d0ee:	465b      	mov	r3, fp
 800d0f0:	4606      	mov	r6, r0
 800d0f2:	460f      	mov	r7, r1
 800d0f4:	4620      	mov	r0, r4
 800d0f6:	4629      	mov	r1, r5
 800d0f8:	f7f3 fa4a 	bl	8000590 <__aeabi_dmul>
 800d0fc:	460b      	mov	r3, r1
 800d0fe:	4602      	mov	r2, r0
 800d100:	4680      	mov	r8, r0
 800d102:	4689      	mov	r9, r1
 800d104:	4630      	mov	r0, r6
 800d106:	4639      	mov	r1, r7
 800d108:	f7f3 f88c 	bl	8000224 <__adddf3>
 800d10c:	4b17      	ldr	r3, [pc, #92]	@ (800d16c <__ieee754_pow+0x41c>)
 800d10e:	4299      	cmp	r1, r3
 800d110:	4604      	mov	r4, r0
 800d112:	460d      	mov	r5, r1
 800d114:	468a      	mov	sl, r1
 800d116:	468b      	mov	fp, r1
 800d118:	f340 82ef 	ble.w	800d6fa <__ieee754_pow+0x9aa>
 800d11c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800d120:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800d124:	4303      	orrs	r3, r0
 800d126:	f000 81e8 	beq.w	800d4fa <__ieee754_pow+0x7aa>
 800d12a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d12e:	2200      	movs	r2, #0
 800d130:	2300      	movs	r3, #0
 800d132:	f7f3 fc9f 	bl	8000a74 <__aeabi_dcmplt>
 800d136:	3800      	subs	r0, #0
 800d138:	bf18      	it	ne
 800d13a:	2001      	movne	r0, #1
 800d13c:	e710      	b.n	800cf60 <__ieee754_pow+0x210>
 800d13e:	bf00      	nop
 800d140:	60000000 	.word	0x60000000
 800d144:	3ff71547 	.word	0x3ff71547
 800d148:	f85ddf44 	.word	0xf85ddf44
 800d14c:	3e54ae0b 	.word	0x3e54ae0b
 800d150:	55555555 	.word	0x55555555
 800d154:	3fd55555 	.word	0x3fd55555
 800d158:	652b82fe 	.word	0x652b82fe
 800d15c:	3ff71547 	.word	0x3ff71547
 800d160:	3ff00000 	.word	0x3ff00000
 800d164:	3fd00000 	.word	0x3fd00000
 800d168:	3fe00000 	.word	0x3fe00000
 800d16c:	408fffff 	.word	0x408fffff
 800d170:	4bd5      	ldr	r3, [pc, #852]	@ (800d4c8 <__ieee754_pow+0x778>)
 800d172:	402b      	ands	r3, r5
 800d174:	2200      	movs	r2, #0
 800d176:	b92b      	cbnz	r3, 800d184 <__ieee754_pow+0x434>
 800d178:	4bd4      	ldr	r3, [pc, #848]	@ (800d4cc <__ieee754_pow+0x77c>)
 800d17a:	f7f3 fa09 	bl	8000590 <__aeabi_dmul>
 800d17e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800d182:	468b      	mov	fp, r1
 800d184:	ea4f 532b 	mov.w	r3, fp, asr #20
 800d188:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800d18c:	4413      	add	r3, r2
 800d18e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d190:	4bcf      	ldr	r3, [pc, #828]	@ (800d4d0 <__ieee754_pow+0x780>)
 800d192:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800d196:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800d19a:	459b      	cmp	fp, r3
 800d19c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800d1a0:	dd08      	ble.n	800d1b4 <__ieee754_pow+0x464>
 800d1a2:	4bcc      	ldr	r3, [pc, #816]	@ (800d4d4 <__ieee754_pow+0x784>)
 800d1a4:	459b      	cmp	fp, r3
 800d1a6:	f340 81a5 	ble.w	800d4f4 <__ieee754_pow+0x7a4>
 800d1aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800d1b0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800d1b4:	f04f 0a00 	mov.w	sl, #0
 800d1b8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800d1bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d1be:	4bc6      	ldr	r3, [pc, #792]	@ (800d4d8 <__ieee754_pow+0x788>)
 800d1c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d1c4:	ed93 7b00 	vldr	d7, [r3]
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	ec53 2b17 	vmov	r2, r3, d7
 800d1ce:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d1d6:	f7f3 f823 	bl	8000220 <__aeabi_dsub>
 800d1da:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d1de:	4606      	mov	r6, r0
 800d1e0:	460f      	mov	r7, r1
 800d1e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d1e6:	f7f3 f81d 	bl	8000224 <__adddf3>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	2000      	movs	r0, #0
 800d1f0:	49ba      	ldr	r1, [pc, #744]	@ (800d4dc <__ieee754_pow+0x78c>)
 800d1f2:	f7f3 faf7 	bl	80007e4 <__aeabi_ddiv>
 800d1f6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800d1fa:	4602      	mov	r2, r0
 800d1fc:	460b      	mov	r3, r1
 800d1fe:	4630      	mov	r0, r6
 800d200:	4639      	mov	r1, r7
 800d202:	f7f3 f9c5 	bl	8000590 <__aeabi_dmul>
 800d206:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d20a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800d20e:	106d      	asrs	r5, r5, #1
 800d210:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800d214:	f04f 0b00 	mov.w	fp, #0
 800d218:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800d21c:	4661      	mov	r1, ip
 800d21e:	2200      	movs	r2, #0
 800d220:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800d224:	4658      	mov	r0, fp
 800d226:	46e1      	mov	r9, ip
 800d228:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800d22c:	4614      	mov	r4, r2
 800d22e:	461d      	mov	r5, r3
 800d230:	f7f3 f9ae 	bl	8000590 <__aeabi_dmul>
 800d234:	4602      	mov	r2, r0
 800d236:	460b      	mov	r3, r1
 800d238:	4630      	mov	r0, r6
 800d23a:	4639      	mov	r1, r7
 800d23c:	f7f2 fff0 	bl	8000220 <__aeabi_dsub>
 800d240:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d244:	4606      	mov	r6, r0
 800d246:	460f      	mov	r7, r1
 800d248:	4620      	mov	r0, r4
 800d24a:	4629      	mov	r1, r5
 800d24c:	f7f2 ffe8 	bl	8000220 <__aeabi_dsub>
 800d250:	4602      	mov	r2, r0
 800d252:	460b      	mov	r3, r1
 800d254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d258:	f7f2 ffe2 	bl	8000220 <__aeabi_dsub>
 800d25c:	465a      	mov	r2, fp
 800d25e:	464b      	mov	r3, r9
 800d260:	f7f3 f996 	bl	8000590 <__aeabi_dmul>
 800d264:	4602      	mov	r2, r0
 800d266:	460b      	mov	r3, r1
 800d268:	4630      	mov	r0, r6
 800d26a:	4639      	mov	r1, r7
 800d26c:	f7f2 ffd8 	bl	8000220 <__aeabi_dsub>
 800d270:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d274:	f7f3 f98c 	bl	8000590 <__aeabi_dmul>
 800d278:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d27c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d280:	4610      	mov	r0, r2
 800d282:	4619      	mov	r1, r3
 800d284:	f7f3 f984 	bl	8000590 <__aeabi_dmul>
 800d288:	a37d      	add	r3, pc, #500	@ (adr r3, 800d480 <__ieee754_pow+0x730>)
 800d28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28e:	4604      	mov	r4, r0
 800d290:	460d      	mov	r5, r1
 800d292:	f7f3 f97d 	bl	8000590 <__aeabi_dmul>
 800d296:	a37c      	add	r3, pc, #496	@ (adr r3, 800d488 <__ieee754_pow+0x738>)
 800d298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d29c:	f7f2 ffc2 	bl	8000224 <__adddf3>
 800d2a0:	4622      	mov	r2, r4
 800d2a2:	462b      	mov	r3, r5
 800d2a4:	f7f3 f974 	bl	8000590 <__aeabi_dmul>
 800d2a8:	a379      	add	r3, pc, #484	@ (adr r3, 800d490 <__ieee754_pow+0x740>)
 800d2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ae:	f7f2 ffb9 	bl	8000224 <__adddf3>
 800d2b2:	4622      	mov	r2, r4
 800d2b4:	462b      	mov	r3, r5
 800d2b6:	f7f3 f96b 	bl	8000590 <__aeabi_dmul>
 800d2ba:	a377      	add	r3, pc, #476	@ (adr r3, 800d498 <__ieee754_pow+0x748>)
 800d2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c0:	f7f2 ffb0 	bl	8000224 <__adddf3>
 800d2c4:	4622      	mov	r2, r4
 800d2c6:	462b      	mov	r3, r5
 800d2c8:	f7f3 f962 	bl	8000590 <__aeabi_dmul>
 800d2cc:	a374      	add	r3, pc, #464	@ (adr r3, 800d4a0 <__ieee754_pow+0x750>)
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	f7f2 ffa7 	bl	8000224 <__adddf3>
 800d2d6:	4622      	mov	r2, r4
 800d2d8:	462b      	mov	r3, r5
 800d2da:	f7f3 f959 	bl	8000590 <__aeabi_dmul>
 800d2de:	a372      	add	r3, pc, #456	@ (adr r3, 800d4a8 <__ieee754_pow+0x758>)
 800d2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2e4:	f7f2 ff9e 	bl	8000224 <__adddf3>
 800d2e8:	4622      	mov	r2, r4
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	460f      	mov	r7, r1
 800d2ee:	462b      	mov	r3, r5
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	f7f3 f94c 	bl	8000590 <__aeabi_dmul>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	460b      	mov	r3, r1
 800d2fc:	4630      	mov	r0, r6
 800d2fe:	4639      	mov	r1, r7
 800d300:	f7f3 f946 	bl	8000590 <__aeabi_dmul>
 800d304:	465a      	mov	r2, fp
 800d306:	4604      	mov	r4, r0
 800d308:	460d      	mov	r5, r1
 800d30a:	464b      	mov	r3, r9
 800d30c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d310:	f7f2 ff88 	bl	8000224 <__adddf3>
 800d314:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d318:	f7f3 f93a 	bl	8000590 <__aeabi_dmul>
 800d31c:	4622      	mov	r2, r4
 800d31e:	462b      	mov	r3, r5
 800d320:	f7f2 ff80 	bl	8000224 <__adddf3>
 800d324:	465a      	mov	r2, fp
 800d326:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d32a:	464b      	mov	r3, r9
 800d32c:	4658      	mov	r0, fp
 800d32e:	4649      	mov	r1, r9
 800d330:	f7f3 f92e 	bl	8000590 <__aeabi_dmul>
 800d334:	4b6a      	ldr	r3, [pc, #424]	@ (800d4e0 <__ieee754_pow+0x790>)
 800d336:	2200      	movs	r2, #0
 800d338:	4606      	mov	r6, r0
 800d33a:	460f      	mov	r7, r1
 800d33c:	f7f2 ff72 	bl	8000224 <__adddf3>
 800d340:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d344:	f7f2 ff6e 	bl	8000224 <__adddf3>
 800d348:	46d8      	mov	r8, fp
 800d34a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800d34e:	460d      	mov	r5, r1
 800d350:	465a      	mov	r2, fp
 800d352:	460b      	mov	r3, r1
 800d354:	4640      	mov	r0, r8
 800d356:	4649      	mov	r1, r9
 800d358:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800d35c:	f7f3 f918 	bl	8000590 <__aeabi_dmul>
 800d360:	465c      	mov	r4, fp
 800d362:	4680      	mov	r8, r0
 800d364:	4689      	mov	r9, r1
 800d366:	4b5e      	ldr	r3, [pc, #376]	@ (800d4e0 <__ieee754_pow+0x790>)
 800d368:	2200      	movs	r2, #0
 800d36a:	4620      	mov	r0, r4
 800d36c:	4629      	mov	r1, r5
 800d36e:	f7f2 ff57 	bl	8000220 <__aeabi_dsub>
 800d372:	4632      	mov	r2, r6
 800d374:	463b      	mov	r3, r7
 800d376:	f7f2 ff53 	bl	8000220 <__aeabi_dsub>
 800d37a:	4602      	mov	r2, r0
 800d37c:	460b      	mov	r3, r1
 800d37e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d382:	f7f2 ff4d 	bl	8000220 <__aeabi_dsub>
 800d386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d38a:	f7f3 f901 	bl	8000590 <__aeabi_dmul>
 800d38e:	4622      	mov	r2, r4
 800d390:	4606      	mov	r6, r0
 800d392:	460f      	mov	r7, r1
 800d394:	462b      	mov	r3, r5
 800d396:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d39a:	f7f3 f8f9 	bl	8000590 <__aeabi_dmul>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	4639      	mov	r1, r7
 800d3a6:	f7f2 ff3d 	bl	8000224 <__adddf3>
 800d3aa:	4606      	mov	r6, r0
 800d3ac:	460f      	mov	r7, r1
 800d3ae:	4602      	mov	r2, r0
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	4640      	mov	r0, r8
 800d3b4:	4649      	mov	r1, r9
 800d3b6:	f7f2 ff35 	bl	8000224 <__adddf3>
 800d3ba:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800d3be:	a33c      	add	r3, pc, #240	@ (adr r3, 800d4b0 <__ieee754_pow+0x760>)
 800d3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	f7f3 f8e0 	bl	8000590 <__aeabi_dmul>
 800d3d0:	465c      	mov	r4, fp
 800d3d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d3d6:	4642      	mov	r2, r8
 800d3d8:	464b      	mov	r3, r9
 800d3da:	4620      	mov	r0, r4
 800d3dc:	4629      	mov	r1, r5
 800d3de:	f7f2 ff1f 	bl	8000220 <__aeabi_dsub>
 800d3e2:	4602      	mov	r2, r0
 800d3e4:	460b      	mov	r3, r1
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	4639      	mov	r1, r7
 800d3ea:	f7f2 ff19 	bl	8000220 <__aeabi_dsub>
 800d3ee:	a332      	add	r3, pc, #200	@ (adr r3, 800d4b8 <__ieee754_pow+0x768>)
 800d3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f4:	f7f3 f8cc 	bl	8000590 <__aeabi_dmul>
 800d3f8:	a331      	add	r3, pc, #196	@ (adr r3, 800d4c0 <__ieee754_pow+0x770>)
 800d3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3fe:	4606      	mov	r6, r0
 800d400:	460f      	mov	r7, r1
 800d402:	4620      	mov	r0, r4
 800d404:	4629      	mov	r1, r5
 800d406:	f7f3 f8c3 	bl	8000590 <__aeabi_dmul>
 800d40a:	4602      	mov	r2, r0
 800d40c:	460b      	mov	r3, r1
 800d40e:	4630      	mov	r0, r6
 800d410:	4639      	mov	r1, r7
 800d412:	f7f2 ff07 	bl	8000224 <__adddf3>
 800d416:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d418:	4b32      	ldr	r3, [pc, #200]	@ (800d4e4 <__ieee754_pow+0x794>)
 800d41a:	4413      	add	r3, r2
 800d41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d420:	f7f2 ff00 	bl	8000224 <__adddf3>
 800d424:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d428:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d42a:	f7f3 f847 	bl	80004bc <__aeabi_i2d>
 800d42e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d430:	4b2d      	ldr	r3, [pc, #180]	@ (800d4e8 <__ieee754_pow+0x798>)
 800d432:	4413      	add	r3, r2
 800d434:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d438:	4606      	mov	r6, r0
 800d43a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d43e:	460f      	mov	r7, r1
 800d440:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d444:	f7f2 feee 	bl	8000224 <__adddf3>
 800d448:	4642      	mov	r2, r8
 800d44a:	464b      	mov	r3, r9
 800d44c:	f7f2 feea 	bl	8000224 <__adddf3>
 800d450:	4632      	mov	r2, r6
 800d452:	463b      	mov	r3, r7
 800d454:	f7f2 fee6 	bl	8000224 <__adddf3>
 800d458:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800d45c:	4632      	mov	r2, r6
 800d45e:	463b      	mov	r3, r7
 800d460:	4658      	mov	r0, fp
 800d462:	460d      	mov	r5, r1
 800d464:	f7f2 fedc 	bl	8000220 <__aeabi_dsub>
 800d468:	4642      	mov	r2, r8
 800d46a:	464b      	mov	r3, r9
 800d46c:	f7f2 fed8 	bl	8000220 <__aeabi_dsub>
 800d470:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d474:	f7f2 fed4 	bl	8000220 <__aeabi_dsub>
 800d478:	465c      	mov	r4, fp
 800d47a:	4602      	mov	r2, r0
 800d47c:	e036      	b.n	800d4ec <__ieee754_pow+0x79c>
 800d47e:	bf00      	nop
 800d480:	4a454eef 	.word	0x4a454eef
 800d484:	3fca7e28 	.word	0x3fca7e28
 800d488:	93c9db65 	.word	0x93c9db65
 800d48c:	3fcd864a 	.word	0x3fcd864a
 800d490:	a91d4101 	.word	0xa91d4101
 800d494:	3fd17460 	.word	0x3fd17460
 800d498:	518f264d 	.word	0x518f264d
 800d49c:	3fd55555 	.word	0x3fd55555
 800d4a0:	db6fabff 	.word	0xdb6fabff
 800d4a4:	3fdb6db6 	.word	0x3fdb6db6
 800d4a8:	33333303 	.word	0x33333303
 800d4ac:	3fe33333 	.word	0x3fe33333
 800d4b0:	e0000000 	.word	0xe0000000
 800d4b4:	3feec709 	.word	0x3feec709
 800d4b8:	dc3a03fd 	.word	0xdc3a03fd
 800d4bc:	3feec709 	.word	0x3feec709
 800d4c0:	145b01f5 	.word	0x145b01f5
 800d4c4:	be3e2fe0 	.word	0xbe3e2fe0
 800d4c8:	7ff00000 	.word	0x7ff00000
 800d4cc:	43400000 	.word	0x43400000
 800d4d0:	0003988e 	.word	0x0003988e
 800d4d4:	000bb679 	.word	0x000bb679
 800d4d8:	0800dfb0 	.word	0x0800dfb0
 800d4dc:	3ff00000 	.word	0x3ff00000
 800d4e0:	40080000 	.word	0x40080000
 800d4e4:	0800df90 	.word	0x0800df90
 800d4e8:	0800dfa0 	.word	0x0800dfa0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d4f2:	e5d7      	b.n	800d0a4 <__ieee754_pow+0x354>
 800d4f4:	f04f 0a01 	mov.w	sl, #1
 800d4f8:	e65e      	b.n	800d1b8 <__ieee754_pow+0x468>
 800d4fa:	a3b4      	add	r3, pc, #720	@ (adr r3, 800d7cc <__ieee754_pow+0xa7c>)
 800d4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d500:	4630      	mov	r0, r6
 800d502:	4639      	mov	r1, r7
 800d504:	f7f2 fe8e 	bl	8000224 <__adddf3>
 800d508:	4642      	mov	r2, r8
 800d50a:	e9cd 0100 	strd	r0, r1, [sp]
 800d50e:	464b      	mov	r3, r9
 800d510:	4620      	mov	r0, r4
 800d512:	4629      	mov	r1, r5
 800d514:	f7f2 fe84 	bl	8000220 <__aeabi_dsub>
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d520:	f7f3 fac6 	bl	8000ab0 <__aeabi_dcmpgt>
 800d524:	2800      	cmp	r0, #0
 800d526:	f47f ae00 	bne.w	800d12a <__ieee754_pow+0x3da>
 800d52a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800d52e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800d532:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800d536:	fa43 fa0a 	asr.w	sl, r3, sl
 800d53a:	44da      	add	sl, fp
 800d53c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800d540:	489d      	ldr	r0, [pc, #628]	@ (800d7b8 <__ieee754_pow+0xa68>)
 800d542:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800d546:	4108      	asrs	r0, r1
 800d548:	ea00 030a 	and.w	r3, r0, sl
 800d54c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800d550:	f1c1 0114 	rsb	r1, r1, #20
 800d554:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800d558:	fa4a fa01 	asr.w	sl, sl, r1
 800d55c:	f1bb 0f00 	cmp.w	fp, #0
 800d560:	4640      	mov	r0, r8
 800d562:	4649      	mov	r1, r9
 800d564:	f04f 0200 	mov.w	r2, #0
 800d568:	bfb8      	it	lt
 800d56a:	f1ca 0a00 	rsblt	sl, sl, #0
 800d56e:	f7f2 fe57 	bl	8000220 <__aeabi_dsub>
 800d572:	4680      	mov	r8, r0
 800d574:	4689      	mov	r9, r1
 800d576:	4632      	mov	r2, r6
 800d578:	463b      	mov	r3, r7
 800d57a:	4640      	mov	r0, r8
 800d57c:	4649      	mov	r1, r9
 800d57e:	f7f2 fe51 	bl	8000224 <__adddf3>
 800d582:	2400      	movs	r4, #0
 800d584:	a37c      	add	r3, pc, #496	@ (adr r3, 800d778 <__ieee754_pow+0xa28>)
 800d586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d58a:	4620      	mov	r0, r4
 800d58c:	460d      	mov	r5, r1
 800d58e:	f7f2 ffff 	bl	8000590 <__aeabi_dmul>
 800d592:	4642      	mov	r2, r8
 800d594:	e9cd 0100 	strd	r0, r1, [sp]
 800d598:	464b      	mov	r3, r9
 800d59a:	4620      	mov	r0, r4
 800d59c:	4629      	mov	r1, r5
 800d59e:	f7f2 fe3f 	bl	8000220 <__aeabi_dsub>
 800d5a2:	4602      	mov	r2, r0
 800d5a4:	460b      	mov	r3, r1
 800d5a6:	4630      	mov	r0, r6
 800d5a8:	4639      	mov	r1, r7
 800d5aa:	f7f2 fe39 	bl	8000220 <__aeabi_dsub>
 800d5ae:	a374      	add	r3, pc, #464	@ (adr r3, 800d780 <__ieee754_pow+0xa30>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	f7f2 ffec 	bl	8000590 <__aeabi_dmul>
 800d5b8:	a373      	add	r3, pc, #460	@ (adr r3, 800d788 <__ieee754_pow+0xa38>)
 800d5ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5be:	4680      	mov	r8, r0
 800d5c0:	4689      	mov	r9, r1
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4629      	mov	r1, r5
 800d5c6:	f7f2 ffe3 	bl	8000590 <__aeabi_dmul>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	460b      	mov	r3, r1
 800d5ce:	4640      	mov	r0, r8
 800d5d0:	4649      	mov	r1, r9
 800d5d2:	f7f2 fe27 	bl	8000224 <__adddf3>
 800d5d6:	4604      	mov	r4, r0
 800d5d8:	460d      	mov	r5, r1
 800d5da:	4602      	mov	r2, r0
 800d5dc:	460b      	mov	r3, r1
 800d5de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d5e2:	f7f2 fe1f 	bl	8000224 <__adddf3>
 800d5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ea:	4680      	mov	r8, r0
 800d5ec:	4689      	mov	r9, r1
 800d5ee:	f7f2 fe17 	bl	8000220 <__aeabi_dsub>
 800d5f2:	4602      	mov	r2, r0
 800d5f4:	460b      	mov	r3, r1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	f7f2 fe11 	bl	8000220 <__aeabi_dsub>
 800d5fe:	4642      	mov	r2, r8
 800d600:	4606      	mov	r6, r0
 800d602:	460f      	mov	r7, r1
 800d604:	464b      	mov	r3, r9
 800d606:	4640      	mov	r0, r8
 800d608:	4649      	mov	r1, r9
 800d60a:	f7f2 ffc1 	bl	8000590 <__aeabi_dmul>
 800d60e:	a360      	add	r3, pc, #384	@ (adr r3, 800d790 <__ieee754_pow+0xa40>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	4604      	mov	r4, r0
 800d616:	460d      	mov	r5, r1
 800d618:	f7f2 ffba 	bl	8000590 <__aeabi_dmul>
 800d61c:	a35e      	add	r3, pc, #376	@ (adr r3, 800d798 <__ieee754_pow+0xa48>)
 800d61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d622:	f7f2 fdfd 	bl	8000220 <__aeabi_dsub>
 800d626:	4622      	mov	r2, r4
 800d628:	462b      	mov	r3, r5
 800d62a:	f7f2 ffb1 	bl	8000590 <__aeabi_dmul>
 800d62e:	a35c      	add	r3, pc, #368	@ (adr r3, 800d7a0 <__ieee754_pow+0xa50>)
 800d630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d634:	f7f2 fdf6 	bl	8000224 <__adddf3>
 800d638:	4622      	mov	r2, r4
 800d63a:	462b      	mov	r3, r5
 800d63c:	f7f2 ffa8 	bl	8000590 <__aeabi_dmul>
 800d640:	a359      	add	r3, pc, #356	@ (adr r3, 800d7a8 <__ieee754_pow+0xa58>)
 800d642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d646:	f7f2 fdeb 	bl	8000220 <__aeabi_dsub>
 800d64a:	4622      	mov	r2, r4
 800d64c:	462b      	mov	r3, r5
 800d64e:	f7f2 ff9f 	bl	8000590 <__aeabi_dmul>
 800d652:	a357      	add	r3, pc, #348	@ (adr r3, 800d7b0 <__ieee754_pow+0xa60>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	f7f2 fde4 	bl	8000224 <__adddf3>
 800d65c:	4622      	mov	r2, r4
 800d65e:	462b      	mov	r3, r5
 800d660:	f7f2 ff96 	bl	8000590 <__aeabi_dmul>
 800d664:	4602      	mov	r2, r0
 800d666:	460b      	mov	r3, r1
 800d668:	4640      	mov	r0, r8
 800d66a:	4649      	mov	r1, r9
 800d66c:	f7f2 fdd8 	bl	8000220 <__aeabi_dsub>
 800d670:	4604      	mov	r4, r0
 800d672:	460d      	mov	r5, r1
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	4640      	mov	r0, r8
 800d67a:	4649      	mov	r1, r9
 800d67c:	f7f2 ff88 	bl	8000590 <__aeabi_dmul>
 800d680:	2200      	movs	r2, #0
 800d682:	e9cd 0100 	strd	r0, r1, [sp]
 800d686:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d68a:	4620      	mov	r0, r4
 800d68c:	4629      	mov	r1, r5
 800d68e:	f7f2 fdc7 	bl	8000220 <__aeabi_dsub>
 800d692:	4602      	mov	r2, r0
 800d694:	460b      	mov	r3, r1
 800d696:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d69a:	f7f3 f8a3 	bl	80007e4 <__aeabi_ddiv>
 800d69e:	4632      	mov	r2, r6
 800d6a0:	4604      	mov	r4, r0
 800d6a2:	460d      	mov	r5, r1
 800d6a4:	463b      	mov	r3, r7
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f2 ff71 	bl	8000590 <__aeabi_dmul>
 800d6ae:	4632      	mov	r2, r6
 800d6b0:	463b      	mov	r3, r7
 800d6b2:	f7f2 fdb7 	bl	8000224 <__adddf3>
 800d6b6:	4602      	mov	r2, r0
 800d6b8:	460b      	mov	r3, r1
 800d6ba:	4620      	mov	r0, r4
 800d6bc:	4629      	mov	r1, r5
 800d6be:	f7f2 fdaf 	bl	8000220 <__aeabi_dsub>
 800d6c2:	4642      	mov	r2, r8
 800d6c4:	464b      	mov	r3, r9
 800d6c6:	f7f2 fdab 	bl	8000220 <__aeabi_dsub>
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	493b      	ldr	r1, [pc, #236]	@ (800d7bc <__ieee754_pow+0xa6c>)
 800d6d0:	2000      	movs	r0, #0
 800d6d2:	f7f2 fda5 	bl	8000220 <__aeabi_dsub>
 800d6d6:	ec41 0b10 	vmov	d0, r0, r1
 800d6da:	ee10 3a90 	vmov	r3, s1
 800d6de:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d6e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d6e6:	da30      	bge.n	800d74a <__ieee754_pow+0x9fa>
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	f7ff faad 	bl	800cc48 <scalbn>
 800d6ee:	ec51 0b10 	vmov	r0, r1, d0
 800d6f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d6f6:	f7ff bbd2 	b.w	800ce9e <__ieee754_pow+0x14e>
 800d6fa:	4c31      	ldr	r4, [pc, #196]	@ (800d7c0 <__ieee754_pow+0xa70>)
 800d6fc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d700:	42a3      	cmp	r3, r4
 800d702:	d91a      	bls.n	800d73a <__ieee754_pow+0x9ea>
 800d704:	4b2f      	ldr	r3, [pc, #188]	@ (800d7c4 <__ieee754_pow+0xa74>)
 800d706:	440b      	add	r3, r1
 800d708:	4303      	orrs	r3, r0
 800d70a:	d009      	beq.n	800d720 <__ieee754_pow+0x9d0>
 800d70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d710:	2200      	movs	r2, #0
 800d712:	2300      	movs	r3, #0
 800d714:	f7f3 f9ae 	bl	8000a74 <__aeabi_dcmplt>
 800d718:	3800      	subs	r0, #0
 800d71a:	bf18      	it	ne
 800d71c:	2001      	movne	r0, #1
 800d71e:	e42b      	b.n	800cf78 <__ieee754_pow+0x228>
 800d720:	4642      	mov	r2, r8
 800d722:	464b      	mov	r3, r9
 800d724:	f7f2 fd7c 	bl	8000220 <__aeabi_dsub>
 800d728:	4632      	mov	r2, r6
 800d72a:	463b      	mov	r3, r7
 800d72c:	f7f3 f9b6 	bl	8000a9c <__aeabi_dcmpge>
 800d730:	2800      	cmp	r0, #0
 800d732:	d1eb      	bne.n	800d70c <__ieee754_pow+0x9bc>
 800d734:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800d7d4 <__ieee754_pow+0xa84>
 800d738:	e6f7      	b.n	800d52a <__ieee754_pow+0x7da>
 800d73a:	469a      	mov	sl, r3
 800d73c:	4b22      	ldr	r3, [pc, #136]	@ (800d7c8 <__ieee754_pow+0xa78>)
 800d73e:	459a      	cmp	sl, r3
 800d740:	f63f aef3 	bhi.w	800d52a <__ieee754_pow+0x7da>
 800d744:	f8dd a010 	ldr.w	sl, [sp, #16]
 800d748:	e715      	b.n	800d576 <__ieee754_pow+0x826>
 800d74a:	ec51 0b10 	vmov	r0, r1, d0
 800d74e:	4619      	mov	r1, r3
 800d750:	e7cf      	b.n	800d6f2 <__ieee754_pow+0x9a2>
 800d752:	491a      	ldr	r1, [pc, #104]	@ (800d7bc <__ieee754_pow+0xa6c>)
 800d754:	2000      	movs	r0, #0
 800d756:	f7ff bb18 	b.w	800cd8a <__ieee754_pow+0x3a>
 800d75a:	2000      	movs	r0, #0
 800d75c:	2100      	movs	r1, #0
 800d75e:	f7ff bb14 	b.w	800cd8a <__ieee754_pow+0x3a>
 800d762:	4630      	mov	r0, r6
 800d764:	4639      	mov	r1, r7
 800d766:	f7ff bb10 	b.w	800cd8a <__ieee754_pow+0x3a>
 800d76a:	460c      	mov	r4, r1
 800d76c:	f7ff bb5e 	b.w	800ce2c <__ieee754_pow+0xdc>
 800d770:	2400      	movs	r4, #0
 800d772:	f7ff bb49 	b.w	800ce08 <__ieee754_pow+0xb8>
 800d776:	bf00      	nop
 800d778:	00000000 	.word	0x00000000
 800d77c:	3fe62e43 	.word	0x3fe62e43
 800d780:	fefa39ef 	.word	0xfefa39ef
 800d784:	3fe62e42 	.word	0x3fe62e42
 800d788:	0ca86c39 	.word	0x0ca86c39
 800d78c:	be205c61 	.word	0xbe205c61
 800d790:	72bea4d0 	.word	0x72bea4d0
 800d794:	3e663769 	.word	0x3e663769
 800d798:	c5d26bf1 	.word	0xc5d26bf1
 800d79c:	3ebbbd41 	.word	0x3ebbbd41
 800d7a0:	af25de2c 	.word	0xaf25de2c
 800d7a4:	3f11566a 	.word	0x3f11566a
 800d7a8:	16bebd93 	.word	0x16bebd93
 800d7ac:	3f66c16c 	.word	0x3f66c16c
 800d7b0:	5555553e 	.word	0x5555553e
 800d7b4:	3fc55555 	.word	0x3fc55555
 800d7b8:	fff00000 	.word	0xfff00000
 800d7bc:	3ff00000 	.word	0x3ff00000
 800d7c0:	4090cbff 	.word	0x4090cbff
 800d7c4:	3f6f3400 	.word	0x3f6f3400
 800d7c8:	3fe00000 	.word	0x3fe00000
 800d7cc:	652b82fe 	.word	0x652b82fe
 800d7d0:	3c971547 	.word	0x3c971547
 800d7d4:	4090cc00 	.word	0x4090cc00

0800d7d8 <fabs>:
 800d7d8:	ec51 0b10 	vmov	r0, r1, d0
 800d7dc:	4602      	mov	r2, r0
 800d7de:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800d7e2:	ec43 2b10 	vmov	d0, r2, r3
 800d7e6:	4770      	bx	lr

0800d7e8 <__ieee754_fmodf>:
 800d7e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7ea:	ee10 5a90 	vmov	r5, s1
 800d7ee:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800d7f2:	1e43      	subs	r3, r0, #1
 800d7f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800d7f8:	d206      	bcs.n	800d808 <__ieee754_fmodf+0x20>
 800d7fa:	ee10 3a10 	vmov	r3, s0
 800d7fe:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800d802:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d806:	d304      	bcc.n	800d812 <__ieee754_fmodf+0x2a>
 800d808:	ee60 0a20 	vmul.f32	s1, s0, s1
 800d80c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800d810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d812:	4286      	cmp	r6, r0
 800d814:	dbfc      	blt.n	800d810 <__ieee754_fmodf+0x28>
 800d816:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800d81a:	d105      	bne.n	800d828 <__ieee754_fmodf+0x40>
 800d81c:	4b32      	ldr	r3, [pc, #200]	@ (800d8e8 <__ieee754_fmodf+0x100>)
 800d81e:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800d822:	ed93 0a00 	vldr	s0, [r3]
 800d826:	e7f3      	b.n	800d810 <__ieee754_fmodf+0x28>
 800d828:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800d82c:	d140      	bne.n	800d8b0 <__ieee754_fmodf+0xc8>
 800d82e:	0232      	lsls	r2, r6, #8
 800d830:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800d834:	2a00      	cmp	r2, #0
 800d836:	dc38      	bgt.n	800d8aa <__ieee754_fmodf+0xc2>
 800d838:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800d83c:	d13e      	bne.n	800d8bc <__ieee754_fmodf+0xd4>
 800d83e:	0207      	lsls	r7, r0, #8
 800d840:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800d844:	2f00      	cmp	r7, #0
 800d846:	da36      	bge.n	800d8b6 <__ieee754_fmodf+0xce>
 800d848:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800d84c:	bfb9      	ittee	lt
 800d84e:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800d852:	1a5b      	sublt	r3, r3, r1
 800d854:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800d858:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800d85c:	bfb8      	it	lt
 800d85e:	fa06 f303 	lsllt.w	r3, r6, r3
 800d862:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800d866:	bfb5      	itete	lt
 800d868:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800d86c:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800d870:	1aad      	sublt	r5, r5, r2
 800d872:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800d876:	bfb8      	it	lt
 800d878:	40a8      	lsllt	r0, r5
 800d87a:	1a89      	subs	r1, r1, r2
 800d87c:	1a1d      	subs	r5, r3, r0
 800d87e:	bb01      	cbnz	r1, 800d8c2 <__ieee754_fmodf+0xda>
 800d880:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800d884:	bf38      	it	cc
 800d886:	462b      	movcc	r3, r5
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d0c7      	beq.n	800d81c <__ieee754_fmodf+0x34>
 800d88c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800d890:	db1f      	blt.n	800d8d2 <__ieee754_fmodf+0xea>
 800d892:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800d896:	db1f      	blt.n	800d8d8 <__ieee754_fmodf+0xf0>
 800d898:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800d89c:	327f      	adds	r2, #127	@ 0x7f
 800d89e:	4323      	orrs	r3, r4
 800d8a0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d8a4:	ee00 3a10 	vmov	s0, r3
 800d8a8:	e7b2      	b.n	800d810 <__ieee754_fmodf+0x28>
 800d8aa:	3901      	subs	r1, #1
 800d8ac:	0052      	lsls	r2, r2, #1
 800d8ae:	e7c1      	b.n	800d834 <__ieee754_fmodf+0x4c>
 800d8b0:	15f1      	asrs	r1, r6, #23
 800d8b2:	397f      	subs	r1, #127	@ 0x7f
 800d8b4:	e7c0      	b.n	800d838 <__ieee754_fmodf+0x50>
 800d8b6:	3a01      	subs	r2, #1
 800d8b8:	007f      	lsls	r7, r7, #1
 800d8ba:	e7c3      	b.n	800d844 <__ieee754_fmodf+0x5c>
 800d8bc:	15c2      	asrs	r2, r0, #23
 800d8be:	3a7f      	subs	r2, #127	@ 0x7f
 800d8c0:	e7c2      	b.n	800d848 <__ieee754_fmodf+0x60>
 800d8c2:	2d00      	cmp	r5, #0
 800d8c4:	da02      	bge.n	800d8cc <__ieee754_fmodf+0xe4>
 800d8c6:	005b      	lsls	r3, r3, #1
 800d8c8:	3901      	subs	r1, #1
 800d8ca:	e7d7      	b.n	800d87c <__ieee754_fmodf+0x94>
 800d8cc:	d0a6      	beq.n	800d81c <__ieee754_fmodf+0x34>
 800d8ce:	006b      	lsls	r3, r5, #1
 800d8d0:	e7fa      	b.n	800d8c8 <__ieee754_fmodf+0xe0>
 800d8d2:	005b      	lsls	r3, r3, #1
 800d8d4:	3a01      	subs	r2, #1
 800d8d6:	e7d9      	b.n	800d88c <__ieee754_fmodf+0xa4>
 800d8d8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800d8dc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800d8e0:	3282      	adds	r2, #130	@ 0x82
 800d8e2:	4113      	asrs	r3, r2
 800d8e4:	4323      	orrs	r3, r4
 800d8e6:	e7dd      	b.n	800d8a4 <__ieee754_fmodf+0xbc>
 800d8e8:	0800dfc0 	.word	0x0800dfc0

0800d8ec <with_errno>:
 800d8ec:	b510      	push	{r4, lr}
 800d8ee:	ed2d 8b02 	vpush	{d8}
 800d8f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d8f6:	eef0 8a60 	vmov.f32	s17, s1
 800d8fa:	4604      	mov	r4, r0
 800d8fc:	f000 fa30 	bl	800dd60 <__errno>
 800d900:	eeb0 0a48 	vmov.f32	s0, s16
 800d904:	eef0 0a68 	vmov.f32	s1, s17
 800d908:	ecbd 8b02 	vpop	{d8}
 800d90c:	6004      	str	r4, [r0, #0]
 800d90e:	bd10      	pop	{r4, pc}

0800d910 <xflow>:
 800d910:	4603      	mov	r3, r0
 800d912:	b507      	push	{r0, r1, r2, lr}
 800d914:	ec51 0b10 	vmov	r0, r1, d0
 800d918:	b183      	cbz	r3, 800d93c <xflow+0x2c>
 800d91a:	4602      	mov	r2, r0
 800d91c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d920:	e9cd 2300 	strd	r2, r3, [sp]
 800d924:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d928:	f7f2 fe32 	bl	8000590 <__aeabi_dmul>
 800d92c:	ec41 0b10 	vmov	d0, r0, r1
 800d930:	2022      	movs	r0, #34	@ 0x22
 800d932:	b003      	add	sp, #12
 800d934:	f85d eb04 	ldr.w	lr, [sp], #4
 800d938:	f7ff bfd8 	b.w	800d8ec <with_errno>
 800d93c:	4602      	mov	r2, r0
 800d93e:	460b      	mov	r3, r1
 800d940:	e7ee      	b.n	800d920 <xflow+0x10>
 800d942:	0000      	movs	r0, r0
 800d944:	0000      	movs	r0, r0
	...

0800d948 <__math_uflow>:
 800d948:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d950 <__math_uflow+0x8>
 800d94c:	f7ff bfe0 	b.w	800d910 <xflow>
 800d950:	00000000 	.word	0x00000000
 800d954:	10000000 	.word	0x10000000

0800d958 <__math_oflow>:
 800d958:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800d960 <__math_oflow+0x8>
 800d95c:	f7ff bfd8 	b.w	800d910 <xflow>
 800d960:	00000000 	.word	0x00000000
 800d964:	70000000 	.word	0x70000000

0800d968 <__ieee754_sqrt>:
 800d968:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d96c:	4a68      	ldr	r2, [pc, #416]	@ (800db10 <__ieee754_sqrt+0x1a8>)
 800d96e:	ec55 4b10 	vmov	r4, r5, d0
 800d972:	43aa      	bics	r2, r5
 800d974:	462b      	mov	r3, r5
 800d976:	4621      	mov	r1, r4
 800d978:	d110      	bne.n	800d99c <__ieee754_sqrt+0x34>
 800d97a:	4622      	mov	r2, r4
 800d97c:	4620      	mov	r0, r4
 800d97e:	4629      	mov	r1, r5
 800d980:	f7f2 fe06 	bl	8000590 <__aeabi_dmul>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4620      	mov	r0, r4
 800d98a:	4629      	mov	r1, r5
 800d98c:	f7f2 fc4a 	bl	8000224 <__adddf3>
 800d990:	4604      	mov	r4, r0
 800d992:	460d      	mov	r5, r1
 800d994:	ec45 4b10 	vmov	d0, r4, r5
 800d998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d99c:	2d00      	cmp	r5, #0
 800d99e:	dc0e      	bgt.n	800d9be <__ieee754_sqrt+0x56>
 800d9a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800d9a4:	4322      	orrs	r2, r4
 800d9a6:	d0f5      	beq.n	800d994 <__ieee754_sqrt+0x2c>
 800d9a8:	b19d      	cbz	r5, 800d9d2 <__ieee754_sqrt+0x6a>
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	4629      	mov	r1, r5
 800d9b0:	f7f2 fc36 	bl	8000220 <__aeabi_dsub>
 800d9b4:	4602      	mov	r2, r0
 800d9b6:	460b      	mov	r3, r1
 800d9b8:	f7f2 ff14 	bl	80007e4 <__aeabi_ddiv>
 800d9bc:	e7e8      	b.n	800d990 <__ieee754_sqrt+0x28>
 800d9be:	152a      	asrs	r2, r5, #20
 800d9c0:	d115      	bne.n	800d9ee <__ieee754_sqrt+0x86>
 800d9c2:	2000      	movs	r0, #0
 800d9c4:	e009      	b.n	800d9da <__ieee754_sqrt+0x72>
 800d9c6:	0acb      	lsrs	r3, r1, #11
 800d9c8:	3a15      	subs	r2, #21
 800d9ca:	0549      	lsls	r1, r1, #21
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d0fa      	beq.n	800d9c6 <__ieee754_sqrt+0x5e>
 800d9d0:	e7f7      	b.n	800d9c2 <__ieee754_sqrt+0x5a>
 800d9d2:	462a      	mov	r2, r5
 800d9d4:	e7fa      	b.n	800d9cc <__ieee754_sqrt+0x64>
 800d9d6:	005b      	lsls	r3, r3, #1
 800d9d8:	3001      	adds	r0, #1
 800d9da:	02dc      	lsls	r4, r3, #11
 800d9dc:	d5fb      	bpl.n	800d9d6 <__ieee754_sqrt+0x6e>
 800d9de:	1e44      	subs	r4, r0, #1
 800d9e0:	1b12      	subs	r2, r2, r4
 800d9e2:	f1c0 0420 	rsb	r4, r0, #32
 800d9e6:	fa21 f404 	lsr.w	r4, r1, r4
 800d9ea:	4323      	orrs	r3, r4
 800d9ec:	4081      	lsls	r1, r0
 800d9ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800d9f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d9fa:	07d2      	lsls	r2, r2, #31
 800d9fc:	bf5c      	itt	pl
 800d9fe:	005b      	lslpl	r3, r3, #1
 800da00:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800da04:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800da08:	bf58      	it	pl
 800da0a:	0049      	lslpl	r1, r1, #1
 800da0c:	2600      	movs	r6, #0
 800da0e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800da12:	106d      	asrs	r5, r5, #1
 800da14:	0049      	lsls	r1, r1, #1
 800da16:	2016      	movs	r0, #22
 800da18:	4632      	mov	r2, r6
 800da1a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800da1e:	1917      	adds	r7, r2, r4
 800da20:	429f      	cmp	r7, r3
 800da22:	bfde      	ittt	le
 800da24:	193a      	addle	r2, r7, r4
 800da26:	1bdb      	suble	r3, r3, r7
 800da28:	1936      	addle	r6, r6, r4
 800da2a:	0fcf      	lsrs	r7, r1, #31
 800da2c:	3801      	subs	r0, #1
 800da2e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800da32:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da36:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800da3a:	d1f0      	bne.n	800da1e <__ieee754_sqrt+0xb6>
 800da3c:	4604      	mov	r4, r0
 800da3e:	2720      	movs	r7, #32
 800da40:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800da44:	429a      	cmp	r2, r3
 800da46:	eb00 0e0c 	add.w	lr, r0, ip
 800da4a:	db02      	blt.n	800da52 <__ieee754_sqrt+0xea>
 800da4c:	d113      	bne.n	800da76 <__ieee754_sqrt+0x10e>
 800da4e:	458e      	cmp	lr, r1
 800da50:	d811      	bhi.n	800da76 <__ieee754_sqrt+0x10e>
 800da52:	f1be 0f00 	cmp.w	lr, #0
 800da56:	eb0e 000c 	add.w	r0, lr, ip
 800da5a:	da42      	bge.n	800dae2 <__ieee754_sqrt+0x17a>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	db40      	blt.n	800dae2 <__ieee754_sqrt+0x17a>
 800da60:	f102 0801 	add.w	r8, r2, #1
 800da64:	1a9b      	subs	r3, r3, r2
 800da66:	458e      	cmp	lr, r1
 800da68:	bf88      	it	hi
 800da6a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800da6e:	eba1 010e 	sub.w	r1, r1, lr
 800da72:	4464      	add	r4, ip
 800da74:	4642      	mov	r2, r8
 800da76:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800da7a:	3f01      	subs	r7, #1
 800da7c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800da80:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800da84:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800da88:	d1dc      	bne.n	800da44 <__ieee754_sqrt+0xdc>
 800da8a:	4319      	orrs	r1, r3
 800da8c:	d01b      	beq.n	800dac6 <__ieee754_sqrt+0x15e>
 800da8e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800db14 <__ieee754_sqrt+0x1ac>
 800da92:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800db18 <__ieee754_sqrt+0x1b0>
 800da96:	e9da 0100 	ldrd	r0, r1, [sl]
 800da9a:	e9db 2300 	ldrd	r2, r3, [fp]
 800da9e:	f7f2 fbbf 	bl	8000220 <__aeabi_dsub>
 800daa2:	e9da 8900 	ldrd	r8, r9, [sl]
 800daa6:	4602      	mov	r2, r0
 800daa8:	460b      	mov	r3, r1
 800daaa:	4640      	mov	r0, r8
 800daac:	4649      	mov	r1, r9
 800daae:	f7f2 ffeb 	bl	8000a88 <__aeabi_dcmple>
 800dab2:	b140      	cbz	r0, 800dac6 <__ieee754_sqrt+0x15e>
 800dab4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800dab8:	e9da 0100 	ldrd	r0, r1, [sl]
 800dabc:	e9db 2300 	ldrd	r2, r3, [fp]
 800dac0:	d111      	bne.n	800dae6 <__ieee754_sqrt+0x17e>
 800dac2:	3601      	adds	r6, #1
 800dac4:	463c      	mov	r4, r7
 800dac6:	1072      	asrs	r2, r6, #1
 800dac8:	0863      	lsrs	r3, r4, #1
 800daca:	07f1      	lsls	r1, r6, #31
 800dacc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800dad0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800dad4:	bf48      	it	mi
 800dad6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800dada:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800dade:	4618      	mov	r0, r3
 800dae0:	e756      	b.n	800d990 <__ieee754_sqrt+0x28>
 800dae2:	4690      	mov	r8, r2
 800dae4:	e7be      	b.n	800da64 <__ieee754_sqrt+0xfc>
 800dae6:	f7f2 fb9d 	bl	8000224 <__adddf3>
 800daea:	e9da 8900 	ldrd	r8, r9, [sl]
 800daee:	4602      	mov	r2, r0
 800daf0:	460b      	mov	r3, r1
 800daf2:	4640      	mov	r0, r8
 800daf4:	4649      	mov	r1, r9
 800daf6:	f7f2 ffbd 	bl	8000a74 <__aeabi_dcmplt>
 800dafa:	b120      	cbz	r0, 800db06 <__ieee754_sqrt+0x19e>
 800dafc:	1ca0      	adds	r0, r4, #2
 800dafe:	bf08      	it	eq
 800db00:	3601      	addeq	r6, #1
 800db02:	3402      	adds	r4, #2
 800db04:	e7df      	b.n	800dac6 <__ieee754_sqrt+0x15e>
 800db06:	1c63      	adds	r3, r4, #1
 800db08:	f023 0401 	bic.w	r4, r3, #1
 800db0c:	e7db      	b.n	800dac6 <__ieee754_sqrt+0x15e>
 800db0e:	bf00      	nop
 800db10:	7ff00000 	.word	0x7ff00000
 800db14:	20000108 	.word	0x20000108
 800db18:	20000100 	.word	0x20000100

0800db1c <abort>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	2006      	movs	r0, #6
 800db20:	f000 f8f2 	bl	800dd08 <raise>
 800db24:	2001      	movs	r0, #1
 800db26:	f7f8 fb53 	bl	80061d0 <_exit>
	...

0800db2c <malloc>:
 800db2c:	4b02      	ldr	r3, [pc, #8]	@ (800db38 <malloc+0xc>)
 800db2e:	4601      	mov	r1, r0
 800db30:	6818      	ldr	r0, [r3, #0]
 800db32:	f000 b82d 	b.w	800db90 <_malloc_r>
 800db36:	bf00      	nop
 800db38:	20000110 	.word	0x20000110

0800db3c <free>:
 800db3c:	4b02      	ldr	r3, [pc, #8]	@ (800db48 <free+0xc>)
 800db3e:	4601      	mov	r1, r0
 800db40:	6818      	ldr	r0, [r3, #0]
 800db42:	f000 b947 	b.w	800ddd4 <_free_r>
 800db46:	bf00      	nop
 800db48:	20000110 	.word	0x20000110

0800db4c <sbrk_aligned>:
 800db4c:	b570      	push	{r4, r5, r6, lr}
 800db4e:	4e0f      	ldr	r6, [pc, #60]	@ (800db8c <sbrk_aligned+0x40>)
 800db50:	460c      	mov	r4, r1
 800db52:	6831      	ldr	r1, [r6, #0]
 800db54:	4605      	mov	r5, r0
 800db56:	b911      	cbnz	r1, 800db5e <sbrk_aligned+0x12>
 800db58:	f000 f8f2 	bl	800dd40 <_sbrk_r>
 800db5c:	6030      	str	r0, [r6, #0]
 800db5e:	4621      	mov	r1, r4
 800db60:	4628      	mov	r0, r5
 800db62:	f000 f8ed 	bl	800dd40 <_sbrk_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d103      	bne.n	800db72 <sbrk_aligned+0x26>
 800db6a:	f04f 34ff 	mov.w	r4, #4294967295
 800db6e:	4620      	mov	r0, r4
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	1cc4      	adds	r4, r0, #3
 800db74:	f024 0403 	bic.w	r4, r4, #3
 800db78:	42a0      	cmp	r0, r4
 800db7a:	d0f8      	beq.n	800db6e <sbrk_aligned+0x22>
 800db7c:	1a21      	subs	r1, r4, r0
 800db7e:	4628      	mov	r0, r5
 800db80:	f000 f8de 	bl	800dd40 <_sbrk_r>
 800db84:	3001      	adds	r0, #1
 800db86:	d1f2      	bne.n	800db6e <sbrk_aligned+0x22>
 800db88:	e7ef      	b.n	800db6a <sbrk_aligned+0x1e>
 800db8a:	bf00      	nop
 800db8c:	20000870 	.word	0x20000870

0800db90 <_malloc_r>:
 800db90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db94:	1ccd      	adds	r5, r1, #3
 800db96:	f025 0503 	bic.w	r5, r5, #3
 800db9a:	3508      	adds	r5, #8
 800db9c:	2d0c      	cmp	r5, #12
 800db9e:	bf38      	it	cc
 800dba0:	250c      	movcc	r5, #12
 800dba2:	2d00      	cmp	r5, #0
 800dba4:	4606      	mov	r6, r0
 800dba6:	db01      	blt.n	800dbac <_malloc_r+0x1c>
 800dba8:	42a9      	cmp	r1, r5
 800dbaa:	d904      	bls.n	800dbb6 <_malloc_r+0x26>
 800dbac:	230c      	movs	r3, #12
 800dbae:	6033      	str	r3, [r6, #0]
 800dbb0:	2000      	movs	r0, #0
 800dbb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc8c <_malloc_r+0xfc>
 800dbba:	f000 f869 	bl	800dc90 <__malloc_lock>
 800dbbe:	f8d8 3000 	ldr.w	r3, [r8]
 800dbc2:	461c      	mov	r4, r3
 800dbc4:	bb44      	cbnz	r4, 800dc18 <_malloc_r+0x88>
 800dbc6:	4629      	mov	r1, r5
 800dbc8:	4630      	mov	r0, r6
 800dbca:	f7ff ffbf 	bl	800db4c <sbrk_aligned>
 800dbce:	1c43      	adds	r3, r0, #1
 800dbd0:	4604      	mov	r4, r0
 800dbd2:	d158      	bne.n	800dc86 <_malloc_r+0xf6>
 800dbd4:	f8d8 4000 	ldr.w	r4, [r8]
 800dbd8:	4627      	mov	r7, r4
 800dbda:	2f00      	cmp	r7, #0
 800dbdc:	d143      	bne.n	800dc66 <_malloc_r+0xd6>
 800dbde:	2c00      	cmp	r4, #0
 800dbe0:	d04b      	beq.n	800dc7a <_malloc_r+0xea>
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	4639      	mov	r1, r7
 800dbe6:	4630      	mov	r0, r6
 800dbe8:	eb04 0903 	add.w	r9, r4, r3
 800dbec:	f000 f8a8 	bl	800dd40 <_sbrk_r>
 800dbf0:	4581      	cmp	r9, r0
 800dbf2:	d142      	bne.n	800dc7a <_malloc_r+0xea>
 800dbf4:	6821      	ldr	r1, [r4, #0]
 800dbf6:	1a6d      	subs	r5, r5, r1
 800dbf8:	4629      	mov	r1, r5
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	f7ff ffa6 	bl	800db4c <sbrk_aligned>
 800dc00:	3001      	adds	r0, #1
 800dc02:	d03a      	beq.n	800dc7a <_malloc_r+0xea>
 800dc04:	6823      	ldr	r3, [r4, #0]
 800dc06:	442b      	add	r3, r5
 800dc08:	6023      	str	r3, [r4, #0]
 800dc0a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc0e:	685a      	ldr	r2, [r3, #4]
 800dc10:	bb62      	cbnz	r2, 800dc6c <_malloc_r+0xdc>
 800dc12:	f8c8 7000 	str.w	r7, [r8]
 800dc16:	e00f      	b.n	800dc38 <_malloc_r+0xa8>
 800dc18:	6822      	ldr	r2, [r4, #0]
 800dc1a:	1b52      	subs	r2, r2, r5
 800dc1c:	d420      	bmi.n	800dc60 <_malloc_r+0xd0>
 800dc1e:	2a0b      	cmp	r2, #11
 800dc20:	d917      	bls.n	800dc52 <_malloc_r+0xc2>
 800dc22:	1961      	adds	r1, r4, r5
 800dc24:	42a3      	cmp	r3, r4
 800dc26:	6025      	str	r5, [r4, #0]
 800dc28:	bf18      	it	ne
 800dc2a:	6059      	strne	r1, [r3, #4]
 800dc2c:	6863      	ldr	r3, [r4, #4]
 800dc2e:	bf08      	it	eq
 800dc30:	f8c8 1000 	streq.w	r1, [r8]
 800dc34:	5162      	str	r2, [r4, r5]
 800dc36:	604b      	str	r3, [r1, #4]
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f000 f82f 	bl	800dc9c <__malloc_unlock>
 800dc3e:	f104 000b 	add.w	r0, r4, #11
 800dc42:	1d23      	adds	r3, r4, #4
 800dc44:	f020 0007 	bic.w	r0, r0, #7
 800dc48:	1ac2      	subs	r2, r0, r3
 800dc4a:	bf1c      	itt	ne
 800dc4c:	1a1b      	subne	r3, r3, r0
 800dc4e:	50a3      	strne	r3, [r4, r2]
 800dc50:	e7af      	b.n	800dbb2 <_malloc_r+0x22>
 800dc52:	6862      	ldr	r2, [r4, #4]
 800dc54:	42a3      	cmp	r3, r4
 800dc56:	bf0c      	ite	eq
 800dc58:	f8c8 2000 	streq.w	r2, [r8]
 800dc5c:	605a      	strne	r2, [r3, #4]
 800dc5e:	e7eb      	b.n	800dc38 <_malloc_r+0xa8>
 800dc60:	4623      	mov	r3, r4
 800dc62:	6864      	ldr	r4, [r4, #4]
 800dc64:	e7ae      	b.n	800dbc4 <_malloc_r+0x34>
 800dc66:	463c      	mov	r4, r7
 800dc68:	687f      	ldr	r7, [r7, #4]
 800dc6a:	e7b6      	b.n	800dbda <_malloc_r+0x4a>
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	685b      	ldr	r3, [r3, #4]
 800dc70:	42a3      	cmp	r3, r4
 800dc72:	d1fb      	bne.n	800dc6c <_malloc_r+0xdc>
 800dc74:	2300      	movs	r3, #0
 800dc76:	6053      	str	r3, [r2, #4]
 800dc78:	e7de      	b.n	800dc38 <_malloc_r+0xa8>
 800dc7a:	230c      	movs	r3, #12
 800dc7c:	6033      	str	r3, [r6, #0]
 800dc7e:	4630      	mov	r0, r6
 800dc80:	f000 f80c 	bl	800dc9c <__malloc_unlock>
 800dc84:	e794      	b.n	800dbb0 <_malloc_r+0x20>
 800dc86:	6005      	str	r5, [r0, #0]
 800dc88:	e7d6      	b.n	800dc38 <_malloc_r+0xa8>
 800dc8a:	bf00      	nop
 800dc8c:	20000874 	.word	0x20000874

0800dc90 <__malloc_lock>:
 800dc90:	4801      	ldr	r0, [pc, #4]	@ (800dc98 <__malloc_lock+0x8>)
 800dc92:	f000 b88f 	b.w	800ddb4 <__retarget_lock_acquire_recursive>
 800dc96:	bf00      	nop
 800dc98:	200009b4 	.word	0x200009b4

0800dc9c <__malloc_unlock>:
 800dc9c:	4801      	ldr	r0, [pc, #4]	@ (800dca4 <__malloc_unlock+0x8>)
 800dc9e:	f000 b88a 	b.w	800ddb6 <__retarget_lock_release_recursive>
 800dca2:	bf00      	nop
 800dca4:	200009b4 	.word	0x200009b4

0800dca8 <memset>:
 800dca8:	4402      	add	r2, r0
 800dcaa:	4603      	mov	r3, r0
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d100      	bne.n	800dcb2 <memset+0xa>
 800dcb0:	4770      	bx	lr
 800dcb2:	f803 1b01 	strb.w	r1, [r3], #1
 800dcb6:	e7f9      	b.n	800dcac <memset+0x4>

0800dcb8 <_raise_r>:
 800dcb8:	291f      	cmp	r1, #31
 800dcba:	b538      	push	{r3, r4, r5, lr}
 800dcbc:	4605      	mov	r5, r0
 800dcbe:	460c      	mov	r4, r1
 800dcc0:	d904      	bls.n	800dccc <_raise_r+0x14>
 800dcc2:	2316      	movs	r3, #22
 800dcc4:	6003      	str	r3, [r0, #0]
 800dcc6:	f04f 30ff 	mov.w	r0, #4294967295
 800dcca:	bd38      	pop	{r3, r4, r5, pc}
 800dccc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dcce:	b112      	cbz	r2, 800dcd6 <_raise_r+0x1e>
 800dcd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dcd4:	b94b      	cbnz	r3, 800dcea <_raise_r+0x32>
 800dcd6:	4628      	mov	r0, r5
 800dcd8:	f000 f830 	bl	800dd3c <_getpid_r>
 800dcdc:	4622      	mov	r2, r4
 800dcde:	4601      	mov	r1, r0
 800dce0:	4628      	mov	r0, r5
 800dce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dce6:	f000 b817 	b.w	800dd18 <_kill_r>
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d00a      	beq.n	800dd04 <_raise_r+0x4c>
 800dcee:	1c59      	adds	r1, r3, #1
 800dcf0:	d103      	bne.n	800dcfa <_raise_r+0x42>
 800dcf2:	2316      	movs	r3, #22
 800dcf4:	6003      	str	r3, [r0, #0]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	e7e7      	b.n	800dcca <_raise_r+0x12>
 800dcfa:	2100      	movs	r1, #0
 800dcfc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dd00:	4620      	mov	r0, r4
 800dd02:	4798      	blx	r3
 800dd04:	2000      	movs	r0, #0
 800dd06:	e7e0      	b.n	800dcca <_raise_r+0x12>

0800dd08 <raise>:
 800dd08:	4b02      	ldr	r3, [pc, #8]	@ (800dd14 <raise+0xc>)
 800dd0a:	4601      	mov	r1, r0
 800dd0c:	6818      	ldr	r0, [r3, #0]
 800dd0e:	f7ff bfd3 	b.w	800dcb8 <_raise_r>
 800dd12:	bf00      	nop
 800dd14:	20000110 	.word	0x20000110

0800dd18 <_kill_r>:
 800dd18:	b538      	push	{r3, r4, r5, lr}
 800dd1a:	4d07      	ldr	r5, [pc, #28]	@ (800dd38 <_kill_r+0x20>)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	4604      	mov	r4, r0
 800dd20:	4608      	mov	r0, r1
 800dd22:	4611      	mov	r1, r2
 800dd24:	602b      	str	r3, [r5, #0]
 800dd26:	f7f8 fa43 	bl	80061b0 <_kill>
 800dd2a:	1c43      	adds	r3, r0, #1
 800dd2c:	d102      	bne.n	800dd34 <_kill_r+0x1c>
 800dd2e:	682b      	ldr	r3, [r5, #0]
 800dd30:	b103      	cbz	r3, 800dd34 <_kill_r+0x1c>
 800dd32:	6023      	str	r3, [r4, #0]
 800dd34:	bd38      	pop	{r3, r4, r5, pc}
 800dd36:	bf00      	nop
 800dd38:	200009b0 	.word	0x200009b0

0800dd3c <_getpid_r>:
 800dd3c:	f7f8 ba30 	b.w	80061a0 <_getpid>

0800dd40 <_sbrk_r>:
 800dd40:	b538      	push	{r3, r4, r5, lr}
 800dd42:	4d06      	ldr	r5, [pc, #24]	@ (800dd5c <_sbrk_r+0x1c>)
 800dd44:	2300      	movs	r3, #0
 800dd46:	4604      	mov	r4, r0
 800dd48:	4608      	mov	r0, r1
 800dd4a:	602b      	str	r3, [r5, #0]
 800dd4c:	f7f8 fa4c 	bl	80061e8 <_sbrk>
 800dd50:	1c43      	adds	r3, r0, #1
 800dd52:	d102      	bne.n	800dd5a <_sbrk_r+0x1a>
 800dd54:	682b      	ldr	r3, [r5, #0]
 800dd56:	b103      	cbz	r3, 800dd5a <_sbrk_r+0x1a>
 800dd58:	6023      	str	r3, [r4, #0]
 800dd5a:	bd38      	pop	{r3, r4, r5, pc}
 800dd5c:	200009b0 	.word	0x200009b0

0800dd60 <__errno>:
 800dd60:	4b01      	ldr	r3, [pc, #4]	@ (800dd68 <__errno+0x8>)
 800dd62:	6818      	ldr	r0, [r3, #0]
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	20000110 	.word	0x20000110

0800dd6c <__libc_init_array>:
 800dd6c:	b570      	push	{r4, r5, r6, lr}
 800dd6e:	4d0d      	ldr	r5, [pc, #52]	@ (800dda4 <__libc_init_array+0x38>)
 800dd70:	4c0d      	ldr	r4, [pc, #52]	@ (800dda8 <__libc_init_array+0x3c>)
 800dd72:	1b64      	subs	r4, r4, r5
 800dd74:	10a4      	asrs	r4, r4, #2
 800dd76:	2600      	movs	r6, #0
 800dd78:	42a6      	cmp	r6, r4
 800dd7a:	d109      	bne.n	800dd90 <__libc_init_array+0x24>
 800dd7c:	4d0b      	ldr	r5, [pc, #44]	@ (800ddac <__libc_init_array+0x40>)
 800dd7e:	4c0c      	ldr	r4, [pc, #48]	@ (800ddb0 <__libc_init_array+0x44>)
 800dd80:	f000 f872 	bl	800de68 <_init>
 800dd84:	1b64      	subs	r4, r4, r5
 800dd86:	10a4      	asrs	r4, r4, #2
 800dd88:	2600      	movs	r6, #0
 800dd8a:	42a6      	cmp	r6, r4
 800dd8c:	d105      	bne.n	800dd9a <__libc_init_array+0x2e>
 800dd8e:	bd70      	pop	{r4, r5, r6, pc}
 800dd90:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd94:	4798      	blx	r3
 800dd96:	3601      	adds	r6, #1
 800dd98:	e7ee      	b.n	800dd78 <__libc_init_array+0xc>
 800dd9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9e:	4798      	blx	r3
 800dda0:	3601      	adds	r6, #1
 800dda2:	e7f2      	b.n	800dd8a <__libc_init_array+0x1e>
 800dda4:	0800dfd0 	.word	0x0800dfd0
 800dda8:	0800dfd0 	.word	0x0800dfd0
 800ddac:	0800dfd0 	.word	0x0800dfd0
 800ddb0:	0800dfdc 	.word	0x0800dfdc

0800ddb4 <__retarget_lock_acquire_recursive>:
 800ddb4:	4770      	bx	lr

0800ddb6 <__retarget_lock_release_recursive>:
 800ddb6:	4770      	bx	lr

0800ddb8 <memcpy>:
 800ddb8:	440a      	add	r2, r1
 800ddba:	4291      	cmp	r1, r2
 800ddbc:	f100 33ff 	add.w	r3, r0, #4294967295
 800ddc0:	d100      	bne.n	800ddc4 <memcpy+0xc>
 800ddc2:	4770      	bx	lr
 800ddc4:	b510      	push	{r4, lr}
 800ddc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ddca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ddce:	4291      	cmp	r1, r2
 800ddd0:	d1f9      	bne.n	800ddc6 <memcpy+0xe>
 800ddd2:	bd10      	pop	{r4, pc}

0800ddd4 <_free_r>:
 800ddd4:	b538      	push	{r3, r4, r5, lr}
 800ddd6:	4605      	mov	r5, r0
 800ddd8:	2900      	cmp	r1, #0
 800ddda:	d041      	beq.n	800de60 <_free_r+0x8c>
 800dddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dde0:	1f0c      	subs	r4, r1, #4
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	bfb8      	it	lt
 800dde6:	18e4      	addlt	r4, r4, r3
 800dde8:	f7ff ff52 	bl	800dc90 <__malloc_lock>
 800ddec:	4a1d      	ldr	r2, [pc, #116]	@ (800de64 <_free_r+0x90>)
 800ddee:	6813      	ldr	r3, [r2, #0]
 800ddf0:	b933      	cbnz	r3, 800de00 <_free_r+0x2c>
 800ddf2:	6063      	str	r3, [r4, #4]
 800ddf4:	6014      	str	r4, [r2, #0]
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddfc:	f7ff bf4e 	b.w	800dc9c <__malloc_unlock>
 800de00:	42a3      	cmp	r3, r4
 800de02:	d908      	bls.n	800de16 <_free_r+0x42>
 800de04:	6820      	ldr	r0, [r4, #0]
 800de06:	1821      	adds	r1, r4, r0
 800de08:	428b      	cmp	r3, r1
 800de0a:	bf01      	itttt	eq
 800de0c:	6819      	ldreq	r1, [r3, #0]
 800de0e:	685b      	ldreq	r3, [r3, #4]
 800de10:	1809      	addeq	r1, r1, r0
 800de12:	6021      	streq	r1, [r4, #0]
 800de14:	e7ed      	b.n	800ddf2 <_free_r+0x1e>
 800de16:	461a      	mov	r2, r3
 800de18:	685b      	ldr	r3, [r3, #4]
 800de1a:	b10b      	cbz	r3, 800de20 <_free_r+0x4c>
 800de1c:	42a3      	cmp	r3, r4
 800de1e:	d9fa      	bls.n	800de16 <_free_r+0x42>
 800de20:	6811      	ldr	r1, [r2, #0]
 800de22:	1850      	adds	r0, r2, r1
 800de24:	42a0      	cmp	r0, r4
 800de26:	d10b      	bne.n	800de40 <_free_r+0x6c>
 800de28:	6820      	ldr	r0, [r4, #0]
 800de2a:	4401      	add	r1, r0
 800de2c:	1850      	adds	r0, r2, r1
 800de2e:	4283      	cmp	r3, r0
 800de30:	6011      	str	r1, [r2, #0]
 800de32:	d1e0      	bne.n	800ddf6 <_free_r+0x22>
 800de34:	6818      	ldr	r0, [r3, #0]
 800de36:	685b      	ldr	r3, [r3, #4]
 800de38:	6053      	str	r3, [r2, #4]
 800de3a:	4408      	add	r0, r1
 800de3c:	6010      	str	r0, [r2, #0]
 800de3e:	e7da      	b.n	800ddf6 <_free_r+0x22>
 800de40:	d902      	bls.n	800de48 <_free_r+0x74>
 800de42:	230c      	movs	r3, #12
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	e7d6      	b.n	800ddf6 <_free_r+0x22>
 800de48:	6820      	ldr	r0, [r4, #0]
 800de4a:	1821      	adds	r1, r4, r0
 800de4c:	428b      	cmp	r3, r1
 800de4e:	bf04      	itt	eq
 800de50:	6819      	ldreq	r1, [r3, #0]
 800de52:	685b      	ldreq	r3, [r3, #4]
 800de54:	6063      	str	r3, [r4, #4]
 800de56:	bf04      	itt	eq
 800de58:	1809      	addeq	r1, r1, r0
 800de5a:	6021      	streq	r1, [r4, #0]
 800de5c:	6054      	str	r4, [r2, #4]
 800de5e:	e7ca      	b.n	800ddf6 <_free_r+0x22>
 800de60:	bd38      	pop	{r3, r4, r5, pc}
 800de62:	bf00      	nop
 800de64:	20000874 	.word	0x20000874

0800de68 <_init>:
 800de68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de6a:	bf00      	nop
 800de6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de6e:	bc08      	pop	{r3}
 800de70:	469e      	mov	lr, r3
 800de72:	4770      	bx	lr

0800de74 <_fini>:
 800de74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de76:	bf00      	nop
 800de78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de7a:	bc08      	pop	{r3}
 800de7c:	469e      	mov	lr, r3
 800de7e:	4770      	bx	lr
