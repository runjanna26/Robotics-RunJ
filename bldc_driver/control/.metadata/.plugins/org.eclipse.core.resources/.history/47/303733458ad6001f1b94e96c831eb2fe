/*
 * simpleFOC.cpp
 *
 *  Created on: May 19, 2024
 *      Author: runj
 */

#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
{

}

simpleFOC::~simpleFOC() 
{
	// TODO Auto-generated destructor stub
}

void simpleFOC::initSensors()
{
	driver.initDriver();
	Encoder.MagneticSensorSPI_init();
	Encoder.Sensor_init();
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
	CurrentSensor.calibrateOffsets();
}

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
	return 0;
}

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
	float limit_volt = voltage_limit;
	velocity_limit = velocity_index_search;
	voltage_limit = voltage_sensor_align;
	shaft_angle = 0;
	while (needsSearch() && shaft_angle < _2PI) 
	{
		angleOpenloop(1.5 * _2PI);
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
	}
	driver.setPhaseVoltage(0, 0, 0);

	// re-init the limits
	velocity_limit = limit_vel;
	voltage_limit = limit_volt;
	return !needsSearch();
}

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
	int exit_flag = 1; //success
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
			exit_flag = absoluteZeroSearch(); // o
		if (!exit_flag)
			return exit_flag;

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
			HAL_Delay(2);
		}
		Encoder.updateSensor();
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
			HAL_Delay(2);
		}
		Encoder.updateSensor();
		float end_angle = Encoder.get_full_rotation_angle();
		driver.setPhaseVoltage(0, 0, 0);
		HAL_Delay(200);
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
		{
			return 0; // failed calibration
		} else if (mid_angle < end_angle) 
		{
			Encoder.sensor_direction = CCW;
		} else {
			Encoder.sensor_direction = CW;
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
		HAL_Delay(700);
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
		HAL_Delay(20);
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
		HAL_Delay(200);
	}
	return exit_flag;
}

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
	int exit_flag = 1;
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
	HAL_Delay(500);

	return exit_flag;
}



void simpleFOC::loopFOC() 
{
	Encoder.updateSensor();
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);

	current_LPF.q = LPF_current_q(current.q);   // filter values
	current_LPF.d = LPF_current_d(current.d);   // filter values

//	 calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current_LPF.q);
	voltage.d = PID_current_d(0 - current_LPF.d);

//	 set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
}


void simpleFOC::move_torque(float new_target)
{
	current_sp = new_target; // if current/foc_current torque control
}

// Iterative function running outer loop of the FOC algorithm
// Behavior of this function is determined by the motor.controller variable
// It runs either angle, velocity or torque loop
// - needs to be called iteratively it is asynchronous function
// - if target is not set it uses motor.target value
void simpleFOC::move_velocity(float new_target)
{
// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated

	if (_isset(new_target))
		target = new_target;

	// velocity set point
	shaft_velocity_sp = target;

	// calculate the torque command
	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);

	voltage.q = current_sp*phase_resistance;
	voltage.d = 0;
}

void simpleFOC::move_angle(float new_target, float kp, float kd, float tau_ff)
{
	// get angular velocity
	shaft_velocity = Encoder.getShaftVelocity(); // read value even if motor is disabled to keep the monitoring updated // checked

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
		  target = new_target;


//	PID_position.P = kp;
//	PID_position.D = kd;


	// angle set point
	shaft_angle_sp = target;
	// calculate velocity set point
	current_sp = PID_position(shaft_angle_sp - shaft_angle) ;

//	// calculate the torque command
//	current_sp = PID_velocity(current_sp - shaft_velocity);

	voltage.q = current_sp*phase_resistance;
	voltage.d = 0;
}


// Function (iterative) generating open loop movement for target velocity
// - target_velocity - rad/s
// it uses voltage_limit variable
float simpleFOC::velocityOpenloop(float target_velocity) 
{
	// get current timestamp
	unsigned long now_us = micros();
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
		Ts = 1e-3;

	// calculate the necessary angle to achieve target velocity
	shaft_angle = _normalizeAngle(shaft_angle + target_velocity * Ts);
	// for display purposes
	shaft_velocity = target_velocity;

	// use voltage limit or current limit
	float Uq = voltage_limit;  //24V
    if(_isset(phase_resistance))
    	Uq =  current_limit*phase_resistance;
//  voltage_sensor_align
	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));

	// save timestamp for next call
	open_loop_timestamp = now_us;

	return Uq;
}

void simpleFOC::move_velocity_openloop(float target) 
{
	shaft_velocity_sp = target;
	voltage.q = velocityOpenloop(shaft_velocity_sp); // returns the voltage that is set to the motor
	voltage.d = 0;
}

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
	unsigned long now_us = micros();
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
		Ts = 1e-3;

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
		shaft_velocity = velocity_limit;
	}
	else
	{
		shaft_angle = target_angle;
		shaft_velocity = 0;
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
	if(_isset(phase_resistance))
		Uq =  current_limit*phase_resistance;

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));

	open_loop_timestamp = now_us;
	return Uq;
}

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
}

void simpleFOC::readEncoderOnly(){
	Encoder.updateSensor();
}
