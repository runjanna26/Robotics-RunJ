
bldc_driver_controller_runj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d990  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  0800db70  0800db70  0000eb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dcfc  0800dcfc  0000f134  2**0
                  CONTENTS
  4 .ARM          00000008  0800dcfc  0800dcfc  0000ecfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dd04  0800dd04  0000f134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800dd04  0800dd04  0000ed04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800dd10  0800dd10  0000ed10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000134  20000000  0800dd18  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000808  20000138  0800de4c  0000f138  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000940  0800de4c  0000f940  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY
 12 .debug_info   000324aa  00000000  00000000  0000f164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006045  00000000  00000000  0004160e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d88  00000000  00000000  00047658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001697  00000000  00000000  000493e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029bd2  00000000  00000000  0004aa77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000284ef  00000000  00000000  00074649  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f12a5  00000000  00000000  0009cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018dddd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d88  00000000  00000000  0018de20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  00196ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000138 	.word	0x20000138
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800db58 	.word	0x0800db58

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000013c 	.word	0x2000013c
 800021c:	0800db58 	.word	0x0800db58

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c46:	eef0 7ae7 	vabs.f32	s15, s15
 8000c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <_ZN17AS5048A_interfaceC1Ev>:
	    .command_parity_bit = 15
};



AS5048A_interface::AS5048A_interface() {
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	4a2e      	ldr	r2, [pc, #184]	@ (8000d1c <_ZN17AS5048A_interfaceC1Ev+0xc4>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	f04f 0200 	mov.w	r2, #0
 8000c6c:	61da      	str	r2, [r3, #28]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2200      	movs	r2, #0
 8000c72:	621a      	str	r2, [r3, #32]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f04f 0200 	mov.w	r2, #0
 8000c7a:	625a      	str	r2, [r3, #36]	@ 0x24
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	f04f 0200 	mov.w	r2, #0
 8000c88:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	f04f 0200 	mov.w	r2, #0
 8000c90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	635a      	str	r2, [r3, #52]	@ 0x34
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f04f 0200 	mov.w	r2, #0
 8000cac:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <_ZN17AS5048A_interfaceC1Ev+0xc8>)
 8000cb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d24 <_ZN17AS5048A_interfaceC1Ev+0xcc>)
 8000cb8:	649a      	str	r2, [r3, #72]	@ 0x48
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	334c      	adds	r3, #76	@ 0x4c
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fd8e 	bl	80017e4 <_ZN3EKFC1Eii>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <_ZN17AS5048A_interfaceC1Ev+0xd0>)
 8000ccc:	3360      	adds	r3, #96	@ 0x60
 8000cce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000cd2:	e883 0003 	stmia.w	r3, {r0, r1}
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a14      	ldr	r2, [pc, #80]	@ (8000d2c <_ZN17AS5048A_interfaceC1Ev+0xd4>)
 8000cda:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8000cde:	4613      	mov	r3, r2
 8000ce0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ce2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a11      	ldr	r2, [pc, #68]	@ (8000d30 <_ZN17AS5048A_interfaceC1Ev+0xd8>)
 8000cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <_ZN17AS5048A_interfaceC1Ev+0xdc>)
 8000cf2:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8000d04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
	// TODO Auto-generated constructor stub

}
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4618      	mov	r0, r3
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd90      	pop	{r4, r7, pc}
 8000d1c:	0800dc28 	.word	0x0800dc28
 8000d20:	c640e400 	.word	0xc640e400
 8000d24:	ffffcfc7 	.word	0xffffcfc7
 8000d28:	0800db70 	.word	0x0800db70
 8000d2c:	0800db78 	.word	0x0800db78
 8000d30:	3089705f 	.word	0x3089705f
 8000d34:	0800db88 	.word	0x0800db88

08000d38 <_ZN17AS5048A_interfaceD1Ev>:

AS5048A_interface::~AS5048A_interface() {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	4a06      	ldr	r2, [pc, #24]	@ (8000d5c <_ZN17AS5048A_interfaceD1Ev+0x24>)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	334c      	adds	r3, #76	@ 0x4c
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fd62 	bl	8001814 <_ZN3EKFD1Ev>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	0800dc28 	.word	0x0800dc28

08000d60 <_ZN17AS5048A_interfaceD0Ev>:
AS5048A_interface::~AS5048A_interface() {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
}
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ffe5 	bl	8000d38 <_ZN17AS5048A_interfaceD1Ev>
 8000d6e:	21ac      	movs	r1, #172	@ 0xac
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f00a fe91 	bl	800ba98 <_ZdlPvj>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>:

/**
 * @brief Initialize SPI for Magnetic Sensor with AS5048A_SPI
*/
void AS5048A_interface::MagneticSensorSPI_init() 
{
 8000d80:	b5b0      	push	{r4, r5, r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
	struct MagneticSensorSPIConfig_s config = AS5048A_SPI;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x74>)
 8000d8a:	f107 040c 	add.w	r4, r7, #12
 8000d8e:	461d      	mov	r5, r3
 8000d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d94:	682b      	ldr	r3, [r5, #0]
 8000d96:	6023      	str	r3, [r4, #0]
	// angle read register of the magnetic sensor
	angle_register = config.angle_registers ? config.angle_registers : DEF_ANGLE_REGISTER;
 8000d98:	693b      	ldr	r3, [r7, #16]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x22>
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	e001      	b.n	8000da6 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv+0x26>
 8000da2:	f643 73ff 	movw	r3, #16383	@ 0x3fff
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6193      	str	r3, [r2, #24]
	// register maximum value (counts per revolution)
	cpr = pow(2, config.bit_resolution);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4619      	mov	r1, r3
 8000dae:	2002      	movs	r0, #2
 8000db0:	f000 fa76 	bl	80012a0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8000db4:	ec53 2b10 	vmov	r2, r3, d0
 8000db8:	4610      	mov	r0, r2
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f7ff feec 	bl	8000b98 <__aeabi_d2f>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	605a      	str	r2, [r3, #4]
	bit_resolution = config.bit_resolution;
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	609a      	str	r2, [r3, #8]

	command_parity_bit = config.command_parity_bit; 	// for backwards compatibility
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	60da      	str	r2, [r3, #12]
	command_rw_bit = config.command_rw_bit; 			// for backwards compatibility
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	611a      	str	r2, [r3, #16]
	data_start_bit = config.data_start_bit; 			// for backwards compatibility
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	615a      	str	r2, [r3, #20]

	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2110      	movs	r1, #16
 8000de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de6:	f007 fe03 	bl	80089f0 <HAL_GPIO_WritePin>
}
 8000dea:	bf00      	nop
 8000dec:	3720      	adds	r7, #32
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bdb0      	pop	{r4, r5, r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000000 	.word	0x20000000

08000df8 <_ZN17AS5048A_interface11Sensor_initEv>:

/**
 * @brief Initialize the variable of encoder
*/
void AS5048A_interface::Sensor_init()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	// initialize all the internal variables of Sensor to ensure a "smooth" startup (without a 'jump' from zero)
	getSensorAngle(); 
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f8cb 	bl	8000f9c <_ZN17AS5048A_interface14getSensorAngleEv>
	vel_angle_prev = getSensorAngle();
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f000 f8c8 	bl	8000f9c <_ZN17AS5048A_interface14getSensorAngleEv>
 8000e0c:	eef0 7a40 	vmov.f32	s15, s0
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	vel_angle_prev_ts = micros();
 8000e16:	f000 f935 	bl	8001084 <_ZN17AS5048A_interface6microsEv>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	629a      	str	r2, [r3, #40]	@ 0x28
	HAL_Delay(1);		// Wait for collecting data
 8000e22:	2001      	movs	r0, #1
 8000e24:	f004 fb84 	bl	8005530 <HAL_Delay>
	getSensorAngle();
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f8b7 	bl	8000f9c <_ZN17AS5048A_interface14getSensorAngleEv>
	angle_prev = getSensorAngle(); 
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 f8b4 	bl	8000f9c <_ZN17AS5048A_interface14getSensorAngleEv>
 8000e34:	eef0 7a40 	vmov.f32	s15, s0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	edc3 7a07 	vstr	s15, [r3, #28]
	angle_prev_ts = micros();
 8000e3e:	f000 f921 	bl	8001084 <_ZN17AS5048A_interface6microsEv>
 8000e42:	4603      	mov	r3, r0
 8000e44:	461a      	mov	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	621a      	str	r2, [r3, #32]


	ekf_encoder.ekf_initialize(&_ekf_s_encoder, Pdiag);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3360      	adds	r3, #96	@ 0x60
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	f000 fcfa 	bl	8001854 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_ZN17AS5048A_interface17spiCalcEvenParityEt>:

/**
 * @brief Utility function used to calculate even parity of word
 */
uint8_t AS5048A_interface::spiCalcEvenParity(uint16_t value) 
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	460b      	mov	r3, r1
 8000e72:	807b      	strh	r3, [r7, #2]
	uint8_t cnt = 0;
 8000e74:	2300      	movs	r3, #0
 8000e76:	73fb      	strb	r3, [r7, #15]
	uint8_t i;
	for (i = 0; i < 16; i++) 
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73bb      	strb	r3, [r7, #14]
 8000e7c:	e00d      	b.n	8000e9a <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x32>
	{
		if (value & 0x1)
 8000e7e:	887b      	ldrh	r3, [r7, #2]
 8000e80:	f003 0301 	and.w	r3, r3, #1
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d002      	beq.n	8000e8e <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x26>
			cnt++;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
		value >>= 1;
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	085b      	lsrs	r3, r3, #1
 8000e92:	807b      	strh	r3, [r7, #2]
	for (i = 0; i < 16; i++) 
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	3301      	adds	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	2b0f      	cmp	r3, #15
 8000e9e:	d9ee      	bls.n	8000e7e <_ZN17AS5048A_interface17spiCalcEvenParityEt+0x16>
	}
	return cnt & 0x1;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	b2db      	uxtb	r3, r3
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <_ZN17AS5048A_interface4readEt>:
 * @brief Read a register from the SPI encoder sensor
 * 		  Takes the address of the register as a 16 bit word
 * @return the value of the register
 */
uint16_t AS5048A_interface::read(uint16_t angle_register) 
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af02      	add	r7, sp, #8
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	807b      	strh	r3, [r7, #2]
	uint16_t register_value;
	uint16_t command = angle_register;
 8000ec0:	887b      	ldrh	r3, [r7, #2]
 8000ec2:	817b      	strh	r3, [r7, #10]

	if (command_rw_bit > 0)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	691b      	ldr	r3, [r3, #16]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	dd0b      	ble.n	8000ee4 <_ZN17AS5048A_interface4readEt+0x30>
	{
		command = angle_register | (1 << command_rw_bit);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	691b      	ldr	r3, [r3, #16]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed6:	b21a      	sxth	r2, r3
 8000ed8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	817b      	strh	r3, [r7, #10]
	}
	if (command_parity_bit > 0)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	dd11      	ble.n	8000f10 <_ZN17AS5048A_interface4readEt+0x5c>
	{
		//Add a parity bit on the the MSB
		command |= ((uint16_t) spiCalcEvenParity(command) << command_parity_bit);
 8000eec:	897b      	ldrh	r3, [r7, #10]
 8000eee:	4619      	mov	r1, r3
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffb9 	bl	8000e68 <_ZN17AS5048A_interface17spiCalcEvenParityEt>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	461a      	mov	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	897b      	ldrh	r3, [r7, #10]
 8000f06:	b21b      	sxth	r3, r3
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	817b      	strh	r3, [r7, #10]
	}

	//>>>> SPI - begin transaction <<<<
	//Send the command
	//  spi->transfer16(command);
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2110      	movs	r1, #16
 8000f14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f18:	f007 fd6a 	bl	80089f0 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) &command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
 8000f1c:	f107 020c 	add.w	r2, r7, #12
 8000f20:	f107 010a 	add.w	r1, r7, #10
 8000f24:	2364      	movs	r3, #100	@ 0x64
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <_ZN17AS5048A_interface4readEt+0xc4>)
 8000f2c:	f008 fe09 	bl	8009b42 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);
 8000f30:	2201      	movs	r2, #1
 8000f32:	2110      	movs	r1, #16
 8000f34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f38:	f007 fd5a 	bl	80089f0 <HAL_GPIO_WritePin>
//	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*) & command, (uint8_t*) &register_value, sizeof(register_value) / sizeof(uint16_t), 100);
//	HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_SET);

	//>>>> SPI - end transaction <<<<

	register_value = register_value >> (1 + data_start_bit - bit_resolution); //this should shift data to the rightmost bits of the word
 8000f3c:	89bb      	ldrh	r3, [r7, #12]
 8000f3e:	4619      	mov	r1, r3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	695b      	ldr	r3, [r3, #20]
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	fa41 f303 	asr.w	r3, r1, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	81bb      	strh	r3, [r7, #12]
	uint16_t data_mask = 0xFFFF >> (16 - bit_resolution);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f1c3 0310 	rsb	r3, r3, #16
 8000f5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f60:	fa42 f303 	asr.w	r3, r2, r3
 8000f64:	81fb      	strh	r3, [r7, #14]
	return register_value & data_mask; // Return the data, stripping the non data (e.g parity) bits
 8000f66:	89ba      	ldrh	r2, [r7, #12]
 8000f68:	89fb      	ldrh	r3, [r7, #14]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	b29b      	uxth	r3, r3
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200006d0 	.word	0x200006d0

08000f7c <_ZN17AS5048A_interface11getRawCountEv>:
 * @brief Reading the raw counter of the magnetic sensor
 * 
 * @return raw data from SPI signal [16-bits word]
*/
int AS5048A_interface::getRawCount() 
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	return (int) read(angle_register);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	699b      	ldr	r3, [r3, #24]
 8000f88:	b29b      	uxth	r3, r3
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff ff91 	bl	8000eb4 <_ZN17AS5048A_interface4readEt>
 8000f92:	4603      	mov	r3, r0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <_ZN17AS5048A_interface14getSensorAngleEv>:
 * @brief Get absolute angular position from raw data of encoder
 *
 * @return absolute angular position [radians]
 */
float AS5048A_interface::getSensorAngle() 
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	return (getRawCount() / (float) cpr) * _2PI;
 8000fa4:	6878      	ldr	r0, [r7, #4]
 8000fa6:	f7ff ffe9 	bl	8000f7c <_ZN17AS5048A_interface11getRawCountEv>
 8000faa:	ee07 0a90 	vmov	s15, r0
 8000fae:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	ed93 7a01 	vldr	s14, [r3, #4]
 8000fb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000fbc:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8000fd0 <_ZN17AS5048A_interface14getSensorAngleEv+0x34>
 8000fc0:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000fc4:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	40c90fdb 	.word	0x40c90fdb

08000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>:
 * 
 * @return absolute angular position with number of round [radians]
 * 
*/
float AS5048A_interface::get_full_rotation_angle() 
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	return (float) full_rotations * _2PI + angle_prev;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000fe0:	ee07 3a90 	vmov	s15, r3
 8000fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe8:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8001008 <_ZN17AS5048A_interface23get_full_rotation_angleEv+0x34>
 8000fec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	edd3 7a07 	vldr	s15, [r3, #28]
 8000ff6:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ffa:	eeb0 0a67 	vmov.f32	s0, s15
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	40c90fdb 	.word	0x40c90fdb

0800100c <_ZN17AS5048A_interface18getMechanicalAngleEv>:

/**
 * @brief Get absolute angular position from last call updateSensor function
*/
float AS5048A_interface::getMechanicalAngle() 
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	return angle_prev;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	69db      	ldr	r3, [r3, #28]
 8001018:	ee07 3a90 	vmov	s15, r3
}
 800101c:	eeb0 0a67 	vmov.f32	s0, s15
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_ZN17AS5048A_interface15electricalAngleEv>:
 * @brief Calculate electrical angular position from absoulute angular position 
 * 
 * @return electrical angular position [radians]
*/
float AS5048A_interface::electricalAngle() 
{
 800102c:	b580      	push	{r7, lr}
 800102e:	ed2d 8b02 	vpush	{d8}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	return _normalizeAngle((float) (sensor_direction * pole_pairs) * getMechanicalAngle() - zero_electric_angle);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103c:	4a10      	ldr	r2, [pc, #64]	@ (8001080 <_ZN17AS5048A_interface15electricalAngleEv+0x54>)
 800103e:	6812      	ldr	r2, [r2, #0]
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ffdd 	bl	800100c <_ZN17AS5048A_interface18getMechanicalAngleEv>
 8001052:	eef0 7a40 	vmov.f32	s15, s0
 8001056:	ee28 7a27 	vmul.f32	s14, s16, s15
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8001060:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001064:	eeb0 0a67 	vmov.f32	s0, s15
 8001068:	f001 fd12 	bl	8002a90 <_Z15_normalizeAnglef>
 800106c:	eef0 7a40 	vmov.f32	s15, s0
}
 8001070:	eeb0 0a67 	vmov.f32	s0, s15
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	ecbd 8b02 	vpop	{d8}
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000a8 	.word	0x200000a8

08001084 <_ZN17AS5048A_interface6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t AS5048A_interface::micros(void) 
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8001088:	4b07      	ldr	r3, [pc, #28]	@ (80010a8 <_ZN17AS5048A_interface6microsEv+0x24>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4b07      	ldr	r3, [pc, #28]	@ (80010ac <_ZN17AS5048A_interface6microsEv+0x28>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4907      	ldr	r1, [pc, #28]	@ (80010b0 <_ZN17AS5048A_interface6microsEv+0x2c>)
 8001092:	fba1 1303 	umull	r1, r3, r1, r3
 8001096:	0c9b      	lsrs	r3, r3, #18
 8001098:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e0001000 	.word	0xe0001000
 80010ac:	200000bc 	.word	0x200000bc
 80010b0:	431bde83 	.word	0x431bde83

080010b4 <_ZN17AS5048A_interface12updateSensorEv>:
/**
 * @brief Update parameter of encoder 
 * 	- should be used in the loop
*/
void AS5048A_interface::updateSensor() 
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	float angle_current = getSensorAngle();
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff6d 	bl	8000f9c <_ZN17AS5048A_interface14getSensorAngleEv>
 80010c2:	ed87 0a03 	vstr	s0, [r7, #12]
	angle_prev_ts = micros();
 80010c6:	f7ff ffdd 	bl	8001084 <_ZN17AS5048A_interface6microsEv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	621a      	str	r2, [r3, #32]
	float d_angle = angle_current - angle_prev;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	edd3 7a07 	vldr	s15, [r3, #28]
 80010d8:	ed97 7a03 	vldr	s14, [r7, #12]
 80010dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010e0:	edc7 7a02 	vstr	s15, [r7, #8]
	// if overflow happened track it as full rotation
	if (abs(d_angle) > (0.8f * _2PI))
 80010e4:	ed97 0a02 	vldr	s0, [r7, #8]
 80010e8:	f7ff fda6 	bl	8000c38 <_ZSt3absf>
 80010ec:	eef0 7a40 	vmov.f32	s15, s0
 80010f0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001138 <_ZN17AS5048A_interface12updateSensorEv+0x84>
 80010f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010fc:	bfcc      	ite	gt
 80010fe:	2301      	movgt	r3, #1
 8001100:	2300      	movle	r3, #0
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b00      	cmp	r3, #0
 8001106:	d00f      	beq.n	8001128 <_ZN17AS5048A_interface12updateSensorEv+0x74>
		full_rotations += (d_angle > 0) ? -1 : 1;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800110c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001110:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001114:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001118:	dd02      	ble.n	8001120 <_ZN17AS5048A_interface12updateSensorEv+0x6c>
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	e000      	b.n	8001122 <_ZN17AS5048A_interface12updateSensorEv+0x6e>
 8001120:	2201      	movs	r2, #1
 8001122:	441a      	add	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	639a      	str	r2, [r3, #56]	@ 0x38
	angle_prev = angle_current;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	61da      	str	r2, [r3, #28]

//	getShaftVelocity();
}
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40a0d97c 	.word	0x40a0d97c

0800113c <_ZN17AS5048A_interface14updateVelocityEv>:

void AS5048A_interface::updateVelocity()
{
 800113c:	b5b0      	push	{r4, r5, r7, lr}
 800113e:	b08a      	sub	sp, #40	@ 0x28
 8001140:	af02      	add	r7, sp, #8
 8001142:	6078      	str	r0, [r7, #4]
	// calculate sample time
	float Ts = 1e-3f;
 8001144:	4b3f      	ldr	r3, [pc, #252]	@ (8001244 <_ZN17AS5048A_interface14updateVelocityEv+0x108>)
 8001146:	61fb      	str	r3, [r7, #28]

	// [2] EKF Velocity estimation
	_float_t angle_measurement = get_full_rotation_angle();
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f7ff ff43 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 800114e:	eef0 7a40 	vmov.f32	s15, s0
 8001152:	edc7 7a06 	vstr	s15, [r7, #24]
	
    _float_t fx[EKF_N];
    fx[0] = _ekf_s_encoder.x[0] + _ekf_s_encoder.x[1] * Ts;   // Angle update
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	ed93 7a00 	vldr	s14, [r3]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001162:	3304      	adds	r3, #4
 8001164:	edd3 6a00 	vldr	s13, [r3]
 8001168:	edd7 7a07 	vldr	s15, [r7, #28]
 800116c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001170:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001174:	edc7 7a04 	vstr	s15, [r7, #16]
    fx[1] = _ekf_s_encoder.x[1];                    // Velocity remains the same
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	617b      	str	r3, [r7, #20]
    ekf_encoder.ekf_predict(&_ekf_s_encoder, fx, F, Q);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f103 0494 	add.w	r4, r3, #148	@ 0x94
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	3380      	adds	r3, #128	@ 0x80
 8001196:	f107 0210 	add.w	r2, r7, #16
 800119a:	9300      	str	r3, [sp, #0]
 800119c:	4623      	mov	r3, r4
 800119e:	f000 fbc0 	bl	8001922 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>

    _float_t hx[EKF_N];
    hx[0] = _ekf_s_encoder.x[0];  // Predicted measurement
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	60bb      	str	r3, [r7, #8]
    ekf_encoder.ekf_update(&_ekf_s_encoder, &angle_measurement, hx, H, R);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	33a4      	adds	r3, #164	@ 0xa4
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	3290      	adds	r2, #144	@ 0x90
 80011be:	f107 0508 	add.w	r5, r7, #8
 80011c2:	f107 0418 	add.w	r4, r7, #24
 80011c6:	9201      	str	r2, [sp, #4]
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	462b      	mov	r3, r5
 80011cc:	4622      	mov	r2, r4
 80011ce:	f000 fcb4 	bl	8001b3a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>

    vel_prev_EKF = LPF_velocity(_ekf_s_encoder.x[1]);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011d6:	3304      	adds	r3, #4
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	eeb0 0a67 	vmov.f32	s0, s15
 80011e0:	4819      	ldr	r0, [pc, #100]	@ (8001248 <_ZN17AS5048A_interface14updateVelocityEv+0x10c>)
 80011e2:	f001 fcdb 	bl	8002b9c <_ZN13LowPassFilterclEf>
 80011e6:	eef0 7a40 	vmov.f32	s15, s0
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34



    // [1] Velocity calculation
    vel_prev = ((float)(full_rotations - vel_full_rotations) * _2PI + (angle_prev - vel_angle_prev)) / Ts;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800124c <_ZN17AS5048A_interface14updateVelocityEv+0x110>
 8001206:	ee27 7a87 	vmul.f32	s14, s15, s14
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800121a:	ee77 6a27 	vadd.f32	s13, s14, s15
 800121e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	// save variables for next iteration
	vel_angle_prev = angle_prev;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	69da      	ldr	r2, [r3, #28]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	@ 0x24
	vel_full_rotations = full_rotations;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	63da      	str	r2, [r3, #60]	@ 0x3c
	// Low pass filter
//	vel_prev_LPF = sensor_direction * LPF_velocity(vel_prev);
}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bdb0      	pop	{r4, r5, r7, pc}
 8001244:	3a83126f 	.word	0x3a83126f
 8001248:	20000208 	.word	0x20000208
 800124c:	40c90fdb 	.word	0x40c90fdb

08001250 <_ZN17AS5048A_interface13getShaftAngleEv>:
 * Get filtered absolute angular position from encoder with sensor direction
 *
 * @return absolute angular position with sensor direction [radians]
*/
float AS5048A_interface::getShaftAngle() 
{
 8001250:	b580      	push	{r7, lr}
 8001252:	ed2d 8b02 	vpush	{d8}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	return sensor_direction * LPF_position(get_full_rotation_angle()) - sensor_offset;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001260:	ee07 3a90 	vmov	s15, r3
 8001264:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff feb3 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 800126e:	eef0 7a40 	vmov.f32	s15, s0
 8001272:	eeb0 0a67 	vmov.f32	s0, s15
 8001276:	4809      	ldr	r0, [pc, #36]	@ (800129c <_ZN17AS5048A_interface13getShaftAngleEv+0x4c>)
 8001278:	f001 fc90 	bl	8002b9c <_ZN13LowPassFilterclEf>
 800127c:	eef0 7a40 	vmov.f32	s15, s0
 8001280:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800128a:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 800128e:	eeb0 0a67 	vmov.f32	s0, s15
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	ecbd 8b02 	vpop	{d8}
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001fc 	.word	0x200001fc

080012a0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80012a0:	b5b0      	push	{r4, r5, r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff f95a 	bl	8000564 <__aeabi_i2d>
 80012b0:	4604      	mov	r4, r0
 80012b2:	460d      	mov	r5, r1
 80012b4:	6838      	ldr	r0, [r7, #0]
 80012b6:	f7ff f955 	bl	8000564 <__aeabi_i2d>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	ec43 2b11 	vmov	d1, r2, r3
 80012c2:	ec45 4b10 	vmov	d0, r4, r5
 80012c6:	f00a fc09 	bl	800badc <pow>
 80012ca:	eeb0 7a40 	vmov.f32	s14, s0
 80012ce:	eef0 7a60 	vmov.f32	s15, s1
    }
 80012d2:	eeb0 0a47 	vmov.f32	s0, s14
 80012d6:	eef0 0a67 	vmov.f32	s1, s15
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bdb0      	pop	{r4, r5, r7, pc}

080012e0 <_ZN12CurrentSenseC1Ev>:

#include <CurrentSense.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU


CurrentSense::CurrentSense() 
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001420 <_ZN12CurrentSenseC1Ev+0x140>)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	334c      	adds	r3, #76	@ 0x4c
 80012f2:	2201      	movs	r2, #1
 80012f4:	2102      	movs	r1, #2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 fa74 	bl	80017e4 <_ZN3EKFC1Eii>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a49      	ldr	r2, [pc, #292]	@ (8001424 <_ZN12CurrentSenseC1Ev+0x144>)
 8001300:	3360      	adds	r3, #96	@ 0x60
 8001302:	ca07      	ldmia	r2, {r0, r1, r2}
 8001304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a47      	ldr	r2, [pc, #284]	@ (8001428 <_ZN12CurrentSenseC1Ev+0x148>)
 800130c:	f103 049c 	add.w	r4, r3, #156	@ 0x9c
 8001310:	4615      	mov	r5, r2
 8001312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800131a:	682b      	ldr	r3, [r5, #0]
 800131c:	6023      	str	r3, [r4, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a41      	ldr	r2, [pc, #260]	@ (8001428 <_ZN12CurrentSenseC1Ev+0x148>)
 8001322:	f103 04c0 	add.w	r4, r3, #192	@ 0xc0
 8001326:	4615      	mov	r5, r2
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	6023      	str	r3, [r4, #0]
 8001334:	4b3d      	ldr	r3, [pc, #244]	@ (800142c <_ZN12CurrentSenseC1Ev+0x14c>)
 8001336:	ed93 7a00 	vldr	s14, [r3]
 800133a:	4b3d      	ldr	r3, [pc, #244]	@ (8001430 <_ZN12CurrentSenseC1Ev+0x150>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001344:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8001434 <_ZN12CurrentSenseC1Ev+0x154>
 8001348:	ee67 6a87 	vmul.f32	s13, s15, s14
 800134c:	4b3a      	ldr	r3, [pc, #232]	@ (8001438 <_ZN12CurrentSenseC1Ev+0x158>)
 800134e:	ed93 7a00 	vldr	s14, [r3]
 8001352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800135a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edc3 7a39 	vstr	s15, [r3, #228]	@ 0xe4
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f04f 0200 	mov.w	r2, #0
 800136a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f04f 0200 	mov.w	r2, #0
 8001374:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 8001382:	4b2a      	ldr	r3, [pc, #168]	@ (800142c <_ZN12CurrentSenseC1Ev+0x14c>)
 8001384:	ed93 7a00 	vldr	s14, [r3]
 8001388:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <_ZN12CurrentSenseC1Ev+0x150>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001392:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001434 <_ZN12CurrentSenseC1Ev+0x154>
 8001396:	ee67 6a87 	vmul.f32	s13, s15, s14
 800139a:	4b27      	ldr	r3, [pc, #156]	@ (8001438 <_ZN12CurrentSenseC1Ev+0x158>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80013d0:	4b16      	ldr	r3, [pc, #88]	@ (800142c <_ZN12CurrentSenseC1Ev+0x14c>)
 80013d2:	ed93 7a00 	vldr	s14, [r3]
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <_ZN12CurrentSenseC1Ev+0x150>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001434 <_ZN12CurrentSenseC1Ev+0x154>
 80013e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80013e8:	4b13      	ldr	r3, [pc, #76]	@ (8001438 <_ZN12CurrentSenseC1Ev+0x158>)
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	edc3 7a41 	vstr	s15, [r3, #260]	@ 0x104
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a0e      	ldr	r2, [pc, #56]	@ (800143c <_ZN12CurrentSenseC1Ev+0x15c>)
 8001404:	f503 7484 	add.w	r4, r3, #264	@ 0x108
 8001408:	4615      	mov	r5, r2
 800140a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001410:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001412:	682b      	ldr	r3, [r5, #0]
 8001414:	6023      	str	r3, [r4, #0]
{
	
}
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4618      	mov	r0, r3
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	0800dc38 	.word	0x0800dc38
 8001424:	0800db98 	.word	0x0800db98
 8001428:	0800dba4 	.word	0x0800dba4
 800142c:	20000098 	.word	0x20000098
 8001430:	200000a0 	.word	0x200000a0
 8001434:	3a83126f 	.word	0x3a83126f
 8001438:	200000a4 	.word	0x200000a4
 800143c:	0800dbc8 	.word	0x0800dbc8

08001440 <_ZN12CurrentSenseD1Ev>:

CurrentSense::~CurrentSense() 
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a06      	ldr	r2, [pc, #24]	@ (8001464 <_ZN12CurrentSenseD1Ev+0x24>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	334c      	adds	r3, #76	@ 0x4c
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f9de 	bl	8001814 <_ZN3EKFD1Ev>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	0800dc38 	.word	0x0800dc38

08001468 <_ZN12CurrentSenseD0Ev>:
CurrentSense::~CurrentSense() 
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
}
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ffe5 	bl	8001440 <_ZN12CurrentSenseD1Ev>
 8001476:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f00a fb0c 	bl	800ba98 <_ZdlPvj>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <_ZN12CurrentSense16initCurrentsenseEff>:
/**
 * @brief Initialize Direct Memory Access (DMA) for Analog to Digital Convertor (ADC)
 * 			, which use to read current sensor signals 
*/
void CurrentSense::initCurrentsense(float _shunt_resistor, float _gain) 
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	ed87 0a02 	vstr	s0, [r7, #8]
 8001498:	edc7 0a01 	vstr	s1, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, adcResultDMA_a, 1);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	3304      	adds	r3, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	@ (80014d8 <_ZN12CurrentSense16initCurrentsenseEff+0x4c>)
 80014a6:	f004 fc53 	bl	8005d50 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, adcResultDMA_c, 1);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3308      	adds	r3, #8
 80014ae:	2201      	movs	r2, #1
 80014b0:	4619      	mov	r1, r3
 80014b2:	480a      	ldr	r0, [pc, #40]	@ (80014dc <_ZN12CurrentSense16initCurrentsenseEff+0x50>)
 80014b4:	f004 fc4c 	bl	8005d50 <HAL_ADC_Start_DMA>

	R_sense = _shunt_resistor;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	635a      	str	r2, [r3, #52]	@ 0x34
	gain_a = _gain;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	629a      	str	r2, [r3, #40]	@ 0x28
	gain_b = _gain;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	62da      	str	r2, [r3, #44]	@ 0x2c
	gain_c = _gain;
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	687a      	ldr	r2, [r7, #4]
 80014ce:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000450 	.word	0x20000450
 80014dc:	200004bc 	.word	0x200004bc

080014e0 <_ZN12CurrentSense16calibrateOffsetsEv>:

/**
 * @brief Calibrate current offset in initial steady state (first 1000 iterations)
*/
void CurrentSense::calibrateOffsets() 
{
 80014e0:	b5b0      	push	{r4, r5, r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	const int calibration_rounds = 1000;
 80014e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ec:	60bb      	str	r3, [r7, #8]
	// find adc offset = zero current voltage
	offset_ia = 0;
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	offset_ib = 0;
 80014fc:	6879      	ldr	r1, [r7, #4]
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	e9c1 2306 	strd	r2, r3, [r1, #24]
	offset_ic = 0;
 800150a:	6879      	ldr	r1, [r7, #4]
 800150c:	f04f 0200 	mov.w	r2, #0
 8001510:	f04f 0300 	mov.w	r3, #0
 8001514:	e9c1 2308 	strd	r2, r3, [r1, #32]
	// read the adc voltage 1000 times ( arbitrary number )
	for (int i = 0; i < calibration_rounds; i++) 
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e02b      	b.n	8001576 <_ZN12CurrentSense16calibrateOffsetsEv+0x96>
	{
		offset_ia += adcResultDMA_a[0];
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff f80b 	bl	8000544 <__aeabi_ui2d>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4620      	mov	r0, r4
 8001534:	4629      	mov	r1, r5
 8001536:	f7fe fec9 	bl	80002cc <__adddf3>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	6879      	ldr	r1, [r7, #4]
 8001540:	e9c1 2304 	strd	r2, r3, [r1, #16]
//		offset_ib += adcResultDMA[0];
		offset_ic += adcResultDMA_c[0];
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	4618      	mov	r0, r3
 8001550:	f7fe fff8 	bl	8000544 <__aeabi_ui2d>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4620      	mov	r0, r4
 800155a:	4629      	mov	r1, r5
 800155c:	f7fe feb6 	bl	80002cc <__adddf3>
 8001560:	4602      	mov	r2, r0
 8001562:	460b      	mov	r3, r1
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	e9c1 2308 	strd	r2, r3, [r1, #32]
		HAL_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f003 ffe0 	bl	8005530 <HAL_Delay>
	for (int i = 0; i < calibration_rounds; i++) 
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	3301      	adds	r3, #1
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800157c:	dbcf      	blt.n	800151e <_ZN12CurrentSense16calibrateOffsetsEv+0x3e>
	}
	// calculate the mean offsets
	offset_ia = offset_ia / calibration_rounds;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001584:	f04f 0200 	mov.w	r2, #0
 8001588:	4b0c      	ldr	r3, [pc, #48]	@ (80015bc <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 800158a:	f7ff f97f 	bl	800088c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	6879      	ldr	r1, [r7, #4]
 8001594:	e9c1 2304 	strd	r2, r3, [r1, #16]
//	offset_ib = offset_ib / calibration_rounds;
	offset_ic = offset_ic / calibration_rounds;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800159e:	f04f 0200 	mov.w	r2, #0
 80015a2:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <_ZN12CurrentSense16calibrateOffsetsEv+0xdc>)
 80015a4:	f7ff f972 	bl	800088c <__aeabi_ddiv>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	6879      	ldr	r1, [r7, #4]
 80015ae:	e9c1 2308 	strd	r2, r3, [r1, #32]
}
 80015b2:	bf00      	nop
 80015b4:	3710      	adds	r7, #16
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bdb0      	pop	{r4, r5, r7, pc}
 80015ba:	bf00      	nop
 80015bc:	408f4000 	.word	0x408f4000

080015c0 <_ZN12CurrentSense16getPhaseCurrentsEv>:
 * @note the value 3.05 to 0.25 is the range of ADC signal from DRV8323RH, please see Datasheet.
 * 
 * @return  Phase current in Struct PhaseCurrent_s (Amperes)
*/
struct PhaseCurrent_s CurrentSense::getPhaseCurrents() 
{
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b08a      	sub	sp, #40	@ 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6178      	str	r0, [r7, #20]
//	struct PhaseCurrent_s current;
	current.a = ((offset_ia - adcResultDMA_a[0]) * (3.3 / 4096.0)) / (R_sense * gain_a);
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7fe ffb6 	bl	8000544 <__aeabi_ui2d>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4620      	mov	r0, r4
 80015de:	4629      	mov	r1, r5
 80015e0:	f7fe fe72 	bl	80002c8 <__aeabi_dsub>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80016d8 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 80015ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f2:	f7ff f821 	bl	8000638 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4614      	mov	r4, r2
 80015fc:	461d      	mov	r5, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800160a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160e:	ee17 0a90 	vmov	r0, s15
 8001612:	f7fe ffb9 	bl	8000588 <__aeabi_f2d>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4620      	mov	r0, r4
 800161c:	4629      	mov	r1, r5
 800161e:	f7ff f935 	bl	800088c <__aeabi_ddiv>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	f7ff fab5 	bl	8000b98 <__aeabi_d2f>
 800162e:	4602      	mov	r2, r0
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	639a      	str	r2, [r3, #56]	@ 0x38
//	current.b = ((offset_ib - adcResultDMA_b[0]) * (3.3 / 4096.0)) / (R_sense * gain_b);
	current.c = ((offset_ic - adcResultDMA_c[0]) * (3.3 / 4096.0)) / (R_sense * gain_c);
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe ff80 	bl	8000544 <__aeabi_ui2d>
 8001644:	4602      	mov	r2, r0
 8001646:	460b      	mov	r3, r1
 8001648:	4620      	mov	r0, r4
 800164a:	4629      	mov	r1, r5
 800164c:	f7fe fe3c 	bl	80002c8 <__aeabi_dsub>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4610      	mov	r0, r2
 8001656:	4619      	mov	r1, r3
 8001658:	a31f      	add	r3, pc, #124	@ (adr r3, 80016d8 <_ZN12CurrentSense16getPhaseCurrentsEv+0x118>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	f7fe ffeb 	bl	8000638 <__aeabi_dmul>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4614      	mov	r4, r2
 8001668:	461d      	mov	r5, r3
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	ed93 7a0d 	vldr	s14, [r3, #52]	@ 0x34
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800167a:	ee17 0a90 	vmov	r0, s15
 800167e:	f7fe ff83 	bl	8000588 <__aeabi_f2d>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4620      	mov	r0, r4
 8001688:	4629      	mov	r1, r5
 800168a:	f7ff f8ff 	bl	800088c <__aeabi_ddiv>
 800168e:	4602      	mov	r2, r0
 8001690:	460b      	mov	r3, r1
 8001692:	4610      	mov	r0, r2
 8001694:	4619      	mov	r1, r3
 8001696:	f7ff fa7f 	bl	8000b98 <__aeabi_d2f>
 800169a:	4602      	mov	r2, r0
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	641a      	str	r2, [r3, #64]	@ 0x40
//    current.b = - current.a  - current.c; // --(1)
	return current;
 80016a0:	697a      	ldr	r2, [r7, #20]
 80016a2:	f107 031c 	add.w	r3, r7, #28
 80016a6:	3238      	adds	r2, #56	@ 0x38
 80016a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80016ae:	69f9      	ldr	r1, [r7, #28]
 80016b0:	6a3a      	ldr	r2, [r7, #32]
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	ee06 1a90 	vmov	s13, r1
 80016b8:	ee07 2a10 	vmov	s14, r2
 80016bc:	ee07 3a90 	vmov	s15, r3
}
 80016c0:	eeb0 0a66 	vmov.f32	s0, s13
 80016c4:	eef0 0a47 	vmov.f32	s1, s14
 80016c8:	eeb0 1a67 	vmov.f32	s2, s15
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bdb0      	pop	{r4, r5, r7, pc}
 80016d2:	bf00      	nop
 80016d4:	f3af 8000 	nop.w
 80016d8:	66666666 	.word	0x66666666
 80016dc:	3f4a6666 	.word	0x3f4a6666

080016e0 <_ZN12CurrentSense14getFOCCurrentsEf>:
 * @note function calculate by Clarke-Park transform of the phase currents
 * 
 * @return  DQ current in Struct DQCurrent_s (Amperes)
*/
struct DQCurrent_s CurrentSense::getFOCCurrents(float angle_el) 
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b08b      	sub	sp, #44	@ 0x2c
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	ed87 0a02 	vstr	s0, [r7, #8]
	// read current phase currents
//	struct PhaseCurrent_s current = getPhaseCurrents(); //Ia, Ib, Ic
	current = getPhaseCurrents(); //Ia,Ib,Ic
 80016ec:	68fc      	ldr	r4, [r7, #12]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f7ff ff66 	bl	80015c0 <_ZN12CurrentSense16getPhaseCurrentsEv>
 80016f4:	eef0 6a40 	vmov.f32	s13, s0
 80016f8:	eeb0 7a60 	vmov.f32	s14, s1
 80016fc:	eef0 7a41 	vmov.f32	s15, s2
 8001700:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
 8001704:	ed84 7a0f 	vstr	s14, [r4, #60]	@ 0x3c
 8001708:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
//    float a = current.a - mid;
//    float b = current.b - mid;
//    i_alpha = a;
//    i_beta = _1_SQRT3 * a + _2_SQRT3 * b;

	i_alpha = current.a;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
	i_beta = (-(_1_SQRT3) * current.a) + (-(_2_SQRT3) * current.c);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001718:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80017bc <_ZN12CurrentSense14getFOCCurrentsEf+0xdc>
 800171c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8001726:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80017c0 <_ZN12CurrentSense14getFOCCurrentsEf+0xe0>
 800172a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	edc7 7a08 	vstr	s15, [r7, #32]

	// calculate park transform
	float ct = _cos(angle_el);
 8001736:	ed97 0a02 	vldr	s0, [r7, #8]
 800173a:	f001 f8c9 	bl	80028d0 <_Z4_cosf>
 800173e:	ed87 0a07 	vstr	s0, [r7, #28]
	float st = _sin(angle_el);
 8001742:	ed97 0a02 	vldr	s0, [r7, #8]
 8001746:	f001 f84b 	bl	80027e0 <_Z4_sinf>
 800174a:	ed87 0a06 	vstr	s0, [r7, #24]

//	struct DQCurrent_s dq_current;		// Id, Iq

	dq_current.d = i_alpha * ct + i_beta  * st;
 800174e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001752:	edd7 7a07 	vldr	s15, [r7, #28]
 8001756:	ee27 7a27 	vmul.f32	s14, s14, s15
 800175a:	edd7 6a08 	vldr	s13, [r7, #32]
 800175e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001762:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
	dq_current.q = i_beta  * ct - i_alpha * st;
 8001770:	ed97 7a08 	vldr	s14, [r7, #32]
 8001774:	edd7 7a07 	vldr	s15, [r7, #28]
 8001778:	ee27 7a27 	vmul.f32	s14, s14, s15
 800177c:	edd7 6a09 	vldr	s13, [r7, #36]	@ 0x24
 8001780:	edd7 7a06 	vldr	s15, [r7, #24]
 8001784:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
	return dq_current;
 8001792:	68fa      	ldr	r2, [r7, #12]
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	3244      	adds	r2, #68	@ 0x44
 800179a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800179e:	e883 0003 	stmia.w	r3, {r0, r1}
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	ee07 2a10 	vmov	s14, r2
 80017aa:	ee07 3a90 	vmov	s15, r3
}
 80017ae:	eeb0 0a47 	vmov.f32	s0, s14
 80017b2:	eef0 0a67 	vmov.f32	s1, s15
 80017b6:	372c      	adds	r7, #44	@ 0x2c
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bd90      	pop	{r4, r7, pc}
 80017bc:	bf13cd3a 	.word	0xbf13cd3a
 80017c0:	bf93cd3a 	.word	0xbf93cd3a

080017c4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80017ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80017d2:	f00a fa13 	bl	800bbfc <sqrtf>
 80017d6:	eef0 7a40 	vmov.f32	s15, s0
 80017da:	eeb0 0a67 	vmov.f32	s0, s15
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <_ZN3EKFC1Eii>:
#include "ekf.h"

// EKF ///////////////////////////////////////////////////////////////////////
EKF::EKF(int n, int m) : EKF_N(n), EKF_M(m){}
 80017e4:	b480      	push	{r7}
 80017e6:	b085      	sub	sp, #20
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	4a07      	ldr	r2, [pc, #28]	@ (8001810 <_ZN3EKFC1Eii+0x2c>)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4618      	mov	r0, r3
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	0800dc48 	.word	0x0800dc48

08001814 <_ZN3EKFD1Ev>:

EKF::~EKF(){}
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	4a04      	ldr	r2, [pc, #16]	@ (8001830 <_ZN3EKFD1Ev+0x1c>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	0800dc48 	.word	0x0800dc48

08001834 <_ZN3EKFD0Ev>:
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f7ff ffe9 	bl	8001814 <_ZN3EKFD1Ev>
 8001842:	210c      	movs	r1, #12
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f00a f927 	bl	800ba98 <_ZdlPvj>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_ZN3EKF14ekf_initializeEP5ekf_tPKf>:
 * @param ekf pointer to an ekf_t structure
 * @param pdiag a vector of length EKF_N containing the initial values for the
 * covariance matrix diagonal
 */
void EKF::ekf_initialize(ekf_t* ekf, const _float_t* pdiag) 
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
    ekf->x = new _float_t[EKF_N];
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001868:	4293      	cmp	r3, r2
 800186a:	d201      	bcs.n	8001870 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x1c>
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	e001      	b.n	8001874 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x20>
 8001870:	f04f 33ff 	mov.w	r3, #4294967295
 8001874:	4618      	mov	r0, r3
 8001876:	f00a f913 	bl	800baa0 <_Znaj>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	601a      	str	r2, [r3, #0]
    ekf->P = new _float_t[EKF_N * EKF_N];
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	6852      	ldr	r2, [r2, #4]
 800188a:	fb02 f303 	mul.w	r3, r2, r3
 800188e:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001892:	4293      	cmp	r3, r2
 8001894:	d201      	bcs.n	800189a <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x46>
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	e001      	b.n	800189e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x4a>
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	4618      	mov	r0, r3
 80018a0:	f00a f8fe 	bl	800baa0 <_Znaj>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < EKF_N; ++i) 
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e02d      	b.n	800190e <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0xba>
    {
        for (int j = 0; j < EKF_N; ++j) 
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	e01a      	b.n	80018ee <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x9a>
        {
            ekf->P[i * EKF_N + j] = i == j ? pdiag[i] : 0;
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d105      	bne.n	80018cc <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x78>
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	4413      	add	r3, r2
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e001      	b.n	80018d0 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x7c>
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	6851      	ldr	r1, [r2, #4]
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	6852      	ldr	r2, [r2, #4]
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	fb02 f000 	mul.w	r0, r2, r0
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4402      	add	r2, r0
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	440a      	add	r2, r1
 80018e6:	6013      	str	r3, [r2, #0]
        for (int j = 0; j < EKF_N; ++j) 
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3301      	adds	r3, #1
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	693a      	ldr	r2, [r7, #16]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	dbdf      	blt.n	80018b8 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x64>
        }
        ekf->x[i] = 0;
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4413      	add	r3, r2
 8001902:	f04f 0200 	mov.w	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < EKF_N; ++i) 
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	dbcc      	blt.n	80018b2 <_ZN3EKF14ekf_initializeEP5ekf_tPKf+0x5e>
    }
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_>:
  * @param F Jacobian of state-transition function
  * @param Q process noise matrix
  *
  */
void EKF::ekf_predict(ekf_t* ekf, const _float_t* fx, const _float_t* F, const _float_t* Q) 
{
 8001922:	b590      	push	{r4, r7, lr}
 8001924:	b08d      	sub	sp, #52	@ 0x34
 8001926:	af04      	add	r7, sp, #16
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
    // \hat{x}_k = f(\hat{x}_{k-1}, u_k)
    memcpy(ekf->x, fx, EKF_N * sizeof(_float_t));
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	461a      	mov	r2, r3
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	f00b fbea 	bl	800d116 <memcpy>

    // P_k = F_{k-1} P_{k-1} F^T_{k-1} + Q_{k-1}
    _float_t* FP = new _float_t[EKF_N * EKF_N]();
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	6852      	ldr	r2, [r2, #4]
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	461c      	mov	r4, r3
 8001950:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001954:	429c      	cmp	r4, r3
 8001956:	d201      	bcs.n	800195c <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3a>
 8001958:	00a3      	lsls	r3, r4, #2
 800195a:	e001      	b.n	8001960 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x3e>
 800195c:	f04f 33ff 	mov.w	r3, #4294967295
 8001960:	4618      	mov	r0, r3
 8001962:	f00a f89d 	bl	800baa0 <_Znaj>
 8001966:	4603      	mov	r3, r0
 8001968:	4618      	mov	r0, r3
 800196a:	4602      	mov	r2, r0
 800196c:	1e63      	subs	r3, r4, #1
 800196e:	e004      	b.n	800197a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x58>
 8001970:	f04f 0100 	mov.w	r1, #0
 8001974:	6011      	str	r1, [r2, #0]
 8001976:	3b01      	subs	r3, #1
 8001978:	3204      	adds	r2, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	daf8      	bge.n	8001970 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x4e>
 800197e:	61f8      	str	r0, [r7, #28]
    _mulmat(F, ekf->P, FP, EKF_N, EKF_N, EKF_N);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	6858      	ldr	r0, [r3, #4]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	6852      	ldr	r2, [r2, #4]
 800198c:	68f9      	ldr	r1, [r7, #12]
 800198e:	6849      	ldr	r1, [r1, #4]
 8001990:	9102      	str	r1, [sp, #8]
 8001992:	9201      	str	r2, [sp, #4]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	4602      	mov	r2, r0
 800199a:	6839      	ldr	r1, [r7, #0]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	f000 fa8d 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _float_t* Ft = new _float_t[EKF_N * EKF_N]();
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	6852      	ldr	r2, [r2, #4]
 80019aa:	fb02 f303 	mul.w	r3, r2, r3
 80019ae:	461c      	mov	r4, r3
 80019b0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80019b4:	429c      	cmp	r4, r3
 80019b6:	d201      	bcs.n	80019bc <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9a>
 80019b8:	00a3      	lsls	r3, r4, #2
 80019ba:	e001      	b.n	80019c0 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x9e>
 80019bc:	f04f 33ff 	mov.w	r3, #4294967295
 80019c0:	4618      	mov	r0, r3
 80019c2:	f00a f86d 	bl	800baa0 <_Znaj>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4618      	mov	r0, r3
 80019ca:	4602      	mov	r2, r0
 80019cc:	1e63      	subs	r3, r4, #1
 80019ce:	e004      	b.n	80019da <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xb8>
 80019d0:	f04f 0100 	mov.w	r1, #0
 80019d4:	6011      	str	r1, [r2, #0]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	3204      	adds	r2, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	daf8      	bge.n	80019d0 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xae>
 80019de:	61b8      	str	r0, [r7, #24]
    _transpose(F, Ft, EKF_N, EKF_N);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	9300      	str	r3, [sp, #0]
 80019ea:	4613      	mov	r3, r2
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	6839      	ldr	r1, [r7, #0]
 80019f0:	68f8      	ldr	r0, [r7, #12]
 80019f2:	f000 fb15 	bl	8002020 <_ZN3EKF10_transposeEPKfPfii>

    _float_t* FPFt = new _float_t[EKF_N * EKF_N]();
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	6852      	ldr	r2, [r2, #4]
 80019fe:	fb02 f303 	mul.w	r3, r2, r3
 8001a02:	461c      	mov	r4, r3
 8001a04:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	d201      	bcs.n	8001a10 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xee>
 8001a0c:	00a3      	lsls	r3, r4, #2
 8001a0e:	e001      	b.n	8001a14 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0xf2>
 8001a10:	f04f 33ff 	mov.w	r3, #4294967295
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00a f843 	bl	800baa0 <_Znaj>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	4602      	mov	r2, r0
 8001a20:	1e63      	subs	r3, r4, #1
 8001a22:	e004      	b.n	8001a2e <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x10c>
 8001a24:	f04f 0100 	mov.w	r1, #0
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	3204      	adds	r2, #4
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	daf8      	bge.n	8001a24 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x102>
 8001a32:	6178      	str	r0, [r7, #20]
    _mulmat(FP, Ft, FPFt, EKF_N, EKF_N, EKF_N);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	6852      	ldr	r2, [r2, #4]
 8001a3c:	68f9      	ldr	r1, [r7, #12]
 8001a3e:	6849      	ldr	r1, [r1, #4]
 8001a40:	9102      	str	r1, [sp, #8]
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	69f9      	ldr	r1, [r7, #28]
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	f000 fa35 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    _addmat(FPFt, Q, ekf->P, EKF_N, EKF_N);
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	6852      	ldr	r2, [r2, #4]
 8001a5e:	9201      	str	r2, [sp, #4]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	460b      	mov	r3, r1
 8001a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a66:	6979      	ldr	r1, [r7, #20]
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fb0f 	bl	800208c <_ZN3EKF7_addmatEPKfS1_Pfii>

    delete[] FP;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d002      	beq.n	8001a7a <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x158>
 8001a74:	69f8      	ldr	r0, [r7, #28]
 8001a76:	f00a f811 	bl	800ba9c <_ZdaPv>
    delete[] Ft;
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d002      	beq.n	8001a86 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x164>
 8001a80:	69b8      	ldr	r0, [r7, #24]
 8001a82:	f00a f80b 	bl	800ba9c <_ZdaPv>
    delete[] FPFt;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d002      	beq.n	8001a92 <_ZN3EKF11ekf_predictEP5ekf_tPKfS3_S3_+0x170>
 8001a8c:	6978      	ldr	r0, [r7, #20]
 8001a8e:	f00a f805 	bl	800ba9c <_ZdaPv>
}
 8001a92:	bf00      	nop
 8001a94:	3724      	adds	r7, #36	@ 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}

08001a9a <_ZN3EKF16ekf_update_step3EP5ekf_tPf>:



void EKF::ekf_update_step3(ekf_t* ekf, _float_t* GH) 
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b08a      	sub	sp, #40	@ 0x28
 8001a9e:	af04      	add	r7, sp, #16
 8001aa0:	60f8      	str	r0, [r7, #12]
 8001aa2:	60b9      	str	r1, [r7, #8]
 8001aa4:	607a      	str	r2, [r7, #4]
    _negate(GH, EKF_N, EKF_N);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	6879      	ldr	r1, [r7, #4]
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fb30 	bl	8002116 <_ZN3EKF7_negateEPfii>
    _addeye(GH, EKF_N);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	461a      	mov	r2, r3
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fb63 	bl	800218a <_ZN3EKF7_addeyeEPfi>
    _float_t* GHP = new _float_t[EKF_N * EKF_N];
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	68fa      	ldr	r2, [r7, #12]
 8001aca:	6852      	ldr	r2, [r2, #4]
 8001acc:	fb02 f303 	mul.w	r3, r2, r3
 8001ad0:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d201      	bcs.n	8001adc <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x42>
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	e001      	b.n	8001ae0 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x46>
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f009 ffdd 	bl	800baa0 <_Znaj>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	617b      	str	r3, [r7, #20]
    _mulmat(GH, ekf->P, GHP, EKF_N, EKF_N, EKF_N);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	6858      	ldr	r0, [r3, #4]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	6852      	ldr	r2, [r2, #4]
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	6849      	ldr	r1, [r1, #4]
 8001afa:	9102      	str	r1, [sp, #8]
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	4602      	mov	r2, r0
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f9d8 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    memcpy(ekf->P, GHP, EKF_N * EKF_N * sizeof(_float_t));
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	6858      	ldr	r0, [r3, #4]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	6852      	ldr	r2, [r2, #4]
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	461a      	mov	r2, r3
 8001b20:	6979      	ldr	r1, [r7, #20]
 8001b22:	f00b faf8 	bl	800d116 <memcpy>
    delete[] GHP;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <_ZN3EKF16ekf_update_step3EP5ekf_tPf+0x98>
 8001b2c:	6978      	ldr	r0, [r7, #20]
 8001b2e:	f009 ffb5 	bl	800ba9c <_ZdaPv>
}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_>:
  * @param H sensor-function Jacobian matrix
  * @param R measurement-noise matrix
  *
  */
bool EKF::ekf_update(ekf_t* ekf, const _float_t* z, const _float_t* hx, const _float_t* H, const _float_t* R) 
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b092      	sub	sp, #72	@ 0x48
 8001b3e:	af04      	add	r7, sp, #16
 8001b40:	60f8      	str	r0, [r7, #12]
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	603b      	str	r3, [r7, #0]
     // G_k = P_k H^T_k (H_k P_k H^T_k + R)^{-1}
    _float_t* G = new _float_t[EKF_N * EKF_M];
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6892      	ldr	r2, [r2, #8]
 8001b50:	fb02 f303 	mul.w	r3, r2, r3
 8001b54:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d201      	bcs.n	8001b60 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x26>
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	e001      	b.n	8001b64 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2a>
 8001b60:	f04f 33ff 	mov.w	r3, #4294967295
 8001b64:	4618      	mov	r0, r3
 8001b66:	f009 ff9b 	bl	800baa0 <_Znaj>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	637b      	str	r3, [r7, #52]	@ 0x34
    _float_t* Ht = new _float_t[EKF_N * EKF_M];
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	6892      	ldr	r2, [r2, #8]
 8001b76:	fb02 f303 	mul.w	r3, r2, r3
 8001b7a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d201      	bcs.n	8001b86 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x4c>
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	e001      	b.n	8001b8a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x50>
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f009 ff88 	bl	800baa0 <_Znaj>
 8001b90:	4603      	mov	r3, r0
 8001b92:	633b      	str	r3, [r7, #48]	@ 0x30
    _transpose(H, Ht, EKF_M, EKF_N);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fa3b 	bl	8002020 <_ZN3EKF10_transposeEPKfPfii>
    _float_t* PHt = new _float_t[EKF_N * EKF_M];
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	6892      	ldr	r2, [r2, #8]
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d201      	bcs.n	8001bc2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x88>
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	e001      	b.n	8001bc6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x8c>
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f009 ff6a 	bl	800baa0 <_Znaj>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    _mulmat(ekf->P, Ht, PHt, EKF_N, EKF_N, EKF_M);
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	6858      	ldr	r0, [r3, #4]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	6852      	ldr	r2, [r2, #4]
 8001bdc:	68f9      	ldr	r1, [r7, #12]
 8001bde:	6889      	ldr	r1, [r1, #8]
 8001be0:	9102      	str	r1, [sp, #8]
 8001be2:	9201      	str	r2, [sp, #4]
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001bea:	4601      	mov	r1, r0
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f000 f965 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HP = new _float_t[EKF_M * EKF_N];
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	6852      	ldr	r2, [r2, #4]
 8001bfa:	fb02 f303 	mul.w	r3, r2, r3
 8001bfe:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d201      	bcs.n	8001c0a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd0>
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	e001      	b.n	8001c0e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0xd4>
 8001c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f009 ff46 	bl	800baa0 <_Znaj>
 8001c14:	4603      	mov	r3, r0
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    _mulmat(H, ekf->P, HP, EKF_M, EKF_N, EKF_N);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	6858      	ldr	r0, [r3, #4]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	6852      	ldr	r2, [r2, #4]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	6849      	ldr	r1, [r1, #4]
 8001c28:	9102      	str	r1, [sp, #8]
 8001c2a:	9201      	str	r2, [sp, #4]
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c30:	4602      	mov	r2, r0
 8001c32:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f941 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHt = new _float_t[EKF_M * EKF_M];
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	6892      	ldr	r2, [r2, #8]
 8001c42:	fb02 f303 	mul.w	r3, r2, r3
 8001c46:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d201      	bcs.n	8001c52 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x118>
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	e001      	b.n	8001c56 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x11c>
 8001c52:	f04f 33ff 	mov.w	r3, #4294967295
 8001c56:	4618      	mov	r0, r3
 8001c58:	f009 ff22 	bl	800baa0 <_Znaj>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	627b      	str	r3, [r7, #36]	@ 0x24
    _mulmat(HP, Ht, HpHt, EKF_M, EKF_N, EKF_M);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	6852      	ldr	r2, [r2, #4]
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	6889      	ldr	r1, [r1, #8]
 8001c6c:	9102      	str	r1, [sp, #8]
 8001c6e:	9201      	str	r2, [sp, #4]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001c76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f000 f91f 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    _float_t* HpHtR = new _float_t[EKF_M * EKF_M];
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	6892      	ldr	r2, [r2, #8]
 8001c86:	fb02 f303 	mul.w	r3, r2, r3
 8001c8a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d201      	bcs.n	8001c96 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x15c>
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	e001      	b.n	8001c9a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x160>
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f009 ff00 	bl	800baa0 <_Znaj>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	623b      	str	r3, [r7, #32]
    _addmat(HpHt, R, HpHtR, EKF_M, EKF_M);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	6892      	ldr	r2, [r2, #8]
 8001cac:	9201      	str	r2, [sp, #4]
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cb6:	68f8      	ldr	r0, [r7, #12]
 8001cb8:	f000 f9e8 	bl	800208c <_ZN3EKF7_addmatEPKfS1_Pfii>
    _float_t* HPHtRinv = new _float_t[EKF_M * EKF_M];
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	68fa      	ldr	r2, [r7, #12]
 8001cc2:	6892      	ldr	r2, [r2, #8]
 8001cc4:	fb02 f303 	mul.w	r3, r2, r3
 8001cc8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d201      	bcs.n	8001cd4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19a>
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	e001      	b.n	8001cd8 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x19e>
 8001cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f009 fee1 	bl	800baa0 <_Znaj>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	61fb      	str	r3, [r7, #28]
    if (!invert(HpHtR, HPHtRinv)) {
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	68f8      	ldr	r0, [r7, #12]
 8001ce8:	f000 fd1d 	bl	8002726 <_ZN3EKF6invertEPKfPf>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f083 0301 	eor.w	r3, r3, #1
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d02b      	beq.n	8001d50 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x216>
        delete[] G;
 8001cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d002      	beq.n	8001d04 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ca>
 8001cfe:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001d00:	f009 fecc 	bl	800ba9c <_ZdaPv>
        delete[] Ht;
 8001d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d002      	beq.n	8001d10 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1d6>
 8001d0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001d0c:	f009 fec6 	bl	800ba9c <_ZdaPv>
        delete[] PHt;
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d002      	beq.n	8001d1c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1e2>
 8001d16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001d18:	f009 fec0 	bl	800ba9c <_ZdaPv>
        delete[] HP;
 8001d1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d002      	beq.n	8001d28 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1ee>
 8001d22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001d24:	f009 feba 	bl	800ba9c <_ZdaPv>
        delete[] HpHt;
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x1fa>
 8001d2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001d30:	f009 feb4 	bl	800ba9c <_ZdaPv>
        delete[] HpHtR;
 8001d34:	6a3b      	ldr	r3, [r7, #32]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x206>
 8001d3a:	6a38      	ldr	r0, [r7, #32]
 8001d3c:	f009 feae 	bl	800ba9c <_ZdaPv>
        delete[] HPHtRinv;
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x212>
 8001d46:	69f8      	ldr	r0, [r7, #28]
 8001d48:	f009 fea8 	bl	800ba9c <_ZdaPv>
        return false;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	e0b1      	b.n	8001eb4 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x37a>
    }
    _mulmat(PHt, HPHtRinv, G, EKF_N, EKF_M, EKF_M);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	6892      	ldr	r2, [r2, #8]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	6889      	ldr	r1, [r1, #8]
 8001d5c:	9102      	str	r1, [sp, #8]
 8001d5e:	9201      	str	r2, [sp, #4]
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d64:	69fa      	ldr	r2, [r7, #28]
 8001d66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f8a7 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>

    // \hat{x}_k = \hat{x_k} + G_k(z_k - h(\hat{x}_k))
    _float_t* z_hx = new _float_t[EKF_M];
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d201      	bcs.n	8001d7e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x244>
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	e001      	b.n	8001d82 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x248>
 8001d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d82:	4618      	mov	r0, r3
 8001d84:	f009 fe8c 	bl	800baa0 <_Znaj>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
    _sub(z, hx, z_hx, EKF_M);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	68f8      	ldr	r0, [r7, #12]
 8001d9a:	f000 fc98 	bl	80026ce <_ZN3EKF4_subEPKfS1_Pfi>
    _float_t* Gz_hx = new _float_t[EKF_N];
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d201      	bcs.n	8001dae <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x274>
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	e001      	b.n	8001db2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x278>
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	4618      	mov	r0, r3
 8001db4:	f009 fe74 	bl	800baa0 <_Znaj>
 8001db8:	4603      	mov	r3, r0
 8001dba:	617b      	str	r3, [r7, #20]
    _mulvec(G, z_hx, Gz_hx, EKF_N, EKF_M);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	68fa      	ldr	r2, [r7, #12]
 8001dc2:	6892      	ldr	r2, [r2, #8]
 8001dc4:	9201      	str	r2, [sp, #4]
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	f000 f8dc 	bl	8001f8c <_ZN3EKF7_mulvecEPKfS1_Pfii>
    _addvec(ekf->x, Gz_hx, ekf->x, EKF_N);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6819      	ldr	r1, [r3, #0]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	4613      	mov	r3, r2
 8001de4:	697a      	ldr	r2, [r7, #20]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 fc45 	bl	8002676 <_ZN3EKF7_addvecEPKfS1_Pfi>

    // P_k = (I - G_k H_k) P_k
    _float_t* GH = new _float_t[EKF_N * EKF_N];
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	6852      	ldr	r2, [r2, #4]
 8001df4:	fb02 f303 	mul.w	r3, r2, r3
 8001df8:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d201      	bcs.n	8001e04 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ca>
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	e001      	b.n	8001e08 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x2ce>
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f009 fe49 	bl	800baa0 <_Znaj>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	613b      	str	r3, [r7, #16]
    _mulmat(G, H, GH, EKF_N, EKF_M, EKF_N);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	68fa      	ldr	r2, [r7, #12]
 8001e18:	6892      	ldr	r2, [r2, #8]
 8001e1a:	68f9      	ldr	r1, [r7, #12]
 8001e1c:	6849      	ldr	r1, [r1, #4]
 8001e1e:	9102      	str	r1, [sp, #8]
 8001e20:	9201      	str	r2, [sp, #4]
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001e28:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f000 f846 	bl	8001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>
    ekf_update_step3(ekf, GH);
 8001e30:	693a      	ldr	r2, [r7, #16]
 8001e32:	68b9      	ldr	r1, [r7, #8]
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fe30 	bl	8001a9a <_ZN3EKF16ekf_update_step3EP5ekf_tPf>

    delete[] G;
 8001e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d002      	beq.n	8001e46 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x30c>
 8001e40:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001e42:	f009 fe2b 	bl	800ba9c <_ZdaPv>
    delete[] Ht;
 8001e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x318>
 8001e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001e4e:	f009 fe25 	bl	800ba9c <_ZdaPv>
    delete[] PHt;
 8001e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d002      	beq.n	8001e5e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x324>
 8001e58:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001e5a:	f009 fe1f 	bl	800ba9c <_ZdaPv>
    delete[] HP;
 8001e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x330>
 8001e64:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001e66:	f009 fe19 	bl	800ba9c <_ZdaPv>
    delete[] HpHt;
 8001e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d002      	beq.n	8001e76 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x33c>
 8001e70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001e72:	f009 fe13 	bl	800ba9c <_ZdaPv>
    delete[] HpHtR;
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x348>
 8001e7c:	6a38      	ldr	r0, [r7, #32]
 8001e7e:	f009 fe0d 	bl	800ba9c <_ZdaPv>
    delete[] HPHtRinv;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x354>
 8001e88:	69f8      	ldr	r0, [r7, #28]
 8001e8a:	f009 fe07 	bl	800ba9c <_ZdaPv>
    delete[] z_hx;
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x360>
 8001e94:	69b8      	ldr	r0, [r7, #24]
 8001e96:	f009 fe01 	bl	800ba9c <_ZdaPv>
    delete[] Gz_hx;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x36c>
 8001ea0:	6978      	ldr	r0, [r7, #20]
 8001ea2:	f009 fdfb 	bl	800ba9c <_ZdaPv>
    delete[] GH;
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d002      	beq.n	8001eb2 <_ZN3EKF10ekf_updateEP5ekf_tPKfS3_S3_S3_+0x378>
 8001eac:	6938      	ldr	r0, [r7, #16]
 8001eae:	f009 fdf5 	bl	800ba9c <_ZdaPv>

    // success
    return true;
 8001eb2:	2301      	movs	r3, #1
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3738      	adds	r7, #56	@ 0x38
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_ZN3EKF7_mulmatEPKfS1_Pfiii>:
        const _float_t * b,
        _float_t * c,
        const int arows,
        const int acols,
        const int bcols)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	@ 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
 8001ec8:	603b      	str	r3, [r7, #0]
    for (int i=0; i<arows; ++i) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e052      	b.n	8001f76 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xba>
        for (int j=0; j<bcols; ++j) {
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	e048      	b.n	8001f68 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0xac>
            c[i*bcols+j] = 0;
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eda:	fb03 f202 	mul.w	r2, r3, r2
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
            for (int k=0; k<acols; ++k) {
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
 8001ef2:	e032      	b.n	8001f5a <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x9e>
                c[i*bcols+j] += a[i*acols+k] * b[k*bcols+j];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001ef8:	fb03 f202 	mul.w	r2, r3, r2
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	4413      	add	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	ed93 7a00 	vldr	s14, [r3]
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f0e:	fb03 f202 	mul.w	r2, r3, r2
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	edd3 6a00 	vldr	s13, [r3]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f24:	fb03 f202 	mul.w	r2, r3, r2
 8001f28:	69bb      	ldr	r3, [r7, #24]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	687a      	ldr	r2, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f3a:	69fb      	ldr	r3, [r7, #28]
 8001f3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f3e:	fb03 f202 	mul.w	r2, r3, r2
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	edc3 7a00 	vstr	s15, [r3]
            for (int k=0; k<acols; ++k) {
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3301      	adds	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	dbc8      	blt.n	8001ef4 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x38>
        for (int j=0; j<bcols; ++j) {
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	3301      	adds	r3, #1
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbb2      	blt.n	8001ed6 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x1a>
    for (int i=0; i<arows; ++i) {
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	3301      	adds	r3, #1
 8001f74:	61fb      	str	r3, [r7, #28]
 8001f76:	69fa      	ldr	r2, [r7, #28]
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	dba8      	blt.n	8001ed0 <_ZN3EKF7_mulmatEPKfS1_Pfiii+0x14>
            }
        }
    }
}
 8001f7e:	bf00      	nop
 8001f80:	bf00      	nop
 8001f82:	3724      	adds	r7, #36	@ 0x24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_ZN3EKF7_mulvecEPKfS1_Pfii>:
        const _float_t * a,
        const _float_t * x,
        _float_t * y,
        const int m,
        const int n)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	60b9      	str	r1, [r7, #8]
 8001f96:	607a      	str	r2, [r7, #4]
 8001f98:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	e034      	b.n	800200a <_ZN3EKF7_mulvecEPKfS1_Pfii+0x7e>
        y[i] = 0;
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j)
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e023      	b.n	8001ffc <_ZN3EKF7_mulvecEPKfS1_Pfii+0x70>
            y[i] += x[j] * a[i*n+j];
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	ed93 7a00 	vldr	s14, [r3]
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	edd3 6a00 	vldr	s13, [r3]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd0:	fb03 f202 	mul.w	r2, r3, r2
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	68ba      	ldr	r2, [r7, #8]
 8001fdc:	4413      	add	r3, r2
 8001fde:	edd3 7a00 	vldr	s15, [r3]
 8001fe2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff2:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	613b      	str	r3, [r7, #16]
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002000:	429a      	cmp	r2, r3
 8002002:	dbd7      	blt.n	8001fb4 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x28>
    for (int i=0; i<m; ++i) {
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	429a      	cmp	r2, r3
 8002010:	dbc6      	blt.n	8001fa0 <_ZN3EKF7_mulvecEPKfS1_Pfii+0x14>
    }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <_ZN3EKF10_transposeEPKfPfii>:

/// @private
 void EKF::_transpose(
        const _float_t * a, _float_t * at, const int m, const int n)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
 800202c:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e020      	b.n	8002076 <_ZN3EKF10_transposeEPKfPfii+0x56>
        for (int j=0; j<n; ++j) {
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e016      	b.n	8002068 <_ZN3EKF10_transposeEPKfPfii+0x48>
            at[j*m+i] = a[i*n+j];
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	6a3a      	ldr	r2, [r7, #32]
 800203e:	fb03 f202 	mul.w	r2, r3, r2
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	68ba      	ldr	r2, [r7, #8]
 800204a:	441a      	add	r2, r3
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	6839      	ldr	r1, [r7, #0]
 8002050:	fb03 f101 	mul.w	r1, r3, r1
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	440b      	add	r3, r1
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	440b      	add	r3, r1
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	601a      	str	r2, [r3, #0]
        for (int j=0; j<n; ++j) {
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	3301      	adds	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	6a3b      	ldr	r3, [r7, #32]
 800206c:	429a      	cmp	r2, r3
 800206e:	dbe4      	blt.n	800203a <_ZN3EKF10_transposeEPKfPfii+0x1a>
    for (int i=0; i<m; ++i)
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	3301      	adds	r3, #1
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	429a      	cmp	r2, r3
 800207c:	dbda      	blt.n	8002034 <_ZN3EKF10_transposeEPKfPfii+0x14>
        }
}
 800207e:	bf00      	nop
 8002080:	bf00      	nop
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <_ZN3EKF7_addmatEPKfS1_Pfii>:

/// @private
 void EKF::_addmat(
        const _float_t * a, const _float_t * b, _float_t * c,
        const int m, const int n)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
 8002098:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
 800209e:	e02f      	b.n	8002100 <_ZN3EKF7_addmatEPKfS1_Pfii+0x74>
        for (int j=0; j<n; ++j) {
 80020a0:	2300      	movs	r3, #0
 80020a2:	613b      	str	r3, [r7, #16]
 80020a4:	e025      	b.n	80020f2 <_ZN3EKF7_addmatEPKfS1_Pfii+0x66>
            c[i*n+j] = a[i*n+j] + b[i*n+j];
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020aa:	fb03 f202 	mul.w	r2, r3, r2
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	68ba      	ldr	r2, [r7, #8]
 80020b6:	4413      	add	r3, r2
 80020b8:	ed93 7a00 	vldr	s14, [r3]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020c0:	fb03 f202 	mul.w	r2, r3, r2
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	4413      	add	r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	edd3 7a00 	vldr	s15, [r3]
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020d6:	fb03 f202 	mul.w	r2, r3, r2
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	3301      	adds	r3, #1
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbd5      	blt.n	80020a6 <_ZN3EKF7_addmatEPKfS1_Pfii+0x1a>
    for (int i=0; i<m; ++i) {
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	3301      	adds	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbcb      	blt.n	80020a0 <_ZN3EKF7_addmatEPKfS1_Pfii+0x14>
        }
    }
}
 8002108:	bf00      	nop
 800210a:	bf00      	nop
 800210c:	371c      	adds	r7, #28
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr

08002116 <_ZN3EKF7_negateEPfii>:

/// @private
 void EKF::_negate(_float_t * a, const int m, const int n)
{
 8002116:	b480      	push	{r7}
 8002118:	b087      	sub	sp, #28
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	603b      	str	r3, [r7, #0]
    for (int i=0; i<m; ++i) {
 8002124:	2300      	movs	r3, #0
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	e024      	b.n	8002174 <_ZN3EKF7_negateEPfii+0x5e>
        for (int j=0; j<n; ++j) {
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e01a      	b.n	8002166 <_ZN3EKF7_negateEPfii+0x50>
            a[i*n+j] = -a[i*n+j];
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	fb03 f202 	mul.w	r2, r3, r2
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	4413      	add	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	68ba      	ldr	r2, [r7, #8]
 8002140:	4413      	add	r3, r2
 8002142:	edd3 7a00 	vldr	s15, [r3]
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	fb03 f202 	mul.w	r2, r3, r2
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	4413      	add	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	4413      	add	r3, r2
 8002158:	eef1 7a67 	vneg.f32	s15, s15
 800215c:	edc3 7a00 	vstr	s15, [r3]
        for (int j=0; j<n; ++j) {
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	3301      	adds	r3, #1
 8002164:	613b      	str	r3, [r7, #16]
 8002166:	693a      	ldr	r2, [r7, #16]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	dbe0      	blt.n	8002130 <_ZN3EKF7_negateEPfii+0x1a>
    for (int i=0; i<m; ++i) {
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3301      	adds	r3, #1
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	429a      	cmp	r2, r3
 800217a:	dbd6      	blt.n	800212a <_ZN3EKF7_negateEPfii+0x14>
        }
    }
}
 800217c:	bf00      	nop
 800217e:	bf00      	nop
 8002180:	371c      	adds	r7, #28
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_ZN3EKF7_addeyeEPfi>:

/// @private
 void EKF::_addeye(_float_t * a, const int n)
{
 800218a:	b480      	push	{r7}
 800218c:	b087      	sub	sp, #28
 800218e:	af00      	add	r7, sp, #0
 8002190:	60f8      	str	r0, [r7, #12]
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
    for (int i=0; i<n; ++i) {
 8002196:	2300      	movs	r3, #0
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	e01c      	b.n	80021d6 <_ZN3EKF7_addeyeEPfi+0x4c>
        a[i*n+i] += 1;
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	fb03 f202 	mul.w	r2, r3, r2
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	4413      	add	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	4413      	add	r3, r2
 80021ae:	edd3 7a00 	vldr	s15, [r3]
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	68ba      	ldr	r2, [r7, #8]
 80021c2:	4413      	add	r3, r2
 80021c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80021c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021cc:	edc3 7a00 	vstr	s15, [r3]
    for (int i=0; i<n; ++i) {
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	3301      	adds	r3, #1
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbde      	blt.n	800219c <_ZN3EKF7_addeyeEPfi+0x12>
    }
}
 80021de:	bf00      	nop
 80021e0:	bf00      	nop
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <_ZN3EKF8_choldc1EPfS0_i>:
/* Cholesky-decomposition matrix-inversion code, adapated from
http://jean-pierre.moreau.pagesperso-orange.fr/Cplus/_choles_cpp.txt */

/// @private
 int EKF::_choldc1(_float_t * a, _float_t * p, const int n)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b089      	sub	sp, #36	@ 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
 80021f8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 80021fa:	2300      	movs	r3, #0
 80021fc:	61fb      	str	r3, [r7, #28]
 80021fe:	e06e      	b.n	80022de <_ZN3EKF8_choldc1EPfS0_i+0xf2>
        for (int j = i; j < n; j++) {
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	e064      	b.n	80022d0 <_ZN3EKF8_choldc1EPfS0_i+0xe4>
            _float_t sum = a[i*n+j];
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	fb03 f202 	mul.w	r2, r3, r2
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	4413      	add	r3, r2
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e020      	b.n	8002266 <_ZN3EKF8_choldc1EPfS0_i+0x7a>
                sum -= a[i*n+k] * a[j*n+k];
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	fb03 f202 	mul.w	r2, r3, r2
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	68ba      	ldr	r2, [r7, #8]
 8002234:	4413      	add	r3, r2
 8002236:	ed93 7a00 	vldr	s14, [r3]
 800223a:	69bb      	ldr	r3, [r7, #24]
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	fb03 f202 	mul.w	r2, r3, r2
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4413      	add	r3, r2
 800224c:	edd3 7a00 	vldr	s15, [r3]
 8002250:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002254:	ed97 7a05 	vldr	s14, [r7, #20]
 8002258:	ee77 7a67 	vsub.f32	s15, s14, s15
 800225c:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i - 1; k >= 0; k--) {
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	3b01      	subs	r3, #1
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	dadb      	bge.n	8002224 <_ZN3EKF8_choldc1EPfS0_i+0x38>
            }
            if (i == j) {
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	429a      	cmp	r2, r3
 8002272:	d115      	bne.n	80022a0 <_ZN3EKF8_choldc1EPfS0_i+0xb4>
                if (sum <= 0) {
 8002274:	edd7 7a05 	vldr	s15, [r7, #20]
 8002278:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800227c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002280:	d801      	bhi.n	8002286 <_ZN3EKF8_choldc1EPfS0_i+0x9a>
                    return 1; /* error */
 8002282:	2301      	movs	r3, #1
 8002284:	e030      	b.n	80022e8 <_ZN3EKF8_choldc1EPfS0_i+0xfc>
                }
                p[i] = sqrt(sum);
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	18d4      	adds	r4, r2, r3
 800228e:	ed97 0a05 	vldr	s0, [r7, #20]
 8002292:	f7ff fa97 	bl	80017c4 <_ZSt4sqrtf>
 8002296:	eef0 7a40 	vmov.f32	s15, s0
 800229a:	edc4 7a00 	vstr	s15, [r4]
 800229e:	e014      	b.n	80022ca <_ZN3EKF8_choldc1EPfS0_i+0xde>
            }
            else {
                a[j*n+i] = sum / p[i];
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	4413      	add	r3, r2
 80022a8:	ed93 7a00 	vldr	s14, [r3]
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	683a      	ldr	r2, [r7, #0]
 80022b0:	fb03 f202 	mul.w	r2, r3, r2
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	4413      	add	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	4413      	add	r3, r2
 80022be:	edd7 6a05 	vldr	s13, [r7, #20]
 80022c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c6:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i; j < n; j++) {
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	3301      	adds	r3, #1
 80022ce:	61bb      	str	r3, [r7, #24]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	db96      	blt.n	8002206 <_ZN3EKF8_choldc1EPfS0_i+0x1a>
    for (int i = 0; i < n; i++) {
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	3301      	adds	r3, #1
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	69fa      	ldr	r2, [r7, #28]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	db8c      	blt.n	8002200 <_ZN3EKF8_choldc1EPfS0_i+0x14>
            }
        }
    }

    return 0; // success:w
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3724      	adds	r7, #36	@ 0x24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd90      	pop	{r4, r7, pc}

080022f0 <_ZN3EKF9_choldcslEPKfPfS2_i>:

/// @private
 int EKF::_choldcsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b08a      	sub	sp, #40	@ 0x28
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
 80022fc:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < n; i++) {
 80022fe:	2300      	movs	r3, #0
 8002300:	627b      	str	r3, [r7, #36]	@ 0x24
 8002302:	e020      	b.n	8002346 <_ZN3EKF9_choldcslEPKfPfS2_i+0x56>
        for (int j = 0; j < n; j++) {
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
 8002308:	e016      	b.n	8002338 <_ZN3EKF9_choldcslEPKfPfS2_i+0x48>
            a[i*n+j] = A[i*n+j];
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800230e:	fb03 f202 	mul.w	r2, r3, r2
 8002312:	6a3b      	ldr	r3, [r7, #32]
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	441a      	add	r2, r3
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002320:	fb03 f101 	mul.w	r1, r3, r1
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	440b      	add	r3, r1
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	440b      	add	r3, r1
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < n; j++) {
 8002332:	6a3b      	ldr	r3, [r7, #32]
 8002334:	3301      	adds	r3, #1
 8002336:	623b      	str	r3, [r7, #32]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800233c:	429a      	cmp	r2, r3
 800233e:	dbe4      	blt.n	800230a <_ZN3EKF9_choldcslEPKfPfS2_i+0x1a>
    for (int i = 0; i < n; i++) {
 8002340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002342:	3301      	adds	r3, #1
 8002344:	627b      	str	r3, [r7, #36]	@ 0x24
 8002346:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800234a:	429a      	cmp	r2, r3
 800234c:	dbda      	blt.n	8002304 <_ZN3EKF9_choldcslEPKfPfS2_i+0x14>
        }
    }
    if (_choldc1(a, p, n)) {
 800234e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002350:	683a      	ldr	r2, [r7, #0]
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ff49 	bl	80021ec <_ZN3EKF8_choldc1EPfS0_i>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	bf14      	ite	ne
 8002360:	2301      	movne	r3, #1
 8002362:	2300      	moveq	r3, #0
 8002364:	b2db      	uxtb	r3, r3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <_ZN3EKF9_choldcslEPKfPfS2_i+0x7e>
        return 1;
 800236a:	2301      	movs	r3, #1
 800236c:	e06a      	b.n	8002444 <_ZN3EKF9_choldcslEPKfPfS2_i+0x154>
    }
    for (int i = 0; i < n; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	e062      	b.n	800243a <_ZN3EKF9_choldcslEPKfPfS2_i+0x14a>
        a[i*n+i] = 1 / p[i];
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	4413      	add	r3, r2
 800237c:	ed93 7a00 	vldr	s14, [r3]
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002384:	fb03 f202 	mul.w	r2, r3, r2
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	4413      	add	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	4413      	add	r3, r2
 8002392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800239a:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	3301      	adds	r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	e042      	b.n	800242c <_ZN3EKF9_choldcslEPKfPfS2_i+0x13c>
            _float_t sum = 0;
 80023a6:	f04f 0300 	mov.w	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
            for (int k = i; k < j; k++) {
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	e020      	b.n	80023f4 <_ZN3EKF9_choldcslEPKfPfS2_i+0x104>
                sum -= a[j*n+k] * a[k*n+i];
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023b6:	fb03 f202 	mul.w	r2, r3, r2
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	ed93 7a00 	vldr	s14, [r3]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023cc:	fb03 f202 	mul.w	r2, r3, r2
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	edd3 7a00 	vldr	s15, [r3]
 80023de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e2:	ed97 7a05 	vldr	s14, [r7, #20]
 80023e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ea:	edc7 7a05 	vstr	s15, [r7, #20]
            for (int k = i; k < j; k++) {
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	3301      	adds	r3, #1
 80023f2:	613b      	str	r3, [r7, #16]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	69bb      	ldr	r3, [r7, #24]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	dbda      	blt.n	80023b2 <_ZN3EKF9_choldcslEPKfPfS2_i+0xc2>
            }
            a[j*n+i] = sum / p[j];
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	4413      	add	r3, r2
 8002404:	ed93 7a00 	vldr	s14, [r3]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800240c:	fb03 f202 	mul.w	r2, r3, r2
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	4413      	add	r3, r2
 800241a:	edd7 6a05 	vldr	s13, [r7, #20]
 800241e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002422:	edc3 7a00 	vstr	s15, [r3]
        for (int j = i + 1; j < n; j++) {
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	3301      	adds	r3, #1
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002430:	429a      	cmp	r2, r3
 8002432:	dbb8      	blt.n	80023a6 <_ZN3EKF9_choldcslEPKfPfS2_i+0xb6>
    for (int i = 0; i < n; i++) {
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800243e:	429a      	cmp	r2, r3
 8002440:	db98      	blt.n	8002374 <_ZN3EKF9_choldcslEPKfPfS2_i+0x84>
        }
    }

    return 0; // success
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	@ 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <_ZN3EKF7_cholslEPKfPfS2_i>:

/// @private
 int EKF::_cholsl(const _float_t * A, _float_t * a, _float_t * p, const int n)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	@ 0x38
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
    if (_choldcsl(A,a,p,n)) {
 800245a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff43 	bl	80022f0 <_ZN3EKF9_choldcslEPKfPfS2_i>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf14      	ite	ne
 8002470:	2301      	movne	r3, #1
 8002472:	2300      	moveq	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <_ZN3EKF7_cholslEPKfPfS2_i+0x32>
        return 1;
 800247a:	2301      	movs	r3, #1
 800247c:	e0f7      	b.n	800266e <_ZN3EKF7_cholslEPKfPfS2_i+0x222>
    }

    for (int i = 0; i < n; i++) {
 800247e:	2300      	movs	r3, #0
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002482:	e019      	b.n	80024b8 <_ZN3EKF7_cholslEPKfPfS2_i+0x6c>
        for (int j = i + 1; j < n; j++) {
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002486:	3301      	adds	r3, #1
 8002488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800248a:	e00e      	b.n	80024aa <_ZN3EKF7_cholslEPKfPfS2_i+0x5e>
            a[i*n+j] = 0.0;
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002490:	fb03 f202 	mul.w	r2, r3, r2
 8002494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4413      	add	r3, r2
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
        for (int j = i + 1; j < n; j++) {
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	3301      	adds	r3, #1
 80024a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80024ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024ae:	429a      	cmp	r2, r3
 80024b0:	dbec      	blt.n	800248c <_ZN3EKF7_cholslEPKfPfS2_i+0x40>
    for (int i = 0; i < n; i++) {
 80024b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024b4:	3301      	adds	r3, #1
 80024b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024bc:	429a      	cmp	r2, r3
 80024be:	dbe1      	blt.n	8002484 <_ZN3EKF7_cholslEPKfPfS2_i+0x38>
        }
    }
    for (int i = 0; i < n; i++) {
 80024c0:	2300      	movs	r3, #0
 80024c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c4:	e0a5      	b.n	8002612 <_ZN3EKF7_cholslEPKfPfS2_i+0x1c6>
        a[i*n+i] *= a[i*n+i];
 80024c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	4413      	add	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	4413      	add	r3, r2
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024e0:	fb03 f202 	mul.w	r2, r3, r2
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	4413      	add	r3, r2
 8002504:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002508:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 800250c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250e:	3301      	adds	r3, #1
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	e032      	b.n	800257a <_ZN3EKF7_cholslEPKfPfS2_i+0x12e>
            a[i*n+i] += a[k*n+i] * a[k*n+i];
 8002514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002516:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002518:	fb03 f202 	mul.w	r2, r3, r2
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	4413      	add	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	6a3b      	ldr	r3, [r7, #32]
 800252c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800252e:	fb03 f202 	mul.w	r2, r3, r2
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	edd3 6a00 	vldr	s13, [r3]
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002544:	fb03 f202 	mul.w	r2, r3, r2
 8002548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4413      	add	r3, r2
 8002552:	edd3 7a00 	vldr	s15, [r3]
 8002556:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800255e:	fb03 f202 	mul.w	r2, r3, r2
 8002562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	4413      	add	r3, r2
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	edc3 7a00 	vstr	s15, [r3]
        for (int k = i + 1; k < n; k++) {
 8002574:	6a3b      	ldr	r3, [r7, #32]
 8002576:	3301      	adds	r3, #1
 8002578:	623b      	str	r3, [r7, #32]
 800257a:	6a3a      	ldr	r2, [r7, #32]
 800257c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800257e:	429a      	cmp	r2, r3
 8002580:	dbc8      	blt.n	8002514 <_ZN3EKF7_cholslEPKfPfS2_i+0xc8>
        }
        for (int j = i + 1; j < n; j++) {
 8002582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002584:	3301      	adds	r3, #1
 8002586:	61fb      	str	r3, [r7, #28]
 8002588:	e03c      	b.n	8002604 <_ZN3EKF7_cholslEPKfPfS2_i+0x1b8>
            for (int k = j; k < n; k++) {
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	61bb      	str	r3, [r7, #24]
 800258e:	e032      	b.n	80025f6 <_ZN3EKF7_cholslEPKfPfS2_i+0x1aa>
                a[i*n+j] += a[k*n+i] * a[k*n+j];
 8002590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002592:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002594:	fb03 f202 	mul.w	r2, r3, r2
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	ed93 7a00 	vldr	s14, [r3]
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025aa:	fb03 f202 	mul.w	r2, r3, r2
 80025ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	4413      	add	r3, r2
 80025b8:	edd3 6a00 	vldr	s13, [r3]
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025c0:	fb03 f202 	mul.w	r2, r3, r2
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	edd3 7a00 	vldr	s15, [r3]
 80025d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80025da:	fb03 f202 	mul.w	r2, r3, r2
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	4413      	add	r3, r2
 80025e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ec:	edc3 7a00 	vstr	s15, [r3]
            for (int k = j; k < n; k++) {
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61bb      	str	r3, [r7, #24]
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025fa:	429a      	cmp	r2, r3
 80025fc:	dbc8      	blt.n	8002590 <_ZN3EKF7_cholslEPKfPfS2_i+0x144>
        for (int j = i + 1; j < n; j++) {
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	3301      	adds	r3, #1
 8002602:	61fb      	str	r3, [r7, #28]
 8002604:	69fa      	ldr	r2, [r7, #28]
 8002606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002608:	429a      	cmp	r2, r3
 800260a:	dbbe      	blt.n	800258a <_ZN3EKF7_cholslEPKfPfS2_i+0x13e>
    for (int i = 0; i < n; i++) {
 800260c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260e:	3301      	adds	r3, #1
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
 8002612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002616:	429a      	cmp	r2, r3
 8002618:	f6ff af55 	blt.w	80024c6 <_ZN3EKF7_cholslEPKfPfS2_i+0x7a>
            }
        }
    }
    for (int i = 0; i < n; i++) {
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
 8002620:	e020      	b.n	8002664 <_ZN3EKF7_cholslEPKfPfS2_i+0x218>
        for (int j = 0; j < i; j++) {
 8002622:	2300      	movs	r3, #0
 8002624:	613b      	str	r3, [r7, #16]
 8002626:	e016      	b.n	8002656 <_ZN3EKF7_cholslEPKfPfS2_i+0x20a>
            a[i*n+j] = a[j*n+i];
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800262c:	fb03 f202 	mul.w	r2, r3, r2
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	4413      	add	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	441a      	add	r2, r3
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800263e:	fb03 f101 	mul.w	r1, r3, r1
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	440b      	add	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	6879      	ldr	r1, [r7, #4]
 800264a:	440b      	add	r3, r1
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < i; j++) {
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3301      	adds	r3, #1
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	429a      	cmp	r2, r3
 800265c:	dbe4      	blt.n	8002628 <_ZN3EKF7_cholslEPKfPfS2_i+0x1dc>
    for (int i = 0; i < n; i++) {
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3301      	adds	r3, #1
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697a      	ldr	r2, [r7, #20]
 8002666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002668:	429a      	cmp	r2, r3
 800266a:	dbda      	blt.n	8002622 <_ZN3EKF7_cholslEPKfPfS2_i+0x1d6>
        }
    }

    return 0; // success
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3730      	adds	r7, #48	@ 0x30
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <_ZN3EKF7_addvecEPKfS1_Pfi>:

/// @private
 void EKF::_addvec(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 8002676:	b480      	push	{r7}
 8002678:	b087      	sub	sp, #28
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
 8002682:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 8002684:	2300      	movs	r3, #0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	e016      	b.n	80026b8 <_ZN3EKF7_addvecEPKfS1_Pfi+0x42>
        c[j] = a[j] + b[j];
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4413      	add	r3, r2
 8002692:	ed93 7a00 	vldr	s14, [r3]
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	edd3 7a00 	vldr	s15, [r3]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	683a      	ldr	r2, [r7, #0]
 80026a8:	4413      	add	r3, r2
 80026aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026ae:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	3301      	adds	r3, #1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	429a      	cmp	r2, r3
 80026be:	dbe4      	blt.n	800268a <_ZN3EKF7_addvecEPKfS1_Pfi+0x14>
    }
}
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	371c      	adds	r7, #28
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <_ZN3EKF4_subEPKfS1_Pfi>:

/// @private
 void EKF::_sub(
        const _float_t * a, const _float_t * b, _float_t * c, const int n)
{
 80026ce:	b480      	push	{r7}
 80026d0:	b087      	sub	sp, #28
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	60f8      	str	r0, [r7, #12]
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	603b      	str	r3, [r7, #0]
    for (int j=0; j<n; ++j) {
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
 80026e0:	e016      	b.n	8002710 <_ZN3EKF4_subEPKfS1_Pfi+0x42>
        c[j] = a[j] - b[j];
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	68ba      	ldr	r2, [r7, #8]
 80026e8:	4413      	add	r3, r2
 80026ea:	ed93 7a00 	vldr	s14, [r3]
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	4413      	add	r3, r2
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	683a      	ldr	r2, [r7, #0]
 8002700:	4413      	add	r3, r2
 8002702:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002706:	edc3 7a00 	vstr	s15, [r3]
    for (int j=0; j<n; ++j) {
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	3301      	adds	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	6a3b      	ldr	r3, [r7, #32]
 8002714:	429a      	cmp	r2, r3
 8002716:	dbe4      	blt.n	80026e2 <_ZN3EKF4_subEPKfS1_Pfi+0x14>
    }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	371c      	adds	r7, #28
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <_ZN3EKF6invertEPKfPf>:

/// @private
 bool EKF::invert(const _float_t * a, _float_t * ainv)
{
 8002726:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800272a:	b089      	sub	sp, #36	@ 0x24
 800272c:	af02      	add	r7, sp, #8
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
    _float_t tmp[EKF_M];

    return _cholsl(a, ainv, tmp, EKF_M) == 0;
}
 8002734:	466b      	mov	r3, sp
 8002736:	461e      	mov	r6, r3
    _float_t tmp[EKF_M];
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	1e4b      	subs	r3, r1, #1
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	460a      	mov	r2, r1
 8002742:	2300      	movs	r3, #0
 8002744:	4690      	mov	r8, r2
 8002746:	4699      	mov	r9, r3
 8002748:	f04f 0200 	mov.w	r2, #0
 800274c:	f04f 0300 	mov.w	r3, #0
 8002750:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8002754:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002758:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800275c:	460a      	mov	r2, r1
 800275e:	2300      	movs	r3, #0
 8002760:	4614      	mov	r4, r2
 8002762:	461d      	mov	r5, r3
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	016b      	lsls	r3, r5, #5
 800276e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8002772:	0162      	lsls	r2, r4, #5
 8002774:	460b      	mov	r3, r1
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3307      	adds	r3, #7
 800277a:	08db      	lsrs	r3, r3, #3
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	ebad 0d03 	sub.w	sp, sp, r3
 8002782:	ab02      	add	r3, sp, #8
 8002784:	3303      	adds	r3, #3
 8002786:	089b      	lsrs	r3, r3, #2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	613b      	str	r3, [r7, #16]
    return _cholsl(a, ainv, tmp, EKF_M) == 0;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68b9      	ldr	r1, [r7, #8]
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff fe57 	bl	800244c <_ZN3EKF7_cholslEPKfPfS2_i>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	46b5      	mov	sp, r6
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	371c      	adds	r7, #28
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080027b6 <_ZSt4fmodff>:
  { return __builtin_fmodf(__x, __y); }
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80027c0:	edc7 0a00 	vstr	s1, [r7]
 80027c4:	edd7 0a00 	vldr	s1, [r7]
 80027c8:	ed97 0a01 	vldr	s0, [r7, #4]
 80027cc:	f009 f9f6 	bl	800bbbc <fmodf>
 80027d0:	eef0 7a40 	vmov.f32	s15, s0
 80027d4:	eeb0 0a67 	vmov.f32	s0, s15
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <_Z4_sinf>:


// function approximating the sine calculation by using fixed size array
// uses a 65 element lookup table and interpolation
// thanks to @dekutree for his work on optimizing this
__attribute__((weak)) float _sin(float a){
 80027e0:	b480      	push	{r7}
 80027e2:	b087      	sub	sp, #28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	ed87 0a01 	vstr	s0, [r7, #4]
  // 16bit integer array for sine lookup. interpolation is used for better precision
  // 16 bit precision on sine value, 8 bit fractional value for interpolation, 6bit LUT size
  // resulting precision compared to stdlib sine is 0.00006480 (RMS difference in range -PI,PI for 3217 steps)
  static uint16_t sine_array[65] = {0,804,1608,2411,3212,4011,4808,5602,6393,7180,7962,8740,9512,10279,11039,11793,12540,13279,14010,14733,15447,16151,16846,17531,18205,18868,19520,20160,20788,21403,22006,22595,23170,23732,24279,24812,25330,25833,26320,26791,27246,27684,28106,28511,28899,29269,29622,29957,30274,30572,30853,31114,31357,31581,31786,31972,32138,32286,32413,32522,32610,32679,32729,32758,32768};
  unsigned int i = (unsigned int)(a * (64*4*256.0f/_2PI));
 80027ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80027ee:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80028c4 <_Z4_sinf+0xe4>
 80027f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fa:	ee17 3a90 	vmov	r3, s15
 80027fe:	60fb      	str	r3, [r7, #12]
  int t1, t2, frac = i & 0xff;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	b2db      	uxtb	r3, r3
 8002804:	60bb      	str	r3, [r7, #8]
  i = (i >> 8) & 0xff;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b2db      	uxtb	r3, r3
 800280c:	60fb      	str	r3, [r7, #12]
  if (i < 64) {
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b3f      	cmp	r3, #63	@ 0x3f
 8002812:	d80b      	bhi.n	800282c <_Z4_sinf+0x4c>
    t1 = sine_array[i]; t2 = sine_array[i+1];
 8002814:	4a2c      	ldr	r2, [pc, #176]	@ (80028c8 <_Z4_sinf+0xe8>)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800281c:	617b      	str	r3, [r7, #20]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	3301      	adds	r3, #1
 8002822:	4a29      	ldr	r2, [pc, #164]	@ (80028c8 <_Z4_sinf+0xe8>)
 8002824:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002828:	613b      	str	r3, [r7, #16]
 800282a:	e033      	b.n	8002894 <_Z4_sinf+0xb4>
  }
  else if(i < 128) {
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002830:	d80e      	bhi.n	8002850 <_Z4_sinf+0x70>
    t1 = sine_array[128 - i]; t2 = sine_array[127 - i];
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8002838:	4a23      	ldr	r2, [pc, #140]	@ (80028c8 <_Z4_sinf+0xe8>)
 800283a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8002846:	4a20      	ldr	r2, [pc, #128]	@ (80028c8 <_Z4_sinf+0xe8>)
 8002848:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	e021      	b.n	8002894 <_Z4_sinf+0xb4>
  }
  else if(i < 192) {
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2bbf      	cmp	r3, #191	@ 0xbf
 8002854:	d80e      	bhi.n	8002874 <_Z4_sinf+0x94>
    t1 = -sine_array[-128 + i]; t2 = -sine_array[-127 + i];
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3b80      	subs	r3, #128	@ 0x80
 800285a:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <_Z4_sinf+0xe8>)
 800285c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002860:	425b      	negs	r3, r3
 8002862:	617b      	str	r3, [r7, #20]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	3b7f      	subs	r3, #127	@ 0x7f
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <_Z4_sinf+0xe8>)
 800286a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800286e:	425b      	negs	r3, r3
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	e00f      	b.n	8002894 <_Z4_sinf+0xb4>
  }
  else {
    t1 = -sine_array[256 - i]; t2 = -sine_array[255 - i];
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800287a:	4a13      	ldr	r2, [pc, #76]	@ (80028c8 <_Z4_sinf+0xe8>)
 800287c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002880:	425b      	negs	r3, r3
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800288a:	4a0f      	ldr	r2, [pc, #60]	@ (80028c8 <_Z4_sinf+0xe8>)
 800288c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002890:	425b      	negs	r3, r3
 8002892:	613b      	str	r3, [r7, #16]
  }
  return (1.0f/32768.0f) * (t1 + (((t2 - t1) * frac) >> 8));
 8002894:	693a      	ldr	r2, [r7, #16]
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	fb02 f303 	mul.w	r3, r2, r3
 80028a0:	121a      	asrs	r2, r3, #8
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	4413      	add	r3, r2
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028ae:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80028cc <_Z4_sinf+0xec>
 80028b2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028b6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	4622f983 	.word	0x4622f983
 80028c8:	20000014 	.word	0x20000014
 80028cc:	38000000 	.word	0x38000000

080028d0 <_Z4_cosf>:
// function approximating cosine calculation by using fixed size array
// ~55us (float array)
// ~56us (int array)
// precision +-0.005
// it has to receive an angle in between 0 and 2PI
__attribute__((weak)) float _cos(float a){
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	ed87 0a01 	vstr	s0, [r7, #4]
  float a_sin = a + _PI_2;
 80028da:	edd7 7a01 	vldr	s15, [r7, #4]
 80028de:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8002928 <_Z4_cosf+0x58>
 80028e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e6:	edc7 7a03 	vstr	s15, [r7, #12]
  a_sin = a_sin > _2PI ? a_sin - _2PI : a_sin;
 80028ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80028ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 800292c <_Z4_cosf+0x5c>
 80028f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	dd06      	ble.n	800290a <_Z4_cosf+0x3a>
 80028fc:	edd7 7a03 	vldr	s15, [r7, #12]
 8002900:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800292c <_Z4_cosf+0x5c>
 8002904:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002908:	e001      	b.n	800290e <_Z4_cosf+0x3e>
 800290a:	edd7 7a03 	vldr	s15, [r7, #12]
 800290e:	edc7 7a03 	vstr	s15, [r7, #12]
  return _sin(a_sin);
 8002912:	ed97 0a03 	vldr	s0, [r7, #12]
 8002916:	f7ff ff63 	bl	80027e0 <_Z4_sinf>
 800291a:	eef0 7a40 	vmov.f32	s15, s0
}
 800291e:	eeb0 0a67 	vmov.f32	s0, s15
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	3fc90fdb 	.word	0x3fc90fdb
 800292c:	40c90fdb 	.word	0x40c90fdb

08002930 <_ZSt3minIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    min(const _Tp& __a, const _Tp& __b)
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return __b < __a ? __b : __a;
      if (__b < __a)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	ed93 7a00 	vldr	s14, [r3]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	edd3 7a00 	vldr	s15, [r3]
 8002946:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800294a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294e:	d501      	bpl.n	8002954 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	e000      	b.n	8002956 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 8002954:	687b      	ldr	r3, [r7, #4]
    }
 8002956:	4618      	mov	r0, r3
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
	...

08002964 <_Z6_atan2ff>:
// Via Odrive project
// https://github.com/odriverobotics/ODrive/blob/master/Firmware/MotorControl/utils.cpp
// This function is MIT licenced, copyright Oskar Weigl/Odrive Robotics
// The origin for Odrive atan2 is public domain. Thanks to Odrive for making
// it easy to borrow.
__attribute__((weak)) float _atan2(float y, float x) {
 8002964:	b580      	push	{r7, lr}
 8002966:	ed2d 8b02 	vpush	{d8}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	ed87 0a01 	vstr	s0, [r7, #4]
 8002972:	edc7 0a00 	vstr	s1, [r7]
    // a := min (|x|, |y|) / max (|x|, |y|)
    float abs_y = fabsf(y);
 8002976:	edd7 7a01 	vldr	s15, [r7, #4]
 800297a:	eef0 7ae7 	vabs.f32	s15, s15
 800297e:	edc7 7a04 	vstr	s15, [r7, #16]
    float abs_x = fabsf(x);
 8002982:	edd7 7a00 	vldr	s15, [r7]
 8002986:	eef0 7ae7 	vabs.f32	s15, s15
 800298a:	edc7 7a03 	vstr	s15, [r7, #12]
    // inject FLT_MIN in denominator to avoid division by zero
    float a = min(abs_x, abs_y) / (max(abs_x, abs_y));
 800298e:	f107 0210 	add.w	r2, r7, #16
 8002992:	f107 030c 	add.w	r3, r7, #12
 8002996:	4611      	mov	r1, r2
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff ffc9 	bl	8002930 <_ZSt3minIfERKT_S2_S2_>
 800299e:	4603      	mov	r3, r0
 80029a0:	ed93 8a00 	vldr	s16, [r3]
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	f107 030c 	add.w	r3, r7, #12
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f8c4 	bl	8002b3c <_ZSt3maxIfERKT_S2_S2_>
 80029b4:	4603      	mov	r3, r0
 80029b6:	ed93 7a00 	vldr	s14, [r3]
 80029ba:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80029be:	edc7 7a06 	vstr	s15, [r7, #24]
    // s := a * a
    float s = a * a;
 80029c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80029c6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029ca:	edc7 7a05 	vstr	s15, [r7, #20]
    // r := ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a
    float r =
        ((-0.0464964749f * s + 0.15931422f) * s - 0.327622764f) * s * a + a;
 80029ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80029d2:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002a7c <_Z6_atan2ff+0x118>
 80029d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029da:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002a80 <_Z6_atan2ff+0x11c>
 80029de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80029e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ea:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002a84 <_Z6_atan2ff+0x120>
 80029ee:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80029f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80029f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80029fe:	ee67 7a27 	vmul.f32	s15, s14, s15
    float r =
 8002a02:	ed97 7a06 	vldr	s14, [r7, #24]
 8002a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a0a:	edc7 7a07 	vstr	s15, [r7, #28]
    // if |y| > |x| then r := 1.57079637 - r
    if (abs_y > abs_x) r = 1.57079637f - r;
 8002a0e:	ed97 7a04 	vldr	s14, [r7, #16]
 8002a12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a16:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a1e:	dd07      	ble.n	8002a30 <_Z6_atan2ff+0xcc>
 8002a20:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8002a88 <_Z6_atan2ff+0x124>
 8002a24:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a2c:	edc7 7a07 	vstr	s15, [r7, #28]
    // if x < 0 then r := 3.14159274 - r
    if (x < 0.0f) r = 3.14159274f - r;
 8002a30:	edd7 7a00 	vldr	s15, [r7]
 8002a34:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a3c:	d507      	bpl.n	8002a4e <_Z6_atan2ff+0xea>
 8002a3e:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8002a8c <_Z6_atan2ff+0x128>
 8002a42:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
    // if y < 0 then r := -r
    if (y < 0.0f) r = -r;
 8002a4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a52:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	d505      	bpl.n	8002a68 <_Z6_atan2ff+0x104>
 8002a5c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a60:	eef1 7a67 	vneg.f32	s15, s15
 8002a64:	edc7 7a07 	vstr	s15, [r7, #28]

    return r;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	ee07 3a90 	vmov	s15, r3
  }
 8002a6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	ecbd 8b02 	vpop	{d8}
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	bd3e7316 	.word	0xbd3e7316
 8002a80:	3e232344 	.word	0x3e232344
 8002a84:	3ea7be2c 	.word	0x3ea7be2c
 8002a88:	3fc90fdb 	.word	0x3fc90fdb
 8002a8c:	40490fdb 	.word	0x40490fdb

08002a90 <_Z15_normalizeAnglef>:


// normalizing radian angle to [0,2PI]
__attribute__((weak)) float _normalizeAngle(float angle){
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	ed87 0a01 	vstr	s0, [r7, #4]
  float a = fmod(angle, _2PI);
 8002a9a:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8002ad4 <_Z15_normalizeAnglef+0x44>
 8002a9e:	ed97 0a01 	vldr	s0, [r7, #4]
 8002aa2:	f7ff fe88 	bl	80027b6 <_ZSt4fmodff>
 8002aa6:	ed87 0a03 	vstr	s0, [r7, #12]
  return a >= 0 ? a : (a + _2PI);
 8002aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8002aae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ab2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab6:	db02      	blt.n	8002abe <_Z15_normalizeAnglef+0x2e>
 8002ab8:	edd7 7a03 	vldr	s15, [r7, #12]
 8002abc:	e005      	b.n	8002aca <_Z15_normalizeAnglef+0x3a>
 8002abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac2:	ed9f 7a04 	vldr	s14, [pc, #16]	@ 8002ad4 <_Z15_normalizeAnglef+0x44>
 8002ac6:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	40c90fdb 	.word	0x40c90fdb

08002ad8 <_Z16_electricalAnglefi>:

// Electrical angle calculation
float _electricalAngle(float shaft_angle, int pole_pairs) {
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	ed87 0a01 	vstr	s0, [r7, #4]
 8002ae2:	6038      	str	r0, [r7, #0]
  return (shaft_angle * pole_pairs);
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	ee07 3a90 	vmov	s15, r3
 8002aea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aee:	edd7 7a01 	vldr	s15, [r7, #4]
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002af6:	eeb0 0a67 	vmov.f32	s0, s15
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <_Z11_sqrtApproxf>:

// square root approximation function using
// https://reprap.org/forum/read.php?147,219210
// https://en.wikipedia.org/wiki/Fast_inverse_square_root
__attribute__((weak)) float _sqrtApprox(float number) {//low in fat
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	ed87 0a01 	vstr	s0, [r7, #4]
  union {
    float    f;
    uint32_t i;
  } y = { .f = number };
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60fb      	str	r3, [r7, #12]
  y.i = 0x5f375a86 - ( y.i >> 1 );
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	085a      	lsrs	r2, r3, #1
 8002b16:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <_Z11_sqrtApproxf+0x34>)
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  return number * y.f;
 8002b1c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002b24:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002b28:	eeb0 0a67 	vmov.f32	s0, s15
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	5f375a86 	.word	0x5f375a86

08002b3c <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	edd3 7a00 	vldr	s15, [r3]
 8002b52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b5a:	d501      	bpl.n	8002b60 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	e000      	b.n	8002b62 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 8002b60:	687b      	ldr	r3, [r7, #4]
    }
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <_ZN13LowPassFilterC1Ef>:
 */

#include <lowpass_filter.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU

LowPassFilter::LowPassFilter(float time_constant)
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	ed87 0a00 	vstr	s0, [r7]
    : Tf(time_constant)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	601a      	str	r2, [r3, #0]
    , y_prev(0.0f)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	609a      	str	r2, [r3, #8]
{
    timestamp_prev = micros();
 8002b88:	f000 f872 	bl	8002c70 <_ZN13LowPassFilter6microsEv>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	605a      	str	r2, [r3, #4]
}
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4618      	mov	r0, r3
 8002b96:	3708      	adds	r7, #8
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <_ZN13LowPassFilterclEf>:


float LowPassFilter::operator() (float x)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	ed87 0a00 	vstr	s0, [r7]
    unsigned long timestamp = micros();
 8002ba8:	f000 f862 	bl	8002c70 <_ZN13LowPassFilter6microsEv>
 8002bac:	6138      	str	r0, [r7, #16]
    float dt = (timestamp - timestamp_prev)*1e-6f;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	ee07 3a90 	vmov	s15, r3
 8002bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bbe:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8002c64 <_ZN13LowPassFilterclEf+0xc8>
 8002bc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bc6:	edc7 7a05 	vstr	s15, [r7, #20]

    if (dt < 0.0f ) dt = 1e-3f;
 8002bca:	edd7 7a05 	vldr	s15, [r7, #20]
 8002bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd6:	d502      	bpl.n	8002bde <_ZN13LowPassFilterclEf+0x42>
 8002bd8:	4b23      	ldr	r3, [pc, #140]	@ (8002c68 <_ZN13LowPassFilterclEf+0xcc>)
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	e010      	b.n	8002c00 <_ZN13LowPassFilterclEf+0x64>
    else if(dt > 0.3f) {
 8002bde:	edd7 7a05 	vldr	s15, [r7, #20]
 8002be2:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8002c6c <_ZN13LowPassFilterclEf+0xd0>
 8002be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bee:	dd07      	ble.n	8002c00 <_ZN13LowPassFilterclEf+0x64>
        y_prev = x;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	609a      	str	r2, [r3, #8]
        timestamp_prev = timestamp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	605a      	str	r2, [r3, #4]
        return x;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	e029      	b.n	8002c54 <_ZN13LowPassFilterclEf+0xb8>
    }

    float alpha = Tf/(Tf + dt);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	edd3 6a00 	vldr	s13, [r3]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	ed93 7a00 	vldr	s14, [r3]
 8002c0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c18:	edc7 7a03 	vstr	s15, [r7, #12]
    float y = alpha*y_prev + (1.0f - alpha)*x;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002c22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c36:	edd7 7a00 	vldr	s15, [r7]
 8002c3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c42:	edc7 7a02 	vstr	s15, [r7, #8]
    y_prev = y;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68ba      	ldr	r2, [r7, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
    timestamp_prev = timestamp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	605a      	str	r2, [r3, #4]
    return y;
 8002c52:	68bb      	ldr	r3, [r7, #8]
}
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	358637bd 	.word	0x358637bd
 8002c68:	3a83126f 	.word	0x3a83126f
 8002c6c:	3e99999a 	.word	0x3e99999a

08002c70 <_ZN13LowPassFilter6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t LowPassFilter::micros(void) 
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8002c74:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <_ZN13LowPassFilter6microsEv+0x24>)
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	4b07      	ldr	r3, [pc, #28]	@ (8002c98 <_ZN13LowPassFilter6microsEv+0x28>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4907      	ldr	r1, [pc, #28]	@ (8002c9c <_ZN13LowPassFilter6microsEv+0x2c>)
 8002c7e:	fba1 1303 	umull	r1, r3, r1, r3
 8002c82:	0c9b      	lsrs	r3, r3, #18
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e0001000 	.word	0xe0001000
 8002c98:	200000bc 	.word	0x200000bc
 8002c9c:	431bde83 	.word	0x431bde83

08002ca0 <_Z41__static_initialization_and_destruction_0ii>:
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};

LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
LowPassFilter LPF_position	{0.01}; // 1 is very slow
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d158      	bne.n	8002d62 <_Z41__static_initialization_and_destruction_0ii+0xc2>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d153      	bne.n	8002d62 <_Z41__static_initialization_and_destruction_0ii+0xc2>
PIDController PID_current_d {1.0, 0.0, 0.0, 1000.0, voltage_limit};
 8002cba:	4b2c      	ldr	r3, [pc, #176]	@ (8002d6c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002cbc:	edd3 7a00 	vldr	s15, [r3]
 8002cc0:	eeb0 2a67 	vmov.f32	s4, s15
 8002cc4:	eddf 1a2a 	vldr	s3, [pc, #168]	@ 8002d70 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002cc8:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002ccc:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002cd0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002cd4:	4828      	ldr	r0, [pc, #160]	@ (8002d78 <_Z41__static_initialization_and_destruction_0ii+0xd8>)
 8002cd6:	f000 f871 	bl	8002dbc <_ZN13PIDControllerC1Efffff>
PIDController PID_current_q {1.0, 1.0, 0.0, 1000.0, voltage_limit};
 8002cda:	4b24      	ldr	r3, [pc, #144]	@ (8002d6c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 8002cdc:	edd3 7a00 	vldr	s15, [r3]
 8002ce0:	eeb0 2a67 	vmov.f32	s4, s15
 8002ce4:	eddf 1a22 	vldr	s3, [pc, #136]	@ 8002d70 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002ce8:	ed9f 1a22 	vldr	s2, [pc, #136]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002cec:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8002cf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002cf4:	4821      	ldr	r0, [pc, #132]	@ (8002d7c <_Z41__static_initialization_and_destruction_0ii+0xdc>)
 8002cf6:	f000 f861 	bl	8002dbc <_ZN13PIDControllerC1Efffff>
PIDController PID_velocity  {1.0, 0.1, 0.1, 1000.0, current_limit};
 8002cfa:	4b21      	ldr	r3, [pc, #132]	@ (8002d80 <_Z41__static_initialization_and_destruction_0ii+0xe0>)
 8002cfc:	edd3 7a00 	vldr	s15, [r3]
 8002d00:	eeb0 2a67 	vmov.f32	s4, s15
 8002d04:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8002d70 <_Z41__static_initialization_and_destruction_0ii+0xd0>
 8002d08:	ed9f 1a1e 	vldr	s2, [pc, #120]	@ 8002d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d0c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8002d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d10:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8002d14:	481c      	ldr	r0, [pc, #112]	@ (8002d88 <_Z41__static_initialization_and_destruction_0ii+0xe8>)
 8002d16:	f000 f851 	bl	8002dbc <_ZN13PIDControllerC1Efffff>
PIDController PID_position  {3.0, 0.0, 0.2, 0, velocity_limit};
 8002d1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002d8c <_Z41__static_initialization_and_destruction_0ii+0xec>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eeb0 2a67 	vmov.f32	s4, s15
 8002d24:	eddf 1a13 	vldr	s3, [pc, #76]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d28:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8002d90 <_Z41__static_initialization_and_destruction_0ii+0xf0>
 8002d2c:	eddf 0a11 	vldr	s1, [pc, #68]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d30:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8002d34:	4817      	ldr	r0, [pc, #92]	@ (8002d94 <_Z41__static_initialization_and_destruction_0ii+0xf4>)
 8002d36:	f000 f841 	bl	8002dbc <_ZN13PIDControllerC1Efffff>
LowPassFilter LPF_current_q	{0.1f}; // 1 is very slow
 8002d3a:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8002d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d3e:	4816      	ldr	r0, [pc, #88]	@ (8002d98 <_Z41__static_initialization_and_destruction_0ii+0xf8>)
 8002d40:	f7ff ff15 	bl	8002b6e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_current_d	{0.1f}; // 1 is very slow
 8002d44:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8002d84 <_Z41__static_initialization_and_destruction_0ii+0xe4>
 8002d48:	4814      	ldr	r0, [pc, #80]	@ (8002d9c <_Z41__static_initialization_and_destruction_0ii+0xfc>)
 8002d4a:	f7ff ff10 	bl	8002b6e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_position	{0.01}; // 1 is very slow
 8002d4e:	ed9f 0a14 	vldr	s0, [pc, #80]	@ 8002da0 <_Z41__static_initialization_and_destruction_0ii+0x100>
 8002d52:	4814      	ldr	r0, [pc, #80]	@ (8002da4 <_Z41__static_initialization_and_destruction_0ii+0x104>)
 8002d54:	f7ff ff0b 	bl	8002b6e <_ZN13LowPassFilterC1Ef>
LowPassFilter LPF_velocity	{0.0};  // 1 is very slow (EKF)
 8002d58:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8002d74 <_Z41__static_initialization_and_destruction_0ii+0xd4>
 8002d5c:	4812      	ldr	r0, [pc, #72]	@ (8002da8 <_Z41__static_initialization_and_destruction_0ii+0x108>)
 8002d5e:	f7ff ff06 	bl	8002b6e <_ZN13LowPassFilterC1Ef>
 8002d62:	bf00      	nop
 8002d64:	3708      	adds	r7, #8
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200000b0 	.word	0x200000b0
 8002d70:	447a0000 	.word	0x447a0000
 8002d74:	00000000 	.word	0x00000000
 8002d78:	20000154 	.word	0x20000154
 8002d7c:	20000178 	.word	0x20000178
 8002d80:	200000b4 	.word	0x200000b4
 8002d84:	3dcccccd 	.word	0x3dcccccd
 8002d88:	2000019c 	.word	0x2000019c
 8002d8c:	200000b8 	.word	0x200000b8
 8002d90:	3e4ccccd 	.word	0x3e4ccccd
 8002d94:	200001c0 	.word	0x200001c0
 8002d98:	200001e4 	.word	0x200001e4
 8002d9c:	200001f0 	.word	0x200001f0
 8002da0:	3c23d70a 	.word	0x3c23d70a
 8002da4:	200001fc 	.word	0x200001fc
 8002da8:	20000208 	.word	0x20000208

08002dac <_GLOBAL__sub_I_CurrentSense_resistance>:
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7ff ff73 	bl	8002ca0 <_Z41__static_initialization_and_destruction_0ii>
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <_ZN13PIDControllerC1Efffff>:
 */

#include <pid.h>
#include "stm32g4xx_hal.h" // Include the HAL header for your specific MCU

PIDController::PIDController(float P, float I, float D, float ramp, float limit)
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6178      	str	r0, [r7, #20]
 8002dc4:	ed87 0a04 	vstr	s0, [r7, #16]
 8002dc8:	edc7 0a03 	vstr	s1, [r7, #12]
 8002dcc:	ed87 1a02 	vstr	s2, [r7, #8]
 8002dd0:	edc7 1a01 	vstr	s3, [r7, #4]
 8002dd4:	ed87 2a00 	vstr	s4, [r7]
    : P(P)
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	601a      	str	r2, [r3, #0]
    , I(I)
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	605a      	str	r2, [r3, #4]
    , D(D)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
    , output_ramp(ramp)    // output derivative limit [volts/second]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	60da      	str	r2, [r3, #12]
    , limit(limit)         // output supply limit     [volts]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	611a      	str	r2, [r3, #16]
    , error_prev(0.0f)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f04f 0200 	mov.w	r2, #0
 8002dfc:	615a      	str	r2, [r3, #20]
    , output_prev(0.0f)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
    , integral_prev(0.0f)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	61da      	str	r2, [r3, #28]
{
    timestamp_prev = micros();
 8002e0e:	f000 f91d 	bl	800304c <_ZN13PIDController6microsEv>
 8002e12:	4602      	mov	r2, r0
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	621a      	str	r2, [r3, #32]
}
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <_ZN13PIDControllerclEf>:

// PID controller "Functors" (see https://www.geeksforgeeks.org/functors-in-cpp/)
float PIDController::operator() (float error)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08a      	sub	sp, #40	@ 0x28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	ed87 0a00 	vstr	s0, [r7]
    // calculate the time from the last call
    unsigned long timestamp_now = micros();
 8002e30:	f000 f90c 	bl	800304c <_ZN13PIDController6microsEv>
 8002e34:	61f8      	str	r0, [r7, #28]
    float Ts = (timestamp_now - timestamp_prev) * 1e-6f;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e46:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003044 <_ZN13PIDControllerclEf+0x220>
 8002e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    // quick fix for strange cases (micros overflow)
    if(Ts <= 0 || Ts > 0.5f) Ts = 1e-3f;
 8002e52:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d908      	bls.n	8002e72 <_ZN13PIDControllerclEf+0x4e>
 8002e60:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e64:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e70:	dd01      	ble.n	8002e76 <_ZN13PIDControllerclEf+0x52>
 8002e72:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <_ZN13PIDControllerclEf+0x224>)
 8002e74:	627b      	str	r3, [r7, #36]	@ 0x24

    // u(s) = (P + I/s + Ds)e(s)
    // Discrete implementations
    // proportional part
    // u_p  = P *e(k)
    float proportional = P * error;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	edd3 7a00 	vldr	s15, [r3]
 8002e7c:	ed97 7a00 	vldr	s14, [r7]
 8002e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e84:	edc7 7a06 	vstr	s15, [r7, #24]
    // Tustin transform of the integral part
    // u_ik = u_ik_1  + I*Ts/2*(ek + ek_1)
    float integral = integral_prev + I*Ts*0.5f*(error + error_prev);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	ed93 7a07 	vldr	s14, [r3, #28]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	edd3 6a01 	vldr	s13, [r3, #4]
 8002e94:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002e98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e9c:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 8002ea0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	ed93 6a05 	vldr	s12, [r3, #20]
 8002eaa:	edd7 7a00 	vldr	s15, [r7]
 8002eae:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002eb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	edc7 7a05 	vstr	s15, [r7, #20]
    // antiwindup - limit the output
    integral = _constrain(integral, -limit, limit);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ec4:	eef1 7a67 	vneg.f32	s15, s15
 8002ec8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ecc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ed4:	d505      	bpl.n	8002ee2 <_ZN13PIDControllerclEf+0xbe>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002edc:	eef1 7a67 	vneg.f32	s15, s15
 8002ee0:	e00f      	b.n	8002f02 <_ZN13PIDControllerclEf+0xde>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	edd3 7a04 	vldr	s15, [r3, #16]
 8002ee8:	ed97 7a05 	vldr	s14, [r7, #20]
 8002eec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	dd03      	ble.n	8002efe <_ZN13PIDControllerclEf+0xda>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 7a04 	vldr	s15, [r3, #16]
 8002efc:	e001      	b.n	8002f02 <_ZN13PIDControllerclEf+0xde>
 8002efe:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f02:	edc7 7a05 	vstr	s15, [r7, #20]
    // Discrete derivation
    // u_dk = D(ek - ek_1)/Ts
    float derivative = D*(error - error_prev)/Ts;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	ed93 7a02 	vldr	s14, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002f12:	edd7 6a00 	vldr	s13, [r7]
 8002f16:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f1a:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002f1e:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002f22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f26:	edc7 7a04 	vstr	s15, [r7, #16]

    // sum all the components
    float output = proportional + integral + derivative;
 8002f2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8002f2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f36:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f3e:	edc7 7a08 	vstr	s15, [r7, #32]
    // antiwindup - limit the output variable
    output = _constrain(output, -limit, limit);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f48:	eef1 7a67 	vneg.f32	s15, s15
 8002f4c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f58:	d505      	bpl.n	8002f66 <_ZN13PIDControllerclEf+0x142>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f60:	eef1 7a67 	vneg.f32	s15, s15
 8002f64:	e00f      	b.n	8002f86 <_ZN13PIDControllerclEf+0x162>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f6c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f78:	dd03      	ble.n	8002f82 <_ZN13PIDControllerclEf+0x15e>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002f80:	e001      	b.n	8002f86 <_ZN13PIDControllerclEf+0x162>
 8002f82:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f86:	edc7 7a08 	vstr	s15, [r7, #32]

    // if output ramp defined
    if(output_ramp > 0)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	edd3 7a03 	vldr	s15, [r3, #12]
 8002f90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f98:	dd3f      	ble.n	800301a <_ZN13PIDControllerclEf+0x1f6>
	{
        // limit the acceleration by ramping the output
        float output_rate = (output - output_prev)/Ts;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	edd3 7a06 	vldr	s15, [r3, #24]
 8002fa0:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fa4:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002fa8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8002fac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb0:	edc7 7a03 	vstr	s15, [r7, #12]
        if (output_rate > output_ramp)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fba:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fbe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc6:	dd0e      	ble.n	8002fe6 <_ZN13PIDControllerclEf+0x1c2>
            output = output_prev + output_ramp*Ts;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	ed93 7a06 	vldr	s14, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	edd3 6a03 	vldr	s13, [r3, #12]
 8002fd4:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002fdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fe0:	edc7 7a08 	vstr	s15, [r7, #32]
 8002fe4:	e019      	b.n	800301a <_ZN13PIDControllerclEf+0x1f6>
        else if (output_rate < -output_ramp)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	edd3 7a03 	vldr	s15, [r3, #12]
 8002fec:	eef1 7a67 	vneg.f32	s15, s15
 8002ff0:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ff4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ffc:	d50d      	bpl.n	800301a <_ZN13PIDControllerclEf+0x1f6>
            output = output_prev - output_ramp*Ts;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	ed93 7a06 	vldr	s14, [r3, #24]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	edd3 6a03 	vldr	s13, [r3, #12]
 800300a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800300e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003012:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003016:	edc7 7a08 	vstr	s15, [r7, #32]
    }
    // saving for the next pass
    integral_prev = integral;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	61da      	str	r2, [r3, #28]
    output_prev = output;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a3a      	ldr	r2, [r7, #32]
 8003024:	619a      	str	r2, [r3, #24]
    error_prev = error;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	615a      	str	r2, [r3, #20]
    timestamp_prev = timestamp_now;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	621a      	str	r2, [r3, #32]
    return output;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	ee07 3a90 	vmov	s15, r3
}
 8003038:	eeb0 0a67 	vmov.f32	s0, s15
 800303c:	3728      	adds	r7, #40	@ 0x28
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	358637bd 	.word	0x358637bd
 8003048:	3a83126f 	.word	0x3a83126f

0800304c <_ZN13PIDController6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t PIDController::micros(void) 
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8003050:	4b07      	ldr	r3, [pc, #28]	@ (8003070 <_ZN13PIDController6microsEv+0x24>)
 8003052:	685a      	ldr	r2, [r3, #4]
 8003054:	4b07      	ldr	r3, [pc, #28]	@ (8003074 <_ZN13PIDController6microsEv+0x28>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4907      	ldr	r1, [pc, #28]	@ (8003078 <_ZN13PIDController6microsEv+0x2c>)
 800305a:	fba1 1303 	umull	r1, r3, r1, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	e0001000 	.word	0xe0001000
 8003074:	200000bc 	.word	0x200000bc
 8003078:	431bde83 	.word	0x431bde83

0800307c <_ZSt5floorf>:
  { return __builtin_floorf(__x); }
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	ed87 0a01 	vstr	s0, [r7, #4]
 8003086:	ed97 0a01 	vldr	s0, [r7, #4]
 800308a:	f008 fe63 	bl	800bd54 <floorf>
 800308e:	eef0 7a40 	vmov.f32	s15, s0
 8003092:	eeb0 0a67 	vmov.f32	s0, s15
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <_ZN11pwm_driversC1Ev>:
 */

#include <pwm_drivers.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU
#include "motor_param.h"
pwm_drivers::pwm_drivers() {
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <_ZN11pwm_driversC1Ev+0x1c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4618      	mov	r0, r3
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	0800dc58 	.word	0x0800dc58

080030bc <_ZN11pwm_driversD1Ev>:

pwm_drivers::~pwm_drivers() {
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	4a04      	ldr	r2, [pc, #16]	@ (80030d8 <_ZN11pwm_driversD1Ev+0x1c>)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4618      	mov	r0, r3
 80030ce:	370c      	adds	r7, #12
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	0800dc58 	.word	0x0800dc58

080030dc <_ZN11pwm_driversD0Ev>:
pwm_drivers::~pwm_drivers() {
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
}
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ffe9 	bl	80030bc <_ZN11pwm_driversD1Ev>
 80030ea:	2110      	movs	r1, #16
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f008 fcd3 	bl	800ba98 <_ZdlPvj>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <_ZN11pwm_drivers10initDriverEv>:

void pwm_drivers::initDriver()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);   //pinMode
 8003104:	2100      	movs	r1, #0
 8003106:	4807      	ldr	r0, [pc, #28]	@ (8003124 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003108:	f007 fa2c 	bl	800a564 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);	//pinMode
 800310c:	2104      	movs	r1, #4
 800310e:	4805      	ldr	r0, [pc, #20]	@ (8003124 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003110:	f007 fa28 	bl	800a564 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);	//pinMode
 8003114:	2108      	movs	r1, #8
 8003116:	4803      	ldr	r0, [pc, #12]	@ (8003124 <_ZN11pwm_drivers10initDriverEv+0x28>)
 8003118:	f007 fa24 	bl	800a564 <HAL_TIM_PWM_Start>
}
 800311c:	bf00      	nop
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000734 	.word	0x20000734

08003128 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>:

//Write PWM fsw = 25kHzfloat Ts
void pwm_drivers::writeDutyCycle3PWM(float dc_a, float dc_b, float dc_c) 
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	ed87 0a02 	vstr	s0, [r7, #8]
 8003134:	edc7 0a01 	vstr	s1, [r7, #4]
 8003138:	ed87 1a00 	vstr	s2, [r7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, fsw*dc_a);
 800313c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003140:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 8003198 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003148:	4b14      	ldr	r3, [pc, #80]	@ (800319c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003150:	ee17 2a90 	vmov	r2, s15
 8003154:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, fsw*dc_b);
 8003156:	edd7 7a01 	vldr	s15, [r7, #4]
 800315a:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8003198 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 800315e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003162:	4b0e      	ldr	r3, [pc, #56]	@ (800319c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316a:	ee17 2a90 	vmov	r2, s15
 800316e:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, fsw*dc_c);
 8003170:	edd7 7a00 	vldr	s15, [r7]
 8003174:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8003198 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x70>
 8003178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800317c:	4b07      	ldr	r3, [pc, #28]	@ (800319c <_ZN11pwm_drivers18writeDutyCycle3PWMEfff+0x74>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003184:	ee17 2a90 	vmov	r2, s15
 8003188:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800318a:	bf00      	nop
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	45610000 	.word	0x45610000
 800319c:	20000734 	.word	0x20000734

080031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>:

// Method using FOC to set Uq and Ud to the motor at the optimal angle
// Function implementing Space Vector PWM and Sine PWM algorithms
void pwm_drivers::setPhaseVoltage(float Uq, float Ud, float angle_el) 
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b090      	sub	sp, #64	@ 0x40
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	60f8      	str	r0, [r7, #12]
 80031a8:	ed87 0a02 	vstr	s0, [r7, #8]
 80031ac:	edc7 0a01 	vstr	s1, [r7, #4]
 80031b0:	ed87 1a00 	vstr	s2, [r7]


// ===========================================================================[Old]
	float Uout;
	// a bit of optitmisation
	if (Ud)
 80031b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80031b8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c0:	d029      	beq.n	8003216 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x76>
	{
		// only if Ud and Uq set
		// _sqrt is an approx of sqrt (3-4% error)
		Uout = _sqrtApprox(Ud*Ud + Uq*Uq) / voltage_limit;
 80031c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80031c6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80031ca:	edd7 7a02 	vldr	s15, [r7, #8]
 80031ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80031d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031d6:	eeb0 0a67 	vmov.f32	s0, s15
 80031da:	f7ff fc93 	bl	8002b04 <_Z11_sqrtApproxf>
 80031de:	eef0 6a40 	vmov.f32	s13, s0
 80031e2:	4be8      	ldr	r3, [pc, #928]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80031e4:	ed93 7a00 	vldr	s14, [r3]
 80031e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ec:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _atan2(Uq, Ud));
 80031f0:	edd7 0a01 	vldr	s1, [r7, #4]
 80031f4:	ed97 0a02 	vldr	s0, [r7, #8]
 80031f8:	f7ff fbb4 	bl	8002964 <_Z6_atan2ff>
 80031fc:	eeb0 7a40 	vmov.f32	s14, s0
 8003200:	edd7 7a00 	vldr	s15, [r7]
 8003204:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003208:	eeb0 0a67 	vmov.f32	s0, s15
 800320c:	f7ff fc40 	bl	8002a90 <_Z15_normalizeAnglef>
 8003210:	ed87 0a00 	vstr	s0, [r7]
 8003214:	e014      	b.n	8003240 <_ZN11pwm_drivers15setPhaseVoltageEfff+0xa0>
	}
	else
	{
		// only Uq available - no need for atan2 and sqrt
		Uout = Uq / voltage_limit;
 8003216:	4bdb      	ldr	r3, [pc, #876]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003218:	ed93 7a00 	vldr	s14, [r3]
 800321c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003224:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
		// angle normalisation in between 0 and 2pi
		// only necessary if using _sin and _cos - approximation functions
		angle_el = _normalizeAngle(angle_el + _PI_2);
 8003228:	edd7 7a00 	vldr	s15, [r7]
 800322c:	ed9f 7ad6 	vldr	s14, [pc, #856]	@ 8003588 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e8>
 8003230:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003234:	eeb0 0a67 	vmov.f32	s0, s15
 8003238:	f7ff fc2a 	bl	8002a90 <_Z15_normalizeAnglef>
 800323c:	ed87 0a00 	vstr	s0, [r7]
	}
	// find the sector we are in currently
	int sector = floor(angle_el / _PI_3) + 1;
 8003240:	edd7 7a00 	vldr	s15, [r7]
 8003244:	eddf 6ad1 	vldr	s13, [pc, #836]	@ 800358c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003248:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800324c:	eeb0 0a47 	vmov.f32	s0, s14
 8003250:	f7ff ff14 	bl	800307c <_ZSt5floorf>
 8003254:	eef0 7a40 	vmov.f32	s15, s0
 8003258:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800325c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003264:	ee17 3a90 	vmov	r3, s15
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
	// calculate the duty cycles
	float T1 = _SQRT3 * _sin(sector * _PI_3 - angle_el) * Uout;
 800326a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800326c:	ee07 3a90 	vmov	s15, r3
 8003270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003274:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 800358c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 8003278:	ee27 7a87 	vmul.f32	s14, s15, s14
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	eeb0 0a67 	vmov.f32	s0, s15
 8003288:	f7ff faaa 	bl	80027e0 <_Z4_sinf>
 800328c:	eef0 7a40 	vmov.f32	s15, s0
 8003290:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8003590 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 8003294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003298:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800329c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032a0:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
	float T2 = _SQRT3 * _sin(angle_el - (sector - 1.0f) * _PI_3) * Uout;
 80032a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b6:	ed9f 7ab5 	vldr	s14, [pc, #724]	@ 800358c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3ec>
 80032ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032be:	ed97 7a00 	vldr	s14, [r7]
 80032c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c6:	eeb0 0a67 	vmov.f32	s0, s15
 80032ca:	f7ff fa89 	bl	80027e0 <_Z4_sinf>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	ed9f 7aaf 	vldr	s14, [pc, #700]	@ 8003590 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f0>
 80032d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032da:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80032de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    float T0 = 1 - T1 - T2; // modulation_centered around driver->voltage_limit/2
 80032e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032ea:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80032ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80032f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032fa:	edc7 7a08 	vstr	s15, [r7, #32]
//	float T0 = 0; // pulled to 0 - better for low power supply voltage

	// calculate the duty cycles(times)
	float Ta, Tb, Tc;
	switch (sector) {
 80032fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003300:	3b01      	subs	r3, #1
 8003302:	2b05      	cmp	r3, #5
 8003304:	f200 80ee 	bhi.w	80034e4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x344>
 8003308:	a201      	add	r2, pc, #4	@ (adr r2, 8003310 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x170>)
 800330a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330e:	bf00      	nop
 8003310:	08003329 	.word	0x08003329
 8003314:	08003373 	.word	0x08003373
 8003318:	080033bd 	.word	0x080033bd
 800331c:	08003407 	.word	0x08003407
 8003320:	08003451 	.word	0x08003451
 8003324:	0800349b 	.word	0x0800349b
	case 1:
		Ta = T1 + T2 + T0 / 2;
 8003328:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800332c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003334:	edd7 6a08 	vldr	s13, [r7, #32]
 8003338:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800333c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003344:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T2 + T0 / 2;
 8003348:	ed97 7a08 	vldr	s14, [r7, #32]
 800334c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003350:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003354:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 8003360:	ed97 7a08 	vldr	s14, [r7, #32]
 8003364:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003368:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800336c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003370:	e0c1      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 2:
		Ta = T1 + T0 / 2;
 8003372:	ed97 7a08 	vldr	s14, [r7, #32]
 8003376:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800337a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800337e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003382:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003386:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 800338a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800338e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003392:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003396:	edd7 6a08 	vldr	s13, [r7, #32]
 800339a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800339e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T0 / 2;
 80033aa:	ed97 7a08 	vldr	s14, [r7, #32]
 80033ae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033b6:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80033ba:	e09c      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 3:
		Ta = T0 / 2;
 80033bc:	ed97 7a08 	vldr	s14, [r7, #32]
 80033c0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T2 + T0 / 2;
 80033cc:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80033d0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80033d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033d8:	edd7 6a08 	vldr	s13, [r7, #32]
 80033dc:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80033e0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80033e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T2 + T0 / 2;
 80033ec:	ed97 7a08 	vldr	s14, [r7, #32]
 80033f0:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80033f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033f8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80033fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003400:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003404:	e077      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 4:
		Ta = T0 / 2;
 8003406:	ed97 7a08 	vldr	s14, [r7, #32]
 800340a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800340e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003412:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T1 + T0 / 2;
 8003416:	ed97 7a08 	vldr	s14, [r7, #32]
 800341a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800341e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003422:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800342a:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 800342e:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8003432:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800343a:	edd7 6a08 	vldr	s13, [r7, #32]
 800343e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003442:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 800344e:	e052      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 5:
		Ta = T2 + T0 / 2;
 8003450:	ed97 7a08 	vldr	s14, [r7, #32]
 8003454:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003458:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800345c:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8003460:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003464:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 8003468:	ed97 7a08 	vldr	s14, [r7, #32]
 800346c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8003470:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003474:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T2 + T0 / 2;
 8003478:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800347c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003484:	edd7 6a08 	vldr	s13, [r7, #32]
 8003488:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800348c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 8003498:	e02d      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	case 6:
		Ta = T1 + T2 + T0 / 2;
 800349a:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 800349e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80034a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a6:	edd7 6a08 	vldr	s13, [r7, #32]
 80034aa:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80034ae:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80034b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b6:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		Tb = T0 / 2;
 80034ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80034be:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034c6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		Tc = T1 + T0 / 2;
 80034ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80034ce:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80034d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034d6:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80034da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034de:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
		break;
 80034e2:	e008      	b.n	80034f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x356>
	default:
		// possible error state
		Ta = 0;
 80034e4:	f04f 0300 	mov.w	r3, #0
 80034e8:	63bb      	str	r3, [r7, #56]	@ 0x38
		Tb = 0;
 80034ea:	f04f 0300 	mov.w	r3, #0
 80034ee:	637b      	str	r3, [r7, #52]	@ 0x34
		Tc = 0;
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	// calculate the phase voltages
	Ua = Ta * voltage_limit;
 80034f6:	4b23      	ldr	r3, [pc, #140]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 80034f8:	ed93 7a00 	vldr	s14, [r3]
 80034fc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	edc3 7a01 	vstr	s15, [r3, #4]
	Ub = Tb * voltage_limit;
 800350a:	4b1e      	ldr	r3, [pc, #120]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 800350c:	ed93 7a00 	vldr	s14, [r3]
 8003510:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003514:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	edc3 7a02 	vstr	s15, [r3, #8]
	Uc = Tc * voltage_limit;
 800351e:	4b19      	ldr	r3, [pc, #100]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003520:	ed93 7a00 	vldr	s14, [r3]
 8003524:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	edc3 7a03 	vstr	s15, [r3, #12]
// ===========================================================================

	// set the voltages in hardware
	// limit the voltage in driver
	Ua = _constrain(Ua, 0.0f, voltage_limit);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	edd3 7a01 	vldr	s15, [r3, #4]
 8003538:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	d502      	bpl.n	8003548 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3a8>
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e00f      	b.n	8003568 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	ed93 7a01 	vldr	s14, [r3, #4]
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003550:	edd3 7a00 	vldr	s15, [r3]
 8003554:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	dd02      	ble.n	8003564 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c4>
 800355e:	4b09      	ldr	r3, [pc, #36]	@ (8003584 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3e4>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e001      	b.n	8003568 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3c8>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	6053      	str	r3, [r2, #4]
	Ub = _constrain(Ub, 0.0f, voltage_limit);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003572:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800357a:	d50b      	bpl.n	8003594 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x3f4>
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e018      	b.n	80035b4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 8003582:	bf00      	nop
 8003584:	200000b0 	.word	0x200000b0
 8003588:	3fc90fdb 	.word	0x3fc90fdb
 800358c:	3f860a92 	.word	0x3f860a92
 8003590:	3fddb3d7 	.word	0x3fddb3d7
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	ed93 7a02 	vldr	s14, [r3, #8]
 800359a:	4b5e      	ldr	r3, [pc, #376]	@ (8003714 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 800359c:	edd3 7a00 	vldr	s15, [r3]
 80035a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035a8:	dd02      	ble.n	80035b0 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x410>
 80035aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003714 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	e001      	b.n	80035b4 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x414>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	6093      	str	r3, [r2, #8]
	Uc = _constrain(Uc, 0.0f, voltage_limit);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	edd3 7a03 	vldr	s15, [r3, #12]
 80035be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035c6:	d502      	bpl.n	80035ce <_ZN11pwm_drivers15setPhaseVoltageEfff+0x42e>
 80035c8:	f04f 0300 	mov.w	r3, #0
 80035cc:	e00f      	b.n	80035ee <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	ed93 7a03 	vldr	s14, [r3, #12]
 80035d4:	4b4f      	ldr	r3, [pc, #316]	@ (8003714 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e2:	dd02      	ble.n	80035ea <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44a>
 80035e4:	4b4b      	ldr	r3, [pc, #300]	@ (8003714 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x574>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	e001      	b.n	80035ee <_ZN11pwm_drivers15setPhaseVoltageEfff+0x44e>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	60d3      	str	r3, [r2, #12]
	// calculate duty cycle
	float dc_a;  //duty cycle phase A [0, 1]
	float dc_b;  //duty cycle phase B [0, 1]
	float dc_c;  //duty cycle phase C [0, 1]
	// limited in [0,1]
	dc_a = _constrain(Ua / voltage_power_supply, 0.0f, 0.94f);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80035f8:	4b47      	ldr	r3, [pc, #284]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80035fa:	ed93 7a00 	vldr	s14, [r3]
 80035fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003602:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360a:	d502      	bpl.n	8003612 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x472>
 800360c:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800371c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003610:	e019      	b.n	8003646 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	edd3 6a01 	vldr	s13, [r3, #4]
 8003618:	4b3f      	ldr	r3, [pc, #252]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800361a:	ed93 7a00 	vldr	s14, [r3]
 800361e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003622:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003626:	eef4 7ac7 	vcmpe.f32	s15, s14
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	dd02      	ble.n	8003636 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x496>
 8003630:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 8003634:	e007      	b.n	8003646 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4a6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	edd3 6a01 	vldr	s13, [r3, #4]
 800363c:	4b36      	ldr	r3, [pc, #216]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 800363e:	ed93 7a00 	vldr	s14, [r3]
 8003642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003646:	edc7 7a07 	vstr	s15, [r7, #28]
	dc_b = _constrain(Ub / voltage_power_supply, 0.0f, 0.94f);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003650:	4b31      	ldr	r3, [pc, #196]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003652:	ed93 7a00 	vldr	s14, [r3]
 8003656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800365a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800365e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003662:	d502      	bpl.n	800366a <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ca>
 8003664:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800371c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 8003668:	e019      	b.n	800369e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003670:	4b29      	ldr	r3, [pc, #164]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800367e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003686:	dd02      	ble.n	800368e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4ee>
 8003688:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 800368c:	e007      	b.n	800369e <_ZN11pwm_drivers15setPhaseVoltageEfff+0x4fe>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	edd3 6a02 	vldr	s13, [r3, #8]
 8003694:	4b20      	ldr	r3, [pc, #128]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 8003696:	ed93 7a00 	vldr	s14, [r3]
 800369a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800369e:	edc7 7a06 	vstr	s15, [r7, #24]
	dc_c = _constrain(Uc / voltage_power_supply, 0.0f, 0.94f);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	edd3 6a03 	vldr	s13, [r3, #12]
 80036a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036aa:	ed93 7a00 	vldr	s14, [r3]
 80036ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	d502      	bpl.n	80036c2 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x522>
 80036bc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800371c <_ZN11pwm_drivers15setPhaseVoltageEfff+0x57c>
 80036c0:	e019      	b.n	80036f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	edd3 6a03 	vldr	s13, [r3, #12]
 80036c8:	4b13      	ldr	r3, [pc, #76]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036ca:	ed93 7a00 	vldr	s14, [r3]
 80036ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036d2:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80036d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036de:	dd02      	ble.n	80036e6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x546>
 80036e0:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003720 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x580>
 80036e4:	e007      	b.n	80036f6 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x556>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	edd3 6a03 	vldr	s13, [r3, #12]
 80036ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003718 <_ZN11pwm_drivers15setPhaseVoltageEfff+0x578>)
 80036ee:	ed93 7a00 	vldr	s14, [r3]
 80036f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036f6:	edc7 7a05 	vstr	s15, [r7, #20]
	writeDutyCycle3PWM(dc_a, dc_b, dc_c);
 80036fa:	ed97 1a05 	vldr	s2, [r7, #20]
 80036fe:	edd7 0a06 	vldr	s1, [r7, #24]
 8003702:	ed97 0a07 	vldr	s0, [r7, #28]
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f7ff fd0e 	bl	8003128 <_ZN11pwm_drivers18writeDutyCycle3PWMEfff>
}
 800370c:	bf00      	nop
 800370e:	3740      	adds	r7, #64	@ 0x40
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200000b0 	.word	0x200000b0
 8003718:	200000ac 	.word	0x200000ac
 800371c:	00000000 	.word	0x00000000
 8003720:	3f70a3d7 	.word	0x3f70a3d7

08003724 <_ZSt4fabsf>:
  { return __builtin_fabsf(__x); }
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	ed87 0a01 	vstr	s0, [r7, #4]
 800372e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003732:	eef0 7ae7 	vabs.f32	s15, s15
 8003736:	eeb0 0a67 	vmov.f32	s0, s15
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <_ZN9simpleFOCC1Ev>:
#include <simpleFOC.h>
#include "stm32g4xx_hal.h"  // Include the HAL header for your specific MCU



simpleFOC::simpleFOC() 
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	4a0f      	ldr	r2, [pc, #60]	@ (800378c <_ZN9simpleFOCC1Ev+0x48>)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	3308      	adds	r3, #8
 8003756:	4618      	mov	r0, r3
 8003758:	f7fd fa7e 	bl	8000c58 <_ZN17AS5048A_interfaceC1Ev>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	33b8      	adds	r3, #184	@ 0xb8
 8003760:	4618      	mov	r0, r3
 8003762:	f7fd fdbd 	bl	80012e0 <_ZN12CurrentSenseC1Ev>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff fc95 	bl	800309c <_ZN11pwm_driversC1Ev>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a06      	ldr	r2, [pc, #24]	@ (8003790 <_ZN9simpleFOCC1Ev+0x4c>)
 8003776:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a04      	ldr	r2, [pc, #16]	@ (8003790 <_ZN9simpleFOCC1Ev+0x4c>)
 800377e:	f8c3 2234 	str.w	r2, [r3, #564]	@ 0x234
{

}
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4618      	mov	r0, r3
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	0800dc68 	.word	0x0800dc68
 8003790:	40400000 	.word	0x40400000

08003794 <_ZN9simpleFOCD1Ev>:

simpleFOC::~simpleFOC() 
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	4a0b      	ldr	r2, [pc, #44]	@ (80037cc <_ZN9simpleFOCD1Ev+0x38>)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff fc87 	bl	80030bc <_ZN11pwm_driversD1Ev>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	33b8      	adds	r3, #184	@ 0xb8
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7fd fe44 	bl	8001440 <_ZN12CurrentSenseD1Ev>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	3308      	adds	r3, #8
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fd fabb 	bl	8000d38 <_ZN17AS5048A_interfaceD1Ev>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	0800dc68 	.word	0x0800dc68

080037d0 <_ZN9simpleFOCD0Ev>:
simpleFOC::~simpleFOC() 
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
}
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffdb 	bl	8003794 <_ZN9simpleFOCD1Ev>
 80037de:	f44f 710e 	mov.w	r1, #568	@ 0x238
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f008 f958 	bl	800ba98 <_ZdlPvj>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
	...

080037f4 <_ZN9simpleFOC11initSensorsEv>:

void simpleFOC::initSensors()
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
	driver.initDriver();
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fc7a 	bl	80030fc <_ZN11pwm_drivers10initDriverEv>
	Encoder.MagneticSensorSPI_init();
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3308      	adds	r3, #8
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fab7 	bl	8000d80 <_ZN17AS5048A_interface22MagneticSensorSPI_initEv>
	Encoder.Sensor_init();
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3308      	adds	r3, #8
 8003816:	4618      	mov	r0, r3
 8003818:	f7fd faee 	bl	8000df8 <_ZN17AS5048A_interface11Sensor_initEv>
	CurrentSensor.initCurrentsense(CurrentSense_resistance, CurrentSense_gain);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	33b8      	adds	r3, #184	@ 0xb8
 8003820:	4a0a      	ldr	r2, [pc, #40]	@ (800384c <_ZN9simpleFOC11initSensorsEv+0x58>)
 8003822:	edd2 7a00 	vldr	s15, [r2]
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <_ZN9simpleFOC11initSensorsEv+0x5c>)
 8003828:	ed92 7a00 	vldr	s14, [r2]
 800382c:	eef0 0a47 	vmov.f32	s1, s14
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	4618      	mov	r0, r3
 8003836:	f7fd fe29 	bl	800148c <_ZN12CurrentSense16initCurrentsenseEff>
	CurrentSensor.calibrateOffsets();
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	33b8      	adds	r3, #184	@ 0xb8
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fe4e 	bl	80014e0 <_ZN12CurrentSense16calibrateOffsetsEv>
}
 8003844:	bf00      	nop
 8003846:	3708      	adds	r7, #8
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000098 	.word	0x20000098
 8003850:	2000009c 	.word	0x2000009c

08003854 <_ZN9simpleFOC11needsSearchEv>:

// returns 0 if it does need search for absolute zero
// 0 - magnetic sensor (& encoder with index which is found)
// 1 - encoder with index (with index not found yet)
int simpleFOC::needsSearch() 
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	return 0;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
	...

0800386c <_ZN9simpleFOC18absoluteZeroSearchEv>:

// Encoder alignment the absolute zero angle
// - to the index
int simpleFOC::absoluteZeroSearch() 
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b084      	sub	sp, #16
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	// search the absolute zero with small velocity
	float limit_vel = velocity_limit;
 8003874:	4b29      	ldr	r3, [pc, #164]	@ (800391c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	60fb      	str	r3, [r7, #12]
	float limit_volt = voltage_limit;
 800387a:	4b29      	ldr	r3, [pc, #164]	@ (8003920 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	60bb      	str	r3, [r7, #8]
	velocity_limit = velocity_index_search;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 3234 	ldr.w	r3, [r3, #564]	@ 0x234
 8003886:	4a25      	ldr	r2, [pc, #148]	@ (800391c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 8003888:	6013      	str	r3, [r2, #0]
	voltage_limit = voltage_sensor_align;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8003890:	4a23      	ldr	r2, [pc, #140]	@ (8003920 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 8003892:	6013      	str	r3, [r2, #0]
	shaft_angle = 0;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f04f 0200 	mov.w	r2, #0
 800389a:	605a      	str	r2, [r3, #4]
	while (needsSearch() && shaft_angle < _2PI) 
 800389c:	e009      	b.n	80038b2 <_ZN9simpleFOC18absoluteZeroSearchEv+0x46>
	{
		angleOpenloop(1.5 * _2PI);
 800389e:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8003924 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb8>
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f000 fadc 	bl	8003e60 <_ZN9simpleFOC13angleOpenloopEf>
		// call important for some sensors not to loose count
		// not needed for the search
		Encoder.get_full_rotation_angle();
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3308      	adds	r3, #8
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fd fb91 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
	while (needsSearch() && shaft_angle < _2PI) 
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f7ff ffce 	bl	8003854 <_ZN9simpleFOC11needsSearchEv>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00b      	beq.n	80038d6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c4:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8003928 <_ZN9simpleFOC18absoluteZeroSearchEv+0xbc>
 80038c8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d501      	bpl.n	80038d6 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6a>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <_ZN9simpleFOC18absoluteZeroSearchEv+0x6c>
 80038d6:	2300      	movs	r3, #0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1e0      	bne.n	800389e <_ZN9simpleFOC18absoluteZeroSearchEv+0x32>
	}
	driver.setPhaseVoltage(0, 0, 0);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80038e2:	ed9f 1a12 	vldr	s2, [pc, #72]	@ 800392c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80038e6:	eddf 0a11 	vldr	s1, [pc, #68]	@ 800392c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80038ea:	ed9f 0a10 	vldr	s0, [pc, #64]	@ 800392c <_ZN9simpleFOC18absoluteZeroSearchEv+0xc0>
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7ff fc56 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	// re-init the limits
	velocity_limit = limit_vel;
 80038f4:	4a09      	ldr	r2, [pc, #36]	@ (800391c <_ZN9simpleFOC18absoluteZeroSearchEv+0xb0>)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6013      	str	r3, [r2, #0]
	voltage_limit = limit_volt;
 80038fa:	4a09      	ldr	r2, [pc, #36]	@ (8003920 <_ZN9simpleFOC18absoluteZeroSearchEv+0xb4>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	6013      	str	r3, [r2, #0]
	return !needsSearch();
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f7ff ffa7 	bl	8003854 <_ZN9simpleFOC11needsSearchEv>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	bf0c      	ite	eq
 800390c:	2301      	moveq	r3, #1
 800390e:	2300      	movne	r3, #0
 8003910:	b2db      	uxtb	r3, r3
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	200000b8 	.word	0x200000b8
 8003920:	200000b0 	.word	0x200000b0
 8003924:	4116cbe4 	.word	0x4116cbe4
 8003928:	40c90fdb 	.word	0x40c90fdb
 800392c:	00000000 	.word	0x00000000

08003930 <_ZN9simpleFOC11alignSensorEv>:

// Encoder alignment to electrical 0 angle
int simpleFOC::alignSensor() 
{
 8003930:	b580      	push	{r7, lr}
 8003932:	ed2d 8b02 	vpush	{d8}
 8003936:	b08a      	sub	sp, #40	@ 0x28
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
	int exit_flag = 1; //success
 800393c:	2301      	movs	r3, #1
 800393e:	627b      	str	r3, [r7, #36]	@ 0x24
	// if unknown natural direction
	if (!_isset(Encoder.sensor_direction)) //sensor_direction == -12345.0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003944:	ee07 3a90 	vmov	s15, r3
 8003948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800394c:	ed9f 7ab6 	vldr	s14, [pc, #728]	@ 8003c28 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003950:	eef4 7a47 	vcmp.f32	s15, s14
 8003954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003958:	f040 810a 	bne.w	8003b70 <_ZN9simpleFOC11alignSensorEv+0x240>
	{
		// check if sensor needs zero search
		if (needsSearch()) //needSearch == 0 because use Magnetic sensor
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff79 	bl	8003854 <_ZN9simpleFOC11needsSearchEv>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	bf14      	ite	ne
 8003968:	2301      	movne	r3, #1
 800396a:	2300      	moveq	r3, #0
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <_ZN9simpleFOC11alignSensorEv+0x4a>
			exit_flag = absoluteZeroSearch(); // o
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff ff7a 	bl	800386c <_ZN9simpleFOC18absoluteZeroSearchEv>
 8003978:	6278      	str	r0, [r7, #36]	@ 0x24
		if (!exit_flag)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <_ZN9simpleFOC11alignSensorEv+0x54>
			return exit_flag;
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	e146      	b.n	8003c12 <_ZN9simpleFOC11alignSensorEv+0x2e2>

		// find natural direction
		// move one electrical revolution forward
		for (int i = 0; i <= 500; i++) 
 8003984:	2300      	movs	r3, #0
 8003986:	623b      	str	r3, [r7, #32]
 8003988:	e037      	b.n	80039fa <_ZN9simpleFOC11alignSensorEv+0xca>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 800398a:	6a3b      	ldr	r3, [r7, #32]
 800398c:	ee07 3a90 	vmov	s15, r3
 8003990:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003994:	ed9f 7aa5 	vldr	s14, [pc, #660]	@ 8003c2c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800399c:	ee17 0a90 	vmov	r0, s15
 80039a0:	f7fc fdf2 	bl	8000588 <__aeabi_f2d>
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	4ba1      	ldr	r3, [pc, #644]	@ (8003c30 <_ZN9simpleFOC11alignSensorEv+0x300>)
 80039aa:	f7fc ff6f 	bl	800088c <__aeabi_ddiv>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	a39a      	add	r3, pc, #616	@ (adr r3, 8003c20 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fc86 	bl	80002cc <__adddf3>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f8e6 	bl	8000b98 <__aeabi_d2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	60bb      	str	r3, [r7, #8]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 80039dc:	ed97 1a02 	vldr	s2, [r7, #8]
 80039e0:	eddf 0a94 	vldr	s1, [pc, #592]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 80039e4:	eeb0 0a67 	vmov.f32	s0, s15
 80039e8:	4610      	mov	r0, r2
 80039ea:	f7ff fbd9 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 80039ee:	2002      	movs	r0, #2
 80039f0:	f001 fd9e 	bl	8005530 <HAL_Delay>
		for (int i = 0; i <= 500; i++) 
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	3301      	adds	r3, #1
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8003a00:	ddc3      	ble.n	800398a <_ZN9simpleFOC11alignSensorEv+0x5a>
		}
		Encoder.updateSensor();
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	3308      	adds	r3, #8
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7fd fb54 	bl	80010b4 <_ZN17AS5048A_interface12updateSensorEv>
		// take and angle in the middle
		float mid_angle = Encoder.get_full_rotation_angle();
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fd fadf 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003a16:	ed87 0a06 	vstr	s0, [r7, #24]
		// move one electrical revolution backwards
		for (int i = 500; i >= 0; i--) 
 8003a1a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8003a1e:	61fb      	str	r3, [r7, #28]
 8003a20:	e037      	b.n	8003a92 <_ZN9simpleFOC11alignSensorEv+0x162>
		{
			float angle = _3PI_2 + _2PI * i / 500.0;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	ee07 3a90 	vmov	s15, r3
 8003a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a2c:	ed9f 7a7f 	vldr	s14, [pc, #508]	@ 8003c2c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003a30:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a34:	ee17 0a90 	vmov	r0, s15
 8003a38:	f7fc fda6 	bl	8000588 <__aeabi_f2d>
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	4b7b      	ldr	r3, [pc, #492]	@ (8003c30 <_ZN9simpleFOC11alignSensorEv+0x300>)
 8003a42:	f7fc ff23 	bl	800088c <__aeabi_ddiv>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	a374      	add	r3, pc, #464	@ (adr r3, 8003c20 <_ZN9simpleFOC11alignSensorEv+0x2f0>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fc3a 	bl	80002cc <__adddf3>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4610      	mov	r0, r2
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7fd f89a 	bl	8000b98 <__aeabi_d2f>
 8003a64:	4603      	mov	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]
			driver.setPhaseVoltage(voltage_sensor_align, 0, angle);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8003a74:	ed97 1a03 	vldr	s2, [r7, #12]
 8003a78:	eddf 0a6e 	vldr	s1, [pc, #440]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003a7c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a80:	4610      	mov	r0, r2
 8003a82:	f7ff fb8d 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
			HAL_Delay(2);
 8003a86:	2002      	movs	r0, #2
 8003a88:	f001 fd52 	bl	8005530 <HAL_Delay>
		for (int i = 500; i >= 0; i--) 
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3b01      	subs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	dac4      	bge.n	8003a22 <_ZN9simpleFOC11alignSensorEv+0xf2>
		}
		Encoder.updateSensor();
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fd fb09 	bl	80010b4 <_ZN17AS5048A_interface12updateSensorEv>
		float end_angle = Encoder.get_full_rotation_angle();
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	3308      	adds	r3, #8
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7fd fa94 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003aac:	ed87 0a05 	vstr	s0, [r7, #20]
		driver.setPhaseVoltage(0, 0, 0);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003ab6:	ed9f 1a5f 	vldr	s2, [pc, #380]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003aba:	eddf 0a5e 	vldr	s1, [pc, #376]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003abe:	ed9f 0a5d 	vldr	s0, [pc, #372]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fb6c 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003ac8:	20c8      	movs	r0, #200	@ 0xc8
 8003aca:	f001 fd31 	bl	8005530 <HAL_Delay>
		// determine the direction the sensor moved
		if (mid_angle == end_angle) 
 8003ace:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ad2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ad6:	eeb4 7a67 	vcmp.f32	s14, s15
 8003ada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ade:	d101      	bne.n	8003ae4 <_ZN9simpleFOC11alignSensorEv+0x1b4>
		{
			return 0; // failed calibration
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e096      	b.n	8003c12 <_ZN9simpleFOC11alignSensorEv+0x2e2>
		} else if (mid_angle < end_angle) 
 8003ae4:	ed97 7a06 	vldr	s14, [r7, #24]
 8003ae8:	edd7 7a05 	vldr	s15, [r7, #20]
 8003aec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af4:	d504      	bpl.n	8003b00 <_ZN9simpleFOC11alignSensorEv+0x1d0>
		{
			Encoder.sensor_direction = CCW;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f04f 32ff 	mov.w	r2, #4294967295
 8003afc:	651a      	str	r2, [r3, #80]	@ 0x50
 8003afe:	e002      	b.n	8003b06 <_ZN9simpleFOC11alignSensorEv+0x1d6>
		} else {
			Encoder.sensor_direction = CW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	651a      	str	r2, [r3, #80]	@ 0x50
		}
		// check pole pair number

		float moved = fabs(mid_angle - end_angle);
 8003b06:	ed97 7a06 	vldr	s14, [r7, #24]
 8003b0a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b12:	eeb0 0a67 	vmov.f32	s0, s15
 8003b16:	f7ff fe05 	bl	8003724 <_ZSt4fabsf>
 8003b1a:	ed87 0a04 	vstr	s0, [r7, #16]
		if (fabs(moved * pole_pairs - _2PI) > 0.5) 
 8003b1e:	4b46      	ldr	r3, [pc, #280]	@ (8003c38 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	ee07 3a90 	vmov	s15, r3
 8003b26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b2a:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b32:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8003c2c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003b36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3e:	f7ff fdf1 	bl	8003724 <_ZSt4fabsf>
 8003b42:	eef0 7a40 	vmov.f32	s15, s0
 8003b46:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003b4a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b52:	bfcc      	ite	gt
 8003b54:	2301      	movgt	r3, #1
 8003b56:	2300      	movle	r3, #0
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d008      	beq.n	8003b70 <_ZN9simpleFOC11alignSensorEv+0x240>
		{ // 0.5 is arbitrary number it can be lower or higher!
			pp_check = _2PI / moved;
 8003b5e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8003c2c <_ZN9simpleFOC11alignSensorEv+0x2fc>
 8003b62:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	edc3 7a8b 	vstr	s15, [r3, #556]	@ 0x22c
		}
	}

	// zero electric angle not known
	if (!_isset(Encoder.zero_electric_angle))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
 8003b76:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8003c28 <_ZN9simpleFOC11alignSensorEv+0x2f8>
 8003b7a:	eef4 7a47 	vcmp.f32	s15, s14
 8003b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b82:	d145      	bne.n	8003c10 <_ZN9simpleFOC11alignSensorEv+0x2e0>
	{
		// align the electrical phases of the motor and sensor
		// set angle -90(270 = 3PI/2) degrees
		driver.setPhaseVoltage(voltage_sensor_align, 0, _3PI_2);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	edd3 7a8c 	vldr	s15, [r3, #560]	@ 0x230
 8003b90:	ed9f 1a2a 	vldr	s2, [pc, #168]	@ 8003c3c <_ZN9simpleFOC11alignSensorEv+0x30c>
 8003b94:	eddf 0a27 	vldr	s1, [pc, #156]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003b98:	eeb0 0a67 	vmov.f32	s0, s15
 8003b9c:	4610      	mov	r0, r2
 8003b9e:	f7ff faff 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(700);
 8003ba2:	f44f 702f 	mov.w	r0, #700	@ 0x2bc
 8003ba6:	f001 fcc3 	bl	8005530 <HAL_Delay>
		Encoder.zero_electric_angle = _normalizeAngle(_electricalAngle(Encoder.sensor_direction * Encoder.get_full_rotation_angle(), pole_pairs));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3308      	adds	r3, #8
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f7fd fa0a 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003bc0:	eef0 7a40 	vmov.f32	s15, s0
 8003bc4:	ee68 7a27 	vmul.f32	s15, s16, s15
 8003bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c38 <_ZN9simpleFOC11alignSensorEv+0x308>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd2:	f7fe ff81 	bl	8002ad8 <_Z16_electricalAnglefi>
 8003bd6:	eef0 7a40 	vmov.f32	s15, s0
 8003bda:	eeb0 0a67 	vmov.f32	s0, s15
 8003bde:	f7fe ff57 	bl	8002a90 <_Z15_normalizeAnglef>
 8003be2:	eef0 7a40 	vmov.f32	s15, s0
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
		HAL_Delay(20);
 8003bec:	2014      	movs	r0, #20
 8003bee:	f001 fc9f 	bl	8005530 <HAL_Delay>
		// stop everything
		driver.setPhaseVoltage(0, 0, 0);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8003bf8:	ed9f 1a0e 	vldr	s2, [pc, #56]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003bfc:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003c00:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8003c34 <_ZN9simpleFOC11alignSensorEv+0x304>
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff facb 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
		HAL_Delay(200);
 8003c0a:	20c8      	movs	r0, #200	@ 0xc8
 8003c0c:	f001 fc90 	bl	8005530 <HAL_Delay>
	}
	return exit_flag;
 8003c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3728      	adds	r7, #40	@ 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	ecbd 8b02 	vpop	{d8}
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	80000000 	.word	0x80000000
 8003c24:	4012d97c 	.word	0x4012d97c
 8003c28:	c640e400 	.word	0xc640e400
 8003c2c:	40c90fdb 	.word	0x40c90fdb
 8003c30:	407f4000 	.word	0x407f4000
 8003c34:	00000000 	.word	0x00000000
 8003c38:	200000a8 	.word	0x200000a8
 8003c3c:	4096cbe4 	.word	0x4096cbe4

08003c40 <_ZN9simpleFOC7initFOCEf9Direction>:

// zero_electric_offset , _sensor_direction : from Run code "find_sensor_offset_and_direction"
// sensor : Encoder , Hall sensor , Magnetic encoder
int simpleFOC::initFOC(float zero_electric_offset, enum Direction _sensor_direction) 
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b086      	sub	sp, #24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	60f8      	str	r0, [r7, #12]
 8003c48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	71fb      	strb	r3, [r7, #7]
	int exit_flag = 1;
 8003c50:	2301      	movs	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
	// align motor if necessary
	// alignment necessary for encoders.
	if (_isset(zero_electric_offset)) 
 8003c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8003c58:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8003cac <_ZN9simpleFOC7initFOCEf9Direction+0x6c>
 8003c5c:	eef4 7a47 	vcmp.f32	s15, s14
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	d006      	beq.n	8003c74 <_ZN9simpleFOC7initFOCEf9Direction+0x34>
	{
		// absolute zero offset provided - no need to align
		Encoder.zero_electric_angle = zero_electric_offset;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	64da      	str	r2, [r3, #76]	@ 0x4c
		// set the sensor direction - default CW
		Encoder.sensor_direction = _sensor_direction;
 8003c6c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	// sensor and motor alignment - can be skipped
	// by setting motor.sensor_direction and motor.Encoder.zero_electric_angle
	exit_flag *= alignSensor();
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f7ff fe5b 	bl	8003930 <_ZN9simpleFOC11alignSensorEv>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	fb02 f303 	mul.w	r3, r2, r3
 8003c82:	617b      	str	r3, [r7, #20]
	// added the shaft_angle update
	shaft_angle = Encoder.get_full_rotation_angle();
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	3308      	adds	r3, #8
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fd f9a3 	bl	8000fd4 <_ZN17AS5048A_interface23get_full_rotation_angleEv>
 8003c8e:	eef0 7a40 	vmov.f32	s15, s0
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	edc3 7a01 	vstr	s15, [r3, #4]
	HAL_Delay(500);
 8003c98:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c9c:	f001 fc48 	bl	8005530 <HAL_Delay>

	return exit_flag;
 8003ca0:	697b      	ldr	r3, [r7, #20]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	c640e400 	.word	0xc640e400

08003cb0 <_ZN9simpleFOC7loopFOCEv>:



void simpleFOC::loopFOC() 
{
 8003cb0:	b590      	push	{r4, r7, lr}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	Encoder.updateSensor();
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	3308      	adds	r3, #8
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fd f9f9 	bl	80010b4 <_ZN17AS5048A_interface12updateSensorEv>
	// shaft angle/velocity need the update() to be called first
	// get shaft angle
	shaft_angle = Encoder.getShaftAngle();						// checked full rotation angle
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	3308      	adds	r3, #8
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fd fac2 	bl	8001250 <_ZN17AS5048A_interface13getShaftAngleEv>
 8003ccc:	eef0 7a40 	vmov.f32	s15, s0
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	edc3 7a01 	vstr	s15, [r3, #4]
	// electrical angle - need shaftAngle to be called first
	electrical_angle = Encoder.electricalAngle();				//checked
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3308      	adds	r3, #8
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fd f9a6 	bl	800102c <_ZN17AS5048A_interface15electricalAngleEv>
 8003ce0:	eef0 7a40 	vmov.f32	s15, s0
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	edc3 7a7f 	vstr	s15, [r3, #508]	@ 0x1fc


	// read dq currents
	current = CurrentSensor.getFOCCurrents(electrical_angle);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	edd3 7a7f 	vldr	s15, [r3, #508]	@ 0x1fc
 8003cf6:	687c      	ldr	r4, [r7, #4]
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	4610      	mov	r0, r2
 8003cfe:	f7fd fcef 	bl	80016e0 <_ZN12CurrentSense14getFOCCurrentsEf>
 8003d02:	eeb0 7a40 	vmov.f32	s14, s0
 8003d06:	eef0 7a60 	vmov.f32	s15, s1
 8003d0a:	ed84 7a86 	vstr	s14, [r4, #536]	@ 0x218
 8003d0e:	edc4 7a87 	vstr	s15, [r4, #540]	@ 0x21c

	current_LPF.q = LPF_current_q(current.q);   // filter values
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	edd3 7a87 	vldr	s15, [r3, #540]	@ 0x21c
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	4828      	ldr	r0, [pc, #160]	@ (8003dc0 <_ZN9simpleFOC7loopFOCEv+0x110>)
 8003d1e:	f7fe ff3d 	bl	8002b9c <_ZN13LowPassFilterclEf>
 8003d22:	eef0 7a40 	vmov.f32	s15, s0
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	edc3 7a89 	vstr	s15, [r3, #548]	@ 0x224
	current_LPF.d = LPF_current_d(current.d);   // filter values
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	4823      	ldr	r0, [pc, #140]	@ (8003dc4 <_ZN9simpleFOC7loopFOCEv+0x114>)
 8003d38:	f7fe ff30 	bl	8002b9c <_ZN13LowPassFilterclEf>
 8003d3c:	eef0 7a40 	vmov.f32	s15, s0
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	edc3 7a88 	vstr	s15, [r3, #544]	@ 0x220

	// calculate the phase voltages
	voltage.q = PID_current_q(current_sp - current_LPF.q);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	edd3 7a89 	vldr	s15, [r3, #548]	@ 0x224
 8003d52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d56:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5a:	481b      	ldr	r0, [pc, #108]	@ (8003dc8 <_ZN9simpleFOC7loopFOCEv+0x118>)
 8003d5c:	f7ff f862 	bl	8002e24 <_ZN13PIDControllerclEf>
 8003d60:	eef0 7a40 	vmov.f32	s15, s0
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = PID_current_d(0 - current.d);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	edd3 7a86 	vldr	s15, [r3, #536]	@ 0x218
 8003d70:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003dcc <_ZN9simpleFOC7loopFOCEv+0x11c>
 8003d74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	4814      	ldr	r0, [pc, #80]	@ (8003dd0 <_ZN9simpleFOC7loopFOCEv+0x120>)
 8003d7e:	f7ff f851 	bl	8002e24 <_ZN13PIDControllerclEf>
 8003d82:	eef0 7a40 	vmov.f32	s15, s0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	edc3 7a84 	vstr	s15, [r3, #528]	@ 0x210

	// set the phase voltage - FOC heart function :)
	driver.setPhaseVoltage(voltage.q, voltage.d, electrical_angle);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	edd3 7a85 	vldr	s15, [r3, #532]	@ 0x214
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	ed93 7a84 	vldr	s14, [r3, #528]	@ 0x210
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	edd3 6a7f 	vldr	s13, [r3, #508]	@ 0x1fc
 8003da4:	eeb0 1a66 	vmov.f32	s2, s13
 8003da8:	eef0 0a47 	vmov.f32	s1, s14
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	4610      	mov	r0, r2
 8003db2:	f7ff f9f5 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd90      	pop	{r4, r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	200001e4 	.word	0x200001e4
 8003dc4:	200001f0 	.word	0x200001f0
 8003dc8:	20000178 	.word	0x20000178
 8003dcc:	00000000 	.word	0x00000000
 8003dd0:	20000154 	.word	0x20000154

08003dd4 <_ZN9simpleFOC10move_angleEf>:
	voltage.q = current_sp*phase_resistance;
	voltage.d = 0;
}

void simpleFOC::move_angle(float new_target)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	ed87 0a00 	vstr	s0, [r7]

	// downsampling (optional)
	// if(motion_cnt++ < motion_downsample) return;
	// motion_cnt = 0;
	// set internal target variable
	if(_isset(new_target))
 8003de0:	edd7 7a00 	vldr	s15, [r7]
 8003de4:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8003e54 <_ZN9simpleFOC10move_angleEf+0x80>
 8003de8:	eef4 7a47 	vcmp.f32	s15, s14
 8003dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df0:	d003      	beq.n	8003dfa <_ZN9simpleFOC10move_angleEf+0x26>
		  target = new_target;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	f8c3 21f8 	str.w	r2, [r3, #504]	@ 0x1f8

	// angle set point
	shaft_angle_sp = target;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	// calculate velocity set point
	current_sp = PID_position(shaft_angle_sp - shaft_angle);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	ed93 7a83 	vldr	s14, [r3, #524]	@ 0x20c
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e16:	eeb0 0a67 	vmov.f32	s0, s15
 8003e1a:	480f      	ldr	r0, [pc, #60]	@ (8003e58 <_ZN9simpleFOC10move_angleEf+0x84>)
 8003e1c:	f7ff f802 	bl	8002e24 <_ZN13PIDControllerclEf>
 8003e20:	eef0 7a40 	vmov.f32	s15, s0
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	edc3 7a81 	vstr	s15, [r3, #516]	@ 0x204

//	// calculate the torque command
//	current_sp = PID_velocity(shaft_velocity_sp - shaft_velocity);

	voltage.q = current_sp*phase_resistance;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	ed93 7a81 	vldr	s14, [r3, #516]	@ 0x204
 8003e30:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <_ZN9simpleFOC10move_angleEf+0x88>)
 8003e32:	edd3 7a00 	vldr	s15, [r3]
 8003e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	edc3 7a85 	vstr	s15, [r3, #532]	@ 0x214
	voltage.d = 0;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f04f 0200 	mov.w	r2, #0
 8003e46:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
}
 8003e4a:	bf00      	nop
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	c640e400 	.word	0xc640e400
 8003e58:	200001c0 	.word	0x200001c0
 8003e5c:	200000a0 	.word	0x200000a0

08003e60 <_ZN9simpleFOC13angleOpenloopEf>:

// Function (iterative) generating open loop movement towards the target angle
// - target_angle - rad
// it uses voltage_limit and velocity_limit variables
float simpleFOC::angleOpenloop(float target_angle) 
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	ed2d 8b02 	vpush	{d8}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	ed87 0a00 	vstr	s0, [r7]
	unsigned long now_us = micros();
 8003e70:	f000 f8e6 	bl	8004040 <_ZN9simpleFOC6microsEv>
 8003e74:	60f8      	str	r0, [r7, #12]
	// calculate the sample time from last call
	float Ts = (now_us - open_loop_timestamp) * 1e-6;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1a9b      	subs	r3, r3, r2
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fc fb5e 	bl	8000544 <__aeabi_ui2d>
 8003e88:	a36b      	add	r3, pc, #428	@ (adr r3, 8004038 <_ZN9simpleFOC13angleOpenloopEf+0x1d8>)
 8003e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8e:	f7fc fbd3 	bl	8000638 <__aeabi_dmul>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4610      	mov	r0, r2
 8003e98:	4619      	mov	r1, r3
 8003e9a:	f7fc fe7d 	bl	8000b98 <__aeabi_d2f>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	617b      	str	r3, [r7, #20]
	// quick fix for strange cases (micros overflow + timestamp not defined)
	if (Ts <= 0 || Ts > 0.5)
 8003ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8003ea6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eae:	d908      	bls.n	8003ec2 <_ZN9simpleFOC13angleOpenloopEf+0x62>
 8003eb0:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eb4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003eb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ec0:	dd01      	ble.n	8003ec6 <_ZN9simpleFOC13angleOpenloopEf+0x66>
		Ts = 1e-3;
 8003ec2:	4b55      	ldr	r3, [pc, #340]	@ (8004018 <_ZN9simpleFOC13angleOpenloopEf+0x1b8>)
 8003ec4:	617b      	str	r3, [r7, #20]

	// calculate the necessary angle to move from current position towards target angle
	// with maximal velocity (velocity_limit)
	if (abs(target_angle - shaft_angle) > abs(velocity_limit * Ts))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ecc:	ed97 7a00 	vldr	s14, [r7]
 8003ed0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed8:	f7fc feae 	bl	8000c38 <_ZSt3absf>
 8003edc:	eeb0 8a40 	vmov.f32	s16, s0
 8003ee0:	4b4e      	ldr	r3, [pc, #312]	@ (800401c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003ee2:	ed93 7a00 	vldr	s14, [r3]
 8003ee6:	edd7 7a05 	vldr	s15, [r7, #20]
 8003eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eee:	eeb0 0a67 	vmov.f32	s0, s15
 8003ef2:	f7fc fea1 	bl	8000c38 <_ZSt3absf>
 8003ef6:	eef0 7a40 	vmov.f32	s15, s0
 8003efa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8003efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f02:	bfcc      	ite	gt
 8003f04:	2301      	movgt	r3, #1
 8003f06:	2300      	movle	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d03c      	beq.n	8003f88 <_ZN9simpleFOC13angleOpenloopEf+0x128>
	{
		shaft_angle += _sign(target_angle - shaft_angle) * abs(velocity_limit) * Ts;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f14:	ed97 7a00 	vldr	s14, [r7]
 8003f18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f24:	d502      	bpl.n	8003f2c <_ZN9simpleFOC13angleOpenloopEf+0xcc>
 8003f26:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8003f2a:	e010      	b.n	8003f4e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f32:	ed97 7a00 	vldr	s14, [r7]
 8003f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f42:	dd02      	ble.n	8003f4a <_ZN9simpleFOC13angleOpenloopEf+0xea>
 8003f44:	eeb7 8a00 	vmov.f32	s16, #112	@ 0x3f800000  1.0
 8003f48:	e001      	b.n	8003f4e <_ZN9simpleFOC13angleOpenloopEf+0xee>
 8003f4a:	ed9f 8a35 	vldr	s16, [pc, #212]	@ 8004020 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003f4e:	4b33      	ldr	r3, [pc, #204]	@ (800401c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	eeb0 0a67 	vmov.f32	s0, s15
 8003f58:	f7fc fe6e 	bl	8000c38 <_ZSt3absf>
 8003f5c:	eef0 7a40 	vmov.f32	s15, s0
 8003f60:	ee28 7a27 	vmul.f32	s14, s16, s15
 8003f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	edc3 7a01 	vstr	s15, [r3, #4]
		shaft_velocity = velocity_limit;
 8003f7c:	4b27      	ldr	r3, [pc, #156]	@ (800401c <_ZN9simpleFOC13angleOpenloopEf+0x1bc>)
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
 8003f86:	e007      	b.n	8003f98 <_ZN9simpleFOC13angleOpenloopEf+0x138>
	}
	else
	{
		shaft_angle = target_angle;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	683a      	ldr	r2, [r7, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
		shaft_velocity = 0;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
	}

	// use voltage limit or current limit
	float Uq = voltage_limit;
 8003f98:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <_ZN9simpleFOC13angleOpenloopEf+0x1c4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	613b      	str	r3, [r7, #16]
	if(_isset(phase_resistance))
 8003f9e:	4b22      	ldr	r3, [pc, #136]	@ (8004028 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003fa0:	edd3 7a00 	vldr	s15, [r3]
 8003fa4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800402c <_ZN9simpleFOC13angleOpenloopEf+0x1cc>
 8003fa8:	eef4 7a47 	vcmp.f32	s15, s14
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb0:	d009      	beq.n	8003fc6 <_ZN9simpleFOC13angleOpenloopEf+0x166>
		Uq =  current_limit*phase_resistance;
 8003fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8004030 <_ZN9simpleFOC13angleOpenloopEf+0x1d0>)
 8003fb4:	ed93 7a00 	vldr	s14, [r3]
 8003fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004028 <_ZN9simpleFOC13angleOpenloopEf+0x1c8>)
 8003fba:	edd3 7a00 	vldr	s15, [r3]
 8003fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc2:	edc7 7a04 	vstr	s15, [r7, #16]

	// set the maximal allowed voltage (voltage_limit) with the necessary angle
	driver.setPhaseVoltage(Uq, 0, _electricalAngle(shaft_angle, pole_pairs));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f503 74f4 	add.w	r4, r3, #488	@ 0x1e8
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	edd3 7a01 	vldr	s15, [r3, #4]
 8003fd2:	4b18      	ldr	r3, [pc, #96]	@ (8004034 <_ZN9simpleFOC13angleOpenloopEf+0x1d4>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003fdc:	f7fe fd7c 	bl	8002ad8 <_Z16_electricalAnglefi>
 8003fe0:	eef0 7a40 	vmov.f32	s15, s0
 8003fe4:	eeb0 1a67 	vmov.f32	s2, s15
 8003fe8:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8004020 <_ZN9simpleFOC13angleOpenloopEf+0x1c0>
 8003fec:	ed97 0a04 	vldr	s0, [r7, #16]
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f7ff f8d5 	bl	80031a0 <_ZN11pwm_drivers15setPhaseVoltageEfff>

	open_loop_timestamp = now_us;
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	return Uq;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	ee07 3a90 	vmov	s15, r3
}
 8004004:	eeb0 0a67 	vmov.f32	s0, s15
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	ecbd 8b02 	vpop	{d8}
 8004010:	bd90      	pop	{r4, r7, pc}
 8004012:	bf00      	nop
 8004014:	f3af 8000 	nop.w
 8004018:	3a83126f 	.word	0x3a83126f
 800401c:	200000b8 	.word	0x200000b8
 8004020:	00000000 	.word	0x00000000
 8004024:	200000b0 	.word	0x200000b0
 8004028:	200000a0 	.word	0x200000a0
 800402c:	c640e400 	.word	0xc640e400
 8004030:	200000b4 	.word	0x200000b4
 8004034:	200000a8 	.word	0x200000a8
 8004038:	a0b5ed8d 	.word	0xa0b5ed8d
 800403c:	3eb0c6f7 	.word	0x3eb0c6f7

08004040 <_ZN9simpleFOC6microsEv>:

/**
 * @brief Gather system clock and convert to microsecond
*/
uint32_t simpleFOC::micros(void) 
{
 8004040:	b480      	push	{r7}
 8004042:	af00      	add	r7, sp, #0
    return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004044:	4b07      	ldr	r3, [pc, #28]	@ (8004064 <_ZN9simpleFOC6microsEv+0x24>)
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	4b07      	ldr	r3, [pc, #28]	@ (8004068 <_ZN9simpleFOC6microsEv+0x28>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4907      	ldr	r1, [pc, #28]	@ (800406c <_ZN9simpleFOC6microsEv+0x2c>)
 800404e:	fba1 1303 	umull	r1, r3, r1, r3
 8004052:	0c9b      	lsrs	r3, r3, #18
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004058:	4618      	mov	r0, r3
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	e0001000 	.word	0xe0001000
 8004068:	200000bc 	.word	0x200000bc
 800406c:	431bde83 	.word	0x431bde83

08004070 <MX_CORDIC_Init>:

extern CORDIC_HandleTypeDef hcordic;

/* CORDIC init function */
void MX_CORDIC_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8004074:	4b06      	ldr	r3, [pc, #24]	@ (8004090 <MX_CORDIC_Init+0x20>)
 8004076:	4a07      	ldr	r2, [pc, #28]	@ (8004094 <MX_CORDIC_Init+0x24>)
 8004078:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800407a:	4805      	ldr	r0, [pc, #20]	@ (8004090 <MX_CORDIC_Init+0x20>)
 800407c:	f003 f82a 	bl	80070d4 <HAL_CORDIC_Init>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d001      	beq.n	800408a <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8004086:	f000 fd87 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 800408a:	bf00      	nop
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200005e8 	.word	0x200005e8
 8004094:	40020c00 	.word	0x40020c00

08004098 <_Z13FDCAN1_Configv>:

// Buffer to store received data
#define RX_FIFO0_NEW_MESSAGE 1
uint8_t rxData[8];
void FDCAN1_Config(void)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
    // Start the FDCAN module
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 800409e:	481e      	ldr	r0, [pc, #120]	@ (8004118 <_Z13FDCAN1_Configv+0x80>)
 80040a0:	f003 fe72 	bl	8007d88 <HAL_FDCAN_Start>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	bf14      	ite	ne
 80040aa:	2301      	movne	r3, #1
 80040ac:	2300      	moveq	r3, #0
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <_Z13FDCAN1_Configv+0x20>
    {
        Error_Handler();
 80040b4:	f000 fd70 	bl	8004b98 <Error_Handler>
    }

    // Activate the notification for RX FIFO 0
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80040b8:	2200      	movs	r2, #0
 80040ba:	2101      	movs	r1, #1
 80040bc:	4816      	ldr	r0, [pc, #88]	@ (8004118 <_Z13FDCAN1_Configv+0x80>)
 80040be:	f003 ff93 	bl	8007fe8 <HAL_FDCAN_ActivateNotification>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	bf14      	ite	ne
 80040c8:	2301      	movne	r3, #1
 80040ca:	2300      	moveq	r3, #0
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <_Z13FDCAN1_Configv+0x3e>
    {
        Error_Handler();
 80040d2:	f000 fd61 	bl	8004b98 <Error_Handler>
    }

    // Configure the filter to accept all messages (optional, adjust as needed)
    FDCAN_FilterTypeDef filterConfig;
    filterConfig.IdType = FDCAN_STANDARD_ID;       // Standard Identifier (11 bits)
 80040d6:	2300      	movs	r3, #0
 80040d8:	603b      	str	r3, [r7, #0]
    filterConfig.FilterIndex = 0;
 80040da:	2300      	movs	r3, #0
 80040dc:	607b      	str	r3, [r7, #4]
    filterConfig.FilterType = FDCAN_FILTER_MASK;
 80040de:	2302      	movs	r3, #2
 80040e0:	60bb      	str	r3, [r7, #8]
    filterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80040e2:	2301      	movs	r3, #1
 80040e4:	60fb      	str	r3, [r7, #12]
    filterConfig.FilterID1 = 0x000;               // Accept all IDs
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
    filterConfig.FilterID2 = 0x7FF;               // Mask for all bits
 80040ea:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80040ee:	617b      	str	r3, [r7, #20]

    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &filterConfig) != HAL_OK)
 80040f0:	463b      	mov	r3, r7
 80040f2:	4619      	mov	r1, r3
 80040f4:	4808      	ldr	r0, [pc, #32]	@ (8004118 <_Z13FDCAN1_Configv+0x80>)
 80040f6:	f003 fded 	bl	8007cd4 <HAL_FDCAN_ConfigFilter>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	bf14      	ite	ne
 8004100:	2301      	movne	r3, #1
 8004102:	2300      	moveq	r3, #0
 8004104:	b2db      	uxtb	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <_Z13FDCAN1_Configv+0x76>
    {
        Error_Handler();
 800410a:	f000 fd45 	bl	8004b98 <Error_Handler>
    }
}
 800410e:	bf00      	nop
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000634 	.word	0x20000634

0800411c <HAL_FDCAN_RxFifo0Callback>:

// Callback function for received messages
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b08e      	sub	sp, #56	@ 0x38
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	f003 0301 	and.w	r3, r3, #1
 800412c:	2b00      	cmp	r3, #0
 800412e:	d02d      	beq.n	800418c <HAL_FDCAN_RxFifo0Callback+0x70>
    {
        FDCAN_RxHeaderTypeDef rxHeader;

        // Retrieve the message from RX FIFO 0
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK)
 8004130:	f107 020c 	add.w	r2, r7, #12
 8004134:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8004136:	2140      	movs	r1, #64	@ 0x40
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f003 fe4d 	bl	8007dd8 <HAL_FDCAN_GetRxMessage>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf14      	ite	ne
 8004144:	2301      	movne	r3, #1
 8004146:	2300      	moveq	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_FDCAN_RxFifo0Callback+0x36>
        {
            Error_Handler();
 800414e:	f000 fd23 	bl	8004b98 <Error_Handler>
        }

        // Process received data (debugging or further handling)
        printf("Received message: ID: 0x%X, DLC: %d, Data: ",
 8004152:	68f9      	ldr	r1, [r7, #12]
               rxHeader.Identifier, rxHeader.DataLength >> 16);
 8004154:	69bb      	ldr	r3, [r7, #24]
        printf("Received message: ID: 0x%X, DLC: %d, Data: ",
 8004156:	0c1b      	lsrs	r3, r3, #16
 8004158:	461a      	mov	r2, r3
 800415a:	480f      	ldr	r0, [pc, #60]	@ (8004198 <HAL_FDCAN_RxFifo0Callback+0x7c>)
 800415c:	f008 feae 	bl	800cebc <iprintf>
        for (int i = 0; i < (rxHeader.DataLength >> 16); i++)
 8004160:	2300      	movs	r3, #0
 8004162:	637b      	str	r3, [r7, #52]	@ 0x34
 8004164:	e00a      	b.n	800417c <HAL_FDCAN_RxFifo0Callback+0x60>
        {
            printf("%02X ", rxData[i]);
 8004166:	4a0b      	ldr	r2, [pc, #44]	@ (8004194 <HAL_FDCAN_RxFifo0Callback+0x78>)
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	480a      	ldr	r0, [pc, #40]	@ (800419c <HAL_FDCAN_RxFifo0Callback+0x80>)
 8004172:	f008 fea3 	bl	800cebc <iprintf>
        for (int i = 0; i < (rxHeader.DataLength >> 16); i++)
 8004176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004178:	3301      	adds	r3, #1
 800417a:	637b      	str	r3, [r7, #52]	@ 0x34
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	0c1a      	lsrs	r2, r3, #16
 8004180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004182:	429a      	cmp	r2, r3
 8004184:	d8ef      	bhi.n	8004166 <HAL_FDCAN_RxFifo0Callback+0x4a>
        }
        printf("\n");
 8004186:	200a      	movs	r0, #10
 8004188:	f008 feaa 	bl	800cee0 <putchar>
    }
}
 800418c:	bf00      	nop
 800418e:	3738      	adds	r7, #56	@ 0x38
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	200007cc 	.word	0x200007cc
 8004198:	0800dbec 	.word	0x0800dbec
 800419c:	0800dc18 	.word	0x0800dc18

080041a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041a4:	f001 f953 	bl	800544e <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041a8:	f000 f878 	bl	800429c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041ac:	f000 fc52 	bl	8004a54 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80041b0:	f000 fbe8 	bl	8004984 <_ZL11MX_DMA_Initv>
  MX_SPI1_Init();
 80041b4:	f000 fa4a 	bl	800464c <_ZL12MX_SPI1_Initv>
  MX_ADC1_Init();
 80041b8:	f000 f8c6 	bl	8004348 <_ZL12MX_ADC1_Initv>
  MX_FDCAN1_Init();
 80041bc:	f000 f9e2 	bl	8004584 <_ZL14MX_FDCAN1_Initv>
  MX_TIM1_Init();
 80041c0:	f000 fa86 	bl	80046d0 <_ZL12MX_TIM1_Initv>
  MX_ADC2_Init();
 80041c4:	f000 f946 	bl	8004454 <_ZL12MX_ADC2_Initv>
  MX_CORDIC_Init();
 80041c8:	f7ff ff52 	bl	8004070 <MX_CORDIC_Init>
  MX_CRC_Init();
 80041cc:	f000 f9b2 	bl	8004534 <_ZL11MX_CRC_Initv>
  MX_FMAC_Init();
 80041d0:	f000 fa24 	bl	800461c <_ZL12MX_FMAC_Initv>
  MX_TIM2_Init();
 80041d4:	f000 fb7a 	bl	80048cc <_ZL12MX_TIM2_Initv>
  /* USER CODE BEGIN 2 */

  //  Delay SETUP
	DWT_Init();
 80041d8:	f000 fc9c 	bl	8004b14 <_ZL8DWT_Initv>
	//  Timer Interrupt tim2,tim4
  HAL_TIM_Base_Start_IT(&htim2);
 80041dc:	4826      	ldr	r0, [pc, #152]	@ (8004278 <main+0xd8>)
 80041de:	f006 f88f 	bl	800a300 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_SET);  // Enable
 80041e2:	2201      	movs	r2, #1
 80041e4:	2101      	movs	r1, #1
 80041e6:	4825      	ldr	r0, [pc, #148]	@ (800427c <main+0xdc>)
 80041e8:	f004 fc02 	bl	80089f0 <HAL_GPIO_WritePin>
//	  HAL_GPIO_WritePin(EN_GPIO_Port, EN_Pin, GPIO_PIN_RESET);  // Disable

	//SPI SETUP
	simpleFOC.initSensors();
 80041ec:	4824      	ldr	r0, [pc, #144]	@ (8004280 <main+0xe0>)
 80041ee:	f7ff fb01 	bl	80037f4 <_ZN9simpleFOC11initSensorsEv>
	//FOC SETUP
  simpleFOC.initFOC(5.26846504, CW);
 80041f2:	2101      	movs	r1, #1
 80041f4:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8004284 <main+0xe4>
 80041f8:	4821      	ldr	r0, [pc, #132]	@ (8004280 <main+0xe0>)
 80041fa:	f7ff fd21 	bl	8003c40 <_ZN9simpleFOC7initFOCEf9Direction>
//  	simpleFOC.initFOC(NOT_SET, UNKNOWN);


  // Configure FDCAN
    FDCAN1_Config();
 80041fe:	f7ff ff4b 	bl	8004098 <_Z13FDCAN1_Configv>


	  /** Test Closed Loop Control **/
//	  simpleFOC.move_torque(setpoint_cmd);			// 14 us
//	  simpleFOC.move_velocity(setpoint_cmd);		// 21 us  maximum 100 rad/s --> 950 rpm
	  simpleFOC.move_angle(setpoint_cmd);			// 26 us  a lot of noise in q,d current
 8004202:	4b21      	ldr	r3, [pc, #132]	@ (8004288 <main+0xe8>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	eeb0 0a67 	vmov.f32	s0, s15
 800420c:	481c      	ldr	r0, [pc, #112]	@ (8004280 <main+0xe0>)
 800420e:	f7ff fde1 	bl	8003dd4 <_ZN9simpleFOC10move_angleEf>

	  /** Always run loopFOC (except open loop control)**/
	  simpleFOC.loopFOC();							// 115 us
 8004212:	481b      	ldr	r0, [pc, #108]	@ (8004280 <main+0xe0>)
 8004214:	f7ff fd4c 	bl	8003cb0 <_ZN9simpleFOC7loopFOCEv>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  t5 = micros() - t4;
 8004218:	f000 fc94 	bl	8004b44 <_ZL6microsv>
 800421c:	4602      	mov	r2, r0
 800421e:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <main+0xec>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	4a1a      	ldr	r2, [pc, #104]	@ (8004290 <main+0xf0>)
 8004226:	6013      	str	r3, [r2, #0]
	  t4 = micros();
 8004228:	f000 fc8c 	bl	8004b44 <_ZL6microsv>
 800422c:	4603      	mov	r3, r0
 800422e:	4a17      	ldr	r2, [pc, #92]	@ (800428c <main+0xec>)
 8004230:	6013      	str	r3, [r2, #0]
	  loop_freq = 1.0 / (t5 * 1e-6);
 8004232:	4b17      	ldr	r3, [pc, #92]	@ (8004290 <main+0xf0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f7fc f984 	bl	8000544 <__aeabi_ui2d>
 800423c:	a30c      	add	r3, pc, #48	@ (adr r3, 8004270 <main+0xd0>)
 800423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004242:	f7fc f9f9 	bl	8000638 <__aeabi_dmul>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	f04f 0000 	mov.w	r0, #0
 800424e:	4911      	ldr	r1, [pc, #68]	@ (8004294 <main+0xf4>)
 8004250:	f7fc fb1c 	bl	800088c <__aeabi_ddiv>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4610      	mov	r0, r2
 800425a:	4619      	mov	r1, r3
 800425c:	f7fc fc9c 	bl	8000b98 <__aeabi_d2f>
 8004260:	4603      	mov	r3, r0
 8004262:	4a0d      	ldr	r2, [pc, #52]	@ (8004298 <main+0xf8>)
 8004264:	6013      	str	r3, [r2, #0]
	  simpleFOC.move_angle(setpoint_cmd);			// 26 us  a lot of noise in q,d current
 8004266:	bf00      	nop
 8004268:	e7cb      	b.n	8004202 <main+0x62>
 800426a:	bf00      	nop
 800426c:	f3af 8000 	nop.w
 8004270:	a0b5ed8d 	.word	0xa0b5ed8d
 8004274:	3eb0c6f7 	.word	0x3eb0c6f7
 8004278:	20000780 	.word	0x20000780
 800427c:	48000400 	.word	0x48000400
 8004280:	20000218 	.word	0x20000218
 8004284:	40a89744 	.word	0x40a89744
 8004288:	200007e0 	.word	0x200007e0
 800428c:	200007d4 	.word	0x200007d4
 8004290:	200007d8 	.word	0x200007d8
 8004294:	3ff00000 	.word	0x3ff00000
 8004298:	200007dc 	.word	0x200007dc

0800429c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b094      	sub	sp, #80	@ 0x50
 80042a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80042a2:	f107 0318 	add.w	r3, r7, #24
 80042a6:	2238      	movs	r2, #56	@ 0x38
 80042a8:	2100      	movs	r1, #0
 80042aa:	4618      	mov	r0, r3
 80042ac:	f008 fe63 	bl	800cf76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80042b0:	1d3b      	adds	r3, r7, #4
 80042b2:	2200      	movs	r2, #0
 80042b4:	601a      	str	r2, [r3, #0]
 80042b6:	605a      	str	r2, [r3, #4]
 80042b8:	609a      	str	r2, [r3, #8]
 80042ba:	60da      	str	r2, [r3, #12]
 80042bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80042be:	2000      	movs	r0, #0
 80042c0:	f004 fbae 	bl	8008a20 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042c4:	2302      	movs	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80042cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042ce:	2340      	movs	r3, #64	@ 0x40
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042d2:	2302      	movs	r3, #2
 80042d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042d6:	2302      	movs	r3, #2
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80042da:	2304      	movs	r3, #4
 80042dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80042de:	2355      	movs	r3, #85	@ 0x55
 80042e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80042e2:	2302      	movs	r3, #2
 80042e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80042e6:	2302      	movs	r3, #2
 80042e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80042ea:	2302      	movs	r3, #2
 80042ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80042ee:	f107 0318 	add.w	r3, r7, #24
 80042f2:	4618      	mov	r0, r3
 80042f4:	f004 fc48 	bl	8008b88 <HAL_RCC_OscConfig>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8004308:	f000 fc46 	bl	8004b98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800430c:	230f      	movs	r3, #15
 800430e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004310:	2303      	movs	r3, #3
 8004312:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004318:	2300      	movs	r3, #0
 800431a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800431c:	2300      	movs	r3, #0
 800431e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004320:	1d3b      	adds	r3, r7, #4
 8004322:	2104      	movs	r1, #4
 8004324:	4618      	mov	r0, r3
 8004326:	f004 ff41 	bl	80091ac <HAL_RCC_ClockConfig>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	bf14      	ite	ne
 8004330:	2301      	movne	r3, #1
 8004332:	2300      	moveq	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800433a:	f000 fc2d 	bl	8004b98 <Error_Handler>
  }
}
 800433e:	bf00      	nop
 8004340:	3750      	adds	r7, #80	@ 0x50
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
	...

08004348 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b08c      	sub	sp, #48	@ 0x30
 800434c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800434e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	605a      	str	r2, [r3, #4]
 8004358:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800435a:	1d3b      	adds	r3, r7, #4
 800435c:	2220      	movs	r2, #32
 800435e:	2100      	movs	r1, #0
 8004360:	4618      	mov	r0, r3
 8004362:	f008 fe08 	bl	800cf76 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8004366:	4b39      	ldr	r3, [pc, #228]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004368:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800436c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004370:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004376:	4b35      	ldr	r3, [pc, #212]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004378:	2200      	movs	r2, #0
 800437a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800437c:	4b33      	ldr	r3, [pc, #204]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 800437e:	2200      	movs	r2, #0
 8004380:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004382:	4b32      	ldr	r3, [pc, #200]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004384:	2200      	movs	r2, #0
 8004386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004388:	4b30      	ldr	r3, [pc, #192]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 800438a:	2200      	movs	r2, #0
 800438c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800438e:	4b2f      	ldr	r3, [pc, #188]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004390:	2204      	movs	r2, #4
 8004392:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004394:	4b2d      	ldr	r3, [pc, #180]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 8004396:	2200      	movs	r2, #0
 8004398:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800439a:	4b2c      	ldr	r3, [pc, #176]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 800439c:	2201      	movs	r2, #1
 800439e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80043a0:	4b2a      	ldr	r3, [pc, #168]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043a6:	4b29      	ldr	r3, [pc, #164]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043ae:	4b27      	ldr	r3, [pc, #156]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043b4:	4b25      	ldr	r3, [pc, #148]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30

//  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
//  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO2;		// Use TIM1 TRGO

  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043ba:	4b24      	ldr	r3, [pc, #144]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80043c2:	4b22      	ldr	r3, [pc, #136]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043c4:	2200      	movs	r2, #0
 80043c6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80043c8:	4b20      	ldr	r3, [pc, #128]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80043d0:	481e      	ldr	r0, [pc, #120]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043d2:	f001 fb0f 	bl	80059f4 <HAL_ADC_Init>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80043e6:	f000 fbd7 	bl	8004b98 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80043ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f2:	4619      	mov	r1, r3
 80043f4:	4815      	ldr	r0, [pc, #84]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 80043f6:	f002 fd85 	bl	8006f04 <HAL_ADCEx_MultiModeConfigChannel>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	bf14      	ite	ne
 8004400:	2301      	movne	r3, #1
 8004402:	2300      	moveq	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <_ZL12MX_ADC1_Initv+0xc6>
  {
    Error_Handler();
 800440a:	f000 fbc5 	bl	8004b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <_ZL12MX_ADC1_Initv+0x108>)
 8004410:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004412:	2306      	movs	r3, #6
 8004414:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8004416:	2307      	movs	r3, #7
 8004418:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800441a:	237f      	movs	r3, #127	@ 0x7f
 800441c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800441e:	2304      	movs	r3, #4
 8004420:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004422:	2300      	movs	r3, #0
 8004424:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004426:	1d3b      	adds	r3, r7, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4808      	ldr	r0, [pc, #32]	@ (800444c <_ZL12MX_ADC1_Initv+0x104>)
 800442c:	f001 ffbc 	bl	80063a8 <HAL_ADC_ConfigChannel>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d001      	beq.n	8004444 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 8004440:	f000 fbaa 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004444:	bf00      	nop
 8004446:	3730      	adds	r7, #48	@ 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	20000450 	.word	0x20000450
 8004450:	04300002 	.word	0x04300002

08004454 <_ZL12MX_ADC2_Initv>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b088      	sub	sp, #32
 8004458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800445a:	463b      	mov	r3, r7
 800445c:	2220      	movs	r2, #32
 800445e:	2100      	movs	r1, #0
 8004460:	4618      	mov	r0, r3
 8004462:	f008 fd88 	bl	800cf76 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8004466:	4b30      	ldr	r3, [pc, #192]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004468:	4a30      	ldr	r2, [pc, #192]	@ (800452c <_ZL12MX_ADC2_Initv+0xd8>)
 800446a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800446c:	4b2e      	ldr	r3, [pc, #184]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 800446e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004472:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004474:	4b2c      	ldr	r3, [pc, #176]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004476:	2200      	movs	r2, #0
 8004478:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800447a:	4b2b      	ldr	r3, [pc, #172]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 800447c:	2200      	movs	r2, #0
 800447e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8004480:	4b29      	ldr	r3, [pc, #164]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004482:	2200      	movs	r2, #0
 8004484:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004486:	4b28      	ldr	r3, [pc, #160]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004488:	2200      	movs	r2, #0
 800448a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800448c:	4b26      	ldr	r3, [pc, #152]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 800448e:	2204      	movs	r2, #4
 8004490:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8004492:	4b25      	ldr	r3, [pc, #148]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004498:	4b23      	ldr	r3, [pc, #140]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 800449a:	2201      	movs	r2, #1
 800449c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800449e:	4b22      	ldr	r3, [pc, #136]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80044a4:	4b20      	ldr	r3, [pc, #128]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044ac:	4b1e      	ldr	r3, [pc, #120]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80044b2:	4b1d      	ldr	r3, [pc, #116]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80044c0:	4b19      	ldr	r3, [pc, #100]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80044c6:	4b18      	ldr	r3, [pc, #96]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80044ce:	4816      	ldr	r0, [pc, #88]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 80044d0:	f001 fa90 	bl	80059f4 <HAL_ADC_Init>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	bf14      	ite	ne
 80044da:	2301      	movne	r3, #1
 80044dc:	2300      	moveq	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <_ZL12MX_ADC2_Initv+0x94>
  {
    Error_Handler();
 80044e4:	f000 fb58 	bl	8004b98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80044e8:	4b11      	ldr	r3, [pc, #68]	@ (8004530 <_ZL12MX_ADC2_Initv+0xdc>)
 80044ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044ec:	2306      	movs	r3, #6
 80044ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80044f0:	2307      	movs	r3, #7
 80044f2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80044f4:	237f      	movs	r3, #127	@ 0x7f
 80044f6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80044f8:	2304      	movs	r3, #4
 80044fa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8004500:	463b      	mov	r3, r7
 8004502:	4619      	mov	r1, r3
 8004504:	4808      	ldr	r0, [pc, #32]	@ (8004528 <_ZL12MX_ADC2_Initv+0xd4>)
 8004506:	f001 ff4f 	bl	80063a8 <HAL_ADC_ConfigChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	2b00      	cmp	r3, #0
 800450e:	bf14      	ite	ne
 8004510:	2301      	movne	r3, #1
 8004512:	2300      	moveq	r3, #0
 8004514:	b2db      	uxtb	r3, r3
 8004516:	2b00      	cmp	r3, #0
 8004518:	d001      	beq.n	800451e <_ZL12MX_ADC2_Initv+0xca>
  {
    Error_Handler();
 800451a:	f000 fb3d 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800451e:	bf00      	nop
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200004bc 	.word	0x200004bc
 800452c:	50000100 	.word	0x50000100
 8004530:	08600004 	.word	0x08600004

08004534 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8004538:	4b10      	ldr	r3, [pc, #64]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 800453a:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <_ZL11MX_CRC_Initv+0x4c>)
 800453c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800453e:	4b0f      	ldr	r3, [pc, #60]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 8004540:	2200      	movs	r2, #0
 8004542:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8004544:	4b0d      	ldr	r3, [pc, #52]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 8004546:	2200      	movs	r2, #0
 8004548:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800454a:	4b0c      	ldr	r3, [pc, #48]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 800454c:	2200      	movs	r2, #0
 800454e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8004550:	4b0a      	ldr	r3, [pc, #40]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 8004552:	2200      	movs	r2, #0
 8004554:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8004556:	4b09      	ldr	r3, [pc, #36]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 8004558:	2201      	movs	r2, #1
 800455a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800455c:	4807      	ldr	r0, [pc, #28]	@ (800457c <_ZL11MX_CRC_Initv+0x48>)
 800455e:	f002 fefb 	bl	8007358 <HAL_CRC_Init>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8004572:	f000 fb11 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8004576:	bf00      	nop
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	20000610 	.word	0x20000610
 8004580:	40023000 	.word	0x40023000

08004584 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8004588:	4b22      	ldr	r3, [pc, #136]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 800458a:	4a23      	ldr	r2, [pc, #140]	@ (8004618 <_ZL14MX_FDCAN1_Initv+0x94>)
 800458c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800458e:	4b21      	ldr	r3, [pc, #132]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004590:	2200      	movs	r2, #0
 8004592:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8004594:	4b1f      	ldr	r3, [pc, #124]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 8004596:	2200      	movs	r2, #0
 8004598:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800459a:	4b1e      	ldr	r3, [pc, #120]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 800459c:	2200      	movs	r2, #0
 800459e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80045a0:	4b1c      	ldr	r3, [pc, #112]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80045ac:	4b19      	ldr	r3, [pc, #100]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = NomPS;
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045b4:	2202      	movs	r2, #2
 80045b6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 11;
 80045b8:	4b16      	ldr	r3, [pc, #88]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045ba:	220b      	movs	r2, #11
 80045bc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 73;
 80045be:	4b15      	ldr	r3, [pc, #84]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045c0:	2249      	movs	r2, #73	@ 0x49
 80045c2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 11;
 80045c4:	4b13      	ldr	r3, [pc, #76]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045c6:	220b      	movs	r2, #11
 80045c8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = DataPS;
 80045ca:	4b12      	ldr	r3, [pc, #72]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045cc:	2205      	movs	r2, #5
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 15;
 80045d0:	4b10      	ldr	r3, [pc, #64]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045d2:	220f      	movs	r2, #15
 80045d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 18;
 80045d6:	4b0f      	ldr	r3, [pc, #60]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045d8:	2212      	movs	r2, #18
 80045da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 15;
 80045dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045de:	220f      	movs	r2, #15
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80045e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045e4:	220a      	movs	r2, #10
 80045e6:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80045e8:	4b0a      	ldr	r3, [pc, #40]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80045ee:	4b09      	ldr	r3, [pc, #36]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80045f4:	4807      	ldr	r0, [pc, #28]	@ (8004614 <_ZL14MX_FDCAN1_Initv+0x90>)
 80045f6:	f003 fa13 	bl	8007a20 <HAL_FDCAN_Init>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800460a:	f000 fac5 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800460e:	bf00      	nop
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000634 	.word	0x20000634
 8004618:	40006400 	.word	0x40006400

0800461c <_ZL12MX_FMAC_Initv>:
  * @brief FMAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMAC_Init(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE END FMAC_Init 0 */

  /* USER CODE BEGIN FMAC_Init 1 */

  /* USER CODE END FMAC_Init 1 */
  hfmac.Instance = FMAC;
 8004620:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <_ZL12MX_FMAC_Initv+0x28>)
 8004622:	4a09      	ldr	r2, [pc, #36]	@ (8004648 <_ZL12MX_FMAC_Initv+0x2c>)
 8004624:	601a      	str	r2, [r3, #0]
  if (HAL_FMAC_Init(&hfmac) != HAL_OK)
 8004626:	4807      	ldr	r0, [pc, #28]	@ (8004644 <_ZL12MX_FMAC_Initv+0x28>)
 8004628:	f003 ffb4 	bl	8008594 <HAL_FMAC_Init>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	bf14      	ite	ne
 8004632:	2301      	movne	r3, #1
 8004634:	2300      	moveq	r3, #0
 8004636:	b2db      	uxtb	r3, r3
 8004638:	2b00      	cmp	r3, #0
 800463a:	d001      	beq.n	8004640 <_ZL12MX_FMAC_Initv+0x24>
  {
    Error_Handler();
 800463c:	f000 faac 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN FMAC_Init 2 */

  /* USER CODE END FMAC_Init 2 */

}
 8004640:	bf00      	nop
 8004642:	bd80      	pop	{r7, pc}
 8004644:	20000698 	.word	0x20000698
 8004648:	40021400 	.word	0x40021400

0800464c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004650:	4b1d      	ldr	r3, [pc, #116]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <_ZL12MX_SPI1_Initv+0x80>)
 8004654:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004656:	4b1c      	ldr	r3, [pc, #112]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004658:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800465c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800465e:	4b1a      	ldr	r3, [pc, #104]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004660:	2200      	movs	r2, #0
 8004662:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004664:	4b18      	ldr	r3, [pc, #96]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004666:	f44f 6270 	mov.w	r2, #3840	@ 0xf00
 800466a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800466c:	4b16      	ldr	r3, [pc, #88]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 800466e:	2200      	movs	r2, #0
 8004670:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8004672:	4b15      	ldr	r3, [pc, #84]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004674:	2201      	movs	r2, #1
 8004676:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004678:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 800467a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800467e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8004680:	4b11      	ldr	r3, [pc, #68]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004682:	2218      	movs	r2, #24
 8004684:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004686:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004688:	2200      	movs	r2, #0
 800468a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800468c:	4b0e      	ldr	r3, [pc, #56]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 800468e:	2200      	movs	r2, #0
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004692:	4b0d      	ldr	r3, [pc, #52]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 8004694:	2200      	movs	r2, #0
 8004696:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 800469a:	2207      	movs	r2, #7
 800469c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800469e:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80046a6:	2200      	movs	r2, #0
 80046a8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80046aa:	4807      	ldr	r0, [pc, #28]	@ (80046c8 <_ZL12MX_SPI1_Initv+0x7c>)
 80046ac:	f005 f99e 	bl	80099ec <HAL_SPI_Init>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d001      	beq.n	80046c4 <_ZL12MX_SPI1_Initv+0x78>
  {
    Error_Handler();
 80046c0:	f000 fa6a 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80046c4:	bf00      	nop
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	200006d0 	.word	0x200006d0
 80046cc:	40013000 	.word	0x40013000

080046d0 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b09c      	sub	sp, #112	@ 0x70
 80046d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80046d6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80046da:	2200      	movs	r2, #0
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	609a      	str	r2, [r3, #8]
 80046e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80046e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80046f0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]
 80046fa:	609a      	str	r2, [r3, #8]
 80046fc:	60da      	str	r2, [r3, #12]
 80046fe:	611a      	str	r2, [r3, #16]
 8004700:	615a      	str	r2, [r3, #20]
 8004702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8004704:	1d3b      	adds	r3, r7, #4
 8004706:	2234      	movs	r2, #52	@ 0x34
 8004708:	2100      	movs	r1, #0
 800470a:	4618      	mov	r0, r3
 800470c:	f008 fc33 	bl	800cf76 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004710:	4b6c      	ldr	r3, [pc, #432]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004712:	4a6d      	ldr	r2, [pc, #436]	@ (80048c8 <_ZL12MX_TIM1_Initv+0x1f8>)
 8004714:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004716:	4b6b      	ldr	r3, [pc, #428]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004718:	2200      	movs	r2, #0
 800471a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800471c:	4b69      	ldr	r3, [pc, #420]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800471e:	2220      	movs	r2, #32
 8004720:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600;
 8004722:	4b68      	ldr	r3, [pc, #416]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004724:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 8004728:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800472a:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800472c:	2200      	movs	r2, #0
 800472e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8004730:	4b64      	ldr	r3, [pc, #400]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004732:	2201      	movs	r2, #1
 8004734:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004736:	4b63      	ldr	r3, [pc, #396]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004738:	2280      	movs	r2, #128	@ 0x80
 800473a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800473c:	4861      	ldr	r0, [pc, #388]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800473e:	f005 fd87 	bl	800a250 <HAL_TIM_Base_Init>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	bf14      	ite	ne
 8004748:	2301      	movne	r3, #1
 800474a:	2300      	moveq	r3, #0
 800474c:	b2db      	uxtb	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 8004752:	f000 fa21 	bl	8004b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004756:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800475a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800475c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004760:	4619      	mov	r1, r3
 8004762:	4858      	ldr	r0, [pc, #352]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004764:	f006 fa6e 	bl	800ac44 <HAL_TIM_ConfigClockSource>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	bf14      	ite	ne
 800476e:	2301      	movne	r3, #1
 8004770:	2300      	moveq	r3, #0
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8004778:	f000 fa0e 	bl	8004b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800477c:	4851      	ldr	r0, [pc, #324]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800477e:	f005 fe90 	bl	800a4a2 <HAL_TIM_PWM_Init>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8004792:	f000 fa01 	bl	8004b98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8004796:	484b      	ldr	r0, [pc, #300]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004798:	f005 fe22 	bl	800a3e0 <HAL_TIM_OC_Init>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d001      	beq.n	80047b0 <_ZL12MX_TIM1_Initv+0xe0>
  {
    Error_Handler();
 80047ac:	f000 f9f4 	bl	8004b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b0:	2300      	movs	r3, #0
 80047b2:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_OC5REF;
 80047b4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80047b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047be:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80047c2:	4619      	mov	r1, r3
 80047c4:	483f      	ldr	r0, [pc, #252]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 80047c6:	f006 ffff 	bl	800b7c8 <HAL_TIMEx_MasterConfigSynchronization>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	bf14      	ite	ne
 80047d0:	2301      	movne	r3, #1
 80047d2:	2300      	moveq	r3, #0
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d001      	beq.n	80047de <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 80047da:	f000 f9dd 	bl	8004b98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047de:	2360      	movs	r3, #96	@ 0x60
 80047e0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80047e2:	2300      	movs	r3, #0
 80047e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80047e6:	2302      	movs	r3, #2
 80047e8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047ea:	2300      	movs	r3, #0
 80047ec:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80047ee:	2304      	movs	r3, #4
 80047f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047f2:	2300      	movs	r3, #0
 80047f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047f6:	2300      	movs	r3, #0
 80047f8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80047fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80047fe:	2200      	movs	r2, #0
 8004800:	4619      	mov	r1, r3
 8004802:	4830      	ldr	r0, [pc, #192]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004804:	f006 f90a 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf14      	ite	ne
 800480e:	2301      	movne	r3, #1
 8004810:	2300      	moveq	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <_ZL12MX_TIM1_Initv+0x14c>
  {
    Error_Handler();
 8004818:	f000 f9be 	bl	8004b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800481c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004820:	2204      	movs	r2, #4
 8004822:	4619      	mov	r1, r3
 8004824:	4827      	ldr	r0, [pc, #156]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004826:	f006 f8f9 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	bf14      	ite	ne
 8004830:	2301      	movne	r3, #1
 8004832:	2300      	moveq	r3, #0
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800483a:	f000 f9ad 	bl	8004b98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800483e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004842:	2208      	movs	r2, #8
 8004844:	4619      	mov	r1, r3
 8004846:	481f      	ldr	r0, [pc, #124]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 8004848:	f006 f8e8 	bl	800aa1c <HAL_TIM_PWM_ConfigChannel>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	bf14      	ite	ne
 8004852:	2301      	movne	r3, #1
 8004854:	2300      	moveq	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b00      	cmp	r3, #0
 800485a:	d001      	beq.n	8004860 <_ZL12MX_TIM1_Initv+0x190>
  {
    Error_Handler();
 800485c:	f000 f99c 	bl	8004b98 <Error_Handler>
  }

  // =================================================================================

  // =================================================================================
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004860:	2300      	movs	r3, #0
 8004862:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004868:	2300      	movs	r3, #0
 800486a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800486c:	2300      	movs	r3, #0
 800486e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004870:	2300      	movs	r3, #0
 8004872:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004878:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800487e:	2300      	movs	r3, #0
 8004880:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8004882:	2300      	movs	r3, #0
 8004884:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8004886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800488a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8004890:	2300      	movs	r3, #0
 8004892:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004894:	2300      	movs	r3, #0
 8004896:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004898:	1d3b      	adds	r3, r7, #4
 800489a:	4619      	mov	r1, r3
 800489c:	4809      	ldr	r0, [pc, #36]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 800489e:	f007 f821 	bl	800b8e4 <HAL_TIMEx_ConfigBreakDeadTime>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	bf14      	ite	ne
 80048a8:	2301      	movne	r3, #1
 80048aa:	2300      	moveq	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <_ZL12MX_TIM1_Initv+0x1e6>
  {
    Error_Handler();
 80048b2:	f000 f971 	bl	8004b98 <Error_Handler>
  }
  // =================================================================================
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80048b6:	4803      	ldr	r0, [pc, #12]	@ (80048c4 <_ZL12MX_TIM1_Initv+0x1f4>)
 80048b8:	f000 fc20 	bl	80050fc <HAL_TIM_MspPostInit>

}
 80048bc:	bf00      	nop
 80048be:	3770      	adds	r7, #112	@ 0x70
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	20000734 	.word	0x20000734
 80048c8:	40012c00 	.word	0x40012c00

080048cc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048d2:	f107 0310 	add.w	r3, r7, #16
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	605a      	str	r2, [r3, #4]
 80048dc:	609a      	str	r2, [r3, #8]
 80048de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048e0:	1d3b      	adds	r3, r7, #4
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	605a      	str	r2, [r3, #4]
 80048e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80048ea:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 80048ec:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80048f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1700-1;
 80048f2:	4b23      	ldr	r3, [pc, #140]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 80048f4:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 80048f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048fa:	4b21      	ldr	r3, [pc, #132]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004900:	4b1f      	ldr	r3, [pc, #124]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 8004902:	2263      	movs	r2, #99	@ 0x63
 8004904:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004906:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 8004908:	2200      	movs	r2, #0
 800490a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800490c:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004912:	481b      	ldr	r0, [pc, #108]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 8004914:	f005 fc9c 	bl	800a250 <HAL_TIM_Base_Init>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	bf14      	ite	ne
 800491e:	2301      	movne	r3, #1
 8004920:	2300      	moveq	r3, #0
 8004922:	b2db      	uxtb	r3, r3
 8004924:	2b00      	cmp	r3, #0
 8004926:	d001      	beq.n	800492c <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8004928:	f000 f936 	bl	8004b98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800492c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	4619      	mov	r1, r3
 8004938:	4811      	ldr	r0, [pc, #68]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 800493a:	f006 f983 	bl	800ac44 <HAL_TIM_ConfigClockSource>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800494e:	f000 f923 	bl	8004b98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004952:	2300      	movs	r3, #0
 8004954:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800495a:	1d3b      	adds	r3, r7, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4808      	ldr	r0, [pc, #32]	@ (8004980 <_ZL12MX_TIM2_Initv+0xb4>)
 8004960:	f006 ff32 	bl	800b7c8 <HAL_TIMEx_MasterConfigSynchronization>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	bf14      	ite	ne
 800496a:	2301      	movne	r3, #1
 800496c:	2300      	moveq	r3, #0
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8004974:	f000 f910 	bl	8004b98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004978:	bf00      	nop
 800497a:	3720      	adds	r7, #32
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	20000780 	.word	0x20000780

08004984 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b082      	sub	sp, #8
 8004988:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800498a:	4b2e      	ldr	r3, [pc, #184]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 800498c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800498e:	4a2d      	ldr	r2, [pc, #180]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 8004990:	f043 0304 	orr.w	r3, r3, #4
 8004994:	6493      	str	r3, [r2, #72]	@ 0x48
 8004996:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 8004998:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80049a2:	4b28      	ldr	r3, [pc, #160]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 80049a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049a6:	4a27      	ldr	r2, [pc, #156]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6493      	str	r3, [r2, #72]	@ 0x48
 80049ae:	4b25      	ldr	r3, [pc, #148]	@ (8004a44 <_ZL11MX_DMA_Initv+0xc0>)
 80049b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	603b      	str	r3, [r7, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]


  hdma_adc1.Instance = DMA1_Channel1;
 80049ba:	4b23      	ldr	r3, [pc, #140]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049bc:	4a23      	ldr	r2, [pc, #140]	@ (8004a4c <_ZL11MX_DMA_Initv+0xc8>)
 80049be:	601a      	str	r2, [r3, #0]
  hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80049c0:	4b21      	ldr	r3, [pc, #132]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049c2:	2205      	movs	r2, #5
 80049c4:	605a      	str	r2, [r3, #4]
  hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049c6:	4b20      	ldr	r3, [pc, #128]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	609a      	str	r2, [r3, #8]
  hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80049cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	60da      	str	r2, [r3, #12]
  hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80049d2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049d4:	2280      	movs	r2, #128	@ 0x80
 80049d6:	611a      	str	r2, [r3, #16]
  hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80049d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049de:	615a      	str	r2, [r3, #20]
  hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80049e0:	4b19      	ldr	r3, [pc, #100]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80049e6:	619a      	str	r2, [r3, #24]
  hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80049e8:	4b17      	ldr	r3, [pc, #92]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049ea:	2220      	movs	r2, #32
 80049ec:	61da      	str	r2, [r3, #28]
  hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80049ee:	4b16      	ldr	r3, [pc, #88]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80049f4:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80049f6:	4814      	ldr	r0, [pc, #80]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 80049f8:	f002 fda0 	bl	800753c <HAL_DMA_Init>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <_ZL11MX_DMA_Initv+0x8c>
  {
      Error_Handler();
 8004a0c:	f000 f8c4 	bl	8004b98 <Error_Handler>
  }
  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 8004a10:	4b0f      	ldr	r3, [pc, #60]	@ (8004a50 <_ZL11MX_DMA_Initv+0xcc>)
 8004a12:	4a0d      	ldr	r2, [pc, #52]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 8004a14:	655a      	str	r2, [r3, #84]	@ 0x54
 8004a16:	4b0c      	ldr	r3, [pc, #48]	@ (8004a48 <_ZL11MX_DMA_Initv+0xc4>)
 8004a18:	4a0d      	ldr	r2, [pc, #52]	@ (8004a50 <_ZL11MX_DMA_Initv+0xcc>)
 8004a1a:	629a      	str	r2, [r3, #40]	@ 0x28



  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration --> ADC_1 */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2100      	movs	r1, #0
 8004a20:	200b      	movs	r0, #11
 8004a22:	f002 fc64 	bl	80072ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004a26:	200b      	movs	r0, #11
 8004a28:	f002 fc7b 	bl	8007322 <HAL_NVIC_EnableIRQ>




  /* DMA1_Channel2_IRQn interrupt configuration --> ADC_2*/
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	2100      	movs	r1, #0
 8004a30:	200c      	movs	r0, #12
 8004a32:	f002 fc5c 	bl	80072ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004a36:	200c      	movs	r0, #12
 8004a38:	f002 fc73 	bl	8007322 <HAL_NVIC_EnableIRQ>

}
 8004a3c:	bf00      	nop
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40021000 	.word	0x40021000
 8004a48:	20000528 	.word	0x20000528
 8004a4c:	40020008 	.word	0x40020008
 8004a50:	20000450 	.word	0x20000450

08004a54 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a5a:	f107 030c 	add.w	r3, r7, #12
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	605a      	str	r2, [r3, #4]
 8004a64:	609a      	str	r2, [r3, #8]
 8004a66:	60da      	str	r2, [r3, #12]
 8004a68:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004a6a:	4b28      	ldr	r3, [pc, #160]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a6e:	4a27      	ldr	r2, [pc, #156]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a70:	f043 0320 	orr.w	r3, r3, #32
 8004a74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a76:	4b25      	ldr	r3, [pc, #148]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	60bb      	str	r3, [r7, #8]
 8004a80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a82:	4b22      	ldr	r3, [pc, #136]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a86:	4a21      	ldr	r2, [pc, #132]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a88:	f043 0301 	orr.w	r3, r3, #1
 8004a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a92:	f003 0301 	and.w	r3, r3, #1
 8004a96:	607b      	str	r3, [r7, #4]
 8004a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a9a:	4b1c      	ldr	r3, [pc, #112]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004aa0:	f043 0302 	orr.w	r3, r3, #2
 8004aa4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004aa6:	4b19      	ldr	r3, [pc, #100]	@ (8004b0c <_ZL12MX_GPIO_Initv+0xb8>)
 8004aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	603b      	str	r3, [r7, #0]
 8004ab0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_NSS_GPIO_Port, SPI1_NSS_Pin, GPIO_PIN_RESET);
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	2110      	movs	r1, #16
 8004ab6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004aba:	f003 ff99 	bl	80089f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, GPIO_PIN_RESET);
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4813      	ldr	r0, [pc, #76]	@ (8004b10 <_ZL12MX_GPIO_Initv+0xbc>)
 8004ac4:	f003 ff94 	bl	80089f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_NSS_Pin */
  GPIO_InitStruct.Pin = SPI1_NSS_Pin;
 8004ac8:	2310      	movs	r3, #16
 8004aca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004acc:	2301      	movs	r3, #1
 8004ace:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_NSS_GPIO_Port, &GPIO_InitStruct);
 8004ad8:	f107 030c 	add.w	r3, r7, #12
 8004adc:	4619      	mov	r1, r3
 8004ade:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004ae2:	f003 fe03 	bl	80086ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aea:	2301      	movs	r3, #1
 8004aec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af2:	2300      	movs	r3, #0
 8004af4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8004af6:	f107 030c 	add.w	r3, r7, #12
 8004afa:	4619      	mov	r1, r3
 8004afc:	4804      	ldr	r0, [pc, #16]	@ (8004b10 <_ZL12MX_GPIO_Initv+0xbc>)
 8004afe:	f003 fdf5 	bl	80086ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004b02:	bf00      	nop
 8004b04:	3720      	adds	r7, #32
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	48000400 	.word	0x48000400

08004b14 <_ZL8DWT_Initv>:

/* USER CODE BEGIN 4 */
//Delay function
__STATIC_INLINE void DWT_Init(void) {
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8004b18:	4b08      	ldr	r3, [pc, #32]	@ (8004b3c <_ZL8DWT_Initv+0x28>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a07      	ldr	r2, [pc, #28]	@ (8004b3c <_ZL8DWT_Initv+0x28>)
 8004b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004b22:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;  // Data watchpoint trigger(DWT)
 8004b24:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <_ZL8DWT_Initv+0x2c>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a05      	ldr	r2, [pc, #20]	@ (8004b40 <_ZL8DWT_Initv+0x2c>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	6013      	str	r3, [r2, #0]
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	e000edf0 	.word	0xe000edf0
 8004b40:	e0001000 	.word	0xe0001000

08004b44 <_ZL6microsv>:
__STATIC_INLINE uint32_t micros(void) {
 8004b44:	b480      	push	{r7}
 8004b46:	af00      	add	r7, sp, #0
	return DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8004b48:	4b07      	ldr	r3, [pc, #28]	@ (8004b68 <_ZL6microsv+0x24>)
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <_ZL6microsv+0x28>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4907      	ldr	r1, [pc, #28]	@ (8004b70 <_ZL6microsv+0x2c>)
 8004b52:	fba1 1303 	umull	r1, r3, r1, r3
 8004b56:	0c9b      	lsrs	r3, r3, #18
 8004b58:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	e0001000 	.word	0xe0001000
 8004b6c:	200000bc 	.word	0x200000bc
 8004b70:	431bde83 	.word	0x431bde83

08004b74 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2) // 1000 Hz timer interrupt event
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b84:	d102      	bne.n	8004b8c <HAL_TIM_PeriodElapsedCallback+0x18>
  {
	  simpleFOC.Encoder.updateVelocity();
 8004b86:	4803      	ldr	r0, [pc, #12]	@ (8004b94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004b88:	f7fc fad8 	bl	800113c <_ZN17AS5048A_interface14updateVelocityEv>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	20000220 	.word	0x20000220

08004b98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004b9c:	b672      	cpsid	i
}
 8004b9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <Error_Handler+0x8>

08004ba4 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d107      	bne.n	8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d102      	bne.n	8004bc4 <_Z41__static_initialization_and_destruction_0ii+0x20>
simpleFOC simpleFOC;
 8004bbe:	4809      	ldr	r0, [pc, #36]	@ (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004bc0:	f7fe fdc0 	bl	8003744 <_ZN9simpleFOCC1Ev>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d102      	bne.n	8004bda <_Z41__static_initialization_and_destruction_0ii+0x36>
 8004bd4:	4803      	ldr	r0, [pc, #12]	@ (8004be4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004bd6:	f7fe fddd 	bl	8003794 <_ZN9simpleFOCD1Ev>
}
 8004bda:	bf00      	nop
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	20000218 	.word	0x20000218

08004be8 <_GLOBAL__sub_I_simpleFOC>:
 8004be8:	b580      	push	{r7, lr}
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	f7ff ffd7 	bl	8004ba4 <_Z41__static_initialization_and_destruction_0ii>
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <_GLOBAL__sub_D_simpleFOC>:
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8004c00:	2000      	movs	r0, #0
 8004c02:	f7ff ffcf 	bl	8004ba4 <_Z41__static_initialization_and_destruction_0ii>
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c12:	4a0e      	ldr	r2, [pc, #56]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c14:	f043 0301 	orr.w	r3, r3, #1
 8004c18:	6613      	str	r3, [r2, #96]	@ 0x60
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c2a:	4a08      	ldr	r2, [pc, #32]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c32:	4b06      	ldr	r3, [pc, #24]	@ (8004c4c <HAL_MspInit+0x44>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004c3e:	f003 ff93 	bl	8008b68 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c42:	bf00      	nop
 8004c44:	3708      	adds	r7, #8
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	40021000 	.word	0x40021000

08004c50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0a0      	sub	sp, #128	@ 0x80
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c58:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	601a      	str	r2, [r3, #0]
 8004c60:	605a      	str	r2, [r3, #4]
 8004c62:	609a      	str	r2, [r3, #8]
 8004c64:	60da      	str	r2, [r3, #12]
 8004c66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c68:	f107 031c 	add.w	r3, r7, #28
 8004c6c:	2250      	movs	r2, #80	@ 0x50
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4618      	mov	r0, r3
 8004c72:	f008 f980 	bl	800cf76 <memset>
  if(hadc->Instance==ADC1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c7e:	d171      	bne.n	8004d64 <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004c80:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004c86:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004c8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	4618      	mov	r0, r3
 8004c92:	f004 fc6f 	bl	8009574 <HAL_RCCEx_PeriphCLKConfig>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d001      	beq.n	8004ca0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8004c9c:	f7ff ff7c 	bl	8004b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ca0:	4b6d      	ldr	r3, [pc, #436]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	4a6c      	ldr	r2, [pc, #432]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004ca8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004caa:	4b6b      	ldr	r3, [pc, #428]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d10b      	bne.n	8004cca <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cb6:	4a69      	ldr	r2, [pc, #420]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004cb8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004cbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cbe:	4b67      	ldr	r3, [pc, #412]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004cc6:	61bb      	str	r3, [r7, #24]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	4b64      	ldr	r3, [pc, #400]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cce:	4a63      	ldr	r2, [pc, #396]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd6:	4b61      	ldr	r3, [pc, #388]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CSOA_Pin;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOA_GPIO_Port, &GPIO_InitStruct);
 8004cee:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004cf8:	f003 fcf8 	bl	80086ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004cfc:	4b58      	ldr	r3, [pc, #352]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004cfe:	4a59      	ldr	r2, [pc, #356]	@ (8004e64 <HAL_ADC_MspInit+0x214>)
 8004d00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8004d02:	4b57      	ldr	r3, [pc, #348]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d04:	2205      	movs	r2, #5
 8004d06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d08:	4b55      	ldr	r3, [pc, #340]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d0e:	4b54      	ldr	r3, [pc, #336]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d14:	4b52      	ldr	r3, [pc, #328]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d16:	2280      	movs	r2, #128	@ 0x80
 8004d18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d1a:	4b51      	ldr	r3, [pc, #324]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d22:	4b4f      	ldr	r3, [pc, #316]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d2a:	4b4d      	ldr	r3, [pc, #308]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d30:	4b4b      	ldr	r3, [pc, #300]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d36:	484a      	ldr	r0, [pc, #296]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d38:	f002 fc00 	bl	800753c <HAL_DMA_Init>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8004d42:	f7ff ff29 	bl	8004b98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a45      	ldr	r2, [pc, #276]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d4a:	655a      	str	r2, [r3, #84]	@ 0x54
 8004d4c:	4a44      	ldr	r2, [pc, #272]	@ (8004e60 <HAL_ADC_MspInit+0x210>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004d52:	2200      	movs	r2, #0
 8004d54:	2100      	movs	r1, #0
 8004d56:	2012      	movs	r0, #18
 8004d58:	f002 fac9 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004d5c:	2012      	movs	r0, #18
 8004d5e:	f002 fae0 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004d62:	e075      	b.n	8004e50 <HAL_ADC_MspInit+0x200>
  else if(hadc->Instance==ADC2)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a3f      	ldr	r2, [pc, #252]	@ (8004e68 <HAL_ADC_MspInit+0x218>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d170      	bne.n	8004e50 <HAL_ADC_MspInit+0x200>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004d6e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d72:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004d74:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8004d78:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d7a:	f107 031c 	add.w	r3, r7, #28
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f004 fbf8 	bl	8009574 <HAL_RCCEx_PeriphCLKConfig>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004d8a:	f7ff ff05 	bl	8004b98 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004d8e:	4b32      	ldr	r3, [pc, #200]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3301      	adds	r3, #1
 8004d94:	4a30      	ldr	r2, [pc, #192]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004d96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004d98:	4b2f      	ldr	r3, [pc, #188]	@ (8004e58 <HAL_ADC_MspInit+0x208>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d10b      	bne.n	8004db8 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004da0:	4b2e      	ldr	r3, [pc, #184]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004da4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004da6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004daa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004dae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004db0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db8:	4b28      	ldr	r3, [pc, #160]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004dba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dbc:	4a27      	ldr	r2, [pc, #156]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004dbe:	f043 0301 	orr.w	r3, r3, #1
 8004dc2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dc4:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <HAL_ADC_MspInit+0x20c>)
 8004dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dc8:	f003 0301 	and.w	r3, r3, #1
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CSOB_Pin;
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(CSOB_GPIO_Port, &GPIO_InitStruct);
 8004ddc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8004de0:	4619      	mov	r1, r3
 8004de2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004de6:	f003 fc81 	bl	80086ec <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8004dea:	4b20      	ldr	r3, [pc, #128]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004dec:	4a20      	ldr	r2, [pc, #128]	@ (8004e70 <HAL_ADC_MspInit+0x220>)
 8004dee:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8004df0:	4b1e      	ldr	r3, [pc, #120]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004df2:	2224      	movs	r2, #36	@ 0x24
 8004df4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004df6:	4b1d      	ldr	r3, [pc, #116]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004e02:	4b1a      	ldr	r3, [pc, #104]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e04:	2280      	movs	r2, #128	@ 0x80
 8004e06:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004e08:	4b18      	ldr	r3, [pc, #96]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e0e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004e10:	4b16      	ldr	r3, [pc, #88]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004e16:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004e18:	4b14      	ldr	r3, [pc, #80]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004e1e:	4b13      	ldr	r3, [pc, #76]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004e24:	4811      	ldr	r0, [pc, #68]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e26:	f002 fb89 	bl	800753c <HAL_DMA_Init>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <HAL_ADC_MspInit+0x1e4>
      Error_Handler();
 8004e30:	f7ff feb2 	bl	8004b98 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a0d      	ldr	r2, [pc, #52]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54
 8004e3a:	4a0c      	ldr	r2, [pc, #48]	@ (8004e6c <HAL_ADC_MspInit+0x21c>)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8004e40:	2200      	movs	r2, #0
 8004e42:	2100      	movs	r1, #0
 8004e44:	2012      	movs	r0, #18
 8004e46:	f002 fa52 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004e4a:	2012      	movs	r0, #18
 8004e4c:	f002 fa69 	bl	8007322 <HAL_NVIC_EnableIRQ>
}
 8004e50:	bf00      	nop
 8004e52:	3780      	adds	r7, #128	@ 0x80
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200007e4 	.word	0x200007e4
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	20000528 	.word	0x20000528
 8004e64:	40020008 	.word	0x40020008
 8004e68:	50000100 	.word	0x50000100
 8004e6c:	20000588 	.word	0x20000588
 8004e70:	4002001c 	.word	0x4002001c

08004e74 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <HAL_CORDIC_MspInit+0x38>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10b      	bne.n	8004e9e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_CORDIC_MspInit+0x3c>)
 8004e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8a:	4a09      	ldr	r2, [pc, #36]	@ (8004eb0 <HAL_CORDIC_MspInit+0x3c>)
 8004e8c:	f043 0308 	orr.w	r3, r3, #8
 8004e90:	6493      	str	r3, [r2, #72]	@ 0x48
 8004e92:	4b07      	ldr	r3, [pc, #28]	@ (8004eb0 <HAL_CORDIC_MspInit+0x3c>)
 8004e94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8004e9e:	bf00      	nop
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40020c00 	.word	0x40020c00
 8004eb0:	40021000 	.word	0x40021000

08004eb4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <HAL_CRC_MspInit+0x38>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d10b      	bne.n	8004ede <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ef0 <HAL_CRC_MspInit+0x3c>)
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eca:	4a09      	ldr	r2, [pc, #36]	@ (8004ef0 <HAL_CRC_MspInit+0x3c>)
 8004ecc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ed0:	6493      	str	r3, [r2, #72]	@ 0x48
 8004ed2:	4b07      	ldr	r3, [pc, #28]	@ (8004ef0 <HAL_CRC_MspInit+0x3c>)
 8004ed4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004eda:	60fb      	str	r3, [r7, #12]
 8004edc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8004ede:	bf00      	nop
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40023000 	.word	0x40023000
 8004ef0:	40021000 	.word	0x40021000

08004ef4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b09e      	sub	sp, #120	@ 0x78
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f00:	2200      	movs	r2, #0
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	605a      	str	r2, [r3, #4]
 8004f06:	609a      	str	r2, [r3, #8]
 8004f08:	60da      	str	r2, [r3, #12]
 8004f0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f0c:	f107 0314 	add.w	r3, r7, #20
 8004f10:	2250      	movs	r2, #80	@ 0x50
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f008 f82e 	bl	800cf76 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a24      	ldr	r2, [pc, #144]	@ (8004fb0 <HAL_FDCAN_MspInit+0xbc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d141      	bne.n	8004fa8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004f24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004f28:	617b      	str	r3, [r7, #20]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004f2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f30:	f107 0314 	add.w	r3, r7, #20
 8004f34:	4618      	mov	r0, r3
 8004f36:	f004 fb1d 	bl	8009574 <HAL_RCCEx_PeriphCLKConfig>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8004f40:	f7ff fe2a 	bl	8004b98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004f44:	4b1b      	ldr	r3, [pc, #108]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f48:	4a1a      	ldr	r2, [pc, #104]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004f4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f50:	4b18      	ldr	r3, [pc, #96]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f5c:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f60:	4a14      	ldr	r2, [pc, #80]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <HAL_FDCAN_MspInit+0xc0>)
 8004f6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8004f74:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8004f78:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f82:	2300      	movs	r3, #0
 8004f84:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004f86:	2309      	movs	r3, #9
 8004f88:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f8a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004f8e:	4619      	mov	r1, r3
 8004f90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004f94:	f003 fbaa 	bl	80086ec <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004f98:	2200      	movs	r2, #0
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	2015      	movs	r0, #21
 8004f9e:	f002 f9a6 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004fa2:	2015      	movs	r0, #21
 8004fa4:	f002 f9bd 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004fa8:	bf00      	nop
 8004faa:	3778      	adds	r7, #120	@ 0x78
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40006400 	.word	0x40006400
 8004fb4:	40021000 	.word	0x40021000

08004fb8 <HAL_FMAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmac: FMAC handle pointer
* @retval None
*/
void HAL_FMAC_MspInit(FMAC_HandleTypeDef* hfmac)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  if(hfmac->Instance==FMAC)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8004ff0 <HAL_FMAC_MspInit+0x38>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d10b      	bne.n	8004fe2 <HAL_FMAC_MspInit+0x2a>
  {
  /* USER CODE BEGIN FMAC_MspInit 0 */

  /* USER CODE END FMAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FMAC_CLK_ENABLE();
 8004fca:	4b0a      	ldr	r3, [pc, #40]	@ (8004ff4 <HAL_FMAC_MspInit+0x3c>)
 8004fcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fce:	4a09      	ldr	r2, [pc, #36]	@ (8004ff4 <HAL_FMAC_MspInit+0x3c>)
 8004fd0:	f043 0310 	orr.w	r3, r3, #16
 8004fd4:	6493      	str	r3, [r2, #72]	@ 0x48
 8004fd6:	4b07      	ldr	r3, [pc, #28]	@ (8004ff4 <HAL_FMAC_MspInit+0x3c>)
 8004fd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fda:	f003 0310 	and.w	r3, r3, #16
 8004fde:	60fb      	str	r3, [r7, #12]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMAC_MspInit 1 */

  /* USER CODE END FMAC_MspInit 1 */
  }

}
 8004fe2:	bf00      	nop
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	40021400 	.word	0x40021400
 8004ff4:	40021000 	.word	0x40021000

08004ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08a      	sub	sp, #40	@ 0x28
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005000:	f107 0314 	add.w	r3, r7, #20
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	605a      	str	r2, [r3, #4]
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a17      	ldr	r2, [pc, #92]	@ (8005074 <HAL_SPI_MspInit+0x7c>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d128      	bne.n	800506c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800501a:	4b17      	ldr	r3, [pc, #92]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 800501c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800501e:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 8005020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005024:	6613      	str	r3, [r2, #96]	@ 0x60
 8005026:	4b14      	ldr	r3, [pc, #80]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 8005028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800502e:	613b      	str	r3, [r7, #16]
 8005030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005032:	4b11      	ldr	r3, [pc, #68]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005036:	4a10      	ldr	r2, [pc, #64]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 8005038:	f043 0301 	orr.w	r3, r3, #1
 800503c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800503e:	4b0e      	ldr	r3, [pc, #56]	@ (8005078 <HAL_SPI_MspInit+0x80>)
 8005040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	60fb      	str	r3, [r7, #12]
 8005048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800504a:	23e0      	movs	r3, #224	@ 0xe0
 800504c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800504e:	2302      	movs	r3, #2
 8005050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	2300      	movs	r3, #0
 8005054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005056:	2302      	movs	r3, #2
 8005058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800505a:	2305      	movs	r3, #5
 800505c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800505e:	f107 0314 	add.w	r3, r7, #20
 8005062:	4619      	mov	r1, r3
 8005064:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005068:	f003 fb40 	bl	80086ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800506c:	bf00      	nop
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	40013000 	.word	0x40013000
 8005078:	40021000 	.word	0x40021000

0800507c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1a      	ldr	r2, [pc, #104]	@ (80050f4 <HAL_TIM_Base_MspInit+0x78>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d114      	bne.n	80050b8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800508e:	4b1a      	ldr	r3, [pc, #104]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 8005090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005092:	4a19      	ldr	r2, [pc, #100]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 8005094:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005098:	6613      	str	r3, [r2, #96]	@ 0x60
 800509a:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050a2:	60fb      	str	r3, [r7, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80050a6:	2200      	movs	r2, #0
 80050a8:	2100      	movs	r1, #0
 80050aa:	201b      	movs	r0, #27
 80050ac:	f002 f91f 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80050b0:	201b      	movs	r0, #27
 80050b2:	f002 f936 	bl	8007322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80050b6:	e018      	b.n	80050ea <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM2)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050c0:	d113      	bne.n	80050ea <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050c2:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 80050c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050c6:	4a0c      	ldr	r2, [pc, #48]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 80050c8:	f043 0301 	orr.w	r3, r3, #1
 80050cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_TIM_Base_MspInit+0x7c>)
 80050d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80050da:	2200      	movs	r2, #0
 80050dc:	2100      	movs	r1, #0
 80050de:	201c      	movs	r0, #28
 80050e0:	f002 f905 	bl	80072ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80050e4:	201c      	movs	r0, #28
 80050e6:	f002 f91c 	bl	8007322 <HAL_NVIC_EnableIRQ>
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40021000 	.word	0x40021000

080050fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b088      	sub	sp, #32
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005104:	f107 030c 	add.w	r3, r7, #12
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	609a      	str	r2, [r3, #8]
 8005110:	60da      	str	r2, [r3, #12]
 8005112:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a12      	ldr	r2, [pc, #72]	@ (8005164 <HAL_TIM_MspPostInit+0x68>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d11d      	bne.n	800515a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	4b12      	ldr	r3, [pc, #72]	@ (8005168 <HAL_TIM_MspPostInit+0x6c>)
 8005120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005122:	4a11      	ldr	r2, [pc, #68]	@ (8005168 <HAL_TIM_MspPostInit+0x6c>)
 8005124:	f043 0301 	orr.w	r3, r3, #1
 8005128:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800512a:	4b0f      	ldr	r3, [pc, #60]	@ (8005168 <HAL_TIM_MspPostInit+0x6c>)
 800512c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = PWMC_Pin|PWMB_Pin|PWMA_Pin;
 8005136:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800513a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800513c:	2302      	movs	r3, #2
 800513e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005144:	2303      	movs	r3, #3
 8005146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005148:	2306      	movs	r3, #6
 800514a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514c:	f107 030c 	add.w	r3, r7, #12
 8005150:	4619      	mov	r1, r3
 8005152:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8005156:	f003 fac9 	bl	80086ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800515a:	bf00      	nop
 800515c:	3720      	adds	r7, #32
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	40012c00 	.word	0x40012c00
 8005168:	40021000 	.word	0x40021000

0800516c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005170:	bf00      	nop
 8005172:	e7fd      	b.n	8005170 <NMI_Handler+0x4>

08005174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005178:	bf00      	nop
 800517a:	e7fd      	b.n	8005178 <HardFault_Handler+0x4>

0800517c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005180:	bf00      	nop
 8005182:	e7fd      	b.n	8005180 <MemManage_Handler+0x4>

08005184 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005188:	bf00      	nop
 800518a:	e7fd      	b.n	8005188 <BusFault_Handler+0x4>

0800518c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005190:	bf00      	nop
 8005192:	e7fd      	b.n	8005190 <UsageFault_Handler+0x4>

08005194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80051a2:	b480      	push	{r7}
 80051a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80051a6:	bf00      	nop
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80051b0:	b480      	push	{r7}
 80051b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80051b4:	bf00      	nop
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr

080051be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051be:	b580      	push	{r7, lr}
 80051c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051c2:	f000 f997 	bl	80054f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80051d0:	4802      	ldr	r0, [pc, #8]	@ (80051dc <DMA1_Channel1_IRQHandler+0x10>)
 80051d2:	f002 fad6 	bl	8007782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80051d6:	bf00      	nop
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	20000528 	.word	0x20000528

080051e0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80051e4:	4802      	ldr	r0, [pc, #8]	@ (80051f0 <DMA1_Channel2_IRQHandler+0x10>)
 80051e6:	f002 facc 	bl	8007782 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80051ea:	bf00      	nop
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20000588 	.word	0x20000588

080051f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80051f8:	4803      	ldr	r0, [pc, #12]	@ (8005208 <ADC1_2_IRQHandler+0x14>)
 80051fa:	f000 fe73 	bl	8005ee4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80051fe:	4803      	ldr	r0, [pc, #12]	@ (800520c <ADC1_2_IRQHandler+0x18>)
 8005200:	f000 fe70 	bl	8005ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8005204:	bf00      	nop
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000450 	.word	0x20000450
 800520c:	200004bc 	.word	0x200004bc

08005210 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005214:	4802      	ldr	r0, [pc, #8]	@ (8005220 <FDCAN1_IT0_IRQHandler+0x10>)
 8005216:	f002 ffcd 	bl	80081b4 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000634 	.word	0x20000634

08005224 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005228:	4802      	ldr	r0, [pc, #8]	@ (8005234 <TIM1_CC_IRQHandler+0x10>)
 800522a:	f005 faa7 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000734 	.word	0x20000734

08005238 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800523c:	4802      	ldr	r0, [pc, #8]	@ (8005248 <TIM2_IRQHandler+0x10>)
 800523e:	f005 fa9d 	bl	800a77c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000780 	.word	0x20000780

0800524c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800524c:	b480      	push	{r7}
 800524e:	af00      	add	r7, sp, #0
  return 1;
 8005250:	2301      	movs	r3, #1
}
 8005252:	4618      	mov	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <_kill>:

int _kill(int pid, int sig)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005266:	f007 ff29 	bl	800d0bc <__errno>
 800526a:	4603      	mov	r3, r0
 800526c:	2216      	movs	r2, #22
 800526e:	601a      	str	r2, [r3, #0]
  return -1;
 8005270:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005274:	4618      	mov	r0, r3
 8005276:	3708      	adds	r7, #8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <_exit>:

void _exit (int status)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005284:	f04f 31ff 	mov.w	r1, #4294967295
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7ff ffe7 	bl	800525c <_kill>
  while (1) {}    /* Make sure we hang here */
 800528e:	bf00      	nop
 8005290:	e7fd      	b.n	800528e <_exit+0x12>

08005292 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005292:	b580      	push	{r7, lr}
 8005294:	b086      	sub	sp, #24
 8005296:	af00      	add	r7, sp, #0
 8005298:	60f8      	str	r0, [r7, #12]
 800529a:	60b9      	str	r1, [r7, #8]
 800529c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
 80052a2:	e00a      	b.n	80052ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80052a4:	f3af 8000 	nop.w
 80052a8:	4601      	mov	r1, r0
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	60ba      	str	r2, [r7, #8]
 80052b0:	b2ca      	uxtb	r2, r1
 80052b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	3301      	adds	r3, #1
 80052b8:	617b      	str	r3, [r7, #20]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	429a      	cmp	r2, r3
 80052c0:	dbf0      	blt.n	80052a4 <_read+0x12>
  }

  return len;
 80052c2:	687b      	ldr	r3, [r7, #4]
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3718      	adds	r7, #24
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b086      	sub	sp, #24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052d8:	2300      	movs	r3, #0
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e009      	b.n	80052f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	60ba      	str	r2, [r7, #8]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	3301      	adds	r3, #1
 80052f0:	617b      	str	r3, [r7, #20]
 80052f2:	697a      	ldr	r2, [r7, #20]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	dbf1      	blt.n	80052de <_write+0x12>
  }
  return len;
 80052fa:	687b      	ldr	r3, [r7, #4]
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <_close>:

int _close(int file)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800530c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800532c:	605a      	str	r2, [r3, #4]
  return 0;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	370c      	adds	r7, #12
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_isatty>:

int _isatty(int file)
{
 800533c:	b480      	push	{r7}
 800533e:	b083      	sub	sp, #12
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005344:	2301      	movs	r3, #1
}
 8005346:	4618      	mov	r0, r3
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	60f8      	str	r0, [r7, #12]
 800535a:	60b9      	str	r1, [r7, #8]
 800535c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b086      	sub	sp, #24
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005374:	4a14      	ldr	r2, [pc, #80]	@ (80053c8 <_sbrk+0x5c>)
 8005376:	4b15      	ldr	r3, [pc, #84]	@ (80053cc <_sbrk+0x60>)
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <_sbrk+0x64>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005388:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <_sbrk+0x64>)
 800538a:	4a12      	ldr	r2, [pc, #72]	@ (80053d4 <_sbrk+0x68>)
 800538c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800538e:	4b10      	ldr	r3, [pc, #64]	@ (80053d0 <_sbrk+0x64>)
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	429a      	cmp	r2, r3
 800539a:	d207      	bcs.n	80053ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800539c:	f007 fe8e 	bl	800d0bc <__errno>
 80053a0:	4603      	mov	r3, r0
 80053a2:	220c      	movs	r2, #12
 80053a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053a6:	f04f 33ff 	mov.w	r3, #4294967295
 80053aa:	e009      	b.n	80053c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053ac:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <_sbrk+0x64>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053b2:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <_sbrk+0x64>)
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4413      	add	r3, r2
 80053ba:	4a05      	ldr	r2, [pc, #20]	@ (80053d0 <_sbrk+0x64>)
 80053bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053be:	68fb      	ldr	r3, [r7, #12]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3718      	adds	r7, #24
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}
 80053c8:	2001c000 	.word	0x2001c000
 80053cc:	00000400 	.word	0x00000400
 80053d0:	200007e8 	.word	0x200007e8
 80053d4:	20000940 	.word	0x20000940

080053d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80053dc:	4b06      	ldr	r3, [pc, #24]	@ (80053f8 <SystemInit+0x20>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053e2:	4a05      	ldr	r2, [pc, #20]	@ (80053f8 <SystemInit+0x20>)
 80053e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80053e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053ec:	bf00      	nop
 80053ee:	46bd      	mov	sp, r7
 80053f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	e000ed00 	.word	0xe000ed00

080053fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80053fc:	480d      	ldr	r0, [pc, #52]	@ (8005434 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80053fe:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005400:	f7ff ffea 	bl	80053d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005404:	480c      	ldr	r0, [pc, #48]	@ (8005438 <LoopForever+0x6>)
  ldr r1, =_edata
 8005406:	490d      	ldr	r1, [pc, #52]	@ (800543c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005408:	4a0d      	ldr	r2, [pc, #52]	@ (8005440 <LoopForever+0xe>)
  movs r3, #0
 800540a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800540c:	e002      	b.n	8005414 <LoopCopyDataInit>

0800540e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800540e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005410:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005412:	3304      	adds	r3, #4

08005414 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005414:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005416:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005418:	d3f9      	bcc.n	800540e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800541a:	4a0a      	ldr	r2, [pc, #40]	@ (8005444 <LoopForever+0x12>)
  ldr r4, =_ebss
 800541c:	4c0a      	ldr	r4, [pc, #40]	@ (8005448 <LoopForever+0x16>)
  movs r3, #0
 800541e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005420:	e001      	b.n	8005426 <LoopFillZerobss>

08005422 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005422:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005424:	3204      	adds	r2, #4

08005426 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005426:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005428:	d3fb      	bcc.n	8005422 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800542a:	f007 fe4d 	bl	800d0c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800542e:	f7fe feb7 	bl	80041a0 <main>

08005432 <LoopForever>:

LoopForever:
    b LoopForever
 8005432:	e7fe      	b.n	8005432 <LoopForever>
  ldr   r0, =_estack
 8005434:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8005438:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800543c:	20000134 	.word	0x20000134
  ldr r2, =_sidata
 8005440:	0800dd18 	.word	0x0800dd18
  ldr r2, =_sbss
 8005444:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8005448:	20000940 	.word	0x20000940

0800544c <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800544c:	e7fe      	b.n	800544c <ADC3_IRQHandler>

0800544e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005454:	2300      	movs	r3, #0
 8005456:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005458:	2003      	movs	r0, #3
 800545a:	f001 ff3d 	bl	80072d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800545e:	200f      	movs	r0, #15
 8005460:	f000 f80e 	bl	8005480 <HAL_InitTick>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d002      	beq.n	8005470 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	71fb      	strb	r3, [r7, #7]
 800546e:	e001      	b.n	8005474 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005470:	f7ff fbca 	bl	8004c08 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005474:	79fb      	ldrb	r3, [r7, #7]

}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
	...

08005480 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005488:	2300      	movs	r3, #0
 800548a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800548c:	4b16      	ldr	r3, [pc, #88]	@ (80054e8 <HAL_InitTick+0x68>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d022      	beq.n	80054da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005494:	4b15      	ldr	r3, [pc, #84]	@ (80054ec <HAL_InitTick+0x6c>)
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	4b13      	ldr	r3, [pc, #76]	@ (80054e8 <HAL_InitTick+0x68>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80054a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 ff48 	bl	800733e <HAL_SYSTICK_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d10f      	bne.n	80054d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b0f      	cmp	r3, #15
 80054b8:	d809      	bhi.n	80054ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80054ba:	2200      	movs	r2, #0
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	f04f 30ff 	mov.w	r0, #4294967295
 80054c2:	f001 ff14 	bl	80072ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80054c6:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <HAL_InitTick+0x70>)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	e007      	b.n	80054de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	73fb      	strb	r3, [r7, #15]
 80054d2:	e004      	b.n	80054de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	73fb      	strb	r3, [r7, #15]
 80054d8:	e001      	b.n	80054de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80054de:	7bfb      	ldrb	r3, [r7, #15]
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	200000c4 	.word	0x200000c4
 80054ec:	200000bc 	.word	0x200000bc
 80054f0:	200000c0 	.word	0x200000c0

080054f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054f4:	b480      	push	{r7}
 80054f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80054f8:	4b05      	ldr	r3, [pc, #20]	@ (8005510 <HAL_IncTick+0x1c>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b05      	ldr	r3, [pc, #20]	@ (8005514 <HAL_IncTick+0x20>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4413      	add	r3, r2
 8005502:	4a03      	ldr	r2, [pc, #12]	@ (8005510 <HAL_IncTick+0x1c>)
 8005504:	6013      	str	r3, [r2, #0]
}
 8005506:	bf00      	nop
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	200007ec 	.word	0x200007ec
 8005514:	200000c4 	.word	0x200000c4

08005518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005518:	b480      	push	{r7}
 800551a:	af00      	add	r7, sp, #0
  return uwTick;
 800551c:	4b03      	ldr	r3, [pc, #12]	@ (800552c <HAL_GetTick+0x14>)
 800551e:	681b      	ldr	r3, [r3, #0]
}
 8005520:	4618      	mov	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	200007ec 	.word	0x200007ec

08005530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005538:	f7ff ffee 	bl	8005518 <HAL_GetTick>
 800553c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005548:	d004      	beq.n	8005554 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800554a:	4b09      	ldr	r3, [pc, #36]	@ (8005570 <HAL_Delay+0x40>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4413      	add	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005554:	bf00      	nop
 8005556:	f7ff ffdf 	bl	8005518 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	68fa      	ldr	r2, [r7, #12]
 8005562:	429a      	cmp	r2, r3
 8005564:	d8f7      	bhi.n	8005556 <HAL_Delay+0x26>
  {
  }
}
 8005566:	bf00      	nop
 8005568:	bf00      	nop
 800556a:	3710      	adds	r7, #16
 800556c:	46bd      	mov	sp, r7
 800556e:	bd80      	pop	{r7, pc}
 8005570:	200000c4 	.word	0x200000c4

08005574 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	431a      	orrs	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	609a      	str	r2, [r3, #8]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	370c      	adds	r7, #12
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3360      	adds	r3, #96	@ 0x60
 80055ee:	461a      	mov	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	4b08      	ldr	r3, [pc, #32]	@ (8005620 <LL_ADC_SetOffset+0x44>)
 80055fe:	4013      	ands	r3, r2
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8005606:	683a      	ldr	r2, [r7, #0]
 8005608:	430a      	orrs	r2, r1
 800560a:	4313      	orrs	r3, r2
 800560c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr
 8005620:	03fff000 	.word	0x03fff000

08005624 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3360      	adds	r3, #96	@ 0x60
 8005632:	461a      	mov	r2, r3
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4413      	add	r3, r2
 800563a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8005644:	4618      	mov	r0, r3
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3360      	adds	r3, #96	@ 0x60
 8005660:	461a      	mov	r2, r3
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	4413      	add	r3, r2
 8005668:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	431a      	orrs	r2, r3
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800567a:	bf00      	nop
 800567c:	371c      	adds	r7, #28
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005686:	b480      	push	{r7}
 8005688:	b087      	sub	sp, #28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	3360      	adds	r3, #96	@ 0x60
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	431a      	orrs	r2, r3
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80056b0:	bf00      	nop
 80056b2:	371c      	adds	r7, #28
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3360      	adds	r3, #96	@ 0x60
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	4413      	add	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	431a      	orrs	r2, r3
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
 80056fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	431a      	orrs	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	615a      	str	r2, [r3, #20]
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3330      	adds	r3, #48	@ 0x30
 800574e:	461a      	mov	r2, r3
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	0a1b      	lsrs	r3, r3, #8
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	4413      	add	r3, r2
 800575c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	f003 031f 	and.w	r3, r3, #31
 8005768:	211f      	movs	r1, #31
 800576a:	fa01 f303 	lsl.w	r3, r1, r3
 800576e:	43db      	mvns	r3, r3
 8005770:	401a      	ands	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	0e9b      	lsrs	r3, r3, #26
 8005776:	f003 011f 	and.w	r1, r3, #31
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f003 031f 	and.w	r3, r3, #31
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	431a      	orrs	r2, r3
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr

08005796 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005796:	b480      	push	{r7}
 8005798:	b083      	sub	sp, #12
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057a2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3314      	adds	r3, #20
 80057cc:	461a      	mov	r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	0e5b      	lsrs	r3, r3, #25
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	4413      	add	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	0d1b      	lsrs	r3, r3, #20
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2107      	movs	r1, #7
 80057ea:	fa01 f303 	lsl.w	r3, r1, r3
 80057ee:	43db      	mvns	r3, r3
 80057f0:	401a      	ands	r2, r3
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	0d1b      	lsrs	r3, r3, #20
 80057f6:	f003 031f 	and.w	r3, r3, #31
 80057fa:	6879      	ldr	r1, [r7, #4]
 80057fc:	fa01 f303 	lsl.w	r3, r1, r3
 8005800:	431a      	orrs	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800582c:	43db      	mvns	r3, r3
 800582e:	401a      	ands	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f003 0318 	and.w	r3, r3, #24
 8005836:	4908      	ldr	r1, [pc, #32]	@ (8005858 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005838:	40d9      	lsrs	r1, r3
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	400b      	ands	r3, r1
 800583e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005842:	431a      	orrs	r2, r3
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800584a:	bf00      	nop
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	0007ffff 	.word	0x0007ffff

0800585c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	f003 031f 	and.w	r3, r3, #31
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8005888:	4618      	mov	r0, r3
 800588a:	370c      	adds	r7, #12
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80058a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6093      	str	r3, [r2, #8]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058cc:	d101      	bne.n	80058d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80058f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80058f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005918:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591c:	d101      	bne.n	8005922 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005940:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005944:	f043 0201 	orr.w	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 0301 	and.w	r3, r3, #1
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <LL_ADC_IsEnabled+0x18>
 800596c:	2301      	movs	r3, #1
 800596e:	e000      	b.n	8005972 <LL_ADC_IsEnabled+0x1a>
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800598e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005992:	f043 0204 	orr.w	r2, r3, #4
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d101      	bne.n	80059be <LL_ADC_REG_IsConversionOngoing+0x18>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b08      	cmp	r3, #8
 80059de:	d101      	bne.n	80059e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr
	...

080059f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059f4:	b590      	push	{r4, r7, lr}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005a00:	2300      	movs	r3, #0
 8005a02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e19b      	b.n	8005d46 <HAL_ADC_Init+0x352>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d109      	bne.n	8005a30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff f917 	bl	8004c50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7ff ff3f 	bl	80058b8 <LL_ADC_IsDeepPowerDownEnabled>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7ff ff25 	bl	8005894 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7ff ff5a 	bl	8005908 <LL_ADC_IsInternalRegulatorEnabled>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d115      	bne.n	8005a86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7ff ff3e 	bl	80058e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a64:	4b97      	ldr	r3, [pc, #604]	@ (8005cc4 <HAL_ADC_Init+0x2d0>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	099b      	lsrs	r3, r3, #6
 8005a6a:	4a97      	ldr	r2, [pc, #604]	@ (8005cc8 <HAL_ADC_Init+0x2d4>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	099b      	lsrs	r3, r3, #6
 8005a72:	3301      	adds	r3, #1
 8005a74:	005b      	lsls	r3, r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a78:	e002      	b.n	8005a80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f9      	bne.n	8005a7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f7ff ff3c 	bl	8005908 <LL_ADC_IsInternalRegulatorEnabled>
 8005a90:	4603      	mov	r3, r0
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10d      	bne.n	8005ab2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a9a:	f043 0210 	orr.w	r2, r3, #16
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa6:	f043 0201 	orr.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f7ff ff75 	bl	80059a6 <LL_ADC_REG_IsConversionOngoing>
 8005abc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ac2:	f003 0310 	and.w	r3, r3, #16
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f040 8134 	bne.w	8005d34 <HAL_ADC_Init+0x340>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f040 8130 	bne.w	8005d34 <HAL_ADC_Init+0x340>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005adc:	f043 0202 	orr.w	r2, r3, #2
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f7ff ff35 	bl	8005958 <LL_ADC_IsEnabled>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d137      	bne.n	8005b64 <HAL_ADC_Init+0x170>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005afc:	d004      	beq.n	8005b08 <HAL_ADC_Init+0x114>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a72      	ldr	r2, [pc, #456]	@ (8005ccc <HAL_ADC_Init+0x2d8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d10f      	bne.n	8005b28 <HAL_ADC_Init+0x134>
 8005b08:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8005b0c:	f7ff ff24 	bl	8005958 <LL_ADC_IsEnabled>
 8005b10:	4604      	mov	r4, r0
 8005b12:	486e      	ldr	r0, [pc, #440]	@ (8005ccc <HAL_ADC_Init+0x2d8>)
 8005b14:	f7ff ff20 	bl	8005958 <LL_ADC_IsEnabled>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4323      	orrs	r3, r4
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	bf0c      	ite	eq
 8005b20:	2301      	moveq	r3, #1
 8005b22:	2300      	movne	r3, #0
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	e008      	b.n	8005b3a <HAL_ADC_Init+0x146>
 8005b28:	4869      	ldr	r0, [pc, #420]	@ (8005cd0 <HAL_ADC_Init+0x2dc>)
 8005b2a:	f7ff ff15 	bl	8005958 <LL_ADC_IsEnabled>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	bf0c      	ite	eq
 8005b34:	2301      	moveq	r3, #1
 8005b36:	2300      	movne	r3, #0
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d012      	beq.n	8005b64 <HAL_ADC_Init+0x170>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b46:	d004      	beq.n	8005b52 <HAL_ADC_Init+0x15e>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a5f      	ldr	r2, [pc, #380]	@ (8005ccc <HAL_ADC_Init+0x2d8>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d101      	bne.n	8005b56 <HAL_ADC_Init+0x162>
 8005b52:	4a60      	ldr	r2, [pc, #384]	@ (8005cd4 <HAL_ADC_Init+0x2e0>)
 8005b54:	e000      	b.n	8005b58 <HAL_ADC_Init+0x164>
 8005b56:	4a60      	ldr	r2, [pc, #384]	@ (8005cd8 <HAL_ADC_Init+0x2e4>)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4610      	mov	r0, r2
 8005b60:	f7ff fd08 	bl	8005574 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	7f5b      	ldrb	r3, [r3, #29]
 8005b68:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b6e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8005b74:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8005b7a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b82:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005b84:	4313      	orrs	r3, r2
 8005b86:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d106      	bne.n	8005ba0 <HAL_ADC_Init+0x1ac>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b96:	3b01      	subs	r3, #1
 8005b98:	045b      	lsls	r3, r3, #17
 8005b9a:	69ba      	ldr	r2, [r7, #24]
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_ADC_Init+0x1c8>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bb4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	4b46      	ldr	r3, [pc, #280]	@ (8005cdc <HAL_ADC_Init+0x2e8>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6812      	ldr	r2, [r2, #0]
 8005bca:	69b9      	ldr	r1, [r7, #24]
 8005bcc:	430b      	orrs	r3, r1
 8005bce:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7ff feee 	bl	80059cc <LL_ADC_INJ_IsConversionOngoing>
 8005bf0:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d17b      	bne.n	8005cf0 <HAL_ADC_Init+0x2fc>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d178      	bne.n	8005cf0 <HAL_ADC_Init+0x2fc>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c02:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c1a:	f023 0302 	bic.w	r3, r3, #2
 8005c1e:	687a      	ldr	r2, [r7, #4]
 8005c20:	6812      	ldr	r2, [r2, #0]
 8005c22:	69b9      	ldr	r1, [r7, #24]
 8005c24:	430b      	orrs	r3, r1
 8005c26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d017      	beq.n	8005c60 <HAL_ADC_Init+0x26c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691a      	ldr	r2, [r3, #16]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005c3e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c48:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c4c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	6911      	ldr	r1, [r2, #16]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	6812      	ldr	r2, [r2, #0]
 8005c58:	430b      	orrs	r3, r1
 8005c5a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005c5e:	e013      	b.n	8005c88 <HAL_ADC_Init+0x294>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	691a      	ldr	r2, [r3, #16]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005c6e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6812      	ldr	r2, [r2, #0]
 8005c7c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8005c80:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005c84:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d126      	bne.n	8005ce0 <HAL_ADC_Init+0x2ec>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005c9c:	f023 0304 	bic.w	r3, r3, #4
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005ca8:	4311      	orrs	r1, r2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8005cae:	4311      	orrs	r1, r2
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005cb4:	430a      	orrs	r2, r1
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	611a      	str	r2, [r3, #16]
 8005cc2:	e015      	b.n	8005cf0 <HAL_ADC_Init+0x2fc>
 8005cc4:	200000bc 	.word	0x200000bc
 8005cc8:	053e2d63 	.word	0x053e2d63
 8005ccc:	50000100 	.word	0x50000100
 8005cd0:	50000400 	.word	0x50000400
 8005cd4:	50000300 	.word	0x50000300
 8005cd8:	50000700 	.word	0x50000700
 8005cdc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	691a      	ldr	r2, [r3, #16]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f022 0201 	bic.w	r2, r2, #1
 8005cee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	695b      	ldr	r3, [r3, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d10c      	bne.n	8005d12 <HAL_ADC_Init+0x31e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cfe:	f023 010f 	bic.w	r1, r3, #15
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	1e5a      	subs	r2, r3, #1
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d10:	e007      	b.n	8005d22 <HAL_ADC_Init+0x32e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 020f 	bic.w	r2, r2, #15
 8005d20:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d26:	f023 0303 	bic.w	r3, r3, #3
 8005d2a:	f043 0201 	orr.w	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d32:	e007      	b.n	8005d44 <HAL_ADC_Init+0x350>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d38:	f043 0210 	orr.w	r2, r3, #16
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8005d40:	2301      	movs	r3, #1
 8005d42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3724      	adds	r7, #36	@ 0x24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd90      	pop	{r4, r7, pc}
 8005d4e:	bf00      	nop

08005d50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005d64:	d004      	beq.n	8005d70 <HAL_ADC_Start_DMA+0x20>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a57      	ldr	r2, [pc, #348]	@ (8005ec8 <HAL_ADC_Start_DMA+0x178>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_ADC_Start_DMA+0x24>
 8005d70:	4b56      	ldr	r3, [pc, #344]	@ (8005ecc <HAL_ADC_Start_DMA+0x17c>)
 8005d72:	e000      	b.n	8005d76 <HAL_ADC_Start_DMA+0x26>
 8005d74:	4b56      	ldr	r3, [pc, #344]	@ (8005ed0 <HAL_ADC_Start_DMA+0x180>)
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7ff fd70 	bl	800585c <LL_ADC_GetMultimode>
 8005d7c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7ff fe0f 	bl	80059a6 <LL_ADC_REG_IsConversionOngoing>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 8094 	bne.w	8005eb8 <HAL_ADC_Start_DMA+0x168>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d101      	bne.n	8005d9e <HAL_ADC_Start_DMA+0x4e>
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	e08f      	b.n	8005ebe <HAL_ADC_Start_DMA+0x16e>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a4a      	ldr	r2, [pc, #296]	@ (8005ed4 <HAL_ADC_Start_DMA+0x184>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d008      	beq.n	8005dc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d005      	beq.n	8005dc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d002      	beq.n	8005dc2 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b09      	cmp	r3, #9
 8005dc0:	d173      	bne.n	8005eaa <HAL_ADC_Start_DMA+0x15a>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 ff1c 	bl	8006c00 <ADC_Enable>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d166      	bne.n	8005ea0 <HAL_ADC_Start_DMA+0x150>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005dda:	f023 0301 	bic.w	r3, r3, #1
 8005dde:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a37      	ldr	r2, [pc, #220]	@ (8005ec8 <HAL_ADC_Start_DMA+0x178>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d002      	beq.n	8005df6 <HAL_ADC_Start_DMA+0xa6>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	e001      	b.n	8005dfa <HAL_ADC_Start_DMA+0xaa>
 8005df6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	6812      	ldr	r2, [r2, #0]
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d002      	beq.n	8005e08 <HAL_ADC_Start_DMA+0xb8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d105      	bne.n	8005e14 <HAL_ADC_Start_DMA+0xc4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e0c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d006      	beq.n	8005e2e <HAL_ADC_Start_DMA+0xde>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e24:	f023 0206 	bic.w	r2, r3, #6
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e2c:	e002      	b.n	8005e34 <HAL_ADC_Start_DMA+0xe4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e38:	4a27      	ldr	r2, [pc, #156]	@ (8005ed8 <HAL_ADC_Start_DMA+0x188>)
 8005e3a:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e40:	4a26      	ldr	r2, [pc, #152]	@ (8005edc <HAL_ADC_Start_DMA+0x18c>)
 8005e42:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e48:	4a25      	ldr	r2, [pc, #148]	@ (8005ee0 <HAL_ADC_Start_DMA+0x190>)
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	221c      	movs	r2, #28
 8005e52:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f042 0210 	orr.w	r2, r2, #16
 8005e6a:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0201 	orr.w	r2, r2, #1
 8005e7a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3340      	adds	r3, #64	@ 0x40
 8005e86:	4619      	mov	r1, r3
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f001 fbfe 	bl	800768c <HAL_DMA_Start_IT>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fd70 	bl	800597e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005e9e:	e00d      	b.n	8005ebc <HAL_ADC_Start_DMA+0x16c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8005ea8:	e008      	b.n	8005ebc <HAL_ADC_Start_DMA+0x16c>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8005eb6:	e001      	b.n	8005ebc <HAL_ADC_Start_DMA+0x16c>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	50000100 	.word	0x50000100
 8005ecc:	50000300 	.word	0x50000300
 8005ed0:	50000700 	.word	0x50000700
 8005ed4:	50000400 	.word	0x50000400
 8005ed8:	08006d2d 	.word	0x08006d2d
 8005edc:	08006e05 	.word	0x08006e05
 8005ee0:	08006e21 	.word	0x08006e21

08005ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	@ 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8005eec:	2300      	movs	r3, #0
 8005eee:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005f08:	d004      	beq.n	8005f14 <HAL_ADC_IRQHandler+0x30>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a87      	ldr	r2, [pc, #540]	@ (800612c <HAL_ADC_IRQHandler+0x248>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d101      	bne.n	8005f18 <HAL_ADC_IRQHandler+0x34>
 8005f14:	4b86      	ldr	r3, [pc, #536]	@ (8006130 <HAL_ADC_IRQHandler+0x24c>)
 8005f16:	e000      	b.n	8005f1a <HAL_ADC_IRQHandler+0x36>
 8005f18:	4b86      	ldr	r3, [pc, #536]	@ (8006134 <HAL_ADC_IRQHandler+0x250>)
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7ff fc9e 	bl	800585c <LL_ADC_GetMultimode>
 8005f20:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	f003 0302 	and.w	r3, r3, #2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d017      	beq.n	8005f5c <HAL_ADC_IRQHandler+0x78>
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	f003 0302 	and.w	r3, r3, #2
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d012      	beq.n	8005f5c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d105      	bne.n	8005f4e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f46:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 ffce 	bl	8006ef0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f003 0304 	and.w	r3, r3, #4
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d004      	beq.n	8005f70 <HAL_ADC_IRQHandler+0x8c>
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d10a      	bne.n	8005f86 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8085 	beq.w	8006086 <HAL_ADC_IRQHandler+0x1a2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d07f      	beq.n	8006086 <HAL_ADC_IRQHandler+0x1a2>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f8a:	f003 0310 	and.w	r3, r3, #16
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d105      	bne.n	8005f9e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff fbb8 	bl	8005718 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d064      	beq.n	8006078 <HAL_ADC_IRQHandler+0x194>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a5e      	ldr	r2, [pc, #376]	@ (800612c <HAL_ADC_IRQHandler+0x248>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d002      	beq.n	8005fbe <HAL_ADC_IRQHandler+0xda>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	e001      	b.n	8005fc2 <HAL_ADC_IRQHandler+0xde>
 8005fbe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d008      	beq.n	8005fdc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	2b05      	cmp	r3, #5
 8005fd4:	d002      	beq.n	8005fdc <HAL_ADC_IRQHandler+0xf8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2b09      	cmp	r3, #9
 8005fda:	d104      	bne.n	8005fe6 <HAL_ADC_IRQHandler+0x102>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	623b      	str	r3, [r7, #32]
 8005fe4:	e00d      	b.n	8006002 <HAL_ADC_IRQHandler+0x11e>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a50      	ldr	r2, [pc, #320]	@ (800612c <HAL_ADC_IRQHandler+0x248>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d002      	beq.n	8005ff6 <HAL_ADC_IRQHandler+0x112>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	e001      	b.n	8005ffa <HAL_ADC_IRQHandler+0x116>
 8005ff6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005ffa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d135      	bne.n	8006078 <HAL_ADC_IRQHandler+0x194>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f003 0308 	and.w	r3, r3, #8
 8006016:	2b08      	cmp	r3, #8
 8006018:	d12e      	bne.n	8006078 <HAL_ADC_IRQHandler+0x194>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4618      	mov	r0, r3
 8006020:	f7ff fcc1 	bl	80059a6 <LL_ADC_REG_IsConversionOngoing>
 8006024:	4603      	mov	r3, r0
 8006026:	2b00      	cmp	r3, #0
 8006028:	d11a      	bne.n	8006060 <HAL_ADC_IRQHandler+0x17c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685a      	ldr	r2, [r3, #4]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 020c 	bic.w	r2, r2, #12
 8006038:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800604a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800604e:	2b00      	cmp	r3, #0
 8006050:	d112      	bne.n	8006078 <HAL_ADC_IRQHandler+0x194>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006056:	f043 0201 	orr.w	r2, r3, #1
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800605e:	e00b      	b.n	8006078 <HAL_ADC_IRQHandler+0x194>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006064:	f043 0210 	orr.w	r2, r3, #16
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006070:	f043 0201 	orr.w	r2, r3, #1
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f96d 	bl	8006358 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	220c      	movs	r2, #12
 8006084:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d004      	beq.n	800609a <HAL_ADC_IRQHandler+0x1b6>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0320 	and.w	r3, r3, #32
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10b      	bne.n	80060b2 <HAL_ADC_IRQHandler+0x1ce>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	f000 80a1 	beq.w	80061e8 <HAL_ADC_IRQHandler+0x304>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	f000 809b 	beq.w	80061e8 <HAL_ADC_IRQHandler+0x304>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b6:	f003 0310 	and.w	r3, r3, #16
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d105      	bne.n	80060ca <HAL_ADC_IRQHandler+0x1e6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060c2:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff fb61 	bl	8005796 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80060d4:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fb1c 	bl	8005718 <LL_ADC_REG_IsTriggerSourceSWStart>
 80060e0:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a11      	ldr	r2, [pc, #68]	@ (800612c <HAL_ADC_IRQHandler+0x248>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d002      	beq.n	80060f2 <HAL_ADC_IRQHandler+0x20e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	e001      	b.n	80060f6 <HAL_ADC_IRQHandler+0x212>
 80060f2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d008      	beq.n	8006110 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	2b06      	cmp	r3, #6
 8006108:	d002      	beq.n	8006110 <HAL_ADC_IRQHandler+0x22c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	2b07      	cmp	r3, #7
 800610e:	d104      	bne.n	800611a <HAL_ADC_IRQHandler+0x236>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	e014      	b.n	8006144 <HAL_ADC_IRQHandler+0x260>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a03      	ldr	r2, [pc, #12]	@ (800612c <HAL_ADC_IRQHandler+0x248>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d009      	beq.n	8006138 <HAL_ADC_IRQHandler+0x254>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	e008      	b.n	800613c <HAL_ADC_IRQHandler+0x258>
 800612a:	bf00      	nop
 800612c:	50000100 	.word	0x50000100
 8006130:	50000300 	.word	0x50000300
 8006134:	50000700 	.word	0x50000700
 8006138:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800613c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d047      	beq.n	80061da <HAL_ADC_IRQHandler+0x2f6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <HAL_ADC_IRQHandler+0x280>
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d03f      	beq.n	80061da <HAL_ADC_IRQHandler+0x2f6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006160:	2b00      	cmp	r3, #0
 8006162:	d13a      	bne.n	80061da <HAL_ADC_IRQHandler+0x2f6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800616e:	2b40      	cmp	r3, #64	@ 0x40
 8006170:	d133      	bne.n	80061da <HAL_ADC_IRQHandler+0x2f6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006178:	2b00      	cmp	r3, #0
 800617a:	d12e      	bne.n	80061da <HAL_ADC_IRQHandler+0x2f6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4618      	mov	r0, r3
 8006182:	f7ff fc23 	bl	80059cc <LL_ADC_INJ_IsConversionOngoing>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d11a      	bne.n	80061c2 <HAL_ADC_IRQHandler+0x2de>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800619a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d112      	bne.n	80061da <HAL_ADC_IRQHandler+0x2f6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061b8:	f043 0201 	orr.w	r2, r3, #1
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80061c0:	e00b      	b.n	80061da <HAL_ADC_IRQHandler+0x2f6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061c6:	f043 0210 	orr.w	r2, r3, #16
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80061d2:	f043 0201 	orr.w	r2, r3, #1
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 fe60 	bl	8006ea0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2260      	movs	r2, #96	@ 0x60
 80061e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <HAL_ADC_IRQHandler+0x332>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00c      	beq.n	8006216 <HAL_ADC_IRQHandler+0x332>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006200:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 f8b9 	bl	8006380 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2280      	movs	r2, #128	@ 0x80
 8006214:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d012      	beq.n	8006246 <HAL_ADC_IRQHandler+0x362>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00d      	beq.n	8006246 <HAL_ADC_IRQHandler+0x362>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800622e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fe46 	bl	8006ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006244:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006246:	69fb      	ldr	r3, [r7, #28]
 8006248:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800624c:	2b00      	cmp	r3, #0
 800624e:	d012      	beq.n	8006276 <HAL_ADC_IRQHandler+0x392>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00d      	beq.n	8006276 <HAL_ADC_IRQHandler+0x392>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800625e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 fe38 	bl	8006edc <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006274:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	d043      	beq.n	8006308 <HAL_ADC_IRQHandler+0x424>
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	f003 0310 	and.w	r3, r3, #16
 8006286:	2b00      	cmp	r3, #0
 8006288:	d03e      	beq.n	8006308 <HAL_ADC_IRQHandler+0x424>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800628e:	2b00      	cmp	r3, #0
 8006290:	d102      	bne.n	8006298 <HAL_ADC_IRQHandler+0x3b4>
    {
      overrun_error = 1UL;
 8006292:	2301      	movs	r3, #1
 8006294:	627b      	str	r3, [r7, #36]	@ 0x24
 8006296:	e021      	b.n	80062dc <HAL_ADC_IRQHandler+0x3f8>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d015      	beq.n	80062ca <HAL_ADC_IRQHandler+0x3e6>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062a6:	d004      	beq.n	80062b2 <HAL_ADC_IRQHandler+0x3ce>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a27      	ldr	r2, [pc, #156]	@ (800634c <HAL_ADC_IRQHandler+0x468>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d101      	bne.n	80062b6 <HAL_ADC_IRQHandler+0x3d2>
 80062b2:	4b27      	ldr	r3, [pc, #156]	@ (8006350 <HAL_ADC_IRQHandler+0x46c>)
 80062b4:	e000      	b.n	80062b8 <HAL_ADC_IRQHandler+0x3d4>
 80062b6:	4b27      	ldr	r3, [pc, #156]	@ (8006354 <HAL_ADC_IRQHandler+0x470>)
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7ff fadd 	bl	8005878 <LL_ADC_GetMultiDMATransfer>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00b      	beq.n	80062dc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80062c4:	2301      	movs	r3, #1
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062c8:	e008      	b.n	80062dc <HAL_ADC_IRQHandler+0x3f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	f003 0301 	and.w	r3, r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <HAL_ADC_IRQHandler+0x3f8>
        {
          overrun_error = 1UL;
 80062d8:	2301      	movs	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80062dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d10e      	bne.n	8006300 <HAL_ADC_IRQHandler+0x41c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062e6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80062f2:	f043 0202 	orr.w	r2, r3, #2
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f84a 	bl	8006394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2210      	movs	r2, #16
 8006306:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800630e:	2b00      	cmp	r3, #0
 8006310:	d018      	beq.n	8006344 <HAL_ADC_IRQHandler+0x460>
 8006312:	69bb      	ldr	r3, [r7, #24]
 8006314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006318:	2b00      	cmp	r3, #0
 800631a:	d013      	beq.n	8006344 <HAL_ADC_IRQHandler+0x460>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006320:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800632c:	f043 0208 	orr.w	r2, r3, #8
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800633c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fdb8 	bl	8006eb4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8006344:	bf00      	nop
 8006346:	3728      	adds	r7, #40	@ 0x28
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	50000100 	.word	0x50000100
 8006350:	50000300 	.word	0x50000300
 8006354:	50000700 	.word	0x50000700

08006358 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006360:	bf00      	nop
 8006362:	370c      	adds	r7, #12
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006380:	b480      	push	{r7}
 8006382:	b083      	sub	sp, #12
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800639c:	bf00      	nop
 800639e:	370c      	adds	r7, #12
 80063a0:	46bd      	mov	sp, r7
 80063a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a6:	4770      	bx	lr

080063a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b0b6      	sub	sp, #216	@ 0xd8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d102      	bne.n	80063cc <HAL_ADC_ConfigChannel+0x24>
 80063c6:	2302      	movs	r3, #2
 80063c8:	f000 bc04 	b.w	8006bd4 <HAL_ADC_ConfigChannel+0x82c>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fae4 	bl	80059a6 <LL_ADC_REG_IsConversionOngoing>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 83e8 	bne.w	8006bb6 <HAL_ADC_ConfigChannel+0x80e>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6818      	ldr	r0, [r3, #0]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	6859      	ldr	r1, [r3, #4]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	461a      	mov	r2, r3
 80063f4:	f7ff f9a3 	bl	800573e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f7ff fad2 	bl	80059a6 <LL_ADC_REG_IsConversionOngoing>
 8006402:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fade 	bl	80059cc <LL_ADC_INJ_IsConversionOngoing>
 8006410:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006414:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f040 81d9 	bne.w	80067d0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800641e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006422:	2b00      	cmp	r3, #0
 8006424:	f040 81d4 	bne.w	80067d0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006430:	d10f      	bne.n	8006452 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6818      	ldr	r0, [r3, #0]
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2200      	movs	r2, #0
 800643c:	4619      	mov	r1, r3
 800643e:	f7ff f9bd 	bl	80057bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800644a:	4618      	mov	r0, r3
 800644c:	f7ff f951 	bl	80056f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8006450:	e00e      	b.n	8006470 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	6819      	ldr	r1, [r3, #0]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	461a      	mov	r2, r3
 8006460:	f7ff f9ac 	bl	80057bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2100      	movs	r1, #0
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff f941 	bl	80056f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	695a      	ldr	r2, [r3, #20]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	08db      	lsrs	r3, r3, #3
 800647c:	f003 0303 	and.w	r3, r3, #3
 8006480:	005b      	lsls	r3, r3, #1
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	691b      	ldr	r3, [r3, #16]
 800648e:	2b04      	cmp	r3, #4
 8006490:	d022      	beq.n	80064d8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	6919      	ldr	r1, [r3, #16]
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80064a2:	f7ff f89b 	bl	80055dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6919      	ldr	r1, [r3, #16]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f7ff f8e7 	bl	8005686 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6818      	ldr	r0, [r3, #0]
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x126>
 80064c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80064cc:	e000      	b.n	80064d0 <HAL_ADC_ConfigChannel+0x128>
 80064ce:	2300      	movs	r3, #0
 80064d0:	461a      	mov	r2, r3
 80064d2:	f7ff f8f3 	bl	80056bc <LL_ADC_SetOffsetSaturation>
 80064d6:	e17b      	b.n	80067d0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2100      	movs	r1, #0
 80064de:	4618      	mov	r0, r3
 80064e0:	f7ff f8a0 	bl	8005624 <LL_ADC_GetOffsetChannel>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10a      	bne.n	8006504 <HAL_ADC_ConfigChannel+0x15c>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2100      	movs	r1, #0
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff f895 	bl	8005624 <LL_ADC_GetOffsetChannel>
 80064fa:	4603      	mov	r3, r0
 80064fc:	0e9b      	lsrs	r3, r3, #26
 80064fe:	f003 021f 	and.w	r2, r3, #31
 8006502:	e01e      	b.n	8006542 <HAL_ADC_ConfigChannel+0x19a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2100      	movs	r1, #0
 800650a:	4618      	mov	r0, r3
 800650c:	f7ff f88a 	bl	8005624 <LL_ADC_GetOffsetChannel>
 8006510:	4603      	mov	r3, r0
 8006512:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006516:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800651a:	fa93 f3a3 	rbit	r3, r3
 800651e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006522:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006526:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800652a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8006532:	2320      	movs	r3, #32
 8006534:	e004      	b.n	8006540 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8006536:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800653a:	fab3 f383 	clz	r3, r3
 800653e:	b2db      	uxtb	r3, r3
 8006540:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654a:	2b00      	cmp	r3, #0
 800654c:	d105      	bne.n	800655a <HAL_ADC_ConfigChannel+0x1b2>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	0e9b      	lsrs	r3, r3, #26
 8006554:	f003 031f 	and.w	r3, r3, #31
 8006558:	e018      	b.n	800658c <HAL_ADC_ConfigChannel+0x1e4>
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006562:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8006566:	fa93 f3a3 	rbit	r3, r3
 800656a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800656e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006572:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8006576:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800657e:	2320      	movs	r3, #32
 8006580:	e004      	b.n	800658c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8006582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8006586:	fab3 f383 	clz	r3, r3
 800658a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800658c:	429a      	cmp	r2, r3
 800658e:	d106      	bne.n	800659e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2200      	movs	r2, #0
 8006596:	2100      	movs	r1, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f7ff f859 	bl	8005650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2101      	movs	r1, #1
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff f83d 	bl	8005624 <LL_ADC_GetOffsetChannel>
 80065aa:	4603      	mov	r3, r0
 80065ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <HAL_ADC_ConfigChannel+0x222>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff f832 	bl	8005624 <LL_ADC_GetOffsetChannel>
 80065c0:	4603      	mov	r3, r0
 80065c2:	0e9b      	lsrs	r3, r3, #26
 80065c4:	f003 021f 	and.w	r2, r3, #31
 80065c8:	e01e      	b.n	8006608 <HAL_ADC_ConfigChannel+0x260>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2101      	movs	r1, #1
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7ff f827 	bl	8005624 <LL_ADC_GetOffsetChannel>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065dc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80065e0:	fa93 f3a3 	rbit	r3, r3
 80065e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80065e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80065ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80065f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80065f8:	2320      	movs	r3, #32
 80065fa:	e004      	b.n	8006606 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80065fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8006600:	fab3 f383 	clz	r3, r3
 8006604:	b2db      	uxtb	r3, r3
 8006606:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006610:	2b00      	cmp	r3, #0
 8006612:	d105      	bne.n	8006620 <HAL_ADC_ConfigChannel+0x278>
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	0e9b      	lsrs	r3, r3, #26
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	e018      	b.n	8006652 <HAL_ADC_ConfigChannel+0x2aa>
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006628:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800662c:	fa93 f3a3 	rbit	r3, r3
 8006630:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8006634:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006638:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006640:	2b00      	cmp	r3, #0
 8006642:	d101      	bne.n	8006648 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8006644:	2320      	movs	r3, #32
 8006646:	e004      	b.n	8006652 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8006648:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800664c:	fab3 f383 	clz	r3, r3
 8006650:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006652:	429a      	cmp	r2, r3
 8006654:	d106      	bne.n	8006664 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	2200      	movs	r2, #0
 800665c:	2101      	movs	r1, #1
 800665e:	4618      	mov	r0, r3
 8006660:	f7fe fff6 	bl	8005650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2102      	movs	r1, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f7fe ffda 	bl	8005624 <LL_ADC_GetOffsetChannel>
 8006670:	4603      	mov	r3, r0
 8006672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10a      	bne.n	8006690 <HAL_ADC_ConfigChannel+0x2e8>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2102      	movs	r1, #2
 8006680:	4618      	mov	r0, r3
 8006682:	f7fe ffcf 	bl	8005624 <LL_ADC_GetOffsetChannel>
 8006686:	4603      	mov	r3, r0
 8006688:	0e9b      	lsrs	r3, r3, #26
 800668a:	f003 021f 	and.w	r2, r3, #31
 800668e:	e01e      	b.n	80066ce <HAL_ADC_ConfigChannel+0x326>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	2102      	movs	r1, #2
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe ffc4 	bl	8005624 <LL_ADC_GetOffsetChannel>
 800669c:	4603      	mov	r3, r0
 800669e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80066a6:	fa93 f3a3 	rbit	r3, r3
 80066aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80066ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80066b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80066b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d101      	bne.n	80066c2 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80066be:	2320      	movs	r3, #32
 80066c0:	e004      	b.n	80066cc <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80066c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80066c6:	fab3 f383 	clz	r3, r3
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <HAL_ADC_ConfigChannel+0x33e>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	0e9b      	lsrs	r3, r3, #26
 80066e0:	f003 031f 	and.w	r3, r3, #31
 80066e4:	e016      	b.n	8006714 <HAL_ADC_ConfigChannel+0x36c>
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066f2:	fa93 f3a3 	rbit	r3, r3
 80066f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 80066f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80066fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 80066fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8006706:	2320      	movs	r3, #32
 8006708:	e004      	b.n	8006714 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800670a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800670e:	fab3 f383 	clz	r3, r3
 8006712:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006714:	429a      	cmp	r2, r3
 8006716:	d106      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2200      	movs	r2, #0
 800671e:	2102      	movs	r1, #2
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe ff95 	bl	8005650 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2103      	movs	r1, #3
 800672c:	4618      	mov	r0, r3
 800672e:	f7fe ff79 	bl	8005624 <LL_ADC_GetOffsetChannel>
 8006732:	4603      	mov	r3, r0
 8006734:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10a      	bne.n	8006752 <HAL_ADC_ConfigChannel+0x3aa>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	2103      	movs	r1, #3
 8006742:	4618      	mov	r0, r3
 8006744:	f7fe ff6e 	bl	8005624 <LL_ADC_GetOffsetChannel>
 8006748:	4603      	mov	r3, r0
 800674a:	0e9b      	lsrs	r3, r3, #26
 800674c:	f003 021f 	and.w	r2, r3, #31
 8006750:	e017      	b.n	8006782 <HAL_ADC_ConfigChannel+0x3da>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2103      	movs	r1, #3
 8006758:	4618      	mov	r0, r3
 800675a:	f7fe ff63 	bl	8005624 <LL_ADC_GetOffsetChannel>
 800675e:	4603      	mov	r3, r0
 8006760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006764:	fa93 f3a3 	rbit	r3, r3
 8006768:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800676a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 800676e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8006774:	2320      	movs	r3, #32
 8006776:	e003      	b.n	8006780 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8006778:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800677a:	fab3 f383 	clz	r3, r3
 800677e:	b2db      	uxtb	r3, r3
 8006780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800678a:	2b00      	cmp	r3, #0
 800678c:	d105      	bne.n	800679a <HAL_ADC_ConfigChannel+0x3f2>
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	0e9b      	lsrs	r3, r3, #26
 8006794:	f003 031f 	and.w	r3, r3, #31
 8006798:	e011      	b.n	80067be <HAL_ADC_ConfigChannel+0x416>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067a0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80067a2:	fa93 f3a3 	rbit	r3, r3
 80067a6:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80067a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80067ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d101      	bne.n	80067b6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80067b2:	2320      	movs	r3, #32
 80067b4:	e003      	b.n	80067be <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80067b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80067b8:	fab3 f383 	clz	r3, r3
 80067bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80067be:	429a      	cmp	r2, r3
 80067c0:	d106      	bne.n	80067d0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2200      	movs	r2, #0
 80067c8:	2103      	movs	r1, #3
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe ff40 	bl	8005650 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4618      	mov	r0, r3
 80067d6:	f7ff f8bf 	bl	8005958 <LL_ADC_IsEnabled>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f040 813d 	bne.w	8006a5c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6818      	ldr	r0, [r3, #0]
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	6819      	ldr	r1, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68db      	ldr	r3, [r3, #12]
 80067ee:	461a      	mov	r2, r3
 80067f0:	f7ff f810 	bl	8005814 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4aa2      	ldr	r2, [pc, #648]	@ (8006a84 <HAL_ADC_ConfigChannel+0x6dc>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	f040 812e 	bne.w	8006a5c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800680c:	2b00      	cmp	r3, #0
 800680e:	d10b      	bne.n	8006828 <HAL_ADC_ConfigChannel+0x480>
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	0e9b      	lsrs	r3, r3, #26
 8006816:	3301      	adds	r3, #1
 8006818:	f003 031f 	and.w	r3, r3, #31
 800681c:	2b09      	cmp	r3, #9
 800681e:	bf94      	ite	ls
 8006820:	2301      	movls	r3, #1
 8006822:	2300      	movhi	r3, #0
 8006824:	b2db      	uxtb	r3, r3
 8006826:	e019      	b.n	800685c <HAL_ADC_ConfigChannel+0x4b4>
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800682e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006830:	fa93 f3a3 	rbit	r3, r3
 8006834:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8006836:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006838:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800683a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800683c:	2b00      	cmp	r3, #0
 800683e:	d101      	bne.n	8006844 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8006840:	2320      	movs	r3, #32
 8006842:	e003      	b.n	800684c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8006844:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006846:	fab3 f383 	clz	r3, r3
 800684a:	b2db      	uxtb	r3, r3
 800684c:	3301      	adds	r3, #1
 800684e:	f003 031f 	and.w	r3, r3, #31
 8006852:	2b09      	cmp	r3, #9
 8006854:	bf94      	ite	ls
 8006856:	2301      	movls	r3, #1
 8006858:	2300      	movhi	r3, #0
 800685a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800685c:	2b00      	cmp	r3, #0
 800685e:	d079      	beq.n	8006954 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <HAL_ADC_ConfigChannel+0x4d4>
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	0e9b      	lsrs	r3, r3, #26
 8006872:	3301      	adds	r3, #1
 8006874:	069b      	lsls	r3, r3, #26
 8006876:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800687a:	e015      	b.n	80068a8 <HAL_ADC_ConfigChannel+0x500>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006884:	fa93 f3a3 	rbit	r3, r3
 8006888:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800688a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800688c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800688e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006890:	2b00      	cmp	r3, #0
 8006892:	d101      	bne.n	8006898 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8006894:	2320      	movs	r3, #32
 8006896:	e003      	b.n	80068a0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8006898:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800689a:	fab3 f383 	clz	r3, r3
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	3301      	adds	r3, #1
 80068a2:	069b      	lsls	r3, r3, #26
 80068a4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <HAL_ADC_ConfigChannel+0x520>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	0e9b      	lsrs	r3, r3, #26
 80068ba:	3301      	adds	r3, #1
 80068bc:	f003 031f 	and.w	r3, r3, #31
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	e017      	b.n	80068f8 <HAL_ADC_ConfigChannel+0x550>
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80068d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80068da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80068e0:	2320      	movs	r3, #32
 80068e2:	e003      	b.n	80068ec <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80068e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80068e6:	fab3 f383 	clz	r3, r3
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	3301      	adds	r3, #1
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2101      	movs	r1, #1
 80068f4:	fa01 f303 	lsl.w	r3, r1, r3
 80068f8:	ea42 0103 	orr.w	r1, r2, r3
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <HAL_ADC_ConfigChannel+0x576>
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	0e9b      	lsrs	r3, r3, #26
 800690e:	3301      	adds	r3, #1
 8006910:	f003 021f 	and.w	r2, r3, #31
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	051b      	lsls	r3, r3, #20
 800691c:	e018      	b.n	8006950 <HAL_ADC_ConfigChannel+0x5a8>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006926:	fa93 f3a3 	rbit	r3, r3
 800692a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800692c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8006930:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8006936:	2320      	movs	r3, #32
 8006938:	e003      	b.n	8006942 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800693a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800693c:	fab3 f383 	clz	r3, r3
 8006940:	b2db      	uxtb	r3, r3
 8006942:	3301      	adds	r3, #1
 8006944:	f003 021f 	and.w	r2, r3, #31
 8006948:	4613      	mov	r3, r2
 800694a:	005b      	lsls	r3, r3, #1
 800694c:	4413      	add	r3, r2
 800694e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006950:	430b      	orrs	r3, r1
 8006952:	e07e      	b.n	8006a52 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800695c:	2b00      	cmp	r3, #0
 800695e:	d107      	bne.n	8006970 <HAL_ADC_ConfigChannel+0x5c8>
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	0e9b      	lsrs	r3, r3, #26
 8006966:	3301      	adds	r3, #1
 8006968:	069b      	lsls	r3, r3, #26
 800696a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800696e:	e015      	b.n	800699c <HAL_ADC_ConfigChannel+0x5f4>
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006978:	fa93 f3a3 	rbit	r3, r3
 800697c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800697e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006980:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8006982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8006988:	2320      	movs	r3, #32
 800698a:	e003      	b.n	8006994 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800698c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698e:	fab3 f383 	clz	r3, r3
 8006992:	b2db      	uxtb	r3, r3
 8006994:	3301      	adds	r3, #1
 8006996:	069b      	lsls	r3, r3, #26
 8006998:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d109      	bne.n	80069bc <HAL_ADC_ConfigChannel+0x614>
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	0e9b      	lsrs	r3, r3, #26
 80069ae:	3301      	adds	r3, #1
 80069b0:	f003 031f 	and.w	r3, r3, #31
 80069b4:	2101      	movs	r1, #1
 80069b6:	fa01 f303 	lsl.w	r3, r1, r3
 80069ba:	e017      	b.n	80069ec <HAL_ADC_ConfigChannel+0x644>
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	fa93 f3a3 	rbit	r3, r3
 80069c8:	61fb      	str	r3, [r7, #28]
  return result;
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80069d4:	2320      	movs	r3, #32
 80069d6:	e003      	b.n	80069e0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	fab3 f383 	clz	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	3301      	adds	r3, #1
 80069e2:	f003 031f 	and.w	r3, r3, #31
 80069e6:	2101      	movs	r1, #1
 80069e8:	fa01 f303 	lsl.w	r3, r1, r3
 80069ec:	ea42 0103 	orr.w	r1, r2, r3
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10d      	bne.n	8006a18 <HAL_ADC_ConfigChannel+0x670>
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	0e9b      	lsrs	r3, r3, #26
 8006a02:	3301      	adds	r3, #1
 8006a04:	f003 021f 	and.w	r2, r3, #31
 8006a08:	4613      	mov	r3, r2
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	4413      	add	r3, r2
 8006a0e:	3b1e      	subs	r3, #30
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a16:	e01b      	b.n	8006a50 <HAL_ADC_ConfigChannel+0x6a8>
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	fa93 f3a3 	rbit	r3, r3
 8006a24:	613b      	str	r3, [r7, #16]
  return result;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006a2a:	69bb      	ldr	r3, [r7, #24]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8006a30:	2320      	movs	r3, #32
 8006a32:	e003      	b.n	8006a3c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	fab3 f383 	clz	r3, r3
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	f003 021f 	and.w	r2, r3, #31
 8006a42:	4613      	mov	r3, r2
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	4413      	add	r3, r2
 8006a48:	3b1e      	subs	r3, #30
 8006a4a:	051b      	lsls	r3, r3, #20
 8006a4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a50:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a56:	4619      	mov	r1, r3
 8006a58:	f7fe feb0 	bl	80057bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	4b09      	ldr	r3, [pc, #36]	@ (8006a88 <HAL_ADC_ConfigChannel+0x6e0>)
 8006a62:	4013      	ands	r3, r2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f000 80af 	beq.w	8006bc8 <HAL_ADC_ConfigChannel+0x820>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a72:	d004      	beq.n	8006a7e <HAL_ADC_ConfigChannel+0x6d6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a04      	ldr	r2, [pc, #16]	@ (8006a8c <HAL_ADC_ConfigChannel+0x6e4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d10a      	bne.n	8006a94 <HAL_ADC_ConfigChannel+0x6ec>
 8006a7e:	4b04      	ldr	r3, [pc, #16]	@ (8006a90 <HAL_ADC_ConfigChannel+0x6e8>)
 8006a80:	e009      	b.n	8006a96 <HAL_ADC_ConfigChannel+0x6ee>
 8006a82:	bf00      	nop
 8006a84:	407f0000 	.word	0x407f0000
 8006a88:	80080000 	.word	0x80080000
 8006a8c:	50000100 	.word	0x50000100
 8006a90:	50000300 	.word	0x50000300
 8006a94:	4b51      	ldr	r3, [pc, #324]	@ (8006bdc <HAL_ADC_ConfigChannel+0x834>)
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7fe fd92 	bl	80055c0 <LL_ADC_GetCommonPathInternalCh>
 8006a9c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a4e      	ldr	r2, [pc, #312]	@ (8006be0 <HAL_ADC_ConfigChannel+0x838>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d004      	beq.n	8006ab4 <HAL_ADC_ConfigChannel+0x70c>
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a4d      	ldr	r2, [pc, #308]	@ (8006be4 <HAL_ADC_ConfigChannel+0x83c>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d134      	bne.n	8006b1e <HAL_ADC_ConfigChannel+0x776>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ab4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ab8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d12e      	bne.n	8006b1e <HAL_ADC_ConfigChannel+0x776>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ac8:	d17e      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006ad2:	d004      	beq.n	8006ade <HAL_ADC_ConfigChannel+0x736>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a43      	ldr	r2, [pc, #268]	@ (8006be8 <HAL_ADC_ConfigChannel+0x840>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d101      	bne.n	8006ae2 <HAL_ADC_ConfigChannel+0x73a>
 8006ade:	4a43      	ldr	r2, [pc, #268]	@ (8006bec <HAL_ADC_ConfigChannel+0x844>)
 8006ae0:	e000      	b.n	8006ae4 <HAL_ADC_ConfigChannel+0x73c>
 8006ae2:	4a3e      	ldr	r2, [pc, #248]	@ (8006bdc <HAL_ADC_ConfigChannel+0x834>)
 8006ae4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ae8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fe fd53 	bl	800559a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006af4:	4b3e      	ldr	r3, [pc, #248]	@ (8006bf0 <HAL_ADC_ConfigChannel+0x848>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	099b      	lsrs	r3, r3, #6
 8006afa:	4a3e      	ldr	r2, [pc, #248]	@ (8006bf4 <HAL_ADC_ConfigChannel+0x84c>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	099b      	lsrs	r3, r3, #6
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	4613      	mov	r3, r2
 8006b06:	005b      	lsls	r3, r3, #1
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b0e:	e002      	b.n	8006b16 <HAL_ADC_ConfigChannel+0x76e>
          {
            wait_loop_index--;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f9      	bne.n	8006b10 <HAL_ADC_ConfigChannel+0x768>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b1c:	e054      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a35      	ldr	r2, [pc, #212]	@ (8006bf8 <HAL_ADC_ConfigChannel+0x850>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d120      	bne.n	8006b6a <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b28:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d11a      	bne.n	8006b6a <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b3c:	d144      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b46:	d004      	beq.n	8006b52 <HAL_ADC_ConfigChannel+0x7aa>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a26      	ldr	r2, [pc, #152]	@ (8006be8 <HAL_ADC_ConfigChannel+0x840>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d101      	bne.n	8006b56 <HAL_ADC_ConfigChannel+0x7ae>
 8006b52:	4a26      	ldr	r2, [pc, #152]	@ (8006bec <HAL_ADC_ConfigChannel+0x844>)
 8006b54:	e000      	b.n	8006b58 <HAL_ADC_ConfigChannel+0x7b0>
 8006b56:	4a21      	ldr	r2, [pc, #132]	@ (8006bdc <HAL_ADC_ConfigChannel+0x834>)
 8006b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b5c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006b60:	4619      	mov	r1, r3
 8006b62:	4610      	mov	r0, r2
 8006b64:	f7fe fd19 	bl	800559a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b68:	e02e      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a23      	ldr	r2, [pc, #140]	@ (8006bfc <HAL_ADC_ConfigChannel+0x854>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d129      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006b78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d123      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a18      	ldr	r2, [pc, #96]	@ (8006be8 <HAL_ADC_ConfigChannel+0x840>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d01e      	beq.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b92:	d004      	beq.n	8006b9e <HAL_ADC_ConfigChannel+0x7f6>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a13      	ldr	r2, [pc, #76]	@ (8006be8 <HAL_ADC_ConfigChannel+0x840>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d101      	bne.n	8006ba2 <HAL_ADC_ConfigChannel+0x7fa>
 8006b9e:	4a13      	ldr	r2, [pc, #76]	@ (8006bec <HAL_ADC_ConfigChannel+0x844>)
 8006ba0:	e000      	b.n	8006ba4 <HAL_ADC_ConfigChannel+0x7fc>
 8006ba2:	4a0e      	ldr	r2, [pc, #56]	@ (8006bdc <HAL_ADC_ConfigChannel+0x834>)
 8006ba4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006ba8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bac:	4619      	mov	r1, r3
 8006bae:	4610      	mov	r0, r2
 8006bb0:	f7fe fcf3 	bl	800559a <LL_ADC_SetCommonPathInternalCh>
 8006bb4:	e008      	b.n	8006bc8 <HAL_ADC_ConfigChannel+0x820>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bba:	f043 0220 	orr.w	r2, r3, #32
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8006bd0:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	37d8      	adds	r7, #216	@ 0xd8
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	50000700 	.word	0x50000700
 8006be0:	c3210000 	.word	0xc3210000
 8006be4:	90c00010 	.word	0x90c00010
 8006be8:	50000100 	.word	0x50000100
 8006bec:	50000300 	.word	0x50000300
 8006bf0:	200000bc 	.word	0x200000bc
 8006bf4:	053e2d63 	.word	0x053e2d63
 8006bf8:	c7520000 	.word	0xc7520000
 8006bfc:	cb840000 	.word	0xcb840000

08006c00 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7fe fea1 	bl	8005958 <LL_ADC_IsEnabled>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d176      	bne.n	8006d0a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	4b3c      	ldr	r3, [pc, #240]	@ (8006d14 <ADC_Enable+0x114>)
 8006c24:	4013      	ands	r3, r2
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00d      	beq.n	8006c46 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2e:	f043 0210 	orr.w	r2, r3, #16
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c3a:	f043 0201 	orr.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e062      	b.n	8006d0c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f7fe fe70 	bl	8005930 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c58:	d004      	beq.n	8006c64 <ADC_Enable+0x64>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a2e      	ldr	r2, [pc, #184]	@ (8006d18 <ADC_Enable+0x118>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d101      	bne.n	8006c68 <ADC_Enable+0x68>
 8006c64:	4b2d      	ldr	r3, [pc, #180]	@ (8006d1c <ADC_Enable+0x11c>)
 8006c66:	e000      	b.n	8006c6a <ADC_Enable+0x6a>
 8006c68:	4b2d      	ldr	r3, [pc, #180]	@ (8006d20 <ADC_Enable+0x120>)
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fca8 	bl	80055c0 <LL_ADC_GetCommonPathInternalCh>
 8006c70:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8006c72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d013      	beq.n	8006ca2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8006d24 <ADC_Enable+0x124>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	099b      	lsrs	r3, r3, #6
 8006c80:	4a29      	ldr	r2, [pc, #164]	@ (8006d28 <ADC_Enable+0x128>)
 8006c82:	fba2 2303 	umull	r2, r3, r2, r3
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	4613      	mov	r3, r2
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006c94:	e002      	b.n	8006c9c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3b01      	subs	r3, #1
 8006c9a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f9      	bne.n	8006c96 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006ca2:	f7fe fc39 	bl	8005518 <HAL_GetTick>
 8006ca6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006ca8:	e028      	b.n	8006cfc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fe52 	bl	8005958 <LL_ADC_IsEnabled>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d104      	bne.n	8006cc4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f7fe fe36 	bl	8005930 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006cc4:	f7fe fc28 	bl	8005518 <HAL_GetTick>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	2b02      	cmp	r3, #2
 8006cd0:	d914      	bls.n	8006cfc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d00d      	beq.n	8006cfc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce4:	f043 0210 	orr.w	r2, r3, #16
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	e007      	b.n	8006d0c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d1cf      	bne.n	8006caa <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3710      	adds	r7, #16
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}
 8006d14:	8000003f 	.word	0x8000003f
 8006d18:	50000100 	.word	0x50000100
 8006d1c:	50000300 	.word	0x50000300
 8006d20:	50000700 	.word	0x50000700
 8006d24:	200000bc 	.word	0x200000bc
 8006d28:	053e2d63 	.word	0x053e2d63

08006d2c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d38:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d14b      	bne.n	8006dde <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d4a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f003 0308 	and.w	r3, r3, #8
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d021      	beq.n	8006da4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fcd7 	bl	8005718 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d032      	beq.n	8006dd6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d12b      	bne.n	8006dd6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d82:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d11f      	bne.n	8006dd6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	f043 0201 	orr.w	r2, r3, #1
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006da2:	e018      	b.n	8006dd6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	68db      	ldr	r3, [r3, #12]
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d111      	bne.n	8006dd6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006db6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d105      	bne.n	8006dd6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006dce:	f043 0201 	orr.w	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fabe 	bl	8006358 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006ddc:	e00e      	b.n	8006dfc <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006de2:	f003 0310 	and.w	r3, r3, #16
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d003      	beq.n	8006df2 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fad2 	bl	8006394 <HAL_ADC_ErrorCallback>
}
 8006df0:	e004      	b.n	8006dfc <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006df6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	4798      	blx	r3
}
 8006dfc:	bf00      	nop
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff faaa 	bl	800636c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e18:	bf00      	nop
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e2c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e32:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e3e:	f043 0204 	orr.w	r2, r3, #4
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f7ff faa4 	bl	8006394 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e4c:	bf00      	nop
 8006e4e:	3710      	adds	r7, #16
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <LL_ADC_IsEnabled>:
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	689b      	ldr	r3, [r3, #8]
 8006e60:	f003 0301 	and.w	r3, r3, #1
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <LL_ADC_IsEnabled+0x18>
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e000      	b.n	8006e6e <LL_ADC_IsEnabled+0x1a>
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	370c      	adds	r7, #12
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr

08006e7a <LL_ADC_REG_IsConversionOngoing>:
{
 8006e7a:	b480      	push	{r7}
 8006e7c:	b083      	sub	sp, #12
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d101      	bne.n	8006e92 <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e92:	2300      	movs	r3, #0
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	370c      	adds	r7, #12
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b083      	sub	sp, #12
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8006ea8:	bf00      	nop
 8006eaa:	370c      	adds	r7, #12
 8006eac:	46bd      	mov	sp, r7
 8006eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb2:	4770      	bx	lr

08006eb4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b083      	sub	sp, #12
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8006ebc:	bf00      	nop
 8006ebe:	370c      	adds	r7, #12
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec6:	4770      	bx	lr

08006ec8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8006f04:	b590      	push	{r4, r7, lr}
 8006f06:	b0a1      	sub	sp, #132	@ 0x84
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0cb      	b.n	80070ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006f2e:	2300      	movs	r3, #0
 8006f30:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f3a:	d102      	bne.n	8006f42 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f3c:	4b61      	ldr	r3, [pc, #388]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	e001      	b.n	8006f46 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d10b      	bne.n	8006f64 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006f50:	f043 0220 	orr.w	r2, r3, #32
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8006f60:	2301      	movs	r3, #1
 8006f62:	e0aa      	b.n	80070ba <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7ff ff87 	bl	8006e7a <LL_ADC_REG_IsConversionOngoing>
 8006f6c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff81 	bl	8006e7a <LL_ADC_REG_IsConversionOngoing>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f040 808c 	bne.w	8007098 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8006f80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	f040 8088 	bne.w	8007098 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006f90:	d004      	beq.n	8006f9c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a4b      	ldr	r2, [pc, #300]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d101      	bne.n	8006fa0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8006f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80070c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>)
 8006f9e:	e000      	b.n	8006fa2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8006fa0:	4b4a      	ldr	r3, [pc, #296]	@ (80070cc <HAL_ADCEx_MultiModeConfigChannel+0x1c8>)
 8006fa2:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d041      	beq.n	8007030 <HAL_ADCEx_MultiModeConfigChannel+0x12c>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006fac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	6859      	ldr	r1, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006fbe:	035b      	lsls	r3, r3, #13
 8006fc0:	430b      	orrs	r3, r1
 8006fc2:	431a      	orrs	r2, r3
 8006fc4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006fc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006fd0:	d004      	beq.n	8006fdc <HAL_ADCEx_MultiModeConfigChannel+0xd8>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d10f      	bne.n	8006ffc <HAL_ADCEx_MultiModeConfigChannel+0xf8>
 8006fdc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8006fe0:	f7ff ff38 	bl	8006e54 <LL_ADC_IsEnabled>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4837      	ldr	r0, [pc, #220]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8006fe8:	f7ff ff34 	bl	8006e54 <LL_ADC_IsEnabled>
 8006fec:	4603      	mov	r3, r0
 8006fee:	4323      	orrs	r3, r4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	bf0c      	ite	eq
 8006ff4:	2301      	moveq	r3, #1
 8006ff6:	2300      	movne	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e008      	b.n	800700e <HAL_ADCEx_MultiModeConfigChannel+0x10a>
 8006ffc:	4834      	ldr	r0, [pc, #208]	@ (80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8006ffe:	f7ff ff29 	bl	8006e54 <LL_ADC_IsEnabled>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d04c      	beq.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8007012:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800701a:	f023 030f 	bic.w	r3, r3, #15
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	6811      	ldr	r1, [r2, #0]
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	6892      	ldr	r2, [r2, #8]
 8007026:	430a      	orrs	r2, r1
 8007028:	431a      	orrs	r2, r3
 800702a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800702c:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800702e:	e03d      	b.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8007030:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007038:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800703a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007044:	d004      	beq.n	8007050 <HAL_ADCEx_MultiModeConfigChannel+0x14c>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a1e      	ldr	r2, [pc, #120]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d10f      	bne.n	8007070 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
 8007050:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8007054:	f7ff fefe 	bl	8006e54 <LL_ADC_IsEnabled>
 8007058:	4604      	mov	r4, r0
 800705a:	481a      	ldr	r0, [pc, #104]	@ (80070c4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 800705c:	f7ff fefa 	bl	8006e54 <LL_ADC_IsEnabled>
 8007060:	4603      	mov	r3, r0
 8007062:	4323      	orrs	r3, r4
 8007064:	2b00      	cmp	r3, #0
 8007066:	bf0c      	ite	eq
 8007068:	2301      	moveq	r3, #1
 800706a:	2300      	movne	r3, #0
 800706c:	b2db      	uxtb	r3, r3
 800706e:	e008      	b.n	8007082 <HAL_ADCEx_MultiModeConfigChannel+0x17e>
 8007070:	4817      	ldr	r0, [pc, #92]	@ (80070d0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>)
 8007072:	f7ff feef 	bl	8006e54 <LL_ADC_IsEnabled>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	bf0c      	ite	eq
 800707c:	2301      	moveq	r3, #1
 800707e:	2300      	movne	r3, #0
 8007080:	b2db      	uxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	d012      	beq.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007086:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800708e:	f023 030f 	bic.w	r3, r3, #15
 8007092:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007094:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8007096:	e009      	b.n	80070ac <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709c:	f043 0220 	orr.w	r2, r3, #32
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80070aa:	e000      	b.n	80070ae <HAL_ADCEx_MultiModeConfigChannel+0x1aa>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80070ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80070b6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80070ba:	4618      	mov	r0, r3
 80070bc:	3784      	adds	r7, #132	@ 0x84
 80070be:	46bd      	mov	sp, r7
 80070c0:	bd90      	pop	{r4, r7, pc}
 80070c2:	bf00      	nop
 80070c4:	50000100 	.word	0x50000100
 80070c8:	50000300 	.word	0x50000300
 80070cc:	50000700 	.word	0x50000700
 80070d0:	50000400 	.word	0x50000400

080070d4 <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d101      	bne.n	80070e6 <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e023      	b.n	800712e <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7fd feba 	bl	8004e74 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2200      	movs	r2, #0
 8007110:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Return function status */
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
	...

08007138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007148:	4b0c      	ldr	r3, [pc, #48]	@ (800717c <__NVIC_SetPriorityGrouping+0x44>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007154:	4013      	ands	r3, r2
 8007156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007160:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007164:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800716a:	4a04      	ldr	r2, [pc, #16]	@ (800717c <__NVIC_SetPriorityGrouping+0x44>)
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	60d3      	str	r3, [r2, #12]
}
 8007170:	bf00      	nop
 8007172:	3714      	adds	r7, #20
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr
 800717c:	e000ed00 	.word	0xe000ed00

08007180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007180:	b480      	push	{r7}
 8007182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007184:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <__NVIC_GetPriorityGrouping+0x18>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	0a1b      	lsrs	r3, r3, #8
 800718a:	f003 0307 	and.w	r3, r3, #7
}
 800718e:	4618      	mov	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	e000ed00 	.word	0xe000ed00

0800719c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	db0b      	blt.n	80071c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071ae:	79fb      	ldrb	r3, [r7, #7]
 80071b0:	f003 021f 	and.w	r2, r3, #31
 80071b4:	4907      	ldr	r1, [pc, #28]	@ (80071d4 <__NVIC_EnableIRQ+0x38>)
 80071b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071ba:	095b      	lsrs	r3, r3, #5
 80071bc:	2001      	movs	r0, #1
 80071be:	fa00 f202 	lsl.w	r2, r0, r2
 80071c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80071c6:	bf00      	nop
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	e000e100 	.word	0xe000e100

080071d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	4603      	mov	r3, r0
 80071e0:	6039      	str	r1, [r7, #0]
 80071e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80071e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	db0a      	blt.n	8007202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	b2da      	uxtb	r2, r3
 80071f0:	490c      	ldr	r1, [pc, #48]	@ (8007224 <__NVIC_SetPriority+0x4c>)
 80071f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80071f6:	0112      	lsls	r2, r2, #4
 80071f8:	b2d2      	uxtb	r2, r2
 80071fa:	440b      	add	r3, r1
 80071fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007200:	e00a      	b.n	8007218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	4908      	ldr	r1, [pc, #32]	@ (8007228 <__NVIC_SetPriority+0x50>)
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	3b04      	subs	r3, #4
 8007210:	0112      	lsls	r2, r2, #4
 8007212:	b2d2      	uxtb	r2, r2
 8007214:	440b      	add	r3, r1
 8007216:	761a      	strb	r2, [r3, #24]
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	e000e100 	.word	0xe000e100
 8007228:	e000ed00 	.word	0xe000ed00

0800722c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f1c3 0307 	rsb	r3, r3, #7
 8007246:	2b04      	cmp	r3, #4
 8007248:	bf28      	it	cs
 800724a:	2304      	movcs	r3, #4
 800724c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	3304      	adds	r3, #4
 8007252:	2b06      	cmp	r3, #6
 8007254:	d902      	bls.n	800725c <NVIC_EncodePriority+0x30>
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	3b03      	subs	r3, #3
 800725a:	e000      	b.n	800725e <NVIC_EncodePriority+0x32>
 800725c:	2300      	movs	r3, #0
 800725e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007260:	f04f 32ff 	mov.w	r2, #4294967295
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	fa02 f303 	lsl.w	r3, r2, r3
 800726a:	43da      	mvns	r2, r3
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	401a      	ands	r2, r3
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007274:	f04f 31ff 	mov.w	r1, #4294967295
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	fa01 f303 	lsl.w	r3, r1, r3
 800727e:	43d9      	mvns	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007284:	4313      	orrs	r3, r2
         );
}
 8007286:	4618      	mov	r0, r3
 8007288:	3724      	adds	r7, #36	@ 0x24
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
	...

08007294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	3b01      	subs	r3, #1
 80072a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80072a4:	d301      	bcc.n	80072aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072a6:	2301      	movs	r3, #1
 80072a8:	e00f      	b.n	80072ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072aa:	4a0a      	ldr	r2, [pc, #40]	@ (80072d4 <SysTick_Config+0x40>)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072b2:	210f      	movs	r1, #15
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295
 80072b8:	f7ff ff8e 	bl	80071d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <SysTick_Config+0x40>)
 80072be:	2200      	movs	r2, #0
 80072c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80072c2:	4b04      	ldr	r3, [pc, #16]	@ (80072d4 <SysTick_Config+0x40>)
 80072c4:	2207      	movs	r2, #7
 80072c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3708      	adds	r7, #8
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	e000e010 	.word	0xe000e010

080072d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f7ff ff29 	bl	8007138 <__NVIC_SetPriorityGrouping>
}
 80072e6:	bf00      	nop
 80072e8:	3708      	adds	r7, #8
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	4603      	mov	r3, r0
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80072fc:	f7ff ff40 	bl	8007180 <__NVIC_GetPriorityGrouping>
 8007300:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007302:	687a      	ldr	r2, [r7, #4]
 8007304:	68b9      	ldr	r1, [r7, #8]
 8007306:	6978      	ldr	r0, [r7, #20]
 8007308:	f7ff ff90 	bl	800722c <NVIC_EncodePriority>
 800730c:	4602      	mov	r2, r0
 800730e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007312:	4611      	mov	r1, r2
 8007314:	4618      	mov	r0, r3
 8007316:	f7ff ff5f 	bl	80071d8 <__NVIC_SetPriority>
}
 800731a:	bf00      	nop
 800731c:	3718      	adds	r7, #24
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	4603      	mov	r3, r0
 800732a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800732c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007330:	4618      	mov	r0, r3
 8007332:	f7ff ff33 	bl	800719c <__NVIC_EnableIRQ>
}
 8007336:	bf00      	nop
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b082      	sub	sp, #8
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f7ff ffa4 	bl	8007294 <SysTick_Config>
 800734c:	4603      	mov	r3, r0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d101      	bne.n	800736a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e054      	b.n	8007414 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7f5b      	ldrb	r3, [r3, #29]
 800736e:	b2db      	uxtb	r3, r3
 8007370:	2b00      	cmp	r3, #0
 8007372:	d105      	bne.n	8007380 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fd fd9a 	bl	8004eb4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2202      	movs	r2, #2
 8007384:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	791b      	ldrb	r3, [r3, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d10c      	bne.n	80073a8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a22      	ldr	r2, [pc, #136]	@ (800741c <HAL_CRC_Init+0xc4>)
 8007394:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0218 	bic.w	r2, r2, #24
 80073a4:	609a      	str	r2, [r3, #8]
 80073a6:	e00c      	b.n	80073c2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6899      	ldr	r1, [r3, #8]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	461a      	mov	r2, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f834 	bl	8007420 <HAL_CRCEx_Polynomial_Set>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d001      	beq.n	80073c2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e028      	b.n	8007414 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	795b      	ldrb	r3, [r3, #5]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d105      	bne.n	80073d6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f04f 32ff 	mov.w	r2, #4294967295
 80073d2:	611a      	str	r2, [r3, #16]
 80073d4:	e004      	b.n	80073e0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	6912      	ldr	r2, [r2, #16]
 80073de:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	f023 0160 	bic.w	r1, r3, #96	@ 0x60
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	430a      	orrs	r2, r1
 80073f4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f023 0180 	bic.w	r1, r3, #128	@ 0x80
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699a      	ldr	r2, [r3, #24]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	04c11db7 	.word	0x04c11db7

08007420 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800742c:	2300      	movs	r3, #0
 800742e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8007430:	231f      	movs	r3, #31
 8007432:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800743e:	2301      	movs	r3, #1
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e063      	b.n	800750c <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007444:	bf00      	nop
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1e5a      	subs	r2, r3, #1
 800744a:	613a      	str	r2, [r7, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d009      	beq.n	8007464 <HAL_CRCEx_Polynomial_Set+0x44>
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	68ba      	ldr	r2, [r7, #8]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
 800745c:	f003 0301 	and.w	r3, r3, #1
 8007460:	2b00      	cmp	r3, #0
 8007462:	d0f0      	beq.n	8007446 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b18      	cmp	r3, #24
 8007468:	d846      	bhi.n	80074f8 <HAL_CRCEx_Polynomial_Set+0xd8>
 800746a:	a201      	add	r2, pc, #4	@ (adr r2, 8007470 <HAL_CRCEx_Polynomial_Set+0x50>)
 800746c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007470:	080074ff 	.word	0x080074ff
 8007474:	080074f9 	.word	0x080074f9
 8007478:	080074f9 	.word	0x080074f9
 800747c:	080074f9 	.word	0x080074f9
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074f9 	.word	0x080074f9
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080074ed 	.word	0x080074ed
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074f9 	.word	0x080074f9
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074f9 	.word	0x080074f9
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074f9 	.word	0x080074f9
 80074b8:	080074f9 	.word	0x080074f9
 80074bc:	080074f9 	.word	0x080074f9
 80074c0:	080074f9 	.word	0x080074f9
 80074c4:	080074f9 	.word	0x080074f9
 80074c8:	080074f9 	.word	0x080074f9
 80074cc:	080074f9 	.word	0x080074f9
 80074d0:	080074d5 	.word	0x080074d5
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	2b06      	cmp	r3, #6
 80074d8:	d913      	bls.n	8007502 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80074de:	e010      	b.n	8007502 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	2b07      	cmp	r3, #7
 80074e4:	d90f      	bls.n	8007506 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80074e6:	2301      	movs	r3, #1
 80074e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80074ea:	e00c      	b.n	8007506 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	2b0f      	cmp	r3, #15
 80074f0:	d90b      	bls.n	800750a <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80074f6:	e008      	b.n	800750a <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
        break;
 80074fc:	e006      	b.n	800750c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80074fe:	bf00      	nop
 8007500:	e004      	b.n	800750c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007502:	bf00      	nop
 8007504:	e002      	b.n	800750c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8007506:	bf00      	nop
 8007508:	e000      	b.n	800750c <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 800750a:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 800750c:	7dfb      	ldrb	r3, [r7, #23]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	68ba      	ldr	r2, [r7, #8]
 8007518:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f023 0118 	bic.w	r1, r3, #24
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	687a      	ldr	r2, [r7, #4]
 800752a:	430a      	orrs	r2, r1
 800752c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007530:	4618      	mov	r0, r3
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e08d      	b.n	800766a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	4b47      	ldr	r3, [pc, #284]	@ (8007674 <HAL_DMA_Init+0x138>)
 8007556:	429a      	cmp	r2, r3
 8007558:	d80f      	bhi.n	800757a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	461a      	mov	r2, r3
 8007560:	4b45      	ldr	r3, [pc, #276]	@ (8007678 <HAL_DMA_Init+0x13c>)
 8007562:	4413      	add	r3, r2
 8007564:	4a45      	ldr	r2, [pc, #276]	@ (800767c <HAL_DMA_Init+0x140>)
 8007566:	fba2 2303 	umull	r2, r3, r2, r3
 800756a:	091b      	lsrs	r3, r3, #4
 800756c:	009a      	lsls	r2, r3, #2
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a42      	ldr	r2, [pc, #264]	@ (8007680 <HAL_DMA_Init+0x144>)
 8007576:	641a      	str	r2, [r3, #64]	@ 0x40
 8007578:	e00e      	b.n	8007598 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	4b40      	ldr	r3, [pc, #256]	@ (8007684 <HAL_DMA_Init+0x148>)
 8007582:	4413      	add	r3, r2
 8007584:	4a3d      	ldr	r2, [pc, #244]	@ (800767c <HAL_DMA_Init+0x140>)
 8007586:	fba2 2303 	umull	r2, r3, r2, r3
 800758a:	091b      	lsrs	r3, r3, #4
 800758c:	009a      	lsls	r2, r3, #2
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a3c      	ldr	r2, [pc, #240]	@ (8007688 <HAL_DMA_Init+0x14c>)
 8007596:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2202      	movs	r2, #2
 800759c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80075ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80075bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9b6 	bl	800795c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80075f8:	d102      	bne.n	8007600 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	2200      	movs	r2, #0
 80075fe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	685a      	ldr	r2, [r3, #4]
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007614:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d010      	beq.n	8007640 <HAL_DMA_Init+0x104>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b04      	cmp	r3, #4
 8007624:	d80c      	bhi.n	8007640 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f9d6 	bl	80079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	2200      	movs	r2, #0
 8007632:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007638:	687a      	ldr	r2, [r7, #4]
 800763a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800763c:	605a      	str	r2, [r3, #4]
 800763e:	e008      	b.n	8007652 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}
 8007672:	bf00      	nop
 8007674:	40020407 	.word	0x40020407
 8007678:	bffdfff8 	.word	0xbffdfff8
 800767c:	cccccccd 	.word	0xcccccccd
 8007680:	40020000 	.word	0x40020000
 8007684:	bffdfbf8 	.word	0xbffdfbf8
 8007688:	40020400 	.word	0x40020400

0800768c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b086      	sub	sp, #24
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]
 8007698:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800769a:	2300      	movs	r3, #0
 800769c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_DMA_Start_IT+0x20>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e066      	b.n	800777a <HAL_DMA_Start_IT+0xee>
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	2b01      	cmp	r3, #1
 80076be:	d155      	bne.n	800776c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	2202      	movs	r2, #2
 80076c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f022 0201 	bic.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	68b9      	ldr	r1, [r7, #8]
 80076e4:	68f8      	ldr	r0, [r7, #12]
 80076e6:	f000 f8fb 	bl	80078e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d008      	beq.n	8007704 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 020e 	orr.w	r2, r2, #14
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e00f      	b.n	8007724 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0204 	bic.w	r2, r2, #4
 8007712:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f042 020a 	orr.w	r2, r2, #10
 8007722:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d007      	beq.n	8007742 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800773c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007740:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007746:	2b00      	cmp	r3, #0
 8007748:	d007      	beq.n	800775a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007754:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007758:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	681a      	ldr	r2, [r3, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f042 0201 	orr.w	r2, r2, #1
 8007768:	601a      	str	r2, [r3, #0]
 800776a:	e005      	b.n	8007778 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007774:	2302      	movs	r3, #2
 8007776:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007778:	7dfb      	ldrb	r3, [r7, #23]
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2204      	movs	r2, #4
 80077a4:	409a      	lsls	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	4013      	ands	r3, r2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d026      	beq.n	80077fc <HAL_DMA_IRQHandler+0x7a>
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d021      	beq.n	80077fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 0320 	and.w	r3, r3, #32
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d107      	bne.n	80077d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f022 0204 	bic.w	r2, r2, #4
 80077d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077da:	f003 021f 	and.w	r2, r3, #31
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077e2:	2104      	movs	r1, #4
 80077e4:	fa01 f202 	lsl.w	r2, r1, r2
 80077e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d071      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80077fa:	e06c      	b.n	80078d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	2202      	movs	r2, #2
 8007806:	409a      	lsls	r2, r3
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4013      	ands	r3, r2
 800780c:	2b00      	cmp	r3, #0
 800780e:	d02e      	beq.n	800786e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d029      	beq.n	800786e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0320 	and.w	r3, r3, #32
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 020a 	bic.w	r2, r2, #10
 8007836:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007844:	f003 021f 	and.w	r2, r3, #31
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800784c:	2102      	movs	r1, #2
 800784e:	fa01 f202 	lsl.w	r2, r1, r2
 8007852:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	2b00      	cmp	r3, #0
 8007862:	d038      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800786c:	e033      	b.n	80078d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007872:	f003 031f 	and.w	r3, r3, #31
 8007876:	2208      	movs	r2, #8
 8007878:	409a      	lsls	r2, r3
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4013      	ands	r3, r2
 800787e:	2b00      	cmp	r3, #0
 8007880:	d02a      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	f003 0308 	and.w	r3, r3, #8
 8007888:	2b00      	cmp	r3, #0
 800788a:	d025      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f022 020e 	bic.w	r2, r2, #14
 800789a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80078a0:	f003 021f 	and.w	r2, r3, #31
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a8:	2101      	movs	r1, #1
 80078aa:	fa01 f202 	lsl.w	r2, r1, r2
 80078ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d004      	beq.n	80078d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80078d6:	bf00      	nop
 80078d8:	bf00      	nop
}
 80078da:	3710      	adds	r7, #16
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}

080078e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078f2:	68fa      	ldr	r2, [r7, #12]
 80078f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80078f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d004      	beq.n	800790a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007908:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800790e:	f003 021f 	and.w	r2, r3, #31
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007916:	2101      	movs	r1, #1
 8007918:	fa01 f202 	lsl.w	r2, r1, r2
 800791c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	689b      	ldr	r3, [r3, #8]
 800792a:	2b10      	cmp	r3, #16
 800792c:	d108      	bne.n	8007940 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800793e:	e007      	b.n	8007950 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	60da      	str	r2, [r3, #12]
}
 8007950:	bf00      	nop
 8007952:	3714      	adds	r7, #20
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	461a      	mov	r2, r3
 800796a:	4b16      	ldr	r3, [pc, #88]	@ (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800796c:	429a      	cmp	r2, r3
 800796e:	d802      	bhi.n	8007976 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007970:	4b15      	ldr	r3, [pc, #84]	@ (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007972:	617b      	str	r3, [r7, #20]
 8007974:	e001      	b.n	800797a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007976:	4b15      	ldr	r3, [pc, #84]	@ (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007978:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	b2db      	uxtb	r3, r3
 8007984:	3b08      	subs	r3, #8
 8007986:	4a12      	ldr	r2, [pc, #72]	@ (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007988:	fba2 2303 	umull	r2, r3, r2, r3
 800798c:	091b      	lsrs	r3, r3, #4
 800798e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007994:	089b      	lsrs	r3, r3, #2
 8007996:	009a      	lsls	r2, r3, #2
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	4413      	add	r3, r2
 800799c:	461a      	mov	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	4a0b      	ldr	r2, [pc, #44]	@ (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80079a6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	f003 031f 	and.w	r3, r3, #31
 80079ae:	2201      	movs	r2, #1
 80079b0:	409a      	lsls	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop
 80079c4:	40020407 	.word	0x40020407
 80079c8:	40020800 	.word	0x40020800
 80079cc:	40020820 	.word	0x40020820
 80079d0:	cccccccd 	.word	0xcccccccd
 80079d4:	40020880 	.word	0x40020880

080079d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80079e8:	68fa      	ldr	r2, [r7, #12]
 80079ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	461a      	mov	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a08      	ldr	r2, [pc, #32]	@ (8007a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80079fa:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	3b01      	subs	r3, #1
 8007a00:	f003 031f 	and.w	r3, r3, #31
 8007a04:	2201      	movs	r2, #1
 8007a06:	409a      	lsls	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	1000823f 	.word	0x1000823f
 8007a1c:	40020940 	.word	0x40020940

08007a20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e147      	b.n	8007cc2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d106      	bne.n	8007a4c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f7fd fa54 	bl	8004ef4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f022 0210 	bic.w	r2, r2, #16
 8007a5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007a5c:	f7fd fd5c 	bl	8005518 <HAL_GetTick>
 8007a60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a62:	e012      	b.n	8007a8a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007a64:	f7fd fd58 	bl	8005518 <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b0a      	cmp	r3, #10
 8007a70:	d90b      	bls.n	8007a8a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a76:	f043 0201 	orr.w	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2203      	movs	r2, #3
 8007a82:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e11b      	b.n	8007cc2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699b      	ldr	r3, [r3, #24]
 8007a90:	f003 0308 	and.w	r3, r3, #8
 8007a94:	2b08      	cmp	r3, #8
 8007a96:	d0e5      	beq.n	8007a64 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	699a      	ldr	r2, [r3, #24]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0201 	orr.w	r2, r2, #1
 8007aa6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007aa8:	f7fd fd36 	bl	8005518 <HAL_GetTick>
 8007aac:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007aae:	e012      	b.n	8007ad6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007ab0:	f7fd fd32 	bl	8005518 <HAL_GetTick>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	2b0a      	cmp	r3, #10
 8007abc:	d90b      	bls.n	8007ad6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ac2:	f043 0201 	orr.w	r2, r3, #1
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2203      	movs	r2, #3
 8007ace:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e0f5      	b.n	8007cc2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d0e5      	beq.n	8007ab0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	699a      	ldr	r2, [r3, #24]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0202 	orr.w	r2, r2, #2
 8007af2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a74      	ldr	r2, [pc, #464]	@ (8007ccc <HAL_FDCAN_Init+0x2ac>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d103      	bne.n	8007b06 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007afe:	4a74      	ldr	r2, [pc, #464]	@ (8007cd0 <HAL_FDCAN_Init+0x2b0>)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	7c1b      	ldrb	r3, [r3, #16]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d108      	bne.n	8007b20 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b1c:	619a      	str	r2, [r3, #24]
 8007b1e:	e007      	b.n	8007b30 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	699a      	ldr	r2, [r3, #24]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b2e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7c5b      	ldrb	r3, [r3, #17]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d108      	bne.n	8007b4a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	699a      	ldr	r2, [r3, #24]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007b46:	619a      	str	r2, [r3, #24]
 8007b48:	e007      	b.n	8007b5a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007b58:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	7c9b      	ldrb	r3, [r3, #18]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d108      	bne.n	8007b74 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	699a      	ldr	r2, [r3, #24]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007b70:	619a      	str	r2, [r3, #24]
 8007b72:	e007      	b.n	8007b84 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	699a      	ldr	r2, [r3, #24]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007b82:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	699b      	ldr	r3, [r3, #24]
 8007b8a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8007ba8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	691a      	ldr	r2, [r3, #16]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f022 0210 	bic.w	r2, r2, #16
 8007bb8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d108      	bne.n	8007bd4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	699a      	ldr	r2, [r3, #24]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f042 0204 	orr.w	r2, r2, #4
 8007bd0:	619a      	str	r2, [r3, #24]
 8007bd2:	e02c      	b.n	8007c2e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d028      	beq.n	8007c2e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d01c      	beq.n	8007c1e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	699a      	ldr	r2, [r3, #24]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007bf2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691a      	ldr	r2, [r3, #16]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f042 0210 	orr.w	r2, r2, #16
 8007c02:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	2b03      	cmp	r3, #3
 8007c0a:	d110      	bne.n	8007c2e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0220 	orr.w	r2, r2, #32
 8007c1a:	619a      	str	r2, [r3, #24]
 8007c1c:	e007      	b.n	8007c2e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	699a      	ldr	r2, [r3, #24]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0220 	orr.w	r2, r2, #32
 8007c2c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	3b01      	subs	r3, #1
 8007c34:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c3e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007c46:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007c56:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007c58:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c62:	d115      	bne.n	8007c90 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c68:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c6e:	3b01      	subs	r3, #1
 8007c70:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c72:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c78:	3b01      	subs	r3, #1
 8007c7a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007c7c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c84:	3b01      	subs	r3, #1
 8007c86:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007c8c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007c8e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fc12 	bl	80084d0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	3710      	adds	r7, #16
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	40006400 	.word	0x40006400
 8007cd0:	40006500 	.word	0x40006500

08007cd4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ce4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d002      	beq.n	8007cf2 <HAL_FDCAN_ConfigFilter+0x1e>
 8007cec:	7dfb      	ldrb	r3, [r7, #23]
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d13d      	bne.n	8007d6e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d119      	bne.n	8007d2e <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d06:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007d0e:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	601a      	str	r2, [r3, #0]
 8007d2c:	e01d      	b.n	8007d6a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007d2e:	683b      	ldr	r3, [r7, #0]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	075a      	lsls	r2, r3, #29
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	4313      	orrs	r3, r2
 8007d3a:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	079a      	lsls	r2, r3, #30
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	693a      	ldr	r2, [r7, #16]
 8007d5c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	3304      	adds	r3, #4
 8007d62:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e006      	b.n	8007d7c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007d72:	f043 0202 	orr.w	r2, r3, #2
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
  }
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007d96:	b2db      	uxtb	r3, r3
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d110      	bne.n	8007dbe <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2202      	movs	r2, #2
 8007da0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	699a      	ldr	r2, [r3, #24]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0201 	bic.w	r2, r2, #1
 8007db2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	e006      	b.n	8007dcc <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007dc2:	f043 0204 	orr.w	r2, r3, #4
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
  }
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b08b      	sub	sp, #44	@ 0x2c
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	60f8      	str	r0, [r7, #12]
 8007de0:	60b9      	str	r1, [r7, #8]
 8007de2:	607a      	str	r2, [r7, #4]
 8007de4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007df0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007df2:	7efb      	ldrb	r3, [r7, #27]
 8007df4:	2b02      	cmp	r3, #2
 8007df6:	f040 80e8 	bne.w	8007fca <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	2b40      	cmp	r3, #64	@ 0x40
 8007dfe:	d137      	bne.n	8007e70 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e08:	f003 030f 	and.w	r3, r3, #15
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d107      	bne.n	8007e20 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e0db      	b.n	8007fd8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e28:	0e1b      	lsrs	r3, r3, #24
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d10a      	bne.n	8007e48 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007e3a:	0a5b      	lsrs	r3, r3, #9
 8007e3c:	f003 0301 	and.w	r3, r3, #1
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d101      	bne.n	8007e48 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007e44:	2301      	movs	r3, #1
 8007e46:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e50:	0a1b      	lsrs	r3, r3, #8
 8007e52:	f003 0303 	and.w	r3, r3, #3
 8007e56:	69fa      	ldr	r2, [r7, #28]
 8007e58:	4413      	add	r3, r2
 8007e5a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8007e60:	69fa      	ldr	r2, [r7, #28]
 8007e62:	4613      	mov	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	4413      	add	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	440b      	add	r3, r1
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e6e:	e036      	b.n	8007ede <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d107      	bne.n	8007e90 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007e84:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e0a3      	b.n	8007fd8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007e98:	0e1b      	lsrs	r3, r3, #24
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d10a      	bne.n	8007eb8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b01      	cmp	r3, #1
 8007eb2:	d101      	bne.n	8007eb8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007ec0:	0a1b      	lsrs	r3, r3, #8
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	69fa      	ldr	r2, [r7, #28]
 8007ec8:	4413      	add	r3, r2
 8007eca:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8007ed0:	69fa      	ldr	r2, [r7, #28]
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	00db      	lsls	r3, r3, #3
 8007ed6:	4413      	add	r3, r2
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	440b      	add	r3, r1
 8007edc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	0c9b      	lsrs	r3, r3, #18
 8007ef8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	601a      	str	r2, [r3, #0]
 8007f00:	e005      	b.n	8007f0e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f28:	3304      	adds	r3, #4
 8007f2a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	b29a      	uxth	r2, r3
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	0c1b      	lsrs	r3, r3, #16
 8007f3c:	f003 020f 	and.w	r2, r3, #15
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	0e1b      	lsrs	r3, r3, #24
 8007f62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	0fda      	lsrs	r2, r3, #31
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f76:	3304      	adds	r3, #4
 8007f78:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007f7e:	2300      	movs	r3, #0
 8007f80:	623b      	str	r3, [r7, #32]
 8007f82:	e00a      	b.n	8007f9a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	6a3b      	ldr	r3, [r7, #32]
 8007f88:	441a      	add	r2, r3
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	440b      	add	r3, r1
 8007f90:	7812      	ldrb	r2, [r2, #0]
 8007f92:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007f94:	6a3b      	ldr	r3, [r7, #32]
 8007f96:	3301      	adds	r3, #1
 8007f98:	623b      	str	r3, [r7, #32]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	4a11      	ldr	r2, [pc, #68]	@ (8007fe4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8007fa0:	5cd3      	ldrb	r3, [r2, r3]
 8007fa2:	461a      	mov	r2, r3
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d3ec      	bcc.n	8007f84 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007faa:	68bb      	ldr	r3, [r7, #8]
 8007fac:	2b40      	cmp	r3, #64	@ 0x40
 8007fae:	d105      	bne.n	8007fbc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	69fa      	ldr	r2, [r7, #28]
 8007fb6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 8007fba:	e004      	b.n	8007fc6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	69fa      	ldr	r2, [r7, #28]
 8007fc2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	e006      	b.n	8007fd8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007fce:	f043 0208 	orr.w	r2, r3, #8
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8007fd6:	2301      	movs	r3, #1
  }
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	372c      	adds	r7, #44	@ 0x2c
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	0800dc80 	.word	0x0800dc80

08007fe8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b087      	sub	sp, #28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007ffa:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d003      	beq.n	800800a <HAL_FDCAN_ActivateNotification+0x22>
 8008002:	7dfb      	ldrb	r3, [r7, #23]
 8008004:	2b02      	cmp	r3, #2
 8008006:	f040 80c8 	bne.w	800819a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008010:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f003 0307 	and.w	r3, r3, #7
 8008018:	2b00      	cmp	r3, #0
 800801a:	d004      	beq.n	8008026 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d03b      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800802c:	2b00      	cmp	r3, #0
 800802e:	d004      	beq.n	800803a <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	d031      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8008040:	2b00      	cmp	r3, #0
 8008042:	d004      	beq.n	800804e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	f003 0304 	and.w	r3, r3, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	d027      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8008054:	2b00      	cmp	r3, #0
 8008056:	d004      	beq.n	8008062 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f003 0308 	and.w	r3, r3, #8
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01d      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8008068:	2b00      	cmp	r3, #0
 800806a:	d004      	beq.n	8008076 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	d013      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800807c:	2b00      	cmp	r3, #0
 800807e:	d004      	beq.n	800808a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	f003 0320 	and.w	r3, r3, #32
 8008086:	2b00      	cmp	r3, #0
 8008088:	d009      	beq.n	800809e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00c      	beq.n	80080ae <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d107      	bne.n	80080ae <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f042 0201 	orr.w	r2, r2, #1
 80080ac:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d004      	beq.n	80080c2 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d13b      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d004      	beq.n	80080d6 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	f003 0302 	and.w	r3, r3, #2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d131      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	f003 0304 	and.w	r3, r3, #4
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d127      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d004      	beq.n	80080fe <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d11d      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8008104:	2b00      	cmp	r3, #0
 8008106:	d004      	beq.n	8008112 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f003 0310 	and.w	r3, r3, #16
 800810e:	2b00      	cmp	r3, #0
 8008110:	d113      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8008118:	2b00      	cmp	r3, #0
 800811a:	d004      	beq.n	8008126 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	f003 0320 	and.w	r3, r3, #32
 8008122:	2b00      	cmp	r3, #0
 8008124:	d109      	bne.n	800813a <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00c      	beq.n	800814a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008136:	2b00      	cmp	r3, #0
 8008138:	d007      	beq.n	800814a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f042 0202 	orr.w	r2, r2, #2
 8008148:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008150:	2b00      	cmp	r3, #0
 8008152:	d009      	beq.n	8008168 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	430a      	orrs	r2, r1
 8008164:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800816e:	2b00      	cmp	r3, #0
 8008170:	d009      	beq.n	8008186 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	430a      	orrs	r2, r1
 8008182:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68ba      	ldr	r2, [r7, #8]
 8008192:	430a      	orrs	r2, r1
 8008194:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8008196:	2300      	movs	r3, #0
 8008198:	e006      	b.n	80081a8 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800819e:	f043 0202 	orr.w	r2, r3, #2
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	371c      	adds	r7, #28
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b08c      	sub	sp, #48	@ 0x30
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081c2:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 80081c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d0:	4013      	ands	r3, r2
 80081d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80081e8:	4013      	ands	r3, r2
 80081ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081f6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008200:	4013      	ands	r3, r2
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800820a:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 800820e:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	4013      	ands	r3, r2
 800821a:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008222:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8008226:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800822e:	69fa      	ldr	r2, [r7, #28]
 8008230:	4013      	ands	r3, r2
 8008232:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800823a:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008242:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800824e:	69bb      	ldr	r3, [r7, #24]
 8008250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	2240      	movs	r2, #64	@ 0x40
 800825e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f000 f916 	bl	8008492 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800826c:	2b00      	cmp	r3, #0
 800826e:	d019      	beq.n	80082a4 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d014      	beq.n	80082a4 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8008282:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4013      	ands	r3, r2
 8008290:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800829a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800829c:	6939      	ldr	r1, [r7, #16]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f8d8 	bl	8008454 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80082a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d007      	beq.n	80082ba <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082b0:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80082b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 f8a2 	bl	80083fe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80082ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d007      	beq.n	80082d0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082c6:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80082c8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fb ff26 	bl	800411c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80082d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d007      	beq.n	80082e6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082dc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80082de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f000 f897 	bl	8008414 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00c      	beq.n	800830a <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80082f0:	69bb      	ldr	r3, [r7, #24]
 80082f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008302:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 f890 	bl	800842a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d018      	beq.n	8008346 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8008314:	69bb      	ldr	r3, [r7, #24]
 8008316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d013      	beq.n	8008346 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008326:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	4013      	ands	r3, r2
 8008334:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2280      	movs	r2, #128	@ 0x80
 800833c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800833e:	68f9      	ldr	r1, [r7, #12]
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 f87c 	bl	800843e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8008346:	697b      	ldr	r3, [r7, #20]
 8008348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00c      	beq.n	800836a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8008350:	69bb      	ldr	r3, [r7, #24]
 8008352:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008356:	2b00      	cmp	r3, #0
 8008358:	d007      	beq.n	800836a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008362:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f880 	bl	800846a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008370:	2b00      	cmp	r3, #0
 8008372:	d00c      	beq.n	800838e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8008374:	69bb      	ldr	r3, [r7, #24]
 8008376:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d007      	beq.n	800838e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008386:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f878 	bl	800847e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00f      	beq.n	80083b8 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8008398:	69bb      	ldr	r3, [r7, #24]
 800839a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80083aa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083b0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	69fa      	ldr	r2, [r7, #28]
 80083c4:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80083c6:	69f9      	ldr	r1, [r7, #28]
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f876 	bl	80084ba <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80083ce:	6a3b      	ldr	r3, [r7, #32]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d009      	beq.n	80083e8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80083e0:	6a3b      	ldr	r3, [r7, #32]
 80083e2:	431a      	orrs	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d002      	beq.n	80083f6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f000 f858 	bl	80084a6 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80083f6:	bf00      	nop
 80083f8:	3730      	adds	r7, #48	@ 0x30
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80083fe:	b480      	push	{r7}
 8008400:	b083      	sub	sp, #12
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr

0800842a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800842a:	b480      	push	{r7}
 800842c:	b083      	sub	sp, #12
 800842e:	af00      	add	r7, sp, #0
 8008430:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8008432:	bf00      	nop
 8008434:	370c      	adds	r7, #12
 8008436:	46bd      	mov	sp, r7
 8008438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843c:	4770      	bx	lr

0800843e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
 8008446:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800845e:	bf00      	nop
 8008460:	370c      	adds	r7, #12
 8008462:	46bd      	mov	sp, r7
 8008464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008468:	4770      	bx	lr

0800846a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800846a:	b480      	push	{r7}
 800846c:	b083      	sub	sp, #12
 800846e:	af00      	add	r7, sp, #0
 8008470:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8008472:	bf00      	nop
 8008474:	370c      	adds	r7, #12
 8008476:	46bd      	mov	sp, r7
 8008478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847c:	4770      	bx	lr

0800847e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800847e:	b480      	push	{r7}
 8008480:	b083      	sub	sp, #12
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008486:	bf00      	nop
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008492:	b480      	push	{r7}
 8008494:	b083      	sub	sp, #12
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800849a:	bf00      	nop
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80084ae:	bf00      	nop
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80084c4:	bf00      	nop
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr

080084d0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b085      	sub	sp, #20
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80084d8:	4b2c      	ldr	r3, [pc, #176]	@ (800858c <FDCAN_CalcultateRamBlockAddresses+0xbc>)
 80084da:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a2b      	ldr	r2, [pc, #172]	@ (8008590 <FDCAN_CalcultateRamBlockAddresses+0xc0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d103      	bne.n	80084ee <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80084ec:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80084fc:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	041a      	lsls	r2, r3, #16
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	430a      	orrs	r2, r1
 800850c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008522:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800852a:	061a      	lsls	r2, r3, #24
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	60fb      	str	r3, [r7, #12]
 8008562:	e005      	b.n	8008570 <FDCAN_CalcultateRamBlockAddresses+0xa0>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3304      	adds	r3, #4
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	429a      	cmp	r2, r3
 800857a:	d3f3      	bcc.n	8008564 <FDCAN_CalcultateRamBlockAddresses+0x94>
  }
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	4000a400 	.word	0x4000a400
 8008590:	40006800 	.word	0x40006800

08008594 <HAL_FMAC_Init>:
  * @brief  Initialize the FMAC peripheral and the associated handle.
  * @param  hfmac pointer to a FMAC_HandleTypeDef structure.
  * @retval HAL_StatusTypeDef HAL status
  */
HAL_StatusTypeDef HAL_FMAC_Init(FMAC_HandleTypeDef *hfmac)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the FMAC handle allocation */
  if (hfmac == NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d101      	bne.n	80085a6 <HAL_FMAC_Init+0x12>
  {
    return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e033      	b.n	800860e <HAL_FMAC_Init+0x7a>
  }

  /* Check the instance */
  assert_param(IS_FMAC_ALL_INSTANCE(hfmac->Instance));

  if (hfmac->State == HAL_FMAC_STATE_RESET)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d106      	bne.n	80085c0 <HAL_FMAC_Init+0x2c>
  {
    /* Initialize lock resource */
    hfmac->Lock = HAL_UNLOCKED;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Init the low level hardware */
    hfmac->MspInitCallback(hfmac);
#else
    /* Init the low level hardware */
    HAL_FMAC_MspInit(hfmac);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7fc fcfc 	bl	8004fb8 <HAL_FMAC_MspInit>
#endif /* USE_HAL_FMAC_REGISTER_CALLBACKS */
  }

  /* Reset pInput and pOutput */
  hfmac->FilterParam = 0U;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	605a      	str	r2, [r3, #4]
  FMAC_ResetDataPointers(hfmac);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 f854 	bl	8008674 <FMAC_ResetDataPointers>

  /* Reset FMAC unit (internal pointers) */
  if (FMAC_Reset(hfmac) == HAL_ERROR)
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f822 	bl	8008616 <FMAC_Reset>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d10c      	bne.n	80085f2 <HAL_FMAC_Init+0x5e>
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode |= HAL_FMAC_ERROR_RESET;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085dc:	f043 0210 	orr.w	r2, r3, #16
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_TIMEOUT;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	22a0      	movs	r2, #160	@ 0xa0
 80085e8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e008      	b.n	8008604 <HAL_FMAC_Init+0x70>
  }
  else
  {
    /* Update FMAC error code and FMAC peripheral state */
    hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2200      	movs	r2, #0
 80085f6:	635a      	str	r2, [r3, #52]	@ 0x34
    hfmac->State = HAL_FMAC_STATE_READY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2220      	movs	r2, #32
 80085fc:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

    status = HAL_OK;
 8008600:	2300      	movs	r3, #0
 8008602:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_UNLOCK(hfmac);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <FMAC_Reset>:
  * @brief  Perform a reset of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval HAL_StatusTypeDef HAL status
  */
static HAL_StatusTypeDef FMAC_Reset(FMAC_HandleTypeDef *hfmac)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800861e:	f7fc ff7b 	bl	8005518 <HAL_GetTick>
 8008622:	60f8      	str	r0, [r7, #12]

  /* Perform the reset */
  SET_BIT(hfmac->Instance->CR, FMAC_CR_RESET);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	691a      	ldr	r2, [r3, #16]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008632:	611a      	str	r2, [r3, #16]

  /* Wait until flag is reset */
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008634:	e00f      	b.n	8008656 <FMAC_Reset+0x40>
  {
    if ((HAL_GetTick() - tickstart) > HAL_FMAC_RESET_TIMEOUT_VALUE)
 8008636:	f7fc ff6f 	bl	8005518 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8008644:	d907      	bls.n	8008656 <FMAC_Reset+0x40>
    {
      hfmac->ErrorCode |= HAL_FMAC_ERROR_TIMEOUT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800864a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8008652:	2301      	movs	r3, #1
 8008654:	e00a      	b.n	800866c <FMAC_Reset+0x56>
  while (READ_BIT(hfmac->Instance->CR, FMAC_CR_RESET) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d1e8      	bne.n	8008636 <FMAC_Reset+0x20>
    }
  }

  hfmac->ErrorCode = HAL_FMAC_ERROR_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	635a      	str	r2, [r3, #52]	@ 0x34
  return HAL_OK;
 800866a:	2300      	movs	r3, #0
}
 800866c:	4618      	mov	r0, r3
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <FMAC_ResetDataPointers>:
  * @brief  Reset the data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b082      	sub	sp, #8
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
  FMAC_ResetInputStateAndDataPointers(hfmac);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 f807 	bl	8008690 <FMAC_ResetInputStateAndDataPointers>
  FMAC_ResetOutputStateAndDataPointers(hfmac);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f000 f81b 	bl	80086be <FMAC_ResetOutputStateAndDataPointers>
}
 8008688:	bf00      	nop
 800868a:	3708      	adds	r7, #8
 800868c:	46bd      	mov	sp, r7
 800868e:	bd80      	pop	{r7, pc}

08008690 <FMAC_ResetInputStateAndDataPointers>:
  * @brief  Reset the input data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetInputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  hfmac->pInput = NULL;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	60da      	str	r2, [r3, #12]
  hfmac->pInputSize = NULL;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	615a      	str	r2, [r3, #20]
  hfmac->InputCurrentSize = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	821a      	strh	r2, [r3, #16]
  hfmac->WrState = HAL_FMAC_STATE_READY;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2220      	movs	r2, #32
 80086ae:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 80086b2:	bf00      	nop
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr

080086be <FMAC_ResetOutputStateAndDataPointers>:
  * @brief  Reset the output data pointers of the FMAC unit.
  * @param  hfmac FMAC handle.
  * @retval None
  */
static void FMAC_ResetOutputStateAndDataPointers(FMAC_HandleTypeDef *hfmac)
{
 80086be:	b480      	push	{r7}
 80086c0:	b083      	sub	sp, #12
 80086c2:	af00      	add	r7, sp, #0
 80086c4:	6078      	str	r0, [r7, #4]
  hfmac->pOutput = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	619a      	str	r2, [r3, #24]
  hfmac->pOutputSize = NULL;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	621a      	str	r2, [r3, #32]
  hfmac->OutputCurrentSize = 0U;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	839a      	strh	r2, [r3, #28]
  hfmac->RdState = HAL_FMAC_STATE_READY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2220      	movs	r2, #32
 80086dc:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
}
 80086e0:	bf00      	nop
 80086e2:	370c      	adds	r7, #12
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
 80086f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80086fa:	e15a      	b.n	80089b2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	2101      	movs	r1, #1
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	fa01 f303 	lsl.w	r3, r1, r3
 8008708:	4013      	ands	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 814c 	beq.w	80089ac <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008714:	683b      	ldr	r3, [r7, #0]
 8008716:	685b      	ldr	r3, [r3, #4]
 8008718:	f003 0303 	and.w	r3, r3, #3
 800871c:	2b01      	cmp	r3, #1
 800871e:	d005      	beq.n	800872c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008728:	2b02      	cmp	r3, #2
 800872a:	d130      	bne.n	800878e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	689b      	ldr	r3, [r3, #8]
 8008730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008732:	697b      	ldr	r3, [r7, #20]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	2203      	movs	r2, #3
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	43db      	mvns	r3, r3
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	4013      	ands	r3, r2
 8008742:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	fa02 f303 	lsl.w	r3, r2, r3
 8008750:	693a      	ldr	r2, [r7, #16]
 8008752:	4313      	orrs	r3, r2
 8008754:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008762:	2201      	movs	r2, #1
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	fa02 f303 	lsl.w	r3, r2, r3
 800876a:	43db      	mvns	r3, r3
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	4013      	ands	r3, r2
 8008770:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	091b      	lsrs	r3, r3, #4
 8008778:	f003 0201 	and.w	r2, r3, #1
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	fa02 f303 	lsl.w	r3, r2, r3
 8008782:	693a      	ldr	r2, [r7, #16]
 8008784:	4313      	orrs	r3, r2
 8008786:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	693a      	ldr	r2, [r7, #16]
 800878c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	2b03      	cmp	r3, #3
 8008798:	d017      	beq.n	80087ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	005b      	lsls	r3, r3, #1
 80087a4:	2203      	movs	r2, #3
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43db      	mvns	r3, r3
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	4013      	ands	r3, r2
 80087b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	689a      	ldr	r2, [r3, #8]
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	005b      	lsls	r3, r3, #1
 80087ba:	fa02 f303 	lsl.w	r3, r2, r3
 80087be:	693a      	ldr	r2, [r7, #16]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	693a      	ldr	r2, [r7, #16]
 80087c8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f003 0303 	and.w	r3, r3, #3
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d123      	bne.n	800881e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	08da      	lsrs	r2, r3, #3
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3208      	adds	r2, #8
 80087de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	f003 0307 	and.w	r3, r3, #7
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	220f      	movs	r2, #15
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43db      	mvns	r3, r3
 80087f4:	693a      	ldr	r2, [r7, #16]
 80087f6:	4013      	ands	r3, r2
 80087f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	f003 0307 	and.w	r3, r3, #7
 8008804:	009b      	lsls	r3, r3, #2
 8008806:	fa02 f303 	lsl.w	r3, r2, r3
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	08da      	lsrs	r2, r3, #3
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	3208      	adds	r2, #8
 8008818:	6939      	ldr	r1, [r7, #16]
 800881a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	005b      	lsls	r3, r3, #1
 8008828:	2203      	movs	r2, #3
 800882a:	fa02 f303 	lsl.w	r3, r2, r3
 800882e:	43db      	mvns	r3, r3
 8008830:	693a      	ldr	r2, [r7, #16]
 8008832:	4013      	ands	r3, r2
 8008834:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f003 0203 	and.w	r2, r3, #3
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	005b      	lsls	r3, r3, #1
 8008842:	fa02 f303 	lsl.w	r3, r2, r3
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	4313      	orrs	r3, r2
 800884a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	685b      	ldr	r3, [r3, #4]
 8008856:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 80a6 	beq.w	80089ac <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008860:	4b5b      	ldr	r3, [pc, #364]	@ (80089d0 <HAL_GPIO_Init+0x2e4>)
 8008862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008864:	4a5a      	ldr	r2, [pc, #360]	@ (80089d0 <HAL_GPIO_Init+0x2e4>)
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6613      	str	r3, [r2, #96]	@ 0x60
 800886c:	4b58      	ldr	r3, [pc, #352]	@ (80089d0 <HAL_GPIO_Init+0x2e4>)
 800886e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008870:	f003 0301 	and.w	r3, r3, #1
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008878:	4a56      	ldr	r2, [pc, #344]	@ (80089d4 <HAL_GPIO_Init+0x2e8>)
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	089b      	lsrs	r3, r3, #2
 800887e:	3302      	adds	r3, #2
 8008880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008884:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f003 0303 	and.w	r3, r3, #3
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	220f      	movs	r2, #15
 8008890:	fa02 f303 	lsl.w	r3, r2, r3
 8008894:	43db      	mvns	r3, r3
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	4013      	ands	r3, r2
 800889a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80088a2:	d01f      	beq.n	80088e4 <HAL_GPIO_Init+0x1f8>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	4a4c      	ldr	r2, [pc, #304]	@ (80089d8 <HAL_GPIO_Init+0x2ec>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d019      	beq.n	80088e0 <HAL_GPIO_Init+0x1f4>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a4b      	ldr	r2, [pc, #300]	@ (80089dc <HAL_GPIO_Init+0x2f0>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d013      	beq.n	80088dc <HAL_GPIO_Init+0x1f0>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a4a      	ldr	r2, [pc, #296]	@ (80089e0 <HAL_GPIO_Init+0x2f4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00d      	beq.n	80088d8 <HAL_GPIO_Init+0x1ec>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a49      	ldr	r2, [pc, #292]	@ (80089e4 <HAL_GPIO_Init+0x2f8>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <HAL_GPIO_Init+0x1e8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a48      	ldr	r2, [pc, #288]	@ (80089e8 <HAL_GPIO_Init+0x2fc>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d101      	bne.n	80088d0 <HAL_GPIO_Init+0x1e4>
 80088cc:	2305      	movs	r3, #5
 80088ce:	e00a      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088d0:	2306      	movs	r3, #6
 80088d2:	e008      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088d4:	2304      	movs	r3, #4
 80088d6:	e006      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088d8:	2303      	movs	r3, #3
 80088da:	e004      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088dc:	2302      	movs	r3, #2
 80088de:	e002      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088e0:	2301      	movs	r3, #1
 80088e2:	e000      	b.n	80088e6 <HAL_GPIO_Init+0x1fa>
 80088e4:	2300      	movs	r3, #0
 80088e6:	697a      	ldr	r2, [r7, #20]
 80088e8:	f002 0203 	and.w	r2, r2, #3
 80088ec:	0092      	lsls	r2, r2, #2
 80088ee:	4093      	lsls	r3, r2
 80088f0:	693a      	ldr	r2, [r7, #16]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80088f6:	4937      	ldr	r1, [pc, #220]	@ (80089d4 <HAL_GPIO_Init+0x2e8>)
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	089b      	lsrs	r3, r3, #2
 80088fc:	3302      	adds	r3, #2
 80088fe:	693a      	ldr	r2, [r7, #16]
 8008900:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008904:	4b39      	ldr	r3, [pc, #228]	@ (80089ec <HAL_GPIO_Init+0x300>)
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	43db      	mvns	r3, r3
 800890e:	693a      	ldr	r2, [r7, #16]
 8008910:	4013      	ands	r3, r2
 8008912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	4313      	orrs	r3, r2
 8008926:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008928:	4a30      	ldr	r2, [pc, #192]	@ (80089ec <HAL_GPIO_Init+0x300>)
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800892e:	4b2f      	ldr	r3, [pc, #188]	@ (80089ec <HAL_GPIO_Init+0x300>)
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	43db      	mvns	r3, r3
 8008938:	693a      	ldr	r2, [r7, #16]
 800893a:	4013      	ands	r3, r2
 800893c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d003      	beq.n	8008952 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	4313      	orrs	r3, r2
 8008950:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008952:	4a26      	ldr	r2, [pc, #152]	@ (80089ec <HAL_GPIO_Init+0x300>)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8008958:	4b24      	ldr	r3, [pc, #144]	@ (80089ec <HAL_GPIO_Init+0x300>)
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	43db      	mvns	r3, r3
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4013      	ands	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	4313      	orrs	r3, r2
 800897a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800897c:	4a1b      	ldr	r2, [pc, #108]	@ (80089ec <HAL_GPIO_Init+0x300>)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008982:	4b1a      	ldr	r3, [pc, #104]	@ (80089ec <HAL_GPIO_Init+0x300>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	43db      	mvns	r3, r3
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	4013      	ands	r3, r2
 8008990:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800899e:	693a      	ldr	r2, [r7, #16]
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80089a6:	4a11      	ldr	r2, [pc, #68]	@ (80089ec <HAL_GPIO_Init+0x300>)
 80089a8:	693b      	ldr	r3, [r7, #16]
 80089aa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	3301      	adds	r3, #1
 80089b0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	fa22 f303 	lsr.w	r3, r2, r3
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f47f ae9d 	bne.w	80086fc <HAL_GPIO_Init+0x10>
  }
}
 80089c2:	bf00      	nop
 80089c4:	bf00      	nop
 80089c6:	371c      	adds	r7, #28
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40010000 	.word	0x40010000
 80089d8:	48000400 	.word	0x48000400
 80089dc:	48000800 	.word	0x48000800
 80089e0:	48000c00 	.word	0x48000c00
 80089e4:	48001000 	.word	0x48001000
 80089e8:	48001400 	.word	0x48001400
 80089ec:	40010400 	.word	0x40010400

080089f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b083      	sub	sp, #12
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	807b      	strh	r3, [r7, #2]
 80089fc:	4613      	mov	r3, r2
 80089fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a00:	787b      	ldrb	r3, [r7, #1]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008a06:	887a      	ldrh	r2, [r7, #2]
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008a0c:	e002      	b.n	8008a14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008a0e:	887a      	ldrh	r2, [r7, #2]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008a14:	bf00      	nop
 8008a16:	370c      	adds	r7, #12
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d141      	bne.n	8008ab2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008a2e:	4b4b      	ldr	r3, [pc, #300]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008a36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a3a:	d131      	bne.n	8008aa0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008a3c:	4b47      	ldr	r3, [pc, #284]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a42:	4a46      	ldr	r2, [pc, #280]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a4c:	4b43      	ldr	r3, [pc, #268]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008a54:	4a41      	ldr	r2, [pc, #260]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008a5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008a5c:	4b40      	ldr	r3, [pc, #256]	@ (8008b60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2232      	movs	r2, #50	@ 0x32
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	4a3f      	ldr	r2, [pc, #252]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008a68:	fba2 2303 	umull	r2, r3, r2, r3
 8008a6c:	0c9b      	lsrs	r3, r3, #18
 8008a6e:	3301      	adds	r3, #1
 8008a70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a72:	e002      	b.n	8008a7a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	3b01      	subs	r3, #1
 8008a78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008a7a:	4b38      	ldr	r3, [pc, #224]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a86:	d102      	bne.n	8008a8e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d1f2      	bne.n	8008a74 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008a8e:	4b33      	ldr	r3, [pc, #204]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008a90:	695b      	ldr	r3, [r3, #20]
 8008a92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008a96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008a9a:	d158      	bne.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008a9c:	2303      	movs	r3, #3
 8008a9e:	e057      	b.n	8008b50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008aac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008ab0:	e04d      	b.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab8:	d141      	bne.n	8008b3e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008aba:	4b28      	ldr	r3, [pc, #160]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ac6:	d131      	bne.n	8008b2c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008ac8:	4b24      	ldr	r3, [pc, #144]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ace:	4a23      	ldr	r2, [pc, #140]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ad4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ad8:	4b20      	ldr	r3, [pc, #128]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8008ae6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8008b60 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	2232      	movs	r2, #50	@ 0x32
 8008aee:	fb02 f303 	mul.w	r3, r2, r3
 8008af2:	4a1c      	ldr	r2, [pc, #112]	@ (8008b64 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008af4:	fba2 2303 	umull	r2, r3, r2, r3
 8008af8:	0c9b      	lsrs	r3, r3, #18
 8008afa:	3301      	adds	r3, #1
 8008afc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008afe:	e002      	b.n	8008b06 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	3b01      	subs	r3, #1
 8008b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b06:	4b15      	ldr	r3, [pc, #84]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b08:	695b      	ldr	r3, [r3, #20]
 8008b0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b12:	d102      	bne.n	8008b1a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d1f2      	bne.n	8008b00 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b1a:	4b10      	ldr	r3, [pc, #64]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008b22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b26:	d112      	bne.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b28:	2303      	movs	r3, #3
 8008b2a:	e011      	b.n	8008b50 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b32:	4a0a      	ldr	r2, [pc, #40]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b38:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8008b3c:	e007      	b.n	8008b4e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008b3e:	4b07      	ldr	r3, [pc, #28]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008b46:	4a05      	ldr	r2, [pc, #20]	@ (8008b5c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b48:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8008b4c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3714      	adds	r7, #20
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr
 8008b5c:	40007000 	.word	0x40007000
 8008b60:	200000bc 	.word	0x200000bc
 8008b64:	431bde83 	.word	0x431bde83

08008b68 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008b6c:	4b05      	ldr	r3, [pc, #20]	@ (8008b84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	4a04      	ldr	r2, [pc, #16]	@ (8008b84 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008b72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b76:	6093      	str	r3, [r2, #8]
}
 8008b78:	bf00      	nop
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	40007000 	.word	0x40007000

08008b88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e2fe      	b.n	8009198 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d075      	beq.n	8008c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ba6:	4b97      	ldr	r3, [pc, #604]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008bb0:	4b94      	ldr	r3, [pc, #592]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	f003 0303 	and.w	r3, r3, #3
 8008bb8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b0c      	cmp	r3, #12
 8008bbe:	d102      	bne.n	8008bc6 <HAL_RCC_OscConfig+0x3e>
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	2b03      	cmp	r3, #3
 8008bc4:	d002      	beq.n	8008bcc <HAL_RCC_OscConfig+0x44>
 8008bc6:	69bb      	ldr	r3, [r7, #24]
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d10b      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bcc:	4b8d      	ldr	r3, [pc, #564]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05b      	beq.n	8008c90 <HAL_RCC_OscConfig+0x108>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d157      	bne.n	8008c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e2d9      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bec:	d106      	bne.n	8008bfc <HAL_RCC_OscConfig+0x74>
 8008bee:	4b85      	ldr	r3, [pc, #532]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a84      	ldr	r2, [pc, #528]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e01d      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008c04:	d10c      	bne.n	8008c20 <HAL_RCC_OscConfig+0x98>
 8008c06:	4b7f      	ldr	r3, [pc, #508]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a7e      	ldr	r2, [pc, #504]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4b7c      	ldr	r3, [pc, #496]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a7b      	ldr	r2, [pc, #492]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e00b      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008c20:	4b78      	ldr	r3, [pc, #480]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a77      	ldr	r2, [pc, #476]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	4b75      	ldr	r3, [pc, #468]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a74      	ldr	r2, [pc, #464]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c40:	f7fc fc6a 	bl	8005518 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fc fc66 	bl	8005518 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	@ 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e29e      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0xc0>
 8008c66:	e014      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c68:	f7fc fc56 	bl	8005518 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008c70:	f7fc fc52 	bl	8005518 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	@ 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e28a      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008c82:	4b60      	ldr	r3, [pc, #384]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0xe8>
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d075      	beq.n	8008d8a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c9e:	4b59      	ldr	r3, [pc, #356]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 030c 	and.w	r3, r3, #12
 8008ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ca8:	4b56      	ldr	r3, [pc, #344]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0303 	and.w	r3, r3, #3
 8008cb0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008cb2:	69bb      	ldr	r3, [r7, #24]
 8008cb4:	2b0c      	cmp	r3, #12
 8008cb6:	d102      	bne.n	8008cbe <HAL_RCC_OscConfig+0x136>
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d002      	beq.n	8008cc4 <HAL_RCC_OscConfig+0x13c>
 8008cbe:	69bb      	ldr	r3, [r7, #24]
 8008cc0:	2b04      	cmp	r3, #4
 8008cc2:	d11f      	bne.n	8008d04 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008cc4:	4b4f      	ldr	r3, [pc, #316]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <HAL_RCC_OscConfig+0x154>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d101      	bne.n	8008cdc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e25d      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cdc:	4b49      	ldr	r3, [pc, #292]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	691b      	ldr	r3, [r3, #16]
 8008ce8:	061b      	lsls	r3, r3, #24
 8008cea:	4946      	ldr	r1, [pc, #280]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008cec:	4313      	orrs	r3, r2
 8008cee:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008cf0:	4b45      	ldr	r3, [pc, #276]	@ (8008e08 <HAL_RCC_OscConfig+0x280>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f7fc fbc3 	bl	8005480 <HAL_InitTick>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d043      	beq.n	8008d88 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e249      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d023      	beq.n	8008d54 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a3c      	ldr	r2, [pc, #240]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d18:	f7fc fbfe 	bl	8005518 <HAL_GetTick>
 8008d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d1e:	e008      	b.n	8008d32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d20:	f7fc fbfa 	bl	8005518 <HAL_GetTick>
 8008d24:	4602      	mov	r2, r0
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	1ad3      	subs	r3, r2, r3
 8008d2a:	2b02      	cmp	r3, #2
 8008d2c:	d901      	bls.n	8008d32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008d2e:	2303      	movs	r3, #3
 8008d30:	e232      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d32:	4b34      	ldr	r3, [pc, #208]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d0f0      	beq.n	8008d20 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d3e:	4b31      	ldr	r3, [pc, #196]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	061b      	lsls	r3, r3, #24
 8008d4c:	492d      	ldr	r1, [pc, #180]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	604b      	str	r3, [r1, #4]
 8008d52:	e01a      	b.n	8008d8a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d54:	4b2b      	ldr	r3, [pc, #172]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a2a      	ldr	r2, [pc, #168]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d60:	f7fc fbda 	bl	8005518 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008d68:	f7fc fbd6 	bl	8005518 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e20e      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008d7a:	4b22      	ldr	r3, [pc, #136]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1f0      	bne.n	8008d68 <HAL_RCC_OscConfig+0x1e0>
 8008d86:	e000      	b.n	8008d8a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 0308 	and.w	r3, r3, #8
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d041      	beq.n	8008e1a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01c      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d9e:	4b19      	ldr	r3, [pc, #100]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008da4:	4a17      	ldr	r2, [pc, #92]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dae:	f7fc fbb3 	bl	8005518 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008db4:	e008      	b.n	8008dc8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008db6:	f7fc fbaf 	bl	8005518 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d901      	bls.n	8008dc8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e1e7      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008dc8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d0ef      	beq.n	8008db6 <HAL_RCC_OscConfig+0x22e>
 8008dd6:	e020      	b.n	8008e1a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008dde:	4a09      	ldr	r2, [pc, #36]	@ (8008e04 <HAL_RCC_OscConfig+0x27c>)
 8008de0:	f023 0301 	bic.w	r3, r3, #1
 8008de4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de8:	f7fc fb96 	bl	8005518 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008dee:	e00d      	b.n	8008e0c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008df0:	f7fc fb92 	bl	8005518 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d906      	bls.n	8008e0c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e1ca      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
 8008e02:	bf00      	nop
 8008e04:	40021000 	.word	0x40021000
 8008e08:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008e0c:	4b8c      	ldr	r3, [pc, #560]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008e12:	f003 0302 	and.w	r3, r3, #2
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1ea      	bne.n	8008df0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 0304 	and.w	r3, r3, #4
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	f000 80a6 	beq.w	8008f74 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008e2c:	4b84      	ldr	r3, [pc, #528]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <HAL_RCC_OscConfig+0x2b4>
 8008e38:	2301      	movs	r3, #1
 8008e3a:	e000      	b.n	8008e3e <HAL_RCC_OscConfig+0x2b6>
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d00d      	beq.n	8008e5e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e42:	4b7f      	ldr	r3, [pc, #508]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e46:	4a7e      	ldr	r2, [pc, #504]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e4e:	4b7c      	ldr	r3, [pc, #496]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e5e:	4b79      	ldr	r3, [pc, #484]	@ (8009044 <HAL_RCC_OscConfig+0x4bc>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d118      	bne.n	8008e9c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008e6a:	4b76      	ldr	r3, [pc, #472]	@ (8009044 <HAL_RCC_OscConfig+0x4bc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	4a75      	ldr	r2, [pc, #468]	@ (8009044 <HAL_RCC_OscConfig+0x4bc>)
 8008e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e76:	f7fc fb4f 	bl	8005518 <HAL_GetTick>
 8008e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e7c:	e008      	b.n	8008e90 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e7e:	f7fc fb4b 	bl	8005518 <HAL_GetTick>
 8008e82:	4602      	mov	r2, r0
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	1ad3      	subs	r3, r2, r3
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d901      	bls.n	8008e90 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008e8c:	2303      	movs	r3, #3
 8008e8e:	e183      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008e90:	4b6c      	ldr	r3, [pc, #432]	@ (8009044 <HAL_RCC_OscConfig+0x4bc>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d0f0      	beq.n	8008e7e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	689b      	ldr	r3, [r3, #8]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d108      	bne.n	8008eb6 <HAL_RCC_OscConfig+0x32e>
 8008ea4:	4b66      	ldr	r3, [pc, #408]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008eaa:	4a65      	ldr	r2, [pc, #404]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008eac:	f043 0301 	orr.w	r3, r3, #1
 8008eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008eb4:	e024      	b.n	8008f00 <HAL_RCC_OscConfig+0x378>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d110      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x358>
 8008ebe:	4b60      	ldr	r3, [pc, #384]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ec4:	4a5e      	ldr	r2, [pc, #376]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ec6:	f043 0304 	orr.w	r3, r3, #4
 8008eca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ece:	4b5c      	ldr	r3, [pc, #368]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ed4:	4a5a      	ldr	r2, [pc, #360]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ede:	e00f      	b.n	8008f00 <HAL_RCC_OscConfig+0x378>
 8008ee0:	4b57      	ldr	r3, [pc, #348]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ee6:	4a56      	ldr	r2, [pc, #344]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8008ef0:	4b53      	ldr	r3, [pc, #332]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ef6:	4a52      	ldr	r2, [pc, #328]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008ef8:	f023 0304 	bic.w	r3, r3, #4
 8008efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d016      	beq.n	8008f36 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f08:	f7fc fb06 	bl	8005518 <HAL_GetTick>
 8008f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f0e:	e00a      	b.n	8008f26 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f10:	f7fc fb02 	bl	8005518 <HAL_GetTick>
 8008f14:	4602      	mov	r2, r0
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	1ad3      	subs	r3, r2, r3
 8008f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d901      	bls.n	8008f26 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008f22:	2303      	movs	r3, #3
 8008f24:	e138      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008f26:	4b46      	ldr	r3, [pc, #280]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f2c:	f003 0302 	and.w	r3, r3, #2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d0ed      	beq.n	8008f10 <HAL_RCC_OscConfig+0x388>
 8008f34:	e015      	b.n	8008f62 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f36:	f7fc faef 	bl	8005518 <HAL_GetTick>
 8008f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f3c:	e00a      	b.n	8008f54 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008f3e:	f7fc faeb 	bl	8005518 <HAL_GetTick>
 8008f42:	4602      	mov	r2, r0
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	1ad3      	subs	r3, r2, r3
 8008f48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d901      	bls.n	8008f54 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	e121      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008f54:	4b3a      	ldr	r3, [pc, #232]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f5a:	f003 0302 	and.w	r3, r3, #2
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1ed      	bne.n	8008f3e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008f62:	7ffb      	ldrb	r3, [r7, #31]
 8008f64:	2b01      	cmp	r3, #1
 8008f66:	d105      	bne.n	8008f74 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f68:	4b35      	ldr	r3, [pc, #212]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008f6c:	4a34      	ldr	r2, [pc, #208]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f6e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008f72:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f003 0320 	and.w	r3, r3, #32
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d03c      	beq.n	8008ffa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01c      	beq.n	8008fc2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008f88:	4b2d      	ldr	r3, [pc, #180]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008f90:	f043 0301 	orr.w	r3, r3, #1
 8008f94:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f98:	f7fc fabe 	bl	8005518 <HAL_GetTick>
 8008f9c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008f9e:	e008      	b.n	8008fb2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fa0:	f7fc faba 	bl	8005518 <HAL_GetTick>
 8008fa4:	4602      	mov	r2, r0
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d901      	bls.n	8008fb2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8008fae:	2303      	movs	r3, #3
 8008fb0:	e0f2      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008fb2:	4b23      	ldr	r3, [pc, #140]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008fb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fb8:	f003 0302 	and.w	r3, r3, #2
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d0ef      	beq.n	8008fa0 <HAL_RCC_OscConfig+0x418>
 8008fc0:	e01b      	b.n	8008ffa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008fca:	f023 0301 	bic.w	r3, r3, #1
 8008fce:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd2:	f7fc faa1 	bl	8005518 <HAL_GetTick>
 8008fd6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fd8:	e008      	b.n	8008fec <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008fda:	f7fc fa9d 	bl	8005518 <HAL_GetTick>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	1ad3      	subs	r3, r2, r3
 8008fe4:	2b02      	cmp	r3, #2
 8008fe6:	d901      	bls.n	8008fec <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e0d5      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008fec:	4b14      	ldr	r3, [pc, #80]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8008fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008ff2:	f003 0302 	and.w	r3, r3, #2
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1ef      	bne.n	8008fda <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f000 80c9 	beq.w	8009196 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009004:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 030c 	and.w	r3, r3, #12
 800900c:	2b0c      	cmp	r3, #12
 800900e:	f000 8083 	beq.w	8009118 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	69db      	ldr	r3, [r3, #28]
 8009016:	2b02      	cmp	r3, #2
 8009018:	d15e      	bne.n	80090d8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800901a:	4b09      	ldr	r3, [pc, #36]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a08      	ldr	r2, [pc, #32]	@ (8009040 <HAL_RCC_OscConfig+0x4b8>)
 8009020:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009024:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009026:	f7fc fa77 	bl	8005518 <HAL_GetTick>
 800902a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800902c:	e00c      	b.n	8009048 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800902e:	f7fc fa73 	bl	8005518 <HAL_GetTick>
 8009032:	4602      	mov	r2, r0
 8009034:	693b      	ldr	r3, [r7, #16]
 8009036:	1ad3      	subs	r3, r2, r3
 8009038:	2b02      	cmp	r3, #2
 800903a:	d905      	bls.n	8009048 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800903c:	2303      	movs	r3, #3
 800903e:	e0ab      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
 8009040:	40021000 	.word	0x40021000
 8009044:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009048:	4b55      	ldr	r3, [pc, #340]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1ec      	bne.n	800902e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009054:	4b52      	ldr	r3, [pc, #328]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 8009056:	68da      	ldr	r2, [r3, #12]
 8009058:	4b52      	ldr	r3, [pc, #328]	@ (80091a4 <HAL_RCC_OscConfig+0x61c>)
 800905a:	4013      	ands	r3, r2
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6a11      	ldr	r1, [r2, #32]
 8009060:	687a      	ldr	r2, [r7, #4]
 8009062:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009064:	3a01      	subs	r2, #1
 8009066:	0112      	lsls	r2, r2, #4
 8009068:	4311      	orrs	r1, r2
 800906a:	687a      	ldr	r2, [r7, #4]
 800906c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800906e:	0212      	lsls	r2, r2, #8
 8009070:	4311      	orrs	r1, r2
 8009072:	687a      	ldr	r2, [r7, #4]
 8009074:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8009076:	0852      	lsrs	r2, r2, #1
 8009078:	3a01      	subs	r2, #1
 800907a:	0552      	lsls	r2, r2, #21
 800907c:	4311      	orrs	r1, r2
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009082:	0852      	lsrs	r2, r2, #1
 8009084:	3a01      	subs	r2, #1
 8009086:	0652      	lsls	r2, r2, #25
 8009088:	4311      	orrs	r1, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800908e:	06d2      	lsls	r2, r2, #27
 8009090:	430a      	orrs	r2, r1
 8009092:	4943      	ldr	r1, [pc, #268]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 8009094:	4313      	orrs	r3, r2
 8009096:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009098:	4b41      	ldr	r3, [pc, #260]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4a40      	ldr	r2, [pc, #256]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 800909e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80090a4:	4b3e      	ldr	r3, [pc, #248]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	4a3d      	ldr	r2, [pc, #244]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 80090aa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80090ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090b0:	f7fc fa32 	bl	8005518 <HAL_GetTick>
 80090b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090b6:	e008      	b.n	80090ca <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090b8:	f7fc fa2e 	bl	8005518 <HAL_GetTick>
 80090bc:	4602      	mov	r2, r0
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	1ad3      	subs	r3, r2, r3
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d901      	bls.n	80090ca <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80090c6:	2303      	movs	r3, #3
 80090c8:	e066      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090ca:	4b35      	ldr	r3, [pc, #212]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d0f0      	beq.n	80090b8 <HAL_RCC_OscConfig+0x530>
 80090d6:	e05e      	b.n	8009196 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090d8:	4b31      	ldr	r3, [pc, #196]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a30      	ldr	r2, [pc, #192]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 80090de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80090e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090e4:	f7fc fa18 	bl	8005518 <HAL_GetTick>
 80090e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090ea:	e008      	b.n	80090fe <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090ec:	f7fc fa14 	bl	8005518 <HAL_GetTick>
 80090f0:	4602      	mov	r2, r0
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	1ad3      	subs	r3, r2, r3
 80090f6:	2b02      	cmp	r3, #2
 80090f8:	d901      	bls.n	80090fe <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80090fa:	2303      	movs	r3, #3
 80090fc:	e04c      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090fe:	4b28      	ldr	r3, [pc, #160]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1f0      	bne.n	80090ec <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800910a:	4b25      	ldr	r3, [pc, #148]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 800910c:	68da      	ldr	r2, [r3, #12]
 800910e:	4924      	ldr	r1, [pc, #144]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 8009110:	4b25      	ldr	r3, [pc, #148]	@ (80091a8 <HAL_RCC_OscConfig+0x620>)
 8009112:	4013      	ands	r3, r2
 8009114:	60cb      	str	r3, [r1, #12]
 8009116:	e03e      	b.n	8009196 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	69db      	ldr	r3, [r3, #28]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d101      	bne.n	8009124 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e039      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009124:	4b1e      	ldr	r3, [pc, #120]	@ (80091a0 <HAL_RCC_OscConfig+0x618>)
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	f003 0203 	and.w	r2, r3, #3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6a1b      	ldr	r3, [r3, #32]
 8009134:	429a      	cmp	r2, r3
 8009136:	d12c      	bne.n	8009192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009142:	3b01      	subs	r3, #1
 8009144:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009146:	429a      	cmp	r2, r3
 8009148:	d123      	bne.n	8009192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009154:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009156:	429a      	cmp	r2, r3
 8009158:	d11b      	bne.n	8009192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009164:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009166:	429a      	cmp	r2, r3
 8009168:	d113      	bne.n	8009192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	3b01      	subs	r3, #1
 8009178:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800917a:	429a      	cmp	r2, r3
 800917c:	d109      	bne.n	8009192 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	3b01      	subs	r3, #1
 800918c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800918e:	429a      	cmp	r2, r3
 8009190:	d001      	beq.n	8009196 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8009192:	2301      	movs	r3, #1
 8009194:	e000      	b.n	8009198 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8009196:	2300      	movs	r3, #0
}
 8009198:	4618      	mov	r0, r3
 800919a:	3720      	adds	r7, #32
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	40021000 	.word	0x40021000
 80091a4:	019f800c 	.word	0x019f800c
 80091a8:	feeefffc 	.word	0xfeeefffc

080091ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b086      	sub	sp, #24
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
 80091b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80091b6:	2300      	movs	r3, #0
 80091b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d101      	bne.n	80091c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e11e      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80091c4:	4b91      	ldr	r3, [pc, #580]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	683a      	ldr	r2, [r7, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d910      	bls.n	80091f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091d2:	4b8e      	ldr	r3, [pc, #568]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f023 020f 	bic.w	r2, r3, #15
 80091da:	498c      	ldr	r1, [pc, #560]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	4313      	orrs	r3, r2
 80091e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e2:	4b8a      	ldr	r3, [pc, #552]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	683a      	ldr	r2, [r7, #0]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d001      	beq.n	80091f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80091f0:	2301      	movs	r3, #1
 80091f2:	e106      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d073      	beq.n	80092e8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	2b03      	cmp	r3, #3
 8009206:	d129      	bne.n	800925c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009208:	4b81      	ldr	r3, [pc, #516]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	e0f4      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009218:	f000 f966 	bl	80094e8 <RCC_GetSysClockFreqFromPLLSource>
 800921c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	4a7c      	ldr	r2, [pc, #496]	@ (8009414 <HAL_RCC_ClockConfig+0x268>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d93f      	bls.n	80092a6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009226:	4b7a      	ldr	r3, [pc, #488]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009228:	689b      	ldr	r3, [r3, #8]
 800922a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800923a:	2b00      	cmp	r3, #0
 800923c:	d033      	beq.n	80092a6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009242:	2b00      	cmp	r3, #0
 8009244:	d12f      	bne.n	80092a6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009246:	4b72      	ldr	r3, [pc, #456]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800924e:	4a70      	ldr	r2, [pc, #448]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009250:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009254:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009256:	2380      	movs	r3, #128	@ 0x80
 8009258:	617b      	str	r3, [r7, #20]
 800925a:	e024      	b.n	80092a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b02      	cmp	r3, #2
 8009262:	d107      	bne.n	8009274 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009264:	4b6a      	ldr	r3, [pc, #424]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800926c:	2b00      	cmp	r3, #0
 800926e:	d109      	bne.n	8009284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	e0c6      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009274:	4b66      	ldr	r3, [pc, #408]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800927c:	2b00      	cmp	r3, #0
 800927e:	d101      	bne.n	8009284 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009280:	2301      	movs	r3, #1
 8009282:	e0be      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009284:	f000 f8ce 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 8009288:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	4a61      	ldr	r2, [pc, #388]	@ (8009414 <HAL_RCC_ClockConfig+0x268>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d909      	bls.n	80092a6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009292:	4b5f      	ldr	r3, [pc, #380]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800929a:	4a5d      	ldr	r2, [pc, #372]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 800929c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092a0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80092a2:	2380      	movs	r3, #128	@ 0x80
 80092a4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80092a6:	4b5a      	ldr	r3, [pc, #360]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f023 0203 	bic.w	r2, r3, #3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	4957      	ldr	r1, [pc, #348]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80092b4:	4313      	orrs	r3, r2
 80092b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092b8:	f7fc f92e 	bl	8005518 <HAL_GetTick>
 80092bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092be:	e00a      	b.n	80092d6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80092c0:	f7fc f92a 	bl	8005518 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d901      	bls.n	80092d6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80092d2:	2303      	movs	r3, #3
 80092d4:	e095      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092d6:	4b4e      	ldr	r3, [pc, #312]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80092d8:	689b      	ldr	r3, [r3, #8]
 80092da:	f003 020c 	and.w	r2, r3, #12
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	009b      	lsls	r3, r3, #2
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d1eb      	bne.n	80092c0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f003 0302 	and.w	r3, r3, #2
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d023      	beq.n	800933c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0304 	and.w	r3, r3, #4
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009300:	4b43      	ldr	r3, [pc, #268]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009302:	689b      	ldr	r3, [r3, #8]
 8009304:	4a42      	ldr	r2, [pc, #264]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009306:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800930a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f003 0308 	and.w	r3, r3, #8
 8009314:	2b00      	cmp	r3, #0
 8009316:	d007      	beq.n	8009328 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009318:	4b3d      	ldr	r3, [pc, #244]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009320:	4a3b      	ldr	r2, [pc, #236]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8009326:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009328:	4b39      	ldr	r3, [pc, #228]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	4936      	ldr	r1, [pc, #216]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009336:	4313      	orrs	r3, r2
 8009338:	608b      	str	r3, [r1, #8]
 800933a:	e008      	b.n	800934e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	2b80      	cmp	r3, #128	@ 0x80
 8009340:	d105      	bne.n	800934e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009342:	4b33      	ldr	r3, [pc, #204]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	4a32      	ldr	r2, [pc, #200]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 8009348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800934c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800934e:	4b2f      	ldr	r3, [pc, #188]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 030f 	and.w	r3, r3, #15
 8009356:	683a      	ldr	r2, [r7, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d21d      	bcs.n	8009398 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800935c:	4b2b      	ldr	r3, [pc, #172]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	f023 020f 	bic.w	r2, r3, #15
 8009364:	4929      	ldr	r1, [pc, #164]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	4313      	orrs	r3, r2
 800936a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800936c:	f7fc f8d4 	bl	8005518 <HAL_GetTick>
 8009370:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009372:	e00a      	b.n	800938a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009374:	f7fc f8d0 	bl	8005518 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009382:	4293      	cmp	r3, r2
 8009384:	d901      	bls.n	800938a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009386:	2303      	movs	r3, #3
 8009388:	e03b      	b.n	8009402 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800938a:	4b20      	ldr	r3, [pc, #128]	@ (800940c <HAL_RCC_ClockConfig+0x260>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f003 030f 	and.w	r3, r3, #15
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	429a      	cmp	r2, r3
 8009396:	d1ed      	bne.n	8009374 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d008      	beq.n	80093b6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093a4:	4b1a      	ldr	r3, [pc, #104]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	4917      	ldr	r1, [pc, #92]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80093b2:	4313      	orrs	r3, r2
 80093b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f003 0308 	and.w	r3, r3, #8
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d009      	beq.n	80093d6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80093c2:	4b13      	ldr	r3, [pc, #76]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80093c4:	689b      	ldr	r3, [r3, #8]
 80093c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	691b      	ldr	r3, [r3, #16]
 80093ce:	00db      	lsls	r3, r3, #3
 80093d0:	490f      	ldr	r1, [pc, #60]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80093d2:	4313      	orrs	r3, r2
 80093d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80093d6:	f000 f825 	bl	8009424 <HAL_RCC_GetSysClockFreq>
 80093da:	4602      	mov	r2, r0
 80093dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009410 <HAL_RCC_ClockConfig+0x264>)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	091b      	lsrs	r3, r3, #4
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	490c      	ldr	r1, [pc, #48]	@ (8009418 <HAL_RCC_ClockConfig+0x26c>)
 80093e8:	5ccb      	ldrb	r3, [r1, r3]
 80093ea:	f003 031f 	and.w	r3, r3, #31
 80093ee:	fa22 f303 	lsr.w	r3, r2, r3
 80093f2:	4a0a      	ldr	r2, [pc, #40]	@ (800941c <HAL_RCC_ClockConfig+0x270>)
 80093f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80093f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009420 <HAL_RCC_ClockConfig+0x274>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4618      	mov	r0, r3
 80093fc:	f7fc f840 	bl	8005480 <HAL_InitTick>
 8009400:	4603      	mov	r3, r0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	40022000 	.word	0x40022000
 8009410:	40021000 	.word	0x40021000
 8009414:	04c4b400 	.word	0x04c4b400
 8009418:	0800dc70 	.word	0x0800dc70
 800941c:	200000bc 	.word	0x200000bc
 8009420:	200000c0 	.word	0x200000c0

08009424 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009424:	b480      	push	{r7}
 8009426:	b087      	sub	sp, #28
 8009428:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800942a:	4b2c      	ldr	r3, [pc, #176]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f003 030c 	and.w	r3, r3, #12
 8009432:	2b04      	cmp	r3, #4
 8009434:	d102      	bne.n	800943c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009436:	4b2a      	ldr	r3, [pc, #168]	@ (80094e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	e047      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800943c:	4b27      	ldr	r3, [pc, #156]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f003 030c 	and.w	r3, r3, #12
 8009444:	2b08      	cmp	r3, #8
 8009446:	d102      	bne.n	800944e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009448:	4b26      	ldr	r3, [pc, #152]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800944a:	613b      	str	r3, [r7, #16]
 800944c:	e03e      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800944e:	4b23      	ldr	r3, [pc, #140]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009450:	689b      	ldr	r3, [r3, #8]
 8009452:	f003 030c 	and.w	r3, r3, #12
 8009456:	2b0c      	cmp	r3, #12
 8009458:	d136      	bne.n	80094c8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800945a:	4b20      	ldr	r3, [pc, #128]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	f003 0303 	and.w	r3, r3, #3
 8009462:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009464:	4b1d      	ldr	r3, [pc, #116]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	091b      	lsrs	r3, r3, #4
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	3301      	adds	r3, #1
 8009470:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	2b03      	cmp	r3, #3
 8009476:	d10c      	bne.n	8009492 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009478:	4a1a      	ldr	r2, [pc, #104]	@ (80094e4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800947a:	68bb      	ldr	r3, [r7, #8]
 800947c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009480:	4a16      	ldr	r2, [pc, #88]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009482:	68d2      	ldr	r2, [r2, #12]
 8009484:	0a12      	lsrs	r2, r2, #8
 8009486:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800948a:	fb02 f303 	mul.w	r3, r2, r3
 800948e:	617b      	str	r3, [r7, #20]
      break;
 8009490:	e00c      	b.n	80094ac <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009492:	4a13      	ldr	r2, [pc, #76]	@ (80094e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	fbb2 f3f3 	udiv	r3, r2, r3
 800949a:	4a10      	ldr	r2, [pc, #64]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 800949c:	68d2      	ldr	r2, [r2, #12]
 800949e:	0a12      	lsrs	r2, r2, #8
 80094a0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80094a4:	fb02 f303 	mul.w	r3, r2, r3
 80094a8:	617b      	str	r3, [r7, #20]
      break;
 80094aa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80094ac:	4b0b      	ldr	r3, [pc, #44]	@ (80094dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	0e5b      	lsrs	r3, r3, #25
 80094b2:	f003 0303 	and.w	r3, r3, #3
 80094b6:	3301      	adds	r3, #1
 80094b8:	005b      	lsls	r3, r3, #1
 80094ba:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c4:	613b      	str	r3, [r7, #16]
 80094c6:	e001      	b.n	80094cc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80094cc:	693b      	ldr	r3, [r7, #16]
}
 80094ce:	4618      	mov	r0, r3
 80094d0:	371c      	adds	r7, #28
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	40021000 	.word	0x40021000
 80094e0:	00f42400 	.word	0x00f42400
 80094e4:	007a1200 	.word	0x007a1200

080094e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80094ee:	4b1e      	ldr	r3, [pc, #120]	@ (8009568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094f0:	68db      	ldr	r3, [r3, #12]
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80094f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80094fa:	68db      	ldr	r3, [r3, #12]
 80094fc:	091b      	lsrs	r3, r3, #4
 80094fe:	f003 030f 	and.w	r3, r3, #15
 8009502:	3301      	adds	r3, #1
 8009504:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b03      	cmp	r3, #3
 800950a:	d10c      	bne.n	8009526 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800950c:	4a17      	ldr	r2, [pc, #92]	@ (800956c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	fbb2 f3f3 	udiv	r3, r2, r3
 8009514:	4a14      	ldr	r2, [pc, #80]	@ (8009568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009516:	68d2      	ldr	r2, [r2, #12]
 8009518:	0a12      	lsrs	r2, r2, #8
 800951a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	617b      	str	r3, [r7, #20]
    break;
 8009524:	e00c      	b.n	8009540 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009526:	4a12      	ldr	r2, [pc, #72]	@ (8009570 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	fbb2 f3f3 	udiv	r3, r2, r3
 800952e:	4a0e      	ldr	r2, [pc, #56]	@ (8009568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009530:	68d2      	ldr	r2, [r2, #12]
 8009532:	0a12      	lsrs	r2, r2, #8
 8009534:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009538:	fb02 f303 	mul.w	r3, r2, r3
 800953c:	617b      	str	r3, [r7, #20]
    break;
 800953e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009540:	4b09      	ldr	r3, [pc, #36]	@ (8009568 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	0e5b      	lsrs	r3, r3, #25
 8009546:	f003 0303 	and.w	r3, r3, #3
 800954a:	3301      	adds	r3, #1
 800954c:	005b      	lsls	r3, r3, #1
 800954e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	fbb2 f3f3 	udiv	r3, r2, r3
 8009558:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800955a:	687b      	ldr	r3, [r7, #4]
}
 800955c:	4618      	mov	r0, r3
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	40021000 	.word	0x40021000
 800956c:	007a1200 	.word	0x007a1200
 8009570:	00f42400 	.word	0x00f42400

08009574 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b086      	sub	sp, #24
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800957c:	2300      	movs	r3, #0
 800957e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009580:	2300      	movs	r3, #0
 8009582:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800958c:	2b00      	cmp	r3, #0
 800958e:	f000 8098 	beq.w	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009592:	2300      	movs	r3, #0
 8009594:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009596:	4b43      	ldr	r3, [pc, #268]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800959a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d10d      	bne.n	80095be <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80095a2:	4b40      	ldr	r3, [pc, #256]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095a6:	4a3f      	ldr	r2, [pc, #252]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80095ae:	4b3d      	ldr	r3, [pc, #244]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095b6:	60bb      	str	r3, [r7, #8]
 80095b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095ba:	2301      	movs	r3, #1
 80095bc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095be:	4b3a      	ldr	r3, [pc, #232]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	4a39      	ldr	r2, [pc, #228]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80095c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095ca:	f7fb ffa5 	bl	8005518 <HAL_GetTick>
 80095ce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095d0:	e009      	b.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095d2:	f7fb ffa1 	bl	8005518 <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b02      	cmp	r3, #2
 80095de:	d902      	bls.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80095e0:	2303      	movs	r3, #3
 80095e2:	74fb      	strb	r3, [r7, #19]
        break;
 80095e4:	e005      	b.n	80095f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80095e6:	4b30      	ldr	r3, [pc, #192]	@ (80096a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d0ef      	beq.n	80095d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80095f2:	7cfb      	ldrb	r3, [r7, #19]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d159      	bne.n	80096ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095f8:	4b2a      	ldr	r3, [pc, #168]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009602:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01e      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	429a      	cmp	r2, r3
 8009612:	d019      	beq.n	8009648 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009614:	4b23      	ldr	r3, [pc, #140]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009616:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800961a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800961e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009620:	4b20      	ldr	r3, [pc, #128]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009626:	4a1f      	ldr	r2, [pc, #124]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800962c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009630:	4b1c      	ldr	r3, [pc, #112]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009636:	4a1b      	ldr	r2, [pc, #108]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009638:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800963c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009640:	4a18      	ldr	r2, [pc, #96]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	f003 0301 	and.w	r3, r3, #1
 800964e:	2b00      	cmp	r3, #0
 8009650:	d016      	beq.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009652:	f7fb ff61 	bl	8005518 <HAL_GetTick>
 8009656:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009658:	e00b      	b.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800965a:	f7fb ff5d 	bl	8005518 <HAL_GetTick>
 800965e:	4602      	mov	r2, r0
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	1ad3      	subs	r3, r2, r3
 8009664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009668:	4293      	cmp	r3, r2
 800966a:	d902      	bls.n	8009672 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800966c:	2303      	movs	r3, #3
 800966e:	74fb      	strb	r3, [r7, #19]
            break;
 8009670:	e006      	b.n	8009680 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009672:	4b0c      	ldr	r3, [pc, #48]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009678:	f003 0302 	and.w	r3, r3, #2
 800967c:	2b00      	cmp	r3, #0
 800967e:	d0ec      	beq.n	800965a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8009680:	7cfb      	ldrb	r3, [r7, #19]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d10b      	bne.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009686:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800968c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009694:	4903      	ldr	r1, [pc, #12]	@ (80096a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009696:	4313      	orrs	r3, r2
 8009698:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800969c:	e008      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800969e:	7cfb      	ldrb	r3, [r7, #19]
 80096a0:	74bb      	strb	r3, [r7, #18]
 80096a2:	e005      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80096a4:	40021000 	.word	0x40021000
 80096a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096ac:	7cfb      	ldrb	r3, [r7, #19]
 80096ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80096b0:	7c7b      	ldrb	r3, [r7, #17]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d105      	bne.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80096b6:	4ba7      	ldr	r3, [pc, #668]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096ba:	4aa6      	ldr	r2, [pc, #664]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80096c0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 0301 	and.w	r3, r3, #1
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d00a      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096ce:	4ba1      	ldr	r3, [pc, #644]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096d4:	f023 0203 	bic.w	r2, r3, #3
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	499d      	ldr	r1, [pc, #628]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096de:	4313      	orrs	r3, r2
 80096e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096f0:	4b98      	ldr	r3, [pc, #608]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80096f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80096f6:	f023 020c 	bic.w	r2, r3, #12
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	4995      	ldr	r1, [pc, #596]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009700:	4313      	orrs	r3, r2
 8009702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0304 	and.w	r3, r3, #4
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009712:	4b90      	ldr	r3, [pc, #576]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009714:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009718:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	498c      	ldr	r1, [pc, #560]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009722:	4313      	orrs	r3, r2
 8009724:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00a      	beq.n	800974a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009734:	4b87      	ldr	r3, [pc, #540]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800973a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	4984      	ldr	r1, [pc, #528]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009744:	4313      	orrs	r3, r2
 8009746:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0310 	and.w	r3, r3, #16
 8009752:	2b00      	cmp	r3, #0
 8009754:	d00a      	beq.n	800976c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009756:	4b7f      	ldr	r3, [pc, #508]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009758:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800975c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	695b      	ldr	r3, [r3, #20]
 8009764:	497b      	ldr	r1, [pc, #492]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009766:	4313      	orrs	r3, r2
 8009768:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	f003 0320 	and.w	r3, r3, #32
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00a      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009778:	4b76      	ldr	r3, [pc, #472]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800977a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800977e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	4973      	ldr	r1, [pc, #460]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009796:	2b00      	cmp	r3, #0
 8009798:	d00a      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800979a:	4b6e      	ldr	r3, [pc, #440]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800979c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097a0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	496a      	ldr	r1, [pc, #424]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097aa:	4313      	orrs	r3, r2
 80097ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d00a      	beq.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80097bc:	4b65      	ldr	r3, [pc, #404]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097c2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6a1b      	ldr	r3, [r3, #32]
 80097ca:	4962      	ldr	r1, [pc, #392]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097cc:	4313      	orrs	r3, r2
 80097ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00a      	beq.n	80097f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80097de:	4b5d      	ldr	r3, [pc, #372]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ec:	4959      	ldr	r1, [pc, #356]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80097ee:	4313      	orrs	r3, r2
 80097f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d00a      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009800:	4b54      	ldr	r3, [pc, #336]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009806:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800980e:	4951      	ldr	r1, [pc, #324]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009810:	4313      	orrs	r3, r2
 8009812:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800981e:	2b00      	cmp	r3, #0
 8009820:	d015      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009822:	4b4c      	ldr	r3, [pc, #304]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009828:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009830:	4948      	ldr	r1, [pc, #288]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009832:	4313      	orrs	r3, r2
 8009834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800983c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009840:	d105      	bne.n	800984e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009842:	4b44      	ldr	r3, [pc, #272]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	4a43      	ldr	r2, [pc, #268]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009848:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800984c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009856:	2b00      	cmp	r3, #0
 8009858:	d015      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800985a:	4b3e      	ldr	r3, [pc, #248]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800985c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009860:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009868:	493a      	ldr	r1, [pc, #232]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800986a:	4313      	orrs	r3, r2
 800986c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009874:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009878:	d105      	bne.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800987a:	4b36      	ldr	r3, [pc, #216]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800987c:	68db      	ldr	r3, [r3, #12]
 800987e:	4a35      	ldr	r2, [pc, #212]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009880:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009884:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800988e:	2b00      	cmp	r3, #0
 8009890:	d015      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009892:	4b30      	ldr	r3, [pc, #192]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009894:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009898:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098a0:	492c      	ldr	r1, [pc, #176]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80098b0:	d105      	bne.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098b2:	4b28      	ldr	r3, [pc, #160]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	4a27      	ldr	r2, [pc, #156]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098bc:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d015      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80098ca:	4b22      	ldr	r3, [pc, #136]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098d8:	491e      	ldr	r1, [pc, #120]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80098e8:	d105      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80098ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	4a19      	ldr	r2, [pc, #100]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80098f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098f4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d015      	beq.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009902:	4b14      	ldr	r3, [pc, #80]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009908:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009910:	4910      	ldr	r1, [pc, #64]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009912:	4313      	orrs	r3, r2
 8009914:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800991c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009920:	d105      	bne.n	800992e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009922:	4b0c      	ldr	r3, [pc, #48]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	4a0b      	ldr	r2, [pc, #44]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8009928:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800992c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d018      	beq.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800993c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009940:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009948:	4902      	ldr	r1, [pc, #8]	@ (8009954 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800994a:	4313      	orrs	r3, r2
 800994c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	e001      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009954:	40021000 	.word	0x40021000
 8009958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800995a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800995e:	d105      	bne.n	800996c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009960:	4b21      	ldr	r3, [pc, #132]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	4a20      	ldr	r2, [pc, #128]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009966:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800996a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009974:	2b00      	cmp	r3, #0
 8009976:	d015      	beq.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009978:	4b1b      	ldr	r3, [pc, #108]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009986:	4918      	ldr	r1, [pc, #96]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009996:	d105      	bne.n	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009998:	4b13      	ldr	r3, [pc, #76]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800999a:	68db      	ldr	r3, [r3, #12]
 800999c:	4a12      	ldr	r2, [pc, #72]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800999e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80099a2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d015      	beq.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80099b0:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80099b6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099be:	490a      	ldr	r1, [pc, #40]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099c0:	4313      	orrs	r3, r2
 80099c2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099ce:	d105      	bne.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099d0:	4b05      	ldr	r3, [pc, #20]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	4a04      	ldr	r2, [pc, #16]	@ (80099e8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80099d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099da:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80099dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3718      	adds	r7, #24
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40021000 	.word	0x40021000

080099ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d101      	bne.n	80099fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099fa:	2301      	movs	r3, #1
 80099fc:	e09d      	b.n	8009b3a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d108      	bne.n	8009a18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009a0e:	d009      	beq.n	8009a24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2200      	movs	r2, #0
 8009a14:	61da      	str	r2, [r3, #28]
 8009a16:	e005      	b.n	8009a24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2200      	movs	r2, #0
 8009a22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2200      	movs	r2, #0
 8009a28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d106      	bne.n	8009a44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2200      	movs	r2, #0
 8009a3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f7fb fada 	bl	8004ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a64:	d902      	bls.n	8009a6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009a66:	2300      	movs	r3, #0
 8009a68:	60fb      	str	r3, [r7, #12]
 8009a6a:	e002      	b.n	8009a72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009a70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	68db      	ldr	r3, [r3, #12]
 8009a76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8009a7a:	d007      	beq.n	8009a8c <HAL_SPI_Init+0xa0>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009a84:	d002      	beq.n	8009a8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009a9c:	431a      	orrs	r2, r3
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	691b      	ldr	r3, [r3, #16]
 8009aa2:	f003 0302 	and.w	r3, r3, #2
 8009aa6:	431a      	orrs	r2, r3
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	695b      	ldr	r3, [r3, #20]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	699b      	ldr	r3, [r3, #24]
 8009ab6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009aba:	431a      	orrs	r2, r3
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	69db      	ldr	r3, [r3, #28]
 8009ac0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009ac4:	431a      	orrs	r2, r3
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ace:	ea42 0103 	orr.w	r1, r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ad6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	430a      	orrs	r2, r1
 8009ae0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	699b      	ldr	r3, [r3, #24]
 8009ae6:	0c1b      	lsrs	r3, r3, #16
 8009ae8:	f003 0204 	and.w	r2, r3, #4
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	431a      	orrs	r2, r3
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009afa:	f003 0308 	and.w	r3, r3, #8
 8009afe:	431a      	orrs	r2, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8009b08:	ea42 0103 	orr.w	r1, r2, r3
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69da      	ldr	r2, [r3, #28]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009b28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8009b38:	2300      	movs	r3, #0
}
 8009b3a:	4618      	mov	r0, r3
 8009b3c:	3710      	adds	r7, #16
 8009b3e:	46bd      	mov	sp, r7
 8009b40:	bd80      	pop	{r7, pc}

08009b42 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009b42:	b580      	push	{r7, lr}
 8009b44:	b08a      	sub	sp, #40	@ 0x28
 8009b46:	af00      	add	r7, sp, #0
 8009b48:	60f8      	str	r0, [r7, #12]
 8009b4a:	60b9      	str	r1, [r7, #8]
 8009b4c:	607a      	str	r2, [r7, #4]
 8009b4e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009b50:	2301      	movs	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d101      	bne.n	8009b68 <HAL_SPI_TransmitReceive+0x26>
 8009b64:	2302      	movs	r3, #2
 8009b66:	e20a      	b.n	8009f7e <HAL_SPI_TransmitReceive+0x43c>
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009b70:	f7fb fcd2 	bl	8005518 <HAL_GetTick>
 8009b74:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009b7c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	685b      	ldr	r3, [r3, #4]
 8009b82:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8009b84:	887b      	ldrh	r3, [r7, #2]
 8009b86:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8009b88:	887b      	ldrh	r3, [r7, #2]
 8009b8a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009b8c:	7efb      	ldrb	r3, [r7, #27]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d00e      	beq.n	8009bb0 <HAL_SPI_TransmitReceive+0x6e>
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009b98:	d106      	bne.n	8009ba8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	689b      	ldr	r3, [r3, #8]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d102      	bne.n	8009ba8 <HAL_SPI_TransmitReceive+0x66>
 8009ba2:	7efb      	ldrb	r3, [r7, #27]
 8009ba4:	2b04      	cmp	r3, #4
 8009ba6:	d003      	beq.n	8009bb0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009ba8:	2302      	movs	r3, #2
 8009baa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009bae:	e1e0      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x80>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d002      	beq.n	8009bc2 <HAL_SPI_TransmitReceive+0x80>
 8009bbc:	887b      	ldrh	r3, [r7, #2]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d103      	bne.n	8009bca <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    goto error;
 8009bc8:	e1d3      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b04      	cmp	r3, #4
 8009bd4:	d003      	beq.n	8009bde <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2205      	movs	r2, #5
 8009bda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	2200      	movs	r2, #0
 8009be2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	887a      	ldrh	r2, [r7, #2]
 8009bee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	887a      	ldrh	r2, [r7, #2]
 8009bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	68ba      	ldr	r2, [r7, #8]
 8009bfe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	887a      	ldrh	r2, [r7, #2]
 8009c04:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	887a      	ldrh	r2, [r7, #2]
 8009c0a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	68db      	ldr	r3, [r3, #12]
 8009c1c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c20:	d802      	bhi.n	8009c28 <HAL_SPI_TransmitReceive+0xe6>
 8009c22:	8a3b      	ldrh	r3, [r7, #16]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d908      	bls.n	8009c3a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009c36:	605a      	str	r2, [r3, #4]
 8009c38:	e007      	b.n	8009c4a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009c48:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c54:	2b40      	cmp	r3, #64	@ 0x40
 8009c56:	d007      	beq.n	8009c68 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681a      	ldr	r2, [r3, #0]
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	68db      	ldr	r3, [r3, #12]
 8009c6c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8009c70:	f240 8081 	bls.w	8009d76 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d002      	beq.n	8009c82 <HAL_SPI_TransmitReceive+0x140>
 8009c7c:	8a7b      	ldrh	r3, [r7, #18]
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	d16d      	bne.n	8009d5e <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c86:	881a      	ldrh	r2, [r3, #0]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009c92:	1c9a      	adds	r2, r3, #2
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ca6:	e05a      	b.n	8009d5e <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d11b      	bne.n	8009cee <HAL_SPI_TransmitReceive+0x1ac>
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d016      	beq.n	8009cee <HAL_SPI_TransmitReceive+0x1ac>
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc2:	2b01      	cmp	r3, #1
 8009cc4:	d113      	bne.n	8009cee <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cca:	881a      	ldrh	r2, [r3, #0]
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd6:	1c9a      	adds	r2, r3, #2
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ce0:	b29b      	uxth	r3, r3
 8009ce2:	3b01      	subs	r3, #1
 8009ce4:	b29a      	uxth	r2, r3
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	f003 0301 	and.w	r3, r3, #1
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d11c      	bne.n	8009d36 <HAL_SPI_TransmitReceive+0x1f4>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d02:	b29b      	uxth	r3, r3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d016      	beq.n	8009d36 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	68da      	ldr	r2, [r3, #12]
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d12:	b292      	uxth	r2, r2
 8009d14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d1a:	1c9a      	adds	r2, r3, #2
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d26:	b29b      	uxth	r3, r3
 8009d28:	3b01      	subs	r3, #1
 8009d2a:	b29a      	uxth	r2, r3
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009d32:	2301      	movs	r3, #1
 8009d34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009d36:	f7fb fbef 	bl	8005518 <HAL_GetTick>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	69fb      	ldr	r3, [r7, #28]
 8009d3e:	1ad3      	subs	r3, r2, r3
 8009d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d80b      	bhi.n	8009d5e <HAL_SPI_TransmitReceive+0x21c>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d4c:	d007      	beq.n	8009d5e <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8009d4e:	2303      	movs	r3, #3
 8009d50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009d5c:	e109      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d62:	b29b      	uxth	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d19f      	bne.n	8009ca8 <HAL_SPI_TransmitReceive+0x166>
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009d6e:	b29b      	uxth	r3, r3
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d199      	bne.n	8009ca8 <HAL_SPI_TransmitReceive+0x166>
 8009d74:	e0e3      	b.n	8009f3e <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d003      	beq.n	8009d86 <HAL_SPI_TransmitReceive+0x244>
 8009d7e:	8a7b      	ldrh	r3, [r7, #18]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	f040 80cf 	bne.w	8009f24 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d912      	bls.n	8009db6 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d94:	881a      	ldrh	r2, [r3, #0]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009da0:	1c9a      	adds	r2, r3, #2
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	3b02      	subs	r3, #2
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009db4:	e0b6      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	330c      	adds	r3, #12
 8009dc0:	7812      	ldrb	r2, [r2, #0]
 8009dc2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009dc8:	1c5a      	adds	r2, r3, #1
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	3b01      	subs	r3, #1
 8009dd6:	b29a      	uxth	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009ddc:	e0a2      	b.n	8009f24 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d134      	bne.n	8009e56 <HAL_SPI_TransmitReceive+0x314>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009df0:	b29b      	uxth	r3, r3
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d02f      	beq.n	8009e56 <HAL_SPI_TransmitReceive+0x314>
 8009df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009df8:	2b01      	cmp	r3, #1
 8009dfa:	d12c      	bne.n	8009e56 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d912      	bls.n	8009e2c <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e0a:	881a      	ldrh	r2, [r3, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e16:	1c9a      	adds	r2, r3, #2
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	3b02      	subs	r3, #2
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e2a:	e012      	b.n	8009e52 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	330c      	adds	r3, #12
 8009e36:	7812      	ldrb	r2, [r2, #0]
 8009e38:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009e52:	2300      	movs	r3, #0
 8009e54:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	689b      	ldr	r3, [r3, #8]
 8009e5c:	f003 0301 	and.w	r3, r3, #1
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d148      	bne.n	8009ef6 <HAL_SPI_TransmitReceive+0x3b4>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e6a:	b29b      	uxth	r3, r3
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d042      	beq.n	8009ef6 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d923      	bls.n	8009ec4 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	68da      	ldr	r2, [r3, #12]
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e86:	b292      	uxth	r2, r2
 8009e88:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e8e:	1c9a      	adds	r2, r3, #2
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009e9a:	b29b      	uxth	r3, r3
 8009e9c:	3b02      	subs	r3, #2
 8009e9e:	b29a      	uxth	r2, r3
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d81f      	bhi.n	8009ef2 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	e016      	b.n	8009ef2 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f103 020c 	add.w	r2, r3, #12
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ed0:	7812      	ldrb	r2, [r2, #0]
 8009ed2:	b2d2      	uxtb	r2, r2
 8009ed4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ef6:	f7fb fb0f 	bl	8005518 <HAL_GetTick>
 8009efa:	4602      	mov	r2, r0
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	1ad3      	subs	r3, r2, r3
 8009f00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d803      	bhi.n	8009f0e <HAL_SPI_TransmitReceive+0x3cc>
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f0c:	d102      	bne.n	8009f14 <HAL_SPI_TransmitReceive+0x3d2>
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d107      	bne.n	8009f24 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8009f14:	2303      	movs	r3, #3
 8009f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        goto error;
 8009f22:	e026      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	f47f af57 	bne.w	8009dde <HAL_SPI_TransmitReceive+0x29c>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	f47f af50 	bne.w	8009dde <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f3e:	69fa      	ldr	r2, [r7, #28]
 8009f40:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 f93e 	bl	800a1c4 <SPI_EndRxTxTransaction>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2220      	movs	r2, #32
 8009f58:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d003      	beq.n	8009f6a <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8009f62:	2301      	movs	r3, #1
 8009f64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009f68:	e003      	b.n	8009f72 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8009f7a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3728      	adds	r7, #40	@ 0x28
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
	...

08009f88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	60b9      	str	r1, [r7, #8]
 8009f92:	603b      	str	r3, [r7, #0]
 8009f94:	4613      	mov	r3, r2
 8009f96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009f98:	f7fb fabe 	bl	8005518 <HAL_GetTick>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa0:	1a9b      	subs	r3, r3, r2
 8009fa2:	683a      	ldr	r2, [r7, #0]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009fa8:	f7fb fab6 	bl	8005518 <HAL_GetTick>
 8009fac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009fae:	4b39      	ldr	r3, [pc, #228]	@ (800a094 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	015b      	lsls	r3, r3, #5
 8009fb4:	0d1b      	lsrs	r3, r3, #20
 8009fb6:	69fa      	ldr	r2, [r7, #28]
 8009fb8:	fb02 f303 	mul.w	r3, r2, r3
 8009fbc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009fbe:	e054      	b.n	800a06a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc6:	d050      	beq.n	800a06a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009fc8:	f7fb faa6 	bl	8005518 <HAL_GetTick>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	69bb      	ldr	r3, [r7, #24]
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	69fa      	ldr	r2, [r7, #28]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d902      	bls.n	8009fde <SPI_WaitFlagStateUntilTimeout+0x56>
 8009fd8:	69fb      	ldr	r3, [r7, #28]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d13d      	bne.n	800a05a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8009fec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009ff6:	d111      	bne.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a000:	d004      	beq.n	800a00c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a00a:	d107      	bne.n	800a01c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a01a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a020:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a024:	d10f      	bne.n	800a046 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a034:	601a      	str	r2, [r3, #0]
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	681a      	ldr	r2, [r3, #0]
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a044:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e017      	b.n	800a08a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d101      	bne.n	800a064 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	3b01      	subs	r3, #1
 800a068:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	689a      	ldr	r2, [r3, #8]
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	4013      	ands	r3, r2
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	429a      	cmp	r2, r3
 800a078:	bf0c      	ite	eq
 800a07a:	2301      	moveq	r3, #1
 800a07c:	2300      	movne	r3, #0
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	461a      	mov	r2, r3
 800a082:	79fb      	ldrb	r3, [r7, #7]
 800a084:	429a      	cmp	r2, r3
 800a086:	d19b      	bne.n	8009fc0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a088:	2300      	movs	r3, #0
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3720      	adds	r7, #32
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}
 800a092:	bf00      	nop
 800a094:	200000bc 	.word	0x200000bc

0800a098 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b08a      	sub	sp, #40	@ 0x28
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800a0aa:	f7fb fa35 	bl	8005518 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0b2:	1a9b      	subs	r3, r3, r2
 800a0b4:	683a      	ldr	r2, [r7, #0]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800a0ba:	f7fb fa2d 	bl	8005518 <HAL_GetTick>
 800a0be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	330c      	adds	r3, #12
 800a0c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800a0c8:	4b3d      	ldr	r3, [pc, #244]	@ (800a1c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4413      	add	r3, r2
 800a0d2:	00da      	lsls	r2, r3, #3
 800a0d4:	1ad3      	subs	r3, r2, r3
 800a0d6:	0d1b      	lsrs	r3, r3, #20
 800a0d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a0da:	fb02 f303 	mul.w	r3, r2, r3
 800a0de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800a0e0:	e060      	b.n	800a1a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800a0e8:	d107      	bne.n	800a0fa <SPI_WaitFifoStateUntilTimeout+0x62>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800a0f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a100:	d050      	beq.n	800a1a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a102:	f7fb fa09 	bl	8005518 <HAL_GetTick>
 800a106:	4602      	mov	r2, r0
 800a108:	6a3b      	ldr	r3, [r7, #32]
 800a10a:	1ad3      	subs	r3, r2, r3
 800a10c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a10e:	429a      	cmp	r2, r3
 800a110:	d902      	bls.n	800a118 <SPI_WaitFifoStateUntilTimeout+0x80>
 800a112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	d13d      	bne.n	800a194 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a126:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a130:	d111      	bne.n	800a156 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a13a:	d004      	beq.n	800a146 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a144:	d107      	bne.n	800a156 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a154:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a15a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a15e:	d10f      	bne.n	800a180 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	681a      	ldr	r2, [r3, #0]
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a16e:	601a      	str	r2, [r3, #0]
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681a      	ldr	r2, [r3, #0]
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a17e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e010      	b.n	800a1b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	3b01      	subs	r3, #1
 800a1a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	689a      	ldr	r2, [r3, #8]
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	4013      	ands	r3, r2
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d196      	bne.n	800a0e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800a1b4:	2300      	movs	r3, #0
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3728      	adds	r7, #40	@ 0x28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200000bc 	.word	0x200000bc

0800a1c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af02      	add	r7, sp, #8
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff ff5b 	bl	800a098 <SPI_WaitFifoStateUntilTimeout>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d007      	beq.n	800a1f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a1ec:	f043 0220 	orr.w	r2, r3, #32
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a1f4:	2303      	movs	r3, #3
 800a1f6:	e027      	b.n	800a248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	2200      	movs	r2, #0
 800a200:	2180      	movs	r1, #128	@ 0x80
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f7ff fec0 	bl	8009f88 <SPI_WaitFlagStateUntilTimeout>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d007      	beq.n	800a21e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a212:	f043 0220 	orr.w	r2, r3, #32
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a21a:	2303      	movs	r3, #3
 800a21c:	e014      	b.n	800a248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	9300      	str	r3, [sp, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	2200      	movs	r2, #0
 800a226:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	f7ff ff34 	bl	800a098 <SPI_WaitFifoStateUntilTimeout>
 800a230:	4603      	mov	r3, r0
 800a232:	2b00      	cmp	r3, #0
 800a234:	d007      	beq.n	800a246 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a23a:	f043 0220 	orr.w	r2, r3, #32
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e000      	b.n	800a248 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b082      	sub	sp, #8
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a25e:	2301      	movs	r3, #1
 800a260:	e049      	b.n	800a2f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a268:	b2db      	uxtb	r3, r3
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d106      	bne.n	800a27c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f7fa ff00 	bl	800507c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681a      	ldr	r2, [r3, #0]
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3304      	adds	r3, #4
 800a28c:	4619      	mov	r1, r3
 800a28e:	4610      	mov	r0, r2
 800a290:	f000 fe04 	bl	800ae9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2201      	movs	r2, #1
 800a298:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	2201      	movs	r2, #1
 800a2a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2201      	movs	r2, #1
 800a2a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2201      	movs	r2, #1
 800a2b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2201      	movs	r2, #1
 800a2b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2201      	movs	r2, #1
 800a2e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a2f4:	2300      	movs	r3, #0
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3708      	adds	r7, #8
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}
	...

0800a300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a300:	b480      	push	{r7}
 800a302:	b085      	sub	sp, #20
 800a304:	af00      	add	r7, sp, #0
 800a306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b01      	cmp	r3, #1
 800a312:	d001      	beq.n	800a318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a314:	2301      	movs	r3, #1
 800a316:	e04f      	b.n	800a3b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2202      	movs	r2, #2
 800a31c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f042 0201 	orr.w	r2, r2, #1
 800a32e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a23      	ldr	r2, [pc, #140]	@ (800a3c4 <HAL_TIM_Base_Start_IT+0xc4>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d01d      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a342:	d018      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a1f      	ldr	r2, [pc, #124]	@ (800a3c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d013      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a1e      	ldr	r2, [pc, #120]	@ (800a3cc <HAL_TIM_Base_Start_IT+0xcc>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d00e      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a1c      	ldr	r2, [pc, #112]	@ (800a3d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d009      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a1b      	ldr	r2, [pc, #108]	@ (800a3d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d004      	beq.n	800a376 <HAL_TIM_Base_Start_IT+0x76>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a19      	ldr	r2, [pc, #100]	@ (800a3d8 <HAL_TIM_Base_Start_IT+0xd8>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d115      	bne.n	800a3a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	689a      	ldr	r2, [r3, #8]
 800a37c:	4b17      	ldr	r3, [pc, #92]	@ (800a3dc <HAL_TIM_Base_Start_IT+0xdc>)
 800a37e:	4013      	ands	r3, r2
 800a380:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2b06      	cmp	r3, #6
 800a386:	d015      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0xb4>
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a38e:	d011      	beq.n	800a3b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f042 0201 	orr.w	r2, r2, #1
 800a39e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3a0:	e008      	b.n	800a3b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f042 0201 	orr.w	r2, r2, #1
 800a3b0:	601a      	str	r2, [r3, #0]
 800a3b2:	e000      	b.n	800a3b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3714      	adds	r7, #20
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr
 800a3c4:	40012c00 	.word	0x40012c00
 800a3c8:	40000400 	.word	0x40000400
 800a3cc:	40000800 	.word	0x40000800
 800a3d0:	40013400 	.word	0x40013400
 800a3d4:	40014000 	.word	0x40014000
 800a3d8:	40015000 	.word	0x40015000
 800a3dc:	00010007 	.word	0x00010007

0800a3e0 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b082      	sub	sp, #8
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e049      	b.n	800a486 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f000 f841 	bl	800a48e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2202      	movs	r2, #2
 800a410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	3304      	adds	r3, #4
 800a41c:	4619      	mov	r1, r3
 800a41e:	4610      	mov	r0, r2
 800a420:	f000 fd3c 	bl	800ae9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2201      	movs	r2, #1
 800a438:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	2201      	movs	r2, #1
 800a440:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2201      	movs	r2, #1
 800a448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2201      	movs	r2, #1
 800a460:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2201      	movs	r2, #1
 800a468:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2201      	movs	r2, #1
 800a470:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a484:	2300      	movs	r3, #0
}
 800a486:	4618      	mov	r0, r3
 800a488:	3708      	adds	r7, #8
 800a48a:	46bd      	mov	sp, r7
 800a48c:	bd80      	pop	{r7, pc}

0800a48e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a4a2:	b580      	push	{r7, lr}
 800a4a4:	b082      	sub	sp, #8
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d101      	bne.n	800a4b4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a4b0:	2301      	movs	r3, #1
 800a4b2:	e049      	b.n	800a548 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4ba:	b2db      	uxtb	r3, r3
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d106      	bne.n	800a4ce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 f841 	bl	800a550 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2202      	movs	r2, #2
 800a4d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681a      	ldr	r2, [r3, #0]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	3304      	adds	r3, #4
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4610      	mov	r0, r2
 800a4e2:	f000 fcdb 	bl	800ae9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2201      	movs	r2, #1
 800a512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	2201      	movs	r2, #1
 800a51a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a546:	2300      	movs	r3, #0
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3708      	adds	r7, #8
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bd80      	pop	{r7, pc}

0800a550 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a550:	b480      	push	{r7}
 800a552:	b083      	sub	sp, #12
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a558:	bf00      	nop
 800a55a:	370c      	adds	r7, #12
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr

0800a564 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a56e:	683b      	ldr	r3, [r7, #0]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <HAL_TIM_PWM_Start+0x24>
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	2b01      	cmp	r3, #1
 800a57e:	bf14      	ite	ne
 800a580:	2301      	movne	r3, #1
 800a582:	2300      	moveq	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	e03c      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b04      	cmp	r3, #4
 800a58c:	d109      	bne.n	800a5a2 <HAL_TIM_PWM_Start+0x3e>
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b01      	cmp	r3, #1
 800a598:	bf14      	ite	ne
 800a59a:	2301      	movne	r3, #1
 800a59c:	2300      	moveq	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	e02f      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	2b08      	cmp	r3, #8
 800a5a6:	d109      	bne.n	800a5bc <HAL_TIM_PWM_Start+0x58>
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a5ae:	b2db      	uxtb	r3, r3
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	bf14      	ite	ne
 800a5b4:	2301      	movne	r3, #1
 800a5b6:	2300      	moveq	r3, #0
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	e022      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b0c      	cmp	r3, #12
 800a5c0:	d109      	bne.n	800a5d6 <HAL_TIM_PWM_Start+0x72>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	bf14      	ite	ne
 800a5ce:	2301      	movne	r3, #1
 800a5d0:	2300      	moveq	r3, #0
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	e015      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	2b10      	cmp	r3, #16
 800a5da:	d109      	bne.n	800a5f0 <HAL_TIM_PWM_Start+0x8c>
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a5e2:	b2db      	uxtb	r3, r3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	bf14      	ite	ne
 800a5e8:	2301      	movne	r3, #1
 800a5ea:	2300      	moveq	r3, #0
 800a5ec:	b2db      	uxtb	r3, r3
 800a5ee:	e008      	b.n	800a602 <HAL_TIM_PWM_Start+0x9e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800a5f6:	b2db      	uxtb	r3, r3
 800a5f8:	2b01      	cmp	r3, #1
 800a5fa:	bf14      	ite	ne
 800a5fc:	2301      	movne	r3, #1
 800a5fe:	2300      	moveq	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	2b00      	cmp	r3, #0
 800a604:	d001      	beq.n	800a60a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e0a1      	b.n	800a74e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d104      	bne.n	800a61a <HAL_TIM_PWM_Start+0xb6>
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a618:	e023      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	2b04      	cmp	r3, #4
 800a61e:	d104      	bne.n	800a62a <HAL_TIM_PWM_Start+0xc6>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2202      	movs	r2, #2
 800a624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a628:	e01b      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	2b08      	cmp	r3, #8
 800a62e:	d104      	bne.n	800a63a <HAL_TIM_PWM_Start+0xd6>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2202      	movs	r2, #2
 800a634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a638:	e013      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	2b0c      	cmp	r3, #12
 800a63e:	d104      	bne.n	800a64a <HAL_TIM_PWM_Start+0xe6>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2202      	movs	r2, #2
 800a644:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800a648:	e00b      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	2b10      	cmp	r3, #16
 800a64e:	d104      	bne.n	800a65a <HAL_TIM_PWM_Start+0xf6>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2202      	movs	r2, #2
 800a654:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a658:	e003      	b.n	800a662 <HAL_TIM_PWM_Start+0xfe>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2202      	movs	r2, #2
 800a65e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2201      	movs	r2, #1
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 f886 	bl	800b77c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a38      	ldr	r2, [pc, #224]	@ (800a758 <HAL_TIM_PWM_Start+0x1f4>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d018      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a37      	ldr	r2, [pc, #220]	@ (800a75c <HAL_TIM_PWM_Start+0x1f8>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d013      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a35      	ldr	r2, [pc, #212]	@ (800a760 <HAL_TIM_PWM_Start+0x1fc>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d00e      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	4a34      	ldr	r2, [pc, #208]	@ (800a764 <HAL_TIM_PWM_Start+0x200>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d009      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a32      	ldr	r2, [pc, #200]	@ (800a768 <HAL_TIM_PWM_Start+0x204>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d004      	beq.n	800a6ac <HAL_TIM_PWM_Start+0x148>
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	4a31      	ldr	r2, [pc, #196]	@ (800a76c <HAL_TIM_PWM_Start+0x208>)
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d101      	bne.n	800a6b0 <HAL_TIM_PWM_Start+0x14c>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	e000      	b.n	800a6b2 <HAL_TIM_PWM_Start+0x14e>
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d007      	beq.n	800a6c6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a6c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a23      	ldr	r2, [pc, #140]	@ (800a758 <HAL_TIM_PWM_Start+0x1f4>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d01d      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6d8:	d018      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a24      	ldr	r2, [pc, #144]	@ (800a770 <HAL_TIM_PWM_Start+0x20c>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d013      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a22      	ldr	r2, [pc, #136]	@ (800a774 <HAL_TIM_PWM_Start+0x210>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d00e      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	4a1a      	ldr	r2, [pc, #104]	@ (800a75c <HAL_TIM_PWM_Start+0x1f8>)
 800a6f4:	4293      	cmp	r3, r2
 800a6f6:	d009      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a18      	ldr	r2, [pc, #96]	@ (800a760 <HAL_TIM_PWM_Start+0x1fc>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d004      	beq.n	800a70c <HAL_TIM_PWM_Start+0x1a8>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	4a19      	ldr	r2, [pc, #100]	@ (800a76c <HAL_TIM_PWM_Start+0x208>)
 800a708:	4293      	cmp	r3, r2
 800a70a:	d115      	bne.n	800a738 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	689a      	ldr	r2, [r3, #8]
 800a712:	4b19      	ldr	r3, [pc, #100]	@ (800a778 <HAL_TIM_PWM_Start+0x214>)
 800a714:	4013      	ands	r3, r2
 800a716:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b06      	cmp	r3, #6
 800a71c:	d015      	beq.n	800a74a <HAL_TIM_PWM_Start+0x1e6>
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a724:	d011      	beq.n	800a74a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f042 0201 	orr.w	r2, r2, #1
 800a734:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a736:	e008      	b.n	800a74a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f042 0201 	orr.w	r2, r2, #1
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	e000      	b.n	800a74c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a74a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a74c:	2300      	movs	r3, #0
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3710      	adds	r7, #16
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	40012c00 	.word	0x40012c00
 800a75c:	40013400 	.word	0x40013400
 800a760:	40014000 	.word	0x40014000
 800a764:	40014400 	.word	0x40014400
 800a768:	40014800 	.word	0x40014800
 800a76c:	40015000 	.word	0x40015000
 800a770:	40000400 	.word	0x40000400
 800a774:	40000800 	.word	0x40000800
 800a778:	00010007 	.word	0x00010007

0800a77c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b084      	sub	sp, #16
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	691b      	ldr	r3, [r3, #16]
 800a792:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f003 0302 	and.w	r3, r3, #2
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d020      	beq.n	800a7e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d01b      	beq.n	800a7e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f06f 0202 	mvn.w	r2, #2
 800a7b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	f003 0303 	and.w	r3, r3, #3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7c6:	6878      	ldr	r0, [r7, #4]
 800a7c8:	f000 fb4a 	bl	800ae60 <HAL_TIM_IC_CaptureCallback>
 800a7cc:	e005      	b.n	800a7da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f000 fb3c 	bl	800ae4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7d4:	6878      	ldr	r0, [r7, #4]
 800a7d6:	f000 fb4d 	bl	800ae74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a7e0:	68bb      	ldr	r3, [r7, #8]
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d020      	beq.n	800a82c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f003 0304 	and.w	r3, r3, #4
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01b      	beq.n	800a82c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f06f 0204 	mvn.w	r2, #4
 800a7fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2202      	movs	r2, #2
 800a802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	699b      	ldr	r3, [r3, #24]
 800a80a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d003      	beq.n	800a81a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a812:	6878      	ldr	r0, [r7, #4]
 800a814:	f000 fb24 	bl	800ae60 <HAL_TIM_IC_CaptureCallback>
 800a818:	e005      	b.n	800a826 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	f000 fb16 	bl	800ae4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f000 fb27 	bl	800ae74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	f003 0308 	and.w	r3, r3, #8
 800a832:	2b00      	cmp	r3, #0
 800a834:	d020      	beq.n	800a878 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	f003 0308 	and.w	r3, r3, #8
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d01b      	beq.n	800a878 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f06f 0208 	mvn.w	r2, #8
 800a848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2204      	movs	r2, #4
 800a84e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	69db      	ldr	r3, [r3, #28]
 800a856:	f003 0303 	and.w	r3, r3, #3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d003      	beq.n	800a866 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f000 fafe 	bl	800ae60 <HAL_TIM_IC_CaptureCallback>
 800a864:	e005      	b.n	800a872 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 faf0 	bl	800ae4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fb01 	bl	800ae74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2200      	movs	r2, #0
 800a876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	f003 0310 	and.w	r3, r3, #16
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d020      	beq.n	800a8c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f003 0310 	and.w	r3, r3, #16
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01b      	beq.n	800a8c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f06f 0210 	mvn.w	r2, #16
 800a894:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2208      	movs	r2, #8
 800a89a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	69db      	ldr	r3, [r3, #28]
 800a8a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d003      	beq.n	800a8b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fad8 	bl	800ae60 <HAL_TIM_IC_CaptureCallback>
 800a8b0:	e005      	b.n	800a8be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 faca 	bl	800ae4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 fadb 	bl	800ae74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f003 0301 	and.w	r3, r3, #1
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00c      	beq.n	800a8e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f003 0301 	and.w	r3, r3, #1
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d007      	beq.n	800a8e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f06f 0201 	mvn.w	r2, #1
 800a8e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f7fa f946 	bl	8004b74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d104      	bne.n	800a8fc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d00c      	beq.n	800a916 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a902:	2b00      	cmp	r3, #0
 800a904:	d007      	beq.n	800a916 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800a90e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f001 f885 	bl	800ba20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d00c      	beq.n	800a93a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a926:	2b00      	cmp	r3, #0
 800a928:	d007      	beq.n	800a93a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800a932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f001 f87d 	bl	800ba34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a940:	2b00      	cmp	r3, #0
 800a942:	d00c      	beq.n	800a95e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d007      	beq.n	800a95e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fa95 	bl	800ae88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	f003 0320 	and.w	r3, r3, #32
 800a964:	2b00      	cmp	r3, #0
 800a966:	d00c      	beq.n	800a982 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f003 0320 	and.w	r3, r3, #32
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d007      	beq.n	800a982 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f06f 0220 	mvn.w	r2, #32
 800a97a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 f845 	bl	800ba0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d00c      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a992:	2b00      	cmp	r3, #0
 800a994:	d007      	beq.n	800a9a6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800a99e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f001 f851 	bl	800ba48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00c      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d007      	beq.n	800a9ca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800a9c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a9c4:	6878      	ldr	r0, [r7, #4]
 800a9c6:	f001 f849 	bl	800ba5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00c      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d007      	beq.n	800a9ee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800a9e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f001 f841 	bl	800ba70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00c      	beq.n	800aa12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d007      	beq.n	800aa12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800aa0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f001 f839 	bl	800ba84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
	...

0800aa1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b086      	sub	sp, #24
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d101      	bne.n	800aa3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e0ff      	b.n	800ac3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2b14      	cmp	r3, #20
 800aa46:	f200 80f0 	bhi.w	800ac2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800aa4a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800aa4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa50:	0800aaa5 	.word	0x0800aaa5
 800aa54:	0800ac2b 	.word	0x0800ac2b
 800aa58:	0800ac2b 	.word	0x0800ac2b
 800aa5c:	0800ac2b 	.word	0x0800ac2b
 800aa60:	0800aae5 	.word	0x0800aae5
 800aa64:	0800ac2b 	.word	0x0800ac2b
 800aa68:	0800ac2b 	.word	0x0800ac2b
 800aa6c:	0800ac2b 	.word	0x0800ac2b
 800aa70:	0800ab27 	.word	0x0800ab27
 800aa74:	0800ac2b 	.word	0x0800ac2b
 800aa78:	0800ac2b 	.word	0x0800ac2b
 800aa7c:	0800ac2b 	.word	0x0800ac2b
 800aa80:	0800ab67 	.word	0x0800ab67
 800aa84:	0800ac2b 	.word	0x0800ac2b
 800aa88:	0800ac2b 	.word	0x0800ac2b
 800aa8c:	0800ac2b 	.word	0x0800ac2b
 800aa90:	0800aba9 	.word	0x0800aba9
 800aa94:	0800ac2b 	.word	0x0800ac2b
 800aa98:	0800ac2b 	.word	0x0800ac2b
 800aa9c:	0800ac2b 	.word	0x0800ac2b
 800aaa0:	0800abe9 	.word	0x0800abe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	68b9      	ldr	r1, [r7, #8]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 faa0 	bl	800aff0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	699a      	ldr	r2, [r3, #24]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f042 0208 	orr.w	r2, r2, #8
 800aabe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	699a      	ldr	r2, [r3, #24]
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	f022 0204 	bic.w	r2, r2, #4
 800aace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	6999      	ldr	r1, [r3, #24]
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	691a      	ldr	r2, [r3, #16]
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	619a      	str	r2, [r3, #24]
      break;
 800aae2:	e0a5      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	68b9      	ldr	r1, [r7, #8]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f000 fb1a 	bl	800b124 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	699a      	ldr	r2, [r3, #24]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800aafe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	699a      	ldr	r2, [r3, #24]
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	6999      	ldr	r1, [r3, #24]
 800ab16:	68bb      	ldr	r3, [r7, #8]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	021a      	lsls	r2, r3, #8
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	619a      	str	r2, [r3, #24]
      break;
 800ab24:	e084      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	68b9      	ldr	r1, [r7, #8]
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	f000 fb8d 	bl	800b24c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	69da      	ldr	r2, [r3, #28]
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f042 0208 	orr.w	r2, r2, #8
 800ab40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	69da      	ldr	r2, [r3, #28]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f022 0204 	bic.w	r2, r2, #4
 800ab50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	69d9      	ldr	r1, [r3, #28]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	691a      	ldr	r2, [r3, #16]
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	430a      	orrs	r2, r1
 800ab62:	61da      	str	r2, [r3, #28]
      break;
 800ab64:	e064      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	68b9      	ldr	r1, [r7, #8]
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	f000 fbff 	bl	800b370 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	69da      	ldr	r2, [r3, #28]
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ab80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	69da      	ldr	r2, [r3, #28]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ab90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	69d9      	ldr	r1, [r3, #28]
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	021a      	lsls	r2, r3, #8
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	430a      	orrs	r2, r1
 800aba4:	61da      	str	r2, [r3, #28]
      break;
 800aba6:	e043      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68b9      	ldr	r1, [r7, #8]
 800abae:	4618      	mov	r0, r3
 800abb0:	f000 fc72 	bl	800b498 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	f042 0208 	orr.w	r2, r2, #8
 800abc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0204 	bic.w	r2, r2, #4
 800abd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691a      	ldr	r2, [r3, #16]
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	430a      	orrs	r2, r1
 800abe4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800abe6:	e023      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	68b9      	ldr	r1, [r7, #8]
 800abee:	4618      	mov	r0, r3
 800abf0:	f000 fcbc 	bl	800b56c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ac02:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac12:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ac1a:	68bb      	ldr	r3, [r7, #8]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	021a      	lsls	r2, r3, #8
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	430a      	orrs	r2, r1
 800ac26:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ac28:	e002      	b.n	800ac30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	75fb      	strb	r3, [r7, #23]
      break;
 800ac2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ac38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3718      	adds	r7, #24
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop

0800ac44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ac58:	2b01      	cmp	r3, #1
 800ac5a:	d101      	bne.n	800ac60 <HAL_TIM_ConfigClockSource+0x1c>
 800ac5c:	2302      	movs	r3, #2
 800ac5e:	e0e6      	b.n	800ae2e <HAL_TIM_ConfigClockSource+0x1ea>
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	689b      	ldr	r3, [r3, #8]
 800ac76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800ac7e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800ac82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ac8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	68ba      	ldr	r2, [r7, #8]
 800ac92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a67      	ldr	r2, [pc, #412]	@ (800ae38 <HAL_TIM_ConfigClockSource+0x1f4>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	f000 80b1 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800aca0:	4a65      	ldr	r2, [pc, #404]	@ (800ae38 <HAL_TIM_ConfigClockSource+0x1f4>)
 800aca2:	4293      	cmp	r3, r2
 800aca4:	f200 80b6 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800aca8:	4a64      	ldr	r2, [pc, #400]	@ (800ae3c <HAL_TIM_ConfigClockSource+0x1f8>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	f000 80a9 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800acb0:	4a62      	ldr	r2, [pc, #392]	@ (800ae3c <HAL_TIM_ConfigClockSource+0x1f8>)
 800acb2:	4293      	cmp	r3, r2
 800acb4:	f200 80ae 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800acb8:	4a61      	ldr	r2, [pc, #388]	@ (800ae40 <HAL_TIM_ConfigClockSource+0x1fc>)
 800acba:	4293      	cmp	r3, r2
 800acbc:	f000 80a1 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800acc0:	4a5f      	ldr	r2, [pc, #380]	@ (800ae40 <HAL_TIM_ConfigClockSource+0x1fc>)
 800acc2:	4293      	cmp	r3, r2
 800acc4:	f200 80a6 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800acc8:	4a5e      	ldr	r2, [pc, #376]	@ (800ae44 <HAL_TIM_ConfigClockSource+0x200>)
 800acca:	4293      	cmp	r3, r2
 800accc:	f000 8099 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800acd0:	4a5c      	ldr	r2, [pc, #368]	@ (800ae44 <HAL_TIM_ConfigClockSource+0x200>)
 800acd2:	4293      	cmp	r3, r2
 800acd4:	f200 809e 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800acd8:	4a5b      	ldr	r2, [pc, #364]	@ (800ae48 <HAL_TIM_ConfigClockSource+0x204>)
 800acda:	4293      	cmp	r3, r2
 800acdc:	f000 8091 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800ace0:	4a59      	ldr	r2, [pc, #356]	@ (800ae48 <HAL_TIM_ConfigClockSource+0x204>)
 800ace2:	4293      	cmp	r3, r2
 800ace4:	f200 8096 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ace8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800acec:	f000 8089 	beq.w	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800acf0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800acf4:	f200 808e 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800acf8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acfc:	d03e      	beq.n	800ad7c <HAL_TIM_ConfigClockSource+0x138>
 800acfe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ad02:	f200 8087 	bhi.w	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad0a:	f000 8086 	beq.w	800ae1a <HAL_TIM_ConfigClockSource+0x1d6>
 800ad0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad12:	d87f      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad14:	2b70      	cmp	r3, #112	@ 0x70
 800ad16:	d01a      	beq.n	800ad4e <HAL_TIM_ConfigClockSource+0x10a>
 800ad18:	2b70      	cmp	r3, #112	@ 0x70
 800ad1a:	d87b      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad1c:	2b60      	cmp	r3, #96	@ 0x60
 800ad1e:	d050      	beq.n	800adc2 <HAL_TIM_ConfigClockSource+0x17e>
 800ad20:	2b60      	cmp	r3, #96	@ 0x60
 800ad22:	d877      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad24:	2b50      	cmp	r3, #80	@ 0x50
 800ad26:	d03c      	beq.n	800ada2 <HAL_TIM_ConfigClockSource+0x15e>
 800ad28:	2b50      	cmp	r3, #80	@ 0x50
 800ad2a:	d873      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad2c:	2b40      	cmp	r3, #64	@ 0x40
 800ad2e:	d058      	beq.n	800ade2 <HAL_TIM_ConfigClockSource+0x19e>
 800ad30:	2b40      	cmp	r3, #64	@ 0x40
 800ad32:	d86f      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad34:	2b30      	cmp	r3, #48	@ 0x30
 800ad36:	d064      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800ad38:	2b30      	cmp	r3, #48	@ 0x30
 800ad3a:	d86b      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad3c:	2b20      	cmp	r3, #32
 800ad3e:	d060      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800ad40:	2b20      	cmp	r3, #32
 800ad42:	d867      	bhi.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d05c      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800ad48:	2b10      	cmp	r3, #16
 800ad4a:	d05a      	beq.n	800ae02 <HAL_TIM_ConfigClockSource+0x1be>
 800ad4c:	e062      	b.n	800ae14 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad5a:	683b      	ldr	r3, [r7, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad5e:	f000 fced 	bl	800b73c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	689b      	ldr	r3, [r3, #8]
 800ad68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ad70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	609a      	str	r2, [r3, #8]
      break;
 800ad7a:	e04f      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ad8c:	f000 fcd6 	bl	800b73c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ad9e:	609a      	str	r2, [r3, #8]
      break;
 800ada0:	e03c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adae:	461a      	mov	r2, r3
 800adb0:	f000 fc48 	bl	800b644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2150      	movs	r1, #80	@ 0x50
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fca1 	bl	800b702 <TIM_ITRx_SetConfig>
      break;
 800adc0:	e02c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800adce:	461a      	mov	r2, r3
 800add0:	f000 fc67 	bl	800b6a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2160      	movs	r1, #96	@ 0x60
 800adda:	4618      	mov	r0, r3
 800addc:	f000 fc91 	bl	800b702 <TIM_ITRx_SetConfig>
      break;
 800ade0:	e01c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ade6:	683b      	ldr	r3, [r7, #0]
 800ade8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800adee:	461a      	mov	r2, r3
 800adf0:	f000 fc28 	bl	800b644 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2140      	movs	r1, #64	@ 0x40
 800adfa:	4618      	mov	r0, r3
 800adfc:	f000 fc81 	bl	800b702 <TIM_ITRx_SetConfig>
      break;
 800ae00:	e00c      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681a      	ldr	r2, [r3, #0]
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4619      	mov	r1, r3
 800ae0c:	4610      	mov	r0, r2
 800ae0e:	f000 fc78 	bl	800b702 <TIM_ITRx_SetConfig>
      break;
 800ae12:	e003      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	73fb      	strb	r3, [r7, #15]
      break;
 800ae18:	e000      	b.n	800ae1c <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800ae1a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2201      	movs	r2, #1
 800ae20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	2200      	movs	r2, #0
 800ae28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	00100070 	.word	0x00100070
 800ae3c:	00100050 	.word	0x00100050
 800ae40:	00100040 	.word	0x00100040
 800ae44:	00100030 	.word	0x00100030
 800ae48:	00100020 	.word	0x00100020

0800ae4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b083      	sub	sp, #12
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ae54:	bf00      	nop
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ae60:	b480      	push	{r7}
 800ae62:	b083      	sub	sp, #12
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ae68:	bf00      	nop
 800ae6a:	370c      	adds	r7, #12
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ae7c:	bf00      	nop
 800ae7e:	370c      	adds	r7, #12
 800ae80:	46bd      	mov	sp, r7
 800ae82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae86:	4770      	bx	lr

0800ae88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b083      	sub	sp, #12
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b085      	sub	sp, #20
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	4a48      	ldr	r2, [pc, #288]	@ (800afd0 <TIM_Base_SetConfig+0x134>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d013      	beq.n	800aedc <TIM_Base_SetConfig+0x40>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aeba:	d00f      	beq.n	800aedc <TIM_Base_SetConfig+0x40>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	4a45      	ldr	r2, [pc, #276]	@ (800afd4 <TIM_Base_SetConfig+0x138>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d00b      	beq.n	800aedc <TIM_Base_SetConfig+0x40>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	4a44      	ldr	r2, [pc, #272]	@ (800afd8 <TIM_Base_SetConfig+0x13c>)
 800aec8:	4293      	cmp	r3, r2
 800aeca:	d007      	beq.n	800aedc <TIM_Base_SetConfig+0x40>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	4a43      	ldr	r2, [pc, #268]	@ (800afdc <TIM_Base_SetConfig+0x140>)
 800aed0:	4293      	cmp	r3, r2
 800aed2:	d003      	beq.n	800aedc <TIM_Base_SetConfig+0x40>
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	4a42      	ldr	r2, [pc, #264]	@ (800afe0 <TIM_Base_SetConfig+0x144>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d108      	bne.n	800aeee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800aee2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	4313      	orrs	r3, r2
 800aeec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	4a37      	ldr	r2, [pc, #220]	@ (800afd0 <TIM_Base_SetConfig+0x134>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d01f      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aefc:	d01b      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4a34      	ldr	r2, [pc, #208]	@ (800afd4 <TIM_Base_SetConfig+0x138>)
 800af02:	4293      	cmp	r3, r2
 800af04:	d017      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	4a33      	ldr	r2, [pc, #204]	@ (800afd8 <TIM_Base_SetConfig+0x13c>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d013      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a32      	ldr	r2, [pc, #200]	@ (800afdc <TIM_Base_SetConfig+0x140>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d00f      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4a32      	ldr	r2, [pc, #200]	@ (800afe4 <TIM_Base_SetConfig+0x148>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d00b      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	4a31      	ldr	r2, [pc, #196]	@ (800afe8 <TIM_Base_SetConfig+0x14c>)
 800af22:	4293      	cmp	r3, r2
 800af24:	d007      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	4a30      	ldr	r2, [pc, #192]	@ (800afec <TIM_Base_SetConfig+0x150>)
 800af2a:	4293      	cmp	r3, r2
 800af2c:	d003      	beq.n	800af36 <TIM_Base_SetConfig+0x9a>
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a2b      	ldr	r2, [pc, #172]	@ (800afe0 <TIM_Base_SetConfig+0x144>)
 800af32:	4293      	cmp	r3, r2
 800af34:	d108      	bne.n	800af48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800af3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	68db      	ldr	r3, [r3, #12]
 800af42:	68fa      	ldr	r2, [r7, #12]
 800af44:	4313      	orrs	r3, r2
 800af46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	695b      	ldr	r3, [r3, #20]
 800af52:	4313      	orrs	r3, r2
 800af54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800af64:	683b      	ldr	r3, [r7, #0]
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	4a18      	ldr	r2, [pc, #96]	@ (800afd0 <TIM_Base_SetConfig+0x134>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d013      	beq.n	800af9c <TIM_Base_SetConfig+0x100>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	4a19      	ldr	r2, [pc, #100]	@ (800afdc <TIM_Base_SetConfig+0x140>)
 800af78:	4293      	cmp	r3, r2
 800af7a:	d00f      	beq.n	800af9c <TIM_Base_SetConfig+0x100>
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a19      	ldr	r2, [pc, #100]	@ (800afe4 <TIM_Base_SetConfig+0x148>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d00b      	beq.n	800af9c <TIM_Base_SetConfig+0x100>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a18      	ldr	r2, [pc, #96]	@ (800afe8 <TIM_Base_SetConfig+0x14c>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d007      	beq.n	800af9c <TIM_Base_SetConfig+0x100>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	4a17      	ldr	r2, [pc, #92]	@ (800afec <TIM_Base_SetConfig+0x150>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d003      	beq.n	800af9c <TIM_Base_SetConfig+0x100>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	4a12      	ldr	r2, [pc, #72]	@ (800afe0 <TIM_Base_SetConfig+0x144>)
 800af98:	4293      	cmp	r3, r2
 800af9a:	d103      	bne.n	800afa4 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	691a      	ldr	r2, [r3, #16]
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2201      	movs	r2, #1
 800afa8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d105      	bne.n	800afc2 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f023 0201 	bic.w	r2, r3, #1
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	611a      	str	r2, [r3, #16]
  }
}
 800afc2:	bf00      	nop
 800afc4:	3714      	adds	r7, #20
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	40012c00 	.word	0x40012c00
 800afd4:	40000400 	.word	0x40000400
 800afd8:	40000800 	.word	0x40000800
 800afdc:	40013400 	.word	0x40013400
 800afe0:	40015000 	.word	0x40015000
 800afe4:	40014000 	.word	0x40014000
 800afe8:	40014400 	.word	0x40014400
 800afec:	40014800 	.word	0x40014800

0800aff0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6a1b      	ldr	r3, [r3, #32]
 800b004:	f023 0201 	bic.w	r2, r3, #1
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	699b      	ldr	r3, [r3, #24]
 800b016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b01e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f023 0303 	bic.w	r3, r3, #3
 800b02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	68fa      	ldr	r2, [r7, #12]
 800b032:	4313      	orrs	r3, r2
 800b034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	f023 0302 	bic.w	r3, r3, #2
 800b03c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	697a      	ldr	r2, [r7, #20]
 800b044:	4313      	orrs	r3, r2
 800b046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4a30      	ldr	r2, [pc, #192]	@ (800b10c <TIM_OC1_SetConfig+0x11c>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d013      	beq.n	800b078 <TIM_OC1_SetConfig+0x88>
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	4a2f      	ldr	r2, [pc, #188]	@ (800b110 <TIM_OC1_SetConfig+0x120>)
 800b054:	4293      	cmp	r3, r2
 800b056:	d00f      	beq.n	800b078 <TIM_OC1_SetConfig+0x88>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4a2e      	ldr	r2, [pc, #184]	@ (800b114 <TIM_OC1_SetConfig+0x124>)
 800b05c:	4293      	cmp	r3, r2
 800b05e:	d00b      	beq.n	800b078 <TIM_OC1_SetConfig+0x88>
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	4a2d      	ldr	r2, [pc, #180]	@ (800b118 <TIM_OC1_SetConfig+0x128>)
 800b064:	4293      	cmp	r3, r2
 800b066:	d007      	beq.n	800b078 <TIM_OC1_SetConfig+0x88>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	4a2c      	ldr	r2, [pc, #176]	@ (800b11c <TIM_OC1_SetConfig+0x12c>)
 800b06c:	4293      	cmp	r3, r2
 800b06e:	d003      	beq.n	800b078 <TIM_OC1_SetConfig+0x88>
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	4a2b      	ldr	r2, [pc, #172]	@ (800b120 <TIM_OC1_SetConfig+0x130>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d10c      	bne.n	800b092 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f023 0308 	bic.w	r3, r3, #8
 800b07e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b080:	683b      	ldr	r3, [r7, #0]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	697a      	ldr	r2, [r7, #20]
 800b086:	4313      	orrs	r3, r2
 800b088:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f023 0304 	bic.w	r3, r3, #4
 800b090:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	4a1d      	ldr	r2, [pc, #116]	@ (800b10c <TIM_OC1_SetConfig+0x11c>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d013      	beq.n	800b0c2 <TIM_OC1_SetConfig+0xd2>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	4a1c      	ldr	r2, [pc, #112]	@ (800b110 <TIM_OC1_SetConfig+0x120>)
 800b09e:	4293      	cmp	r3, r2
 800b0a0:	d00f      	beq.n	800b0c2 <TIM_OC1_SetConfig+0xd2>
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	4a1b      	ldr	r2, [pc, #108]	@ (800b114 <TIM_OC1_SetConfig+0x124>)
 800b0a6:	4293      	cmp	r3, r2
 800b0a8:	d00b      	beq.n	800b0c2 <TIM_OC1_SetConfig+0xd2>
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	4a1a      	ldr	r2, [pc, #104]	@ (800b118 <TIM_OC1_SetConfig+0x128>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d007      	beq.n	800b0c2 <TIM_OC1_SetConfig+0xd2>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	4a19      	ldr	r2, [pc, #100]	@ (800b11c <TIM_OC1_SetConfig+0x12c>)
 800b0b6:	4293      	cmp	r3, r2
 800b0b8:	d003      	beq.n	800b0c2 <TIM_OC1_SetConfig+0xd2>
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a18      	ldr	r2, [pc, #96]	@ (800b120 <TIM_OC1_SetConfig+0x130>)
 800b0be:	4293      	cmp	r3, r2
 800b0c0:	d111      	bne.n	800b0e6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b0c2:	693b      	ldr	r3, [r7, #16]
 800b0c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b0c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b0d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b0dc:	683b      	ldr	r3, [r7, #0]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	693a      	ldr	r2, [r7, #16]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68fa      	ldr	r2, [r7, #12]
 800b0f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	685a      	ldr	r2, [r3, #4]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	697a      	ldr	r2, [r7, #20]
 800b0fe:	621a      	str	r2, [r3, #32]
}
 800b100:	bf00      	nop
 800b102:	371c      	adds	r7, #28
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr
 800b10c:	40012c00 	.word	0x40012c00
 800b110:	40013400 	.word	0x40013400
 800b114:	40014000 	.word	0x40014000
 800b118:	40014400 	.word	0x40014400
 800b11c:	40014800 	.word	0x40014800
 800b120:	40015000 	.word	0x40015000

0800b124 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b124:	b480      	push	{r7}
 800b126:	b087      	sub	sp, #28
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a1b      	ldr	r3, [r3, #32]
 800b132:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a1b      	ldr	r3, [r3, #32]
 800b138:	f023 0210 	bic.w	r2, r3, #16
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	685b      	ldr	r3, [r3, #4]
 800b144:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	699b      	ldr	r3, [r3, #24]
 800b14a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b152:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b15e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	021b      	lsls	r3, r3, #8
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	4313      	orrs	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	f023 0320 	bic.w	r3, r3, #32
 800b172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	011b      	lsls	r3, r3, #4
 800b17a:	697a      	ldr	r2, [r7, #20]
 800b17c:	4313      	orrs	r3, r2
 800b17e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a2c      	ldr	r2, [pc, #176]	@ (800b234 <TIM_OC2_SetConfig+0x110>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d007      	beq.n	800b198 <TIM_OC2_SetConfig+0x74>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a2b      	ldr	r2, [pc, #172]	@ (800b238 <TIM_OC2_SetConfig+0x114>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d003      	beq.n	800b198 <TIM_OC2_SetConfig+0x74>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a2a      	ldr	r2, [pc, #168]	@ (800b23c <TIM_OC2_SetConfig+0x118>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d10d      	bne.n	800b1b4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b198:	697b      	ldr	r3, [r7, #20]
 800b19a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	011b      	lsls	r3, r3, #4
 800b1a6:	697a      	ldr	r2, [r7, #20]
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b1ac:	697b      	ldr	r3, [r7, #20]
 800b1ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b1b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b234 <TIM_OC2_SetConfig+0x110>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d013      	beq.n	800b1e4 <TIM_OC2_SetConfig+0xc0>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	4a1e      	ldr	r2, [pc, #120]	@ (800b238 <TIM_OC2_SetConfig+0x114>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d00f      	beq.n	800b1e4 <TIM_OC2_SetConfig+0xc0>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	4a1e      	ldr	r2, [pc, #120]	@ (800b240 <TIM_OC2_SetConfig+0x11c>)
 800b1c8:	4293      	cmp	r3, r2
 800b1ca:	d00b      	beq.n	800b1e4 <TIM_OC2_SetConfig+0xc0>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	4a1d      	ldr	r2, [pc, #116]	@ (800b244 <TIM_OC2_SetConfig+0x120>)
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d007      	beq.n	800b1e4 <TIM_OC2_SetConfig+0xc0>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	4a1c      	ldr	r2, [pc, #112]	@ (800b248 <TIM_OC2_SetConfig+0x124>)
 800b1d8:	4293      	cmp	r3, r2
 800b1da:	d003      	beq.n	800b1e4 <TIM_OC2_SetConfig+0xc0>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a17      	ldr	r2, [pc, #92]	@ (800b23c <TIM_OC2_SetConfig+0x118>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d113      	bne.n	800b20c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b1ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b1ec:	693b      	ldr	r3, [r7, #16]
 800b1ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b1f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	695b      	ldr	r3, [r3, #20]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	693a      	ldr	r2, [r7, #16]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	699b      	ldr	r3, [r3, #24]
 800b204:	009b      	lsls	r3, r3, #2
 800b206:	693a      	ldr	r2, [r7, #16]
 800b208:	4313      	orrs	r3, r2
 800b20a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	693a      	ldr	r2, [r7, #16]
 800b210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	68fa      	ldr	r2, [r7, #12]
 800b216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	685a      	ldr	r2, [r3, #4]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	697a      	ldr	r2, [r7, #20]
 800b224:	621a      	str	r2, [r3, #32]
}
 800b226:	bf00      	nop
 800b228:	371c      	adds	r7, #28
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr
 800b232:	bf00      	nop
 800b234:	40012c00 	.word	0x40012c00
 800b238:	40013400 	.word	0x40013400
 800b23c:	40015000 	.word	0x40015000
 800b240:	40014000 	.word	0x40014000
 800b244:	40014400 	.word	0x40014400
 800b248:	40014800 	.word	0x40014800

0800b24c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	6a1b      	ldr	r3, [r3, #32]
 800b25a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	69db      	ldr	r3, [r3, #28]
 800b272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b27e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b288:	683b      	ldr	r3, [r7, #0]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	4313      	orrs	r3, r2
 800b290:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800b298:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	021b      	lsls	r3, r3, #8
 800b2a0:	697a      	ldr	r2, [r7, #20]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a2b      	ldr	r2, [pc, #172]	@ (800b358 <TIM_OC3_SetConfig+0x10c>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d007      	beq.n	800b2be <TIM_OC3_SetConfig+0x72>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a2a      	ldr	r2, [pc, #168]	@ (800b35c <TIM_OC3_SetConfig+0x110>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d003      	beq.n	800b2be <TIM_OC3_SetConfig+0x72>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a29      	ldr	r2, [pc, #164]	@ (800b360 <TIM_OC3_SetConfig+0x114>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d10d      	bne.n	800b2da <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800b2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b2c6:	683b      	ldr	r3, [r7, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	021b      	lsls	r3, r3, #8
 800b2cc:	697a      	ldr	r2, [r7, #20]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800b2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	4a1e      	ldr	r2, [pc, #120]	@ (800b358 <TIM_OC3_SetConfig+0x10c>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d013      	beq.n	800b30a <TIM_OC3_SetConfig+0xbe>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	4a1d      	ldr	r2, [pc, #116]	@ (800b35c <TIM_OC3_SetConfig+0x110>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d00f      	beq.n	800b30a <TIM_OC3_SetConfig+0xbe>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	4a1d      	ldr	r2, [pc, #116]	@ (800b364 <TIM_OC3_SetConfig+0x118>)
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d00b      	beq.n	800b30a <TIM_OC3_SetConfig+0xbe>
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	4a1c      	ldr	r2, [pc, #112]	@ (800b368 <TIM_OC3_SetConfig+0x11c>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d007      	beq.n	800b30a <TIM_OC3_SetConfig+0xbe>
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	4a1b      	ldr	r2, [pc, #108]	@ (800b36c <TIM_OC3_SetConfig+0x120>)
 800b2fe:	4293      	cmp	r3, r2
 800b300:	d003      	beq.n	800b30a <TIM_OC3_SetConfig+0xbe>
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	4a16      	ldr	r2, [pc, #88]	@ (800b360 <TIM_OC3_SetConfig+0x114>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d113      	bne.n	800b332 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	695b      	ldr	r3, [r3, #20]
 800b31e:	011b      	lsls	r3, r3, #4
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	4313      	orrs	r3, r2
 800b324:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b326:	683b      	ldr	r3, [r7, #0]
 800b328:	699b      	ldr	r3, [r3, #24]
 800b32a:	011b      	lsls	r3, r3, #4
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	4313      	orrs	r3, r2
 800b330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	693a      	ldr	r2, [r7, #16]
 800b336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	697a      	ldr	r2, [r7, #20]
 800b34a:	621a      	str	r2, [r3, #32]
}
 800b34c:	bf00      	nop
 800b34e:	371c      	adds	r7, #28
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	40012c00 	.word	0x40012c00
 800b35c:	40013400 	.word	0x40013400
 800b360:	40015000 	.word	0x40015000
 800b364:	40014000 	.word	0x40014000
 800b368:	40014400 	.word	0x40014400
 800b36c:	40014800 	.word	0x40014800

0800b370 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b370:	b480      	push	{r7}
 800b372:	b087      	sub	sp, #28
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	6a1b      	ldr	r3, [r3, #32]
 800b37e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6a1b      	ldr	r3, [r3, #32]
 800b384:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b39e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b3a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b3aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	021b      	lsls	r3, r3, #8
 800b3b2:	68fa      	ldr	r2, [r7, #12]
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b3b8:	697b      	ldr	r3, [r7, #20]
 800b3ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800b3be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	031b      	lsls	r3, r3, #12
 800b3c6:	697a      	ldr	r2, [r7, #20]
 800b3c8:	4313      	orrs	r3, r2
 800b3ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	4a2c      	ldr	r2, [pc, #176]	@ (800b480 <TIM_OC4_SetConfig+0x110>)
 800b3d0:	4293      	cmp	r3, r2
 800b3d2:	d007      	beq.n	800b3e4 <TIM_OC4_SetConfig+0x74>
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	4a2b      	ldr	r2, [pc, #172]	@ (800b484 <TIM_OC4_SetConfig+0x114>)
 800b3d8:	4293      	cmp	r3, r2
 800b3da:	d003      	beq.n	800b3e4 <TIM_OC4_SetConfig+0x74>
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	4a2a      	ldr	r2, [pc, #168]	@ (800b488 <TIM_OC4_SetConfig+0x118>)
 800b3e0:	4293      	cmp	r3, r2
 800b3e2:	d10d      	bne.n	800b400 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800b3e4:	697b      	ldr	r3, [r7, #20]
 800b3e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b3ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	68db      	ldr	r3, [r3, #12]
 800b3f0:	031b      	lsls	r3, r3, #12
 800b3f2:	697a      	ldr	r2, [r7, #20]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b3fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	4a1f      	ldr	r2, [pc, #124]	@ (800b480 <TIM_OC4_SetConfig+0x110>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d013      	beq.n	800b430 <TIM_OC4_SetConfig+0xc0>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4a1e      	ldr	r2, [pc, #120]	@ (800b484 <TIM_OC4_SetConfig+0x114>)
 800b40c:	4293      	cmp	r3, r2
 800b40e:	d00f      	beq.n	800b430 <TIM_OC4_SetConfig+0xc0>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	4a1e      	ldr	r2, [pc, #120]	@ (800b48c <TIM_OC4_SetConfig+0x11c>)
 800b414:	4293      	cmp	r3, r2
 800b416:	d00b      	beq.n	800b430 <TIM_OC4_SetConfig+0xc0>
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	4a1d      	ldr	r2, [pc, #116]	@ (800b490 <TIM_OC4_SetConfig+0x120>)
 800b41c:	4293      	cmp	r3, r2
 800b41e:	d007      	beq.n	800b430 <TIM_OC4_SetConfig+0xc0>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	4a1c      	ldr	r2, [pc, #112]	@ (800b494 <TIM_OC4_SetConfig+0x124>)
 800b424:	4293      	cmp	r3, r2
 800b426:	d003      	beq.n	800b430 <TIM_OC4_SetConfig+0xc0>
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a17      	ldr	r2, [pc, #92]	@ (800b488 <TIM_OC4_SetConfig+0x118>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d113      	bne.n	800b458 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b430:	693b      	ldr	r3, [r7, #16]
 800b432:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800b436:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800b43e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	019b      	lsls	r3, r3, #6
 800b446:	693a      	ldr	r2, [r7, #16]
 800b448:	4313      	orrs	r3, r2
 800b44a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	699b      	ldr	r3, [r3, #24]
 800b450:	019b      	lsls	r3, r3, #6
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	4313      	orrs	r3, r2
 800b456:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	693a      	ldr	r2, [r7, #16]
 800b45c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685a      	ldr	r2, [r3, #4]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	697a      	ldr	r2, [r7, #20]
 800b470:	621a      	str	r2, [r3, #32]
}
 800b472:	bf00      	nop
 800b474:	371c      	adds	r7, #28
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	40012c00 	.word	0x40012c00
 800b484:	40013400 	.word	0x40013400
 800b488:	40015000 	.word	0x40015000
 800b48c:	40014000 	.word	0x40014000
 800b490:	40014400 	.word	0x40014400
 800b494:	40014800 	.word	0x40014800

0800b498 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
 800b4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a1b      	ldr	r3, [r3, #32]
 800b4ac:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	685b      	ldr	r3, [r3, #4]
 800b4b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b4c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b4ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b4d6:	693b      	ldr	r3, [r7, #16]
 800b4d8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800b4dc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b4de:	683b      	ldr	r3, [r7, #0]
 800b4e0:	689b      	ldr	r3, [r3, #8]
 800b4e2:	041b      	lsls	r3, r3, #16
 800b4e4:	693a      	ldr	r2, [r7, #16]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	4a19      	ldr	r2, [pc, #100]	@ (800b554 <TIM_OC5_SetConfig+0xbc>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d013      	beq.n	800b51a <TIM_OC5_SetConfig+0x82>
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	4a18      	ldr	r2, [pc, #96]	@ (800b558 <TIM_OC5_SetConfig+0xc0>)
 800b4f6:	4293      	cmp	r3, r2
 800b4f8:	d00f      	beq.n	800b51a <TIM_OC5_SetConfig+0x82>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4a17      	ldr	r2, [pc, #92]	@ (800b55c <TIM_OC5_SetConfig+0xc4>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d00b      	beq.n	800b51a <TIM_OC5_SetConfig+0x82>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	4a16      	ldr	r2, [pc, #88]	@ (800b560 <TIM_OC5_SetConfig+0xc8>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d007      	beq.n	800b51a <TIM_OC5_SetConfig+0x82>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	4a15      	ldr	r2, [pc, #84]	@ (800b564 <TIM_OC5_SetConfig+0xcc>)
 800b50e:	4293      	cmp	r3, r2
 800b510:	d003      	beq.n	800b51a <TIM_OC5_SetConfig+0x82>
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	4a14      	ldr	r2, [pc, #80]	@ (800b568 <TIM_OC5_SetConfig+0xd0>)
 800b516:	4293      	cmp	r3, r2
 800b518:	d109      	bne.n	800b52e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b520:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	695b      	ldr	r3, [r3, #20]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	685a      	ldr	r2, [r3, #4]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	693a      	ldr	r2, [r7, #16]
 800b546:	621a      	str	r2, [r3, #32]
}
 800b548:	bf00      	nop
 800b54a:	371c      	adds	r7, #28
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	40012c00 	.word	0x40012c00
 800b558:	40013400 	.word	0x40013400
 800b55c:	40014000 	.word	0x40014000
 800b560:	40014400 	.word	0x40014400
 800b564:	40014800 	.word	0x40014800
 800b568:	40015000 	.word	0x40015000

0800b56c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b087      	sub	sp, #28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6a1b      	ldr	r3, [r3, #32]
 800b57a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	6a1b      	ldr	r3, [r3, #32]
 800b580:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b59a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800b59e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	021b      	lsls	r3, r3, #8
 800b5a6:	68fa      	ldr	r2, [r7, #12]
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	689b      	ldr	r3, [r3, #8]
 800b5b8:	051b      	lsls	r3, r3, #20
 800b5ba:	693a      	ldr	r2, [r7, #16]
 800b5bc:	4313      	orrs	r3, r2
 800b5be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	4a1a      	ldr	r2, [pc, #104]	@ (800b62c <TIM_OC6_SetConfig+0xc0>)
 800b5c4:	4293      	cmp	r3, r2
 800b5c6:	d013      	beq.n	800b5f0 <TIM_OC6_SetConfig+0x84>
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	4a19      	ldr	r2, [pc, #100]	@ (800b630 <TIM_OC6_SetConfig+0xc4>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d00f      	beq.n	800b5f0 <TIM_OC6_SetConfig+0x84>
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	4a18      	ldr	r2, [pc, #96]	@ (800b634 <TIM_OC6_SetConfig+0xc8>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d00b      	beq.n	800b5f0 <TIM_OC6_SetConfig+0x84>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a17      	ldr	r2, [pc, #92]	@ (800b638 <TIM_OC6_SetConfig+0xcc>)
 800b5dc:	4293      	cmp	r3, r2
 800b5de:	d007      	beq.n	800b5f0 <TIM_OC6_SetConfig+0x84>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	4a16      	ldr	r2, [pc, #88]	@ (800b63c <TIM_OC6_SetConfig+0xd0>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d003      	beq.n	800b5f0 <TIM_OC6_SetConfig+0x84>
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	4a15      	ldr	r2, [pc, #84]	@ (800b640 <TIM_OC6_SetConfig+0xd4>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d109      	bne.n	800b604 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b5f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	695b      	ldr	r3, [r3, #20]
 800b5fc:	029b      	lsls	r3, r3, #10
 800b5fe:	697a      	ldr	r2, [r7, #20]
 800b600:	4313      	orrs	r3, r2
 800b602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	697a      	ldr	r2, [r7, #20]
 800b608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	693a      	ldr	r2, [r7, #16]
 800b61c:	621a      	str	r2, [r3, #32]
}
 800b61e:	bf00      	nop
 800b620:	371c      	adds	r7, #28
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	40012c00 	.word	0x40012c00
 800b630:	40013400 	.word	0x40013400
 800b634:	40014000 	.word	0x40014000
 800b638:	40014400 	.word	0x40014400
 800b63c:	40014800 	.word	0x40014800
 800b640:	40015000 	.word	0x40015000

0800b644 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b644:	b480      	push	{r7}
 800b646:	b087      	sub	sp, #28
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	60b9      	str	r1, [r7, #8]
 800b64e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	f023 0201 	bic.w	r2, r3, #1
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	699b      	ldr	r3, [r3, #24]
 800b666:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	011b      	lsls	r3, r3, #4
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	4313      	orrs	r3, r2
 800b678:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	f023 030a 	bic.w	r3, r3, #10
 800b680:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b682:	697a      	ldr	r2, [r7, #20]
 800b684:	68bb      	ldr	r3, [r7, #8]
 800b686:	4313      	orrs	r3, r2
 800b688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	693a      	ldr	r2, [r7, #16]
 800b68e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	621a      	str	r2, [r3, #32]
}
 800b696:	bf00      	nop
 800b698:	371c      	adds	r7, #28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	b087      	sub	sp, #28
 800b6a6:	af00      	add	r7, sp, #0
 800b6a8:	60f8      	str	r0, [r7, #12]
 800b6aa:	60b9      	str	r1, [r7, #8]
 800b6ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	6a1b      	ldr	r3, [r3, #32]
 800b6b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6a1b      	ldr	r3, [r3, #32]
 800b6b8:	f023 0210 	bic.w	r2, r3, #16
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800b6cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	031b      	lsls	r3, r3, #12
 800b6d2:	693a      	ldr	r2, [r7, #16]
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800b6de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	011b      	lsls	r3, r3, #4
 800b6e4:	697a      	ldr	r2, [r7, #20]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	693a      	ldr	r2, [r7, #16]
 800b6ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	697a      	ldr	r2, [r7, #20]
 800b6f4:	621a      	str	r2, [r3, #32]
}
 800b6f6:	bf00      	nop
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b702:	b480      	push	{r7}
 800b704:	b085      	sub	sp, #20
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
 800b70a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b718:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b71c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b71e:	683a      	ldr	r2, [r7, #0]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4313      	orrs	r3, r2
 800b724:	f043 0307 	orr.w	r3, r3, #7
 800b728:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	68fa      	ldr	r2, [r7, #12]
 800b72e:	609a      	str	r2, [r3, #8]
}
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b087      	sub	sp, #28
 800b740:	af00      	add	r7, sp, #0
 800b742:	60f8      	str	r0, [r7, #12]
 800b744:	60b9      	str	r1, [r7, #8]
 800b746:	607a      	str	r2, [r7, #4]
 800b748:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b756:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	021a      	lsls	r2, r3, #8
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	431a      	orrs	r2, r3
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	4313      	orrs	r3, r2
 800b764:	697a      	ldr	r2, [r7, #20]
 800b766:	4313      	orrs	r3, r2
 800b768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	697a      	ldr	r2, [r7, #20]
 800b76e:	609a      	str	r2, [r3, #8]
}
 800b770:	bf00      	nop
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b77c:	b480      	push	{r7}
 800b77e:	b087      	sub	sp, #28
 800b780:	af00      	add	r7, sp, #0
 800b782:	60f8      	str	r0, [r7, #12]
 800b784:	60b9      	str	r1, [r7, #8]
 800b786:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	f003 031f 	and.w	r3, r3, #31
 800b78e:	2201      	movs	r2, #1
 800b790:	fa02 f303 	lsl.w	r3, r2, r3
 800b794:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6a1a      	ldr	r2, [r3, #32]
 800b79a:	697b      	ldr	r3, [r7, #20]
 800b79c:	43db      	mvns	r3, r3
 800b79e:	401a      	ands	r2, r3
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6a1a      	ldr	r2, [r3, #32]
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	f003 031f 	and.w	r3, r3, #31
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7b4:	431a      	orrs	r2, r3
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	621a      	str	r2, [r3, #32]
}
 800b7ba:	bf00      	nop
 800b7bc:	371c      	adds	r7, #28
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c4:	4770      	bx	lr
	...

0800b7c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b085      	sub	sp, #20
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d101      	bne.n	800b7e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b7dc:	2302      	movs	r3, #2
 800b7de:	e06f      	b.n	800b8c0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2202      	movs	r2, #2
 800b7ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	685b      	ldr	r3, [r3, #4]
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a31      	ldr	r2, [pc, #196]	@ (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b806:	4293      	cmp	r3, r2
 800b808:	d009      	beq.n	800b81e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	4a30      	ldr	r2, [pc, #192]	@ (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d004      	beq.n	800b81e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	4a2e      	ldr	r2, [pc, #184]	@ (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b81a:	4293      	cmp	r3, r2
 800b81c:	d108      	bne.n	800b830 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800b824:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	4313      	orrs	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800b836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b83a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b83c:	683b      	ldr	r3, [r7, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	68fa      	ldr	r2, [r7, #12]
 800b842:	4313      	orrs	r3, r2
 800b844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	68fa      	ldr	r2, [r7, #12]
 800b84c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	4a1e      	ldr	r2, [pc, #120]	@ (800b8cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b854:	4293      	cmp	r3, r2
 800b856:	d01d      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b860:	d018      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	4a1c      	ldr	r2, [pc, #112]	@ (800b8d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b868:	4293      	cmp	r3, r2
 800b86a:	d013      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4a1a      	ldr	r2, [pc, #104]	@ (800b8dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b872:	4293      	cmp	r3, r2
 800b874:	d00e      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	4a15      	ldr	r2, [pc, #84]	@ (800b8d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b87c:	4293      	cmp	r3, r2
 800b87e:	d009      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	4a16      	ldr	r2, [pc, #88]	@ (800b8e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b886:	4293      	cmp	r3, r2
 800b888:	d004      	beq.n	800b894 <HAL_TIMEx_MasterConfigSynchronization+0xcc>
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4a11      	ldr	r2, [pc, #68]	@ (800b8d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b890:	4293      	cmp	r3, r2
 800b892:	d10c      	bne.n	800b8ae <HAL_TIMEx_MasterConfigSynchronization+0xe6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b89a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	68ba      	ldr	r2, [r7, #8]
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	40012c00 	.word	0x40012c00
 800b8d0:	40013400 	.word	0x40013400
 800b8d4:	40015000 	.word	0x40015000
 800b8d8:	40000400 	.word	0x40000400
 800b8dc:	40000800 	.word	0x40000800
 800b8e0:	40014000 	.word	0x40014000

0800b8e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
 800b8ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d101      	bne.n	800b900 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	e078      	b.n	800b9f2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2201      	movs	r2, #1
 800b904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	4313      	orrs	r3, r2
 800b914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	4313      	orrs	r3, r2
 800b922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	4313      	orrs	r3, r2
 800b930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	4313      	orrs	r3, r2
 800b93e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	695b      	ldr	r3, [r3, #20]
 800b958:	4313      	orrs	r3, r2
 800b95a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b966:	4313      	orrs	r3, r2
 800b968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	041b      	lsls	r3, r3, #16
 800b976:	4313      	orrs	r3, r2
 800b978:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	69db      	ldr	r3, [r3, #28]
 800b984:	4313      	orrs	r3, r2
 800b986:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	4a1c      	ldr	r2, [pc, #112]	@ (800ba00 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800b98e:	4293      	cmp	r3, r2
 800b990:	d009      	beq.n	800b9a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4a1b      	ldr	r2, [pc, #108]	@ (800ba04 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d004      	beq.n	800b9a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a19      	ldr	r2, [pc, #100]	@ (800ba08 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d11c      	bne.n	800b9e0 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b9b0:	051b      	lsls	r3, r3, #20
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	6a1b      	ldr	r3, [r3, #32]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800b9ca:	683b      	ldr	r3, [r7, #0]
 800b9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3714      	adds	r7, #20
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	40012c00 	.word	0x40012c00
 800ba04:	40013400 	.word	0x40013400
 800ba08:	40015000 	.word	0x40015000

0800ba0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <_ZdlPvj>:
 800ba98:	f000 b804 	b.w	800baa4 <_ZdlPv>

0800ba9c <_ZdaPv>:
 800ba9c:	f000 b802 	b.w	800baa4 <_ZdlPv>

0800baa0 <_Znaj>:
 800baa0:	f000 b802 	b.w	800baa8 <_Znwj>

0800baa4 <_ZdlPv>:
 800baa4:	f001 b892 	b.w	800cbcc <free>

0800baa8 <_Znwj>:
 800baa8:	2801      	cmp	r0, #1
 800baaa:	bf38      	it	cc
 800baac:	2001      	movcc	r0, #1
 800baae:	b510      	push	{r4, lr}
 800bab0:	4604      	mov	r4, r0
 800bab2:	4620      	mov	r0, r4
 800bab4:	f001 f882 	bl	800cbbc <malloc>
 800bab8:	b100      	cbz	r0, 800babc <_Znwj+0x14>
 800baba:	bd10      	pop	{r4, pc}
 800babc:	f000 f806 	bl	800bacc <_ZSt15get_new_handlerv>
 800bac0:	b908      	cbnz	r0, 800bac6 <_Znwj+0x1e>
 800bac2:	f001 f873 	bl	800cbac <abort>
 800bac6:	4780      	blx	r0
 800bac8:	e7f3      	b.n	800bab2 <_Znwj+0xa>
	...

0800bacc <_ZSt15get_new_handlerv>:
 800bacc:	4b02      	ldr	r3, [pc, #8]	@ (800bad8 <_ZSt15get_new_handlerv+0xc>)
 800bace:	6818      	ldr	r0, [r3, #0]
 800bad0:	f3bf 8f5b 	dmb	ish
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	200007f0 	.word	0x200007f0

0800badc <pow>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	ed2d 8b02 	vpush	{d8}
 800bae2:	eeb0 8a40 	vmov.f32	s16, s0
 800bae6:	eef0 8a60 	vmov.f32	s17, s1
 800baea:	ec55 4b11 	vmov	r4, r5, d1
 800baee:	f000 f977 	bl	800bde0 <__ieee754_pow>
 800baf2:	4622      	mov	r2, r4
 800baf4:	462b      	mov	r3, r5
 800baf6:	4620      	mov	r0, r4
 800baf8:	4629      	mov	r1, r5
 800bafa:	ec57 6b10 	vmov	r6, r7, d0
 800bafe:	f7f5 f835 	bl	8000b6c <__aeabi_dcmpun>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	d13b      	bne.n	800bb7e <pow+0xa2>
 800bb06:	ec51 0b18 	vmov	r0, r1, d8
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	f7f4 fffb 	bl	8000b08 <__aeabi_dcmpeq>
 800bb12:	b1b8      	cbz	r0, 800bb44 <pow+0x68>
 800bb14:	2200      	movs	r2, #0
 800bb16:	2300      	movs	r3, #0
 800bb18:	4620      	mov	r0, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	f7f4 fff4 	bl	8000b08 <__aeabi_dcmpeq>
 800bb20:	2800      	cmp	r0, #0
 800bb22:	d146      	bne.n	800bbb2 <pow+0xd6>
 800bb24:	ec45 4b10 	vmov	d0, r4, r5
 800bb28:	f000 f886 	bl	800bc38 <finite>
 800bb2c:	b338      	cbz	r0, 800bb7e <pow+0xa2>
 800bb2e:	2200      	movs	r2, #0
 800bb30:	2300      	movs	r3, #0
 800bb32:	4620      	mov	r0, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	f7f4 fff1 	bl	8000b1c <__aeabi_dcmplt>
 800bb3a:	b300      	cbz	r0, 800bb7e <pow+0xa2>
 800bb3c:	f001 fabe 	bl	800d0bc <__errno>
 800bb40:	2322      	movs	r3, #34	@ 0x22
 800bb42:	e01b      	b.n	800bb7c <pow+0xa0>
 800bb44:	ec47 6b10 	vmov	d0, r6, r7
 800bb48:	f000 f876 	bl	800bc38 <finite>
 800bb4c:	b9e0      	cbnz	r0, 800bb88 <pow+0xac>
 800bb4e:	eeb0 0a48 	vmov.f32	s0, s16
 800bb52:	eef0 0a68 	vmov.f32	s1, s17
 800bb56:	f000 f86f 	bl	800bc38 <finite>
 800bb5a:	b1a8      	cbz	r0, 800bb88 <pow+0xac>
 800bb5c:	ec45 4b10 	vmov	d0, r4, r5
 800bb60:	f000 f86a 	bl	800bc38 <finite>
 800bb64:	b180      	cbz	r0, 800bb88 <pow+0xac>
 800bb66:	4632      	mov	r2, r6
 800bb68:	463b      	mov	r3, r7
 800bb6a:	4630      	mov	r0, r6
 800bb6c:	4639      	mov	r1, r7
 800bb6e:	f7f4 fffd 	bl	8000b6c <__aeabi_dcmpun>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	d0e2      	beq.n	800bb3c <pow+0x60>
 800bb76:	f001 faa1 	bl	800d0bc <__errno>
 800bb7a:	2321      	movs	r3, #33	@ 0x21
 800bb7c:	6003      	str	r3, [r0, #0]
 800bb7e:	ecbd 8b02 	vpop	{d8}
 800bb82:	ec47 6b10 	vmov	d0, r6, r7
 800bb86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb88:	2200      	movs	r2, #0
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	4639      	mov	r1, r7
 800bb90:	f7f4 ffba 	bl	8000b08 <__aeabi_dcmpeq>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	d0f2      	beq.n	800bb7e <pow+0xa2>
 800bb98:	eeb0 0a48 	vmov.f32	s0, s16
 800bb9c:	eef0 0a68 	vmov.f32	s1, s17
 800bba0:	f000 f84a 	bl	800bc38 <finite>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d0ea      	beq.n	800bb7e <pow+0xa2>
 800bba8:	ec45 4b10 	vmov	d0, r4, r5
 800bbac:	f000 f844 	bl	800bc38 <finite>
 800bbb0:	e7c3      	b.n	800bb3a <pow+0x5e>
 800bbb2:	4f01      	ldr	r7, [pc, #4]	@ (800bbb8 <pow+0xdc>)
 800bbb4:	2600      	movs	r6, #0
 800bbb6:	e7e2      	b.n	800bb7e <pow+0xa2>
 800bbb8:	3ff00000 	.word	0x3ff00000

0800bbbc <fmodf>:
 800bbbc:	b508      	push	{r3, lr}
 800bbbe:	ed2d 8b02 	vpush	{d8}
 800bbc2:	eef0 8a40 	vmov.f32	s17, s0
 800bbc6:	eeb0 8a60 	vmov.f32	s16, s1
 800bbca:	f000 fe55 	bl	800c878 <__ieee754_fmodf>
 800bbce:	eef4 8a48 	vcmp.f32	s17, s16
 800bbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbd6:	d60c      	bvs.n	800bbf2 <fmodf+0x36>
 800bbd8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bbf8 <fmodf+0x3c>
 800bbdc:	eeb4 8a68 	vcmp.f32	s16, s17
 800bbe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbe4:	d105      	bne.n	800bbf2 <fmodf+0x36>
 800bbe6:	f001 fa69 	bl	800d0bc <__errno>
 800bbea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bbee:	2321      	movs	r3, #33	@ 0x21
 800bbf0:	6003      	str	r3, [r0, #0]
 800bbf2:	ecbd 8b02 	vpop	{d8}
 800bbf6:	bd08      	pop	{r3, pc}
 800bbf8:	00000000 	.word	0x00000000

0800bbfc <sqrtf>:
 800bbfc:	b508      	push	{r3, lr}
 800bbfe:	ed2d 8b02 	vpush	{d8}
 800bc02:	eeb0 8a40 	vmov.f32	s16, s0
 800bc06:	f000 f8a1 	bl	800bd4c <__ieee754_sqrtf>
 800bc0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	d60c      	bvs.n	800bc2e <sqrtf+0x32>
 800bc14:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bc34 <sqrtf+0x38>
 800bc18:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bc1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc20:	d505      	bpl.n	800bc2e <sqrtf+0x32>
 800bc22:	f001 fa4b 	bl	800d0bc <__errno>
 800bc26:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bc2a:	2321      	movs	r3, #33	@ 0x21
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	ecbd 8b02 	vpop	{d8}
 800bc32:	bd08      	pop	{r3, pc}
 800bc34:	00000000 	.word	0x00000000

0800bc38 <finite>:
 800bc38:	b082      	sub	sp, #8
 800bc3a:	ed8d 0b00 	vstr	d0, [sp]
 800bc3e:	9801      	ldr	r0, [sp, #4]
 800bc40:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800bc44:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800bc48:	0fc0      	lsrs	r0, r0, #31
 800bc4a:	b002      	add	sp, #8
 800bc4c:	4770      	bx	lr
	...

0800bc50 <scalbn>:
 800bc50:	b570      	push	{r4, r5, r6, lr}
 800bc52:	ec55 4b10 	vmov	r4, r5, d0
 800bc56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc5a:	4606      	mov	r6, r0
 800bc5c:	462b      	mov	r3, r5
 800bc5e:	b991      	cbnz	r1, 800bc86 <scalbn+0x36>
 800bc60:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bc64:	4323      	orrs	r3, r4
 800bc66:	d03d      	beq.n	800bce4 <scalbn+0x94>
 800bc68:	4b35      	ldr	r3, [pc, #212]	@ (800bd40 <scalbn+0xf0>)
 800bc6a:	4620      	mov	r0, r4
 800bc6c:	4629      	mov	r1, r5
 800bc6e:	2200      	movs	r2, #0
 800bc70:	f7f4 fce2 	bl	8000638 <__aeabi_dmul>
 800bc74:	4b33      	ldr	r3, [pc, #204]	@ (800bd44 <scalbn+0xf4>)
 800bc76:	429e      	cmp	r6, r3
 800bc78:	4604      	mov	r4, r0
 800bc7a:	460d      	mov	r5, r1
 800bc7c:	da0f      	bge.n	800bc9e <scalbn+0x4e>
 800bc7e:	a328      	add	r3, pc, #160	@ (adr r3, 800bd20 <scalbn+0xd0>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	e01e      	b.n	800bcc4 <scalbn+0x74>
 800bc86:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800bc8a:	4291      	cmp	r1, r2
 800bc8c:	d10b      	bne.n	800bca6 <scalbn+0x56>
 800bc8e:	4622      	mov	r2, r4
 800bc90:	4620      	mov	r0, r4
 800bc92:	4629      	mov	r1, r5
 800bc94:	f7f4 fb1a 	bl	80002cc <__adddf3>
 800bc98:	4604      	mov	r4, r0
 800bc9a:	460d      	mov	r5, r1
 800bc9c:	e022      	b.n	800bce4 <scalbn+0x94>
 800bc9e:	460b      	mov	r3, r1
 800bca0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bca4:	3936      	subs	r1, #54	@ 0x36
 800bca6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800bcaa:	4296      	cmp	r6, r2
 800bcac:	dd0d      	ble.n	800bcca <scalbn+0x7a>
 800bcae:	2d00      	cmp	r5, #0
 800bcb0:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd28 <scalbn+0xd8>)
 800bcb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcb6:	da02      	bge.n	800bcbe <scalbn+0x6e>
 800bcb8:	a11d      	add	r1, pc, #116	@ (adr r1, 800bd30 <scalbn+0xe0>)
 800bcba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcbe:	a31a      	add	r3, pc, #104	@ (adr r3, 800bd28 <scalbn+0xd8>)
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f7f4 fcb8 	bl	8000638 <__aeabi_dmul>
 800bcc8:	e7e6      	b.n	800bc98 <scalbn+0x48>
 800bcca:	1872      	adds	r2, r6, r1
 800bccc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800bcd0:	428a      	cmp	r2, r1
 800bcd2:	dcec      	bgt.n	800bcae <scalbn+0x5e>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	dd08      	ble.n	800bcea <scalbn+0x9a>
 800bcd8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bcdc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bce0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bce4:	ec45 4b10 	vmov	d0, r4, r5
 800bce8:	bd70      	pop	{r4, r5, r6, pc}
 800bcea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800bcee:	da08      	bge.n	800bd02 <scalbn+0xb2>
 800bcf0:	2d00      	cmp	r5, #0
 800bcf2:	a10b      	add	r1, pc, #44	@ (adr r1, 800bd20 <scalbn+0xd0>)
 800bcf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcf8:	dac1      	bge.n	800bc7e <scalbn+0x2e>
 800bcfa:	a10f      	add	r1, pc, #60	@ (adr r1, 800bd38 <scalbn+0xe8>)
 800bcfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd00:	e7bd      	b.n	800bc7e <scalbn+0x2e>
 800bd02:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800bd06:	3236      	adds	r2, #54	@ 0x36
 800bd08:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800bd0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bd10:	4620      	mov	r0, r4
 800bd12:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <scalbn+0xf8>)
 800bd14:	4629      	mov	r1, r5
 800bd16:	2200      	movs	r2, #0
 800bd18:	e7d4      	b.n	800bcc4 <scalbn+0x74>
 800bd1a:	bf00      	nop
 800bd1c:	f3af 8000 	nop.w
 800bd20:	c2f8f359 	.word	0xc2f8f359
 800bd24:	01a56e1f 	.word	0x01a56e1f
 800bd28:	8800759c 	.word	0x8800759c
 800bd2c:	7e37e43c 	.word	0x7e37e43c
 800bd30:	8800759c 	.word	0x8800759c
 800bd34:	fe37e43c 	.word	0xfe37e43c
 800bd38:	c2f8f359 	.word	0xc2f8f359
 800bd3c:	81a56e1f 	.word	0x81a56e1f
 800bd40:	43500000 	.word	0x43500000
 800bd44:	ffff3cb0 	.word	0xffff3cb0
 800bd48:	3c900000 	.word	0x3c900000

0800bd4c <__ieee754_sqrtf>:
 800bd4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bd50:	4770      	bx	lr
	...

0800bd54 <floorf>:
 800bd54:	ee10 3a10 	vmov	r3, s0
 800bd58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bd5c:	3a7f      	subs	r2, #127	@ 0x7f
 800bd5e:	2a16      	cmp	r2, #22
 800bd60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800bd64:	dc2b      	bgt.n	800bdbe <floorf+0x6a>
 800bd66:	2a00      	cmp	r2, #0
 800bd68:	da12      	bge.n	800bd90 <floorf+0x3c>
 800bd6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bdd0 <floorf+0x7c>
 800bd6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bd76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd7a:	dd06      	ble.n	800bd8a <floorf+0x36>
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	da24      	bge.n	800bdca <floorf+0x76>
 800bd80:	2900      	cmp	r1, #0
 800bd82:	4b14      	ldr	r3, [pc, #80]	@ (800bdd4 <floorf+0x80>)
 800bd84:	bf08      	it	eq
 800bd86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800bd8a:	ee00 3a10 	vmov	s0, r3
 800bd8e:	4770      	bx	lr
 800bd90:	4911      	ldr	r1, [pc, #68]	@ (800bdd8 <floorf+0x84>)
 800bd92:	4111      	asrs	r1, r2
 800bd94:	420b      	tst	r3, r1
 800bd96:	d0fa      	beq.n	800bd8e <floorf+0x3a>
 800bd98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800bdd0 <floorf+0x7c>
 800bd9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bda0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bda4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bda8:	ddef      	ble.n	800bd8a <floorf+0x36>
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	bfbe      	ittt	lt
 800bdae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800bdb2:	fa40 f202 	asrlt.w	r2, r0, r2
 800bdb6:	189b      	addlt	r3, r3, r2
 800bdb8:	ea23 0301 	bic.w	r3, r3, r1
 800bdbc:	e7e5      	b.n	800bd8a <floorf+0x36>
 800bdbe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800bdc2:	d3e4      	bcc.n	800bd8e <floorf+0x3a>
 800bdc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bdc8:	4770      	bx	lr
 800bdca:	2300      	movs	r3, #0
 800bdcc:	e7dd      	b.n	800bd8a <floorf+0x36>
 800bdce:	bf00      	nop
 800bdd0:	7149f2ca 	.word	0x7149f2ca
 800bdd4:	bf800000 	.word	0xbf800000
 800bdd8:	007fffff 	.word	0x007fffff
 800bddc:	00000000 	.word	0x00000000

0800bde0 <__ieee754_pow>:
 800bde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde4:	b091      	sub	sp, #68	@ 0x44
 800bde6:	ed8d 1b00 	vstr	d1, [sp]
 800bdea:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bdee:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bdf2:	ea5a 0001 	orrs.w	r0, sl, r1
 800bdf6:	ec57 6b10 	vmov	r6, r7, d0
 800bdfa:	d113      	bne.n	800be24 <__ieee754_pow+0x44>
 800bdfc:	19b3      	adds	r3, r6, r6
 800bdfe:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800be02:	4152      	adcs	r2, r2
 800be04:	4298      	cmp	r0, r3
 800be06:	4b98      	ldr	r3, [pc, #608]	@ (800c068 <__ieee754_pow+0x288>)
 800be08:	4193      	sbcs	r3, r2
 800be0a:	f080 84ea 	bcs.w	800c7e2 <__ieee754_pow+0xa02>
 800be0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be12:	4630      	mov	r0, r6
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 fa59 	bl	80002cc <__adddf3>
 800be1a:	ec41 0b10 	vmov	d0, r0, r1
 800be1e:	b011      	add	sp, #68	@ 0x44
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be24:	4a91      	ldr	r2, [pc, #580]	@ (800c06c <__ieee754_pow+0x28c>)
 800be26:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800be2a:	4590      	cmp	r8, r2
 800be2c:	463d      	mov	r5, r7
 800be2e:	4633      	mov	r3, r6
 800be30:	d806      	bhi.n	800be40 <__ieee754_pow+0x60>
 800be32:	d101      	bne.n	800be38 <__ieee754_pow+0x58>
 800be34:	2e00      	cmp	r6, #0
 800be36:	d1ea      	bne.n	800be0e <__ieee754_pow+0x2e>
 800be38:	4592      	cmp	sl, r2
 800be3a:	d801      	bhi.n	800be40 <__ieee754_pow+0x60>
 800be3c:	d10e      	bne.n	800be5c <__ieee754_pow+0x7c>
 800be3e:	b169      	cbz	r1, 800be5c <__ieee754_pow+0x7c>
 800be40:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800be44:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800be48:	431d      	orrs	r5, r3
 800be4a:	d1e0      	bne.n	800be0e <__ieee754_pow+0x2e>
 800be4c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800be50:	18db      	adds	r3, r3, r3
 800be52:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800be56:	4152      	adcs	r2, r2
 800be58:	429d      	cmp	r5, r3
 800be5a:	e7d4      	b.n	800be06 <__ieee754_pow+0x26>
 800be5c:	2d00      	cmp	r5, #0
 800be5e:	46c3      	mov	fp, r8
 800be60:	da3a      	bge.n	800bed8 <__ieee754_pow+0xf8>
 800be62:	4a83      	ldr	r2, [pc, #524]	@ (800c070 <__ieee754_pow+0x290>)
 800be64:	4592      	cmp	sl, r2
 800be66:	d84d      	bhi.n	800bf04 <__ieee754_pow+0x124>
 800be68:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800be6c:	4592      	cmp	sl, r2
 800be6e:	f240 84c7 	bls.w	800c800 <__ieee754_pow+0xa20>
 800be72:	ea4f 522a 	mov.w	r2, sl, asr #20
 800be76:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800be7a:	2a14      	cmp	r2, #20
 800be7c:	dd0f      	ble.n	800be9e <__ieee754_pow+0xbe>
 800be7e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800be82:	fa21 f402 	lsr.w	r4, r1, r2
 800be86:	fa04 f202 	lsl.w	r2, r4, r2
 800be8a:	428a      	cmp	r2, r1
 800be8c:	f040 84b8 	bne.w	800c800 <__ieee754_pow+0xa20>
 800be90:	f004 0401 	and.w	r4, r4, #1
 800be94:	f1c4 0402 	rsb	r4, r4, #2
 800be98:	2900      	cmp	r1, #0
 800be9a:	d158      	bne.n	800bf4e <__ieee754_pow+0x16e>
 800be9c:	e00e      	b.n	800bebc <__ieee754_pow+0xdc>
 800be9e:	2900      	cmp	r1, #0
 800bea0:	d154      	bne.n	800bf4c <__ieee754_pow+0x16c>
 800bea2:	f1c2 0214 	rsb	r2, r2, #20
 800bea6:	fa4a f402 	asr.w	r4, sl, r2
 800beaa:	fa04 f202 	lsl.w	r2, r4, r2
 800beae:	4552      	cmp	r2, sl
 800beb0:	f040 84a3 	bne.w	800c7fa <__ieee754_pow+0xa1a>
 800beb4:	f004 0401 	and.w	r4, r4, #1
 800beb8:	f1c4 0402 	rsb	r4, r4, #2
 800bebc:	4a6d      	ldr	r2, [pc, #436]	@ (800c074 <__ieee754_pow+0x294>)
 800bebe:	4592      	cmp	sl, r2
 800bec0:	d12e      	bne.n	800bf20 <__ieee754_pow+0x140>
 800bec2:	f1b9 0f00 	cmp.w	r9, #0
 800bec6:	f280 8494 	bge.w	800c7f2 <__ieee754_pow+0xa12>
 800beca:	496a      	ldr	r1, [pc, #424]	@ (800c074 <__ieee754_pow+0x294>)
 800becc:	4632      	mov	r2, r6
 800bece:	463b      	mov	r3, r7
 800bed0:	2000      	movs	r0, #0
 800bed2:	f7f4 fcdb 	bl	800088c <__aeabi_ddiv>
 800bed6:	e7a0      	b.n	800be1a <__ieee754_pow+0x3a>
 800bed8:	2400      	movs	r4, #0
 800beda:	bbc1      	cbnz	r1, 800bf4e <__ieee754_pow+0x16e>
 800bedc:	4a63      	ldr	r2, [pc, #396]	@ (800c06c <__ieee754_pow+0x28c>)
 800bede:	4592      	cmp	sl, r2
 800bee0:	d1ec      	bne.n	800bebc <__ieee754_pow+0xdc>
 800bee2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bee6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800beea:	431a      	orrs	r2, r3
 800beec:	f000 8479 	beq.w	800c7e2 <__ieee754_pow+0xa02>
 800bef0:	4b61      	ldr	r3, [pc, #388]	@ (800c078 <__ieee754_pow+0x298>)
 800bef2:	4598      	cmp	r8, r3
 800bef4:	d908      	bls.n	800bf08 <__ieee754_pow+0x128>
 800bef6:	f1b9 0f00 	cmp.w	r9, #0
 800befa:	f2c0 8476 	blt.w	800c7ea <__ieee754_pow+0xa0a>
 800befe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf02:	e78a      	b.n	800be1a <__ieee754_pow+0x3a>
 800bf04:	2402      	movs	r4, #2
 800bf06:	e7e8      	b.n	800beda <__ieee754_pow+0xfa>
 800bf08:	f1b9 0f00 	cmp.w	r9, #0
 800bf0c:	f04f 0000 	mov.w	r0, #0
 800bf10:	f04f 0100 	mov.w	r1, #0
 800bf14:	da81      	bge.n	800be1a <__ieee754_pow+0x3a>
 800bf16:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bf1a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bf1e:	e77c      	b.n	800be1a <__ieee754_pow+0x3a>
 800bf20:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bf24:	d106      	bne.n	800bf34 <__ieee754_pow+0x154>
 800bf26:	4632      	mov	r2, r6
 800bf28:	463b      	mov	r3, r7
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4639      	mov	r1, r7
 800bf2e:	f7f4 fb83 	bl	8000638 <__aeabi_dmul>
 800bf32:	e772      	b.n	800be1a <__ieee754_pow+0x3a>
 800bf34:	4a51      	ldr	r2, [pc, #324]	@ (800c07c <__ieee754_pow+0x29c>)
 800bf36:	4591      	cmp	r9, r2
 800bf38:	d109      	bne.n	800bf4e <__ieee754_pow+0x16e>
 800bf3a:	2d00      	cmp	r5, #0
 800bf3c:	db07      	blt.n	800bf4e <__ieee754_pow+0x16e>
 800bf3e:	ec47 6b10 	vmov	d0, r6, r7
 800bf42:	b011      	add	sp, #68	@ 0x44
 800bf44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf48:	f000 bd56 	b.w	800c9f8 <__ieee754_sqrt>
 800bf4c:	2400      	movs	r4, #0
 800bf4e:	ec47 6b10 	vmov	d0, r6, r7
 800bf52:	9302      	str	r3, [sp, #8]
 800bf54:	f000 fc88 	bl	800c868 <fabs>
 800bf58:	9b02      	ldr	r3, [sp, #8]
 800bf5a:	ec51 0b10 	vmov	r0, r1, d0
 800bf5e:	bb53      	cbnz	r3, 800bfb6 <__ieee754_pow+0x1d6>
 800bf60:	4b44      	ldr	r3, [pc, #272]	@ (800c074 <__ieee754_pow+0x294>)
 800bf62:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bf66:	429a      	cmp	r2, r3
 800bf68:	d002      	beq.n	800bf70 <__ieee754_pow+0x190>
 800bf6a:	f1b8 0f00 	cmp.w	r8, #0
 800bf6e:	d122      	bne.n	800bfb6 <__ieee754_pow+0x1d6>
 800bf70:	f1b9 0f00 	cmp.w	r9, #0
 800bf74:	da05      	bge.n	800bf82 <__ieee754_pow+0x1a2>
 800bf76:	4602      	mov	r2, r0
 800bf78:	460b      	mov	r3, r1
 800bf7a:	2000      	movs	r0, #0
 800bf7c:	493d      	ldr	r1, [pc, #244]	@ (800c074 <__ieee754_pow+0x294>)
 800bf7e:	f7f4 fc85 	bl	800088c <__aeabi_ddiv>
 800bf82:	2d00      	cmp	r5, #0
 800bf84:	f6bf af49 	bge.w	800be1a <__ieee754_pow+0x3a>
 800bf88:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bf8c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bf90:	ea58 0804 	orrs.w	r8, r8, r4
 800bf94:	d108      	bne.n	800bfa8 <__ieee754_pow+0x1c8>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4610      	mov	r0, r2
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	f7f4 f993 	bl	80002c8 <__aeabi_dsub>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	e794      	b.n	800bed2 <__ieee754_pow+0xf2>
 800bfa8:	2c01      	cmp	r4, #1
 800bfaa:	f47f af36 	bne.w	800be1a <__ieee754_pow+0x3a>
 800bfae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bfb2:	4619      	mov	r1, r3
 800bfb4:	e731      	b.n	800be1a <__ieee754_pow+0x3a>
 800bfb6:	0feb      	lsrs	r3, r5, #31
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	ea53 0204 	orrs.w	r2, r3, r4
 800bfbe:	d102      	bne.n	800bfc6 <__ieee754_pow+0x1e6>
 800bfc0:	4632      	mov	r2, r6
 800bfc2:	463b      	mov	r3, r7
 800bfc4:	e7e9      	b.n	800bf9a <__ieee754_pow+0x1ba>
 800bfc6:	3c01      	subs	r4, #1
 800bfc8:	431c      	orrs	r4, r3
 800bfca:	d016      	beq.n	800bffa <__ieee754_pow+0x21a>
 800bfcc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800c058 <__ieee754_pow+0x278>
 800bfd0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bfd4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bfd8:	f240 8112 	bls.w	800c200 <__ieee754_pow+0x420>
 800bfdc:	4b28      	ldr	r3, [pc, #160]	@ (800c080 <__ieee754_pow+0x2a0>)
 800bfde:	459a      	cmp	sl, r3
 800bfe0:	4b25      	ldr	r3, [pc, #148]	@ (800c078 <__ieee754_pow+0x298>)
 800bfe2:	d916      	bls.n	800c012 <__ieee754_pow+0x232>
 800bfe4:	4598      	cmp	r8, r3
 800bfe6:	d80b      	bhi.n	800c000 <__ieee754_pow+0x220>
 800bfe8:	f1b9 0f00 	cmp.w	r9, #0
 800bfec:	da0b      	bge.n	800c006 <__ieee754_pow+0x226>
 800bfee:	2000      	movs	r0, #0
 800bff0:	b011      	add	sp, #68	@ 0x44
 800bff2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bff6:	f000 bcf7 	b.w	800c9e8 <__math_oflow>
 800bffa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800c060 <__ieee754_pow+0x280>
 800bffe:	e7e7      	b.n	800bfd0 <__ieee754_pow+0x1f0>
 800c000:	f1b9 0f00 	cmp.w	r9, #0
 800c004:	dcf3      	bgt.n	800bfee <__ieee754_pow+0x20e>
 800c006:	2000      	movs	r0, #0
 800c008:	b011      	add	sp, #68	@ 0x44
 800c00a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c00e:	f000 bce3 	b.w	800c9d8 <__math_uflow>
 800c012:	4598      	cmp	r8, r3
 800c014:	d20c      	bcs.n	800c030 <__ieee754_pow+0x250>
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	2200      	movs	r2, #0
 800c01c:	2300      	movs	r3, #0
 800c01e:	f7f4 fd7d 	bl	8000b1c <__aeabi_dcmplt>
 800c022:	3800      	subs	r0, #0
 800c024:	bf18      	it	ne
 800c026:	2001      	movne	r0, #1
 800c028:	f1b9 0f00 	cmp.w	r9, #0
 800c02c:	daec      	bge.n	800c008 <__ieee754_pow+0x228>
 800c02e:	e7df      	b.n	800bff0 <__ieee754_pow+0x210>
 800c030:	4b10      	ldr	r3, [pc, #64]	@ (800c074 <__ieee754_pow+0x294>)
 800c032:	4598      	cmp	r8, r3
 800c034:	f04f 0200 	mov.w	r2, #0
 800c038:	d924      	bls.n	800c084 <__ieee754_pow+0x2a4>
 800c03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c03e:	2300      	movs	r3, #0
 800c040:	f7f4 fd6c 	bl	8000b1c <__aeabi_dcmplt>
 800c044:	3800      	subs	r0, #0
 800c046:	bf18      	it	ne
 800c048:	2001      	movne	r0, #1
 800c04a:	f1b9 0f00 	cmp.w	r9, #0
 800c04e:	dccf      	bgt.n	800bff0 <__ieee754_pow+0x210>
 800c050:	e7da      	b.n	800c008 <__ieee754_pow+0x228>
 800c052:	bf00      	nop
 800c054:	f3af 8000 	nop.w
 800c058:	00000000 	.word	0x00000000
 800c05c:	3ff00000 	.word	0x3ff00000
 800c060:	00000000 	.word	0x00000000
 800c064:	bff00000 	.word	0xbff00000
 800c068:	fff00000 	.word	0xfff00000
 800c06c:	7ff00000 	.word	0x7ff00000
 800c070:	433fffff 	.word	0x433fffff
 800c074:	3ff00000 	.word	0x3ff00000
 800c078:	3fefffff 	.word	0x3fefffff
 800c07c:	3fe00000 	.word	0x3fe00000
 800c080:	43f00000 	.word	0x43f00000
 800c084:	4b5a      	ldr	r3, [pc, #360]	@ (800c1f0 <__ieee754_pow+0x410>)
 800c086:	f7f4 f91f 	bl	80002c8 <__aeabi_dsub>
 800c08a:	a351      	add	r3, pc, #324	@ (adr r3, 800c1d0 <__ieee754_pow+0x3f0>)
 800c08c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c090:	4604      	mov	r4, r0
 800c092:	460d      	mov	r5, r1
 800c094:	f7f4 fad0 	bl	8000638 <__aeabi_dmul>
 800c098:	a34f      	add	r3, pc, #316	@ (adr r3, 800c1d8 <__ieee754_pow+0x3f8>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	4606      	mov	r6, r0
 800c0a0:	460f      	mov	r7, r1
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	f7f4 fac7 	bl	8000638 <__aeabi_dmul>
 800c0aa:	4b52      	ldr	r3, [pc, #328]	@ (800c1f4 <__ieee754_pow+0x414>)
 800c0ac:	4682      	mov	sl, r0
 800c0ae:	468b      	mov	fp, r1
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	4629      	mov	r1, r5
 800c0b6:	f7f4 fabf 	bl	8000638 <__aeabi_dmul>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	460b      	mov	r3, r1
 800c0be:	a148      	add	r1, pc, #288	@ (adr r1, 800c1e0 <__ieee754_pow+0x400>)
 800c0c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c0c4:	f7f4 f900 	bl	80002c8 <__aeabi_dsub>
 800c0c8:	4622      	mov	r2, r4
 800c0ca:	462b      	mov	r3, r5
 800c0cc:	f7f4 fab4 	bl	8000638 <__aeabi_dmul>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	2000      	movs	r0, #0
 800c0d6:	4948      	ldr	r1, [pc, #288]	@ (800c1f8 <__ieee754_pow+0x418>)
 800c0d8:	f7f4 f8f6 	bl	80002c8 <__aeabi_dsub>
 800c0dc:	4622      	mov	r2, r4
 800c0de:	4680      	mov	r8, r0
 800c0e0:	4689      	mov	r9, r1
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	4629      	mov	r1, r5
 800c0e8:	f7f4 faa6 	bl	8000638 <__aeabi_dmul>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	460b      	mov	r3, r1
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4649      	mov	r1, r9
 800c0f4:	f7f4 faa0 	bl	8000638 <__aeabi_dmul>
 800c0f8:	a33b      	add	r3, pc, #236	@ (adr r3, 800c1e8 <__ieee754_pow+0x408>)
 800c0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0fe:	f7f4 fa9b 	bl	8000638 <__aeabi_dmul>
 800c102:	4602      	mov	r2, r0
 800c104:	460b      	mov	r3, r1
 800c106:	4650      	mov	r0, sl
 800c108:	4659      	mov	r1, fp
 800c10a:	f7f4 f8dd 	bl	80002c8 <__aeabi_dsub>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4680      	mov	r8, r0
 800c114:	4689      	mov	r9, r1
 800c116:	4630      	mov	r0, r6
 800c118:	4639      	mov	r1, r7
 800c11a:	f7f4 f8d7 	bl	80002cc <__adddf3>
 800c11e:	2400      	movs	r4, #0
 800c120:	4632      	mov	r2, r6
 800c122:	463b      	mov	r3, r7
 800c124:	4620      	mov	r0, r4
 800c126:	460d      	mov	r5, r1
 800c128:	f7f4 f8ce 	bl	80002c8 <__aeabi_dsub>
 800c12c:	4602      	mov	r2, r0
 800c12e:	460b      	mov	r3, r1
 800c130:	4640      	mov	r0, r8
 800c132:	4649      	mov	r1, r9
 800c134:	f7f4 f8c8 	bl	80002c8 <__aeabi_dsub>
 800c138:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c13c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c140:	2300      	movs	r3, #0
 800c142:	9304      	str	r3, [sp, #16]
 800c144:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800c148:	4606      	mov	r6, r0
 800c14a:	460f      	mov	r7, r1
 800c14c:	4652      	mov	r2, sl
 800c14e:	465b      	mov	r3, fp
 800c150:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c154:	f7f4 f8b8 	bl	80002c8 <__aeabi_dsub>
 800c158:	4622      	mov	r2, r4
 800c15a:	462b      	mov	r3, r5
 800c15c:	f7f4 fa6c 	bl	8000638 <__aeabi_dmul>
 800c160:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c164:	4680      	mov	r8, r0
 800c166:	4689      	mov	r9, r1
 800c168:	4630      	mov	r0, r6
 800c16a:	4639      	mov	r1, r7
 800c16c:	f7f4 fa64 	bl	8000638 <__aeabi_dmul>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4640      	mov	r0, r8
 800c176:	4649      	mov	r1, r9
 800c178:	f7f4 f8a8 	bl	80002cc <__adddf3>
 800c17c:	4652      	mov	r2, sl
 800c17e:	465b      	mov	r3, fp
 800c180:	4606      	mov	r6, r0
 800c182:	460f      	mov	r7, r1
 800c184:	4620      	mov	r0, r4
 800c186:	4629      	mov	r1, r5
 800c188:	f7f4 fa56 	bl	8000638 <__aeabi_dmul>
 800c18c:	460b      	mov	r3, r1
 800c18e:	4602      	mov	r2, r0
 800c190:	4680      	mov	r8, r0
 800c192:	4689      	mov	r9, r1
 800c194:	4630      	mov	r0, r6
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 f898 	bl	80002cc <__adddf3>
 800c19c:	4b17      	ldr	r3, [pc, #92]	@ (800c1fc <__ieee754_pow+0x41c>)
 800c19e:	4299      	cmp	r1, r3
 800c1a0:	4604      	mov	r4, r0
 800c1a2:	460d      	mov	r5, r1
 800c1a4:	468a      	mov	sl, r1
 800c1a6:	468b      	mov	fp, r1
 800c1a8:	f340 82ef 	ble.w	800c78a <__ieee754_pow+0x9aa>
 800c1ac:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800c1b0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800c1b4:	4303      	orrs	r3, r0
 800c1b6:	f000 81e8 	beq.w	800c58a <__ieee754_pow+0x7aa>
 800c1ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	f7f4 fcab 	bl	8000b1c <__aeabi_dcmplt>
 800c1c6:	3800      	subs	r0, #0
 800c1c8:	bf18      	it	ne
 800c1ca:	2001      	movne	r0, #1
 800c1cc:	e710      	b.n	800bff0 <__ieee754_pow+0x210>
 800c1ce:	bf00      	nop
 800c1d0:	60000000 	.word	0x60000000
 800c1d4:	3ff71547 	.word	0x3ff71547
 800c1d8:	f85ddf44 	.word	0xf85ddf44
 800c1dc:	3e54ae0b 	.word	0x3e54ae0b
 800c1e0:	55555555 	.word	0x55555555
 800c1e4:	3fd55555 	.word	0x3fd55555
 800c1e8:	652b82fe 	.word	0x652b82fe
 800c1ec:	3ff71547 	.word	0x3ff71547
 800c1f0:	3ff00000 	.word	0x3ff00000
 800c1f4:	3fd00000 	.word	0x3fd00000
 800c1f8:	3fe00000 	.word	0x3fe00000
 800c1fc:	408fffff 	.word	0x408fffff
 800c200:	4bd5      	ldr	r3, [pc, #852]	@ (800c558 <__ieee754_pow+0x778>)
 800c202:	402b      	ands	r3, r5
 800c204:	2200      	movs	r2, #0
 800c206:	b92b      	cbnz	r3, 800c214 <__ieee754_pow+0x434>
 800c208:	4bd4      	ldr	r3, [pc, #848]	@ (800c55c <__ieee754_pow+0x77c>)
 800c20a:	f7f4 fa15 	bl	8000638 <__aeabi_dmul>
 800c20e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800c212:	468b      	mov	fp, r1
 800c214:	ea4f 532b 	mov.w	r3, fp, asr #20
 800c218:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c21c:	4413      	add	r3, r2
 800c21e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c220:	4bcf      	ldr	r3, [pc, #828]	@ (800c560 <__ieee754_pow+0x780>)
 800c222:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800c226:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800c22a:	459b      	cmp	fp, r3
 800c22c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c230:	dd08      	ble.n	800c244 <__ieee754_pow+0x464>
 800c232:	4bcc      	ldr	r3, [pc, #816]	@ (800c564 <__ieee754_pow+0x784>)
 800c234:	459b      	cmp	fp, r3
 800c236:	f340 81a5 	ble.w	800c584 <__ieee754_pow+0x7a4>
 800c23a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c23c:	3301      	adds	r3, #1
 800c23e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c240:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800c244:	f04f 0a00 	mov.w	sl, #0
 800c248:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800c24c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c24e:	4bc6      	ldr	r3, [pc, #792]	@ (800c568 <__ieee754_pow+0x788>)
 800c250:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c254:	ed93 7b00 	vldr	d7, [r3]
 800c258:	4629      	mov	r1, r5
 800c25a:	ec53 2b17 	vmov	r2, r3, d7
 800c25e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c262:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c266:	f7f4 f82f 	bl	80002c8 <__aeabi_dsub>
 800c26a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c26e:	4606      	mov	r6, r0
 800c270:	460f      	mov	r7, r1
 800c272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c276:	f7f4 f829 	bl	80002cc <__adddf3>
 800c27a:	4602      	mov	r2, r0
 800c27c:	460b      	mov	r3, r1
 800c27e:	2000      	movs	r0, #0
 800c280:	49ba      	ldr	r1, [pc, #744]	@ (800c56c <__ieee754_pow+0x78c>)
 800c282:	f7f4 fb03 	bl	800088c <__aeabi_ddiv>
 800c286:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800c28a:	4602      	mov	r2, r0
 800c28c:	460b      	mov	r3, r1
 800c28e:	4630      	mov	r0, r6
 800c290:	4639      	mov	r1, r7
 800c292:	f7f4 f9d1 	bl	8000638 <__aeabi_dmul>
 800c296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c29a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800c29e:	106d      	asrs	r5, r5, #1
 800c2a0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800c2a4:	f04f 0b00 	mov.w	fp, #0
 800c2a8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800c2ac:	4661      	mov	r1, ip
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800c2b4:	4658      	mov	r0, fp
 800c2b6:	46e1      	mov	r9, ip
 800c2b8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800c2bc:	4614      	mov	r4, r2
 800c2be:	461d      	mov	r5, r3
 800c2c0:	f7f4 f9ba 	bl	8000638 <__aeabi_dmul>
 800c2c4:	4602      	mov	r2, r0
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f3 fffc 	bl	80002c8 <__aeabi_dsub>
 800c2d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c2d4:	4606      	mov	r6, r0
 800c2d6:	460f      	mov	r7, r1
 800c2d8:	4620      	mov	r0, r4
 800c2da:	4629      	mov	r1, r5
 800c2dc:	f7f3 fff4 	bl	80002c8 <__aeabi_dsub>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c2e8:	f7f3 ffee 	bl	80002c8 <__aeabi_dsub>
 800c2ec:	465a      	mov	r2, fp
 800c2ee:	464b      	mov	r3, r9
 800c2f0:	f7f4 f9a2 	bl	8000638 <__aeabi_dmul>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f3 ffe4 	bl	80002c8 <__aeabi_dsub>
 800c300:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c304:	f7f4 f998 	bl	8000638 <__aeabi_dmul>
 800c308:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c310:	4610      	mov	r0, r2
 800c312:	4619      	mov	r1, r3
 800c314:	f7f4 f990 	bl	8000638 <__aeabi_dmul>
 800c318:	a37d      	add	r3, pc, #500	@ (adr r3, 800c510 <__ieee754_pow+0x730>)
 800c31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c31e:	4604      	mov	r4, r0
 800c320:	460d      	mov	r5, r1
 800c322:	f7f4 f989 	bl	8000638 <__aeabi_dmul>
 800c326:	a37c      	add	r3, pc, #496	@ (adr r3, 800c518 <__ieee754_pow+0x738>)
 800c328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32c:	f7f3 ffce 	bl	80002cc <__adddf3>
 800c330:	4622      	mov	r2, r4
 800c332:	462b      	mov	r3, r5
 800c334:	f7f4 f980 	bl	8000638 <__aeabi_dmul>
 800c338:	a379      	add	r3, pc, #484	@ (adr r3, 800c520 <__ieee754_pow+0x740>)
 800c33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c33e:	f7f3 ffc5 	bl	80002cc <__adddf3>
 800c342:	4622      	mov	r2, r4
 800c344:	462b      	mov	r3, r5
 800c346:	f7f4 f977 	bl	8000638 <__aeabi_dmul>
 800c34a:	a377      	add	r3, pc, #476	@ (adr r3, 800c528 <__ieee754_pow+0x748>)
 800c34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c350:	f7f3 ffbc 	bl	80002cc <__adddf3>
 800c354:	4622      	mov	r2, r4
 800c356:	462b      	mov	r3, r5
 800c358:	f7f4 f96e 	bl	8000638 <__aeabi_dmul>
 800c35c:	a374      	add	r3, pc, #464	@ (adr r3, 800c530 <__ieee754_pow+0x750>)
 800c35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c362:	f7f3 ffb3 	bl	80002cc <__adddf3>
 800c366:	4622      	mov	r2, r4
 800c368:	462b      	mov	r3, r5
 800c36a:	f7f4 f965 	bl	8000638 <__aeabi_dmul>
 800c36e:	a372      	add	r3, pc, #456	@ (adr r3, 800c538 <__ieee754_pow+0x758>)
 800c370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c374:	f7f3 ffaa 	bl	80002cc <__adddf3>
 800c378:	4622      	mov	r2, r4
 800c37a:	4606      	mov	r6, r0
 800c37c:	460f      	mov	r7, r1
 800c37e:	462b      	mov	r3, r5
 800c380:	4620      	mov	r0, r4
 800c382:	4629      	mov	r1, r5
 800c384:	f7f4 f958 	bl	8000638 <__aeabi_dmul>
 800c388:	4602      	mov	r2, r0
 800c38a:	460b      	mov	r3, r1
 800c38c:	4630      	mov	r0, r6
 800c38e:	4639      	mov	r1, r7
 800c390:	f7f4 f952 	bl	8000638 <__aeabi_dmul>
 800c394:	465a      	mov	r2, fp
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	464b      	mov	r3, r9
 800c39c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3a0:	f7f3 ff94 	bl	80002cc <__adddf3>
 800c3a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c3a8:	f7f4 f946 	bl	8000638 <__aeabi_dmul>
 800c3ac:	4622      	mov	r2, r4
 800c3ae:	462b      	mov	r3, r5
 800c3b0:	f7f3 ff8c 	bl	80002cc <__adddf3>
 800c3b4:	465a      	mov	r2, fp
 800c3b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3ba:	464b      	mov	r3, r9
 800c3bc:	4658      	mov	r0, fp
 800c3be:	4649      	mov	r1, r9
 800c3c0:	f7f4 f93a 	bl	8000638 <__aeabi_dmul>
 800c3c4:	4b6a      	ldr	r3, [pc, #424]	@ (800c570 <__ieee754_pow+0x790>)
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	4606      	mov	r6, r0
 800c3ca:	460f      	mov	r7, r1
 800c3cc:	f7f3 ff7e 	bl	80002cc <__adddf3>
 800c3d0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c3d4:	f7f3 ff7a 	bl	80002cc <__adddf3>
 800c3d8:	46d8      	mov	r8, fp
 800c3da:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c3de:	460d      	mov	r5, r1
 800c3e0:	465a      	mov	r2, fp
 800c3e2:	460b      	mov	r3, r1
 800c3e4:	4640      	mov	r0, r8
 800c3e6:	4649      	mov	r1, r9
 800c3e8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c3ec:	f7f4 f924 	bl	8000638 <__aeabi_dmul>
 800c3f0:	465c      	mov	r4, fp
 800c3f2:	4680      	mov	r8, r0
 800c3f4:	4689      	mov	r9, r1
 800c3f6:	4b5e      	ldr	r3, [pc, #376]	@ (800c570 <__ieee754_pow+0x790>)
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	4629      	mov	r1, r5
 800c3fe:	f7f3 ff63 	bl	80002c8 <__aeabi_dsub>
 800c402:	4632      	mov	r2, r6
 800c404:	463b      	mov	r3, r7
 800c406:	f7f3 ff5f 	bl	80002c8 <__aeabi_dsub>
 800c40a:	4602      	mov	r2, r0
 800c40c:	460b      	mov	r3, r1
 800c40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c412:	f7f3 ff59 	bl	80002c8 <__aeabi_dsub>
 800c416:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c41a:	f7f4 f90d 	bl	8000638 <__aeabi_dmul>
 800c41e:	4622      	mov	r2, r4
 800c420:	4606      	mov	r6, r0
 800c422:	460f      	mov	r7, r1
 800c424:	462b      	mov	r3, r5
 800c426:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c42a:	f7f4 f905 	bl	8000638 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4630      	mov	r0, r6
 800c434:	4639      	mov	r1, r7
 800c436:	f7f3 ff49 	bl	80002cc <__adddf3>
 800c43a:	4606      	mov	r6, r0
 800c43c:	460f      	mov	r7, r1
 800c43e:	4602      	mov	r2, r0
 800c440:	460b      	mov	r3, r1
 800c442:	4640      	mov	r0, r8
 800c444:	4649      	mov	r1, r9
 800c446:	f7f3 ff41 	bl	80002cc <__adddf3>
 800c44a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c44e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c540 <__ieee754_pow+0x760>)
 800c450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c454:	4658      	mov	r0, fp
 800c456:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c45a:	460d      	mov	r5, r1
 800c45c:	f7f4 f8ec 	bl	8000638 <__aeabi_dmul>
 800c460:	465c      	mov	r4, fp
 800c462:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c466:	4642      	mov	r2, r8
 800c468:	464b      	mov	r3, r9
 800c46a:	4620      	mov	r0, r4
 800c46c:	4629      	mov	r1, r5
 800c46e:	f7f3 ff2b 	bl	80002c8 <__aeabi_dsub>
 800c472:	4602      	mov	r2, r0
 800c474:	460b      	mov	r3, r1
 800c476:	4630      	mov	r0, r6
 800c478:	4639      	mov	r1, r7
 800c47a:	f7f3 ff25 	bl	80002c8 <__aeabi_dsub>
 800c47e:	a332      	add	r3, pc, #200	@ (adr r3, 800c548 <__ieee754_pow+0x768>)
 800c480:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c484:	f7f4 f8d8 	bl	8000638 <__aeabi_dmul>
 800c488:	a331      	add	r3, pc, #196	@ (adr r3, 800c550 <__ieee754_pow+0x770>)
 800c48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c48e:	4606      	mov	r6, r0
 800c490:	460f      	mov	r7, r1
 800c492:	4620      	mov	r0, r4
 800c494:	4629      	mov	r1, r5
 800c496:	f7f4 f8cf 	bl	8000638 <__aeabi_dmul>
 800c49a:	4602      	mov	r2, r0
 800c49c:	460b      	mov	r3, r1
 800c49e:	4630      	mov	r0, r6
 800c4a0:	4639      	mov	r1, r7
 800c4a2:	f7f3 ff13 	bl	80002cc <__adddf3>
 800c4a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4a8:	4b32      	ldr	r3, [pc, #200]	@ (800c574 <__ieee754_pow+0x794>)
 800c4aa:	4413      	add	r3, r2
 800c4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4b0:	f7f3 ff0c 	bl	80002cc <__adddf3>
 800c4b4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c4b8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c4ba:	f7f4 f853 	bl	8000564 <__aeabi_i2d>
 800c4be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4c0:	4b2d      	ldr	r3, [pc, #180]	@ (800c578 <__ieee754_pow+0x798>)
 800c4c2:	4413      	add	r3, r2
 800c4c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4c8:	4606      	mov	r6, r0
 800c4ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c4ce:	460f      	mov	r7, r1
 800c4d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c4d4:	f7f3 fefa 	bl	80002cc <__adddf3>
 800c4d8:	4642      	mov	r2, r8
 800c4da:	464b      	mov	r3, r9
 800c4dc:	f7f3 fef6 	bl	80002cc <__adddf3>
 800c4e0:	4632      	mov	r2, r6
 800c4e2:	463b      	mov	r3, r7
 800c4e4:	f7f3 fef2 	bl	80002cc <__adddf3>
 800c4e8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c4ec:	4632      	mov	r2, r6
 800c4ee:	463b      	mov	r3, r7
 800c4f0:	4658      	mov	r0, fp
 800c4f2:	460d      	mov	r5, r1
 800c4f4:	f7f3 fee8 	bl	80002c8 <__aeabi_dsub>
 800c4f8:	4642      	mov	r2, r8
 800c4fa:	464b      	mov	r3, r9
 800c4fc:	f7f3 fee4 	bl	80002c8 <__aeabi_dsub>
 800c500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c504:	f7f3 fee0 	bl	80002c8 <__aeabi_dsub>
 800c508:	465c      	mov	r4, fp
 800c50a:	4602      	mov	r2, r0
 800c50c:	e036      	b.n	800c57c <__ieee754_pow+0x79c>
 800c50e:	bf00      	nop
 800c510:	4a454eef 	.word	0x4a454eef
 800c514:	3fca7e28 	.word	0x3fca7e28
 800c518:	93c9db65 	.word	0x93c9db65
 800c51c:	3fcd864a 	.word	0x3fcd864a
 800c520:	a91d4101 	.word	0xa91d4101
 800c524:	3fd17460 	.word	0x3fd17460
 800c528:	518f264d 	.word	0x518f264d
 800c52c:	3fd55555 	.word	0x3fd55555
 800c530:	db6fabff 	.word	0xdb6fabff
 800c534:	3fdb6db6 	.word	0x3fdb6db6
 800c538:	33333303 	.word	0x33333303
 800c53c:	3fe33333 	.word	0x3fe33333
 800c540:	e0000000 	.word	0xe0000000
 800c544:	3feec709 	.word	0x3feec709
 800c548:	dc3a03fd 	.word	0xdc3a03fd
 800c54c:	3feec709 	.word	0x3feec709
 800c550:	145b01f5 	.word	0x145b01f5
 800c554:	be3e2fe0 	.word	0xbe3e2fe0
 800c558:	7ff00000 	.word	0x7ff00000
 800c55c:	43400000 	.word	0x43400000
 800c560:	0003988e 	.word	0x0003988e
 800c564:	000bb679 	.word	0x000bb679
 800c568:	0800dcb0 	.word	0x0800dcb0
 800c56c:	3ff00000 	.word	0x3ff00000
 800c570:	40080000 	.word	0x40080000
 800c574:	0800dc90 	.word	0x0800dc90
 800c578:	0800dca0 	.word	0x0800dca0
 800c57c:	460b      	mov	r3, r1
 800c57e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c582:	e5d7      	b.n	800c134 <__ieee754_pow+0x354>
 800c584:	f04f 0a01 	mov.w	sl, #1
 800c588:	e65e      	b.n	800c248 <__ieee754_pow+0x468>
 800c58a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c85c <__ieee754_pow+0xa7c>)
 800c58c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c590:	4630      	mov	r0, r6
 800c592:	4639      	mov	r1, r7
 800c594:	f7f3 fe9a 	bl	80002cc <__adddf3>
 800c598:	4642      	mov	r2, r8
 800c59a:	e9cd 0100 	strd	r0, r1, [sp]
 800c59e:	464b      	mov	r3, r9
 800c5a0:	4620      	mov	r0, r4
 800c5a2:	4629      	mov	r1, r5
 800c5a4:	f7f3 fe90 	bl	80002c8 <__aeabi_dsub>
 800c5a8:	4602      	mov	r2, r0
 800c5aa:	460b      	mov	r3, r1
 800c5ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c5b0:	f7f4 fad2 	bl	8000b58 <__aeabi_dcmpgt>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	f47f ae00 	bne.w	800c1ba <__ieee754_pow+0x3da>
 800c5ba:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c5be:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c5c2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c5c6:	fa43 fa0a 	asr.w	sl, r3, sl
 800c5ca:	44da      	add	sl, fp
 800c5cc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c5d0:	489d      	ldr	r0, [pc, #628]	@ (800c848 <__ieee754_pow+0xa68>)
 800c5d2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c5d6:	4108      	asrs	r0, r1
 800c5d8:	ea00 030a 	and.w	r3, r0, sl
 800c5dc:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c5e0:	f1c1 0114 	rsb	r1, r1, #20
 800c5e4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c5e8:	fa4a fa01 	asr.w	sl, sl, r1
 800c5ec:	f1bb 0f00 	cmp.w	fp, #0
 800c5f0:	4640      	mov	r0, r8
 800c5f2:	4649      	mov	r1, r9
 800c5f4:	f04f 0200 	mov.w	r2, #0
 800c5f8:	bfb8      	it	lt
 800c5fa:	f1ca 0a00 	rsblt	sl, sl, #0
 800c5fe:	f7f3 fe63 	bl	80002c8 <__aeabi_dsub>
 800c602:	4680      	mov	r8, r0
 800c604:	4689      	mov	r9, r1
 800c606:	4632      	mov	r2, r6
 800c608:	463b      	mov	r3, r7
 800c60a:	4640      	mov	r0, r8
 800c60c:	4649      	mov	r1, r9
 800c60e:	f7f3 fe5d 	bl	80002cc <__adddf3>
 800c612:	2400      	movs	r4, #0
 800c614:	a37c      	add	r3, pc, #496	@ (adr r3, 800c808 <__ieee754_pow+0xa28>)
 800c616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c61a:	4620      	mov	r0, r4
 800c61c:	460d      	mov	r5, r1
 800c61e:	f7f4 f80b 	bl	8000638 <__aeabi_dmul>
 800c622:	4642      	mov	r2, r8
 800c624:	e9cd 0100 	strd	r0, r1, [sp]
 800c628:	464b      	mov	r3, r9
 800c62a:	4620      	mov	r0, r4
 800c62c:	4629      	mov	r1, r5
 800c62e:	f7f3 fe4b 	bl	80002c8 <__aeabi_dsub>
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	4630      	mov	r0, r6
 800c638:	4639      	mov	r1, r7
 800c63a:	f7f3 fe45 	bl	80002c8 <__aeabi_dsub>
 800c63e:	a374      	add	r3, pc, #464	@ (adr r3, 800c810 <__ieee754_pow+0xa30>)
 800c640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c644:	f7f3 fff8 	bl	8000638 <__aeabi_dmul>
 800c648:	a373      	add	r3, pc, #460	@ (adr r3, 800c818 <__ieee754_pow+0xa38>)
 800c64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64e:	4680      	mov	r8, r0
 800c650:	4689      	mov	r9, r1
 800c652:	4620      	mov	r0, r4
 800c654:	4629      	mov	r1, r5
 800c656:	f7f3 ffef 	bl	8000638 <__aeabi_dmul>
 800c65a:	4602      	mov	r2, r0
 800c65c:	460b      	mov	r3, r1
 800c65e:	4640      	mov	r0, r8
 800c660:	4649      	mov	r1, r9
 800c662:	f7f3 fe33 	bl	80002cc <__adddf3>
 800c666:	4604      	mov	r4, r0
 800c668:	460d      	mov	r5, r1
 800c66a:	4602      	mov	r2, r0
 800c66c:	460b      	mov	r3, r1
 800c66e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c672:	f7f3 fe2b 	bl	80002cc <__adddf3>
 800c676:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c67a:	4680      	mov	r8, r0
 800c67c:	4689      	mov	r9, r1
 800c67e:	f7f3 fe23 	bl	80002c8 <__aeabi_dsub>
 800c682:	4602      	mov	r2, r0
 800c684:	460b      	mov	r3, r1
 800c686:	4620      	mov	r0, r4
 800c688:	4629      	mov	r1, r5
 800c68a:	f7f3 fe1d 	bl	80002c8 <__aeabi_dsub>
 800c68e:	4642      	mov	r2, r8
 800c690:	4606      	mov	r6, r0
 800c692:	460f      	mov	r7, r1
 800c694:	464b      	mov	r3, r9
 800c696:	4640      	mov	r0, r8
 800c698:	4649      	mov	r1, r9
 800c69a:	f7f3 ffcd 	bl	8000638 <__aeabi_dmul>
 800c69e:	a360      	add	r3, pc, #384	@ (adr r3, 800c820 <__ieee754_pow+0xa40>)
 800c6a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	460d      	mov	r5, r1
 800c6a8:	f7f3 ffc6 	bl	8000638 <__aeabi_dmul>
 800c6ac:	a35e      	add	r3, pc, #376	@ (adr r3, 800c828 <__ieee754_pow+0xa48>)
 800c6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6b2:	f7f3 fe09 	bl	80002c8 <__aeabi_dsub>
 800c6b6:	4622      	mov	r2, r4
 800c6b8:	462b      	mov	r3, r5
 800c6ba:	f7f3 ffbd 	bl	8000638 <__aeabi_dmul>
 800c6be:	a35c      	add	r3, pc, #368	@ (adr r3, 800c830 <__ieee754_pow+0xa50>)
 800c6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6c4:	f7f3 fe02 	bl	80002cc <__adddf3>
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	462b      	mov	r3, r5
 800c6cc:	f7f3 ffb4 	bl	8000638 <__aeabi_dmul>
 800c6d0:	a359      	add	r3, pc, #356	@ (adr r3, 800c838 <__ieee754_pow+0xa58>)
 800c6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d6:	f7f3 fdf7 	bl	80002c8 <__aeabi_dsub>
 800c6da:	4622      	mov	r2, r4
 800c6dc:	462b      	mov	r3, r5
 800c6de:	f7f3 ffab 	bl	8000638 <__aeabi_dmul>
 800c6e2:	a357      	add	r3, pc, #348	@ (adr r3, 800c840 <__ieee754_pow+0xa60>)
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	f7f3 fdf0 	bl	80002cc <__adddf3>
 800c6ec:	4622      	mov	r2, r4
 800c6ee:	462b      	mov	r3, r5
 800c6f0:	f7f3 ffa2 	bl	8000638 <__aeabi_dmul>
 800c6f4:	4602      	mov	r2, r0
 800c6f6:	460b      	mov	r3, r1
 800c6f8:	4640      	mov	r0, r8
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f3 fde4 	bl	80002c8 <__aeabi_dsub>
 800c700:	4604      	mov	r4, r0
 800c702:	460d      	mov	r5, r1
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	f7f3 ff94 	bl	8000638 <__aeabi_dmul>
 800c710:	2200      	movs	r2, #0
 800c712:	e9cd 0100 	strd	r0, r1, [sp]
 800c716:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c71a:	4620      	mov	r0, r4
 800c71c:	4629      	mov	r1, r5
 800c71e:	f7f3 fdd3 	bl	80002c8 <__aeabi_dsub>
 800c722:	4602      	mov	r2, r0
 800c724:	460b      	mov	r3, r1
 800c726:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c72a:	f7f4 f8af 	bl	800088c <__aeabi_ddiv>
 800c72e:	4632      	mov	r2, r6
 800c730:	4604      	mov	r4, r0
 800c732:	460d      	mov	r5, r1
 800c734:	463b      	mov	r3, r7
 800c736:	4640      	mov	r0, r8
 800c738:	4649      	mov	r1, r9
 800c73a:	f7f3 ff7d 	bl	8000638 <__aeabi_dmul>
 800c73e:	4632      	mov	r2, r6
 800c740:	463b      	mov	r3, r7
 800c742:	f7f3 fdc3 	bl	80002cc <__adddf3>
 800c746:	4602      	mov	r2, r0
 800c748:	460b      	mov	r3, r1
 800c74a:	4620      	mov	r0, r4
 800c74c:	4629      	mov	r1, r5
 800c74e:	f7f3 fdbb 	bl	80002c8 <__aeabi_dsub>
 800c752:	4642      	mov	r2, r8
 800c754:	464b      	mov	r3, r9
 800c756:	f7f3 fdb7 	bl	80002c8 <__aeabi_dsub>
 800c75a:	460b      	mov	r3, r1
 800c75c:	4602      	mov	r2, r0
 800c75e:	493b      	ldr	r1, [pc, #236]	@ (800c84c <__ieee754_pow+0xa6c>)
 800c760:	2000      	movs	r0, #0
 800c762:	f7f3 fdb1 	bl	80002c8 <__aeabi_dsub>
 800c766:	ec41 0b10 	vmov	d0, r0, r1
 800c76a:	ee10 3a90 	vmov	r3, s1
 800c76e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c772:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c776:	da30      	bge.n	800c7da <__ieee754_pow+0x9fa>
 800c778:	4650      	mov	r0, sl
 800c77a:	f7ff fa69 	bl	800bc50 <scalbn>
 800c77e:	ec51 0b10 	vmov	r0, r1, d0
 800c782:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c786:	f7ff bbd2 	b.w	800bf2e <__ieee754_pow+0x14e>
 800c78a:	4c31      	ldr	r4, [pc, #196]	@ (800c850 <__ieee754_pow+0xa70>)
 800c78c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c790:	42a3      	cmp	r3, r4
 800c792:	d91a      	bls.n	800c7ca <__ieee754_pow+0x9ea>
 800c794:	4b2f      	ldr	r3, [pc, #188]	@ (800c854 <__ieee754_pow+0xa74>)
 800c796:	440b      	add	r3, r1
 800c798:	4303      	orrs	r3, r0
 800c79a:	d009      	beq.n	800c7b0 <__ieee754_pow+0x9d0>
 800c79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	f7f4 f9ba 	bl	8000b1c <__aeabi_dcmplt>
 800c7a8:	3800      	subs	r0, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	2001      	movne	r0, #1
 800c7ae:	e42b      	b.n	800c008 <__ieee754_pow+0x228>
 800c7b0:	4642      	mov	r2, r8
 800c7b2:	464b      	mov	r3, r9
 800c7b4:	f7f3 fd88 	bl	80002c8 <__aeabi_dsub>
 800c7b8:	4632      	mov	r2, r6
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	f7f4 f9c2 	bl	8000b44 <__aeabi_dcmpge>
 800c7c0:	2800      	cmp	r0, #0
 800c7c2:	d1eb      	bne.n	800c79c <__ieee754_pow+0x9bc>
 800c7c4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c864 <__ieee754_pow+0xa84>
 800c7c8:	e6f7      	b.n	800c5ba <__ieee754_pow+0x7da>
 800c7ca:	469a      	mov	sl, r3
 800c7cc:	4b22      	ldr	r3, [pc, #136]	@ (800c858 <__ieee754_pow+0xa78>)
 800c7ce:	459a      	cmp	sl, r3
 800c7d0:	f63f aef3 	bhi.w	800c5ba <__ieee754_pow+0x7da>
 800c7d4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c7d8:	e715      	b.n	800c606 <__ieee754_pow+0x826>
 800c7da:	ec51 0b10 	vmov	r0, r1, d0
 800c7de:	4619      	mov	r1, r3
 800c7e0:	e7cf      	b.n	800c782 <__ieee754_pow+0x9a2>
 800c7e2:	491a      	ldr	r1, [pc, #104]	@ (800c84c <__ieee754_pow+0xa6c>)
 800c7e4:	2000      	movs	r0, #0
 800c7e6:	f7ff bb18 	b.w	800be1a <__ieee754_pow+0x3a>
 800c7ea:	2000      	movs	r0, #0
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	f7ff bb14 	b.w	800be1a <__ieee754_pow+0x3a>
 800c7f2:	4630      	mov	r0, r6
 800c7f4:	4639      	mov	r1, r7
 800c7f6:	f7ff bb10 	b.w	800be1a <__ieee754_pow+0x3a>
 800c7fa:	460c      	mov	r4, r1
 800c7fc:	f7ff bb5e 	b.w	800bebc <__ieee754_pow+0xdc>
 800c800:	2400      	movs	r4, #0
 800c802:	f7ff bb49 	b.w	800be98 <__ieee754_pow+0xb8>
 800c806:	bf00      	nop
 800c808:	00000000 	.word	0x00000000
 800c80c:	3fe62e43 	.word	0x3fe62e43
 800c810:	fefa39ef 	.word	0xfefa39ef
 800c814:	3fe62e42 	.word	0x3fe62e42
 800c818:	0ca86c39 	.word	0x0ca86c39
 800c81c:	be205c61 	.word	0xbe205c61
 800c820:	72bea4d0 	.word	0x72bea4d0
 800c824:	3e663769 	.word	0x3e663769
 800c828:	c5d26bf1 	.word	0xc5d26bf1
 800c82c:	3ebbbd41 	.word	0x3ebbbd41
 800c830:	af25de2c 	.word	0xaf25de2c
 800c834:	3f11566a 	.word	0x3f11566a
 800c838:	16bebd93 	.word	0x16bebd93
 800c83c:	3f66c16c 	.word	0x3f66c16c
 800c840:	5555553e 	.word	0x5555553e
 800c844:	3fc55555 	.word	0x3fc55555
 800c848:	fff00000 	.word	0xfff00000
 800c84c:	3ff00000 	.word	0x3ff00000
 800c850:	4090cbff 	.word	0x4090cbff
 800c854:	3f6f3400 	.word	0x3f6f3400
 800c858:	3fe00000 	.word	0x3fe00000
 800c85c:	652b82fe 	.word	0x652b82fe
 800c860:	3c971547 	.word	0x3c971547
 800c864:	4090cc00 	.word	0x4090cc00

0800c868 <fabs>:
 800c868:	ec51 0b10 	vmov	r0, r1, d0
 800c86c:	4602      	mov	r2, r0
 800c86e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c872:	ec43 2b10 	vmov	d0, r2, r3
 800c876:	4770      	bx	lr

0800c878 <__ieee754_fmodf>:
 800c878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c87a:	ee10 5a90 	vmov	r5, s1
 800c87e:	f025 4000 	bic.w	r0, r5, #2147483648	@ 0x80000000
 800c882:	1e43      	subs	r3, r0, #1
 800c884:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800c888:	d206      	bcs.n	800c898 <__ieee754_fmodf+0x20>
 800c88a:	ee10 3a10 	vmov	r3, s0
 800c88e:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 800c892:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800c896:	d304      	bcc.n	800c8a2 <__ieee754_fmodf+0x2a>
 800c898:	ee60 0a20 	vmul.f32	s1, s0, s1
 800c89c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800c8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8a2:	4286      	cmp	r6, r0
 800c8a4:	dbfc      	blt.n	800c8a0 <__ieee754_fmodf+0x28>
 800c8a6:	f003 4400 	and.w	r4, r3, #2147483648	@ 0x80000000
 800c8aa:	d105      	bne.n	800c8b8 <__ieee754_fmodf+0x40>
 800c8ac:	4b32      	ldr	r3, [pc, #200]	@ (800c978 <__ieee754_fmodf+0x100>)
 800c8ae:	eb03 7354 	add.w	r3, r3, r4, lsr #29
 800c8b2:	ed93 0a00 	vldr	s0, [r3]
 800c8b6:	e7f3      	b.n	800c8a0 <__ieee754_fmodf+0x28>
 800c8b8:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c8bc:	d140      	bne.n	800c940 <__ieee754_fmodf+0xc8>
 800c8be:	0232      	lsls	r2, r6, #8
 800c8c0:	f06f 017d 	mvn.w	r1, #125	@ 0x7d
 800c8c4:	2a00      	cmp	r2, #0
 800c8c6:	dc38      	bgt.n	800c93a <__ieee754_fmodf+0xc2>
 800c8c8:	f015 4fff 	tst.w	r5, #2139095040	@ 0x7f800000
 800c8cc:	d13e      	bne.n	800c94c <__ieee754_fmodf+0xd4>
 800c8ce:	0207      	lsls	r7, r0, #8
 800c8d0:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 800c8d4:	2f00      	cmp	r7, #0
 800c8d6:	da36      	bge.n	800c946 <__ieee754_fmodf+0xce>
 800c8d8:	f111 0f7e 	cmn.w	r1, #126	@ 0x7e
 800c8dc:	bfb9      	ittee	lt
 800c8de:	f06f 037d 	mvnlt.w	r3, #125	@ 0x7d
 800c8e2:	1a5b      	sublt	r3, r3, r1
 800c8e4:	f3c3 0316 	ubfxge	r3, r3, #0, #23
 800c8e8:	f443 0300 	orrge.w	r3, r3, #8388608	@ 0x800000
 800c8ec:	bfb8      	it	lt
 800c8ee:	fa06 f303 	lsllt.w	r3, r6, r3
 800c8f2:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c8f6:	bfb5      	itete	lt
 800c8f8:	f06f 057d 	mvnlt.w	r5, #125	@ 0x7d
 800c8fc:	f3c5 0516 	ubfxge	r5, r5, #0, #23
 800c900:	1aad      	sublt	r5, r5, r2
 800c902:	f445 0000 	orrge.w	r0, r5, #8388608	@ 0x800000
 800c906:	bfb8      	it	lt
 800c908:	40a8      	lsllt	r0, r5
 800c90a:	1a89      	subs	r1, r1, r2
 800c90c:	1a1d      	subs	r5, r3, r0
 800c90e:	bb01      	cbnz	r1, 800c952 <__ieee754_fmodf+0xda>
 800c910:	ea13 0325 	ands.w	r3, r3, r5, asr #32
 800c914:	bf38      	it	cc
 800c916:	462b      	movcc	r3, r5
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d0c7      	beq.n	800c8ac <__ieee754_fmodf+0x34>
 800c91c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c920:	db1f      	blt.n	800c962 <__ieee754_fmodf+0xea>
 800c922:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800c926:	db1f      	blt.n	800c968 <__ieee754_fmodf+0xf0>
 800c928:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800c92c:	327f      	adds	r2, #127	@ 0x7f
 800c92e:	4323      	orrs	r3, r4
 800c930:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800c934:	ee00 3a10 	vmov	s0, r3
 800c938:	e7b2      	b.n	800c8a0 <__ieee754_fmodf+0x28>
 800c93a:	3901      	subs	r1, #1
 800c93c:	0052      	lsls	r2, r2, #1
 800c93e:	e7c1      	b.n	800c8c4 <__ieee754_fmodf+0x4c>
 800c940:	15f1      	asrs	r1, r6, #23
 800c942:	397f      	subs	r1, #127	@ 0x7f
 800c944:	e7c0      	b.n	800c8c8 <__ieee754_fmodf+0x50>
 800c946:	3a01      	subs	r2, #1
 800c948:	007f      	lsls	r7, r7, #1
 800c94a:	e7c3      	b.n	800c8d4 <__ieee754_fmodf+0x5c>
 800c94c:	15c2      	asrs	r2, r0, #23
 800c94e:	3a7f      	subs	r2, #127	@ 0x7f
 800c950:	e7c2      	b.n	800c8d8 <__ieee754_fmodf+0x60>
 800c952:	2d00      	cmp	r5, #0
 800c954:	da02      	bge.n	800c95c <__ieee754_fmodf+0xe4>
 800c956:	005b      	lsls	r3, r3, #1
 800c958:	3901      	subs	r1, #1
 800c95a:	e7d7      	b.n	800c90c <__ieee754_fmodf+0x94>
 800c95c:	d0a6      	beq.n	800c8ac <__ieee754_fmodf+0x34>
 800c95e:	006b      	lsls	r3, r5, #1
 800c960:	e7fa      	b.n	800c958 <__ieee754_fmodf+0xe0>
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	3a01      	subs	r2, #1
 800c966:	e7d9      	b.n	800c91c <__ieee754_fmodf+0xa4>
 800c968:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800c96c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800c970:	3282      	adds	r2, #130	@ 0x82
 800c972:	4113      	asrs	r3, r2
 800c974:	4323      	orrs	r3, r4
 800c976:	e7dd      	b.n	800c934 <__ieee754_fmodf+0xbc>
 800c978:	0800dcc0 	.word	0x0800dcc0

0800c97c <with_errno>:
 800c97c:	b510      	push	{r4, lr}
 800c97e:	ed2d 8b02 	vpush	{d8}
 800c982:	eeb0 8a40 	vmov.f32	s16, s0
 800c986:	eef0 8a60 	vmov.f32	s17, s1
 800c98a:	4604      	mov	r4, r0
 800c98c:	f000 fb96 	bl	800d0bc <__errno>
 800c990:	eeb0 0a48 	vmov.f32	s0, s16
 800c994:	eef0 0a68 	vmov.f32	s1, s17
 800c998:	ecbd 8b02 	vpop	{d8}
 800c99c:	6004      	str	r4, [r0, #0]
 800c99e:	bd10      	pop	{r4, pc}

0800c9a0 <xflow>:
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	b507      	push	{r0, r1, r2, lr}
 800c9a4:	ec51 0b10 	vmov	r0, r1, d0
 800c9a8:	b183      	cbz	r3, 800c9cc <xflow+0x2c>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c9b0:	e9cd 2300 	strd	r2, r3, [sp]
 800c9b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c9b8:	f7f3 fe3e 	bl	8000638 <__aeabi_dmul>
 800c9bc:	ec41 0b10 	vmov	d0, r0, r1
 800c9c0:	2022      	movs	r0, #34	@ 0x22
 800c9c2:	b003      	add	sp, #12
 800c9c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9c8:	f7ff bfd8 	b.w	800c97c <with_errno>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	e7ee      	b.n	800c9b0 <xflow+0x10>
 800c9d2:	0000      	movs	r0, r0
 800c9d4:	0000      	movs	r0, r0
	...

0800c9d8 <__math_uflow>:
 800c9d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9e0 <__math_uflow+0x8>
 800c9dc:	f7ff bfe0 	b.w	800c9a0 <xflow>
 800c9e0:	00000000 	.word	0x00000000
 800c9e4:	10000000 	.word	0x10000000

0800c9e8 <__math_oflow>:
 800c9e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c9f0 <__math_oflow+0x8>
 800c9ec:	f7ff bfd8 	b.w	800c9a0 <xflow>
 800c9f0:	00000000 	.word	0x00000000
 800c9f4:	70000000 	.word	0x70000000

0800c9f8 <__ieee754_sqrt>:
 800c9f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9fc:	4a68      	ldr	r2, [pc, #416]	@ (800cba0 <__ieee754_sqrt+0x1a8>)
 800c9fe:	ec55 4b10 	vmov	r4, r5, d0
 800ca02:	43aa      	bics	r2, r5
 800ca04:	462b      	mov	r3, r5
 800ca06:	4621      	mov	r1, r4
 800ca08:	d110      	bne.n	800ca2c <__ieee754_sqrt+0x34>
 800ca0a:	4622      	mov	r2, r4
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	4629      	mov	r1, r5
 800ca10:	f7f3 fe12 	bl	8000638 <__aeabi_dmul>
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4620      	mov	r0, r4
 800ca1a:	4629      	mov	r1, r5
 800ca1c:	f7f3 fc56 	bl	80002cc <__adddf3>
 800ca20:	4604      	mov	r4, r0
 800ca22:	460d      	mov	r5, r1
 800ca24:	ec45 4b10 	vmov	d0, r4, r5
 800ca28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca2c:	2d00      	cmp	r5, #0
 800ca2e:	dc0e      	bgt.n	800ca4e <__ieee754_sqrt+0x56>
 800ca30:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ca34:	4322      	orrs	r2, r4
 800ca36:	d0f5      	beq.n	800ca24 <__ieee754_sqrt+0x2c>
 800ca38:	b19d      	cbz	r5, 800ca62 <__ieee754_sqrt+0x6a>
 800ca3a:	4622      	mov	r2, r4
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	4629      	mov	r1, r5
 800ca40:	f7f3 fc42 	bl	80002c8 <__aeabi_dsub>
 800ca44:	4602      	mov	r2, r0
 800ca46:	460b      	mov	r3, r1
 800ca48:	f7f3 ff20 	bl	800088c <__aeabi_ddiv>
 800ca4c:	e7e8      	b.n	800ca20 <__ieee754_sqrt+0x28>
 800ca4e:	152a      	asrs	r2, r5, #20
 800ca50:	d115      	bne.n	800ca7e <__ieee754_sqrt+0x86>
 800ca52:	2000      	movs	r0, #0
 800ca54:	e009      	b.n	800ca6a <__ieee754_sqrt+0x72>
 800ca56:	0acb      	lsrs	r3, r1, #11
 800ca58:	3a15      	subs	r2, #21
 800ca5a:	0549      	lsls	r1, r1, #21
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d0fa      	beq.n	800ca56 <__ieee754_sqrt+0x5e>
 800ca60:	e7f7      	b.n	800ca52 <__ieee754_sqrt+0x5a>
 800ca62:	462a      	mov	r2, r5
 800ca64:	e7fa      	b.n	800ca5c <__ieee754_sqrt+0x64>
 800ca66:	005b      	lsls	r3, r3, #1
 800ca68:	3001      	adds	r0, #1
 800ca6a:	02dc      	lsls	r4, r3, #11
 800ca6c:	d5fb      	bpl.n	800ca66 <__ieee754_sqrt+0x6e>
 800ca6e:	1e44      	subs	r4, r0, #1
 800ca70:	1b12      	subs	r2, r2, r4
 800ca72:	f1c0 0420 	rsb	r4, r0, #32
 800ca76:	fa21 f404 	lsr.w	r4, r1, r4
 800ca7a:	4323      	orrs	r3, r4
 800ca7c:	4081      	lsls	r1, r0
 800ca7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca82:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ca86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ca8a:	07d2      	lsls	r2, r2, #31
 800ca8c:	bf5c      	itt	pl
 800ca8e:	005b      	lslpl	r3, r3, #1
 800ca90:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ca94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ca98:	bf58      	it	pl
 800ca9a:	0049      	lslpl	r1, r1, #1
 800ca9c:	2600      	movs	r6, #0
 800ca9e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800caa2:	106d      	asrs	r5, r5, #1
 800caa4:	0049      	lsls	r1, r1, #1
 800caa6:	2016      	movs	r0, #22
 800caa8:	4632      	mov	r2, r6
 800caaa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800caae:	1917      	adds	r7, r2, r4
 800cab0:	429f      	cmp	r7, r3
 800cab2:	bfde      	ittt	le
 800cab4:	193a      	addle	r2, r7, r4
 800cab6:	1bdb      	suble	r3, r3, r7
 800cab8:	1936      	addle	r6, r6, r4
 800caba:	0fcf      	lsrs	r7, r1, #31
 800cabc:	3801      	subs	r0, #1
 800cabe:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800cac2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cac6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800caca:	d1f0      	bne.n	800caae <__ieee754_sqrt+0xb6>
 800cacc:	4604      	mov	r4, r0
 800cace:	2720      	movs	r7, #32
 800cad0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800cad4:	429a      	cmp	r2, r3
 800cad6:	eb00 0e0c 	add.w	lr, r0, ip
 800cada:	db02      	blt.n	800cae2 <__ieee754_sqrt+0xea>
 800cadc:	d113      	bne.n	800cb06 <__ieee754_sqrt+0x10e>
 800cade:	458e      	cmp	lr, r1
 800cae0:	d811      	bhi.n	800cb06 <__ieee754_sqrt+0x10e>
 800cae2:	f1be 0f00 	cmp.w	lr, #0
 800cae6:	eb0e 000c 	add.w	r0, lr, ip
 800caea:	da42      	bge.n	800cb72 <__ieee754_sqrt+0x17a>
 800caec:	2800      	cmp	r0, #0
 800caee:	db40      	blt.n	800cb72 <__ieee754_sqrt+0x17a>
 800caf0:	f102 0801 	add.w	r8, r2, #1
 800caf4:	1a9b      	subs	r3, r3, r2
 800caf6:	458e      	cmp	lr, r1
 800caf8:	bf88      	it	hi
 800cafa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800cafe:	eba1 010e 	sub.w	r1, r1, lr
 800cb02:	4464      	add	r4, ip
 800cb04:	4642      	mov	r2, r8
 800cb06:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800cb0a:	3f01      	subs	r7, #1
 800cb0c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800cb10:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800cb14:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800cb18:	d1dc      	bne.n	800cad4 <__ieee754_sqrt+0xdc>
 800cb1a:	4319      	orrs	r1, r3
 800cb1c:	d01b      	beq.n	800cb56 <__ieee754_sqrt+0x15e>
 800cb1e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800cba4 <__ieee754_sqrt+0x1ac>
 800cb22:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800cba8 <__ieee754_sqrt+0x1b0>
 800cb26:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb2a:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb2e:	f7f3 fbcb 	bl	80002c8 <__aeabi_dsub>
 800cb32:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb36:	4602      	mov	r2, r0
 800cb38:	460b      	mov	r3, r1
 800cb3a:	4640      	mov	r0, r8
 800cb3c:	4649      	mov	r1, r9
 800cb3e:	f7f3 fff7 	bl	8000b30 <__aeabi_dcmple>
 800cb42:	b140      	cbz	r0, 800cb56 <__ieee754_sqrt+0x15e>
 800cb44:	f1b4 3fff 	cmp.w	r4, #4294967295
 800cb48:	e9da 0100 	ldrd	r0, r1, [sl]
 800cb4c:	e9db 2300 	ldrd	r2, r3, [fp]
 800cb50:	d111      	bne.n	800cb76 <__ieee754_sqrt+0x17e>
 800cb52:	3601      	adds	r6, #1
 800cb54:	463c      	mov	r4, r7
 800cb56:	1072      	asrs	r2, r6, #1
 800cb58:	0863      	lsrs	r3, r4, #1
 800cb5a:	07f1      	lsls	r1, r6, #31
 800cb5c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800cb60:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800cb64:	bf48      	it	mi
 800cb66:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800cb6a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800cb6e:	4618      	mov	r0, r3
 800cb70:	e756      	b.n	800ca20 <__ieee754_sqrt+0x28>
 800cb72:	4690      	mov	r8, r2
 800cb74:	e7be      	b.n	800caf4 <__ieee754_sqrt+0xfc>
 800cb76:	f7f3 fba9 	bl	80002cc <__adddf3>
 800cb7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb7e:	4602      	mov	r2, r0
 800cb80:	460b      	mov	r3, r1
 800cb82:	4640      	mov	r0, r8
 800cb84:	4649      	mov	r1, r9
 800cb86:	f7f3 ffc9 	bl	8000b1c <__aeabi_dcmplt>
 800cb8a:	b120      	cbz	r0, 800cb96 <__ieee754_sqrt+0x19e>
 800cb8c:	1ca0      	adds	r0, r4, #2
 800cb8e:	bf08      	it	eq
 800cb90:	3601      	addeq	r6, #1
 800cb92:	3402      	adds	r4, #2
 800cb94:	e7df      	b.n	800cb56 <__ieee754_sqrt+0x15e>
 800cb96:	1c63      	adds	r3, r4, #1
 800cb98:	f023 0401 	bic.w	r4, r3, #1
 800cb9c:	e7db      	b.n	800cb56 <__ieee754_sqrt+0x15e>
 800cb9e:	bf00      	nop
 800cba0:	7ff00000 	.word	0x7ff00000
 800cba4:	200000d0 	.word	0x200000d0
 800cba8:	200000c8 	.word	0x200000c8

0800cbac <abort>:
 800cbac:	b508      	push	{r3, lr}
 800cbae:	2006      	movs	r0, #6
 800cbb0:	f000 fa12 	bl	800cfd8 <raise>
 800cbb4:	2001      	movs	r0, #1
 800cbb6:	f7f8 fb61 	bl	800527c <_exit>
	...

0800cbbc <malloc>:
 800cbbc:	4b02      	ldr	r3, [pc, #8]	@ (800cbc8 <malloc+0xc>)
 800cbbe:	4601      	mov	r1, r0
 800cbc0:	6818      	ldr	r0, [r3, #0]
 800cbc2:	f000 b82d 	b.w	800cc20 <_malloc_r>
 800cbc6:	bf00      	nop
 800cbc8:	200000e4 	.word	0x200000e4

0800cbcc <free>:
 800cbcc:	4b02      	ldr	r3, [pc, #8]	@ (800cbd8 <free+0xc>)
 800cbce:	4601      	mov	r1, r0
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f000 baaf 	b.w	800d134 <_free_r>
 800cbd6:	bf00      	nop
 800cbd8:	200000e4 	.word	0x200000e4

0800cbdc <sbrk_aligned>:
 800cbdc:	b570      	push	{r4, r5, r6, lr}
 800cbde:	4e0f      	ldr	r6, [pc, #60]	@ (800cc1c <sbrk_aligned+0x40>)
 800cbe0:	460c      	mov	r4, r1
 800cbe2:	6831      	ldr	r1, [r6, #0]
 800cbe4:	4605      	mov	r5, r0
 800cbe6:	b911      	cbnz	r1, 800cbee <sbrk_aligned+0x12>
 800cbe8:	f000 fa46 	bl	800d078 <_sbrk_r>
 800cbec:	6030      	str	r0, [r6, #0]
 800cbee:	4621      	mov	r1, r4
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	f000 fa41 	bl	800d078 <_sbrk_r>
 800cbf6:	1c43      	adds	r3, r0, #1
 800cbf8:	d103      	bne.n	800cc02 <sbrk_aligned+0x26>
 800cbfa:	f04f 34ff 	mov.w	r4, #4294967295
 800cbfe:	4620      	mov	r0, r4
 800cc00:	bd70      	pop	{r4, r5, r6, pc}
 800cc02:	1cc4      	adds	r4, r0, #3
 800cc04:	f024 0403 	bic.w	r4, r4, #3
 800cc08:	42a0      	cmp	r0, r4
 800cc0a:	d0f8      	beq.n	800cbfe <sbrk_aligned+0x22>
 800cc0c:	1a21      	subs	r1, r4, r0
 800cc0e:	4628      	mov	r0, r5
 800cc10:	f000 fa32 	bl	800d078 <_sbrk_r>
 800cc14:	3001      	adds	r0, #1
 800cc16:	d1f2      	bne.n	800cbfe <sbrk_aligned+0x22>
 800cc18:	e7ef      	b.n	800cbfa <sbrk_aligned+0x1e>
 800cc1a:	bf00      	nop
 800cc1c:	200007f4 	.word	0x200007f4

0800cc20 <_malloc_r>:
 800cc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc24:	1ccd      	adds	r5, r1, #3
 800cc26:	f025 0503 	bic.w	r5, r5, #3
 800cc2a:	3508      	adds	r5, #8
 800cc2c:	2d0c      	cmp	r5, #12
 800cc2e:	bf38      	it	cc
 800cc30:	250c      	movcc	r5, #12
 800cc32:	2d00      	cmp	r5, #0
 800cc34:	4606      	mov	r6, r0
 800cc36:	db01      	blt.n	800cc3c <_malloc_r+0x1c>
 800cc38:	42a9      	cmp	r1, r5
 800cc3a:	d904      	bls.n	800cc46 <_malloc_r+0x26>
 800cc3c:	230c      	movs	r3, #12
 800cc3e:	6033      	str	r3, [r6, #0]
 800cc40:	2000      	movs	r0, #0
 800cc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cd1c <_malloc_r+0xfc>
 800cc4a:	f000 f869 	bl	800cd20 <__malloc_lock>
 800cc4e:	f8d8 3000 	ldr.w	r3, [r8]
 800cc52:	461c      	mov	r4, r3
 800cc54:	bb44      	cbnz	r4, 800cca8 <_malloc_r+0x88>
 800cc56:	4629      	mov	r1, r5
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7ff ffbf 	bl	800cbdc <sbrk_aligned>
 800cc5e:	1c43      	adds	r3, r0, #1
 800cc60:	4604      	mov	r4, r0
 800cc62:	d158      	bne.n	800cd16 <_malloc_r+0xf6>
 800cc64:	f8d8 4000 	ldr.w	r4, [r8]
 800cc68:	4627      	mov	r7, r4
 800cc6a:	2f00      	cmp	r7, #0
 800cc6c:	d143      	bne.n	800ccf6 <_malloc_r+0xd6>
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	d04b      	beq.n	800cd0a <_malloc_r+0xea>
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	4639      	mov	r1, r7
 800cc76:	4630      	mov	r0, r6
 800cc78:	eb04 0903 	add.w	r9, r4, r3
 800cc7c:	f000 f9fc 	bl	800d078 <_sbrk_r>
 800cc80:	4581      	cmp	r9, r0
 800cc82:	d142      	bne.n	800cd0a <_malloc_r+0xea>
 800cc84:	6821      	ldr	r1, [r4, #0]
 800cc86:	1a6d      	subs	r5, r5, r1
 800cc88:	4629      	mov	r1, r5
 800cc8a:	4630      	mov	r0, r6
 800cc8c:	f7ff ffa6 	bl	800cbdc <sbrk_aligned>
 800cc90:	3001      	adds	r0, #1
 800cc92:	d03a      	beq.n	800cd0a <_malloc_r+0xea>
 800cc94:	6823      	ldr	r3, [r4, #0]
 800cc96:	442b      	add	r3, r5
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	f8d8 3000 	ldr.w	r3, [r8]
 800cc9e:	685a      	ldr	r2, [r3, #4]
 800cca0:	bb62      	cbnz	r2, 800ccfc <_malloc_r+0xdc>
 800cca2:	f8c8 7000 	str.w	r7, [r8]
 800cca6:	e00f      	b.n	800ccc8 <_malloc_r+0xa8>
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	1b52      	subs	r2, r2, r5
 800ccac:	d420      	bmi.n	800ccf0 <_malloc_r+0xd0>
 800ccae:	2a0b      	cmp	r2, #11
 800ccb0:	d917      	bls.n	800cce2 <_malloc_r+0xc2>
 800ccb2:	1961      	adds	r1, r4, r5
 800ccb4:	42a3      	cmp	r3, r4
 800ccb6:	6025      	str	r5, [r4, #0]
 800ccb8:	bf18      	it	ne
 800ccba:	6059      	strne	r1, [r3, #4]
 800ccbc:	6863      	ldr	r3, [r4, #4]
 800ccbe:	bf08      	it	eq
 800ccc0:	f8c8 1000 	streq.w	r1, [r8]
 800ccc4:	5162      	str	r2, [r4, r5]
 800ccc6:	604b      	str	r3, [r1, #4]
 800ccc8:	4630      	mov	r0, r6
 800ccca:	f000 f82f 	bl	800cd2c <__malloc_unlock>
 800ccce:	f104 000b 	add.w	r0, r4, #11
 800ccd2:	1d23      	adds	r3, r4, #4
 800ccd4:	f020 0007 	bic.w	r0, r0, #7
 800ccd8:	1ac2      	subs	r2, r0, r3
 800ccda:	bf1c      	itt	ne
 800ccdc:	1a1b      	subne	r3, r3, r0
 800ccde:	50a3      	strne	r3, [r4, r2]
 800cce0:	e7af      	b.n	800cc42 <_malloc_r+0x22>
 800cce2:	6862      	ldr	r2, [r4, #4]
 800cce4:	42a3      	cmp	r3, r4
 800cce6:	bf0c      	ite	eq
 800cce8:	f8c8 2000 	streq.w	r2, [r8]
 800ccec:	605a      	strne	r2, [r3, #4]
 800ccee:	e7eb      	b.n	800ccc8 <_malloc_r+0xa8>
 800ccf0:	4623      	mov	r3, r4
 800ccf2:	6864      	ldr	r4, [r4, #4]
 800ccf4:	e7ae      	b.n	800cc54 <_malloc_r+0x34>
 800ccf6:	463c      	mov	r4, r7
 800ccf8:	687f      	ldr	r7, [r7, #4]
 800ccfa:	e7b6      	b.n	800cc6a <_malloc_r+0x4a>
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	42a3      	cmp	r3, r4
 800cd02:	d1fb      	bne.n	800ccfc <_malloc_r+0xdc>
 800cd04:	2300      	movs	r3, #0
 800cd06:	6053      	str	r3, [r2, #4]
 800cd08:	e7de      	b.n	800ccc8 <_malloc_r+0xa8>
 800cd0a:	230c      	movs	r3, #12
 800cd0c:	6033      	str	r3, [r6, #0]
 800cd0e:	4630      	mov	r0, r6
 800cd10:	f000 f80c 	bl	800cd2c <__malloc_unlock>
 800cd14:	e794      	b.n	800cc40 <_malloc_r+0x20>
 800cd16:	6005      	str	r5, [r0, #0]
 800cd18:	e7d6      	b.n	800ccc8 <_malloc_r+0xa8>
 800cd1a:	bf00      	nop
 800cd1c:	200007f8 	.word	0x200007f8

0800cd20 <__malloc_lock>:
 800cd20:	4801      	ldr	r0, [pc, #4]	@ (800cd28 <__malloc_lock+0x8>)
 800cd22:	f000 b9f6 	b.w	800d112 <__retarget_lock_acquire_recursive>
 800cd26:	bf00      	nop
 800cd28:	2000093c 	.word	0x2000093c

0800cd2c <__malloc_unlock>:
 800cd2c:	4801      	ldr	r0, [pc, #4]	@ (800cd34 <__malloc_unlock+0x8>)
 800cd2e:	f000 b9f1 	b.w	800d114 <__retarget_lock_release_recursive>
 800cd32:	bf00      	nop
 800cd34:	2000093c 	.word	0x2000093c

0800cd38 <std>:
 800cd38:	2300      	movs	r3, #0
 800cd3a:	b510      	push	{r4, lr}
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	e9c0 3300 	strd	r3, r3, [r0]
 800cd42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd46:	6083      	str	r3, [r0, #8]
 800cd48:	8181      	strh	r1, [r0, #12]
 800cd4a:	6643      	str	r3, [r0, #100]	@ 0x64
 800cd4c:	81c2      	strh	r2, [r0, #14]
 800cd4e:	6183      	str	r3, [r0, #24]
 800cd50:	4619      	mov	r1, r3
 800cd52:	2208      	movs	r2, #8
 800cd54:	305c      	adds	r0, #92	@ 0x5c
 800cd56:	f000 f90e 	bl	800cf76 <memset>
 800cd5a:	4b0d      	ldr	r3, [pc, #52]	@ (800cd90 <std+0x58>)
 800cd5c:	6263      	str	r3, [r4, #36]	@ 0x24
 800cd5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cd94 <std+0x5c>)
 800cd60:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cd62:	4b0d      	ldr	r3, [pc, #52]	@ (800cd98 <std+0x60>)
 800cd64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cd66:	4b0d      	ldr	r3, [pc, #52]	@ (800cd9c <std+0x64>)
 800cd68:	6323      	str	r3, [r4, #48]	@ 0x30
 800cd6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cda0 <std+0x68>)
 800cd6c:	6224      	str	r4, [r4, #32]
 800cd6e:	429c      	cmp	r4, r3
 800cd70:	d006      	beq.n	800cd80 <std+0x48>
 800cd72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cd76:	4294      	cmp	r4, r2
 800cd78:	d002      	beq.n	800cd80 <std+0x48>
 800cd7a:	33d0      	adds	r3, #208	@ 0xd0
 800cd7c:	429c      	cmp	r4, r3
 800cd7e:	d105      	bne.n	800cd8c <std+0x54>
 800cd80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cd84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd88:	f000 b9c2 	b.w	800d110 <__retarget_lock_init_recursive>
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	bf00      	nop
 800cd90:	0800cef1 	.word	0x0800cef1
 800cd94:	0800cf13 	.word	0x0800cf13
 800cd98:	0800cf4b 	.word	0x0800cf4b
 800cd9c:	0800cf6f 	.word	0x0800cf6f
 800cda0:	200007fc 	.word	0x200007fc

0800cda4 <stdio_exit_handler>:
 800cda4:	4a02      	ldr	r2, [pc, #8]	@ (800cdb0 <stdio_exit_handler+0xc>)
 800cda6:	4903      	ldr	r1, [pc, #12]	@ (800cdb4 <stdio_exit_handler+0x10>)
 800cda8:	4803      	ldr	r0, [pc, #12]	@ (800cdb8 <stdio_exit_handler+0x14>)
 800cdaa:	f000 b869 	b.w	800ce80 <_fwalk_sglue>
 800cdae:	bf00      	nop
 800cdb0:	200000d8 	.word	0x200000d8
 800cdb4:	0800d871 	.word	0x0800d871
 800cdb8:	200000e8 	.word	0x200000e8

0800cdbc <cleanup_stdio>:
 800cdbc:	6841      	ldr	r1, [r0, #4]
 800cdbe:	4b0c      	ldr	r3, [pc, #48]	@ (800cdf0 <cleanup_stdio+0x34>)
 800cdc0:	4299      	cmp	r1, r3
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	d001      	beq.n	800cdcc <cleanup_stdio+0x10>
 800cdc8:	f000 fd52 	bl	800d870 <_fflush_r>
 800cdcc:	68a1      	ldr	r1, [r4, #8]
 800cdce:	4b09      	ldr	r3, [pc, #36]	@ (800cdf4 <cleanup_stdio+0x38>)
 800cdd0:	4299      	cmp	r1, r3
 800cdd2:	d002      	beq.n	800cdda <cleanup_stdio+0x1e>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 fd4b 	bl	800d870 <_fflush_r>
 800cdda:	68e1      	ldr	r1, [r4, #12]
 800cddc:	4b06      	ldr	r3, [pc, #24]	@ (800cdf8 <cleanup_stdio+0x3c>)
 800cdde:	4299      	cmp	r1, r3
 800cde0:	d004      	beq.n	800cdec <cleanup_stdio+0x30>
 800cde2:	4620      	mov	r0, r4
 800cde4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cde8:	f000 bd42 	b.w	800d870 <_fflush_r>
 800cdec:	bd10      	pop	{r4, pc}
 800cdee:	bf00      	nop
 800cdf0:	200007fc 	.word	0x200007fc
 800cdf4:	20000864 	.word	0x20000864
 800cdf8:	200008cc 	.word	0x200008cc

0800cdfc <global_stdio_init.part.0>:
 800cdfc:	b510      	push	{r4, lr}
 800cdfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ce2c <global_stdio_init.part.0+0x30>)
 800ce00:	4c0b      	ldr	r4, [pc, #44]	@ (800ce30 <global_stdio_init.part.0+0x34>)
 800ce02:	4a0c      	ldr	r2, [pc, #48]	@ (800ce34 <global_stdio_init.part.0+0x38>)
 800ce04:	601a      	str	r2, [r3, #0]
 800ce06:	4620      	mov	r0, r4
 800ce08:	2200      	movs	r2, #0
 800ce0a:	2104      	movs	r1, #4
 800ce0c:	f7ff ff94 	bl	800cd38 <std>
 800ce10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ce14:	2201      	movs	r2, #1
 800ce16:	2109      	movs	r1, #9
 800ce18:	f7ff ff8e 	bl	800cd38 <std>
 800ce1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ce20:	2202      	movs	r2, #2
 800ce22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce26:	2112      	movs	r1, #18
 800ce28:	f7ff bf86 	b.w	800cd38 <std>
 800ce2c:	20000934 	.word	0x20000934
 800ce30:	200007fc 	.word	0x200007fc
 800ce34:	0800cda5 	.word	0x0800cda5

0800ce38 <__sfp_lock_acquire>:
 800ce38:	4801      	ldr	r0, [pc, #4]	@ (800ce40 <__sfp_lock_acquire+0x8>)
 800ce3a:	f000 b96a 	b.w	800d112 <__retarget_lock_acquire_recursive>
 800ce3e:	bf00      	nop
 800ce40:	2000093d 	.word	0x2000093d

0800ce44 <__sfp_lock_release>:
 800ce44:	4801      	ldr	r0, [pc, #4]	@ (800ce4c <__sfp_lock_release+0x8>)
 800ce46:	f000 b965 	b.w	800d114 <__retarget_lock_release_recursive>
 800ce4a:	bf00      	nop
 800ce4c:	2000093d 	.word	0x2000093d

0800ce50 <__sinit>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	4604      	mov	r4, r0
 800ce54:	f7ff fff0 	bl	800ce38 <__sfp_lock_acquire>
 800ce58:	6a23      	ldr	r3, [r4, #32]
 800ce5a:	b11b      	cbz	r3, 800ce64 <__sinit+0x14>
 800ce5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce60:	f7ff bff0 	b.w	800ce44 <__sfp_lock_release>
 800ce64:	4b04      	ldr	r3, [pc, #16]	@ (800ce78 <__sinit+0x28>)
 800ce66:	6223      	str	r3, [r4, #32]
 800ce68:	4b04      	ldr	r3, [pc, #16]	@ (800ce7c <__sinit+0x2c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d1f5      	bne.n	800ce5c <__sinit+0xc>
 800ce70:	f7ff ffc4 	bl	800cdfc <global_stdio_init.part.0>
 800ce74:	e7f2      	b.n	800ce5c <__sinit+0xc>
 800ce76:	bf00      	nop
 800ce78:	0800cdbd 	.word	0x0800cdbd
 800ce7c:	20000934 	.word	0x20000934

0800ce80 <_fwalk_sglue>:
 800ce80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce84:	4607      	mov	r7, r0
 800ce86:	4688      	mov	r8, r1
 800ce88:	4614      	mov	r4, r2
 800ce8a:	2600      	movs	r6, #0
 800ce8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ce90:	f1b9 0901 	subs.w	r9, r9, #1
 800ce94:	d505      	bpl.n	800cea2 <_fwalk_sglue+0x22>
 800ce96:	6824      	ldr	r4, [r4, #0]
 800ce98:	2c00      	cmp	r4, #0
 800ce9a:	d1f7      	bne.n	800ce8c <_fwalk_sglue+0xc>
 800ce9c:	4630      	mov	r0, r6
 800ce9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cea2:	89ab      	ldrh	r3, [r5, #12]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d907      	bls.n	800ceb8 <_fwalk_sglue+0x38>
 800cea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ceac:	3301      	adds	r3, #1
 800ceae:	d003      	beq.n	800ceb8 <_fwalk_sglue+0x38>
 800ceb0:	4629      	mov	r1, r5
 800ceb2:	4638      	mov	r0, r7
 800ceb4:	47c0      	blx	r8
 800ceb6:	4306      	orrs	r6, r0
 800ceb8:	3568      	adds	r5, #104	@ 0x68
 800ceba:	e7e9      	b.n	800ce90 <_fwalk_sglue+0x10>

0800cebc <iprintf>:
 800cebc:	b40f      	push	{r0, r1, r2, r3}
 800cebe:	b507      	push	{r0, r1, r2, lr}
 800cec0:	4906      	ldr	r1, [pc, #24]	@ (800cedc <iprintf+0x20>)
 800cec2:	ab04      	add	r3, sp, #16
 800cec4:	6808      	ldr	r0, [r1, #0]
 800cec6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ceca:	6881      	ldr	r1, [r0, #8]
 800cecc:	9301      	str	r3, [sp, #4]
 800cece:	f000 f9a5 	bl	800d21c <_vfiprintf_r>
 800ced2:	b003      	add	sp, #12
 800ced4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ced8:	b004      	add	sp, #16
 800ceda:	4770      	bx	lr
 800cedc:	200000e4 	.word	0x200000e4

0800cee0 <putchar>:
 800cee0:	4b02      	ldr	r3, [pc, #8]	@ (800ceec <putchar+0xc>)
 800cee2:	4601      	mov	r1, r0
 800cee4:	6818      	ldr	r0, [r3, #0]
 800cee6:	6882      	ldr	r2, [r0, #8]
 800cee8:	f000 bcea 	b.w	800d8c0 <_putc_r>
 800ceec:	200000e4 	.word	0x200000e4

0800cef0 <__sread>:
 800cef0:	b510      	push	{r4, lr}
 800cef2:	460c      	mov	r4, r1
 800cef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cef8:	f000 f898 	bl	800d02c <_read_r>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	bfab      	itete	ge
 800cf00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cf02:	89a3      	ldrhlt	r3, [r4, #12]
 800cf04:	181b      	addge	r3, r3, r0
 800cf06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cf0a:	bfac      	ite	ge
 800cf0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cf0e:	81a3      	strhlt	r3, [r4, #12]
 800cf10:	bd10      	pop	{r4, pc}

0800cf12 <__swrite>:
 800cf12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf16:	461f      	mov	r7, r3
 800cf18:	898b      	ldrh	r3, [r1, #12]
 800cf1a:	05db      	lsls	r3, r3, #23
 800cf1c:	4605      	mov	r5, r0
 800cf1e:	460c      	mov	r4, r1
 800cf20:	4616      	mov	r6, r2
 800cf22:	d505      	bpl.n	800cf30 <__swrite+0x1e>
 800cf24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf28:	2302      	movs	r3, #2
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f000 f86c 	bl	800d008 <_lseek_r>
 800cf30:	89a3      	ldrh	r3, [r4, #12]
 800cf32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cf3a:	81a3      	strh	r3, [r4, #12]
 800cf3c:	4632      	mov	r2, r6
 800cf3e:	463b      	mov	r3, r7
 800cf40:	4628      	mov	r0, r5
 800cf42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf46:	f000 b8a7 	b.w	800d098 <_write_r>

0800cf4a <__sseek>:
 800cf4a:	b510      	push	{r4, lr}
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf52:	f000 f859 	bl	800d008 <_lseek_r>
 800cf56:	1c43      	adds	r3, r0, #1
 800cf58:	89a3      	ldrh	r3, [r4, #12]
 800cf5a:	bf15      	itete	ne
 800cf5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cf5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cf62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cf66:	81a3      	strheq	r3, [r4, #12]
 800cf68:	bf18      	it	ne
 800cf6a:	81a3      	strhne	r3, [r4, #12]
 800cf6c:	bd10      	pop	{r4, pc}

0800cf6e <__sclose>:
 800cf6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf72:	f000 b839 	b.w	800cfe8 <_close_r>

0800cf76 <memset>:
 800cf76:	4402      	add	r2, r0
 800cf78:	4603      	mov	r3, r0
 800cf7a:	4293      	cmp	r3, r2
 800cf7c:	d100      	bne.n	800cf80 <memset+0xa>
 800cf7e:	4770      	bx	lr
 800cf80:	f803 1b01 	strb.w	r1, [r3], #1
 800cf84:	e7f9      	b.n	800cf7a <memset+0x4>

0800cf86 <_raise_r>:
 800cf86:	291f      	cmp	r1, #31
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	460c      	mov	r4, r1
 800cf8e:	d904      	bls.n	800cf9a <_raise_r+0x14>
 800cf90:	2316      	movs	r3, #22
 800cf92:	6003      	str	r3, [r0, #0]
 800cf94:	f04f 30ff 	mov.w	r0, #4294967295
 800cf98:	bd38      	pop	{r3, r4, r5, pc}
 800cf9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cf9c:	b112      	cbz	r2, 800cfa4 <_raise_r+0x1e>
 800cf9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cfa2:	b94b      	cbnz	r3, 800cfb8 <_raise_r+0x32>
 800cfa4:	4628      	mov	r0, r5
 800cfa6:	f000 f865 	bl	800d074 <_getpid_r>
 800cfaa:	4622      	mov	r2, r4
 800cfac:	4601      	mov	r1, r0
 800cfae:	4628      	mov	r0, r5
 800cfb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfb4:	f000 b84c 	b.w	800d050 <_kill_r>
 800cfb8:	2b01      	cmp	r3, #1
 800cfba:	d00a      	beq.n	800cfd2 <_raise_r+0x4c>
 800cfbc:	1c59      	adds	r1, r3, #1
 800cfbe:	d103      	bne.n	800cfc8 <_raise_r+0x42>
 800cfc0:	2316      	movs	r3, #22
 800cfc2:	6003      	str	r3, [r0, #0]
 800cfc4:	2001      	movs	r0, #1
 800cfc6:	e7e7      	b.n	800cf98 <_raise_r+0x12>
 800cfc8:	2100      	movs	r1, #0
 800cfca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cfce:	4620      	mov	r0, r4
 800cfd0:	4798      	blx	r3
 800cfd2:	2000      	movs	r0, #0
 800cfd4:	e7e0      	b.n	800cf98 <_raise_r+0x12>
	...

0800cfd8 <raise>:
 800cfd8:	4b02      	ldr	r3, [pc, #8]	@ (800cfe4 <raise+0xc>)
 800cfda:	4601      	mov	r1, r0
 800cfdc:	6818      	ldr	r0, [r3, #0]
 800cfde:	f7ff bfd2 	b.w	800cf86 <_raise_r>
 800cfe2:	bf00      	nop
 800cfe4:	200000e4 	.word	0x200000e4

0800cfe8 <_close_r>:
 800cfe8:	b538      	push	{r3, r4, r5, lr}
 800cfea:	4d06      	ldr	r5, [pc, #24]	@ (800d004 <_close_r+0x1c>)
 800cfec:	2300      	movs	r3, #0
 800cfee:	4604      	mov	r4, r0
 800cff0:	4608      	mov	r0, r1
 800cff2:	602b      	str	r3, [r5, #0]
 800cff4:	f7f8 f986 	bl	8005304 <_close>
 800cff8:	1c43      	adds	r3, r0, #1
 800cffa:	d102      	bne.n	800d002 <_close_r+0x1a>
 800cffc:	682b      	ldr	r3, [r5, #0]
 800cffe:	b103      	cbz	r3, 800d002 <_close_r+0x1a>
 800d000:	6023      	str	r3, [r4, #0]
 800d002:	bd38      	pop	{r3, r4, r5, pc}
 800d004:	20000938 	.word	0x20000938

0800d008 <_lseek_r>:
 800d008:	b538      	push	{r3, r4, r5, lr}
 800d00a:	4d07      	ldr	r5, [pc, #28]	@ (800d028 <_lseek_r+0x20>)
 800d00c:	4604      	mov	r4, r0
 800d00e:	4608      	mov	r0, r1
 800d010:	4611      	mov	r1, r2
 800d012:	2200      	movs	r2, #0
 800d014:	602a      	str	r2, [r5, #0]
 800d016:	461a      	mov	r2, r3
 800d018:	f7f8 f99b 	bl	8005352 <_lseek>
 800d01c:	1c43      	adds	r3, r0, #1
 800d01e:	d102      	bne.n	800d026 <_lseek_r+0x1e>
 800d020:	682b      	ldr	r3, [r5, #0]
 800d022:	b103      	cbz	r3, 800d026 <_lseek_r+0x1e>
 800d024:	6023      	str	r3, [r4, #0]
 800d026:	bd38      	pop	{r3, r4, r5, pc}
 800d028:	20000938 	.word	0x20000938

0800d02c <_read_r>:
 800d02c:	b538      	push	{r3, r4, r5, lr}
 800d02e:	4d07      	ldr	r5, [pc, #28]	@ (800d04c <_read_r+0x20>)
 800d030:	4604      	mov	r4, r0
 800d032:	4608      	mov	r0, r1
 800d034:	4611      	mov	r1, r2
 800d036:	2200      	movs	r2, #0
 800d038:	602a      	str	r2, [r5, #0]
 800d03a:	461a      	mov	r2, r3
 800d03c:	f7f8 f929 	bl	8005292 <_read>
 800d040:	1c43      	adds	r3, r0, #1
 800d042:	d102      	bne.n	800d04a <_read_r+0x1e>
 800d044:	682b      	ldr	r3, [r5, #0]
 800d046:	b103      	cbz	r3, 800d04a <_read_r+0x1e>
 800d048:	6023      	str	r3, [r4, #0]
 800d04a:	bd38      	pop	{r3, r4, r5, pc}
 800d04c:	20000938 	.word	0x20000938

0800d050 <_kill_r>:
 800d050:	b538      	push	{r3, r4, r5, lr}
 800d052:	4d07      	ldr	r5, [pc, #28]	@ (800d070 <_kill_r+0x20>)
 800d054:	2300      	movs	r3, #0
 800d056:	4604      	mov	r4, r0
 800d058:	4608      	mov	r0, r1
 800d05a:	4611      	mov	r1, r2
 800d05c:	602b      	str	r3, [r5, #0]
 800d05e:	f7f8 f8fd 	bl	800525c <_kill>
 800d062:	1c43      	adds	r3, r0, #1
 800d064:	d102      	bne.n	800d06c <_kill_r+0x1c>
 800d066:	682b      	ldr	r3, [r5, #0]
 800d068:	b103      	cbz	r3, 800d06c <_kill_r+0x1c>
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	bd38      	pop	{r3, r4, r5, pc}
 800d06e:	bf00      	nop
 800d070:	20000938 	.word	0x20000938

0800d074 <_getpid_r>:
 800d074:	f7f8 b8ea 	b.w	800524c <_getpid>

0800d078 <_sbrk_r>:
 800d078:	b538      	push	{r3, r4, r5, lr}
 800d07a:	4d06      	ldr	r5, [pc, #24]	@ (800d094 <_sbrk_r+0x1c>)
 800d07c:	2300      	movs	r3, #0
 800d07e:	4604      	mov	r4, r0
 800d080:	4608      	mov	r0, r1
 800d082:	602b      	str	r3, [r5, #0]
 800d084:	f7f8 f972 	bl	800536c <_sbrk>
 800d088:	1c43      	adds	r3, r0, #1
 800d08a:	d102      	bne.n	800d092 <_sbrk_r+0x1a>
 800d08c:	682b      	ldr	r3, [r5, #0]
 800d08e:	b103      	cbz	r3, 800d092 <_sbrk_r+0x1a>
 800d090:	6023      	str	r3, [r4, #0]
 800d092:	bd38      	pop	{r3, r4, r5, pc}
 800d094:	20000938 	.word	0x20000938

0800d098 <_write_r>:
 800d098:	b538      	push	{r3, r4, r5, lr}
 800d09a:	4d07      	ldr	r5, [pc, #28]	@ (800d0b8 <_write_r+0x20>)
 800d09c:	4604      	mov	r4, r0
 800d09e:	4608      	mov	r0, r1
 800d0a0:	4611      	mov	r1, r2
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	602a      	str	r2, [r5, #0]
 800d0a6:	461a      	mov	r2, r3
 800d0a8:	f7f8 f910 	bl	80052cc <_write>
 800d0ac:	1c43      	adds	r3, r0, #1
 800d0ae:	d102      	bne.n	800d0b6 <_write_r+0x1e>
 800d0b0:	682b      	ldr	r3, [r5, #0]
 800d0b2:	b103      	cbz	r3, 800d0b6 <_write_r+0x1e>
 800d0b4:	6023      	str	r3, [r4, #0]
 800d0b6:	bd38      	pop	{r3, r4, r5, pc}
 800d0b8:	20000938 	.word	0x20000938

0800d0bc <__errno>:
 800d0bc:	4b01      	ldr	r3, [pc, #4]	@ (800d0c4 <__errno+0x8>)
 800d0be:	6818      	ldr	r0, [r3, #0]
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	200000e4 	.word	0x200000e4

0800d0c8 <__libc_init_array>:
 800d0c8:	b570      	push	{r4, r5, r6, lr}
 800d0ca:	4d0d      	ldr	r5, [pc, #52]	@ (800d100 <__libc_init_array+0x38>)
 800d0cc:	4c0d      	ldr	r4, [pc, #52]	@ (800d104 <__libc_init_array+0x3c>)
 800d0ce:	1b64      	subs	r4, r4, r5
 800d0d0:	10a4      	asrs	r4, r4, #2
 800d0d2:	2600      	movs	r6, #0
 800d0d4:	42a6      	cmp	r6, r4
 800d0d6:	d109      	bne.n	800d0ec <__libc_init_array+0x24>
 800d0d8:	4d0b      	ldr	r5, [pc, #44]	@ (800d108 <__libc_init_array+0x40>)
 800d0da:	4c0c      	ldr	r4, [pc, #48]	@ (800d10c <__libc_init_array+0x44>)
 800d0dc:	f000 fd3c 	bl	800db58 <_init>
 800d0e0:	1b64      	subs	r4, r4, r5
 800d0e2:	10a4      	asrs	r4, r4, #2
 800d0e4:	2600      	movs	r6, #0
 800d0e6:	42a6      	cmp	r6, r4
 800d0e8:	d105      	bne.n	800d0f6 <__libc_init_array+0x2e>
 800d0ea:	bd70      	pop	{r4, r5, r6, pc}
 800d0ec:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0f0:	4798      	blx	r3
 800d0f2:	3601      	adds	r6, #1
 800d0f4:	e7ee      	b.n	800d0d4 <__libc_init_array+0xc>
 800d0f6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0fa:	4798      	blx	r3
 800d0fc:	3601      	adds	r6, #1
 800d0fe:	e7f2      	b.n	800d0e6 <__libc_init_array+0x1e>
 800d100:	0800dd04 	.word	0x0800dd04
 800d104:	0800dd04 	.word	0x0800dd04
 800d108:	0800dd04 	.word	0x0800dd04
 800d10c:	0800dd10 	.word	0x0800dd10

0800d110 <__retarget_lock_init_recursive>:
 800d110:	4770      	bx	lr

0800d112 <__retarget_lock_acquire_recursive>:
 800d112:	4770      	bx	lr

0800d114 <__retarget_lock_release_recursive>:
 800d114:	4770      	bx	lr

0800d116 <memcpy>:
 800d116:	440a      	add	r2, r1
 800d118:	4291      	cmp	r1, r2
 800d11a:	f100 33ff 	add.w	r3, r0, #4294967295
 800d11e:	d100      	bne.n	800d122 <memcpy+0xc>
 800d120:	4770      	bx	lr
 800d122:	b510      	push	{r4, lr}
 800d124:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d128:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d12c:	4291      	cmp	r1, r2
 800d12e:	d1f9      	bne.n	800d124 <memcpy+0xe>
 800d130:	bd10      	pop	{r4, pc}
	...

0800d134 <_free_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4605      	mov	r5, r0
 800d138:	2900      	cmp	r1, #0
 800d13a:	d041      	beq.n	800d1c0 <_free_r+0x8c>
 800d13c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d140:	1f0c      	subs	r4, r1, #4
 800d142:	2b00      	cmp	r3, #0
 800d144:	bfb8      	it	lt
 800d146:	18e4      	addlt	r4, r4, r3
 800d148:	f7ff fdea 	bl	800cd20 <__malloc_lock>
 800d14c:	4a1d      	ldr	r2, [pc, #116]	@ (800d1c4 <_free_r+0x90>)
 800d14e:	6813      	ldr	r3, [r2, #0]
 800d150:	b933      	cbnz	r3, 800d160 <_free_r+0x2c>
 800d152:	6063      	str	r3, [r4, #4]
 800d154:	6014      	str	r4, [r2, #0]
 800d156:	4628      	mov	r0, r5
 800d158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d15c:	f7ff bde6 	b.w	800cd2c <__malloc_unlock>
 800d160:	42a3      	cmp	r3, r4
 800d162:	d908      	bls.n	800d176 <_free_r+0x42>
 800d164:	6820      	ldr	r0, [r4, #0]
 800d166:	1821      	adds	r1, r4, r0
 800d168:	428b      	cmp	r3, r1
 800d16a:	bf01      	itttt	eq
 800d16c:	6819      	ldreq	r1, [r3, #0]
 800d16e:	685b      	ldreq	r3, [r3, #4]
 800d170:	1809      	addeq	r1, r1, r0
 800d172:	6021      	streq	r1, [r4, #0]
 800d174:	e7ed      	b.n	800d152 <_free_r+0x1e>
 800d176:	461a      	mov	r2, r3
 800d178:	685b      	ldr	r3, [r3, #4]
 800d17a:	b10b      	cbz	r3, 800d180 <_free_r+0x4c>
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	d9fa      	bls.n	800d176 <_free_r+0x42>
 800d180:	6811      	ldr	r1, [r2, #0]
 800d182:	1850      	adds	r0, r2, r1
 800d184:	42a0      	cmp	r0, r4
 800d186:	d10b      	bne.n	800d1a0 <_free_r+0x6c>
 800d188:	6820      	ldr	r0, [r4, #0]
 800d18a:	4401      	add	r1, r0
 800d18c:	1850      	adds	r0, r2, r1
 800d18e:	4283      	cmp	r3, r0
 800d190:	6011      	str	r1, [r2, #0]
 800d192:	d1e0      	bne.n	800d156 <_free_r+0x22>
 800d194:	6818      	ldr	r0, [r3, #0]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	6053      	str	r3, [r2, #4]
 800d19a:	4408      	add	r0, r1
 800d19c:	6010      	str	r0, [r2, #0]
 800d19e:	e7da      	b.n	800d156 <_free_r+0x22>
 800d1a0:	d902      	bls.n	800d1a8 <_free_r+0x74>
 800d1a2:	230c      	movs	r3, #12
 800d1a4:	602b      	str	r3, [r5, #0]
 800d1a6:	e7d6      	b.n	800d156 <_free_r+0x22>
 800d1a8:	6820      	ldr	r0, [r4, #0]
 800d1aa:	1821      	adds	r1, r4, r0
 800d1ac:	428b      	cmp	r3, r1
 800d1ae:	bf04      	itt	eq
 800d1b0:	6819      	ldreq	r1, [r3, #0]
 800d1b2:	685b      	ldreq	r3, [r3, #4]
 800d1b4:	6063      	str	r3, [r4, #4]
 800d1b6:	bf04      	itt	eq
 800d1b8:	1809      	addeq	r1, r1, r0
 800d1ba:	6021      	streq	r1, [r4, #0]
 800d1bc:	6054      	str	r4, [r2, #4]
 800d1be:	e7ca      	b.n	800d156 <_free_r+0x22>
 800d1c0:	bd38      	pop	{r3, r4, r5, pc}
 800d1c2:	bf00      	nop
 800d1c4:	200007f8 	.word	0x200007f8

0800d1c8 <__sfputc_r>:
 800d1c8:	6893      	ldr	r3, [r2, #8]
 800d1ca:	3b01      	subs	r3, #1
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	b410      	push	{r4}
 800d1d0:	6093      	str	r3, [r2, #8]
 800d1d2:	da08      	bge.n	800d1e6 <__sfputc_r+0x1e>
 800d1d4:	6994      	ldr	r4, [r2, #24]
 800d1d6:	42a3      	cmp	r3, r4
 800d1d8:	db01      	blt.n	800d1de <__sfputc_r+0x16>
 800d1da:	290a      	cmp	r1, #10
 800d1dc:	d103      	bne.n	800d1e6 <__sfputc_r+0x1e>
 800d1de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1e2:	f000 bba1 	b.w	800d928 <__swbuf_r>
 800d1e6:	6813      	ldr	r3, [r2, #0]
 800d1e8:	1c58      	adds	r0, r3, #1
 800d1ea:	6010      	str	r0, [r2, #0]
 800d1ec:	7019      	strb	r1, [r3, #0]
 800d1ee:	4608      	mov	r0, r1
 800d1f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <__sfputs_r>:
 800d1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d1f8:	4606      	mov	r6, r0
 800d1fa:	460f      	mov	r7, r1
 800d1fc:	4614      	mov	r4, r2
 800d1fe:	18d5      	adds	r5, r2, r3
 800d200:	42ac      	cmp	r4, r5
 800d202:	d101      	bne.n	800d208 <__sfputs_r+0x12>
 800d204:	2000      	movs	r0, #0
 800d206:	e007      	b.n	800d218 <__sfputs_r+0x22>
 800d208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d20c:	463a      	mov	r2, r7
 800d20e:	4630      	mov	r0, r6
 800d210:	f7ff ffda 	bl	800d1c8 <__sfputc_r>
 800d214:	1c43      	adds	r3, r0, #1
 800d216:	d1f3      	bne.n	800d200 <__sfputs_r+0xa>
 800d218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d21c <_vfiprintf_r>:
 800d21c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d220:	460d      	mov	r5, r1
 800d222:	b09d      	sub	sp, #116	@ 0x74
 800d224:	4614      	mov	r4, r2
 800d226:	4698      	mov	r8, r3
 800d228:	4606      	mov	r6, r0
 800d22a:	b118      	cbz	r0, 800d234 <_vfiprintf_r+0x18>
 800d22c:	6a03      	ldr	r3, [r0, #32]
 800d22e:	b90b      	cbnz	r3, 800d234 <_vfiprintf_r+0x18>
 800d230:	f7ff fe0e 	bl	800ce50 <__sinit>
 800d234:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d236:	07d9      	lsls	r1, r3, #31
 800d238:	d405      	bmi.n	800d246 <_vfiprintf_r+0x2a>
 800d23a:	89ab      	ldrh	r3, [r5, #12]
 800d23c:	059a      	lsls	r2, r3, #22
 800d23e:	d402      	bmi.n	800d246 <_vfiprintf_r+0x2a>
 800d240:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d242:	f7ff ff66 	bl	800d112 <__retarget_lock_acquire_recursive>
 800d246:	89ab      	ldrh	r3, [r5, #12]
 800d248:	071b      	lsls	r3, r3, #28
 800d24a:	d501      	bpl.n	800d250 <_vfiprintf_r+0x34>
 800d24c:	692b      	ldr	r3, [r5, #16]
 800d24e:	b99b      	cbnz	r3, 800d278 <_vfiprintf_r+0x5c>
 800d250:	4629      	mov	r1, r5
 800d252:	4630      	mov	r0, r6
 800d254:	f000 fba6 	bl	800d9a4 <__swsetup_r>
 800d258:	b170      	cbz	r0, 800d278 <_vfiprintf_r+0x5c>
 800d25a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d25c:	07dc      	lsls	r4, r3, #31
 800d25e:	d504      	bpl.n	800d26a <_vfiprintf_r+0x4e>
 800d260:	f04f 30ff 	mov.w	r0, #4294967295
 800d264:	b01d      	add	sp, #116	@ 0x74
 800d266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d26a:	89ab      	ldrh	r3, [r5, #12]
 800d26c:	0598      	lsls	r0, r3, #22
 800d26e:	d4f7      	bmi.n	800d260 <_vfiprintf_r+0x44>
 800d270:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d272:	f7ff ff4f 	bl	800d114 <__retarget_lock_release_recursive>
 800d276:	e7f3      	b.n	800d260 <_vfiprintf_r+0x44>
 800d278:	2300      	movs	r3, #0
 800d27a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d27c:	2320      	movs	r3, #32
 800d27e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d282:	f8cd 800c 	str.w	r8, [sp, #12]
 800d286:	2330      	movs	r3, #48	@ 0x30
 800d288:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d438 <_vfiprintf_r+0x21c>
 800d28c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d290:	f04f 0901 	mov.w	r9, #1
 800d294:	4623      	mov	r3, r4
 800d296:	469a      	mov	sl, r3
 800d298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d29c:	b10a      	cbz	r2, 800d2a2 <_vfiprintf_r+0x86>
 800d29e:	2a25      	cmp	r2, #37	@ 0x25
 800d2a0:	d1f9      	bne.n	800d296 <_vfiprintf_r+0x7a>
 800d2a2:	ebba 0b04 	subs.w	fp, sl, r4
 800d2a6:	d00b      	beq.n	800d2c0 <_vfiprintf_r+0xa4>
 800d2a8:	465b      	mov	r3, fp
 800d2aa:	4622      	mov	r2, r4
 800d2ac:	4629      	mov	r1, r5
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	f7ff ffa1 	bl	800d1f6 <__sfputs_r>
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	f000 80a7 	beq.w	800d408 <_vfiprintf_r+0x1ec>
 800d2ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d2bc:	445a      	add	r2, fp
 800d2be:	9209      	str	r2, [sp, #36]	@ 0x24
 800d2c0:	f89a 3000 	ldrb.w	r3, [sl]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	f000 809f 	beq.w	800d408 <_vfiprintf_r+0x1ec>
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d2d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d2d4:	f10a 0a01 	add.w	sl, sl, #1
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	9307      	str	r3, [sp, #28]
 800d2dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d2e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800d2e2:	4654      	mov	r4, sl
 800d2e4:	2205      	movs	r2, #5
 800d2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ea:	4853      	ldr	r0, [pc, #332]	@ (800d438 <_vfiprintf_r+0x21c>)
 800d2ec:	f7f2 ff98 	bl	8000220 <memchr>
 800d2f0:	9a04      	ldr	r2, [sp, #16]
 800d2f2:	b9d8      	cbnz	r0, 800d32c <_vfiprintf_r+0x110>
 800d2f4:	06d1      	lsls	r1, r2, #27
 800d2f6:	bf44      	itt	mi
 800d2f8:	2320      	movmi	r3, #32
 800d2fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d2fe:	0713      	lsls	r3, r2, #28
 800d300:	bf44      	itt	mi
 800d302:	232b      	movmi	r3, #43	@ 0x2b
 800d304:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d308:	f89a 3000 	ldrb.w	r3, [sl]
 800d30c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d30e:	d015      	beq.n	800d33c <_vfiprintf_r+0x120>
 800d310:	9a07      	ldr	r2, [sp, #28]
 800d312:	4654      	mov	r4, sl
 800d314:	2000      	movs	r0, #0
 800d316:	f04f 0c0a 	mov.w	ip, #10
 800d31a:	4621      	mov	r1, r4
 800d31c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d320:	3b30      	subs	r3, #48	@ 0x30
 800d322:	2b09      	cmp	r3, #9
 800d324:	d94b      	bls.n	800d3be <_vfiprintf_r+0x1a2>
 800d326:	b1b0      	cbz	r0, 800d356 <_vfiprintf_r+0x13a>
 800d328:	9207      	str	r2, [sp, #28]
 800d32a:	e014      	b.n	800d356 <_vfiprintf_r+0x13a>
 800d32c:	eba0 0308 	sub.w	r3, r0, r8
 800d330:	fa09 f303 	lsl.w	r3, r9, r3
 800d334:	4313      	orrs	r3, r2
 800d336:	9304      	str	r3, [sp, #16]
 800d338:	46a2      	mov	sl, r4
 800d33a:	e7d2      	b.n	800d2e2 <_vfiprintf_r+0xc6>
 800d33c:	9b03      	ldr	r3, [sp, #12]
 800d33e:	1d19      	adds	r1, r3, #4
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	9103      	str	r1, [sp, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfbb      	ittet	lt
 800d348:	425b      	neglt	r3, r3
 800d34a:	f042 0202 	orrlt.w	r2, r2, #2
 800d34e:	9307      	strge	r3, [sp, #28]
 800d350:	9307      	strlt	r3, [sp, #28]
 800d352:	bfb8      	it	lt
 800d354:	9204      	strlt	r2, [sp, #16]
 800d356:	7823      	ldrb	r3, [r4, #0]
 800d358:	2b2e      	cmp	r3, #46	@ 0x2e
 800d35a:	d10a      	bne.n	800d372 <_vfiprintf_r+0x156>
 800d35c:	7863      	ldrb	r3, [r4, #1]
 800d35e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d360:	d132      	bne.n	800d3c8 <_vfiprintf_r+0x1ac>
 800d362:	9b03      	ldr	r3, [sp, #12]
 800d364:	1d1a      	adds	r2, r3, #4
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	9203      	str	r2, [sp, #12]
 800d36a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d36e:	3402      	adds	r4, #2
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d448 <_vfiprintf_r+0x22c>
 800d376:	7821      	ldrb	r1, [r4, #0]
 800d378:	2203      	movs	r2, #3
 800d37a:	4650      	mov	r0, sl
 800d37c:	f7f2 ff50 	bl	8000220 <memchr>
 800d380:	b138      	cbz	r0, 800d392 <_vfiprintf_r+0x176>
 800d382:	9b04      	ldr	r3, [sp, #16]
 800d384:	eba0 000a 	sub.w	r0, r0, sl
 800d388:	2240      	movs	r2, #64	@ 0x40
 800d38a:	4082      	lsls	r2, r0
 800d38c:	4313      	orrs	r3, r2
 800d38e:	3401      	adds	r4, #1
 800d390:	9304      	str	r3, [sp, #16]
 800d392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d396:	4829      	ldr	r0, [pc, #164]	@ (800d43c <_vfiprintf_r+0x220>)
 800d398:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d39c:	2206      	movs	r2, #6
 800d39e:	f7f2 ff3f 	bl	8000220 <memchr>
 800d3a2:	2800      	cmp	r0, #0
 800d3a4:	d03f      	beq.n	800d426 <_vfiprintf_r+0x20a>
 800d3a6:	4b26      	ldr	r3, [pc, #152]	@ (800d440 <_vfiprintf_r+0x224>)
 800d3a8:	bb1b      	cbnz	r3, 800d3f2 <_vfiprintf_r+0x1d6>
 800d3aa:	9b03      	ldr	r3, [sp, #12]
 800d3ac:	3307      	adds	r3, #7
 800d3ae:	f023 0307 	bic.w	r3, r3, #7
 800d3b2:	3308      	adds	r3, #8
 800d3b4:	9303      	str	r3, [sp, #12]
 800d3b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3b8:	443b      	add	r3, r7
 800d3ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3bc:	e76a      	b.n	800d294 <_vfiprintf_r+0x78>
 800d3be:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3c2:	460c      	mov	r4, r1
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7a8      	b.n	800d31a <_vfiprintf_r+0xfe>
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	3401      	adds	r4, #1
 800d3cc:	9305      	str	r3, [sp, #20]
 800d3ce:	4619      	mov	r1, r3
 800d3d0:	f04f 0c0a 	mov.w	ip, #10
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d3da:	3a30      	subs	r2, #48	@ 0x30
 800d3dc:	2a09      	cmp	r2, #9
 800d3de:	d903      	bls.n	800d3e8 <_vfiprintf_r+0x1cc>
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d0c6      	beq.n	800d372 <_vfiprintf_r+0x156>
 800d3e4:	9105      	str	r1, [sp, #20]
 800d3e6:	e7c4      	b.n	800d372 <_vfiprintf_r+0x156>
 800d3e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800d3ec:	4604      	mov	r4, r0
 800d3ee:	2301      	movs	r3, #1
 800d3f0:	e7f0      	b.n	800d3d4 <_vfiprintf_r+0x1b8>
 800d3f2:	ab03      	add	r3, sp, #12
 800d3f4:	9300      	str	r3, [sp, #0]
 800d3f6:	462a      	mov	r2, r5
 800d3f8:	4b12      	ldr	r3, [pc, #72]	@ (800d444 <_vfiprintf_r+0x228>)
 800d3fa:	a904      	add	r1, sp, #16
 800d3fc:	4630      	mov	r0, r6
 800d3fe:	f3af 8000 	nop.w
 800d402:	4607      	mov	r7, r0
 800d404:	1c78      	adds	r0, r7, #1
 800d406:	d1d6      	bne.n	800d3b6 <_vfiprintf_r+0x19a>
 800d408:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d40a:	07d9      	lsls	r1, r3, #31
 800d40c:	d405      	bmi.n	800d41a <_vfiprintf_r+0x1fe>
 800d40e:	89ab      	ldrh	r3, [r5, #12]
 800d410:	059a      	lsls	r2, r3, #22
 800d412:	d402      	bmi.n	800d41a <_vfiprintf_r+0x1fe>
 800d414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d416:	f7ff fe7d 	bl	800d114 <__retarget_lock_release_recursive>
 800d41a:	89ab      	ldrh	r3, [r5, #12]
 800d41c:	065b      	lsls	r3, r3, #25
 800d41e:	f53f af1f 	bmi.w	800d260 <_vfiprintf_r+0x44>
 800d422:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d424:	e71e      	b.n	800d264 <_vfiprintf_r+0x48>
 800d426:	ab03      	add	r3, sp, #12
 800d428:	9300      	str	r3, [sp, #0]
 800d42a:	462a      	mov	r2, r5
 800d42c:	4b05      	ldr	r3, [pc, #20]	@ (800d444 <_vfiprintf_r+0x228>)
 800d42e:	a904      	add	r1, sp, #16
 800d430:	4630      	mov	r0, r6
 800d432:	f000 f879 	bl	800d528 <_printf_i>
 800d436:	e7e4      	b.n	800d402 <_vfiprintf_r+0x1e6>
 800d438:	0800dcc8 	.word	0x0800dcc8
 800d43c:	0800dcd2 	.word	0x0800dcd2
 800d440:	00000000 	.word	0x00000000
 800d444:	0800d1f7 	.word	0x0800d1f7
 800d448:	0800dcce 	.word	0x0800dcce

0800d44c <_printf_common>:
 800d44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d450:	4616      	mov	r6, r2
 800d452:	4698      	mov	r8, r3
 800d454:	688a      	ldr	r2, [r1, #8]
 800d456:	690b      	ldr	r3, [r1, #16]
 800d458:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d45c:	4293      	cmp	r3, r2
 800d45e:	bfb8      	it	lt
 800d460:	4613      	movlt	r3, r2
 800d462:	6033      	str	r3, [r6, #0]
 800d464:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d468:	4607      	mov	r7, r0
 800d46a:	460c      	mov	r4, r1
 800d46c:	b10a      	cbz	r2, 800d472 <_printf_common+0x26>
 800d46e:	3301      	adds	r3, #1
 800d470:	6033      	str	r3, [r6, #0]
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	0699      	lsls	r1, r3, #26
 800d476:	bf42      	ittt	mi
 800d478:	6833      	ldrmi	r3, [r6, #0]
 800d47a:	3302      	addmi	r3, #2
 800d47c:	6033      	strmi	r3, [r6, #0]
 800d47e:	6825      	ldr	r5, [r4, #0]
 800d480:	f015 0506 	ands.w	r5, r5, #6
 800d484:	d106      	bne.n	800d494 <_printf_common+0x48>
 800d486:	f104 0a19 	add.w	sl, r4, #25
 800d48a:	68e3      	ldr	r3, [r4, #12]
 800d48c:	6832      	ldr	r2, [r6, #0]
 800d48e:	1a9b      	subs	r3, r3, r2
 800d490:	42ab      	cmp	r3, r5
 800d492:	dc26      	bgt.n	800d4e2 <_printf_common+0x96>
 800d494:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d498:	6822      	ldr	r2, [r4, #0]
 800d49a:	3b00      	subs	r3, #0
 800d49c:	bf18      	it	ne
 800d49e:	2301      	movne	r3, #1
 800d4a0:	0692      	lsls	r2, r2, #26
 800d4a2:	d42b      	bmi.n	800d4fc <_printf_common+0xb0>
 800d4a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d4a8:	4641      	mov	r1, r8
 800d4aa:	4638      	mov	r0, r7
 800d4ac:	47c8      	blx	r9
 800d4ae:	3001      	adds	r0, #1
 800d4b0:	d01e      	beq.n	800d4f0 <_printf_common+0xa4>
 800d4b2:	6823      	ldr	r3, [r4, #0]
 800d4b4:	6922      	ldr	r2, [r4, #16]
 800d4b6:	f003 0306 	and.w	r3, r3, #6
 800d4ba:	2b04      	cmp	r3, #4
 800d4bc:	bf02      	ittt	eq
 800d4be:	68e5      	ldreq	r5, [r4, #12]
 800d4c0:	6833      	ldreq	r3, [r6, #0]
 800d4c2:	1aed      	subeq	r5, r5, r3
 800d4c4:	68a3      	ldr	r3, [r4, #8]
 800d4c6:	bf0c      	ite	eq
 800d4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d4cc:	2500      	movne	r5, #0
 800d4ce:	4293      	cmp	r3, r2
 800d4d0:	bfc4      	itt	gt
 800d4d2:	1a9b      	subgt	r3, r3, r2
 800d4d4:	18ed      	addgt	r5, r5, r3
 800d4d6:	2600      	movs	r6, #0
 800d4d8:	341a      	adds	r4, #26
 800d4da:	42b5      	cmp	r5, r6
 800d4dc:	d11a      	bne.n	800d514 <_printf_common+0xc8>
 800d4de:	2000      	movs	r0, #0
 800d4e0:	e008      	b.n	800d4f4 <_printf_common+0xa8>
 800d4e2:	2301      	movs	r3, #1
 800d4e4:	4652      	mov	r2, sl
 800d4e6:	4641      	mov	r1, r8
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	47c8      	blx	r9
 800d4ec:	3001      	adds	r0, #1
 800d4ee:	d103      	bne.n	800d4f8 <_printf_common+0xac>
 800d4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f8:	3501      	adds	r5, #1
 800d4fa:	e7c6      	b.n	800d48a <_printf_common+0x3e>
 800d4fc:	18e1      	adds	r1, r4, r3
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	2030      	movs	r0, #48	@ 0x30
 800d502:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d506:	4422      	add	r2, r4
 800d508:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d50c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d510:	3302      	adds	r3, #2
 800d512:	e7c7      	b.n	800d4a4 <_printf_common+0x58>
 800d514:	2301      	movs	r3, #1
 800d516:	4622      	mov	r2, r4
 800d518:	4641      	mov	r1, r8
 800d51a:	4638      	mov	r0, r7
 800d51c:	47c8      	blx	r9
 800d51e:	3001      	adds	r0, #1
 800d520:	d0e6      	beq.n	800d4f0 <_printf_common+0xa4>
 800d522:	3601      	adds	r6, #1
 800d524:	e7d9      	b.n	800d4da <_printf_common+0x8e>
	...

0800d528 <_printf_i>:
 800d528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d52c:	7e0f      	ldrb	r7, [r1, #24]
 800d52e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d530:	2f78      	cmp	r7, #120	@ 0x78
 800d532:	4691      	mov	r9, r2
 800d534:	4680      	mov	r8, r0
 800d536:	460c      	mov	r4, r1
 800d538:	469a      	mov	sl, r3
 800d53a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d53e:	d807      	bhi.n	800d550 <_printf_i+0x28>
 800d540:	2f62      	cmp	r7, #98	@ 0x62
 800d542:	d80a      	bhi.n	800d55a <_printf_i+0x32>
 800d544:	2f00      	cmp	r7, #0
 800d546:	f000 80d2 	beq.w	800d6ee <_printf_i+0x1c6>
 800d54a:	2f58      	cmp	r7, #88	@ 0x58
 800d54c:	f000 80b9 	beq.w	800d6c2 <_printf_i+0x19a>
 800d550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d554:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d558:	e03a      	b.n	800d5d0 <_printf_i+0xa8>
 800d55a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d55e:	2b15      	cmp	r3, #21
 800d560:	d8f6      	bhi.n	800d550 <_printf_i+0x28>
 800d562:	a101      	add	r1, pc, #4	@ (adr r1, 800d568 <_printf_i+0x40>)
 800d564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d568:	0800d5c1 	.word	0x0800d5c1
 800d56c:	0800d5d5 	.word	0x0800d5d5
 800d570:	0800d551 	.word	0x0800d551
 800d574:	0800d551 	.word	0x0800d551
 800d578:	0800d551 	.word	0x0800d551
 800d57c:	0800d551 	.word	0x0800d551
 800d580:	0800d5d5 	.word	0x0800d5d5
 800d584:	0800d551 	.word	0x0800d551
 800d588:	0800d551 	.word	0x0800d551
 800d58c:	0800d551 	.word	0x0800d551
 800d590:	0800d551 	.word	0x0800d551
 800d594:	0800d6d5 	.word	0x0800d6d5
 800d598:	0800d5ff 	.word	0x0800d5ff
 800d59c:	0800d68f 	.word	0x0800d68f
 800d5a0:	0800d551 	.word	0x0800d551
 800d5a4:	0800d551 	.word	0x0800d551
 800d5a8:	0800d6f7 	.word	0x0800d6f7
 800d5ac:	0800d551 	.word	0x0800d551
 800d5b0:	0800d5ff 	.word	0x0800d5ff
 800d5b4:	0800d551 	.word	0x0800d551
 800d5b8:	0800d551 	.word	0x0800d551
 800d5bc:	0800d697 	.word	0x0800d697
 800d5c0:	6833      	ldr	r3, [r6, #0]
 800d5c2:	1d1a      	adds	r2, r3, #4
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	6032      	str	r2, [r6, #0]
 800d5c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	e09d      	b.n	800d710 <_printf_i+0x1e8>
 800d5d4:	6833      	ldr	r3, [r6, #0]
 800d5d6:	6820      	ldr	r0, [r4, #0]
 800d5d8:	1d19      	adds	r1, r3, #4
 800d5da:	6031      	str	r1, [r6, #0]
 800d5dc:	0606      	lsls	r6, r0, #24
 800d5de:	d501      	bpl.n	800d5e4 <_printf_i+0xbc>
 800d5e0:	681d      	ldr	r5, [r3, #0]
 800d5e2:	e003      	b.n	800d5ec <_printf_i+0xc4>
 800d5e4:	0645      	lsls	r5, r0, #25
 800d5e6:	d5fb      	bpl.n	800d5e0 <_printf_i+0xb8>
 800d5e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d5ec:	2d00      	cmp	r5, #0
 800d5ee:	da03      	bge.n	800d5f8 <_printf_i+0xd0>
 800d5f0:	232d      	movs	r3, #45	@ 0x2d
 800d5f2:	426d      	negs	r5, r5
 800d5f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5f8:	4859      	ldr	r0, [pc, #356]	@ (800d760 <_printf_i+0x238>)
 800d5fa:	230a      	movs	r3, #10
 800d5fc:	e011      	b.n	800d622 <_printf_i+0xfa>
 800d5fe:	6821      	ldr	r1, [r4, #0]
 800d600:	6833      	ldr	r3, [r6, #0]
 800d602:	0608      	lsls	r0, r1, #24
 800d604:	f853 5b04 	ldr.w	r5, [r3], #4
 800d608:	d402      	bmi.n	800d610 <_printf_i+0xe8>
 800d60a:	0649      	lsls	r1, r1, #25
 800d60c:	bf48      	it	mi
 800d60e:	b2ad      	uxthmi	r5, r5
 800d610:	2f6f      	cmp	r7, #111	@ 0x6f
 800d612:	4853      	ldr	r0, [pc, #332]	@ (800d760 <_printf_i+0x238>)
 800d614:	6033      	str	r3, [r6, #0]
 800d616:	bf14      	ite	ne
 800d618:	230a      	movne	r3, #10
 800d61a:	2308      	moveq	r3, #8
 800d61c:	2100      	movs	r1, #0
 800d61e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d622:	6866      	ldr	r6, [r4, #4]
 800d624:	60a6      	str	r6, [r4, #8]
 800d626:	2e00      	cmp	r6, #0
 800d628:	bfa2      	ittt	ge
 800d62a:	6821      	ldrge	r1, [r4, #0]
 800d62c:	f021 0104 	bicge.w	r1, r1, #4
 800d630:	6021      	strge	r1, [r4, #0]
 800d632:	b90d      	cbnz	r5, 800d638 <_printf_i+0x110>
 800d634:	2e00      	cmp	r6, #0
 800d636:	d04b      	beq.n	800d6d0 <_printf_i+0x1a8>
 800d638:	4616      	mov	r6, r2
 800d63a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d63e:	fb03 5711 	mls	r7, r3, r1, r5
 800d642:	5dc7      	ldrb	r7, [r0, r7]
 800d644:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d648:	462f      	mov	r7, r5
 800d64a:	42bb      	cmp	r3, r7
 800d64c:	460d      	mov	r5, r1
 800d64e:	d9f4      	bls.n	800d63a <_printf_i+0x112>
 800d650:	2b08      	cmp	r3, #8
 800d652:	d10b      	bne.n	800d66c <_printf_i+0x144>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	07df      	lsls	r7, r3, #31
 800d658:	d508      	bpl.n	800d66c <_printf_i+0x144>
 800d65a:	6923      	ldr	r3, [r4, #16]
 800d65c:	6861      	ldr	r1, [r4, #4]
 800d65e:	4299      	cmp	r1, r3
 800d660:	bfde      	ittt	le
 800d662:	2330      	movle	r3, #48	@ 0x30
 800d664:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d668:	f106 36ff 	addle.w	r6, r6, #4294967295
 800d66c:	1b92      	subs	r2, r2, r6
 800d66e:	6122      	str	r2, [r4, #16]
 800d670:	f8cd a000 	str.w	sl, [sp]
 800d674:	464b      	mov	r3, r9
 800d676:	aa03      	add	r2, sp, #12
 800d678:	4621      	mov	r1, r4
 800d67a:	4640      	mov	r0, r8
 800d67c:	f7ff fee6 	bl	800d44c <_printf_common>
 800d680:	3001      	adds	r0, #1
 800d682:	d14a      	bne.n	800d71a <_printf_i+0x1f2>
 800d684:	f04f 30ff 	mov.w	r0, #4294967295
 800d688:	b004      	add	sp, #16
 800d68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68e:	6823      	ldr	r3, [r4, #0]
 800d690:	f043 0320 	orr.w	r3, r3, #32
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	4833      	ldr	r0, [pc, #204]	@ (800d764 <_printf_i+0x23c>)
 800d698:	2778      	movs	r7, #120	@ 0x78
 800d69a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d69e:	6823      	ldr	r3, [r4, #0]
 800d6a0:	6831      	ldr	r1, [r6, #0]
 800d6a2:	061f      	lsls	r7, r3, #24
 800d6a4:	f851 5b04 	ldr.w	r5, [r1], #4
 800d6a8:	d402      	bmi.n	800d6b0 <_printf_i+0x188>
 800d6aa:	065f      	lsls	r7, r3, #25
 800d6ac:	bf48      	it	mi
 800d6ae:	b2ad      	uxthmi	r5, r5
 800d6b0:	6031      	str	r1, [r6, #0]
 800d6b2:	07d9      	lsls	r1, r3, #31
 800d6b4:	bf44      	itt	mi
 800d6b6:	f043 0320 	orrmi.w	r3, r3, #32
 800d6ba:	6023      	strmi	r3, [r4, #0]
 800d6bc:	b11d      	cbz	r5, 800d6c6 <_printf_i+0x19e>
 800d6be:	2310      	movs	r3, #16
 800d6c0:	e7ac      	b.n	800d61c <_printf_i+0xf4>
 800d6c2:	4827      	ldr	r0, [pc, #156]	@ (800d760 <_printf_i+0x238>)
 800d6c4:	e7e9      	b.n	800d69a <_printf_i+0x172>
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	f023 0320 	bic.w	r3, r3, #32
 800d6cc:	6023      	str	r3, [r4, #0]
 800d6ce:	e7f6      	b.n	800d6be <_printf_i+0x196>
 800d6d0:	4616      	mov	r6, r2
 800d6d2:	e7bd      	b.n	800d650 <_printf_i+0x128>
 800d6d4:	6833      	ldr	r3, [r6, #0]
 800d6d6:	6825      	ldr	r5, [r4, #0]
 800d6d8:	6961      	ldr	r1, [r4, #20]
 800d6da:	1d18      	adds	r0, r3, #4
 800d6dc:	6030      	str	r0, [r6, #0]
 800d6de:	062e      	lsls	r6, r5, #24
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	d501      	bpl.n	800d6e8 <_printf_i+0x1c0>
 800d6e4:	6019      	str	r1, [r3, #0]
 800d6e6:	e002      	b.n	800d6ee <_printf_i+0x1c6>
 800d6e8:	0668      	lsls	r0, r5, #25
 800d6ea:	d5fb      	bpl.n	800d6e4 <_printf_i+0x1bc>
 800d6ec:	8019      	strh	r1, [r3, #0]
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	6123      	str	r3, [r4, #16]
 800d6f2:	4616      	mov	r6, r2
 800d6f4:	e7bc      	b.n	800d670 <_printf_i+0x148>
 800d6f6:	6833      	ldr	r3, [r6, #0]
 800d6f8:	1d1a      	adds	r2, r3, #4
 800d6fa:	6032      	str	r2, [r6, #0]
 800d6fc:	681e      	ldr	r6, [r3, #0]
 800d6fe:	6862      	ldr	r2, [r4, #4]
 800d700:	2100      	movs	r1, #0
 800d702:	4630      	mov	r0, r6
 800d704:	f7f2 fd8c 	bl	8000220 <memchr>
 800d708:	b108      	cbz	r0, 800d70e <_printf_i+0x1e6>
 800d70a:	1b80      	subs	r0, r0, r6
 800d70c:	6060      	str	r0, [r4, #4]
 800d70e:	6863      	ldr	r3, [r4, #4]
 800d710:	6123      	str	r3, [r4, #16]
 800d712:	2300      	movs	r3, #0
 800d714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d718:	e7aa      	b.n	800d670 <_printf_i+0x148>
 800d71a:	6923      	ldr	r3, [r4, #16]
 800d71c:	4632      	mov	r2, r6
 800d71e:	4649      	mov	r1, r9
 800d720:	4640      	mov	r0, r8
 800d722:	47d0      	blx	sl
 800d724:	3001      	adds	r0, #1
 800d726:	d0ad      	beq.n	800d684 <_printf_i+0x15c>
 800d728:	6823      	ldr	r3, [r4, #0]
 800d72a:	079b      	lsls	r3, r3, #30
 800d72c:	d413      	bmi.n	800d756 <_printf_i+0x22e>
 800d72e:	68e0      	ldr	r0, [r4, #12]
 800d730:	9b03      	ldr	r3, [sp, #12]
 800d732:	4298      	cmp	r0, r3
 800d734:	bfb8      	it	lt
 800d736:	4618      	movlt	r0, r3
 800d738:	e7a6      	b.n	800d688 <_printf_i+0x160>
 800d73a:	2301      	movs	r3, #1
 800d73c:	4632      	mov	r2, r6
 800d73e:	4649      	mov	r1, r9
 800d740:	4640      	mov	r0, r8
 800d742:	47d0      	blx	sl
 800d744:	3001      	adds	r0, #1
 800d746:	d09d      	beq.n	800d684 <_printf_i+0x15c>
 800d748:	3501      	adds	r5, #1
 800d74a:	68e3      	ldr	r3, [r4, #12]
 800d74c:	9903      	ldr	r1, [sp, #12]
 800d74e:	1a5b      	subs	r3, r3, r1
 800d750:	42ab      	cmp	r3, r5
 800d752:	dcf2      	bgt.n	800d73a <_printf_i+0x212>
 800d754:	e7eb      	b.n	800d72e <_printf_i+0x206>
 800d756:	2500      	movs	r5, #0
 800d758:	f104 0619 	add.w	r6, r4, #25
 800d75c:	e7f5      	b.n	800d74a <_printf_i+0x222>
 800d75e:	bf00      	nop
 800d760:	0800dcd9 	.word	0x0800dcd9
 800d764:	0800dcea 	.word	0x0800dcea

0800d768 <__sflush_r>:
 800d768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d770:	0716      	lsls	r6, r2, #28
 800d772:	4605      	mov	r5, r0
 800d774:	460c      	mov	r4, r1
 800d776:	d454      	bmi.n	800d822 <__sflush_r+0xba>
 800d778:	684b      	ldr	r3, [r1, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	dc02      	bgt.n	800d784 <__sflush_r+0x1c>
 800d77e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d780:	2b00      	cmp	r3, #0
 800d782:	dd48      	ble.n	800d816 <__sflush_r+0xae>
 800d784:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d786:	2e00      	cmp	r6, #0
 800d788:	d045      	beq.n	800d816 <__sflush_r+0xae>
 800d78a:	2300      	movs	r3, #0
 800d78c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d790:	682f      	ldr	r7, [r5, #0]
 800d792:	6a21      	ldr	r1, [r4, #32]
 800d794:	602b      	str	r3, [r5, #0]
 800d796:	d030      	beq.n	800d7fa <__sflush_r+0x92>
 800d798:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	0759      	lsls	r1, r3, #29
 800d79e:	d505      	bpl.n	800d7ac <__sflush_r+0x44>
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	1ad2      	subs	r2, r2, r3
 800d7a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d7a6:	b10b      	cbz	r3, 800d7ac <__sflush_r+0x44>
 800d7a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7aa:	1ad2      	subs	r2, r2, r3
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d7b0:	6a21      	ldr	r1, [r4, #32]
 800d7b2:	4628      	mov	r0, r5
 800d7b4:	47b0      	blx	r6
 800d7b6:	1c43      	adds	r3, r0, #1
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	d106      	bne.n	800d7ca <__sflush_r+0x62>
 800d7bc:	6829      	ldr	r1, [r5, #0]
 800d7be:	291d      	cmp	r1, #29
 800d7c0:	d82b      	bhi.n	800d81a <__sflush_r+0xb2>
 800d7c2:	4a2a      	ldr	r2, [pc, #168]	@ (800d86c <__sflush_r+0x104>)
 800d7c4:	410a      	asrs	r2, r1
 800d7c6:	07d6      	lsls	r6, r2, #31
 800d7c8:	d427      	bmi.n	800d81a <__sflush_r+0xb2>
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	6062      	str	r2, [r4, #4]
 800d7ce:	04d9      	lsls	r1, r3, #19
 800d7d0:	6922      	ldr	r2, [r4, #16]
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	d504      	bpl.n	800d7e0 <__sflush_r+0x78>
 800d7d6:	1c42      	adds	r2, r0, #1
 800d7d8:	d101      	bne.n	800d7de <__sflush_r+0x76>
 800d7da:	682b      	ldr	r3, [r5, #0]
 800d7dc:	b903      	cbnz	r3, 800d7e0 <__sflush_r+0x78>
 800d7de:	6560      	str	r0, [r4, #84]	@ 0x54
 800d7e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d7e2:	602f      	str	r7, [r5, #0]
 800d7e4:	b1b9      	cbz	r1, 800d816 <__sflush_r+0xae>
 800d7e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ea:	4299      	cmp	r1, r3
 800d7ec:	d002      	beq.n	800d7f4 <__sflush_r+0x8c>
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f7ff fca0 	bl	800d134 <_free_r>
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7f8:	e00d      	b.n	800d816 <__sflush_r+0xae>
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	4628      	mov	r0, r5
 800d7fe:	47b0      	blx	r6
 800d800:	4602      	mov	r2, r0
 800d802:	1c50      	adds	r0, r2, #1
 800d804:	d1c9      	bne.n	800d79a <__sflush_r+0x32>
 800d806:	682b      	ldr	r3, [r5, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0c6      	beq.n	800d79a <__sflush_r+0x32>
 800d80c:	2b1d      	cmp	r3, #29
 800d80e:	d001      	beq.n	800d814 <__sflush_r+0xac>
 800d810:	2b16      	cmp	r3, #22
 800d812:	d11e      	bne.n	800d852 <__sflush_r+0xea>
 800d814:	602f      	str	r7, [r5, #0]
 800d816:	2000      	movs	r0, #0
 800d818:	e022      	b.n	800d860 <__sflush_r+0xf8>
 800d81a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d81e:	b21b      	sxth	r3, r3
 800d820:	e01b      	b.n	800d85a <__sflush_r+0xf2>
 800d822:	690f      	ldr	r7, [r1, #16]
 800d824:	2f00      	cmp	r7, #0
 800d826:	d0f6      	beq.n	800d816 <__sflush_r+0xae>
 800d828:	0793      	lsls	r3, r2, #30
 800d82a:	680e      	ldr	r6, [r1, #0]
 800d82c:	bf08      	it	eq
 800d82e:	694b      	ldreq	r3, [r1, #20]
 800d830:	600f      	str	r7, [r1, #0]
 800d832:	bf18      	it	ne
 800d834:	2300      	movne	r3, #0
 800d836:	eba6 0807 	sub.w	r8, r6, r7
 800d83a:	608b      	str	r3, [r1, #8]
 800d83c:	f1b8 0f00 	cmp.w	r8, #0
 800d840:	dde9      	ble.n	800d816 <__sflush_r+0xae>
 800d842:	6a21      	ldr	r1, [r4, #32]
 800d844:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d846:	4643      	mov	r3, r8
 800d848:	463a      	mov	r2, r7
 800d84a:	4628      	mov	r0, r5
 800d84c:	47b0      	blx	r6
 800d84e:	2800      	cmp	r0, #0
 800d850:	dc08      	bgt.n	800d864 <__sflush_r+0xfc>
 800d852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d85a:	81a3      	strh	r3, [r4, #12]
 800d85c:	f04f 30ff 	mov.w	r0, #4294967295
 800d860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d864:	4407      	add	r7, r0
 800d866:	eba8 0800 	sub.w	r8, r8, r0
 800d86a:	e7e7      	b.n	800d83c <__sflush_r+0xd4>
 800d86c:	dfbffffe 	.word	0xdfbffffe

0800d870 <_fflush_r>:
 800d870:	b538      	push	{r3, r4, r5, lr}
 800d872:	690b      	ldr	r3, [r1, #16]
 800d874:	4605      	mov	r5, r0
 800d876:	460c      	mov	r4, r1
 800d878:	b913      	cbnz	r3, 800d880 <_fflush_r+0x10>
 800d87a:	2500      	movs	r5, #0
 800d87c:	4628      	mov	r0, r5
 800d87e:	bd38      	pop	{r3, r4, r5, pc}
 800d880:	b118      	cbz	r0, 800d88a <_fflush_r+0x1a>
 800d882:	6a03      	ldr	r3, [r0, #32]
 800d884:	b90b      	cbnz	r3, 800d88a <_fflush_r+0x1a>
 800d886:	f7ff fae3 	bl	800ce50 <__sinit>
 800d88a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d0f3      	beq.n	800d87a <_fflush_r+0xa>
 800d892:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d894:	07d0      	lsls	r0, r2, #31
 800d896:	d404      	bmi.n	800d8a2 <_fflush_r+0x32>
 800d898:	0599      	lsls	r1, r3, #22
 800d89a:	d402      	bmi.n	800d8a2 <_fflush_r+0x32>
 800d89c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d89e:	f7ff fc38 	bl	800d112 <__retarget_lock_acquire_recursive>
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	f7ff ff5f 	bl	800d768 <__sflush_r>
 800d8aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8ac:	07da      	lsls	r2, r3, #31
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	d4e4      	bmi.n	800d87c <_fflush_r+0xc>
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	059b      	lsls	r3, r3, #22
 800d8b6:	d4e1      	bmi.n	800d87c <_fflush_r+0xc>
 800d8b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8ba:	f7ff fc2b 	bl	800d114 <__retarget_lock_release_recursive>
 800d8be:	e7dd      	b.n	800d87c <_fflush_r+0xc>

0800d8c0 <_putc_r>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	460d      	mov	r5, r1
 800d8c4:	4614      	mov	r4, r2
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	b118      	cbz	r0, 800d8d2 <_putc_r+0x12>
 800d8ca:	6a03      	ldr	r3, [r0, #32]
 800d8cc:	b90b      	cbnz	r3, 800d8d2 <_putc_r+0x12>
 800d8ce:	f7ff fabf 	bl	800ce50 <__sinit>
 800d8d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d8d4:	07d8      	lsls	r0, r3, #31
 800d8d6:	d405      	bmi.n	800d8e4 <_putc_r+0x24>
 800d8d8:	89a3      	ldrh	r3, [r4, #12]
 800d8da:	0599      	lsls	r1, r3, #22
 800d8dc:	d402      	bmi.n	800d8e4 <_putc_r+0x24>
 800d8de:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d8e0:	f7ff fc17 	bl	800d112 <__retarget_lock_acquire_recursive>
 800d8e4:	68a3      	ldr	r3, [r4, #8]
 800d8e6:	3b01      	subs	r3, #1
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	60a3      	str	r3, [r4, #8]
 800d8ec:	da05      	bge.n	800d8fa <_putc_r+0x3a>
 800d8ee:	69a2      	ldr	r2, [r4, #24]
 800d8f0:	4293      	cmp	r3, r2
 800d8f2:	db12      	blt.n	800d91a <_putc_r+0x5a>
 800d8f4:	b2eb      	uxtb	r3, r5
 800d8f6:	2b0a      	cmp	r3, #10
 800d8f8:	d00f      	beq.n	800d91a <_putc_r+0x5a>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	1c5a      	adds	r2, r3, #1
 800d8fe:	6022      	str	r2, [r4, #0]
 800d900:	701d      	strb	r5, [r3, #0]
 800d902:	b2ed      	uxtb	r5, r5
 800d904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d906:	07da      	lsls	r2, r3, #31
 800d908:	d405      	bmi.n	800d916 <_putc_r+0x56>
 800d90a:	89a3      	ldrh	r3, [r4, #12]
 800d90c:	059b      	lsls	r3, r3, #22
 800d90e:	d402      	bmi.n	800d916 <_putc_r+0x56>
 800d910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d912:	f7ff fbff 	bl	800d114 <__retarget_lock_release_recursive>
 800d916:	4628      	mov	r0, r5
 800d918:	bd70      	pop	{r4, r5, r6, pc}
 800d91a:	4629      	mov	r1, r5
 800d91c:	4622      	mov	r2, r4
 800d91e:	4630      	mov	r0, r6
 800d920:	f000 f802 	bl	800d928 <__swbuf_r>
 800d924:	4605      	mov	r5, r0
 800d926:	e7ed      	b.n	800d904 <_putc_r+0x44>

0800d928 <__swbuf_r>:
 800d928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d92a:	460e      	mov	r6, r1
 800d92c:	4614      	mov	r4, r2
 800d92e:	4605      	mov	r5, r0
 800d930:	b118      	cbz	r0, 800d93a <__swbuf_r+0x12>
 800d932:	6a03      	ldr	r3, [r0, #32]
 800d934:	b90b      	cbnz	r3, 800d93a <__swbuf_r+0x12>
 800d936:	f7ff fa8b 	bl	800ce50 <__sinit>
 800d93a:	69a3      	ldr	r3, [r4, #24]
 800d93c:	60a3      	str	r3, [r4, #8]
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	071a      	lsls	r2, r3, #28
 800d942:	d501      	bpl.n	800d948 <__swbuf_r+0x20>
 800d944:	6923      	ldr	r3, [r4, #16]
 800d946:	b943      	cbnz	r3, 800d95a <__swbuf_r+0x32>
 800d948:	4621      	mov	r1, r4
 800d94a:	4628      	mov	r0, r5
 800d94c:	f000 f82a 	bl	800d9a4 <__swsetup_r>
 800d950:	b118      	cbz	r0, 800d95a <__swbuf_r+0x32>
 800d952:	f04f 37ff 	mov.w	r7, #4294967295
 800d956:	4638      	mov	r0, r7
 800d958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d95a:	6823      	ldr	r3, [r4, #0]
 800d95c:	6922      	ldr	r2, [r4, #16]
 800d95e:	1a98      	subs	r0, r3, r2
 800d960:	6963      	ldr	r3, [r4, #20]
 800d962:	b2f6      	uxtb	r6, r6
 800d964:	4283      	cmp	r3, r0
 800d966:	4637      	mov	r7, r6
 800d968:	dc05      	bgt.n	800d976 <__swbuf_r+0x4e>
 800d96a:	4621      	mov	r1, r4
 800d96c:	4628      	mov	r0, r5
 800d96e:	f7ff ff7f 	bl	800d870 <_fflush_r>
 800d972:	2800      	cmp	r0, #0
 800d974:	d1ed      	bne.n	800d952 <__swbuf_r+0x2a>
 800d976:	68a3      	ldr	r3, [r4, #8]
 800d978:	3b01      	subs	r3, #1
 800d97a:	60a3      	str	r3, [r4, #8]
 800d97c:	6823      	ldr	r3, [r4, #0]
 800d97e:	1c5a      	adds	r2, r3, #1
 800d980:	6022      	str	r2, [r4, #0]
 800d982:	701e      	strb	r6, [r3, #0]
 800d984:	6962      	ldr	r2, [r4, #20]
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	429a      	cmp	r2, r3
 800d98a:	d004      	beq.n	800d996 <__swbuf_r+0x6e>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	07db      	lsls	r3, r3, #31
 800d990:	d5e1      	bpl.n	800d956 <__swbuf_r+0x2e>
 800d992:	2e0a      	cmp	r6, #10
 800d994:	d1df      	bne.n	800d956 <__swbuf_r+0x2e>
 800d996:	4621      	mov	r1, r4
 800d998:	4628      	mov	r0, r5
 800d99a:	f7ff ff69 	bl	800d870 <_fflush_r>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d0d9      	beq.n	800d956 <__swbuf_r+0x2e>
 800d9a2:	e7d6      	b.n	800d952 <__swbuf_r+0x2a>

0800d9a4 <__swsetup_r>:
 800d9a4:	b538      	push	{r3, r4, r5, lr}
 800d9a6:	4b29      	ldr	r3, [pc, #164]	@ (800da4c <__swsetup_r+0xa8>)
 800d9a8:	4605      	mov	r5, r0
 800d9aa:	6818      	ldr	r0, [r3, #0]
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	b118      	cbz	r0, 800d9b8 <__swsetup_r+0x14>
 800d9b0:	6a03      	ldr	r3, [r0, #32]
 800d9b2:	b90b      	cbnz	r3, 800d9b8 <__swsetup_r+0x14>
 800d9b4:	f7ff fa4c 	bl	800ce50 <__sinit>
 800d9b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9bc:	0719      	lsls	r1, r3, #28
 800d9be:	d422      	bmi.n	800da06 <__swsetup_r+0x62>
 800d9c0:	06da      	lsls	r2, r3, #27
 800d9c2:	d407      	bmi.n	800d9d4 <__swsetup_r+0x30>
 800d9c4:	2209      	movs	r2, #9
 800d9c6:	602a      	str	r2, [r5, #0]
 800d9c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d9d2:	e033      	b.n	800da3c <__swsetup_r+0x98>
 800d9d4:	0758      	lsls	r0, r3, #29
 800d9d6:	d512      	bpl.n	800d9fe <__swsetup_r+0x5a>
 800d9d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9da:	b141      	cbz	r1, 800d9ee <__swsetup_r+0x4a>
 800d9dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d9e0:	4299      	cmp	r1, r3
 800d9e2:	d002      	beq.n	800d9ea <__swsetup_r+0x46>
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	f7ff fba5 	bl	800d134 <_free_r>
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	6363      	str	r3, [r4, #52]	@ 0x34
 800d9ee:	89a3      	ldrh	r3, [r4, #12]
 800d9f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d9f4:	81a3      	strh	r3, [r4, #12]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	6063      	str	r3, [r4, #4]
 800d9fa:	6923      	ldr	r3, [r4, #16]
 800d9fc:	6023      	str	r3, [r4, #0]
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	f043 0308 	orr.w	r3, r3, #8
 800da04:	81a3      	strh	r3, [r4, #12]
 800da06:	6923      	ldr	r3, [r4, #16]
 800da08:	b94b      	cbnz	r3, 800da1e <__swsetup_r+0x7a>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da14:	d003      	beq.n	800da1e <__swsetup_r+0x7a>
 800da16:	4621      	mov	r1, r4
 800da18:	4628      	mov	r0, r5
 800da1a:	f000 f83f 	bl	800da9c <__smakebuf_r>
 800da1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da22:	f013 0201 	ands.w	r2, r3, #1
 800da26:	d00a      	beq.n	800da3e <__swsetup_r+0x9a>
 800da28:	2200      	movs	r2, #0
 800da2a:	60a2      	str	r2, [r4, #8]
 800da2c:	6962      	ldr	r2, [r4, #20]
 800da2e:	4252      	negs	r2, r2
 800da30:	61a2      	str	r2, [r4, #24]
 800da32:	6922      	ldr	r2, [r4, #16]
 800da34:	b942      	cbnz	r2, 800da48 <__swsetup_r+0xa4>
 800da36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da3a:	d1c5      	bne.n	800d9c8 <__swsetup_r+0x24>
 800da3c:	bd38      	pop	{r3, r4, r5, pc}
 800da3e:	0799      	lsls	r1, r3, #30
 800da40:	bf58      	it	pl
 800da42:	6962      	ldrpl	r2, [r4, #20]
 800da44:	60a2      	str	r2, [r4, #8]
 800da46:	e7f4      	b.n	800da32 <__swsetup_r+0x8e>
 800da48:	2000      	movs	r0, #0
 800da4a:	e7f7      	b.n	800da3c <__swsetup_r+0x98>
 800da4c:	200000e4 	.word	0x200000e4

0800da50 <__swhatbuf_r>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	460c      	mov	r4, r1
 800da54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da58:	2900      	cmp	r1, #0
 800da5a:	b096      	sub	sp, #88	@ 0x58
 800da5c:	4615      	mov	r5, r2
 800da5e:	461e      	mov	r6, r3
 800da60:	da0d      	bge.n	800da7e <__swhatbuf_r+0x2e>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800da68:	f04f 0100 	mov.w	r1, #0
 800da6c:	bf14      	ite	ne
 800da6e:	2340      	movne	r3, #64	@ 0x40
 800da70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800da74:	2000      	movs	r0, #0
 800da76:	6031      	str	r1, [r6, #0]
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	b016      	add	sp, #88	@ 0x58
 800da7c:	bd70      	pop	{r4, r5, r6, pc}
 800da7e:	466a      	mov	r2, sp
 800da80:	f000 f848 	bl	800db14 <_fstat_r>
 800da84:	2800      	cmp	r0, #0
 800da86:	dbec      	blt.n	800da62 <__swhatbuf_r+0x12>
 800da88:	9901      	ldr	r1, [sp, #4]
 800da8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800da8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800da92:	4259      	negs	r1, r3
 800da94:	4159      	adcs	r1, r3
 800da96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800da9a:	e7eb      	b.n	800da74 <__swhatbuf_r+0x24>

0800da9c <__smakebuf_r>:
 800da9c:	898b      	ldrh	r3, [r1, #12]
 800da9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800daa0:	079d      	lsls	r5, r3, #30
 800daa2:	4606      	mov	r6, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	d507      	bpl.n	800dab8 <__smakebuf_r+0x1c>
 800daa8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	6123      	str	r3, [r4, #16]
 800dab0:	2301      	movs	r3, #1
 800dab2:	6163      	str	r3, [r4, #20]
 800dab4:	b003      	add	sp, #12
 800dab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dab8:	ab01      	add	r3, sp, #4
 800daba:	466a      	mov	r2, sp
 800dabc:	f7ff ffc8 	bl	800da50 <__swhatbuf_r>
 800dac0:	9f00      	ldr	r7, [sp, #0]
 800dac2:	4605      	mov	r5, r0
 800dac4:	4639      	mov	r1, r7
 800dac6:	4630      	mov	r0, r6
 800dac8:	f7ff f8aa 	bl	800cc20 <_malloc_r>
 800dacc:	b948      	cbnz	r0, 800dae2 <__smakebuf_r+0x46>
 800dace:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad2:	059a      	lsls	r2, r3, #22
 800dad4:	d4ee      	bmi.n	800dab4 <__smakebuf_r+0x18>
 800dad6:	f023 0303 	bic.w	r3, r3, #3
 800dada:	f043 0302 	orr.w	r3, r3, #2
 800dade:	81a3      	strh	r3, [r4, #12]
 800dae0:	e7e2      	b.n	800daa8 <__smakebuf_r+0xc>
 800dae2:	89a3      	ldrh	r3, [r4, #12]
 800dae4:	6020      	str	r0, [r4, #0]
 800dae6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800daea:	81a3      	strh	r3, [r4, #12]
 800daec:	9b01      	ldr	r3, [sp, #4]
 800daee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800daf2:	b15b      	cbz	r3, 800db0c <__smakebuf_r+0x70>
 800daf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf8:	4630      	mov	r0, r6
 800dafa:	f000 f81d 	bl	800db38 <_isatty_r>
 800dafe:	b128      	cbz	r0, 800db0c <__smakebuf_r+0x70>
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	f023 0303 	bic.w	r3, r3, #3
 800db06:	f043 0301 	orr.w	r3, r3, #1
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	431d      	orrs	r5, r3
 800db10:	81a5      	strh	r5, [r4, #12]
 800db12:	e7cf      	b.n	800dab4 <__smakebuf_r+0x18>

0800db14 <_fstat_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d07      	ldr	r5, [pc, #28]	@ (800db34 <_fstat_r+0x20>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f7f7 fbfb 	bl	800531c <_fstat>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d102      	bne.n	800db30 <_fstat_r+0x1c>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b103      	cbz	r3, 800db30 <_fstat_r+0x1c>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	20000938 	.word	0x20000938

0800db38 <_isatty_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4d06      	ldr	r5, [pc, #24]	@ (800db54 <_isatty_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f7 fbfa 	bl	800533c <_isatty>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_isatty_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_isatty_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	20000938 	.word	0x20000938

0800db58 <_init>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	bf00      	nop
 800db5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5e:	bc08      	pop	{r3}
 800db60:	469e      	mov	lr, r3
 800db62:	4770      	bx	lr

0800db64 <_fini>:
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	bf00      	nop
 800db68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6a:	bc08      	pop	{r3}
 800db6c:	469e      	mov	lr, r3
 800db6e:	4770      	bx	lr
